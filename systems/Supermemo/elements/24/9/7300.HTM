<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Chapter 4. Metaprogramming</SPAN></B></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Table of Contents</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.1.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/external.html">External filters</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.1.1.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/external.html#AEN581">CPP</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.1.2.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/external.html#AEN586">M4</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.1.3.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/external.html#AEN595">Macroprocessing with your own filter</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.2.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/meta.html">Metaprogramming</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.2.1.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/meta.html#AEN618">Backends from compilers</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.2.2.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/meta.html#AEN621">The New-Jersey Machine-Code Toolkit</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">4.2.3.&nbsp;<A href="http://www.tldp.org/HOWTO/Assembly-HOWTO/meta.html#AEN625">TUNES</A></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Assembly programming is a bore, but for critical parts of programs.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">You should use the appropriate tool for the right task, so don't choose assembly when it does not fit; C, OCaml, perl, Scheme, might be a better choice in the most cases.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">However, there are cases when these tools do not give fine enough control on the machine, and assembly is useful or needed. In these cases you'll appreciate a system of macroprocessing and metaprogramming that allows recurring patterns to be factored each into one indefinitely reusable definition, which allows safer programming, automatic propagation of pattern modification, etc. Plain assembler often is not enough, even when one is doing only small routines to link with C.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">&nbsp;</SPAN>