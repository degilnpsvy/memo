<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=parts>4.2 The Parts of an Assembly Program</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">An assembly program can be divided into three sections:</P>
<UL style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI><B>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>.data</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>section</B><BR><BR>This section is for "declaring initialized data", in other words defining "variables" that already contain stuff. However this data does not change at runtime so they're not really variables. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>.data</TT>section is used for things like filenames and buffer sizes, and you can also define constants using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>EQU</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. Here you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>DB, DW, DD, DQ</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>DT</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. For example:<PRE>section .data
	message:    db 'Hello world!'     ; Declare message to contain the bytes 'Hello world!' (without quotes)
	msglength:  equ 12                ; Declare msglength to have the constant value 12
	buffersize: dw 1024               ; Declare buffersize to be a word containing 1024
</PRE></LI>
<LI><B>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>.bss</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>section</B><BR><BR>This section is where you declare your variables. You use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>RESB, RESW, RESD, RESQ</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>REST</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions to reserve uninitialized space in memory for your variables, like this:<PRE>section .bss
	filename:   resb    255           ; Reserve 255 bytes
	number:     resb    1             ; Reserve 1 byte
	bignum:     resw    1             ; Reserve 1 word (1 word = 2 bytes)
	realarray:  resq    10            ; Reserve an array of 10 reals
</PRE></LI>
<LI><B>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>.text</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>section</B><BR><BR>This is where the actual assembly code is written. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>.text</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>section must begin with the declaration<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>global _start</TT>, which just tells the kernel where the program execution begins. (It's like the main function in C or Java, only it's not a function, just a starting point.) Eg.:<PRE>section .text
	global _start

_start:
	pop    ebx        ; Here is the where the program actually begins
	.
	.
	.
</PRE></LI></UL><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As you can see, so far things are still more or less DOSish. Next we'll look at system calls in more detail, and once that is done you'll be able to write your first Linux assembly program!</SPAN>