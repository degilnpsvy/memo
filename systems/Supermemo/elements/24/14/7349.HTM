<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=syscalls>4.3 Linux System Calls</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Linux system calls are called in exactly the same way as DOS system calls:</P>
<OL style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>You put the system call number in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>EAX</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(we're dealing with 32-bit registers here, remember)</LI>
<LI>You set up the arguments to the system call in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>EBX, ECX</TT>, etc.</LI>
<LI>You call the relevant interrupt (for DOS,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>21h</TT>; for Linux,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>80h</TT>)</LI>
<LI>The result is usually returned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>EAX</TT></LI></OL><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are six registers that are used for the arguments that the system call takes. The first argument goes in EBX, the second in ECX, then EDX, ESI, EDI, and finally EBP, if there are so many. If there are more than six arguments, EBX must contain the memory location where the list of arguments is stored - but don't worry about this because it's unlikely that you'll use a syscall with more than six arguments. The wonderful thing about this scheme is that Linux uses it consistently &#8211; all system calls are designed this way, there are no confusing exceptions.</SPAN>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></P>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Some example code always helps:</P><PRE style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">	mov	eax,1       ; The exit syscall number
	mov	ebx,0       ; Have an exit code of 0
	int	80h         ; Interrupt 80h, the thing that pokes the kernel and says, "Yo, do this"
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></P>
<P style="WORD-SPACING: 0px; FONT: medium helvetica; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">But how do you find out what these system calls are, and what they do, and what arguments they take? Firstly, all the syscalls are listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>/usr/include/asm/unistd.h</TT>, together with their numbers (the value to put in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>EAX</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>before you call<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>int 80h</TT>). However, for your convenience you can simply find them in this<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html">Linux System Call Table</A>, together with some other useful information (eg. what arguments they take). Take a look at the list of syscalls &#8211; there are things like<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>sys_write</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(4),<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>sys_nice</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(34) and of course<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>sys_exit</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(1). To find out just what these things do, you can look them up in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><U>Linux manual pages</U><SPAN class=Apple-converted-space>&nbsp;</SPAN>(commonly called "the manpages"). That is what the next section is about.