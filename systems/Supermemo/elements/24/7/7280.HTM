<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">3.2.2. What is this AT&amp;T syntax</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Because GAS was invented to support a 32-bit unix compiler, it uses standard AT&amp;T syntax, which resembles a lot the syntax for standard m68k assemblers, and is standard in the UNIX world. This syntax is neither worse, nor better than the Intel syntax. It's just different. When you get used to it, you find it much more regular than the Intel syntax, though a bit boring.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Here are the major caveats about GAS syntax:</SPAN></P>
<UL style="MARGIN-TOP: 0cm" type=disc>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Register names are prefixed with&nbsp;%, so that registers are&nbsp;%eax,&nbsp;%dl&nbsp;and so on, instead of just&nbsp;eax,&nbsp;dl, etc. This makes it possible to include external C symbols directly in assembly source, without any risk of confusion, or any need for ugly underscore prefixes.</SPAN></LI>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">The order of operands is source(s) first, and destination last, as opposed to the Intel convention of destination first and sources last. Hence, what in Intel syntax ismov eax,edx&nbsp;(move contents of register&nbsp;edx&nbsp;into register&nbsp;eax) will be in GAS syntax&nbsp;mov %edx,%eax.</SPAN></LI>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">The operand size is specified as a suffix to the instruction name. The suffix is&nbsp;b&nbsp;for (8-bit) byte,&nbsp;w&nbsp;for (16-bit) word, and&nbsp;l&nbsp;for (32-bit) long. For instance, the correct syntax for the above instruction would have been&nbsp;movl %edx,%eax. However, gas does not require strict AT&amp;T syntax, so the suffix is optional when size can be guessed from register operands, and else defaults to 32-bit (with a warning).</SPAN></LI>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Immediate operands are marked with a&nbsp;$&nbsp;prefix, as in&nbsp;addl $5,%eax&nbsp;(add immediate long value 5 to register&nbsp;%eax).</SPAN></LI>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Missing operand prefix indicates that it is memory-contents; hence&nbsp;movl $foo,%eax&nbsp;puts the&nbsp;<I>address</I>&nbsp;of variable&nbsp;foo&nbsp;into register&nbsp;%eax, but&nbsp;movl foo,%eax&nbsp;puts the&nbsp;<I>contents</I>&nbsp;of variable&nbsp;foo&nbsp;into register&nbsp;%eax.</SPAN></LI>
<LI class=MsoNormal style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Indexing or indirection is done by enclosing the index register or indirection memory cell address in parentheses, as in&nbsp;testb $0x80,17(%ebp)&nbsp;(test the high bit of the byte value at offset 17 from the cell pointed to by&nbsp;%ebp).</SPAN></LI></UL>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Note: There are few programs which may help you to convert source code between AT&amp;T and Intel assembler syntaxes; some of the are capable of performing conversion in both directions.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">GAS has comprehensive documentation in TeXinfo format, which comes at least with the source distribution. Browse extracted&nbsp;.info&nbsp;pages with Emacs or whatever. There used to be a file named gas.doc or as.doc around the GAS source package, but it was merged into the TeXinfo docs. Of course, in case of doubt, the ultimate documentation is the sources themselves! A section that will particularly interest you is&nbsp;Machine Dependencies::i386-Dependent::</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Again, the sources for Linux (the OS kernel) come in as excellent examples; see under&nbsp;linux/arch/i386/&nbsp;the following files:&nbsp;kernel/*.S,&nbsp;boot/compressed/*.S,&nbsp;math-emu/*.S.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">If you are writing kind of a language, a thread package, etc., you might as well see how other languages ( OCaml, Gforth, etc.), or thread packages (QuickThreads, MIT pthreads, LinuxThreads, etc), or whatever else do it.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Finally, just compiling a C program to assembly might show you the syntax for the kind of instructions you want. See section above.</SPAN>