<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">2.3. Linux and assembly</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">As you probably noticed, in general case you don't need to use assembly language in Linux programming. Unlike DOS, you do not have to write Linux drivers in assembly (well, actually you can do it if you really want). And with modern optimizing compilers, if you care of speed optimization for different CPU's, it's much simpler to write in C. However, if you're reading this, you might have some reason to use assembly instead of C/C++.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">You may&nbsp;<I>need</I>&nbsp;to use assembly, or you may&nbsp;<I>want</I>&nbsp;to use assembly. In short, main practical (<I>need</I>) reasons of diving into the assembly realm are&nbsp;<I>small code</I>&nbsp;and&nbsp;<I>libc&nbsp;independence</I>. Impractical (<I>want</I>), and the most often reason is being just an old crazy hacker, who has twenty years old habit of doing everything in assembly language.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">However, if you're porting Linux to some embedded hardware you can be quite short at the size of whole system: you need to fit kernel,&nbsp;libc&nbsp;and all that stuff of(file|find|text|sh|etc.) utils&nbsp;into several hundreds of kilobytes, and every kilobyte costs much. So, one of the possible ways is to rewrite some (or all) parts of system in assembly, and this will really save you a lot of space. For instance, a simple&nbsp;<B>httpd</B>&nbsp;written in assembly can take less than 600 bytes; you can fit a server consisting of kernel, httpd and ftpd in 400 KB or less... Think about it.</SPAN>