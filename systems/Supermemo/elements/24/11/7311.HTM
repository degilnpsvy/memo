<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">5.1.1. Linking to GCC</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">This is the preferred way if you are developing mixed C-asm project. Check GCC docs and examples from Linux kernel&nbsp;.S&nbsp;files that go through&nbsp;gas&nbsp;(not those that go throughas86).</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">32-bit arguments are pushed down stack in reverse syntactic order (hence accessed/popped in the right order), above the 32-bit near return address.&nbsp;%ebp,&nbsp;%esi,&nbsp;%edi,&nbsp;%ebx&nbsp;are callee-saved, other registers are caller-saved;&nbsp;%eax&nbsp;is to hold the result, or&nbsp;%edx:%eax&nbsp;for 64-bit results.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">FP stack: I'm not sure, but I think result is in&nbsp;st(0), whole stack caller-saved.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Note that GCC has options to modify the calling conventions by reserving registers, having arguments in registers, not assuming the FPU, etc. Check the i386&nbsp;.info&nbsp;pages.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 12.0pt">Beware that you must then declare the&nbsp;cdecl&nbsp;or&nbsp;regparm(0)&nbsp;attribute for a function that will follow standard GCC calling conventions. See&nbsp;C Extensions::Extended Asm::&nbsp;section from the GCC info pages. See also how Linux defines its&nbsp;asmlinkage&nbsp;macro.</SPAN>