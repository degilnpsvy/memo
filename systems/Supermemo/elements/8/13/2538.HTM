&#20197;&#19979;&#31243;&#24207;&#30340;&#25191;&#34892;&#32467;&#26524;&#26159;&#65306; 
<P></P>
<P>&nbsp;1#include &lt;iostream&gt;<BR>&nbsp;2<BR>&nbsp;3using namespace std;<BR>&nbsp;4<BR>&nbsp;5class CMyString<BR>&nbsp;6{<BR>&nbsp;7public:<BR>&nbsp;8&nbsp; CMyString();<BR>&nbsp;9&nbsp; CMyString(char*);<BR>10&nbsp; CMyString(const CMyString&amp;);<BR>11&nbsp; CMyString&amp; operator=(const CMyString&amp;);<BR>12&nbsp; ~CMyString();<BR>13&nbsp; void print();<BR>14private:<BR>15&nbsp; char *pt;<BR>16};<BR>17<BR>18CMyString::CMyString()<BR>19{<BR>20&nbsp; pt=new char[1];<BR>21&nbsp; *pt=0;<BR>22&nbsp; cout&lt;&lt;pt&lt;&lt;endl;<BR>23}<BR>24<BR>25CMyString::CMyString(char* str)<BR>26{<BR>27&nbsp; char *tpt=new char[strlen(str)+1];<BR>28&nbsp; strcpy(tpt,str);<BR>29&nbsp; pt=tpt;<BR>30}<BR>31<BR>32CMyString::CMyString(const CMyString&amp; str)<BR>33{<BR>34&nbsp; if(this!=&amp;str)<BR>35&nbsp;&nbsp;&nbsp; {<BR>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *tpt=new char[strlen(str.pt)+1];<BR>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy(tpt,str.pt);<BR>38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete []pt;<BR>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pt=tpt;<BR>40&nbsp;&nbsp;&nbsp; }<BR>41}<BR>42<BR>43CMyString&amp; CMyString::operator=(const CMyString&amp; str)<BR>44{<BR>45&nbsp; if(this!=&amp;str)<BR>46&nbsp;&nbsp;&nbsp; {<BR>47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMyString temp(str);<BR>48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete []pt;<BR>49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pt=temp.pt;<BR>50&nbsp;&nbsp;&nbsp; }<BR>51&nbsp; return *this;<BR>52}<BR>53<BR>54CMyString::~CMyString()<BR>55{<BR>56&nbsp; delete []pt;<BR>57}<BR>58<BR>59void CMyString::print()<BR>60{<BR>61&nbsp; cout&lt;&lt;pt&lt;&lt;endl;<BR>62}<BR>63<BR>64int main()<BR>65{<BR>66&nbsp; CMyString a("hello");<BR>67&nbsp; CMyString b("world");<BR>68&nbsp; a.print();<BR>69&nbsp; b.print();<BR>70&nbsp; b=a;<BR>71&nbsp; a.print();<BR>72&nbsp; b.print();<BR>73}