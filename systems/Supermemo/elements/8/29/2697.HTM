<HEAD></HEAD>
<BODY><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">4.6 Managing Caches</SPAN> 
<P></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">I hope you recall from section 2.8 that a MIPS CPU has two fixed 512-MB windows onto physical memory, one cached (</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>kseg<?xml:namespace prefix = st1 /><st1:chmetcnv w:st="on" UnitName="&#8221;" SourceValue="0" HasSpace="False" Negative="False" NumberType="1" TCSC="0">0<SPAN lang=EN-US><SPAN lang=EN-US>&#8221;</SPAN></SPAN></st1:chmetcnv>) and one uncached (</SPAN>&#8220;<SPAN lang=EN-US>kseg<st1:chmetcnv w:st="on" UnitName="&#8221;" SourceValue="1" HasSpace="False" Negative="False" NumberType="1" TCSC="0">1<SPAN lang=EN-US><SPAN lang=EN-US>&#8221;</SPAN></SPAN></st1:chmetcnv>).</SPAN></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>Typically, OS code runs in kseg0 and uses kseg1 to build uncached references.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>Physical addresses higher than 512MB are not accessible here: A 64-bit CPU will have direct access through another window, or you can set up the TLB (memory management/translation hardware) to map an address. Each TLB entry can be marked to make accesses either cached or uncached.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>The cache hardware, with the help of system software, must be able to ensure that any application gets the same data as it would have in an uncached system and that any direct memory access (DMA) I/O controller (getting data directly from memory) obtains the data that the program thinks it has written.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">ve said before that in PCs and some other integrated systems the assistance of system software is often not required; it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s worth spending the money, silicon area, and extra cycles to get the hardware to make the cache genuinely transparent. Such a hardware-managed cache is said to be </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">coherent</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>The contents of the cache arrays of your CPU are typically random following power-up. Bootstrap software is responsible for initializing the caches; this can be quite an intricate process,</FONT> and there</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s some advice about it below. But <FONT class=extract>once the system is up and running, there are only three circumstances in which the CPU must intervene:</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Wingdings; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">Before DMA out of memory</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: </SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">If a device is taking data out of memory, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s vital that it gets the right data. If the data cache is write back and a program has recently written some data, some of the correct data may still be held in the D-cache but not yet be written back to main memory.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The CPU can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t see this problem, of course; if it looks at the memory locations it will get the correct data back from its cache.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>So before the DMA device starts reading data from memory, any data for that range of locations that is currently held in the D-cache must be written back to memory if necessary.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Wingdings; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">DMA into memory</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: </SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">If a device is loading data into memory, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s important to invalidate any cache entries purporting to hold copies of the memory locations concerned; otherwise, the CPU reading these locations will obtain stale cached data. The cache entries must be invalidated before the CPU uses any data from the DMA input stream, but it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s quite common to invalidate them before starting the DMA.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Wingdings; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">Writing instructions</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: </SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>When the CPU itself is storing instructions into memory for subsequent execution, you must first ensure that the instructions are written back to memory and then make sure that the corresponding I-cache locations are invalidated; the MIPS CPU has no connection between the D-cache and the I-cache.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">In the most modern MIPS CPUs the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-63; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-63">synci </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">instruction does everything that is necessary to make the instructions you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">ve just stored usable for execution</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>and it</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s a user-privilege instruction.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>If your software is going to fix these problems, it needs to be able to do two distinct operations on a cache entry.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The first operation is called </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">write-back</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">. When the data of interest is present in the cache and is dirty (marked as having been written by the CPU since it was last obtained from memory or written back to memory), then the CPU copies the data from the cache into main memory.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The second is </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-30; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-30">invalidate</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">. When the data of interest is in the cache, the CPU marks it invalid so that any subsequent access will fetch fresh data from memory.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s tempting to use the more colorful and evocative word </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>flush</SPAN>&#8221;<SPAN lang=EN-US> in this context, but it is ambiguously used to mean write-back, invalidate, or the combination of the two</SPAN>&#8212;<SPAN lang=EN-US>so we</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">ll avoid it.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">There are some much more complicated issues involved when two or more processors share memory. Most shared-memory systems are too complex for one CPU to know which locations the other will read or write, so the software can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t figure out exactly which memory regions need to be invalidated or written back. Either any shared memory must always be accessed uncached (very slow unless the amount of interaction is very limited), or the caches must have special hardware that keeps the caches (and memory) coherent. Multi-CPU cache coherency got less scary after it was systematized by a group of engineers working on the ambitious Future Bus standard in the mid-1980s. There</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s a discussion of multiprocessor mechanisms in section 15.3.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&nbsp;</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Futura-CondensedBold-0-1000-15; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-CondensedBold-0-1000-15">Why Not Manage Caches in Hardware?</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">Caches managed with hardware are described as </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">&#8220;<SPAN lang=EN-US>coherent</SPAN>&#8221;<SPAN lang=EN-US> (or, more informally, </SPAN>&#8220;<SPAN lang=EN-US>snoopy.</SPAN>&#8221;<SPAN lang=EN-US>) When another CPU or some DMA device accesses memory, the cache control logic is notified. With a CPU attached to a shared bus, this is pretty straightforward; the address bus contains most of the information you need. The cache control logic watches (snoops) the address bus even when the CPU is not using it and picks out relevant cycles. It does that by looking up its own cache to see whether it holds a copy of the location being accessed.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">If someone is </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Futura-BookOblique-0-1000-59; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-BookOblique-0-1000-59">writing </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">data that is inside the cache, the controller could pick up the data and update the cache line but is more likely to just invalidate its own, now stale, copy. If someone is reading data for which updated information is held in the cache, the controller may be able to intervene on the bus, telling the memory controller that it has a more up-to-date version.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">One major problem with doing this is that it works only within a system designed to operate that way.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">Not all systems have a single bus where all transactions appear, and bought-in I/O controllers are unlikely to conform to the right protocols.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">Also, that</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">s a lot of snooping going on. Most of the locations that CPUs work with are the CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">s private areas; they will never be read or written by any other CPU or device. We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">d like not to build hardware ingenuity into the cache, loading every cache location</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">And bus cycle with complexity that will only sometimes be used. It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">s easy to suppose that a hardware cache control mechanism must be faster than software, but that</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">s not necessarily so. A snoopy cache controller must look at the cache tags on every external cycle, which could shut the CPU out of its cache and slow it down; snoopy cache controllers usually fix this by keeping two copies of the cache tags (a private-to- CPU and public version). Software management can operate on blocks of cache locations in a single fast loop; hardware management will interleave invalidations or write-backs with CPU accesses at I/O speed, and that usually implies more arbitration overhead.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">Historically, MIPS designers took the radical RISC position: MIPS CPUs either had no cache management hardware or, where designed for multiprocessors, they had everything.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">From a 21st-century perspective, the trade-off looks different. For most classes of CPU, it looks more worthwhile to accept some hardware complexity to avoid the system software bugs that occur when programmers miss a place where the cache needs attention.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">At the time of writing (2006), there</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">s a shift in progress toward implementing </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">&#8220;<SPAN lang=EN-US>invisible</SPAN>&#8221;<SPAN lang=EN-US> caches with some level of hardware cache management on all but the smallest MIPS CPUs. If your MIPS CPU is fully coherent, you may not need this chapter at all (but very few do the whole job). And many MIPS cores that will be in production for years to come still don</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49; mso-fareast-font-family: FuturaBook-0-1000-49; mso-ascii-font-family: FuturaBook-0-1000-49">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: FuturaBook-0-1000-49; mso-font-kerning: 0pt; mso-bidi-font-family: FuturaBook-0-1000-49">t have coherent cache controllers, so the shift will take a long time to complete.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt"></SPAN></P></BODY>