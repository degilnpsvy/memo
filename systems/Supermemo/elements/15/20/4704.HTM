If your code ever tries to write instructions into memory, then execute them, you&#8217;ll need to make sure you allow for cache behavior.This can surprise you on two levels. </P>
<P>First, if you have a write-back D-cache, the instructions that your program writes out may not find their way to main memory until something triggers a write-back of the relevant cache lines. The instructions that your program wrote out could just be sitting in the D-cache at the time you try to execute them, and the CPU&#8217;s fetches simply can&#8217;t access them there. So the first step is to do write-back operations on the cache lines at which you write the instructions; that at least ensures they reach main memory. </P>
<P>The second surprise (regardless of which type of D-cache you have) is that even after writing out the new instructions to some region of main memory, your CPU&#8217;s I-cache may still hold copies of the information that used to be held in those addresses. Before you tell the CPU to execute the newly written instructions, it&#8217;s essential that your software first invalidates all the lines in the I-cache that contain information at the affected address range.