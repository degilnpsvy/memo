Using nonconsistent memory for buffers: </P>
<P>Since consistent memory will be uncached for many MIPS systems, it can lead to very poor performance to use it for large DMA buffers. So for most regular DMA, the API offers calls with names like dma map xx(). They provide buffers suitable for DMA, but the buffers won&#8217;t be I/O coherent unless the system makes univeral coherence cheap. </P>
<P>The kernel memory allocator makes sure the buffer is in a memory region that DMA can reach, segregates different buffers so they don&#8217;t share the same cache lines, and provides you with an address in a form usable by the DMA controller. </P>
<P>Since this is not coherent, there are calls that operate on the buffer and do the necessary cache invalidation or write-back operations before or after DMA: They are called dma sync xx(), and the API includes instructions on when and how to call these functions. </P>
<P>For genuinely coherent hardware, the &#8220;sync&#8221; functions are null. The language of the API documentation is unfortunate here. There is a little-used extension to the API whose function names contain the word &#8220;noncoherent,&#8221; but you should not use it unless your system is really strange. A regular MIPS system, even though it is not I/O coherent, can and should work fine with drivers using the standard API.