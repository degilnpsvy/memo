This algorithm results in more specific rules being preferred over more generic ones; for example: <PRE class=example>     %.o: %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
     
     %.o : %.f
             $(COMPILE.F) $(OUTPUT_OPTION) $&lt;
     
     lib/%.o: lib/%.c
             $(CC) -fPIC -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</PRE>
<P>Given these rules and asked to build <SAMP><SPAN class=file>bar.o</SPAN></SAMP> where both <SAMP><SPAN class=file>bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>bar.f</SPAN></SAMP> exist, <CODE>make</CODE> will <SPAN class=cloze>[...]</SPAN> 
<P>If <CODE>make</CODE> is asked to build <SAMP><SPAN class=file>lib/bar.o</SPAN></SAMP> and both <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>lib/bar.f</SPAN></SAMP> exist, then the third rule will be chosen since the stem for this rule (&#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;) is shorter than the stem for the first rule (&#8216;<SAMP><SPAN class=samp>lib/bar</SPAN></SAMP>&#8217;). If <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> does not exist then the third rule is not eligible and the second rule will be used, even though the stem is longer.