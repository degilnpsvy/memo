RISC and CISC 
<P></P>
<P>We can now have a go at defining what we mean by these overused terms. <FONT class=extract>For me, RISC is an adjective applied to machine architectures/instruction sets. In the mid-1980s, it became attached to a group of relatively new architectures in which the instruction set had been cunningly and effectively specified to make pipelined implementations efficient and successful.</FONT> It&#8217;s a useful term because of the great similarity of approach apparent in SPARC, MIPS, PowerPC, HP Precision, DEC Alpha, and (to a lesser extent) in ARM. </P>
<P>By contrast to this rather finely aimed description, CISC (Complex Instruction Set Computing) is used negatively to describe architectures whose definition has not been shaped by those insights about pipelined implementations. </P>
<P>The RISC revolution was so successful that no post-1985 architecture has abandoned the basic RISC principles;4 thus, CISC architectures are inevitably those born before 1985. In this book you can reasonably assume that something said about CISC is being said to apply to both Intel&#8217;s x86 family and Motorola&#8217;s 680x0.</P>
<P><FONT class=extract>Both RISC and CISC&nbsp;terms are corrupted when they are applied not to instruction sets but to implementations. It&#8217;s certainly true that Intel accelerated the performance of its far-from-RISC x86 family by applying implementation tricks pioneered by RISC builders. But to describe these implementations as having a RISC core is misleading.</FONT>