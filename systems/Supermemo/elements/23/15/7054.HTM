Consider the workflow of moving a function from one file to another. If you perform the removal with one commit and then follow with a second commit to add it back, there remains a small &#8220;semantic gap&#8221; in the history of your repository during which time the function is gone. Two commits in the other order is problematic, too. In either case, before the first commit and after the second your code is semantically consistent, but after the first commit, the code is faulty. 
<P></P>
<P>However, with an <SPAN class=cloze>[...]</SPAN>that simultaneously deletes and adds the function, no such semantic gap appears in the history. You can learn how best to construct and organize your commits in Chapter 10.