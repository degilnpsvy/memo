Unambiguous proof of guilt: After any exception, the CPU control register EPC points to the correct place to restart execution after the exception is dealt with. In most cases, it points to the exception victim, but if the victim was in a branch delay slot, EPC points to the preceding branch instruction: Returning to the branch instruction will re-execute the victim instruction, but returning to the victim would cause the branch to be ignored. When the victim is in a branch delay slot, the cause register bit Cause(BD) is set. It may seem obvious that it should be easy to find the victim, but on some heavily pipelined CPUs it may not be possible. </P>
<P>Exceptions appear in instruction sequence: This would be obvious for a nonpipelined CPU, but exceptions can arise at several different stages of execution, creating a potential hazard. For example, if a load instruction suffers an address exception, this won&#8217;t happen until a pipeline stage where the address translation would have been complete&#8212;and that&#8217;s usually late. If the next instruction hits an address problem on an instruction fetch (right at the start of the pipeline), the exception event affecting the second-in-sequence instruction will actually happen first. To avoid this problem, an exception that is detected early is not acted on immediately; the event is just noted and passed along the pipeline. In most CPU designs, one particular pipeline stage is designated as the place you detect exceptions. If an older instruction&#8217;s late-detected event reaches this finish line while our exception note is making its way down the pipeline, the exception note just gets discarded. In the case above, the instruction-fetch address problem is forgotten&#8212;it will likely happen again when we finish handling the victim instruction&#8217;s problem and re-execute the victim and subsequent instructions. </P>
<P>Subsequent instructions nullified: Because of the pipelining, instructions lying in sequence after the victim at EPC have been started. But you are guaranteed that no effects produced by these instructions will be visible in the registers or CPU state, and no effect at all will occur that will prevent execution, properly restarted at EPC, from continuing just as if the exception had not happened<FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt">.</SPAN></FONT>