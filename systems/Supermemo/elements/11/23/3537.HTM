Jump instructions: 
<P></P>
<P>The limited 32-bit instruction length is a particular problem for branches in an architecture that wants to support very large programs. <FONT class=extract>The smallest opcode field in a MIPS instruction is 6 bits, leaving 26 bits to define the target of a jump. </FONT><FONT class=extract>Since all instructions are four-byte aligned in memory, the two least significant address bits need not be stored, allowing an address range of 2^28 = 256 MB. Rather than make this branch PC relative, this is interpreted as an absolute address within a 256-MB segment.</FONT> That&#8217;s inconvenient for single programs larger than this, although it hasn&#8217;t been much of a problem yet! <FONT class=extract>Branches out of segment can be achieved by using a jump register instruction, which can go to any 32-bit address.</FONT> <FONT class=extract>Conditional branches have only a 16-bit displacement field&#8212;giving a 2^18-byte range, since instructions are four-byte aligned&#8212;which is interpreted as a signed PC-relative displacement. Compilers can only code a simple conditional branch instruction if they know that the target will be within 128 KB of the instruction following the branch.</FONT>