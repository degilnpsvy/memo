<SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">However, even in MIPS not all exceptions were ever equal, and differences have grown as the architecture has developed. So we can make some distinctions:</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">TLB refill of user-privilege address</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: There is one particularly frequent exception in a protected OS, related to the address translation system (see Chapter 6). The TLB hardware only holds a modest number of address translations, and in a heavily used system running a virtual memory OS, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s common for the application program to run on to an address whose translation is not recorded in the TLB</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>an event called a </SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">TLB miss </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">(because the TLB is used as a software-managed cache).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The use of software to handle this condition was controversial when RISC CPUs were introduced, and MIPS CPUs provide significant support for a preferred scheme for TLB refill. The hardware helps out enough that the exception handler for the preferred refill scheme can run in as few as 13 clock cycles.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">As part of this, common classes of TLB refill are given an entry point different from all other exceptions, so that the finely tuned refill code doesn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t have to waste time figuring out what kind of exception has happened.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">TLB refill for 64-bit address spaces</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: Memory translation for tasks wanting to take advantage of the larger program address space available on 64-bit CPUs uses a slightly different register layout and a different TLB refill routine; MIPS calls this an XTLB refill (</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>X</SPAN>&#8221;<SPAN lang=EN-US> for extended, I guess). Again, a desire to keep this very efficient makes a separate entry point useful. </SPAN></SPAN></P>
<P><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><SPAN lang=EN-US></SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">Uncached alternative entry points</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: For good performance on exceptions, the interrupt entry point must be in cached memory, but this is highly undesirable during system bootstrap; from reset or power-up, the caches are unusable until initialized. If you want a robust and self-diagnosing start-up sequence, you have to use uncached read-only memory entry points for exceptions detected in early bootstrap. In MIPS CPUs there is no uncached </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>mode</SPAN>&#8221;&#8212;<SPAN lang=EN-US>there are uncached program memory regions instead</SPAN>&#8212;<SPAN lang=EN-US>so there</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s a mode bit </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR(BEV) </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">that reallocates the exception entry points into the uncached, start-up-safe kseg1 region. </SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">Parity/ECC error</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: MIPS32 CPUs may detect a data error (usually in data arriving from main memory, but often not noticed until it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s used from cache) and take a trap. It would be silly to vector through a cached location to handle a cache error, so regardless of the state of </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR(BEV) </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">cache error exception </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">entry point is in uncached space. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">Reset</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: For many purposes, it makes sense to see reset as another exception, particularly when many CPUs use the same entry point for </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">cold reset </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">(where the CPU is completely reconfigured; indistinguishable from power-up) and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">warm reset </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">(where the software is completely reinitialized). In fact, </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">nonmaskable interrupt </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">(NMI) turns out to be a slightly weaker version of warm reset, differing only in that it waits for the current instruction and any pending load/store to finish before taking effect. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">Interrupt</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: As an option in MIPS32 (and some earlier CPUs from IDT and PMC-Sierra), you can set the CPU to dispatch interrupt exceptions to a separate entry point. This is convenient, though little used: Perhaps software authors can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t bring themselves to special-case their OS for a feature that is not universally available.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">Further, in some of these CPUs you can enable vectored interrupt operation</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>multiple entry points to be used by different interrupts. This is a more substantial change; as explained elsewhere in this chapter, the MIPS tradition was that interrupts were only prioritized in software. But if you have two active interrupts and have to choose an interrupt entry point, the hardware must decide which has the higher priority. This change is therefore significantly more disruptive to software, since the software loses control over interrupt priority; your OS maintainer and hardware engineers will have to liaise closely.</SPAN></SPAN>