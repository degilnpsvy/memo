<H1 itemprop="name">Repo command reference</H1>
<DIV id=jd-content sizcache09986151374916414="3" sizset="1">
<DIV class=jd-descr itemprop="articleBody" sizcache09986151374916414="3" sizset="1"><!--
    Copyright 2013 The Android Open Source Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<DIV id=qv-wrapper>
<DIV id=qv sizcache09986151374916414="0" sizset="1">
<H2 jQuery1720177795137126255="20">In this document</H2>
<OL id=auto-toc>
<LI><A href="http://source.android.com/source/using-repo.html#init">init</A> 
<LI><A href="http://source.android.com/source/using-repo.html#sync">sync</A> 
<LI><A href="http://source.android.com/source/using-repo.html#upload">upload</A> 
<LI><A href="http://source.android.com/source/using-repo.html#diff">diff</A> 
<LI><A href="http://source.android.com/source/using-repo.html#download">download</A> 
<LI><A href="http://source.android.com/source/using-repo.html#forall">forall</A> 
<LI><A href="http://source.android.com/source/using-repo.html#prune">prune</A> 
<LI><A href="http://source.android.com/source/using-repo.html#start">start</A> 
<LI><A href="http://source.android.com/source/using-repo.html#status">status</A></LI></OL></DIV></DIV>
<P>Repo usage takes the following form: </P><PRE class=prettyprint><CODE><SPAN class=pln>repo COMMAND OPTIONS&nbsp;<BR></SPAN></CODE></PRE>
<P>Optional elements are shown in brackets [ ]. Once Repo is installed, you can get information about any command by running </P><PRE class=prettyprint><CODE><SPAN class=pln>repo help COMMAND&nbsp;<BR></SPAN></CODE></PRE>
<P>Many commands take a project list as an argument. You can specify project-list as a list of names or a list of paths to local source directories for the projects:</P><PRE class=prettyprint><CODE><SPAN class=pln>repo sync </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT0 PROJECT1 </SPAN><SPAN class=pun>...</SPAN><SPAN class=pln> PROJECTN</SPAN><SPAN class=pun>]</SPAN><SPAN class=pln>&nbsp;<BR>repo sync </SPAN><SPAN class=pun>[</SPAN><SPAN class=str>/PATH/</SPAN><SPAN class=pln>TO</SPAN><SPAN class=pun>/</SPAN><SPAN class=pln>PROJECT0 </SPAN><SPAN class=pun>...</SPAN><SPAN class=pln> </SPAN><SPAN class=pun>/</SPAN><SPAN class=pln>PATH</SPAN><SPAN class=pun>/</SPAN><SPAN class=pln>TO</SPAN><SPAN class=pun>/</SPAN><SPAN class=pln>PROJECTN</SPAN><SPAN class=pun>]</SPAN><SPAN class=pln>&nbsp;<BR></SPAN></CODE></PRE>
<H2 id=init style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="21"><FONT class=extract>init</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>$ repo init </SPAN><SPAN class=pun>-</SPAN><SPAN class=pln>u URL </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>OPTIONS</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Installs Repo in the current directory. This creates a <CODE>.repo/</CODE> directory that contains Git repositories for the Repo source code and the standard Android manifest files. The <CODE>.repo/</CODE> directory also contains <CODE>manifest.xml</CODE>, which is a symlink to the selected manifest in the <CODE>.repo/manifests/</CODE> directory.</FONT></P>
<P><FONT class=extract>Options:</FONT></P>
<UL>
<LI>
<P><FONT class=extract><CODE>-u</CODE>: specify a URL from which to retrieve a manifest repository. The common manifest can be found at <CODE>https://android.googlesource.com/platform/manifest</CODE></FONT></P>
<LI>
<P><FONT class=extract><CODE>-m</CODE>: select a manifest file within the repository. If no manifest name is selected, the default is default.xml. </FONT></P>
<LI>
<P><FONT class=extract><CODE>-b</CODE>: specify a revision, i.e., a particular manifest-branch.</FONT></P></LI></UL>
<P><EM><FONT class=extract>Note: For all remaining Repo commands, the current working directory must either be the parent directory of <CODE>.repo/</CODE> or a subdirectory of the parent directory.</FONT></EM></P>
<H2 id=sync style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="22"><FONT class=extract>sync</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo sync </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Downloads new changes and updates the working files in your local environment. If you run <CODE>repo sync</CODE> without any arguments, it will synchronize the files for all the projects.</FONT></P>
<P><FONT class=extract>When you run <CODE>repo sync</CODE>, this is what happens:</FONT></P>
<UL>
<LI>
<P><FONT class=extract>If the project has never been synchronized, then <CODE>repo sync</CODE> is equivalent to <CODE>git clone</CODE>. All branches in the remote repository are copied to the local project directory.</FONT></P>
<LI>
<P><FONT class=extract>If the project has already been synchronized once, then <CODE>repo sync</CODE> is equivalent to:</FONT></P><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>git remote update &nbsp;<BR>git rebase origin</SPAN><SPAN class=pun>/</SPAN></FONT><SPAN class=pln><FONT class=extract>BRANCH&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>where <CODE>BRANCH</CODE> is the currently checked-out branch in the local project directory. If the local branch is not tracking a branch in the remote repository, then no synchronization will occur for the project.</FONT></P>
<LI>
<P><FONT class=extract>If the git rebase operation results in merge conflicts, you will need to use the normal Git commands (for example, <CODE>git rebase --continue</CODE>) to resolve the conflicts.</FONT></P></LI></UL>
<P><FONT class=extract>After a successful <CODE>repo sync</CODE>, the code in specified projects will be up to date with the code in the remote repository.</FONT></P>
<P><FONT class=extract>Options:</FONT></P>
<UL>
<LI>
<P><FONT class=extract><CODE>-d</CODE>: switch specified projects back to the manifest revision. Helpful if the project is currently on a topic branch, but the manifest revision is temporarily needed.</FONT></P>
<LI>
<P><FONT class=extract><CODE>-s</CODE>: sync to a known good build as specified by the manifest-server element in the current manifest.</FONT></P>
<LI>
<P><FONT class=extract><CODE>-f</CODE>: proceed with syncing other projects even if a project fails to sync.</FONT></P></LI></UL>
<H2 id=upload style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="23"><FONT class=extract>upload</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo upload </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>For the specified projects, Repo compares the local branches to the remote branches updated during the last repo sync. Repo will prompt you to select one or more of the branches that have not yet been uploaded for review.</FONT></P>
<P><FONT class=extract>After you select one or more branches, all commits on the selected branches are transmitted to Gerrit over an HTTPS connection. You will need to configure an HTTPS password to enable upload authorization. Visit the </FONT><A href="https://android-review.googlesource.com/new-password"><FONT class=extract>Password Generator</FONT></A><FONT class=extract> to generate a new username/password pair to use over HTTPS.</FONT></P>
<P><FONT class=extract>When Gerrit receives the object data over its server, it will turn each commit into a change so that reviewers can comment on each commit individually. To combine several "checkpoint" commits together into a single commit, use git rebase -i before you run repo upload.</FONT></P>
<P><FONT class=extract>If you run repo upload without any arguments, it will search all the projects for changes to upload.</FONT></P>
<P><FONT class=extract>To make edits to changes after they have been uploaded, you should use a tool like <CODE>git rebase -i</CODE> or <CODE>git commit --amend</CODE> to update your local commits. After your edits are complete:</FONT></P>
<UL>
<LI>
<P><FONT class=extract>Make sure the updated branch is the currently checked out branch.</FONT></P>
<LI>
<P><FONT class=extract>Use <CODE>repo upload --replace PROJECT</CODE> to open the change matching editor.</FONT></P>
<LI>
<P><FONT class=extract>For each commit in the series, enter the Gerrit change ID inside the brackets:</FONT></P><PRE class=prettyprint><CODE><SPAN class=com><FONT class=extract># Replacing from branch foo </FONT></SPAN><FONT class=extract><SPAN class=pln>&nbsp;<BR></SPAN><SPAN class=pun>[</SPAN><SPAN class=pln> </SPAN><SPAN class=lit>3021</SPAN><SPAN class=pln> </SPAN><SPAN class=pun>]</SPAN><SPAN class=pln> </SPAN><SPAN class=lit>35f2596c</SPAN><SPAN class=pln> </SPAN><SPAN class=typ>Refactor</SPAN><SPAN class=pln> part of </SPAN><SPAN class=typ>GetUploadableBranches</SPAN><SPAN class=pln> to lookup one specific</SPAN><SPAN class=pun>...</SPAN></FONT><FONT class=extract><SPAN class=pln>&nbsp;<BR></SPAN><SPAN class=pun>[</SPAN><SPAN class=pln> </SPAN><SPAN class=lit>2829</SPAN><SPAN class=pln> </SPAN><SPAN class=pun>]</SPAN><SPAN class=pln> ec18b4ba </SPAN><SPAN class=typ>Update</SPAN><SPAN class=pln> proto client to support patch </SPAN><SPAN class=kwd>set</SPAN></FONT><FONT class=extract><SPAN class=pln> replacments &nbsp;<BR></SPAN><SPAN class=pun>[</SPAN><SPAN class=pln> </SPAN><SPAN class=lit>3022</SPAN><SPAN class=pln> </SPAN><SPAN class=pun>]</SPAN><SPAN class=pln> c99883fe </SPAN><SPAN class=typ>Teach</SPAN><SPAN class=pln> </SPAN><SPAN class=str>'repo upload --replace'</SPAN><SPAN class=pln> how to add replacement patch se</SPAN><SPAN class=pun>...</SPAN></FONT><FONT class=extract><SPAN class=pln>&nbsp;<BR></SPAN><SPAN class=com># Insert change numbers in the brackets to add a new patch set.</SPAN></FONT><FONT class=extract><SPAN class=pln>&nbsp;<BR></SPAN><SPAN class=com># To create a new change record, leave the brackets empty.</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE></LI></UL>
<P><FONT class=extract>After the upload is complete the changes will have an additional Patch Set.</FONT></P>
<H2 id=diff style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="24"><FONT class=extract>diff</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo diff </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Shows outstanding changes between commit and working tree using <CODE>git diff</CODE>. </FONT></P>
<H2 id=download style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="25"><FONT class=extract>download</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><SPAN class=pln><FONT class=extract>repo download TARGET CHANGE&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Downloads the specified change from the review system and makes it available in your project's local working directory.</FONT></P>
<P><FONT class=extract>For example, to download </FONT><A href="https://android-review.googlesource.com/23823"><FONT class=extract>change 23823</FONT></A><FONT class=extract> into your platform/frameworks/base directory:</FONT></P><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>$ repo download platform</SPAN><SPAN class=pun>/</SPAN><SPAN class=pln>build </SPAN><SPAN class=lit>23823</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>A <CODE>repo sync</CODE> should effectively remove any commits retrieved via <CODE>repo download</CODE>. Or, you can check out the remote branch; e.g., <CODE>git checkout m/master</CODE>.</FONT></P>
<P><FONT class=extract>*Note: There is a slight mirroring lag between when a change is visible on the web in </FONT><A href="https://android-review.googlesource.com/"><FONT class=extract>Gerrit</FONT></A><FONT class=extract> and when <CODE>repo download</CODE> will be able to find it for all users, because of replication delays to all servers worldwide.</FONT></P>
<H2 id=forall style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="26"><FONT class=extract>forall</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo forall </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN><SPAN class=pln> </SPAN><SPAN class=pun>-</SPAN></FONT><SPAN class=pln><FONT class=extract>c COMMAND&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Executes the given shell command in each project. The following additional environment variables are made available by <CODE>repo forall</CODE>:</FONT></P>
<UL>
<LI>
<P><FONT class=extract><CODE>REPO_PROJECT</CODE> is set to the unique name of the project.</FONT></P>
<LI>
<P><FONT class=extract><CODE>REPO_PATH</CODE> is the path relative to the root of the client.</FONT></P>
<LI>
<P><FONT class=extract><CODE>REPO_REMOTE</CODE> is the name of the remote sstem from the manifest.</FONT></P>
<LI>
<P><FONT class=extract><CODE>REPO_LREV</CODE> is the name of the revision from the manifest, translated to a local tracking branch. Used if you need to pass the manifest revision to a locally executed git command.</FONT></P>
<LI>
<P><FONT class=extract><CODE>REPO_RREV</CODE> is the name of the revision from the manifest, exactly as written in the manifest.</FONT></P></LI></UL>
<P><FONT class=extract>Options:</FONT></P>
<UL>
<LI>
<P><FONT class=extract><CODE>-c</CODE>: command and arguments to execute. The command is evaluated through <CODE>/bin/sh</CODE> and any arguments after it are passed through as shell positional parameters.</FONT></P>
<LI>
<P><FONT class=extract><CODE>-p</CODE>: show project headers before output of the specified command. This is achieved by binding pipes to the command's stdin, stdout, and sterr streams, and piping all output into a continuous stream that is displayed in a single pager session.</FONT></P>
<LI>
<P><FONT class=extract><CODE>-v</CODE>: show messages the command writes to stderr. </FONT></P></LI></UL>
<H2 id=prune style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="27"><FONT class=extract>prune</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo prune </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Prunes (deletes) topics that are already merged.</FONT></P>
<H2 id=start style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="28"><FONT class=extract>start</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo start BRANCH_NAME </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Begins a new branch for development, starting from the revision specified in the manifest.</FONT></P>
<P><FONT class=extract>The <CODE>BRANCH_NAME</CODE> argument should provide a short description of the change you are trying to make to the projects.If you don't know, consider using the name default.</FONT></P>
<P><FONT class=extract>The <CODE>PROJECT_LIST</CODE> specifies which projects will participate in this topic branch. </FONT></P>
<P><EM><FONT class=extract>Note: "." is a useful shorthand for the project in the current working directory.</FONT></EM></P>
<H2 id=status style="MARGIN-BOTTOM: 0px" jQuery1720177795137126255="29"><FONT class=extract>status</FONT></H2><FONT class=extract>
<HR>
</FONT><PRE class=prettyprint><CODE><FONT class=extract><SPAN class=pln>repo status </SPAN><SPAN class=pun>[</SPAN><SPAN class=pln>PROJECT_LIST</SPAN><SPAN class=pun>]</SPAN></FONT><SPAN class=pln><FONT class=extract>&nbsp;<BR></FONT></SPAN></CODE></PRE>
<P><FONT class=extract>Compares the working tree to the staging area (index) and the most recent commit on this branch (HEAD) in each project specified. Displays a summary line for each file where there is a difference between these three states.</FONT></P>
<P><FONT class=extract>To see the status for only the current branch, run <CODE>repo status</CODE>. The status information will be listed by project. For each file in the project, a two-letter code is used:</FONT></P>
<P><FONT class=extract>In the first column, an uppercase letter indicates how the staging area differs from the last committed state.</FONT></P>
<TABLE>
<THEAD>
<TR>
<TH><FONT class=extract>letter</FONT></TH>
<TH><FONT class=extract>meaning</FONT></TH>
<TH><FONT class=extract>description</FONT></TH></TR></THEAD>
<TBODY>
<TR>
<TD><FONT class=extract>-</FONT></TD>
<TD><FONT class=extract>no change</FONT></TD>
<TD><FONT class=extract>same in HEAD and index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>A</FONT></TD>
<TD><FONT class=extract>added</FONT></TD>
<TD><FONT class=extract>not in HEAD, in index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>M</FONT></TD>
<TD><FONT class=extract>modified</FONT></TD>
<TD><FONT class=extract>in HEAD, modified in index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>D</FONT></TD>
<TD><FONT class=extract>deleted</FONT></TD>
<TD><FONT class=extract>in HEAD, not in index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>R</FONT></TD>
<TD><FONT class=extract>renamed</FONT></TD>
<TD><FONT class=extract>not in HEAD, path changed in index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>C</FONT></TD>
<TD><FONT class=extract>copied</FONT></TD>
<TD><FONT class=extract>not in HEAD, copied from another in index</FONT></TD></TR>
<TR>
<TD><FONT class=extract>T</FONT></TD>
<TD><FONT class=extract>mode changed</FONT></TD>
<TD><FONT class=extract>same content in HEAD and index, mode changed</FONT></TD></TR>
<TR>
<TD><FONT class=extract>U</FONT></TD>
<TD><FONT class=extract>unmerged</FONT></TD>
<TD><FONT class=extract>conflict between HEAD and index; resolution required</FONT></TD></TR></TBODY></TABLE>
<P><FONT class=extract>In the second column, a lowercase letter indicates how the working directory differs from the index.</FONT></P>
<TABLE>
<THEAD>
<TR>
<TH><FONT class=extract>letter</FONT></TH>
<TH><FONT class=extract>meaning</FONT></TH>
<TH><FONT class=extract>description</FONT></TH></TR></THEAD>
<TBODY>
<TR>
<TD><FONT class=extract>-</FONT></TD>
<TD><FONT class=extract>new/unknown</FONT></TD>
<TD><FONT class=extract>not in index, in work tree</FONT></TD></TR>
<TR>
<TD><FONT class=extract>m</FONT></TD>
<TD><FONT class=extract>modified</FONT></TD>
<TD><FONT class=extract>in index, in work tree, modified</FONT></TD></TR>
<TR>
<TD><FONT class=extract>d</FONT></TD>
<TD><FONT class=extract>deleted</FONT></TD>
<TD><FONT class=extract>in index, not in work tree</FONT></TD></TR></TBODY></TABLE></DIV></DIV>