Once the cache system is up and running, there are only three circumstances in which the CPU must intervene: 
<P></P>
<P>Before DMA out of memory: </P>
<P>If a device is taking data out of memory, it&#8217;s vital that it gets the right data. If the data cache is write back and a program has recently written some data, some of the correct data may still be held in the D-cache but not yet be written back to main memory. The CPU can&#8217;t see this problem, of course; if it looks at the memory locations it will get the correct data back from its cache. So before the DMA device starts reading data from memory, any data for that range of locations that is currently held in the D-cache must be written back to memory if necessary. </P>
<P>DMA into memory: </P>
<P>If a device is loading data into memory, it&#8217;s important to invalidate any cache entries purporting to hold copies of the memory locations concerned; otherwise, the CPU reading these locations will obtain stale cached data. The cache entries must be invalidated before the CPU uses any data from the DMA input stream, but it&#8217;s quite common to invalidate them before starting the DMA. </P>
<P>Writing instructions: </P>
<P>When the CPU itself is storing instructions into memory for subsequent execution, you must first ensure that the instructions are written back to memory and then make sure that the corresponding I-cache locations are invalidated; the MIPS CPU has no connection between the D-cache and the I-cache. In the most modern MIPS CPUs the synci instruction does everything that is necessary to make the instructions you&#8217;ve just stored usable for execution&#8212;and it&#8217;s a user-privilege instruction.<SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"></SPAN>