<H3 class=docSection1Title>3.4. Word Abbreviations</H3>
<P class=docText>Word abbreviation mode <A name=gnu3-CHP-3-ITERM-1954></A><A name=gnu3-CHP-3-ITERM-1955></A><A name=gnu3-CHP-3-ITERM-1956></A>and dynamic abbreviations are two features that lazy typists will love. The authors proudly include themselves in that category, so you'll be in good company if you choose to explore these features. Dynamic abbreviations are less complex, so we'll discuss them first.</P><A name=gnu3-CHP-3-SECT-4.1></A>
<H4 class=docSection2Title>3.4.1 Dynamic Abbreviations</H4>
<P class=docText>Let's say that you are <A name=gnu3-CHP-3-ITERM-1957></A><A name=gnu3-CHP-3-ITERM-1958></A>a scientist writing a paper on invertebrates. You're likely to have many long technical words in your paper, and if you're like us, you get tired of typing long words.</P>
<P class=docText>Dynamic abbreviations come to the rescue. <FONT class=extract>After you've typed a long word once, you can simply type a few letters and give the command <SPAN class=docEmphBold>M-/</SPAN> (for <SPAN class=docEmphBold>dabbrev-expand</SPAN>).</FONT> Emacs inserts the nearest word that starts with that string.</P><A name=ch03-28-fm2xml></A>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>In M-/</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn23.gif" width=425 height=125> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs inserts the last word starting with <SPAN class=docEmphasis>in</SPAN>, in this case, <SPAN class=docEmphasis>interesting</SPAN>.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText><SPAN class=docEmphasis>Interesting</SPAN> was not the word we were hoping for; it's <SPAN class=docEmphasis>invertebrates</SPAN> we wanted. Without moving the cursor, type <SPAN class=docEmphBold>M-/</SPAN> again.</P><A name=ch03-29-fm2xml></A>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>M-/</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn24.gif" width=425 height=125> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs inserts the word <SPAN class=docEmphasis>Invertebrates</SPAN>, which is what we wanted.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>The word being expanded need not be earlier in the file to be considered nearest. Emacs looks behind and ahead of the cursor position to find words it can expand. If there are eligible words that are equidistant above and below the cursor position both, Emacs selects the word that is above as the expansion.</P>
<P class=docText>Earlier we talked about completing a word with Ispell. Dynamic abbreviations are a bit different. When you complete a word, the word probably isn't in the buffer (yet). When you use a dynamic abbreviation, you simply don't want to type a word you typed earlier and you're asking Emacs to do it for you.</P>
<P class=docText>Using dynamic abbreviations doesn't require entering a special minor mode, as standard word abbreviations do. They are simply an aid for the tired typist. Word abbreviation mode has some other advantages, though, such as the ability to create an abbreviation for a phrase or a habitual typo, as we will see next.</P><A name=gnu3-CHP-3-SECT-4.2></A>
<H4 class=docSection2Title>3.4.2 Word Abbreviation Mode</H4>
<P class=docText>Word abbreviation mode lets you <A name=gnu3-CHP-3-ITERM-1959></A>define abbreviations for special words and phrases. You can u<A name=gnu3-CHP-3-ITERM-1960></A><A name=gnu3-CHP-3-ITERM-1961></A>se it in many ways. Traditionally, abbreviation mode is used so that you don't have to type long words or phrases in their entirety. For example, let's say you are writing a contract that repeatedly references the National Institute of Standards and Technology, and you are not allowed to use an acronym. Rather than typing the full name, you can define the abbreviation <SPAN class=docEmphasis>nist</SPAN>. Once you have set up this definition, Emacs inserts the full name whenever you type the abbreviation <SPAN class=docEmphasis>nist</SPAN>, followed by a space, tab, or punctuation mark. Emacs watches for you to type an abbreviation, then expands it automatically for you.</P>
<P class=docText>Before showing you how to get into word abbreviation mode and define your abbreviation list, we'll start with an example. Our favorite nontraditional use for word abbreviation mode is to correct misspellings as you type.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-4.html#gnu3-chp-3-fnote-2">[2]</A></SUP> Almost everyone has a dozen or so words that they habitually type incorrectly because of worn neural pathways. You can simply tell Emacs that these misspellings are "abbreviations" for the correct versions, and Emacs fixes the misspellings every time you type them; you may not even notice that you typed the word wrong before Emacs fixes it. So assume that you've entered word abbreviation mode, and that you've defined <SPAN class=docEmphasis>receive</SPAN> as an abbreviation for <SPAN class=docEmphasis>recieve</SPAN>; now, as you're typing, you make an innocent mistake.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-3-FNOTE-2>[2]</A></SUP> Once upon a time this use of word abbreviation mode was nontraditional; these days Flyspell, described earlier, automatically defines misspellings as abbreviations.</P></BLOCKQUOTE><A name=ch03-30-fm2xml></A>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>You will recieve</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn25.gif" width=425 height=150> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>You type the offending word but haven't yet pressed <SPAN class=docEmphBold>Space</SPAN>, which will cue Emacs to correct it (Windows).</P></TD></TR></TBODY></TABLE><BR><A name=ch03-31-fm2xml></A>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>Space the materials you requested shortly</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn26.gif" width=413 height=148> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs corrects the word automatically after you press <SPAN class=docEmphBold>Space</SPAN>; you need not stop typing or even be aware that a mistake has been made and corrected (Windows).</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Besides the convenience of being able to invent abbreviations for phrases that you frequently type, you can see that setting up a short list of abbreviations for common misspellings could reduce the time it takes to proofread files and reduce the number of common typing errors.</P>
<P class=docText>When you define abbreviations, never use abbreviations that are words in their own right or Emacs may expand the word when you don't want it to, because expansion takes place without asking. For example, if you frequently write about the World Association for Replicant Technology, don't define an abbreviation of <SPAN class=docEmphasis>wart</SPAN>, or you won't be able to write about the difficulties of handling toads. (<FONT class=extract>If you use the word <SPAN class=docEmphasis>wart</SPAN> so infrequently that you think the convenience of the acronym warrants it, you can use <SPAN class=docEmphBold>C-_</SPAN> to undo the abbreviation when you really want to type <SPAN class=docEmphasis>wart</SPAN></FONT>.)</P>
<P class=docText>Emacs knows the abbreviations exactly as you define them. If you define <SPAN class=docEmphasis>recieve</SPAN> as an abbreviation for <SPAN class=docEmphasis>receive</SPAN>, you must also define <SPAN class=docEmphasis>recieves</SPAN>, <SPAN class=docEmphasis>recieving</SPAN>, and <SPAN class=docEmphasis>recieved</SPAN> as abbreviations to cover all the forms of the word you might misspell.</P>
<P class=docText>Before you go ahead and define some abbreviations, here's one more basic fact you should know. Emacs classifies abbreviations according to which modes they work in. Global abbreviations work in all modes; local abbreviations work only in the mode in which they were defined. For example, <A name=gnu3-CHP-3-ITERM-1962></A><A name=gnu3-CHP-3-ITERM-1963></A>if you want abbreviations to work only in text mode and not in C mode, define them as <SPAN class=docEmphasis>local</SPAN> while you are in text mode. If you want abbreviations to work in any mode, <A name=gnu3-CHP-3-ITERM-1964></A><A name=gnu3-CHP-3-ITERM-1965></A>define them as <SPAN class=docEmphasis>global</SPAN>. Remember: abbreviations are local to modes, not to files or buffers.</P>
<P class=docText>Emacs also provides an inverse method for defining abbreviations. This method is called <SPAN class=docEmphasis>inverse</SPAN> because you type the abbreviation and then the definition. Some commands (which we won't discuss) let you type the definition and then the abbreviation, but they require some tricky key sequences to let Emacs know how many words preceding the cursor are part of the abbreviation. The inverse method is easier and it works whether the definition for the abbreviation is one word or ten words.</P><A name=gnu3-CHP-3-SECT-4.2.1></A>
<H5 class=docSection3Title>3.4.2.1 Trying word abbreviations for one session</H5>
<P class=docText>Usually, if you go to the trouble of defining a word abbreviation, you will use it in more than one Emacs session. But if you'd like to try out abbreviation mode to see if you want to incorporate it into your startup, use the following procedure.</P>
<P class=docText><FONT class=extract>To define word abbreviations for </FONT><A name=gnu3-CHP-3-ITERM-1966></A><A name=gnu3-CHP-3-ITERM-1967></A><FONT class=extract>this buffer and session:</FONT></P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Enter word abbreviation mode by typing <SPAN class=docEmphBold>M-x abbrev-mode Enter</SPAN>. <TT>Abbrev</TT> appears on the mode line. For a global abbreviation, type the abbreviation you want to use and type <SPAN class=docEmphBold>C-x a i g</SPAN> or <SPAN class=docEmphBold>C-x a -</SPAN> (for <SPAN class=docEmphBold>add-inverse-global</SPAN>). (For a local abbreviation, type <SPAN class=docEmphBold>C-x a i l</SPAN> for <SPAN class=docEmphBold>add-inverse-local</SPAN> instead.) Emacs then asks you for the expansion.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Type the definition for the abbreviation and press <SPAN class=docEmphBold>Enter</SPAN>. Emacs then expands the abbreviation and will do so each time you type it followed by a space or punctuation mark.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>When you exit Emacs. it asks if you want to save the abbreviations in <SPAN class=docEmphasis>.abbrev_defs</SPAN>. Type <SPAN class=docEmphBold>y</SPAN> if you want to save them.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>The abbreviations you've defined will work only in buffers where you enter abbrev mode.</FONT></P></DIV></LI></OL></DIV>
<P class=docText>If you find that you like using word abbreviation mode, you may want to make it part of your startup, as described in the following section.</P><A name=gnu3-CHP-3-SECT-4.2.2></A>
<H5 class=docSection3Title>3.4.2.2 Making word abbreviations part of your startup</H5>
<P class=docText>Once you become hooked on using abbreviation mode, it's easiest to incorporate it into your <SPAN class=docEmphasis>.emacs</SPAN> file. This <A name=gnu3-CHP-3-ITERM-1968></A>procedure creates a permanent file of your word abbreviations that is loaded every time you start Emacs. You can also delete abbreviations from this file; we'll discuss how to do so in the next section.</P>
<P class=docText><FONT class=extract>To define word abbreviations and make them part of your startup:</FONT></P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Add these lines to your <SPAN class=docEmphasis>.emacs</SPAN> file:</FONT></P><PRE><FONT class=extract>(setq-default abbrev-mode t)


(read-abbrev-file "~/.abbrev_defs")


(setq save-abbrevs t)
</FONT></PRE><BR></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Save the <SPAN class=docEmphasis>.emacs</SPAN> file and reenter Emacs. <TT>Abbrev</TT> appears on the mode line. You may get an error message saying Emacs can't load your abbrev file (understandable if you haven't created the file yet). Ignore this error message; it won't happen again.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Type an abbreviation and type <SPAN class=docEmphBold>C-x a i g</SPAN> or <SPAN class=docEmphBold>C-x a -</SPAN> following the abbreviation. These commands create a global abbreviation; if you want to create a local abbreviation instead, type <SPAN class=docEmphBold>C-x a i l</SPAN>. Emacs asks you for the expansion.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Type the definition for the abbreviation and press <SPAN class=docEmphBold>Enter</SPAN>. Emacs expands the abbreviation and will do so each time you type it followed by a space or punctuation mark. You can define as many abbreviations as you want to by repeating Steps 3 and 4.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Type <SPAN class=docEmphBold>C-x C-c</SPAN> to exit Emacs. Emacs asks if you want to save the abbreviations in <SPAN class=docEmphasis>.abbrev_defs</SPAN>.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><FONT class=extract>Type <SPAN class=docEmphBold>y</SPAN> to save your abbreviations.</FONT></P></DIV></LI></OL></DIV>
<P class=docText>After you define some abbreviations and save them, Emacs loads the abbreviations file automatically. When you define word abbreviations in subsequent sessions, Emacs asks again whether you want to save the abbreviations file. Respond with a <SPAN class=docEmphBold>y</SPAN> to save the new abbreviations you've defined and have them take effect automatically.</P><A name=gnu3-CHP-3-SECT-4.2.3></A>
<H5 class=docSection3Title>3.4.2.3 Deleting a word abbreviation</H5>
<P class=docText>If you use word <A name=gnu3-CHP-3-ITERM-1969></A><A name=gnu3-CHP-3-ITERM-1970></A>abbreviations frequently, you may define an abbreviation and later change your mind. <FONT class=extract>You can edit the word abbreviation list by typing <SPAN class=docEmphBold>M-x edit-abbrevs Enter</SPAN>. You can see (but not edit) the list by typing <SPAN class=docEmphBold>M-x list-abbrevs Enter</SPAN>.</FONT></P>
<P class=docText><FONT class=extract>After the list is displayed, use <SPAN class=docEmphBold>C-k</SPAN> (or any other editing commands) to delete the abbreviations you don't want to use.</FONT> Because Emacs itself formats this list, don't try to edit lines or add new lines; deleting is about the only operation that's safe. Here's how the abbreviations look when you edit word abbreviations. The file is divided into different sections based on whether the abbreviations are global or local to a particular mode:</P><PRE>(text-mode-abbrev-table)





(lisp-mode-abbrev-table)





(fundamental-mode-abbrev-table)





(global-abbrev-table)





"iwthout" 1        "without"


"prhase"  1        "phrase"


"teh"     1        "the"


"fo"      1        "of"


"eamcs"   2        "Emacs"


"wrok"    1        "work"


"aslo"    1        "also"


"sotred"  1        "stored"


"inforamtion" 1    "information"


"esc"     6        "Esc"


"taht"    1        "that"


"chatper" 1        "chapter"


"adn"     1        "and"


"iwth"    1        "with"


"chpater" 1        "chapter"


"loaction" 1       "location"


"recieve" 1        "receive"


"wart"    1        "World Association for Replicant Technology"
</PRE><BR>
<P class=docText>The file is divided into sections by mode. We defined global abbreviations in this case; any abbreviations Flyspell (described earlier in this chapter) creates are local abbreviations and would be listed under the mode in which they were defined.</P>
<P class=docText>In this buffer, the first column lists the abbreviations (in this case, mostly misspellings). The second column is for internal record keeping; you don't need to concern yourself with it. The third column provides the definitions of the abbreviations, the word or phrase that Emacs substitutes whenever it sees the abbreviation.</P>
<P class=docText><FONT class=extract>To delete any abbreviation, delete the line for that abbreviation and save the file by typing <SPAN class=docEmphBold>M-x write-abbrev-file</SPAN>. You can move back to the buffer you were editing before by typing <SPAN class=docEmphBold>C-x b</SPAN> (a command for working with multiple buffers</FONT>, discussed in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-4.html#gnu3-chp-4">Chapter 4</A>).</P><A name=gnu3-CHP-3-SECT-4.2.4></A>
<H5 class=docSection3Title>3.4.2.4 Disabling word abbreviations</H5>
<P class=docText><FONT class=extract>You can get rid of word </FONT><A name=gnu3-CHP-3-ITERM-1971></A><A name=gnu3-CHP-3-ITERM-1972></A><A name=gnu3-CHP-3-ITERM-1973></A><FONT class=extract>abbreviations completely in one of two ways. First, you can type <SPAN class=docEmphBold>M-x kill-all-abbrevs Enter</SPAN>. This command disables word abbreviations for the current session.</FONT></P>
<P class=docText><FONT class=extract>Second, you can delete the file the abbreviations are in. If you made word abbreviations part of your startup, delete the <SPAN class=docEmphBold>read-abbrev-file</SPAN> line from your <SPAN class=docEmphasis>.emacs</SPAN> file.</FONT></P><A name=gnu3-CHP-3-SECT-4.2.5></A>
<H5 class=docSection3Title>3.4.2.5 Abbreviations and capitalization</H5>
<P class=docText>Usually, Emacs capitalizes <A name=gnu3-CHP-3-ITERM-1974></A><A name=gnu3-CHP-3-ITERM-1975></A><A name=gnu3-CHP-3-ITERM-1976></A>abbreviations exactly the way you want. If you run into special situations with abbreviations and capitalization, however, you may wantl to know what's going on behind the scenes. Here are the rules:</P>
<UL>
<LI>
<P class=docList>If the abbreviation's definition contains any uppercase letters, Emacs always inserts the definition without changing anything. For example, if you define <SPAN class=docEmphasis>ora</SPAN> as an abbreviation for <SPAN class=docEmphasis>O'Reilly Media</SPAN>, <SPAN class=docEmphasis>O'Reilly</SPAN> will always be capitalized exactly as shown.</P>
<LI>
<P class=docList>If the abbreviation's definition is all lowercase, Emacs capitalizes according to the following rules:</P>
<UL>
<LI>
<P class=docList>If you type all of the letters of the abbreviation in lowercase, Emacs inserts the definition in lowercase.</P>
<LI>
<P class=docList>If you type any of the letters of the abbreviation in uppercase, Emacs capitalizes the first letter of the first word.</P>
<LI>
<P class=docList>If you type all of the letters of the abbreviation in uppercase, Emacs capitalizes the first letter of every word, unless the variable <SPAN class=docEmphBold>abbrev-all-caps</SPAN> is set to <SPAN class=docEmphBold>t</SPAN>; in this case, it capitalizes all letters.</P></LI></UL></LI></UL>
<P class=docText><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-4.html#gnu3-chp-3-table-7">Table 3-7</A> shows some examples.</P><A name=gnu3-CHP-3-TABLE-7></A>
<H5 class=docTableTitle>Table 3-7. Word abbreviation capitalization</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Abbreviation</SPAN> </P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Definition</SPAN> </P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>You type</SPAN>:</P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Expands to</SPAN>:</P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Because</SPAN>:</P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>&nbsp;</TD>
<TD class=docTableCell>&nbsp;</TD>
<TD class=docTableCell>&nbsp;</TD>
<TD class=docTableCell>&nbsp;</TD>
<TD class=docTableCell>&nbsp;</TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>lc</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphasis>lc</SPAN> is lowercase, so <SPAN class=docEmphasis>lamb chop</SPAN> is lowercase.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>Lc</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText>There's one capital in <SPAN class=docEmphasis>Lc</SPAN>, so <SPAN class=docEmphasis>Lamb</SPAN> is capitalized.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>lC</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText>There's one capital in <SPAN class=docEmphasis>lC</SPAN>, so <SPAN class=docEmphasis>Lamb</SPAN> is capitalized.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>lamb chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>LC</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Lamb Chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphasis>LC</SPAN> is all capitals, so both words are capitalized.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>Lamb Chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>lc</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Lamb Chop</P></TD>
<TD class=docTableCell>
<P class=docText>Capitals in the definition are always unchanged.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>lc</P></TD>
<TD class=docTableCell>
<P class=docText>Lamb Chop</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>LC</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Lamb Chop</P></TD>
<TD class=docTableCell>
<P class=docText>Capitals in the definition are always unchanged.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>You don't need to remember the rules, but looking them over may help you out if you can't understand how Emacs is capitalizing. In our experience, defining abbreviations in lowercase circumvents most capitalization problems.</P>
<P class=docText><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-4.html#gnu3-chp-3-table-8">Table 3-8</A> summarizes word abbreviation commands.</P><A name=gnu3-CHP-3-TABLE-8></A>
<H5 class=docTableTitle>Table 3-8. Word abbreviation commands</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Keystrokes</SPAN> </P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Command name</SPAN> </P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Action</SPAN> </P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>M-/</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>dabbrev-expand</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Complete this word based on the nearest word that starts with this string (press <SPAN class=docEmphBold>M-/</SPAN> again if that's not the word you want).</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>abbrev-mode</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Enter (or exit) word abbreviation mode.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-x a -</SPAN> <SPAN class=docEmphasis>or</SPAN> <SPAN class=docEmphBold>C-x a i g</SPAN></P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>inverse-add-global-abbrev</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>After typing the global abbreviation, type the definition.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-x a i l</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>inverse-add-mode-abbrev</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>After typing the local abbreviation, type the definition.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>unexpand-abbrev</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Undo the last word abbreviation.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>write-abbrev-file</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Write the word abbreviation file.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>edit-abbrevs</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Edit the word abbreviations.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>list-abbrevs</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>View the word abbreviations.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>(<SPAN class=docEmphasis>none</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>kill-all-abbrevs</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Kill abbreviations for this session.</P></TD></TR></TBODY></TABLE><BR><A name=gnu3-CHP-3-SECT-4.3></A>
<H4 class=docSection2Title>3.4.3 Problems You May Encounter</H4>
<UL>
<LI>
<P class=docList><SPAN class=docEmphBold>You search for a string you can see on the screen, and Emacs can't find it</SPAN>. The most probable explanation <A name=gnu3-CHP-3-ITERM-1977></A><A name=gnu3-CHP-3-ITERM-1978></A>is that Emacs is taking into account line breaks and punctuation, and you're not including these in the search string. Use word search, which ignores any line breaks or punctuation, to find the string.</P>
<LI>
<P class=docList><SPAN class=docEmphBold>You get a message that says</SPAN>, <TT>Searching for program: No such file or directory ispell</TT>. You don't have Ispell installed. Ispell is external to Emacs; see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-13.html#gnu3-chp-13">Chapter 13</A> for details on installing Ispell on Mac OS X and Windows.</P>
<LI>
<P class=docList><SPAN class=docEmphBold>You can't see the pop-up menu in Flyspell</SPAN>. You activate this pop-up menu by pointing the mouse at a given word and pressing the middle mouse button. Essentially, you need a three-button mouse to run Flyspell.</P></LI></UL>