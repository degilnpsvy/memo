<H3 class=docSection1Title>3.2. Search and Replace</H3>
<P class=docText>Search and replace definitely go together, like coffee and cream. Let's say you're working on a new software application and at the last possible moment, the Marketing Department decides to change the product's name.</P>
<P class=docText>Tere's a press release for Whirligig, an email service that periodically reminds you to make healthy lifestyle changes like exercising, drinking water, and taking vitamins. The level of harassment or, as the marketing department says, encouragement, can be set by the user. Whirligig isn't really the most descriptive name, so at the last minute the Marketing Department changes it to HealthBug.</P><A name=gnu3-CHP-3-SECT-2.1></A>
<H4 class=docSection2Title>3.2.1 Simple Search and Replace Operations</H4>
<P class=docText>Assume you're in the <A name=gnu3-CHP-3-ITERM-1894></A>situation we just described. You want to replace every occurrence of one string with another. You know that Whirligig is never correct, and there is absolutely no ambiguity about how you want to replace it. When you want to replace every instance of a given string, you can use a simple command that tells Emacs to do just that. <FONT class=extract>Type <SPAN class=docEmphBold>M-x replace-string Enter</SPAN>, then type the search string and press <SPAN class=docEmphBold>Enter</SPAN>. Now type the replacement string and press <SPAN class=docEmphBold>Enter</SPAN> again. Emacs replaces all occurrences in the file from the cursor position onward.</FONT> If you want to search and replace throughout the file, press <SPAN class=docEmphBold>M-&lt;</SPAN> to go to the beginning of the file before typing this command. Here's a quick example of using <SPAN class=docEmphBold>replace-string</SPAN>.</P><A name=ch03-6-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Initial state:</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn03.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Whirligig appears four times, but the cursor is positioned after the first instance.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Now we'll do the replacement.</P><A name=ch03-7-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>M-x replace-string Enter Whirligig Enter HealthBug Enter</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn04.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs replaces all instances from the cursor position onward.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>The replacement occurs only from the cursor position onward; <SPAN class=docEmphasis>Whirligig</SPAN> in the first sentence is still incorrect. We'll work with this example again in a moment.</P><A name=gnu3-CHP-3-SECT-2.2></A>
<H4 class=docSection2Title>3.2.2 Query-Replace</H4>
<P class=docText>Few search and replace <A name=gnu3-CHP-3-ITERM-1895></A><A name=gnu3-CHP-3-ITERM-1896></A><A name=gnu3-CHP-3-ITERM-1897></A>situations are as straightforward as those we've described. Often you're not sure that you want to replace every appearance of your search string: a global replacement can be reckless. If you want to decide whether to replace the string on a case-by-case basis, use a query-replace, which allows you to change a string conditionally throughout a file. After Emacs finds an occurrence of the search string, it asks whether it should replace it, and you respond accordingly.</P>
<P class=docText><FONT class=extract>To use query-replace, go to the beginning of the buffer using <SPAN class=docEmphBold>M-&lt;</SPAN> and then type <SPAN class=docEmphBold>M-%</SPAN>. The prompt <TT>Query replace</TT>: appears in the minibuffer. Type the search string and press <SPAN class=docEmphBold>Enter</SPAN>.</FONT> Now this appears:</P><PRE>Query replace <TT><I>searchstring </I></TT> with:
</PRE><BR>
<P class=docText>Type the replacement string and press <SPAN class=docEmphBold>Enter</SPAN>. So far, this procedure is almost identical to a <SPAN class=docEmphBold>replace-string</SPAN> operation; only the prompts are different.</P>
<P class=docText>Emacs now searches for the first occurrence of the search string. When it finds one, a new prompt appears:</P><PRE>Query replacing <TT><I>searchstring </I></TT> with <TT><I>newstring</I></TT>
</PRE><BR>
<P class=docText>Before performing the replacement, Emacs waits for a response to tell it what to do. <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-2.html#gnu3-chp-3-table-3">Table 3-3</A> lists the possible responses and <A name=gnu3-CHP-3-ITERM-1898></A>their results.</P><A name=gnu3-CHP-3-TABLE-3></A>
<H5 class=docTableTitle>Table 3-3. <FONT class=extract>Responses during query-replace</FONT></H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP><FONT class=extract>
<COL>
<COL></FONT></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Keystrokes</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Action</SPAN> </FONT></P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Space</SPAN> or <SPAN class=docEmphBold>y</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Replace <TT><I>searchstring</I></TT> with <TT><I>newstring</I></TT> and go to the next instance of the string.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Del</SPAN> or <SPAN class=docEmphBold>n</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Don't replace; move to next instance.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract>.</FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Replace the current instance and quit.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract>,</FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Replace and let me see the result before moving on. (Press <SPAN class=docEmphBold>Space</SPAN> or <SPAN class=docEmphBold>y</SPAN> to move on.)</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>!</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Replace all the rest and don't ask.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>^</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Back up to the previous instance.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Enter</SPAN> or <SPAN class=docEmphBold>q</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Exit query-replace.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>E</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Modify the replacement string.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-r</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Enter a recursive edit (discussed in detail later).</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-w</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Delete this instance and enter a recursive edit (so you can make a custom replacement).</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-c</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Exit recursive edit and resume query-replace.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-]</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Exit recursive edit and exit query-replace.</FONT></P></TD></TR></TBODY></TABLE><BR>
<P class=docText>This list seems like a lot of keystrokes to remember, but you can get away with knowing two or three. <FONT class=extract>Most of the time you'll respond to the prompt by pressing <SPAN class=docEmphBold>Space</SPAN>, telling Emacs to perform the replacement and go on to the next instance, or <SPAN class=docEmphBold>n</SPAN> to skip this replacement and go on to the next instance. If you're not too sure what will happen, enter a comma (,); Emacs makes the replacement but doesn't go on until you press <SPAN class=docEmphBold>Space</SPAN>. After performing the first few replaces, you may realize that there's no need to inspect every change individually. Typing an exclamation mark (<SPAN class=docEmphBold>!</SPAN>) tells Emacs to go ahead and finish the job without bothering you anymore. If you remember these keystrokes, you're all set.</FONT></P>
<P class=docText>How does this work in practice? Let's revisit our previous example, assuming that we want to change <SPAN class=docEmphasis>Whirligig</SPAN> to <SPAN class=docEmphasis>HealthBug</SPAN> throughout (and that we didn't save the changes we made with <SPAN class=docEmphBold>replace-string</SPAN>).</P><A name=ch03-8-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>M-&lt; M-% Whirligig Enter HealthBug Enter</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn05.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>You're ready to replace the first occurrence; press <SPAN class=docEmphBold>Space</SPAN> to go on.</P></TD></TR></TBODY></TABLE><BR><A name=ch03-9-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Press: <SPAN class=docEmphBold>Space</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn06.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>When you press <SPAN class=docEmphBold>Space</SPAN>, Emacs replaces the first word; the query-replace operation then moves to the second word.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>This procedure continues until you reach the end of the file. As we've said, typing <SPAN class=docEmphBold>!</SPAN> fixes the rest of the file.</P>
<P class=docText>In <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-2.html#gnu3-chp-3-table-3">Table 3-3</A>, you might have noticed that several keys, such as <SPAN class=docEmphBold>Space</SPAN>, have specialized meanings while the replacement is in progress. In practice, using these keys for a different function is not confusing, though it might sound bad on paper. You might want to try a query-replace on a practice file to get the hang of using the different responses. If you are easily amused, you might enjoy opening the Emacs FAQ, saving it as another file, then replacing Emacs throughout.</P><A name=gnu3-CHP-3-SECT-2.3></A>
<H4 class=docSection2Title>3.2.3 Repeating Query-Replaces (and Other Complex Commands)</H4>
<P class=docText>Now that you've learned the <A name=gnu3-CHP-3-ITERM-1899></A><A name=gnu3-CHP-3-ITERM-1900></A><A name=gnu3-CHP-3-ITERM-1901></A><A name=gnu3-CHP-3-ITERM-1902></A>basics of query-replace, let's talk about a shortcut that applies not only in query-replace but anywhere in Emacs: repeating complex commands, with slight modifications. We often exit a query-replace by mistake or decide that the replacement we really wanted was just slightly different. Do we have to type it all again? No. <FONT class=extract>Simply go the beginning of the file and press <SPAN class=docEmphBold>C-x Esc Esc</SPAN>. The last complex command you typed appears.</FONT> <FONT class=extract>If it's not the one you want, type <SPAN class=docEmphBold>M-p</SPAN> to see the previous command (do this as many times as necessary; <SPAN class=docEmphBold>M-n</SPAN> goes to the next command).</FONT> For example, let's go to the beginning of the file and repeat the query-replace we just carried out.</P><A name=ch03-10-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>M-&lt;</SPAN> followed by <SPAN class=docEmphBold>C-x Esc Esc</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn07.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs puts the last complex command in the minibuffer; in fact it looks more complex than we remember it.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>When we press <SPAN class=docEmphBold>M-&lt;</SPAN>, we move to the beginning of the file; <A name=gnu3-CHP-3-ITERM-1903></A>when we press <SPAN class=docEmphBold>C-x Esc Esc</SPAN>, the last complex command is displayed. Emacs speaks to itself in dark words, but we can still see that this is the command that we want.</P>
<P class=docText>This is the right command, so we don't have to press <SPAN class=docEmphBold>M-p</SPAN> to see a previous command. If we wanted to, we could change the query-replace strings before pressing <SPAN class=docEmphBold>Enter</SPAN>. In this case, the Marketing Department has once again changed the product's name from HealthBug (since bug could be construed as pest) to HealthBot (neutral, but a bit less descriptive in our opinion). Our earlier query replace changed Whirligig to HealthBug. We need to modify this command so it replaces <SPAN class=docEmphasis>Bug</SPAN> with <SPAN class=docEmphasis>Bot</SPAN>.</P><A name=ch03-11-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>In the minibuffer, change <SPAN class=docEmphasis>Whirligig</SPAN> to <SPAN class=docEmphasis>Bug</SPAN> and <SPAN class=docEmphasis>HealthBug</SPAN> to <SPAN class=docEmphasis>Bot</SPAN> and press <SPAN class=docEmphBold>Enter</SPAN>.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn08.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Pressing <SPAN class=docEmphBold>Enter</SPAN> executes the command again with the modified search and replacement strings.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>As we mentioned, <SPAN class=docEmphBold>C-x Esc Esc</SPAN> works for any command involving input in the minibuffer, not just query-replace. But we use this feature most frequently in query-replace. It is also good for repeating keyboard macros (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-6.html#gnu3-chp-6">Chapter 6</A>).</P><A name=gnu3-CHP-3-SECT-2.4></A>
<H4 class=docSection2Title>3.2.4 Recursive Editing</H4>
<P class=docText>When you do a query-replace, you <A name=gnu3-CHP-3-ITERM-1904></A><A name=gnu3-CHP-3-ITERM-1905></A>inevitably see something else you want to change in the file. Try it a few times&#8212;you'll see what we mean! We typically try to remember the problem until we're done, then get frustrated when we forget exactly what and where the problem was.</P>
<P class=docText>Fortunately, Emacs provides an easier way. It allows you to start a recursive edit while you're in the middle of a query-replace. <FONT class=extract>By starting a recursive edit, you effectively put query-replace on hold while you make any other desired edits. When you exit the recursive edit, the query-replace resumes where you left off.</FONT></P>
<P class=docText><FONT class=extract>To start a recursive edit while in </FONT><A name=gnu3-CHP-3-ITERM-1906></A><FONT class=extract>query-replace, press <SPAN class=docEmphBold>C-r</SPAN>.</FONT> (Note that like many other key bindings, <SPAN class=docEmphBold>C-r</SPAN> has a different meaning in query-replace than it does in standard Emacs.) When you start a recursive edit, square brackets (<TT>[ ]</TT>) appear on the mode line. Let's go back, one more time, to our public relations piece. You've used query-replace to find the first Bug to change to Bot, and you are about to press <SPAN class=docEmphBold>Space</SPAN> to fix it, when you remember that the lawyers said that the "64 ounces of water" statement was too specific and could be construed as giving medical advice. A quick recursive edit saves the day.</P><A name=ch03-12-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Type: <SPAN class=docEmphBold>C-r</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn09.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Notice the square brackets around <TT>(Text Fill)</TT>, indicating a recursive edit in progress.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Now do any editing you want to; you are in an editing mode just like standard Emacs. Move down to the third line and delete "64 ounces of." <FONT class=extract>When you want to resume the query-replace, press <SPAN class=docEmphBold>C-M-c</SPAN>.</FONT> This command tells Emacs to leave the recursive edit and reactivate the query-replace. Emacs moves back to the point where you were when you started the recursive edit. You can then continue making replacements just as if nothing had happened.</P><A name=ch03-13-fm2xml></A>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL></COLGROUP>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>Delete "64 ounces of," then type <SPAN class=docEmphBold>C-M-c</SPAN></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_ch03scrn10.gif" width=425 height=167> </P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>Emacs goes back to query-replace and you press <SPAN class=docEmphBold>Space</SPAN> to fix the next Bug.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText><FONT class=extract>If you decide to exit the recursive edit and cancel the query-replace in one fell swoop, you can type <SPAN class=docEmphBold>C-]</SPAN> (for <SPAN class=docEmphBold>abort-recursive-edit</SPAN>) or <SPAN class=docEmphBold>M-x top-level Enter</SPAN> rather than <SPAN class=docEmphBold>C-M-c</SPAN>.</FONT></P>
<P class=docText><FONT class=extract>In fact, you can start a recursive edit at any time, not just when you're in a query-replace. The command <SPAN class=docEmphBold>M-x recursive-edit Enter</SPAN> puts you into a recursive edit; <SPAN class=docEmphBold>C-M-c</SPAN> takes you out of the recursive edit and brings you back to what you were doing before. You can even have recursive edits within recursive edits, although the possibility for confusion increases with each new level.</FONT></P><A name=gnu3-CHP-3-SECT-2.5></A>
<H4 class=docSection2Title>3.2.5 Are Emacs Searches Case-Sensitive?</H4>
<P class=docText>By default, Emacs searches <A name=gnu3-CHP-3-ITERM-1907></A><A name=gnu3-CHP-3-ITERM-1908></A>are not case-sensitive. Look at the Options menu and you'll see that the <A name=gnu3-CHP-3-ITERM-1909></A><A name=gnu3-CHP-3-ITERM-1910></A>option Case-Insensitive Search is the only option that is checked by default.</P>
<P class=docText>What does this mean in practical terms? If you search for the word <SPAN class=docEmphasis>random</SPAN>, the search finds <SPAN class=docEmphasis>random</SPAN>, <SPAN class=docEmphasis>Random</SPAN>, and <SPAN class=docEmphasis>RANDOM</SPAN>, as well as oddities like <SPAN class=docEmphasis>RanDoM</SPAN> and <SPAN class=docEmphasis>rANdOM</SPAN>. <FONT class=extract>When doing replacements, Emacs pays attention to the form of the word being replaced and replaces it with the same case. If you replaced <SPAN class=docEmphasis>random</SPAN> with <SPAN class=docEmphasis>tandem</SPAN>, <SPAN class=docEmphasis>Random</SPAN> would be replaced with <SPAN class=docEmphasis>Tandem</SPAN>, and <SPAN class=docEmphasis>RANDOM</SPAN> would be replaced with <SPAN class=docEmphasis>TANDEM</SPAN>.</FONT> If you mix capitalization, the replacement string appears just as you type it. <SPAN class=docEmphasis>healthbug</SPAN> would be replaced with <SPAN class=docEmphasis>HealthBug</SPAN> if that was the case in the replacement string. In other words, the default search and replacement operations usually do what you want: they find a search string regardless of its case and adjust the replacement appropriately for its context. However, sometimes you need finer control.</P>
<P class=docText><FONT class=extract>The variable <SPAN class=docEmphBold>case-fold-search</SPAN> determines </FONT><A name=gnu3-CHP-3-ITERM-1911></A><A name=gnu3-CHP-3-ITERM-1912></A><A name=gnu3-CHP-3-ITERM-1913></A><FONT class=extract>whether searches are case-sensitive. It applies to all searches: incremental searches, word searches, searches within search-and-replace operations, and so on. By default, <SPAN class=docEmphBold>case-fold-search</SPAN> is set to <SPAN class=docEmphBold>t</SPAN>, which means "ignore case unless the user types in mixed or uppercase." This sensible default is usually just what you want.</FONT> But if you need case-sensitive searches, the Case-Insensitive Search option on the Options menu provides an easy way to experiment with this variable.</P>
<P class=docText><FONT class=extract>Likewise, if you don't want Emacs to </FONT><A name=gnu3-CHP-3-ITERM-1914></A><A name=gnu3-CHP-3-ITERM-1915></A><A name=gnu3-CHP-3-ITERM-1916></A><FONT class=extract>adjust the case of your replacement strings, you can set the variable <SPAN class=docEmphBold>case-replace</SPAN>. Again, its value is <SPAN class=docEmphBold>t</SPAN> (for "true") by default, which means "adjust the case of a replacement string to match the original text"&#8212;that is, capitalize the replacement if the original word was capitalized and so on. Setting this variable to <SPAN class=docEmphBold>nil</SPAN> means "never adjust the case of the replacement string; always put it in exactly as I typed it." To change the value of <SPAN class=docEmphBold>case-replace</SPAN>, type <SPAN class=docEmphBold>M-x</SPAN> <SPAN class=docEmphBold>set-variable</SPAN> <SPAN class=docEmphBold>Enter case-replace Enter nil Enter</SPAN> (there's no menu option for this variable).</FONT></P>
<P class=docText>Both the menu option and the <SPAN class=docEmphBold>set-variable</SPAN> command change the behavior of Emacs only temporarily. If you start a new editing session, you'll be back to the default behavior. This is probably what you want, because searching separately for capitalized and lowercase words is inconvenient.</P>
<P class=docText>You can set the value for the Case-Insensitive Search option permanently by selecting Save Options from the Options menu or by adding this line to your <SPAN class=docEmphasis>.emacs</SPAN> file:</P><PRE>(setq-default case-fold-search nil)  ; require exact matches
</PRE><BR>
<P class=docText>To set <SPAN class=docEmphBold>case-replace</SPAN> permanently, add the following line to your <SPAN class=docEmphasis>.emacs</SPAN> file. You'll need to restart Emacs to have the change take effect.</P><PRE>(setq-default case-replace nil)      ; never change case when replacing
</PRE><BR>
<P class=docText>You could change these variables through Emacs's interactive customization facility, Custom, instead (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-10.html#gnu3-chp-10">Chapter 10</A>).</P><A name=gnu3-CHP-3-SECT-2.6></A>
<H4 class=docSection2Title>3.2.6 Regular Expressions for Search and Replacement Operations</H4>
<P class=docText>Sometimes none of the simpler <A name=gnu3-CHP-3-ITERM-1917></A><A name=gnu3-CHP-3-ITERM-1918></A>searches described in this chapter are adequate. Regular expressions allow you to build searches with strings that contain various wildcards.</P>
<P class=docText><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-2.html#gnu3-chp-3-table-4">Table 3-4</A> shows some of the <A name=gnu3-CHP-3-ITERM-1919></A><A name=gnu3-CHP-3-ITERM-1920></A>characters you can use in creating a regular expression.</P><A name=gnu3-CHP-3-TABLE-4></A>
<H5 class=docTableTitle><FONT class=extract>Table 3-4. Characters for creating regular expressions</FONT></H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP><FONT class=extract>
<COL>
<COL></FONT></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Character(s)</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Match</SPAN> </FONT></P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>^</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches the beginning of a line.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>$</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches the end of a line.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract>.</FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any single character (like ? in filenames).</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>.*</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any group of zero or more characters (. matches any character and * matches zero or more of the previous character).</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>\&lt;</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches the beginning of a word.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>\&gt;</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches the end of a word.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>[ ]</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any character specified within the brackets; for example, [a-z] matches any alphabetic character.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>\s, \S</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any whitespace character: space, a newline, a tab, a carriage return, a formfeed, or a backspace; \S matches any character except whitespace.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>\d, \D</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any single digit, 0-9; \D matches any character but a digit.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>\w, \W</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Matches any "word" character (upper- and lowercase letters, digits, and the underscore character); \W matches any character but these.</FONT></P></TD></TR></TBODY></TABLE><BR>
<P class=docText>If you do a regular expression search for <SPAN class=docEmphBold>^word$</SPAN>, you would find instances of <SPAN class=docEmphasis>word</SPAN> on a line by itself. The <SPAN class=docEmphBold>^</SPAN> says that the <SPAN class=docEmphBold>w</SPAN> must be the first character on the line, the <SPAN class=docEmphBold>$</SPAN> says that the <SPAN class=docEmphBold>d</SPAN> must be the last character.</P>
<P class=docText>If you wanted to find all words starting with <SPAN class=docEmphasis>beg</SPAN> and ending with the letter <SPAN class=docEmphasis>s</SPAN>, you could use <SPAN class=docEmphBold>beg[a-z]*s</SPAN> as your regular expression. This would find the words <SPAN class=docEmphasis>begins</SPAN>, <SPAN class=docEmphasis>begets</SPAN>, and <SPAN class=docEmphasis>begonias</SPAN>, in addition to really odd words like <SPAN class=docEmphasis>shibegrees</SPAN> and <SPAN class=docEmphasis>altbegaslia</SPAN>. If you don't want these mutants&#8212;that is, if you really want words that begin with <SPAN class=docEmphasis>beg</SPAN> and end with <SPAN class=docEmphasis>s</SPAN>, use <SPAN class=docEmphBold>\&lt;beg[a-z]*s\&gt;</SPAN>. The <SPAN class=docEmphBold>\&lt;</SPAN> is a special sequence that matches the beginning of a word; <SPAN class=docEmphBold>\&gt;</SPAN> matches the end of a word. If you wanted to find the words <SPAN class=docEmphasis>beg</SPAN>, <SPAN class=docEmphasis>big</SPAN>, and <SPAN class=docEmphasis>bag</SPAN>; but not <SPAN class=docEmphasis>begonias</SPAN>, and certainly not any strange words with <SPAN class=docEmphasis>beg</SPAN> on the inside, you would use <SPAN class=docEmphBold>\&lt;b[a-z]g\&gt;</SPAN> as the regular expression.</P>
<P class=docText>To search for a <SPAN class=docEmphBold>^</SPAN>, <SPAN class=docEmphBold>$</SPAN>, ., <SPAN class=docEmphBold>*</SPAN>, <SPAN class=docEmphBold>[</SPAN>, <SPAN class=docEmphBold>]</SPAN>, or any number of <A name=gnu3-CHP-3-ITERM-1921></A><A name=gnu3-CHP-3-ITERM-1922></A>other special characters, you obviously can't use the character itself. Put a backslash (\) first&#8212;i.e., to search for a period, search for \. For example, to search for the electronic mail address`:</P><PRE>howie@mcds.com
</PRE><BR>
<P class=docText>the regular expression would be:</P><PRE>howie@mcds\.com
</PRE><BR>
<P class=docText>This is a barebones introduction to regular expressions; see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A> for more details and <SPAN class=docEmphasis>Mastering Regular Expressions</SPAN> by Jeffrey Friedl (O'Reilly) for a book-length treatment of this topic.</P>
<P class=docText>You can use regular expressions in <A name=gnu3-CHP-3-ITERM-1923></A><A name=gnu3-CHP-3-ITERM-1924></A><A name=gnu3-CHP-3-ITERM-1925></A><A name=gnu3-CHP-3-ITERM-1926></A>incremental searches and in query-replace. <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3-sect-2.html#gnu3-chp-3-table-5">Table 3-5</A> lists the commands you use for regular expression searches. Although they are initiated with slightly <A name=gnu3-CHP-3-ITERM-1927></A><A name=gnu3-CHP-3-ITERM-1928></A><A name=gnu3-CHP-3-ITERM-1929></A>different commands, the searches are the same as those described earlier in this chapter.</P><A name=gnu3-CHP-3-TABLE-5></A>
<H5 class=docTableTitle><FONT class=extract>Table 3-5. Regular expression search commands</FONT></H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP><FONT class=extract>
<COL>
<COL>
<COL></FONT></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Keystrokes</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Command name</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Action</SPAN> </FONT></P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-s Enter</SPAN><SPAN class=docEmphasis>Edit</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Regexp Forward</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>re-search-forward</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Search for a regular expression forward.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-r Enter</SPAN><SPAN class=docEmphasis>Edit</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Regexp Backwards</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>re-search-backward</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Search for a regular expression backward.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-s</SPAN><SPAN class=docEmphasis>Edit</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Incremental Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Forward Regexp</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>isearch-forward-regexp</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Search incrementally forward for a regular expression.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-r</SPAN><SPAN class=docEmphasis>Edit</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Incremental Search</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Backward Regexp</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>isearch-backward-regexp</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Search incrementally backward for a regular expression.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-%</SPAN><SPAN class=docEmphasis>Edit</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Replace</SPAN> <IMG border=0 src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/ent/u2192.gif"> <SPAN class=docEmphasis>Replace Regexp</SPAN></FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>query-replace-regexp</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Query-replace a regular expression.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract>(<SPAN class=docEmphasis>none</SPAN>)</FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>replace-regexp</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Globally replace a regular expression unconditionally (use with caution).</FONT></P></TD></TR></TBODY></TABLE>