(let ((var1 value1) (var2 value2) ... ) 
<P></P>
<P>&nbsp; statement-block)</P>
<P>The first thing let does is define the variables var1, var2, etc., and set them to the initial values value1, value2, etc. Then let executes the statement block, which is a sequence of function calls or values, just like the body of a function. <FONT class=extract>It is useful to think of let as doing three things: </FONT></P>
<P><FONT class=extract>&#183; Defining (or declaring) a list of variables </FONT></P>
<P><FONT class=extract>&#183; Setting the variables to initial values, as if with setq </FONT></P>
<P><FONT class=extract>&#183; Creating a block in which the variables are known; the let block is known as the scope of the variables</FONT> </P>
<P>If a let is used to define a variable, its value can be reset later within the let block with setq. Furthermore, a variable defined with let can have the same name as a global variable; all setqs on that variable within the let block act on the local variable, leaving the global variable undisturbed. <FONT class=extract>However, a setq on a variable that is not defined with a let affects the global environment.</FONT> It is advisable to avoid using global variables as much as possible because their names might conflict with those of existing global variables and therefore your changes might have unexpected and inexplicable side effects later on.