<H3 class=docSection1Title>9.5. The Java Development Environment for Emacs (JDEE)</H3>
<P class=docText>While you can certainly <A name=gnu3-CHP-9-ITERM-2582></A>get started right away with the built-in Java mode, if you do more than occasional Java programming, you might want to venture into the world of Paul Kinnucan's Java Development Environment for Emacs (JDEE). It takes Emacs into the realm of Java IDE. You won't find a GUI builder, but everything else is in place and ready to roll.</P><A name=gnu3-CHP-9-SECT-5.1></A>
<H4 class=docSection2Title>9.5.1 Getting Started</H4>
<P class=docText>You can pick up the latest version of the JDEE online from <A class=docLink href="http://jdee.sunsite.dk/" target=_blank>http://jdee.sunsite.dk/</A>.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-fnote-10">[10]</A></SUP> This site is essential to getting the JDEE up and running. You'll find all sorts of tips and tricks and full user documentation on all of the bells and whistles is available.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-10>[10]</A></SUP> Before we take you through the installation process, we should mention two caveats. XEmacs has the JDEE built-in, though it is often out-of-date. TEI-Emacs, an add-on for Linux and Windows described in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-8.html#gnu3-chp-8">Chapter 8</A>, also includes the JDEE.</P></BLOCKQUOTE>
<P class=docText>Before you can install the JDEE, you'll need the following components:</P>
<DL class=docList>
<DD><BR>
<DT><I><SPAN class=docPubcolor>Collection of Emacs Development Environment Tools (CEDET)</SPAN></I> 
<DD>
<P class=docList>Available on SourceForge (<A class=docLink href="http://cedet.sourceforge.net/" target=_blank>http://cedet.sourceforge.net/</A>) or by following the links from the JDEE home page. This collection is quite popular as a foundation for more interesting programmer tools. You may already have a sufficient version installed, but it's best to get the latest release.</P>
<DD><BR>
<DT><I><SPAN class=docPubcolor>The JDEE Emacs Lisp library package</SPAN></I> 
<DD>
<P class=docList>Available as a separate download from the JDEE site.</P>
<DD><BR>
<DT><I><SPAN class=docPubcolor>One or more JDKs</SPAN></I> 
<DD>
<P class=docList>While technically not required for editing files in Emacs, a JDK is required to take advantage of any of the compilation or debugging features of the JDEE. You'll also have to register each JDK you plan to use, but more on that later.</P></DD></DL><A name=gnu3-CHP-9-SECT-5.2></A>
<H4 class=docSection2Title>9.5.2 Installing CEDET</H4>
<P class=docText>Installing CEDET is <A name=gnu3-CHP-9-ITERM-2583></A><A name=gnu3-CHP-9-ITERM-2584></A>fairly straightforward if you have a <SPAN class=docEmphBold>make</SPAN> command available. (For Windows users, you'll want to have the Cygnus Unix Distribution installed. It gives you access to a large subset of Unix tools which will come in handy far beyond the installation of the JDEE.)</P>
<P class=docText>After you download the CEDET distribution from SourceForge, unpack it wherever you want it to reside. Open a terminal window (or start a Cygwin bash terminal on Windows) and change to the directory where you unpacked the distribution. From there you should be able to run the following command:</P><PRE>shell$ <SPAN class=docEmphBold>make EMACS=</SPAN>
</PRE><PRE><SPAN class=docEmphBold><B>


/path/to/emacs </B></SPAN>
</PRE><BR>
<P class=docText>That process will probably take a few minutes to complete. The Lisp files will be compiled for you.</P>
<P class=docText>When the <SPAN class=docEmphBold>make</SPAN> command completes, you should be in good shape. The last step for CEDET is to update your <SPAN class=docEmphasis>.emacs</SPAN> file:</P><PRE>;; Turn on CEDET's fun parts


(setq semantic-load-turn-useful-things-on t)


;; Load CEDET


(load-file "/<SPAN class=docEmphasis>path-to-cedet</SPAN>/common/cedet.el")
</PRE><BR><A name=gnu3-CHP-9-SECT-5.3></A>
<H4 class=docSection2Title>9.5.3 Installing the ELisp Library</H4>
<P class=docText>Installing the ELisp library package <A name=gnu3-CHP-9-ITERM-2585></A><A name=gnu3-CHP-9-ITERM-2586></A>from the JDEE site is also straightforward. Unpack the downloaded file wherever you like, but before you run the <SPAN class=docEmphBold>make</SPAN> command, you'll need to edit the <SPAN class=docEmphasis>Makefile</SPAN> and configure the entries outlined in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-table-5">Table 9-5</A> to match your system.</P><A name=gnu3-CHP-9-TABLE-5></A>
<H5 class=docTableTitle>Table 9-5. JDEE Makefile entries</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText>Makefile entry</P></TH>
<TH class=thead scope=col>
<P class=docText>Example</P></TH>
<TH class=thead scope=col>
<P class=docText>Description</P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell><PRE>prefix
</PRE><BR></TD>
<TD class=docTableCell><PRE>/usr/local
</PRE><BR></TD>
<TD class=docTableCell>
<P class=docText>The top-level directory for any shared or info directories.</P></TD></TR>
<TR>
<TD class=docTableCell><PRE>datadir
</PRE><BR></TD>
<TD class=docTableCell><PRE>$(prefix)/share
</PRE><BR></TD>
<TD class=docTableCell>
<P class=docText>The directory where your main Emacs directory is located.</P></TD></TR>
<TR>
<TD class=docTableCell><PRE>locallisppath
</PRE><BR></TD>
<TD class=docTableCell><PRE>$(datadir)/emacs/site-lisp
</PRE><BR></TD>
<TD class=docTableCell>
<P class=docText>The directory where any local Lisp files should be installed.</P></TD></TR>
<TR>
<TD class=docTableCell><PRE>ELIBDIR
</PRE><BR></TD>
<TD class=docTableCell><PRE>$(locallisppath)/elib
</PRE><BR></TD>
<TD class=docTableCell>
<P class=docText>The directory where the elib Lisp files will go.</P></TD></TR>
<TR>
<TD class=docTableCell><PRE>EMACS
</PRE><BR></TD>
<TD class=docTableCell><PRE>/usr/bin/emacs
</PRE><BR></TD>
<TD class=docTableCell>
<P class=docText>The command to start Emacs. This can be a fully qualified path or simply "emacs" to reach the default version found on your system.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Run the <SPAN class=docEmphBold>make</SPAN> command with the <SPAN class=docEmphBold>install</SPAN> option to get everything set up:</P><PRE>shell$ <B>make install</B>
</PRE><BR>
<P class=docText>The last step for the ELisp library is to make sure the Emacs defaults acknowledge the new package. You simply need to add the new directory to your <SPAN class=docEmphBold>load-path</SPAN> variable, as described next.</P>
<P class=docText>The ELisp library actually provides a simple template file that matches where you installed the package. After the <SPAN class=docEmphBold>make</SPAN> process completes, you should have an <SPAN class=docEmphasis>elib_startup.el</SPAN> file in the directory where you ran the <SPAN class=docEmphBold>make</SPAN> command. That file contains the line you'll need to add to your <SPAN class=docEmphasis>.emacs</SPAN> file or you can merge it with the system <SPAN class=docEmphasis>default.el</SPAN> file for everyone to use. (The <SPAN class=docEmphasis>default.el</SPAN> file is often found in your <SPAN class=docEmphasis>site-lisp</SPAN> directory. <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A> has more details.)</P><A name=gnu3-CHP-9-SECT-5.4></A>
<H4 class=docSection2Title>9.5.4 Installing the JDEE</H4>
<P class=docText>Five basic steps are required to <A name=gnu3-CHP-9-ITERM-2587></A><A name=gnu3-CHP-9-ITERM-2588></A>install the JDEE on your system:</P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList>Get the necessary prerequisites downloaded and installed.</P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList>Update the load path (<SPAN class=docEmphasis>.emacs</SPAN>).</P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList>Set theJDEE to load at startup (<SPAN class=docEmphasis>.emacs</SPAN>).</P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList>Compile JDEE <SPAN class=docEmphasis>.el</SPAN> files (optional).</P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList>Register your JDKs (optional).</P></DIV></LI></OL></DIV>
<P class=docText>The previous section covered the first step. Make sure you take care of those prerequisites before continuing. The next steps can be handled in your <SPAN class=docEmphasis>.emacs</SPAN> file. The JDEE site proposes the following entries as a minimal setup; we excerpt them here (with one or two small tweaks) for easy reference.</P><PRE>;; This .emacs file illustrates the minimal setup


;; required to run the JDEE.





;; Set the debug option to enable a backtrace when a


;; problem occurs.


(setq debug-on-error t)





;; Update the Emacs load-path to include the path to


;; the JDEE and its require packages. This code assumes


;; that you have installed the packages in the 


;; /usr/local/emacs/site-lisp directory.  Adjust appropriately.


(add-to-list 'load-path 


  (expand-file-name "/usr/local/emacs/site-lisp/jde/lisp"))


(add-to-list 'load-path 


  (expand-file-name "/usr/local/emacs/site-lisp/semantic"))


(add-to-list 'load-path 


  (expand-file-name "/usr/local/emacs/site-lisp/speedbar"))


(add-to-list 'load-path 


  (expand-file-name "/usr/local/emacs/site-lisp/eieio"))


(add-to-list 'load-path 


  (expand-file-name "/usr/local/emacs/site-lisp/elib"))








;; If you want Emacs to defer loading the JDEE until you open a 


;; Java file, edit the following line


(setq defer-loading-jde nil)


;; to read:


;;


;;  (setq defer-loading-jde t)


;;





(if defer-loading-jde


    (progn


      (autoload 'jde-mode "jde" "JDE mode." t)


      (setq auto-mode-alist


            (append


             '(("\\.java\\'" . jde-mode))


             auto-mode-alist)))


  (require 'jde))








;; Set the basic indentation for Java source files


;; to two spaces.


(add-hook 'jde-mode-hook 


          '(lambda ( )


            (setq c-basic-offset 2)))





;; Include the following only if you want to run


;; bash as your shell.





;; Set up Emacs to run bash as its primary shell.


(setq shell-file-name "bash")


(setq shell-command-switch "-c")


(setq explicit-shell-file-name shell-file-name)


(setenv "SHELL" shell-file-name)


(setq explicit-sh-args '("-login" "-i"))


(if (boundp 'w32-quote-process-args)


  (setq w32-quote-process-args ?\")) ;; Include only for MS Windows.
</PRE><BR>
<P class=docText>Of course, you'll need to make sure the paths in the <TT>add-to-list</TT> '<TT>load-path</TT> lines match the actual directories you're using.</P>
<P class=docText>Compiling the JDEE Lisp files is not required, but as noted in "Byte-Compiling Lisp Files" in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>, it's a good idea and speeds up several operations including general startup times. The JDEE makes this step simple. After you have it installed, start Emacs and run <SPAN class=docEmphBold>M-x jde-compile-jde</SPAN>. You run this command only once, so it is definitely worthwhile.</P><A name=gnu3-CHP-9-SECT-5.5></A>
<H4 class=docSection2Title>9.5.5 Registering Your Java Tools</H4>
<P class=docText>The last step we need <A name=gnu3-CHP-9-ITERM-2589></A><A name=gnu3-CHP-9-ITERM-2590></A>to cover is registering your Java development kits. This is not strictly necessary, but you don't want to skip this step. It is especially handy if you work in an environment where you have to test multiple versions of the JDK. With all of your kits registered in the JDEE, you can switch between versions with a simple variable change.</P>
<P class=docText>To register a JDK, use the <SPAN class=docEmphBold>M-x customize-variable</SPAN> command. The variable you need to customize is <SPAN class=docEmphBold>jde-jdk-registry</SPAN>. That will land you in the interactive customization screen. You can select the <SPAN class=docEmphBold>INS</SPAN> (insert) button to add the version number and path of your JDK. You can repeat that process for as many JDKs as you want to register. See <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-fig-2">Figure 9-2</A> for a list of such entries on a Mac OS X system.</P><A name=gnu3-CHP-9-FIG-2></A>
<CENTER>
<H5 class=docFigureTitle>Figure 9-2. Inserting JDK entries in a Custom list</H5><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_fig0902.gif" width=431 height=452> </CENTER><BR>
<P class=docText>Be sure to hit the State button and save this state for future sessions. You can click the Finish button when you're done or just close the buffer.</P>
<P class=docText>After you have your JDKs registered, you can switch to the active version using that same <SPAN class=docEmphBold>M-x customize-variable</SPAN> command. This time, edit the <SPAN class=docEmphBold>jde-jdk</SPAN> variable. You'll be prompted to choose one of the registered versions. You may or may not want to save this decision for future sessions. In any case, this variable can be edited at any time.</P><A name=gnu3-CHP-9-SECT-5.5.1></A>
<H5 class=docSection3Title>9.5.5.1 JDK tools.jar problems</H5>
<P class=docText>The compilation feature requires access to the <SPAN class=docEmphasis>tools.jar</SPAN> file (or the equivalents built-in to some JDKs). If the JDEE compile command fails with an error message about not being able to find the <SPAN class=docEmphasis>tools.jar</SPAN> file, your best bet is to customize the JDEE variable <SPAN class=docEmphBold>jde-global-classpath</SPAN>. Make sure that variable includes the <SPAN class=docEmphasis>tools.jar</SPAN> file.</P>
<P class=docText>For some systems that do not have a <SPAN class=docEmphasis>tools.jar</SPAN> file<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-fnote-11">[11]</A></SUP>, you can steal that file from another machine, but usually you just need to get your classpath and registry entries set up correctly. Customizing the variables in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-table-6">Table 9-6</A> should get you compiling and running without too much effort.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-11>[11]</A></SUP> For Mac OS X users, the classes normally found in <SPAN class=docEmphasis>tools.jar</SPAN> are already a permanent part of the standard <SPAN class=docEmphasis>classes.jar</SPAN> so they are always available&#151;even though <SPAN class=docEmphasis>tools.jar</SPAN> isn't in any of the library locations.</P></BLOCKQUOTE><A name=gnu3-CHP-9-TABLE-6></A>
<H5 class=docTableTitle>Table 9-6. JDEE variables to customize</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText>JDEE variable</P></TH>
<TH class=thead scope=col>
<P class=docText>Sample values</P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>jde-global-classpath</SPAN> </P></TD>
<TD class=docTableCell><PRE>/usr/local/j2se:.
</PRE><BR></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>jde-jdk-registry</SPAN> </P></TD>
<TD class=docTableCell><PRE>Version = 1.4.2


Path = /usr/local/j2se
</PRE><BR></TD></TR></TBODY></TABLE><BR>
<P class=docText>Whew! That was a lot of work. But the good news is that once you've made it through the installation process, you have all the spiffy features of the JDEE forever at your command. So let's get on with the features!</P><A name=gnu3-CHP-9-SECT-5.6></A>
<H4 class=docSection2Title>9.5.6 Editing with the JDEE</H4>
<P class=docText>First off, you're still in Emacs, so <A name=gnu3-CHP-9-ITERM-2591></A><A name=gnu3-CHP-9-ITERM-2592></A>the usual motion commands described for Java mode (and C mode) still apply. But the JDEE adds two really great features to your editing cycle: command completion and class browsing.</P>
<P class=docText>The idea behind command completion is that the JDEE can (usually) predict which methods and variables are valid choices to make at certain points in your Java program. For example, if you start typing <SPAN class=docEmphBold>System</SPAN>. in your program, there are a finite number of choices for what follows that period. JDEE can display a list of those choices.</P>
<P class=docText>The command to show your list of completions is <SPAN class=docEmphBold>C-c C-v C-</SPAN>. (for <SPAN class=docEmphBold>jde-complete</SPAN>), which defaults to showing you a menu of completions. (You can change that behavior by customizing the <SPAN class=docEmphBold>jde-complete-function</SPAN> variable.) The completions are generated by looking at all of the classes listed in the <SPAN class=docEmphBold>jde-global-classpath</SPAN> variable (or the CLASSPATH environment variable if no global classpath was defined).</P>
<P class=docText>The class browser can be accessed quickly from the JDE menu and launches a BeanShell browser for the class your cursor was on. It's like a context-sensitive documentation tool, but a bit more powerful. <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-fig-3">Figure 9-3</A> shows what you get when starting the browser while your cursor is on the word <SPAN class=docEmphasis>System</SPAN>.</P><A name=gnu3-CHP-9-FIG-3></A>
<CENTER>
<H5 class=docFigureTitle>Figure 9-3. The BeanShell class browser launched from the JDEE</H5><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_fig0903.gif" width=431 height=386> </CENTER><BR>
<P class=docText>You can also launch the class browser with the <SPAN class=docEmphBold>M-x jde-browse-class-at-point</SPAN> command.</P>
<P class=docText>One other edit-time feature worth pointing out is the Code Generation item in the JDE menu. It has some great timesavers built-in, as shown in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-table-7">Table 9-7</A>.</P><A name=gnu3-CHP-9-TABLE-7></A>
<H5 class=docTableTitle>Table 9-7. Code Generation menu options</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText>Keystrokes</P></TH>
<TH class=thead scope=col>
<P class=docText>Menu option</P>
<P class=docText>(M-x command)</P></TH>
<TH class=thead scope=col>
<P class=docText>Action</P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-v C-l</SPAN> (lowercase L)</P></TD>
<TD class=docTableCell>
<P class=docText>Println Wizard(<SPAN class=docEmphBold>jde-gen-println</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText>Prompts for the contents to print and inserts a complete <TT>System.out.println( )</TT> method for you.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-v C-z</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Import Class(<SPAN class=docEmphBold>jde-import-find-and-import</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText>Prompts for the (simple) class name to import and automatically adds the proper import line to the top of your file.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-v i</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Implement Interface(<SPAN class=docEmphBold>jde-wiz-implement-interface</SPAN>)</P></TD>
<TD class=docTableCell>
<P class=docText>Prompts you for the name of the interface to implement. Adds any missing import statements (including dependent imports, such as imports required for method arguments). Provides commented skeletons for each of the methods in the interface.</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Other helpers are available from the JDE menu. Generate Get/Set Pairs in particular is great for working with JavaBeans design patterns. Just create your list of attributes and then run the wizard. It even checks to see if you already have an existing get/set pair. If you do, it notes that get/set pair as "existing" and keeps on trucking so you can use the wizard to update existing classes.</P><A name=gnu3-CHP-9-SECT-5.7></A>
<H4 class=docSection2Title>9.5.7 Compiling and Running with the JDEE</H4>
<P class=docText>Compiling the current buffer <A name=gnu3-CHP-9-ITERM-2594></A><A name=gnu3-CHP-9-ITERM-2595></A><A name=gnu3-CHP-9-ITERM-2596></A>can be done quickly with the <SPAN class=docEmphBold>C-c C-v C-c</SPAN> command. Any errors show up in the compilation buffer. That compilation buffer also allows you to navigate quickly to any errors that the compiler finds. Simply move your cursor to the error in question (using the normal motion commands) and hit <SPAN class=docEmphBold>Enter</SPAN>. You'll find yourself in the right file on the right line number. Very handy indeed.</P>
<P class=docText>Note that you can also run <SPAN class=docEmphBold>ant</SPAN> builds with <SPAN class=docEmphBold>M-x jde-ant-build</SPAN>. Check out the JDEE documentation or the help for various <SPAN class=docEmphBold>jde-ant</SPAN> variables for more information.</P>
<P class=docText>Running a simple program that has its own <TT>main( )</TT> method is easy: just press <SPAN class=docEmphBold>C-c C-v C-r</SPAN>. That command executes the current buffer (by opening an execution buffer named <TT>*</TT><SPAN class=docEmphasis>fully.qualified.ClassName</SPAN><TT>*</TT>). Any output from the program shows in the buffer. You can move around in the buffer just as you would in a normal text buffer.</P>
<P class=docText>Of course, if you are working on anything other than a simple test class, you'll probably be in a package. Java's use of the classpaths rarely leaves room for being at the "bottom" of a package hierarchy. For example, in the package <TT>com.oreilly.demo</TT>, you want to start execution from the same directory that contains the <SPAN class=docEmphasis>com</SPAN> directory, not from the <SPAN class=docEmphasis>demo</SPAN> directory that contains the actual Java files. Regrettably, the <SPAN class=docEmphasis>demo</SPAN> directory is the default.</P>
<P class=docText>You can edit the following variables to make executing in larger projects a bit more convenient:</P>
<DL class=docList>
<DD><BR>
<DT><SPAN class=docPubcolor><SPAN class=docEmphBold>jde-run-working-directory</SPAN></SPAN> 
<DD>
<P class=docList>The directory in which execution starts</P>
<DD><BR>
<DT><SPAN class=docPubcolor><SPAN class=docEmphBold>jde-run-application-class</SPAN></SPAN> 
<DD>
<P class=docList>The fully qualified name of the class that contains the <TT>main( )</TT> method to execute</P></DD></DL>
<P class=docText>With those values set, you should be able to run your application from any buffer, regardless of what directory the file you're editing happens to be in.</P>
<P class=docText>Another fun note about running your application through the JDEE: if any stack traces appear because of exceptions, you can navigate those traces by using the <SPAN class=docEmphBold>C-c C-v C-[</SPAN> and <SPAN class=docEmphBold>C-c C-v C-]</SPAN> commands (up and down, respectively). Again, Emacs makes it possible to manage quite a large portion of a development project all from one interface.</P><A name=gnu3-CHP-9-SECT-5.8></A>
<H4 class=docSection2Title>9.5.8 Debugging with the JDEE</H4>
<P class=docText>A crucial element in any good IDE is its <A name=gnu3-CHP-9-ITERM-2597></A><A name=gnu3-CHP-9-ITERM-2598></A>debugger. The JDEE allows you to stay in the Emacs realm while interacting with the <SPAN class=docEmphBold>jdb</SPAN> process. The JDEE also comes with its own debugger, the JDEbug application. JDEbug is more powerful but requires more setup effort.</P>
<TABLE border=0 cellSpacing=0 cellPadding=1 width="90%" bgColor=black align=center>
<TBODY>
<TR>
<TD>
<TABLE border=0 cellSpacing=0 cellPadding=6 width="100%" bgColor=white>
<TBODY>
<TR>
<TD vAlign=top width=60><IMG src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/warning_yellow.gif" width=51 height=36> </TD>
<TD vAlign=top>
<P class=docText>Before we touch anything, you need to make sure that your classes are compiled with support for debugging. Otherwise, many things will appear broken when you run the debugger.</P>
<P class=docText>To add debug support when you compile, you run the <SPAN class=docEmphBold>javac</SPAN> command with the -<SPAN class=docEmphBold>g</SPAN> option. With the JDEE you can also use the variable <SPAN class=docEmphBold>jde-compile-option-debug</SPAN> to hold all the variations for debugging you like. If you customize this variable through Custom (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-10.html#gnu3-chp-10">Chapter 10</A>), just choose the "all" option for which debugging information to include. (Optionally, you can be more specific and select from the three types of debug information: Lines, Variables, and Source.)</P></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR>
<P class=docText>We'll look at the <SPAN class=docEmphBold>jdb</SPAN> route just to get you started. You can start the debug session by typing <SPAN class=docEmphBold>M-x</SPAN> <SPAN class=docEmphBold>jde-jdb</SPAN>. The same variables that control the starting directory and main application class are used for debugging purposes.</P>
<P class=docText>After you have launched the debugger, you can control the debug process in a number of ways.</P>
<UL>
<LI>
<P class=docList>Interact directly with the <SPAN class=docEmphBold>jdb</SPAN> process in the <TT>*debug*</TT> buffer. Here you can type any command that you would normally give when running <SPAN class=docEmphBold>jdb</SPAN>.</P>
<LI>
<P class=docList>Use the Jdb menu. You have all the usual debug options available: step into/over, continue, toggle breakpoint, and so on. This is a bit more limited than the first approach, but easier to manage if you're new to <SPAN class=docEmphBold>jdb</SPAN>.</P>
<LI>
<P class=docList>Use keyboard commands while you're in your source buffer. These commands are even more limited than the menu options, but give you really quick access to the most common tasks (namely stepping and break points). <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-table-8">Table 9-8</A> shows the commands that are available while you're in a source buffer.</P></LI></UL><A name=gnu3-CHP-9-TABLE-8></A>
<H5 class=docTableTitle>Table 9-8. JDEE debugger controls</H5>
<TABLE border=1 rules=all cellSpacing=0 cellPadding=4 width="100%">
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText>Keystrokes</P></TH>
<TH class=thead scope=col>
<P class=docText>Menu item</P></TH>
<TH class=thead scope=col>
<P class=docText>JDB command</P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-s</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Step Into</P></TD>
<TD class=docTableCell>
<P class=docText>step</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-n</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Step Over</P></TD>
<TD class=docTableCell>
<P class=docText>next</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-c</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Continue</P></TD>
<TD class=docTableCell>
<P class=docText>cont</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-b</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Toggle Breakpoint</P></TD>
<TD class=docTableCell>
<P class=docText>stop in/stop at/clear</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-p</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Display Expression</P></TD>
<TD class=docTableCell>
<P class=docText>print</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><SPAN class=docEmphBold>C-c C-a C-d</SPAN> </P></TD>
<TD class=docTableCell>
<P class=docText>Display Object</P></TD>
<TD class=docTableCell>
<P class=docText>dump</P></TD></TR></TBODY></TABLE><BR>
<P class=docText><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-5.html#gnu3-chp-9-fig-4">Figure 9-4</A> shows a simple application running in debug mode. Notice the small black triangle to the left of the Java source code in the upper buffer. That's the debug cursor that lets you know where you are in the file. It tracks the commands you issue, whether by directly entering <SPAN class=docEmphBold>jdb</SPAN> commands, by menu option, or through the keyboard.</P><A name=gnu3-CHP-9-FIG-4></A>
<CENTER>
<H5 class=docFigureTitle>Figure 9-4. Debugging a Java application with jdb</H5><IMG border=0 alt="" src="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/images/0596006489/figs/ge3_fig0904.gif" width=431 height=445> </CENTER><BR><A name=gnu3-CHP-9-SECT-5.9></A>
<H4 class=docSection2Title>9.5.9 Learning More about the JDEE</H4>
<P class=docText>Clearly, there is a lot <A name=gnu3-CHP-9-ITERM-2599></A>more to the JDEE than we can cover here. The package you download comes with some good documentation and several user guides for the basic JDEE and various options like the debuggers. The JDEE web site, at <A class=docLink href="http://jdee.sunsite.dk/" target=_blank>http://jdee.sunsite.dk</A>, is a great source of information, too. As you would expect from an Emacs package, you can customize everything. Those customizations are stored in your <SPAN class=docEmphasis>.emacs</SPAN> file so you can tweak them by hand (or at least peek at them).</P>
<P class=docText>The best approach is to install the JDEE and start coding with it. If you find yourself saying "There should be a way to do X," get out the documentation. Chances are there is a way to do X&#151;usually with more options than you could hope for!