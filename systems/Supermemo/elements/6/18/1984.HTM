<H3 class=docSection1Title>9.3. C and C++ Support</H3>
<P class=docText>Emacs automatically enters C mode <A name=gnu3-CHP-9-ITERM-2565></A><A name=gnu3-CHP-9-ITERM-2566></A><A name=gnu3-CHP-9-ITERM-2567></A><A name=gnu3-CHP-9-ITERM-2568></A>when you visit a file whose suffix is <SPAN class=docEmphasis>.c</SPAN>, <SPAN class=docEmphasis>.h</SPAN>, <SPAN class=docEmphasis>.y</SPAN> (for <SPAN class=docEmphBold>yacc</SPAN> grammars), or <SPAN class=docEmphasis>.lex</SPAN> (<SPAN class=docEmphBold>lex</SPAN> specification files). Emacs invokes C++ mode when you visit a file whose suffix is <SPAN class=docEmphasis>.C</SPAN>, <SPAN class=docEmphasis>.H</SPAN>, <SPAN class=docEmphasis>.cc</SPAN>, <SPAN class=docEmphasis>.hh</SPAN>, <SPAN class=docEmphasis>.cpp</SPAN>, <SPAN class=docEmphasis>.cxx</SPAN>, <SPAN class=docEmphasis>.hxx</SPAN>, <SPAN class=docEmphasis>.c++</SPAN>, or <SPAN class=docEmphasis>.h++</SPAN>. <FONT class=extract>You can also put any file in C mode manually by typing <SPAN class=docEmphBold>M-x c-mode Enter</SPAN>.</FONT> Similarly, <FONT class=extract>you can use <SPAN class=docEmphBold>c++-mode</SPAN> to put a buffer into C++ mode.</FONT></P>
<P class=docText>Both C and C++ modes are implemented in the same Emacs Lisp package, called <SPAN class=docEmphBold>cc-mode</SPAN>,<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-3.html#gnu3-chp-9-fnote-7">[7]</A></SUP> which also includes a mode for the Objective-C language used in Mac OS X. C mode understands both ANSI C and the older Kernighan and Ritchie C syntax. We describe C mode functions, but you should assume that everything also applies to C++ mode. C++ mode has a small number of additional features, which we describe at the end of this section.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-7>[7]</A></SUP> We know! There is no <SPAN class=docEmphBold>M-x cc-mode</SPAN>. It can be confusing. Just try to remember that the modes are named directly after the language they support.</P></BLOCKQUOTE>
<P class=docText>We should also note that the Emacs mode for Perl is derived from an older version of C mode. If you program in Perl, you will find that virtually all of the motion, indentation, and formatting commands in C mode apply equally to Perl mode, with <SPAN class=docEmphBold>perl-</SPAN> replacing <SPAN class=docEmphBold>c-</SPAN> in their names. Emacs invokes Perl mode on files with suffix <SPAN class=docEmphasis>.pl</SPAN>. (However, to be honest we prefer CPerl mode, discussed later in this chapter.)</P>
<P class=docText>In C mode, Emacs understands the syntax elements described earlier in this chapter. The characters semicolon (;), colon (:), comma (,) curly braces ({ and }), and pound sign (#, for C preprocessor commands) are all electric, meaning that Emacs automatically indents the current line when you type them. It also actively uses the font options when you have font-lock mode turned on.</P><A name=gnu3-CHP-9-SECT-3.1></A>
<H4 class=docSection2Title>9.3.1 Motion Commands</H4>
<P class=docText>In addition to the standard <A name=gnu3-CHP-9-ITERM-2569></A><A name=gnu3-CHP-9-ITERM-2570></A><A name=gnu3-CHP-9-ITERM-2571></A>Emacs commands for words and sentences (which are mainly useful only inside multiline comments), C mode contains advanced commands that know about statements, functions,<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-3.html#gnu3-chp-9-fnote-8">[8]</A></SUP> and preprocessor conditionals. A summary of these commands appears in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-3.html#gnu3-chp-9-table-3">Table 9-3</A>.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-8>[8]</A></SUP> The function commands have "defun" in their names because they are actually adaptations of analogous commands in Lisp mode; a defun is a function definition in Lisp.</P></BLOCKQUOTE><A name=gnu3-CHP-9-TABLE-3></A>
<H5 class=docTableTitle><FONT class=extract>Table 9-3. Advanced C motion commands</FONT></H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP><FONT class=extract>
<COL>
<COL>
<COL></FONT></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Keystrokes</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Command name</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Action</SPAN> </FONT></P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>M-a</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-beginning-of-statement</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the beginning of the current statement.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>M-e</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-end-of-statement</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the end of the current statement.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>M-q</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-fill-paragraph</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>If in comment, fill the paragraph, preserving indentations and decorations.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-a</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>beginning-of-defun</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the beginning of the body of the function surrounding the point.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-e</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>end-of-defun</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the end of the function.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-M-h</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-mark-function</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Put the cursor at the beginning of the function, the mark at the end.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-c C-q</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-indent-defun</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Indent the entire function according to indentation style.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-c C-u</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-up-conditional</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the beginning of the current preprocessor conditional.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-c C-p</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-backward-conditional</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the previous preprocessor conditional.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-c C-n</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>c-forward-conditional</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the next preprocessor conditional.</FONT></P></TD></TR></TBODY></TABLE><BR>
<P class=docText>Notice that the statement motion commands have the same key bindings as <SPAN class=docEmphBold>backward-sentence</SPAN> and <SPAN class=docEmphBold>forward-sentence</SPAN>, respectively. In fact, they act as sentence commands if you use them within a C comment.</P>
<P class=docText><FONT class=extract>Similarly, <SPAN class=docEmphBold>M-q</SPAN> is normally the <SPAN class=docEmphBold>fill-paragraph</SPAN> command; C mode augments it with the ability to preserve indentations and decorative characters at the beginnings of lines.</FONT> For example, if your cursor is anywhere in this comment:</P><PRE>/* This is 


 * a


 * comment paragraph with wildly differing right


 *  margins.


 * It goes on     for a while,


 * then stops.


 */
</PRE><BR>
<P class=docText>typing <SPAN class=docEmphBold>M-q</SPAN> has this result:</P><PRE>/* This is a comment paragraph with wildly differing right margins.


 * It goes on for a while, then stops. */
</PRE><BR>
<P class=docText><FONT class=extract>You will find that the preprocessor conditional motion commands are a godsend if you have to slog through someone else's voluminous code. Especially if you're faced with code built to run on a variety of systems&#8212;like Emacs itself&#8212;often the most important question you need answered is, "What code is actually compiled?"</FONT></P>
<P class=docText><FONT class=extract>With <SPAN class=docEmphBold>C-c C-u</SPAN>, you can tell instantly what preprocessor conditional governs the code in question. Consider this code block:</FONT></P><PRE><FONT class=extract>#define LUCYX


#define BADEXIT -1





#ifdef LUCYX


    ...


    *ptyv = open ("/dev/ptc", O_RDWR | O_NDELAY, 0);


    if (fd &lt; 0)


        return BADEXIT;


    ...


#else


    ...


    fprintf (stderr, "You can't do that on this system!");


    ...


#endif
</FONT></PRE><BR>
<P class=docText><FONT class=extract>Imagine that the ellipses ( . . . ) represent hundreds of lines of code. Now suppose you are trying to determine under what conditions the file <SPAN class=docEmphasis>/dev/ptc</SPAN> is opened. If your cursor is on that line of code, you can type <SPAN class=docEmphBold>C-c C-u</SPAN>, and the cursor moves to the line <SPAN class=docEmphBold>#ifdef LUCYX</SPAN>&#8212;telling you that the code is compiled if you're on a LUCYX system. If you want to skip the code that would not be compiled and go directly to the end of the conditional, type <SPAN class=docEmphBold>C-c C-n</SPAN>. We will see another command that is useful for dealing with C preprocessor code later in this section.</FONT></P>
<P class=docText>C statement and statement block delimiter characters are bound to commands that, in addition to inserting the appropriate character, also provide proper indentation. These characters are <SPAN class=docEmphBold>{</SPAN>, <SPAN class=docEmphBold>}</SPAN>, <SPAN class=docEmphBold>;</SPAN>, and : (for labels and <SPAN class=docEmphBold>switch</SPAN> cases). <FONT class=extract>For example, if you are closing out a statement block or function body, you can press <SPAN class=docEmphBold>C-j</SPAN> (or <SPAN class=docEmphBold>Enter</SPAN>) and type <SPAN class=docEmphBold>}</SPAN>, and Emacs lines it up with its matching <SPAN class=docEmphBold>{</SPAN>. This eliminates the need for you to scroll back through the code to find out what column the <SPAN class=docEmphBold>{</SPAN> is in.</FONT></P>
<P class=docText>Because <SPAN class=docEmphBold>}</SPAN> is a parenthesis-type character, Emacs attempts to "flash" a matching <SPAN class=docEmphBold>{</SPAN> when you type <SPAN class=docEmphBold>}</SPAN>. If the matching <SPAN class=docEmphBold>{</SPAN> is outside of the text displayed in your window, Emacs instead prints the line containing the <SPAN class=docEmphBold>{</SPAN> in the minibuffer. Furthermore, if only whitespace (blanks or tabs) follows the <SPAN class=docEmphBold>{</SPAN> on its line, Emacs also prints a <SPAN class=docEmphBold>^J</SPAN> (for <SPAN class=docEmphBold>C-j</SPAN>) followed by the next line, thus giving a better idea of the context of the <SPAN class=docEmphBold>{</SPAN>.</P>
<P class=docText>Recall the "times" example earlier in this chapter. Let's say you are typing in a <SPAN class=docEmphBold>}</SPAN> to end the function, and the <SPAN class=docEmphBold>{</SPAN> that begins the function body is off-screen. There is no code on the line following the beginning <SPAN class=docEmphBold>{</SPAN>, so you see the following in the minibuffer after you type <SPAN class=docEmphBold>}</SPAN>:</P><PRE>Matches {^J  int i;
</PRE><BR><A name=gnu3-CHP-9-SECT-3.2></A>
<H4 class=docSection2Title>9.3.2 Customizing Code Indentation Style</H4>
<P class=docText>Coding style in C&#8212;or any programming <A name=gnu3-CHP-9-ITERM-2572></A><A name=gnu3-CHP-9-ITERM-2573></A>language for that matter&#8212;is a very personal thing. C programmers learn from various books or by referring to various different pieces of other people's code; eventually they evolve a personal style that may or may not conform to those that they learned from.</P>
<P class=docText>C mode provides a rich set of features for customizing its indentation behavior that mirrors this way of learning the language. At the simplest level, you can choose a coding style by name. Then, if you're not satisfied, you can customize your chosen style or even create your own from scratch. The latter tasks, however, require a fair amount of Emacs Lisp programming knowledge (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>) and perhaps a bit of bravery.</P>
<P class=docText><FONT class=extract>You can choose a named coding style with the command <SPAN class=docEmphBold>M-x c-set-style</SPAN>. This command prompts you for the name of the style you want. </FONT>The easiest thing to do at this point is to type <SPAN class=docEmphBold>Tab</SPAN>, the completion character (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-14.html#gnu3-chp-14">Chapter 14</A>), which brings up a <TT>*Completions*</TT> window that lists all of the choices. Type one of them and press <SPAN class=docEmphBold>Enter</SPAN> to select it.</P>
<P class=docText>By default, Emacs comes loaded with the styles shown in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-3.html#gnu3-chp-9-table-4">Table 9-4</A>.</P><A name=gnu3-CHP-9-TABLE-4></A>
<H5 class=docTableTitle>Table 9-4. Built-in cc-mode indentation styles</H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Style</SPAN> </P></TH>
<TH class=thead scope=col>
<P class=docText><SPAN class=docEmphBold>Description</SPAN> </P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText>bsd</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in code for BSD-derived versions of Unix.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>cc-mode</P></TD>
<TD class=docTableCell>
<P class=docText>The default coding style, from which all others are derived .</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>ellemtel</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in C++ documentation from Ellemtel Telecommunication Systems Laboratories in Sweden .</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>gnu</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in C code for Emacs itself and other GNU-related programs .</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>java</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in Java code (the default for Java mode).</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>k&amp;r</P></TD>
<TD class=docTableCell>
<P class=docText>Style of the classic text on C, Kernighan and Ritchie's <SPAN class=docEmphasis>The C Programming Language</SPAN> .</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>linux</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in C code that is part of the Linux kernel.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>python</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in python extensions.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>stroustrup</P></TD>
<TD class=docTableCell>
<P class=docText>C++ coding style of the standard reference work, Bjarne Stroustrup's <SPAN class=docEmphasis>The C++ Programming Language</SPAN> .</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>user</P></TD>
<TD class=docTableCell>
<P class=docText>Customizations you make to <SPAN class=docEmphasis>.emacs</SPAN> or via Custom (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-10.html#gnu3-chp-10">Chapter 10</A>). All other styles inherit these customizations if you set them.</P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText>whitesmith</P></TD>
<TD class=docTableCell>
<P class=docText>Style used in Whitesmith Ltd.'s documentation for their C and C++ compilers .</P></TD></TR></TBODY></TABLE><BR>
<P class=docText>To show how some of these styles work, let's start with the C function example from earlier in this chapter:</P><PRE>int times (x, y)


int x, y;


{


int i;


int result = 0;





for (i = 0; i &lt; x; i++) 


{


result += y;


}


}
</PRE><BR>
<P class=docText>If you define a region around this code and you type <SPAN class=docEmphBold>C-M-\</SPAN> (for <SPAN class=docEmphBold>indent-region</SPAN>), Emacs reformats the code in the default style like this:</P><PRE>int times (x, y)


    int x, y;


{


    int i;


    int result = 0;





    for (i = 0; i &lt; x; i++) 


        {


            result += y;


        }


}
</PRE><BR>
<P class=docText>If you type <SPAN class=docEmphBold>C-c</SPAN> . (for <SPAN class=docEmphBold>c-set-style</SPAN>), enter <SPAN class=docEmphBold>k&amp;r</SPAN>, and then repeat the reformatting, the code looks like this:</P><PRE>int times (x, y)


int x, y;


{


     int i;


     int result = 0;





     for (i = 0; i &lt; x; i++)


     {


          result += y;


     }


}
</PRE><BR>
<P class=docText>Or, if you want to switch to GNU-style indentation, choose the style <SPAN class=docEmphBold>gnu</SPAN> and reformat. The result is:</P><PRE>int times (x, y)


     int x, y;


{


  int i;


  int result = 0;





  for (i = 0; i &lt; x; i++)


    {


      result += y;


    }


}
</PRE><BR>
<P class=docText>Once you decide on a coding style, you can set it up permanently by putting a line in your <SPAN class=docEmphasis>.emacs</SPAN> file that looks like this:</P><PRE>(add-hook 'c-mode-hook


       '(lambda ( )


         (c-set-style "<TT><I>stylename</I></TT>")))
</PRE><BR>
<P class=docText>Unfortunately, we'll have to wait until <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A> to understand exactly what this code does. For now, make sure that you insert a single quote (') before the <TT>(lambda</TT> in the second line.</P>
<P class=docText>Each coding style contains subtleties that makes it nontrivial for Emacs to implement. Older versions of Emacs did this by defining several variables that controlled various indentation levels; these were not easy to work with and, frankly, did not really cover 100 percent of the nuances of each style. The current version of C mode, in contrast, uses a considerably larger set of variables&#8212;too large, in fact, for anyone other than hardy Emacs Lisp hackers to deal with.</P>
<P class=docText>Therefore, C mode keeps track of groups of these variables and their values under named styles. One huge variable, called <SPAN class=docEmphBold>c-style-alist</SPAN>, contains all of the styles and their associated information. You can customize this beast either by changing values of variables within existing styles or by adding a style of your own. For further details, look in the file <SPAN class=docEmphasis>cc-mode.el</SPAN> in your system's Emacs Lisp directory (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>).</P><A name=gnu3-CHP-9-SECT-3.3></A>
<H4 class=docSection2Title>9.3.3 Additional C and C++ Mode Features</H4>
<P class=docText>C mode contains a number of other useful features, ranging from the generally useful to the arcanely obscure. Perhaps the most interesting of these are two ways of adding additional electric functionality <A name=gnu3-CHP-9-ITERM-2574></A><A name=gnu3-CHP-9-ITERM-2575></A><A name=gnu3-CHP-9-ITERM-2576></A><A name=gnu3-CHP-9-ITERM-2577></A>to certain keystrokes, called <SPAN class=docEmphasis>auto-newline</SPAN> and <SPAN class=docEmphasis>hungry-delete-key</SPAN>.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-3.html#gnu3-chp-9-fnote-9">[9]</A></SUP></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-9>[9]</A></SUP> These emulate <SPAN class=docEmphBold>electric-c-mode</SPAN> in the old Gosling Emacs.</P></BLOCKQUOTE>
<P class=docText><FONT class=extract>When auto-newline is enabled, it causes Emacs to add a newline character and indent the new line properly whenever you type a semicolon (;), curly brace ({ or }), or, at certain times, comma (,) or colon (:). These features can save you some time and help you format your code in a consistent style.</FONT></P>
<P class=docText><FONT class=extract>Auto-newline is off by default. To turn it on, type <SPAN class=docEmphBold>C-c C-a</SPAN> for <SPAN class=docEmphBold>c-toggle-auto-state</SPAN>. (Repeat the same command to turn it off again.) You will see the <SPAN class=docEmphBold>(C)</SPAN> in the mode line change to <SPAN class=docEmphBold>(C/a)</SPAN> as an indication. As an example of how it works, try typing in the code for our <TT>times( )</TT> function. Type the first two lines up to the <SPAN class=docEmphBold>y</SPAN> on the second line:</FONT></P><PRE>int times (x, y)


int x, y<SPAN class=docEmphCursor> </SPAN>
</PRE><BR>
<P class=docText>Now press the semicolon; notice that Emacs inserts a newline and brings you down to the next line:</P><PRE>int times (x, y)


int x, y;


<SPAN class=docEmphCursor> </SPAN>
</PRE><BR>
<P class=docText>Type the opening curly brace, and it happens again:</P><PRE>int times (x, y)


int x, y;


{


  <SPAN class=docEmphCursor> </SPAN>
</PRE><BR>
<P class=docText>Of course, the number of spaces Emacs indents after you type the { depends on the indentation style you are using.</P>
<P class=docText><FONT class=extract>The other optional electric feature, <SPAN class=docEmphBold>hungry-delete-key</SPAN>, is also off by default. To toggle it on, type <SPAN class=docEmphBold>C-c C-d</SPAN> (for <SPAN class=docEmphBold>c-toggle-hungry-state</SPAN>). You will see the <SPAN class=docEmphBold>(C)</SPAN> on the mode line change to <SPAN class=docEmphBold>(C/h)</SPAN>, or if you have <SPAN class=docEmphBold>auto-newline</SPAN> turned on, from <SPAN class=docEmphBold>(C/a)</SPAN> to <SPAN class=docEmphBold>(C/ah)</SPAN>.</FONT></P>
<P class=docText><FONT class=extract>Turning on <SPAN class=docEmphBold>hungry-delete-key</SPAN> empowers the <SPAN class=docEmphBold>Del</SPAN> key to delete all whitespace to the left of the point. To go back to the previous example, assume you just typed the open curly brace. Then, if you press <SPAN class=docEmphBold>Del</SPAN>, Emacs deletes everything back to the curly brace:</FONT></P><PRE>int times (x, y)


int x, y;


{<SPAN class=docEmphCursor> </SPAN>
</PRE><BR>
<P class=docText>You can toggle the states of both <SPAN class=docEmphBold>auto-newline</SPAN> and <SPAN class=docEmphBold>hungry-delete-key</SPAN> with the command <SPAN class=docEmphBold>C-c C-t</SPAN> (for <SPAN class=docEmphBold>c-toggle-auto-hungry-state</SPAN>).</P>
<P class=docText>If you want either of these features on by default when you invoke Emacs, you can put lines like the following in your <SPAN class=docEmphasis>.emacs</SPAN> file:</P><PRE>(add-hook 'c-mode-hook


      '(lambda ( )


         (c-toggle-auto-state)))
</PRE><BR>
<P class=docText>If you want to combine this customization with another C mode customization, such as the indentation style in the previous example, you need to combine the lines of Emacs Lisp code as follows:</P><PRE>(add-hook 'c-mode-hook


      '(lambda ( )


         (c-set-style "<TT><I>stylename</I></TT>")


          (c-toggle-auto-state)))
</PRE><BR>
<P class=docText>Again, we will see what this hook construct means in "Customizing Existing Modes" in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>.</P>
<P class=docText>C mode also provides support for comments; earlier in the chapter, we saw examples of this support. There is, however, another feature. You can customize <SPAN class=docEmphBold>M-j</SPAN> (for <SPAN class=docEmphBold>indent-new-comment-line</SPAN>) so that Emacs continues the same comment on the next line instead of creating a new pair of delimiters. The variable <SPAN class=docEmphBold>comment-multi-line</SPAN> controls this feature: if it is set to <SPAN class=docEmphBold>nil</SPAN> (the default), Emacs generates a new comment on the next line, as in the example from earlier in the chapter:</P><PRE>result += y;                    /* add the multiplicand */


                                /* <SPAN class=docEmphCursor>*</SPAN>/
</PRE><BR>
<P class=docText>This outcome is the result of typing <SPAN class=docEmphBold>M-j</SPAN> after <SPAN class=docEmphBold>multiplicand</SPAN>, and it shows that the cursor is positioned so that you can type the text of the second comment line. However, if you set <SPAN class=docEmphBold>comment-multi-line</SPAN> to <SPAN class=docEmphBold>t</SPAN> (or any value other than <SPAN class=docEmphBold>nil</SPAN>), you get this outcome instead:</P><PRE>result += y;                    /* add the multiplicand 


                                   <SPAN class=docEmphCursor>*</SPAN>/
</PRE><BR>
<P class=docText><FONT class=extract>The final feature we'll cover is <SPAN class=docEmphBold>C-c C-e</SPAN>, (for <SPAN class=docEmphBold>c-macro-expand</SPAN>). Like the conditional compilation motion commands (e.g., <SPAN class=docEmphBold>C-c C-u</SPAN> for <SPAN class=docEmphBold>c-up-conditional</SPAN>), <SPAN class=docEmphBold>c-macro-expand</SPAN> helps you answer the often difficult question, "What code actually gets compiled?" when your source code contains a morass of preprocessor directives.</FONT></P>
<P class=docText><FONT class=extract>To use <SPAN class=docEmphBold>c-macro-expand</SPAN>, you must first define a region. Then, when you type <SPAN class=docEmphBold>C-c C-e</SPAN>, it takes the code within the region, passes it through the actual C preprocessor, and places the output in a window called <TT>*Macroexpansion*</TT>.</FONT></P>
<P class=docText><FONT class=extract>To see how this procedure works, let's go back to the code example from earlier in this chapter that contains C preprocessor directives:</FONT></P><PRE><FONT class=extract>#define LUCYX


#define BADEXIT -1





#ifdef LUCYX


    *ptyv = open ("/dev/ptc", O_RDWR | O_NDELAY, 0);


    if (fd &lt; 0)


        return BADEXIT;


#else


    fprintf (stderr, "You can't do that on this system!");


#endif
</FONT></PRE><BR>
<P class=docText><FONT class=extract>If you define a region around this chunk of code and type <SPAN class=docEmphBold>C-c C-e</SPAN>, you see following the message:</FONT></P><PRE><FONT class=extract>Invoking /lib/cpp -C on region...
</FONT></PRE><BR>
<P class=docText><FONT class=extract>followed by this:</FONT></P><PRE><FONT class=extract>done
</FONT></PRE><BR>
<P class=docText><FONT class=extract>Then you see a <TT>*Macroexpansion*</TT> window that contains this result:</FONT></P><PRE><FONT class=extract>    *ptyv = open ("/dev/ptc", O_RDWR | O_NDELAY, 0);


    if (fd &lt; 0)


        return -1;
</FONT></PRE><BR>
<P class=docText><FONT class=extract>If you want to use <SPAN class=docEmphBold>c-macro-expand</SPAN> with a different C preprocessor command, instead of the default <SPAN class=docEmphBold>/lib/cpp -C</SPAN> (the <SPAN class=docEmphBold>-C</SPAN> option means "preserve comments in the output"), you can set the variable <SPAN class=docEmphBold>c-macro-preprocessor</SPAN>. For example, if you want to use an experimental preprocessor whose filename is <SPAN class=docEmphasis>/usr/local/lib/cpp</SPAN>, put the following line in your <SPAN class=docEmphasis>.emacs</SPAN> file:</FONT></P><PRE><FONT class=extract>(setq c-macro-preprocessor "/usr/local/lib/cpp -C")
</FONT></PRE><BR>
<P class=docText><FONT class=extract>It's highly recommended that you keep the <SPAN class=docEmphBold>-C</SPAN> option for not deleting comments in your code.</FONT></P><A name=gnu3-CHP-9-SECT-3.4></A>
<H4 class=docSection2Title>9.3.4 C++ Mode Differences</H4>
<P class=docText>As we mentioned before, C++ mode uses <A name=gnu3-CHP-9-ITERM-2578></A>the same Emacs Lisp package as C mode. When you're in C++ mode, Emacs understands C++ syntax, as opposed to C (or Objective-C) syntax. That results in differences in how some of the commands discussed here behave, but in ways that are not noticeable to the user.</P>
<P class=docText>There are few apparent differences between C++ and C mode. The most important is the Emacs Lisp code you need to put in your <SPAN class=docEmphasis>.emacs</SPAN> file to customize C++ mode: instead of <SPAN class=docEmphBold>c-mode-hook</SPAN>, you use <SPAN class=docEmphBold>c++-mode-hook</SPAN>. For example, if you want C++ mode's indentation style set to <SPAN class=docEmphBold>Stroustrup</SPAN> with automatic newlines instead of the default style, put the following in your <SPAN class=docEmphasis>.emacs</SPAN> file:</P><PRE>(add-hook 'c++-mode-hook


      '(lambda ( )


         (c-set-style "Stroustrup")


         (c-toggle-auto-state)))
</PRE><BR>
<P class=docText>Notice that you can set hooks for C mode and C++ mode separately this way, so that if you program in both languages, you can set up separate indentation styles for each.</P>
<P class=docText>C++ mode provides an additional command: <SPAN class=docEmphBold>C-c</SPAN> : (for <SPAN class=docEmphBold>c-scope-operator</SPAN>). This command inserts the C++ double colon (::) scope operator. It's necessary because the colon (:) is normally bound to electric functionality that can reindent the line when you don't want that done. The scope operator can appear virtually anywhere in C++ code whereas the single colon usually denotes a <SPAN class=docEmphasis>case</SPAN> label, which requires special indentation. The <SPAN class=docEmphBold>C-c</SPAN> : command may seem somewhat clumsy, but it's a necessary workaround to a syntactic clash in the C++ language.</P>
<P class=docText>Finally, both C and C++ mode contain the commands <SPAN class=docEmphBold>c-forward-into-nomenclature</SPAN> and <SPAN class=docEmphBold>c-backward-into-nomenclature</SPAN>, which aren't bound to any keystrokes by default. These are like <SPAN class=docEmphBold>forward-word</SPAN> and <SPAN class=docEmphBold>backward-word</SPAN>, respectively, but they treat capital letters in the middle of words as if they were starting new words. For example, they treat <SPAN class=docEmphasis>ThisVariableName</SPAN> as if it were three separate words while the standard <SPAN class=docEmphBold>forward-word</SPAN> and <SPAN class=docEmphBold>backward-word</SPAN> commands treat it as one word. <SPAN class=docEmphasis>ThisTypeOfVariableName</SPAN> is a style used by C++ programmers, as opposed to <SPAN class=docEmphasis>this_type_of_variable_name</SPAN>, which is somehow more endemic to old-school C code.</P>
<P class=docText>C++ programmers may want to bind <SPAN class=docEmphBold>c-forward-into-nomenclature</SPAN> and <SPAN class=docEmphBold>c-backward-into-nomenclature</SPAN> to the keystrokes normally bound to the standard word motion commands. We show you how to do this in "Customizing Existing Modes" in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>.</P>
<P class=docText>We've covered the main features of C and C++ modes, but actually these modes include many more features, most of them quite obscure or intended only for hardcore Emacs Lisp-adept customizers. Look in the Emacs Lisp package <SPAN class=docEmphBold>cc-mode.el</SPAN>&#8212;and the ever-expanding list of <SPAN class=docEmphBold>cc-</SPAN> helper packages&#8212;for more details.