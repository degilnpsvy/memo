(interactive "nPercent: ") 
<P></P>
<P>The n in the prompt string tells Emacs to prompt for an integer; the string Percent: appears in the minibuffer. As a slightly more complicated example, let's say we want to write our own version of the replace-string command. Here's how we would do the prompting: </P>
<P><FONT class=clozed>(defun replace-string (from to) </FONT></P>
<P><FONT class=clozed>&nbsp; (interactive "sReplace string: \nsReplace string %s with: ") </FONT></P>
<P><FONT class=clozed>&nbsp; ...)</FONT></P>
<P><FONT class=clozed>The prompt string consists of two sections, sReplace string: and sReplace string %s with:, separated by a Newline. The initial s in each means that a string is expected; the %s is a formatting operator (as in the previous message function) that Emacs replaces with the user's response to the first prompt. When applying formatting operators in a prompt, it is as if message has been called with a list of all responses read so far, so the first formatting operator is applied to the first response, and so on.</FONT></P>
<P><FONT class=clozed>When this command is invoked, first the prompt Replace string: appears in the minibuffer. Assume the user types fred in response. After the user presses Enter, the prompt Replace fred with: appears. The user types the replacement string and presses Enter again.</FONT></P>
<P><FONT class=clozed>The two strings the user types are used as values of the function arguments from and to (in that order), and the command runs to completion. Thus, interactive supplies values to the function's arguments in the order of the sections of the prompt string.</FONT></P>
<P><FONT class=clozed>The use of interactive does not preclude calling the function from other Lisp code; in this case, the calling function needs to supply values for all arguments. For example, if we were interested in calling our version of replace-string from another Lisp function that needs to replace all occurrences of "Bill" with "Deb" in a file, we would use</FONT> </P>
<P>(replace-string "Bill" "Deb") </P>
<P>The function is not being called interactively in this case, so the interactive statement has no effect; the argument from is set to "Bill," and to is set to "Deb."