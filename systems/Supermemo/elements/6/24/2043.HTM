<H3 style="MARGIN: auto 0cm"><SPAN lang=EN-US style="COLOR: #1e5798; FONT-FAMILY: 'Tahoma','sans-serif'">11.2. Lisp Primitive Functions</SPAN></H3>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">Now that you've seen how to<SPAN class=apple-converted-space>&nbsp;</SPAN><A name=gnu3-CHP-11-ITERM-2771></A><A name=gnu3-CHP-11-ITERM-2770></A><A name=gnu3-CHP-11-ITERM-2769></A>write a working command, we'll discuss Lisp's primitive functions. These are the building blocks from which you'll build your functions. As mentioned above, Lisp uses functions where other languages would use operators, that is, for arithmetic, comparison, and logic.<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><SPAN lang=EN-US><A href="file:///D:/&#230;&#710;&#8216;&#231;&#353;&#8222;&#233;&#8230;&#183;&#231;&#8250;&#732;/&#229;&#183;&#165;&#228;&#189;&#339;&#231;&#8250;&#174;&#229;&#189;&#8226;/Now/&#229;&#183;&#165;&#228;&#189;&#339;&#229;&#376;&#186;&#231;&#161;&#8364;/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11-sect-2.html#gnu3-chp-11-table-3"><SPAN style="FONT-SIZE: 10pt; COLOR: #1e5798; FONT-FAMILY: 'Tahoma','sans-serif'">Table 11-3</SPAN></A></SPAN><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">shows some Lisp primitive functions that are equivalent to these operators.</SPAN></P>
<H5 style="MARGIN: auto 0cm"><A name=gnu3-CHP-11-TABLE-3></A><SPAN lang=EN-US style="FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>Table 11-3. Lisp primitive functions</FONT></SPAN></H5>
<TABLE class=MsoNormalTable style="WIDTH: 100%; mso-cellspacing: 0cm; mso-yfti-tbllook: 1184; mso-padding-alt: 3.0pt 3.0pt 3.0pt 3.0pt" cellSpacing=0 cellPadding=0 width="100%" border=1>
<TBODY>
<TR style="mso-yfti-irow: 0; mso-yfti-firstrow: yes">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=docemphbold><SPAN lang=EN-US style="FONT-SIZE: 10pt">Arithmetic</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>+</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>-</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>*</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>/</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 1">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>%</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(remainder)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 2">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>1+</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(increment)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 3">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>1-</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(decrement)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 4">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>max</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>min</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 5">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=docemphbold><SPAN lang=EN-US style="FONT-SIZE: 10pt">Comparison</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>&gt;</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>&lt;</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>&gt;=</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>&lt;=</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 6">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>/=</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(not equal)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 7">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>=</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(for numbers and characters)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 8">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>equal</SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt">(for strings and other complex objects)</SPAN></FONT></FONT></P></TD></TR>
<TR style="mso-yfti-irow: 9; mso-yfti-lastrow: yes">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=docemphbold><SPAN lang=EN-US style="FONT-SIZE: 10pt">Logic</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD>
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 3pt; BORDER-TOP: #ffffff; PADDING-LEFT: 3pt; PADDING-BOTTOM: 3pt; BORDER-LEFT: #ffffff; PADDING-TOP: 3pt; BORDER-BOTTOM: #ffffff; BACKGROUND-COLOR: transparent">
<P class=doctext style="MARGIN: auto 0cm"><FONT face=&#23435;&#20307;><FONT class=extract><TT><SPAN lang=EN-US>and</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>or</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US>not</SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt"></SPAN></FONT></FONT></P></TD></TR></TBODY></TABLE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">All the arithmetic functions except<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>1+</FONT></SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>1-</FONT></SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">, and<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>%</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">can take arbitrarily many arguments, as can<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>and</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">and<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>or</FONT></SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">. An arithmetic function returns floating point values only if at least one argument is a floating point number, so for example,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>(/ 7.0 4)</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">returns 1.75, and<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>(/ 7 4)</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">returns 1. Notice that integer division truncates the remainder.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">It may seem inefficient or syntactically ugly to use functions for everything. However, one of the main merits of Lisp is that the core of the language is small and easy to interpret efficiently. In addition, the syntax is not as much of a problem if you have support tools such as Emacs's Lisp modes to help you.</SPAN></P>
<H4 style="MARGIN: auto 0cm"><A name=gnu3-CHP-11-SECT-2.1></A><SPAN lang=EN-US style="COLOR: #1e5798; FONT-FAMILY: 'Tahoma','sans-serif'">11.2.1 Statement Blocks</SPAN></H4>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">We have seen that a<SPAN class=apple-converted-space>&nbsp;</SPAN><A name=gnu3-CHP-11-ITERM-2774></A><A name=gnu3-CHP-11-ITERM-2773></A><A name=gnu3-CHP-11-ITERM-2772></A>statement block can be defined using the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function. We also saw that<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>while</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>and<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>save-excursion</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>include statement blocks. Other important constructs also define statement blocks:<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>progn</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>and other forms of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN>.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN class=docemphbold><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">progn</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">, the most basic, has the form:</SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; </SPAN>(progn</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><TT><I>statement-block</I></TT>)</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN class=docemphbold><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">progn</SPAN></SPAN><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is a simple way of making a block of statements look like a single one, somewhat like the curly braces of Java or the<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>begin</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">and<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>end</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">of Pascal. The value returned by<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>progn</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is the value returned by the last statement in the block.<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>progn</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is especially useful with control structures like<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>(see the following discussion) that, unlike<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>while</SPAN>, do not include statement blocks.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function has other forms as well. The simplest is:</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; </SPAN>(let (<TT><I>var1 var2</I></TT> <SPAN class=docemphbold>..</SPAN>.)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><TT><I>statement-block</I></TT>)</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>&nbsp;</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">In this case, instead of a list of<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>(<I>var value</I>)</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">pairs, there is simply a list of variable names. As with the other form of let, these become local variables accessible in the statement block. However, instead of initializing them to given values, they are all just initialized to<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><B><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>nil</FONT></SPAN></B></TT></FONT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>.</FONT> You can actually mix both forms within the same<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement, for example:</SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;<FONT class=extract>&nbsp; </FONT></SPAN><FONT class=extract>(let (<TT><I>var1</I></TT> (var2 value2) var3 ...)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><TT><I>statement-block</I></TT>)</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>&nbsp;</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>In the form of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>we saw first, the initial values for the local variables can be function calls (remember that all functions return values). All such functions are evaluated before any values are assigned to variables.</FONT> <FONT class=extract>However, there may be cases in which you want the values of some local variables to be available for computing the values of others. This is where<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let*</SPAN>, the final version of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN>, comes in.<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let*</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>steps through its assignments in order, assigning each local variable a value before moving on to the next.</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>For example, let's say we want to write a function<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>goto-percent</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>that allows you to go to a place in the current buffer expressed as a percentage of the text in the buffer. Here is one way to write this function:</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>(defun goto-percent (pct)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(interactive "nGoto percent: ")</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(let* ((size (point-max))</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>(charpos (/ (* size pct) 100)))</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>(goto-char charpos)))</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>&nbsp;</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">As we saw earlier, the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>interactive</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function is used to prompt users for values of arguments. In this case, it prompts for the integer value of the argument<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>pct</SPAN>. Then the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let*</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function initializes<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>size</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>to the size of the buffer in characters, then uses that value to compute the character position<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>charpos</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>that is<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>pct</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>(percent) of the buffer's size. Finally, the call of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>goto-char</SPAN>causes point to be moved to that character position in the current window.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">The important thing to notice is that if we had used<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let*</SPAN>, the value of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>size</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>would not be available when computing the value of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>charpos</SPAN>.<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let*</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>can also be used in the<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>(<I>var1 var2 ...</I>)</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">format, just like<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>let</SPAN>, but there wouldn't be any point in doing so.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>We should also note that a more efficient way to write<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>goto-percent</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is this:</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>(defun goto-percent (pct)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(interactive "nPercent: ")</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(goto-char (/ (* pct (point-max)) 100)))</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><A name=gnu3-CHP-11-SECT-2.2></A><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></P>
<H4 style="MARGIN: auto 0cm"><SPAN lang=EN-US style="COLOR: #1e5798; FONT-FAMILY: 'Tahoma','sans-serif'">11.2.2 Control Structures</SPAN></H4>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">We already saw that the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>while</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function<SPAN class=apple-converted-space>&nbsp;</SPAN><A name=gnu3-CHP-11-ITERM-2777></A><A name=gnu3-CHP-11-ITERM-2776></A><A name=gnu3-CHP-11-ITERM-2775></A>acts as a control structure like similar statements in other languages. There are two other important control structures in Lisp:<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>and<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN>.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function has the form:</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; </SPAN>(if <TT><I>condition</I></TT> <TT><I>true-case</I></TT> <TT><I>false-block</I></TT>)</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>&nbsp;</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">Here, the condition is evaluated; if it is non-<SPAN class=docemphbold>nil</SPAN>,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><I><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>true-case</FONT></SPAN></I></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is evaluated; if<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>nil</SPAN>,<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><I><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>false-block</FONT></SPAN></I></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is evaluated. Note that<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><I><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>true-case</FONT></SPAN></I></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is a single statement whereas<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><I><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>false-block</FONT></SPAN></I></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is a statement block;<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><I><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>false-block</FONT></SPAN></I></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is optional.</SPAN></FONT></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">As an example, let's suppose we're writing a function that performs some complicated series of edits to a buffer and then reports how many changes it made. We're perfectionists, so we want the status report to be properly pluralized, that is to say "made 53 changes" or "made 1 change." This is a common enough programming need that we decide to write a general-purpose function to do it so that we can use it in other projects too.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">The function takes two arguments: the word to be pluralized (if necessary) and the count to be displayed (which determines whether it's necessary).</SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;>(defun pluralize (word count)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(if (= count 1)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>word</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>(concat word "s")))</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">The condition in the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>clause tests to see if<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>count</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is equal to 1. If so, the first statement gets executed. Remember that the "true" part of the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function is only one statement, so<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>progn </SPAN>would be necessary to make a statement block if we wanted to do more than one thing. In this case, we have the opposite extreme; our "true" part is a single variable,<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>word</SPAN>. Although this looks strange, it is actually a very common Lisp idiom and worth getting used to. When the condition block is true, the value of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>word</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is evaluated, and this value becomes the value of the entire<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement. Because that's the last statement in our function, it is the value returned by<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>pluralize</SPAN>. Note that this is exactly the result we want when<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>count</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is 1: the value of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>word</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is returned unchanged.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">The remaining portion of the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement is evaluated when the condition is false, which is to say, when<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>count</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>has a value other than 1. This results in a call to the built-in<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>concat</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function, which concatenates all its arguments into a single string. In this case it adds an "s" at the end of the word we've passed in. Again, the result of this concatenation becomes the result of the<SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement and the result of our<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>pluralize</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">If you type it in and try it out, you'll see results like this:</SPAN></P><PRE><FONT size=3><FONT face=&#23435;&#20307;><B><SPAN lang=EN-US>(pluralize "goat" 5)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;>"goats"</FONT></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><B><SPAN lang=EN-US>(pluralize "change" 1)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;>"change"</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">Of course, this function can be tripped up easily enough. You may have tried something like this already:</SPAN></P><PRE><FONT size=3><FONT face=&#23435;&#20307;><B><SPAN lang=EN-US>(pluralize "mouse" 5)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;>"mouses"</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">To fix this, we'd need to be able to tell the function to use an alternate plural form for tricky words. But it would be nice if the simple cases could remain as simple as they are now. This is a good opportunity to use an optional parameter. If necessary, we supply the plural form to use; if we don't supply one, the function acts as it did in its first incarnation. Here's how we'd achieve that:</SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>(defun pluralize (word count &amp;optional plural)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(if (= count 1)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>word</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>(if (null plural)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>(concat word "s")</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>plural)))</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract></FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The "else" part of our code has become another<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement. It uses the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>null</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function to check whether we were given the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>plural</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>parameter or not. If<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>plural</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>was omitted, it has the value<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>nil</SPAN>and the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>null</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function returns<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>t</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>if its argument is<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>nil</SPAN>. So this logic reads "if<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>b</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>was missing, just add an<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>s</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>to<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>word</SPAN>; otherwise return the special<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>plural</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>value we were given."</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>This gives us results like this:</FONT></SPAN></P><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(pluralize "mouse" 5)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><FONT class=extract><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;>"mouses"</FONT></FONT></SPAN></FONT></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(pluralize "mouse" 5 "mice")</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"mice"</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(pluralize "mouse" 1 "mice")</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"mouse"</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract></FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>A more general conditional control structure is the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function, which has the following form:</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; </SPAN>(cond</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>(<TT><I>condition1</I></TT><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><TT><I>statement-block1</I></TT>)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>(<TT><I>condition2</I></TT><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><TT><I>statement-block2</I></TT>)</FONT></FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><SPAN class=docemphbold>..</SPAN>.)</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">Java and Perl programmers can think of this as a sequence of<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphasis>if then else if then else if</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>. . . , or as a kind of generalized switch statement. The conditions are evaluated in order, and when one of them evaluates to non-</SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>nil</FONT></SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">, the corresponding statement block is executed; the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function terminates and returns the last value in that statement block.</SPAN><SPAN lang=EN-US><A href="file:///D:/&#230;&#710;&#8216;&#231;&#353;&#8222;&#233;&#8230;&#183;&#231;&#8250;&#732;/&#229;&#183;&#165;&#228;&#189;&#339;&#231;&#8250;&#174;&#229;&#189;&#8226;/Now/&#229;&#183;&#165;&#228;&#189;&#339;&#229;&#376;&#186;&#231;&#161;&#8364;/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11-sect-2.html#gnu3-chp-11-fnote-5"><SUP><SPAN style="FONT-SIZE: 10pt; COLOR: #1e5798; FONT-FAMILY: 'Tahoma','sans-serif'">[5]</SPAN></SUP></A></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"></SPAN></P>
<P class=docfootnote style="MARGIN: auto 0cm"><A name=gnu3-CHP-11-FNOTE-5><SUP><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">[5]</SPAN></SUP></A><SPAN style="mso-bookmark: gnu3-CHP-11-FNOTE-5"></SPAN><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">Statement blocks are actually optional; some programmers like to omit the final statement block, leaving the final "condition" as an "otherwise" clause to be executed if all of the preceding conditions evaluate to<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>nil</FONT></SPAN></TT><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">. If the statement block is omitted, the value returned by<SPAN class=apple-converted-space>&nbsp;</SPAN></SPAN><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>cond</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">is simply the value of the condition.</SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">We can use<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>to give a more folksy feel to our hypothetical status reporter now that it's pluralizing nicely. Instead of reporting an actual numeric value for the number of changes, we could have it say<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphasis>no</SPAN>,<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphasis>one</SPAN>,<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphasis>two</SPAN>, or<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphasis>many</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>as appropriate. Again we'll write a general function to do this:</SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>(defun how-many (count)</FONT></FONT></SPAN></PRE><PRE><FONT class=extract><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(cond ((zerop count) "no")</FONT></FONT></SPAN></FONT></PRE><PRE><FONT class=extract><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>((= count 1) "one")</FONT></FONT></SPAN></FONT></PRE><PRE><FONT class=extract><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>((= count 2) "two")</FONT></FONT></SPAN></FONT></PRE><PRE><FONT class=extract><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>&nbsp;</FONT></SPAN><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>(t "many")))</FONT></FONT></SPAN></FONT></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The first conditional<SPAN class=apple-converted-space>&nbsp;</SPAN></FONT><A name=gnu3-CHP-11-ITERM-2781></A><A name=gnu3-CHP-11-ITERM-2780></A><A name=gnu3-CHP-11-ITERM-2779></A><A name=gnu3-CHP-11-ITERM-2778></A><FONT class=extract>expression introduces a new primitive Lisp function,<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>zerop</SPAN>. It checks whether its argument is zero, and returns<SPAN class=apple-converted-space>&nbsp;</SPAN></FONT></SPAN><FONT class=extract><TT><SPAN lang=EN-US><FONT face=&#23435;&#20307; size=3>t</FONT></SPAN></TT><SPAN class=apple-converted-space><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'">(true) when it is. So when<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>count</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is zero, the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN>statement takes this first branch, and our function returns the value<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>no</SPAN>. This strange function name bears a little explanation. It is pronounced "zero-pee" and is short for "zero predicate." In the realm of mathematical logic from which Lisp evolved, a predicate is a function that returns true or false based on some attribute of its argument. Lisp has a wide variety of similar predicate functions, with structurally related names. When you run into the next one, you'll understand it. (Of course, you might now expect the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>null</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>function we introduced in the previous example to be called "<SPAN class=docemphbold>nilp</SPAN>" instead. Nobody's perfectly consistent.)</SPAN></FONT></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The next two conditional expressions in the<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>cond</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>statement check if<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>count</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>is 1 or 2 and cause it to return "one" or "two" as appropriate. We could have written the first one using the same structure, but then we'd have missed out on an opportunity for a digression into Lisp trivia!</FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>The last conditional expression is simply the atom<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>t</SPAN><SPAN class=apple-converted-space>&nbsp;</SPAN>(true), which means its body is executed whenever all the preceding expressions failed. It returns the value<SPAN class=apple-converted-space>&nbsp;</SPAN><SPAN class=docemphbold>many</SPAN>. Executing this function gives us results like these:</FONT></SPAN></P><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(how-many 1)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"one"</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(how-many 0)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"no"</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(how-many 3)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"many"</FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract></FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>Combining these two helper functions into a mechanism to report the change count for our fancy command is easy.</FONT></SPAN></P><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>(defun report-change-count (count)</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>(message "Made %s %s." (how-many count) (pluralize "change" count)))</FONT></FONT></FONT></SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract></FONT></SPAN></P>
<P class=doctext style="MARGIN: auto 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: 'Tahoma','sans-serif'"><FONT class=extract>We get results like these:</FONT></SPAN></P><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(report-change-count 0)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"Made no changes."</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(report-change-count 1)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"Made one change."</FONT></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><FONT size=3><FONT face=&#23435;&#20307;><FONT class=extract><B><SPAN lang=EN-US>(report-change-count 1329)</SPAN></B><SPAN lang=EN-US></SPAN></FONT></FONT></FONT></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT class=extract face=&#23435;&#20307; size=3></FONT></SPAN></PRE><PRE><SPAN lang=EN-US><FONT size=3><FONT class=extract face=&#23435;&#20307;>"Made many changes."</FONT></FONT></SPAN></PRE>