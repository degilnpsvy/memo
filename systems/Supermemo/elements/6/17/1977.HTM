<H3 class=docSection1Title>9.1. Emacs as an IDE</H3>
<P class=docText>Emacs provides a <A name=gnu3-CHP-9-ITERM-2516></A>number of features that appeal to developers. You can edit code quickly with font support and auto-completion of function and variable names; you can compile the program and even run a debugger all without leaving your "editor." While you don't have some of the graphical tools commonly found in commercial integrated development environments (IDEs), almost every other feature of those IDEs can be found in Emacs&#8212;for every language you could imagine working in.</P>
<P class=docText><FONT class=extract>Of course, there will always be occasions when you need to view your documents without the bells and whistles some language modes attach. You can always switch to plain text (<SPAN class=docEmphBold>M-x text-mode</SPAN>) or, more to the point, fundamental mode (<SPAN class=docEmphBold>M-x fundamental-mode</SPAN>).</FONT></P><A name=gnu3-CHP-9-SECT-1.1></A>
<H4 class=docSection2Title>9.1.1 Compiling and Debugging</H4>
<P class=docText>As mentioned at the <A name=gnu3-CHP-9-ITERM-2517></A><A name=gnu3-CHP-9-ITERM-2518></A><A name=gnu3-CHP-9-ITERM-2519></A><A name=gnu3-CHP-9-ITERM-2520></A>beginning of this chapter, Emacs's support for programmers does not end when you are done writing the code. A typical strategy for using Emacs when working on a large programming project is to log in, go to the directory where your source files reside, and invoke Emacs on the source files (e.g., <SPAN class=docEmphBold>emacs Makefile myproj*.[ch]</SPAN> for C programmers). While you are editing your code, you can compile it using the commands described later&#8212;as you will see, you need not even worry about saving your changes. You can also test your compiled code in a shell using shell mode (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-5.html#gnu3-chp-5">Chapter 5</A>). The bottom line is that you should rarely&#8212;if ever&#8212;have to leave Emacs throughout your session.</P>
<P class=docText><FONT class=extract>Emacs provides an interface </FONT><A name=gnu3-CHP-9-ITERM-2521></A><A name=gnu3-CHP-9-ITERM-2522></A><A name=gnu3-CHP-9-ITERM-2523></A><FONT class=extract>to compilers and the Unix <SPAN class=docEmphBold>make</SPAN> utility that is more direct and powerful than shell mode. At the heart of this facility is the command <SPAN class=docEmphBold>M-x compile Enter</SPAN>. This command causes a series of events to occur.</FONT> <FONT class=extract>First, it prompts you for a compilation command. The default command is <SPAN class=docEmphBold>make -k</SPAN>,<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-1.html#gnu3-chp-9-fnote-1">[1]</A></SUP> but if you type another command, that new command becomes the default for subsequent invocations during your Emacs session. You can change the default by setting the variable <SPAN class=docEmphBold>compile-command</SPAN> in your <SPAN class=docEmphasis>.emacs</SPAN> file. For example, to use the Java build tool <SPAN class=docEmphBold>ant</SPAN> as your default compile command, just add this line:</FONT></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-1><FONT class=extract>[1]</FONT></A></SUP><FONT class=extract> The <SPAN class=docEmphBold>-k</SPAN> option overrides <SPAN class=docEmphBold>make</SPAN>'s default of stopping after a job returns an error. Instead, <SPAN class=docEmphBold>make</SPAN> continues on branches of the dependency tree that do not depend on the branch where the error occurred.</FONT></P></BLOCKQUOTE><PRE><FONT class=extract>(setq 'compile-command "ant -emacs")</FONT>
</PRE><BR>
<P class=docText>After you have typed the command, Emacs offers to save all unsaved file buffers, thus relieving you of the responsibility of making sure your changes have been saved. It then creates a buffer called <TT>*compilation*</TT> and an associated window. It runs the compilation command (as a subprocess, just like the shell in shell mode), with output going to the <TT>*compilation*</TT> buffer. While the command runs, the minibuffer says <TT>Compiling: run</TT>; it says <TT>exit</TT> when the compile job finishes.</P>
<P class=docText><FONT class=extract>Now the fun begins. If the compilation resulted in an error, you can type <SPAN class=docEmphBold>C-x `</SPAN> (for <SPAN class=docEmphBold>next-error</SPAN>; this is a backquote, not a single quote). Emacs reads the first error message, figures out the file and line number of the error, and visits the file at that line number. After you have corrected the error, you can type <SPAN class=docEmphBold>C-x `</SPAN> again to visit subsequent error locations. Each time you type <SPAN class=docEmphBold>C-x `</SPAN>, Emacs scrolls the <TT>*compilation*</TT> window so that the current error message appears at the top.</FONT></P>
<P class=docText><FONT class=extract>To start at the first error message again, type <SPAN class=docEmphBold>C-x `</SPAN> with a prefix argument (i.e., <SPAN class=docEmphBold>C-u C-x `</SPAN>). A nice thing about <SPAN class=docEmphBold>C-x `</SPAN> is that you can use it as soon as an error is encountered; you do not have to wait for the compilation to finish.</FONT></P>
<P class=docText><FONT class=extract>The mode of the <TT>*compilation*</TT> buffer (compilation mode) supports a few other useful commands for navigating through the error messages as summarized in </FONT><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-1.html#gnu3-chp-9-table-1"><FONT class=extract>Table 9-1</FONT></A><FONT class=extract>.</FONT></P><A name=gnu3-CHP-9-TABLE-1></A>
<H5 class=docTableTitle><FONT class=extract>Table 9-1. Compilation mode commands</FONT></H5>
<TABLE cellSpacing=0 cellPadding=4 rules=all width="100%" border=1>
<COLGROUP><FONT class=extract>
<COL>
<COL>
<COL></FONT></COLGROUP>
<THEAD>
<TR>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Keystrokes</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Command name</SPAN> </FONT></P></TH>
<TH class=thead scope=col>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Action</SPAN> </FONT></P></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-x `</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>next-error</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the next error message and visit the corresponding source code.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>M-n</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>compilation-next-error</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the next error message.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>M-p</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>compilation-previous-error</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Move to the previous error message.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>C-c C-c</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>compilation-goto-error</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Visit the source code for the current error message.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Space</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>scroll-down</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Scroll down one screen.</FONT></P></TD></TR>
<TR>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Del</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>scroll-up</SPAN> </FONT></P></TD>
<TD class=docTableCell>
<P class=docText><FONT class=extract>Scroll up one screen.</FONT></P></TD></TR></TBODY></TABLE><BR>
<P class=docText><FONT class=extract><SPAN class=docEmphBold>Space</SPAN> and <SPAN class=docEmphBold>Del</SPAN> are handy screen-scrolling commands found in various read-only Emacs modes.</FONT></P>
<P class=docText><FONT class=extract>Note that <SPAN class=docEmphBold>M-n</SPAN> and <SPAN class=docEmphBold>M-p</SPAN> do not visit the source code corresponding to the error message; they simply allow you to move easily through error messages that may take up more than one line each. However, you can visit the source code from any error message by typing <SPAN class=docEmphBold>C-c C-c</SPAN>.</FONT></P>
<P class=docText><FONT class=extract>How does Emacs interpret </FONT><A name=gnu3-CHP-9-ITERM-2526></A><A name=gnu3-CHP-9-ITERM-2527></A><FONT class=extract>the error message? It uses the variable <SPAN class=docEmphBold>compilation-error-regexp-alist</SPAN>, which is a list of regular expressions designed to match the error messages of a wide variety of C and C++ compilers and the <SPAN class=docEmphBold>lint</SPAN> C code checking program.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-1.html#gnu3-chp-9-fnote-2">[2]</A></SUP> It should also work with compilers for languages for which Emacs has language modes, such as Java, Fortran, Ada, and Modula-2. Emacs tries to parse (analyze) an error message with each of the regular expressions in the list until it finds one that extracts the filename and line number where the error occurred.</FONT></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-2><FONT class=extract>[2]</FONT></A></SUP><FONT class=extract> Unfortunately, Emacs won't understand error messages generated by <SPAN class=docEmphBold>make</SPAN> itself, such as those due to syntax errors in your <SPAN class=docEmphasis>Makefile</SPAN>.</FONT></P></BLOCKQUOTE>
<P class=docText>There is a chance that the error <A name=gnu3-CHP-9-ITERM-2528></A><A name=gnu3-CHP-9-ITERM-2529></A>message parser won't work with certain compilers, especially if you are using Emacs on a non-Unix system. You can find out by trying <SPAN class=docEmphBold>M-x compile</SPAN> on some code that you know contains an error; if you type <SPAN class=docEmphBold>C-x `</SPAN>, and Emacs claims that there are <TT>no more errors</TT>, the <SPAN class=docEmphBold>next-error</SPAN> feature does not work with your compiler.</P>
<P class=docText>If the parser doesn't work for you, you may want to try adding a regular expression to <SPAN class=docEmphBold>compilation-error-regexp-alist</SPAN> that fits your compiler's error message format. We'll show you an example of this in <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>.</P>
<P class=docText><FONT class=extract>The <SPAN class=docEmphBold>compile</SPAN> package also </FONT><A name=gnu3-CHP-9-ITERM-2530></A><FONT class=extract>includes similar support for the Unix <SPAN class=docEmphBold>grep</SPAN> (search files) command, thus effectively giving Emacs a multifile search capability. If you type <SPAN class=docEmphBold>M-x grep</SPAN>, you are prompted for arguments to send to <SPAN class=docEmphBold>grep</SPAN>&#8212;that is, a search pattern and filename(s). Emacs runs <SPAN class=docEmphBold>grep</SPAN> with the <SPAN class=docEmphBold>-n</SPAN> option, which tells it to print filenames and line numbers of matching lines.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-1.html#gnu3-chp-9-fnote-3">[3]</A></SUP> The same happens as with <SPAN class=docEmphBold>M-x compile</SPAN>; you can type <SPAN class=docEmphBold>C-x `</SPAN> to have Emacs visit the next matched line in its file.</FONT></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-3><FONT class=extract>[3]</FONT></A></SUP><FONT class=extract> If <SPAN class=docEmphBold>grep -n</SPAN> is run on only one file, it just prints line numbers; Emacs forces it to print the filename as well in this case by appending the dummy file <SPAN class=docEmphasis>/dev/null</SPAN> to the <SPAN class=docEmphBold>grep</SPAN> command.</FONT></P></BLOCKQUOTE>