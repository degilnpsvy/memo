<H3 id=_Formatting_Options>Formatting Options</H3>
<P id=_break-closing-brackets><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--break-closing-brackets / -y </CODE><BR></FONT></FONT></STRONG>When used with --brackets=attach, --brackets=linux, or --brackets=stroustrup, this breaks closing headers (e.g. 'else', 'catch', ...) from their immediately preceding closing brackets. Closing header brackets are always broken with broken brackets, horstmann brackets, indented blocks, and indented brackets.</P>
<DIV class=code><PRE>void Foo(bool isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        anotherBar();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes (a broken 'else'):</P><PRE>void Foo(bool isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
    else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        anotherBar();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_break-elseifs><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--break-elseifs / -e</CODE><BR></FONT></FONT></STRONG>Break "else if" header combinations into separate lines. This option has no effect if keep-one-line-statements is used, the "else if" statements will remain as they are.</P>
<P>If this option is NOT used, "else if" header combinations will be placed on a single line.</P>
<DIV class=code><PRE>if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
else if (isFoo1()) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar1();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
else if (isFoo2()) <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
    bar2;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
else
    if (isFoo1()) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar1();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000> </FONT></SPAN> else
        if (isFoo2()) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
            bar2();
        <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_add-brackets><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--add-brackets / -j </CODE><BR></FONT></FONT></STRONG>Add brackets to unbracketed one line conditional statements (e.g. '<CODE><FONT color=#000080>if</FONT></CODE>', '<CODE><FONT color=#000080>for</FONT></CODE>', '<CODE><FONT color=#000080>while</FONT></CODE>'...). The statement must be on a single line. The brackets will be added according to the currently requested predefined style or bracket type. If no style or bracket type is requested the brackets will be attached. If --add-one-line-brackets is also used the result will be one line brackets.</P>
<DIV class=code><PRE>if (isFoo)
    isFoo = false;
</PRE>
<P class=code>becomes:</P><PRE>if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    isFoo = false;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_add-one-line-brackets><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--add-one-line-brackets / -J </CODE><BR></FONT></FONT></STRONG>Add one line brackets to unbracketed one line conditional statements&nbsp; (e.g. '<CODE><FONT color=#000080>if</FONT></CODE>', '<CODE><FONT color=#000080>for</FONT></CODE>', '<CODE><FONT color=#000080>while</FONT></CODE>'...). The statement must be on a single line. The option implies --keep-one-line-blocks and will not break the one line blocks.</P>
<DIV class=code><PRE>if (isFoo)
    isFoo = false;
</PRE>
<P class=code>becomes:</P><PRE>if (isFoo)
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN> isFoo = false; <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_keep-one-line-blocks><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--keep-one-line-blocks / -O </CODE><BR></FONT></FONT></STRONG>Don't break one-line blocks.</P>
<DIV class=code><PRE>if (isFoo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN> isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl; <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>remains unchanged.</P></DIV>
<P>&nbsp;</P>
<P id=_keep-one-line-statements><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--keep-one-line-statements / -o </CODE><BR></FONT></FONT></STRONG>Don't break complex statements and multiple statements residing on a single line.</P>
<DIV class=code><PRE>if (isFoo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>remains unchanged.</P><PRE>if (isFoo) DoBar();
</PRE>
<P class=code>remains unchanged.</P></DIV>
<P>&nbsp;</P>
<P id=_convert-tabs><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--convert-tabs / -c</CODE><BR></FONT></FONT></STRONG>Converts tabs into spaces in the non-indentation part of the line. The number of spaces inserted will maintain the spacing of the tab. The current setting for spaces per tab is used. It may not produce the expected results if convert-tabs is used when changing spaces per tab. Tabs are not replaced in quotes. </P>
<P>&nbsp; </P>
<P id=_close-templates><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--close-templates / -xy</CODE><BR></FONT></FONT></STRONG>Closes whitespace in the angle brackets of template definitions. Closing the ending angle brackets is now allowed by the C++11 standard. Be sure your compiler supports this before making the changes. </P>
<DIV class=code><PRE>Stack&lt; int,List&lt; int &gt; &gt; stack1;</PRE>
<P class=code>becomes: </P><PRE>Stack&lt;int,List&lt;int&gt;&gt; stack1;</PRE></DIV>
<P>&nbsp; </P>
<P id=_max-code-length><CODE class=title><STRONG><FONT size=4><FONT color=#000080>--max-code-length=</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN><FONT color=#000080>&nbsp;&nbsp; / -xC</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN></FONT></STRONG><FONT size=4><FONT color=#000080><STRONG> <BR></STRONG><STRONG>--break-after-logical / -xL</STRONG></FONT></FONT></CODE><BR>The option max&#8209;code&#8209;length will break a line if the code exceeds <SPAN class=option><STRONG><FONT color=#8b4513>#</FONT></STRONG></SPAN> characters. The valid values are 50 thru 200. Lines without logical conditionals will break on a logical conditional (||, &amp;&amp;, ...), comma, paren, semicolon, or space. </P>
<P>Some code will not be broken, such as comments, quotes, and arrays. If used with keep&#8209;one&#8209;line&#8209;blocks or add-one-line-brackets the blocks will NOT be broken. If used with keep&#8209;one&#8209;line&#8209;statements the statements will be broken at a semicolon if the line goes over the maximum length. If there is no available break point within the max code length, the line will be broken at the first available break point after the max code length.</P>
<P>By default logical conditionals will be placed first on the new line. The option break&#8209;after&#8209;logical will cause the logical conditionals to be placed last on the previous line. This option has no effect without max&#8209;code&#8209;length.</P>
<DIV class=code><PRE>if (thisVariable1 == thatVariable1 || thisVariable2 == thatVariable2 || thisVariable3 == thatVariable3)
    bar();</PRE>
<P class=code>becomes:</P><PRE>if (thisVariable1 == thatVariable1
        || thisVariable2 == thatVariable2
        || thisVariable3 == thatVariable3)
    bar();</PRE>
<P class=code>becomes (with break&#8209;after&#8209;logical):</P><PRE>if (thisVariable1 == thatVariable1 ||
        thisVariable2 == thatVariable2 ||
        thisVariable3 == thatVariable3)
    bar();</PRE></DIV>
<P>&nbsp; </P>
<P id=_mode><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--mode=c</CODE><BR><CODE class=title>--mode=cs</CODE><BR><CODE class=title>--mode=java</CODE><BR></FONT></FONT></STRONG>Indent a C/C++, C#, or Java file. The option is usually set from the file extension for each file. You can override the setting with this entry. It will be used for all files regardless of the file extension. It allows the formatter to identify language specific syntax such as C++ classes, templates, and keywords.</P>
<P>&nbsp;