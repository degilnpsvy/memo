<H3 id=_Indentation_Options>Indentation Options</H3>
<P id=_indent-classes><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-classes / -C</CODE><BR></FONT></FONT></STRONG>Indent '<CODE><FONT color=#000080>class</FONT></CODE>' and '<CODE><FONT color=#000080>struct</FONT></CODE>' blocks so that the blocks '<CODE><FONT color=#000080>public:</FONT></CODE>', '<CODE><FONT color=#000080>protected:</FONT></CODE>' and '<CODE><FONT color=#000080>private:</FONT></CODE>' are indented. The struct blocks are indented only if an access modifier is declared somewhere in the struct. The entire block is indented. This option is effective for C++ files only.</P>
<DIV class=code><PRE>class Foo
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
public:
    Foo();
    virtual ~Foo();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;
</PRE>
<P class=code>becomes:</P><PRE>class Foo
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    public:
        Foo();
        virtual ~Foo();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-switches><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-switches / -S</CODE><BR></FONT></FONT></STRONG>Indent '<CODE><FONT color=#000080>switch</FONT></CODE>' blocks so that the '<CODE><FONT color=#000080>case X:</FONT></CODE>' statements are indented in the <CODE><FONT color=#000080>switch</FONT></CODE> block. The entire case block is indented.</P>
<DIV class=code><PRE>switch (foo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
case 1:
    a += 1;
    break;

case 2:
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    a += 2;
    break;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>switch (foo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    case 1:
        a += 1;
        break;

    case 2:
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        a += 2;
        break;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-cases><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-cases / -K</CODE><BR></FONT></FONT></STRONG>Indent '<CODE><FONT color=#000080>case X:</FONT></CODE>' blocks from the '<CODE><FONT color=#000080>case X:</FONT></CODE>' headers. Case statements not enclosed in blocks are NOT indented.</P>
<DIV class=code><PRE>switch (foo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    case 1:
        a += 1;
        break;

    case 2:
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        a += 2;
        break;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>switch (foo)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    case 1:
        a += 1;
        break;

    case 2:
        <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
            a += 2;
            break;
        <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-namespaces><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-namespaces / -N</CODE><BR></FONT></FONT></STRONG>Add extra indentation to namespace blocks. This option has no effect on Java files.</P>
<DIV class=code><PRE>namespace foospace
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
class Foo
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    public:
        Foo();
        virtual ~Foo();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>namespace foospace
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    class Foo
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        public:
            Foo();
            virtual ~Foo();
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-labels><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-labels / -L</CODE><BR></FONT></FONT></STRONG>Add extra indentation to labels so they appear 1 indent less than the current indentation, rather than being flushed to the left (the default).</P>
<DIV class=code><PRE>void Foo() <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    while (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        if (isFoo)
            goto error;
        ...
error:
        ...
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes (with indented 'error:'):</P><PRE>void Foo() <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    while (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        if (isFoo)
            goto error;
        ... 
    error:
        ...
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>        
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-preprocessor><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-preprocessor / -w</CODE><BR></FONT></FONT></STRONG>Indent multi-line preprocessor definitions ending with a backslash. Should be used with --convert-tabs for proper results. Does a pretty good job, but cannot perform miracles in obfuscated preprocessor definitions. Without this option the preprocessor statements remain unchanged.</P>
<DIV class=code><PRE>#define Is_Bar(arg,a,b) \
(Is_Foo((arg), (a)) \
|| Is_Foo((arg), (b)))
</PRE>
<P class=code>becomes:</P><PRE>#define Is_Bar(arg,a,b) \
    (Is_Foo((arg), (a)) \
     || Is_Foo((arg), (b)))
</PRE></DIV>
<P>&nbsp;</P>
<P id=_indent-col1-comments><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--indent-col1-comments / -Y</CODE><BR></FONT></FONT></STRONG>Indent C++ comments beginning in column one. By default C++ comments beginning in column one are not indented. This option will allow the comments to be indented with the code. </P>
<DIV class=code><PRE>void Foo()\n"
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
<SPAN class=comment><FONT color=#696969>// comment</FONT></SPAN>
    if (isFoo)
        bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>void Foo()\n"
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    <SPAN class=comment><FONT color=#696969>// comment</FONT></SPAN>
    if (isFoo)
        bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_min-conditional-indent><STRONG><FONT size=4><CODE class=title><FONT color=#000080>--min-conditional-indent=</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN><FONT color=#000080> / -m</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN></CODE><BR></FONT></STRONG>Set the minimal indent that is added when a header is built of multiple lines. This indent helps to easily separate the header from the command statements that follow. The value for <SPAN class=option><STRONG><FONT color=#8b4513>#</FONT></STRONG></SPAN> indicates a <STRONG>number of indents</STRONG> and is a minimum value. The indent may be greater to align with the data on the previous line.<BR>The valid values are:<BR>0 - no minimal indent. The lines will be aligned with the paren on the preceding line.<BR>1 - indent at least one additional indent.<BR>2 - indent at least two additional indents.<BR>3 - indent at least one-half an additional indent. This is intended for large indents (e.g. 8).<BR>The default value is <STRONG>2</STRONG>, two additional indents. </P>
<DIV class=code><PRE><SPAN class=comment><FONT color=#696969>// default setting makes this non-bracketed code clear</FONT></SPAN>
if (a &lt; b
        || c &gt; d)
    foo++;

<SPAN class=comment><FONT color=#696969>// but creates an exaggerated indent in this bracketed code</FONT></SPAN>
if (a &lt; b
        || c &gt; d)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    foo++;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes (when setting <STRONG><CODE><FONT color=#000080>--min-conditional-indent=</FONT><SPAN class=option><FONT color=#8b4513>0</FONT></SPAN></CODE></STRONG>):</P><PRE><SPAN class=comment><FONT color=#696969>// setting makes this non-bracketed code less clear</FONT></SPAN>
if (a &lt; b
    || c &gt; d)
    foo++;

<SPAN class=comment><FONT color=#696969>// but makes this bracketed code clearer</FONT></SPAN>
if (a &lt; b
    || c &gt; d)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    foo++;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_max-instatement-indent><STRONG><FONT size=4><CODE class=title><FONT color=#000080>--max-instatement-indent=</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN><FONT color=#000080> / -M</FONT><SPAN class=option><FONT color=#8b4513>#</FONT></SPAN></CODE><BR></FONT></STRONG>Set the &nbsp;maximum of <SPAN class=option><FONT color=#8b4513>#</FONT></SPAN> spaces to indent a continuation line. The <SPAN class=option><STRONG><FONT color=#8b4513>#</FONT></STRONG></SPAN> indicates a number of columns and must not be greater than <STRONG>120</STRONG>. If no <SPAN class=option><STRONG><FONT color=#8b4513>#</FONT></STRONG></SPAN> is set, the default value of <STRONG>40</STRONG> will be used. A maximum of less than two indent lengths will be ignored. This option will prevent continuation lines from extending too far to the right. Setting a larger value will allow the code to be extended further to the right.</P>
<DIV class=code><PRE>fooArray[] = <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN> red,
         green,
         blue <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;

fooFunction(barArg1,
         barArg2,
         barArg3);
</PRE>
<P class=code>becomes (with larger value):</P><PRE>fooArray[] = <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN> red,
               green,
               blue <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>;

fooFunction(barArg1,
            barArg2,
            barArg3);
</PRE></DIV>
<P>&nbsp;