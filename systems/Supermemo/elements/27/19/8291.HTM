<H3 id=_General_Information>General Information</H3>
<H4>Line Endings</H4>
<P>Line endings in the formatted file will be the same as the input file. If there are mixed line endings the most frequent occurrence will be used. There is also an option to specify or change the line endings.</P>
<H4>File Type</H4>
<P>Artistic Style will determine the file type from the file extension. The extension ".java" indicates a Java file, and ".cs" indicates a C# file. Everything else is a C or C++ file. If you are using a non-standard file extension for Java or C#, use one of the <CODE><FONT color=#000080>--mode=</FONT></CODE> options.</P>
<H4>Wildcards and Recursion</H4>
<P>Artistic Style can process directories recursively. Wildcards (such as "*.cpp" or "*.c??") are processed internally. If a shell is used it should pass the wildcards to Artistic Style instead of resolving them first. For Linux use double quotes around paths whose filename contains wildcards. For Windows use double quotes around paths whose filename contains spaces. The "Other Options" section contains information on recursive processing.</P>
<H4>File Names</H4>
<P>When a file is formatted, the newly indented file retains the original file name. A copy of the original file is created with an <CODE><STRONG><FONT color=#000080>.orig</FONT></STRONG></CODE> appended to the original file name. (This can be set to a different string by the option <CODE><FONT color=#000080>--suffix=</FONT></CODE>, or suppressed altogether by the options <CODE><FONT color=#000080>-n</FONT></CODE> or <CODE><FONT color=#000080>--suffix=none</FONT></CODE>). Thus, after indenting <CODE><EM><FONT color=#000080>SourceFile.cpp</FONT></EM></CODE> the indented file will be named <CODE><EM><FONT color=#000080>SourceFile.cpp</FONT></EM></CODE>, while the original pre-indented file will be renamed to <CODE><EM><FONT color=#000080>SourceFile.cpp.orig</FONT></EM></CODE>.</P>
<H4>Internationalization</H4>
<P>Artistic Style has been internationalized to process files and directories in any language.</P>
<P>It has also been translated into several languages. The translation to use is determined from the User Locale for Windows and the LANG environment variable for other systems. The translation will be done automatically from these settings. If no translation is available it will default to English. There is an ascii option to use English instead of the system language.</P>
<P>The source code for the translations is at the end of ASLocalizer.cpp in the form of an English&#8209;Translation pair. If you make corrections to a translation, send the source as a bug report and it will be included in the next release.</P>
<P>To add a new language, add a new translation class to ASLocalizer.h. Add the English&#8209;Translation pair to the constructor in ASLocalizer.cpp. Update the WinLangCode array and add the language code to the function setTranslationClass(). The ASLocalizer.cpp program contains comments that give web pages for obtaining the LCIDs and language codes. Send the source code as a bug report and it will be included in the next release.</P>
<H4>Other Considerations</H4>
<P>Artistic Style can format standard class library statements such as Open GL, wxWidgets, Qt, and MFC.</P>
<P>Embedded assembler language is formatted correctly. This includes extended assembly and Microsoft specific assembler lines and blocks.</P>
<P>Artistic Style can format embedded SQL statements. The SQL formatting will be maintained as long as the standard hanging indent format is used. If the "exec sql" statement is indented more than the following statements, the SQL will be aligned in a single column.</P>
<P>Unicode files encoded as UTF&#8209;16, both big and little endian, will be formatted. The files must begin with a byte order mark (BOM) to be recognized. Files encoded as UTF&#8209;32 will be rejected. Some compilers do not support these encodings. These files can be converted to UTF&#8209;8 encoding with the program iconv. There are Linux and Windows versions available (the Windows version does not seem to work for all encodings). A sample command line is "iconv &#8209;f &nbsp;UTF&#8209;16 &#8209;t UTF&#8209;8 &lt; filein.cpp &gt; fileout.cpp. Visual Studio can convert the files from the "File &gt; Advanced Save Options" menu. Select encoding "Unicode (UTF&#8209;8 with signature) - Codepage 65001". There are other development environments and text editors, such as SciTE, that can convert files to UTF&#8209;8. </P>
<P>Embedded statements that are multiple-line and are NOT in a C type format, such as Python, are usually mal-formatted. (A C type format has blocks enclosed by brackets and statements terminated by a semi-colon). Macros that define functions may cause the following code to be mal-formatted because the macro is missing the brackets and semi-colons from the definition. If you have source code with these types of statements, exclude them with the <CODE><FONT color=#000080>--exclude=</FONT></CODE> statement described in the "Other Options" section.</P>
<H4>Quick Start</H4>
<P>If you have never used Artistic Style there are a couple of ways to start. One is to run it with no options at all. This will format the file with 4 spaces per indent and will leave the brackets unchanged. Another is to use one of the bracket styles described in the "Bracket Style Options" section. Select one with a bracket formatting style you like. Once you are familiar with the options you can customize the format to your personal preference.</P>
<P>&nbsp;