<H3 id=_Padding_Options>Padding Options</H3>
<P id=_break-blocks><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--break-blocks / -f</CODE><BR></FONT></FONT></STRONG>Pad empty lines around header blocks (e.g. '<CODE><FONT color=#000080>if</FONT></CODE>', '<CODE><FONT color=#000080>for</FONT></CODE>', '<CODE><FONT color=#000080>while</FONT></CODE>'...).</P>
<DIV class=code><PRE>isFoo = true;
if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    anotherBar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
isBar = false;
</PRE>
<P class=code>becomes:</P><PRE>isFoo = true;

if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    anotherBar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>

isBar = false;
</PRE></DIV>
<P>&nbsp;</P>
<P id=_break-blocks=all><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--break-blocks=all / -F</CODE><BR></FONT></FONT></STRONG>Pad empty lines around header blocks (e.g. '<CODE><FONT color=#000080>if</FONT></CODE>', '<CODE><FONT color=#000080>for</FONT></CODE>', '<CODE><FONT color=#000080>while</FONT></CODE>'...). Treat closing header blocks (e.g. '<CODE><FONT color=#000080>else</FONT></CODE>', '<CODE><FONT color=#000080>catch</FONT></CODE>') as stand-alone blocks.</P>
<DIV class=code><PRE>isFoo = true;
if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    anotherBar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
isBar = false;
</PRE>
<P class=code>becomes:</P><PRE>isFoo = true;

if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    bar();
    
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    anotherBar();
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>

isBar = false;
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-oper><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-oper / -p </CODE><BR></FONT></FONT></STRONG>Insert space padding around operators. Any end of line comments will remain in the original column, if possible. Note that there is no option to unpad. Once padded, they stay padded.</P>
<DIV class=code><PRE>if (foo==2)
    a=bar((b-c)*a,d--);
</PRE>
<P class=code>becomes:</P><PRE>if (foo == 2)
     a = bar((b - c) * a, d--);
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-paren><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-paren / -P </CODE><BR></FONT></FONT></STRONG>Insert space padding around parenthesis on both the <STRONG>outside</STRONG> and the <STRONG>inside</STRONG>. Any end of line comments will remain in the original column, if possible.</P>
<DIV class=code><PRE>if (isFoo((a+2), b))
    bar(a, b);
</PRE>
<P class=code>becomes:</P><PRE>if ( isFoo ( ( a+2 ), b ) )
    bar ( a, b );
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-paren-out><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-paren-out / -d </CODE><BR></FONT></FONT></STRONG>Insert space padding around parenthesis on the <STRONG>outside</STRONG> only. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces.</P>
<DIV class=code><PRE>if (isFoo((a+2), b))
    bar(a, b);
</PRE>
<P class=code>becomes:</P><PRE>if (isFoo ( (a+2), b) )
    bar (a, b);
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-first-paren-out><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-first-paren-out / -xd </CODE><BR></FONT></FONT></STRONG>Insert space padding around the <STRONG>first</STRONG> parenthesis in a series on the <STRONG>outside</STRONG> only. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces. If used with pad-paren or pad-paren-out, this option will be ignored. If used with pad-paren-in, the result will be the same as pad-paren.</P>
<DIV class=code><PRE>if (isFoo((a+2), b))
    bar(a, b);
</PRE>
<P class=code>becomes:</P><PRE>if (isFoo ((a+2), b))
    bar (a, b);
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-paren-in><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-paren-in / -D </CODE><BR></FONT></FONT></STRONG>Insert space padding around parenthesis on the <STRONG>inside</STRONG> only. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces.</P>
<DIV class=code><PRE>if (isFoo((a+2), b))
    bar(a, b);
</PRE>
<P class=code>becomes:</P><PRE>if ( isFoo( ( a+2 ), b ) )
    bar( a, b );
</PRE></DIV>
<P>&nbsp;</P>
<P id=_pad-header><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--pad-header / -H </CODE><BR></FONT></FONT></STRONG>Insert space padding after paren headers only (e.g. '<CODE><FONT color=#000080>if</FONT></CODE>', '<CODE><FONT color=#000080>for</FONT></CODE>', '<CODE><FONT color=#000080>while</FONT></CODE>'...). Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren to remove unwanted spaces.</P>
<DIV class=code><PRE>if(isFoo((a+2), b))
    bar(a, b);</PRE>
<P class=code>becomes:</P><PRE>if (isFoo((a+2), b))
    bar(a, b);
</PRE></DIV>
<P>&nbsp;</P>
<P id=_unpad-paren><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--unpad-paren / -U </CODE><BR></FONT></FONT></STRONG>Remove extra space padding around parenthesis on the inside and outside. Any end of line comments will remain in the original column, if possible. This option can be used in combination with the paren padding options <CODE><FONT color=#000080>pad&#8209;paren</FONT></CODE>, <CODE><FONT color=#000080>pad&#8209;paren&#8209;out</FONT></CODE>, <CODE><FONT color=#000080>pad&#8209;paren&#8209;in</FONT></CODE>, and <CODE><FONT color=#000080>pad&#8209;header</FONT></CODE> above. Only padding that has not been requested by other options will be removed.</P>
<P>For example, if a source has parens padded on both the inside and outside, and you want inside only. You need to use <CODE><FONT color=#000080>unpad-paren</FONT></CODE> to remove the outside padding, and <CODE><FONT color=#000080>pad&#8209;paren&#8209;in</FONT></CODE> to retain the inside padding. Using only <CODE><FONT color=#000080>pad&#8209;paren&#8209;in</FONT></CODE> would not remove the outside padding.</P>
<DIV class=code><PRE>if ( isFoo( ( a+2 ), b ) )
    bar ( a, b );
</PRE>
<P class=code>becomes (with no padding option requested):</P><PRE>if(isFoo((a+2), b))
    bar(a, b);
</PRE></DIV>
<P>&nbsp;</P>
<P id=_delete-empty-lines><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--delete-empty-lines / -xe</CODE><BR></FONT></FONT></STRONG>Delete empty lines within a function or method. Empty lines outside of functions or methods are NOT deleted. If used with break-blocks or break-blocks=all it will delete all lines EXCEPT the lines added by the break-blocks options.</P>
<DIV class=code><PRE>void Foo()
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
	
    foo1 = 1;
	
    foo2 = 2;
	
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE>
<P class=code>becomes:</P><PRE>void Foo()
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    foo1 = 1;
    foo2 = 2;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_fill-empty-lines><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--fill-empty-lines / -E</CODE><BR></FONT></FONT></STRONG>Fill empty lines with the white space of the previous line.</P>
<P>&nbsp;</P>
<P id=_align-pointer><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--align-pointer=type&nbsp;&nbsp; / -k1<BR>--align-pointer=middle / -k2<BR>--align-pointer=name&nbsp;&nbsp; / -k3</CODE><BR></FONT></FONT></STRONG>Attach a pointer or reference operator (*, &amp;, or ^) to either the variable type (left) or variable name (right), or place it between the type and name (middle). The spacing between the type and name will be preserved, if possible. This option is for C/C++, C++/CLI, and C# files. To format references separately use the following align-reference option.</P>
<DIV class=code><PRE>char* foo1;
char &amp; foo2;
String ^s1;</PRE>
<P class=code>becomes (with align-pointer=type):</P><PRE>char* foo1;
char&amp; foo2;
String^ s1;</PRE></DIV>
<DIV class=code><PRE>char* foo1;
char &amp; foo2;
String ^s1;</PRE>
<P class=code>becomes (with align-pointer=middle):</P><PRE>char * foo1;
char &amp; foo2;
String ^ s1;</PRE></DIV>
<DIV class=code><PRE>char* foo1;
char &amp; foo2;
String ^s1;</PRE>
<P class=code>becomes (with align-pointer=name):</P><PRE>char *foo1;
char &amp;foo2;
String ^s1;</PRE></DIV>
<P>&nbsp;</P>
<P id=_align-reference><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--align-reference=none&nbsp;&nbsp; / -W0<BR>--align-reference=type&nbsp;&nbsp; / -W1<BR>--align-reference=middle / -W2<BR>--align-reference=name&nbsp;&nbsp; / -W3</CODE><BR></FONT></FONT></STRONG>This option will align references separate from pointers. Pointers are not changes by this option. If pointers and references are to be aligned the same, use the previous align-pointer option. The option align-reference=none will not change the reference alignment. The other options are the same as for align-pointer. This option is for C/C++, C++/CLI, and C# files. </P>
<DIV class=code><PRE>char &amp;foo1;</PRE>
<P class=code>becomes (with align-reference=type):</P><PRE>char&amp; foo1;</PRE></DIV>
<DIV class=code><PRE>char&amp; foo2;</PRE>
<P class=code>becomes (with align-reference=middle):</P><PRE>char &amp; foo2;</PRE></DIV>
<DIV class=code><PRE>char&amp; foo3;</PRE>
<P class=code>becomes (with align-reference=name):</P><PRE>char &amp;foo3;</PRE></DIV>
<P>&nbsp;