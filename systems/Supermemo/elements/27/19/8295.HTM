<H3 id=_Bracket_Style_Options>Bracket Style Options</H3>
<P>Bracket Style options define the bracket style to use. This option always overrides any individual option settings. You will always get the requested style regardless of other defined options.</P>
<P>All other options are available to customize the bracket style. By default, none of the styles indent namespaces. All options default to 4 spaces per indent, indented with spaces.</P>
<P>&nbsp;</P>
<P id=_default_bracket_style><STRONG><FONT size=4><FONT color=#000080><CODE class=title>default bracket style</CODE><BR></FONT></FONT></STRONG>If no bracket style option is set, the opening brackets will not be changed and closing brackets will be broken from the preceding line.</P>
<P>&nbsp;</P>
<P id=_style=allman><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=allman / --style=ansi / --style=bsd / --style=break / -A1</CODE><BR></FONT></FONT></STRONG>Allman style formatting/indenting uses broken brackets.</P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar)
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
    else
        return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>        
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=java><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=java / --style=attach / -A2</CODE><BR></FONT></FONT></STRONG>Java style formatting/indenting uses attached brackets.</P>
<DIV class=code><PRE>int Foo(bool isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else
        return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=kr><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=kr / --style=k&amp;r / --style=k/r / -A3</CODE><BR></FONT></FONT></STRONG>Kernighan &amp; Ritchie style formatting/indenting uses linux brackets. Brackets are broken from namespaces, classes, and function definitions. Brackets are attached to statements within a function.</P>
<P>Using the k&amp;r option may cause problems because of the &amp;. This can be resolved by enclosing the k&amp;r in quotes (e.g. &#8209;&#8209;style="k&amp;r") or by using one of the alternates &#8209;&#8209;style=kr or &#8209;&#8209;style=k/r.</P>
<DIV class=code><PRE>int Foo(bool isBar) 
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else
        return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=stroustrup><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=stroustrup / -A4</CODE><BR></FONT></FONT></STRONG>Stroustrup style formatting/indenting uses stroustrup brackets. Brackets are broken from function definitions only. Brackets are attached to namespaces, classes, and statements within a function. This style frequently is used with an indent of 5 spaces. </P>
<DIV class=code><PRE>int Foo(bool isBar) 
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
     if (isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
          bar();
          return 1;
     <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else
          return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=whitesmith><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=whitesmith / -A5</CODE><BR></FONT></FONT></STRONG>Whitesmith style formatting/indenting uses broken, indented brackets. Class blocks and switch blocks are indented to prevent a 'hanging indent' with switch statements and C++ class modifiers (public, private, protected).&nbsp;</P>
<DIV class=code><PRE>int Foo(bool isBar) 
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar)
        <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
        <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
    else
        return 0;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=banner><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=banner / -A6</CODE><BR></FONT></FONT></STRONG>Banner style formatting/indenting uses attached, indented brackets. Class blocks and switch blocks are indented to prevent a 'hanging indent' with switch statements and C++ class modifiers (public, private, protected).&nbsp;</P>
<DIV class=code><PRE>int Foo(bool isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
        <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
    else
        return 0;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=gnu><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=gnu / -A7</CODE><BR></FONT></FONT></STRONG>GNU style formatting/indenting uses broken brackets and indented blocks. This style frequently is used with an indent of 2 spaces. </P>
<P>Extra indentation is added to blocks <STRONG>within a function</STRONG>. The opening bracket for namespaces, classes, and functions is not indented. </P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
  if (isBar)
    <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
      bar();
      return 1;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
  else
    return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=linux><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=linux / -A8</CODE><BR></FONT></FONT></STRONG>Linux style formatting/indenting uses linux brackets. Brackets are broken from namespace, class, and function definitions. Brackets are attached to statements within a function. <STRONG>Minimum conditional indent</STRONG> is one-half indent. If you want a different minimum conditional indent use the K&amp;R style instead. This style works best with a large indent. It frequently is used with an indent of 8 spaces. </P>
<P>Also known as Kernel Normal Form (KNF) style, this is the style used in the Linux kernel.</P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
                bar();
                return 1;
        <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else
                return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=horstmann><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=horstmann / -A9</CODE><BR></FONT></FONT></STRONG>Horstmann style formatting/indenting uses run-in brackets, brackets are broken and allow run-in statements. Switches are indented to allow a run-in to the opening switch block. This style frequently is used with an indent of 3 spaces.</P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>  if (isBar)
   <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>  bar();
      return 1;
   <SPAN class=brace><FONT color=#ff0000>} </FONT></SPAN>else
      return 0;
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=1tbs><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=1tbs / --style=otbs / -A10</CODE><BR></FONT></FONT></STRONG>"One True Brace Style" formatting/indenting uses linux brackets and adds brackets to unbracketed one line conditional statements. In the following example brackets have been added to the "<CODE><FONT color=#000080>return 0;</FONT></CODE>" statement. The option &#8209;&#8209;add&#8209;one&#8209;line&#8209;brackets can also be used with this style.</P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isFoo) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        bar();
        return 1;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN> else <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
        return 0;
    <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
<SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=pico><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=pico / -A11</CODE><BR></FONT></FONT></STRONG>Pico style formatting/indenting uses run-in brackets, opening brackets are broken and allow run-in statements. The closing bracket is attached to the last line in the block. Switches are indented to allow a run-in to the opening switch block. The style implies keep-one-line-blocks and keep-one-line-statements. This style does not support multiple-line brackets. If add-brackets is used they will be added as one-line brackets. This style frequently is used with an indent of 2 spaces. </P>
<DIV class=code><PRE>int Foo(bool isBar)
<SPAN class=brace><FONT color=#ff0000>{ </FONT></SPAN> if (isBar)
   <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>  bar();
      return 1; <SPAN class=brace><FONT color=#ff0000>} </FONT></SPAN>   
    else
      return 0; <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;</P>
<P id=_style=lisp><STRONG><FONT size=4><FONT color=#000080><CODE class=title>--style=lisp / --style=python / -A12</CODE><BR></FONT></FONT></STRONG>Lisp style formatting/indenting uses attached brackets, opening brackets are attached at the end of the statement. The closing bracket is attached to the last line in the block. The style implies keep-one-line-statements but NOT keep-one-line-blocks. This style does not support one-line brackets. If add-one-line-brackets is used they will be added as multiple-line brackets.</P>
<DIV class=code><PRE>int Foo(bool isBar) <SPAN class=brace><FONT color=#ff0000>{</FONT></SPAN>
    if (isBar) <SPAN class=brace><FONT color=#ff0000>{
</FONT></SPAN>        bar()
        return 1; <SPAN class=brace><FONT color=#ff0000>}
 </FONT></SPAN>   else
        return 0; <SPAN class=brace><FONT color=#ff0000>}</FONT></SPAN>
</PRE></DIV>
<P>&nbsp;