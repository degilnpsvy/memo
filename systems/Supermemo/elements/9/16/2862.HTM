<HEAD><?xml:namespace prefix = st1 /><st1:chsdate Year="1899" Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Bold-0-1000-22; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Bold-0-1000-22">5.1.1</SPAN></B></st1:chsdate></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Bold-0-1000-22; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Bold-0-1000-22"></SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-50; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-BoldItalic-0-1000-50">Nonprecise Exceptions</SPAN></I></B><B><I><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-50; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-BoldItalic-0-1000-50">&#8212;<SPAN lang=EN-US>The Multiplier in Historic MIPS CPUs</SPAN></SPAN></I></B> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">MIPS</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s original multiply/divide instructions are started by instructions like </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">or </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">div</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">, which take two register operands and feed them into the multiplier machine. The program then issues an </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">instruction (and sometimes also </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mfhi</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">, for a 64-bit result or to obtain the remainder) to get the results back into a general-purpose register. The CPU stalls on </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">if the computation is not finished.</SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">In MIPS implementations, a multiply takes 4</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8211;<SPAN lang=EN-US>10 cycles, but divide may take 15</SPAN>&#8211;<SPAN lang=EN-US>30. By dividing these long-latency instructions into two stages (</SPAN>&#8220;<SPAN lang=EN-US>launch</SPAN>&#8221;<SPAN lang=EN-US> and </SPAN>&#8220;<SPAN lang=EN-US>get results</SPAN>&#8221;<SPAN lang=EN-US>), the instruction set encourages the use of a multiply machine separately pipelined from the regular integer unit. Later CPUs provided a richer set of instructions, including multiply-accumulate instructions, which give software different ways of exploiting the pipeline</SPAN>&#8212;<SPAN lang=EN-US>see section <st1:chsdate Year="1899" Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on">8.5.5</st1:chsdate> for details.</SPAN></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">On modern CPUs conforming to MIPS32/64, the instructions behave themselves. But older CPUs can show a problem. To make the hardware simpler, the original architecture allowed a multiply/divide operation to be unstoppable, even by an exception. That</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s not normally a problem, but suppose we have a code sequence like the following, in which we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">re retrieving one multiply unit result and then immediately firing off another operation:</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo $8</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult $9, $10</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">If we take an exception whose restart address is the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">instruction, then the first execution of </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">will be nullified under the precise-exception rules, and the register </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">$8 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">will be left as though the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">had never happened. Unfortunately, the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">will already have been started too, and since the multiply unit knows nothing of the exception it will continue to run. Before the exception returns, the computation will most likely have finished and the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">will now deliver the result of the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">that should have followed it. We can avoid this problem (inherent in most pre-MIPS32 CPUs), by interposing at least two(Why two? It just happens to be enough to avoid the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">being started on all pre-MIPS32 CPUs. ) nonmultiply instructions between the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mflo</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">/</SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mfhi </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">on the one hand and the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">mult </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">(or any other instruction that will write new values to </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">hi</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">/</SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">lo</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">) on the other.</SPAN></P></BODY>