<HEAD></HEAD>
<BODY><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">5.9 Starting Up</SPAN> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">In terms of its software-visible effect on the CPU, reset is almost the same as an exception, though one from which we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">re not going to return.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">In the original MIPS architecture, this is mostly a matter of economy of implementation effort and documentation, but later CPUs have offered several different levels of reset, from a cold reset through to a nonmaskable interrupt. <FONT class=extract>In MIPS, reset and exception conditions shade imperceptibly into each other.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">re recycling mechanisms from regular exceptions, following reset </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">EPC </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">points to the instruction that was being executed when reset was detected, and most register values are preserved. However, reset disrupts normal operation, and a register being loaded or a cache location being stored to or refilled at the moment reset occurred may be trashed.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>It is possible to use the preservation of state through reset to implement some useful postmortem debugging, but your hardware engineer needs to help; the CPU cannot tell you whether reset occurred to a running system or from power-up.</FONT> But postmortem debugging is an exercise for the talented reader; we will focus on starting up the system from scratch.</SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The CPU responds to reset by starting to fetch instructions from </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-59; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59">0xBFC0. 0000. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">This is physical address </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-59; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59">0x1FC<?xml:namespace prefix = st1 /><st1:chmetcnv UnitName="in" SourceValue="0" HasSpace="True" Negative="False" NumberType="1" TCSC="0" w:st="on">0.0000 <SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; mso-bidi-font-family: Minion-Regular-0-1000-20">in</SPAN></st1:chmetcnv><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; mso-bidi-font-family: Minion-Regular-0-1000-20"> the uncached kseg1 region.</SPAN></SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">Following reset, enough of the CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s control register state is defined that the CPU can execute uncached instructions. </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>Enough state</SPAN>&#8221;<SPAN lang=EN-US> is interpreted minimally; note the following points:</SPAN></SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">Only three things are guaranteed in </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">: The CPU is in kernel mode; interrupts are disabled; and exceptions will vector through the uncached entry points</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>that is, </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR(BEV) </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">= 1. In modern CPUs, the first two conditions (and more beside) are typically guaranteed by setting the exception-mode bit </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR(EXL)</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">, and this is implied by treating reset as an exception.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>The caches will be in a random, nonsensical state, so a cached load might return rubbish without reading memory.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The TLB will be in a random state and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-25; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25">must not be accessed </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">until initialized (in some CPUs the hardware has only minimal protection against the possibility that there are duplicate matches in the TLB, and the result could be a TLB shutdown,which can be amended only by a further reset).</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>The traditional start-up sequence is as follows:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>1. Branch to the main ROM code. Why do a branch now?</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">The uncached exception entry points start at </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-59; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59">0xBFC0.0100</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">, which wouldn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t leave enough space for start-up code to get to a </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>natural break</SPAN>&#8221;&#8212;<SPAN lang=EN-US>so we</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">re going to have to do a branch soon, anyway.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>The branch is a very simple test to see if the CPU is functioning and is successfully reading instructions. If something terrible goes wrong with the hardware, the MIPS CPU is most likely to keep fetching instructions in sequence (and next most likely to get permanent exceptions).</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">If you use test equipment that can track the addresses of CPU reads and writes, it will show the CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s uncached instruction fetches from reset; if the CPU starts up and branches to the right place, you have strong evidence that the CPU is getting mostly correct data from the <st1:country-region w:st="on"><st1:place w:st="on">ROM.</st1:place></st1:country-region></SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">By contrast, if your ROM program plows straight in and fiddles with </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-47; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47">SR</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">, strange and undiagnosable consequences may result from simple faults.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>2. Set the status register to some known and sensible state. Now you can load and store reliably in uncached space.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">3. You will probably have to run using registers only until you have initialized and (most likely) run a quick check on the integrity of some RAM memory. This will be slow (we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">re still running uncached from ROM), so you will probably confine your initialization and check to a chunk of memory big enough for the ROM program</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">s data.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>4. You will probably have to make some contact with the outside world (a console port or diagnostic register) so you can report any problem with the initialization process.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>5. You can now assign yourself some stack and set up enough registers to be able to call a standard C routine.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">6. Now you can initialize the caches and run in comfort. Some systems can run code from ROM cached and some can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">t; on most MIPS CPUs, a memory supplying the cache must be able to provide 4/8-word bursts, and your ROM subsystem may or may not oblige.</SPAN></FONT></P></BODY>