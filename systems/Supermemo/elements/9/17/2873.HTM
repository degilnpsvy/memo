<HEAD><?xml:namespace prefix = st1 /><st1:chsdate Year="1899" Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><B><SPAN style="FONT-FAMILY: Minion-Bold-0-1000-22; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Bold-0-1000-22" lang=EN-US></SPAN></B></st1:chsdate></HEAD>
<BODY><SPAN><FONT color=#080000 size=3 face=&#24494;&#36719;&#38597;&#40657;>5.8.4 </FONT><STRONG><EM>Critical Regions with Interrupts Enabled: Semaphores the <st1:Street w:st="on"><st1:address w:st="on">MIPS Way</st1:address></st1:Street></EM></STRONG></SPAN> 
<P></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>A semaphore(12. A simple semaphore is also called a </SPAN><I><SPAN style="FONT-FAMILY: Minion-Italic-0-1000-25; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25" lang=EN-US>mutex </SPAN></I><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>and informally just called a </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>lock.</SPAN>&#8221; <SPAN lang=EN-US>) is a coding convention to implement critical regions (though extended semaphores can do more tricks than that). The semaphore is a shared memory location used by concurrently running processes to arrange that some resource is only accessed by one of them at once.</SPAN></SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>Each atomic chunk of code has the following structure:( 13. Dijkstra formulated these ideas back in the 1970s and named it a </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>semaphore</SPAN>&#8221;<SPAN lang=EN-US> from a railway signaling analogy. Hoare set them in the wider context of </SPAN>&#8220;<SPAN lang=EN-US>cooperating parallel processes</SPAN>&#8221;<SPAN lang=EN-US> and called essentially the same functions </SPAN></SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>wait() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>signal()</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>and that</SPAN></SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s what we</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>ve used. Dijkstra</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s original names are </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>p() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>v()</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>, respectively. You can understand why he called them </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>p</SPAN>&#8221;<SPAN lang=EN-US> and </SPAN>&#8220;<SPAN lang=EN-US>v</SPAN>&#8221;<SPAN lang=EN-US> quite easily, if you speak Dutch. )</SPAN></SPAN></FONT></P>
<P><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US><FONT class=extract>wait(sem);</FONT></SPAN></P>
<P><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US><FONT class=extract>/* do your atomic thing */</FONT></SPAN></P>
<P><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US><FONT class=extract>signal(sem);</FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>Think of the semaphore as having two values: 1 meaning </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>in use</SPAN>&#8221;<SPAN lang=EN-US> and 0 meaning </SPAN>&#8220;<SPAN lang=EN-US>available.</SPAN>&#8221;<SPAN lang=EN-US> The </SPAN></SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>signal() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>is simple; it sets the semaphore to 0.( 14. For a thread-to-thread semaphore in an OS, </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>signal() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>also has to do something to </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8220;<SPAN lang=EN-US>wake up</SPAN>&#8221; <SPAN lang=EN-US>any other thread that was waiting on the semaphore.) </SPAN></SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>wait() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>checks for the variable to have the value 0 and won</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>t continue until it does. It then sets the variable to 1 and returns. That should be easy, but you can see that it</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s essential that the process of checking the value of </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>sem </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>and setting it again is itself atomic. High-level atomicity (for threads calling </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>wait()</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>) is dependent on being able to build low-level atomicity, where a test-and-set operation can operate correctly in the face of interrupts (or, on a multiprocessor, in the face of access by other CPUs).</SPAN></FONT></P>
<P><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>Most mature CPU families have some special instruction for this: 680x0 CPUs</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>and many others</SPAN>&#8212;<SPAN lang=EN-US>have an atomic test-and-set instruction; x86 CPUs have an </SPAN>&#8220;<SPAN lang=EN-US>exchange register with memory</SPAN>&#8221;<SPAN lang=EN-US> operation that can be made atomic with a prefix </SPAN>&#8220;<SPAN lang=EN-US>lock</SPAN>&#8221;<SPAN lang=EN-US> instruction. </SPAN></SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>For large multiprocessor systems this kind of test-and-set process becomes expensive; essentially, all shared memory access must be stopped while first the semaphore user obtains the value and completes the test-and-set operation, and, second, the set operation percolates through to every cached copy in the system. This doesn</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>t scale well to large multi processors, because you</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>re holding up lots of probably unrelated traffic just to make sure you held up the occasional thing that mattered.</SPAN></P>
<P><FONT class=extract><FONT class=extract><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>It</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s much more efficient to allow the test-and-set operation to run without a prior guarantee of atomicity so that the </SPAN></FONT><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20"><FONT class=extract>&#8220;<SPAN lang=EN-US>set</SPAN>&#8221;</FONT><SPAN lang=EN-US><FONT class=extract> succeeds only if it was atomic.</FONT> Software needs to be told whether the set succeeded: Then unsuccessful test-and-set sequences can be hidden inside the </SPAN></SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>wait() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>function and retried as necessary.( 15. Of course, you</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>d better make sure that there are no circumstances where it ends up retrying forever</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#8212;<SPAN lang=EN-US>but with other kinds of semaphores, you always have to make sure a waiting task comes back sometime. )</SPAN></SPAN></FONT></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>This is what MIPS has, using the </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>ll </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>(load-linked) and </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>(store-conditional) instructions in sequence. </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>will only write the addressed location if the hardware confirms that there has been no competing access since the last </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>ll </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>and will leave a 1/0 value in a register to indicate success or failure.</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>In most implementations this information is pessimistic: Sometimes </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>will fail even though the location has not been touched; CPUs will fail the </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>when there</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s been any exception serviced since the </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>ll</SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>,</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#65288;<SPAN lang=EN-US>16. To be precise, if an </SPAN></SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>eret </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>has been executed. </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20">&#65289;<SPAN lang=EN-US> and most multiprocessors will fail on any write to the same </SPAN>&#8220;<SPAN lang=EN-US>cache line</SPAN>&#8221;<SPAN lang=EN-US>-sized block of memory. It</SPAN></SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s only important that the </SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>should usually succeed when there</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s been no competing access and that it </SPAN><I><SPAN style="FONT-FAMILY: Minion-Italic-0-1000-25; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Italic-0-1000-25" lang=EN-US>always </SPAN></I><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>fails when there has been one such.</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>Here</SPAN><SPAN style="FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>wait() </SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>for the binary semaphore </SPAN><SPAN style="FONT-FAMILY: Courier-8r-0-1000-59; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-8r-0-1000-59" lang=EN-US>sem</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>:</SPAN></FONT></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>wait:</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>la t0, sem</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>TryAgain:</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>ll t1, 0(t0)</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>bne t1, zero, WaitForSem</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>li t1, 1</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>sc t1, 0(t0)</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>beq t1, zero, TryAgain</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>/* got the semaphore... */</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US><FONT class=extract>jr ra</FONT></SPAN></B></P>
<P><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>ll</SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>/</SPAN><B><SPAN style="FONT-FAMILY: Courier-Bold-8r-0-1000-47; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Courier-Bold-8r-0-1000-47" lang=EN-US>sc </SPAN></B><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-font-kerning: 0pt; mso-bidi-font-family: Minion-Regular-0-1000-20" lang=EN-US>was invented for multiprocessors, but even in a uniprocessor system, this kind of operation can be valuable, because it does not involve shutting out interrupts. It avoids the interrupt-disabling problem described above and contributes to a coordinated effort to reduce worst-case interrupt latency, very desirable in embedded systems.</SPAN></P></BODY>