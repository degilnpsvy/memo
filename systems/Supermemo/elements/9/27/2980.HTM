<SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 14pt; mso-bidi-font-family: Wingdings; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><I><SPAN style="FONT-FAMILY: Minion-Italic-0-1000-30; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Italic-0-1000-30; mso-font-kerning: 0pt" lang=EN-US>Reduce the number of cache misses</SPAN></I><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US>:</SPAN> 
<P></P>
<P><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt"><FONT class=clozed>&#8211;<SPAN lang=EN-US> Make the cache bigger. This is always effective, but expensive. A cache of 64 KB occupies roughly the same space as the whole of the rest of a simple CPU (excluding floating-point hardware).</SPAN></FONT></SPAN></P>
<P><FONT class=clozed><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt">&#8211;<SPAN lang=EN-US> <FONT class=extract>Increase the set associativity of the cache. It</FONT></SPAN></SPAN><FONT class=extract><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US>s worth going up to fourway but after that the gains in cache performance are too small to notice.( There are systems with eight-way or more caches, but that</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US>s usually done for some reason other than reducing cache misses. Generous provision of cache ways can be good for power reduction (whole ways can be powered down when not being used) and can sometimes avoid cache aliases, as described in section 4.12.)</SPAN></FONT></FONT></P>
<P><FONT class=clozed><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt">&#8211;<SPAN lang=EN-US> <FONT class=extract>Add another level of cache. That makes the calculation much more complicated, of course. Apart from the complication of yet another subsystem, the miss rate in an L2 cache is often depressingly high; the L1 cache has already </FONT></SPAN><FONT class=extract>&#8220;<SPAN lang=EN-US>skimmed the cream</SPAN>&#8221;<SPAN lang=EN-US>(Thanks to Hennessy and Patterson for this evocative metaphor.) of the repetitive data access behavior of the CPU. To make it worthwhile, the L2 cachemust be much larger (typically eight times or greater) than the L1 cache, and an L2 cache hit must be much faster (two times or better) than a </SPAN></FONT></SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>memory reference.</FONT></SPAN></FONT></P>
<P><FONT class=clozed><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt">&#8211;<SPAN lang=EN-US> <FONT class=extract>Reorganize your software to reduce the number of cache misses. It</FONT></SPAN></SPAN><FONT class=extract><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US>s not clear whether this works in practice: It</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-20; mso-ascii-font-family: Minion-Regular-0-1000-20" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Minion-Regular-0-1000-20; FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-20; mso-font-kerning: 0pt" lang=EN-US>s easy to reorganize a small or trivial program to great effect, but so far nobody has succeeded in building a general tool that has any useful effect on an arbitrary program. See section 4.11.</SPAN></FONT></FONT>