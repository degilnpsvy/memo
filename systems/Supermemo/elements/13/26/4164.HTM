<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERSION </SPAN></B><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">Command</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The linker supports symbol versions when using ELF. Symbol versions are only useful when using shared libraries. The dynamic linker can use symbol versions to select a specific version of a function when it runs a program that may have been linked against an earlier version of the shared library.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">You can include a version script directly in the main linker script, or you can supply the version script as an implicit linker script. You can also use the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">--version-script </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">linker option.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The syntax of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERSION </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">command follows.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERSION { version-script-commands }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The format of the version script commands is identical to that used by Sun&#8217;s linker in Solaris 2.5. The version script defines a tree of version nodes. You specify the node names and interdependencies in the version script. You can specify which symbols are bound to which version nodes, and you can reduce a specified set of symbols to local scope so that they are not globally visible outside of the shared library.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The easiest way to demonstrate the version script language is with the following example.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.1 {</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">global:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo1;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">local:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">old*;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">original*;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">new*;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">};</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.2 {</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo2;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">} VERS_1.1;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_2.0 {</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">bar1; bar2;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">} VERS_1.2;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">This example version script defines three version nodes. The first version node defined is </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">; it has no other dependencies. The script binds the symbol, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. It reduces a number of symbols to local scope so that they are not visible outside of the shared library.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">Next, the version script defines node, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. This node depends upon </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. The script binds the symbol, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, to the version node, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">Finally, the version script defines node </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_2.0</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. This node depends upon </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. The script binds the symbols, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">bar1 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">bar2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, to the version node, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_2.0</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">When the linker finds a symbol defined in a library, which is not specifically bound to a version node, it will effectively bind it to an unspecified base version of the library. You can bind all otherwise unspecified symbols to a given version node by using </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">global: * </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">somewhere in the version script.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The names of the version nodes have no specific meaning other than what they might suggest to the person reading them. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">2.0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">version could just as well have appeared in between </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">1.1 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">1.2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. However, this would be a confusing way to write a version script.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">When you link an application against a shared library that has versioned symbols, the application itself knows which version of each symbol it requires, and it also knows which version nodes it needs from each shared library it is linked against. Thus at runtime, the dynamic loader can make a quick check to make sure that the libraries you have linked against do in fact supply all of the version nodes that the application will need to resolve all of the dynamic symbols. In this way it is possible for the dynamic linker to know with certainty that all external symbols that it needs will be resolvable without having to search for each symbol reference.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The symbol versioning is in effect a much more sophisticated way of doing minor version checking that SunOS does. The fundamental problem that is being addressed here is that typically references to external functions are bound on an as-needed basis, and are not all bound when the application starts up. If a shared library is out of date, a required interface may be missing; when the application tries to use that interface, it may suddenly and unexpectedly fail. With symbol versioning, the user will get a warning when they start their program if the libraries being used with the application are too old.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">There are several GNU extensions to Sun&#8217;s versioning approach. The first of these is the ability to bind a symbol to a version node in the source file where the symbol is defined instead of in the versioning script. This was done mainly to reduce the burden on the library maintainer. You can do this by putting something like this in the C source file:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__asm__(".symver original_foo,foo@VERS_1.1");</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">This renames the function, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">original_foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, to be an alias for </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, bound to the version node, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">VERS_1.1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">local: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">directive can be used to prevent the symbol </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">original_foo </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">from being exported.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The second GNU extension is to allow multiple versions of the same function to appear in a given, shared library. In this way you can make an incompatible change to an interface without increasing the major version number of the shared library, while still allowing applications linked against the old interface to continue to function. To do this, you must use multiple </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.symver </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">directives in the source file. Here is an example:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__asm__(".symver original_foo,foo@");</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__asm__(".symver old_foo,foo@VERS_1.1");</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__asm__(".symver old_foo1,foo@VERS_1.2");</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__asm__(".symver new_foo,foo@@VERS_2.0");</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">In this example, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo@ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">represents the symbol, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, bound to the unspecified base version of the symbol. The source file that contains this example would define four C functions: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">original_foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">old_foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">old_foo1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">new_foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">When you have multiple definitions of a given symbol, there needs to be some way to specify a default version to which external references to this symbol will be bound. You can do this with the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">foo@@VERS_2.0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">type of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.symver </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">directive. You can only declare one version of a symbol as the default in this manner; otherwise you would effectively have multiple definitions of the same symbol.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">If you wish to bind a reference to a specific version of the symbol within the shared library, you can use the aliases of convenience (for instance, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">old_foo</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">), or you can use the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.symver </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">directive to specifically bind to an external version of the function in question.</SPAN>