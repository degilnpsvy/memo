<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">Output Section Keywords</SPAN></B> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">There are a couple of keywords, which can appear as output section commands.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier"><FONT class=extract>CREATE_OBJECT_SYMBOLS</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The command tells the linker to create a symbol for each input file. The name of each symbol will be the name of the corresponding input file. The section of each symbol will be the output section in which the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">CREATE_OBJECT_SYMBOLS </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">command appears.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">This is conventional for the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">a.out </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">object file format. It is not normally used for any other object file format.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">CONSTRUCTORS</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">When linking, using the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">a.out </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">object file format, the linker uses an unusual set construct to support C++ global constructors and destructors. When linking object file formats, which do not support arbitrary sections, such as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">ECOFF </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">XCOFF</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, the linker will automatically recognize C++ global constructors and destructors by name. For these object file formats, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">CONSTRUCTORS </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">command tells the linker to place constructor information in the output section where the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">CONSTRUCTORS </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">command appears. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">CONSTRUCTORS </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">command is ignored for other object file formats. The symbol </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__CTOR_LIST__ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">marks the start of the global constructors, and the symbol </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__DTOR_LIST </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">marks the end. The first word in the list is the number of entries, followed by the address of each constructor or destructor, followed by a zero word. The compiler must arrange to actually run the code. For these object file formats GNU C++ normally calls constructors from a subroutine, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__main</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">; a call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">is automatically inserted into the startup code for </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">GNU C++ normally runs destructors either by using </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">atexit</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, or directly from the function </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">exit</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">. For object file formats such as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">COFF </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">or </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">ELF</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">, which support arbitrary section names, GNU C++ will normally arrange to put the addresses of global constructors and destructors into the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.ctors </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.dtors </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">sections. Placing the following sequence into your linker script will build the sort of table that the GNU C++ runtime code expects to see.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__CTOR_LIST__ = .;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">*(.ctors)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">LONG(0)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__CTOR_END__ = .;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__DTOR_LIST__ = .;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">*(.dtors)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">LONG(0)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">__DTOR_END__ = .;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">Normally the compiler and linker will handle these issues automatically, and you will not need to concern yourself with them. However, you may need to consider this occurrence, if you are using C++ and writing your own linker scripts.</SPAN>