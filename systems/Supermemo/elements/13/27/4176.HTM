<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">5, BFD Library</SPAN></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The linker accesses object and archive files using the BFD library (a library whose name comes from binary file descriptors).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The following documentation discusses the BFD library and how to use them.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">&#8220;How BFD Works (an Outline of BFD)&#8221; on page 68</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">&#8220;Information Loss&#8221; on page 68</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">&#8220;The BFD Canonical Object File Format&#8221; on page 69</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">The BFD library allows the linker to use the same routines to operate on object files whatever the object file format. A different object file format can be supported simply by creating a new BFD back end and adding it to the library. To conserve runtime memory, however, the linker and associated tools are usually configured to support only a subset of the object file formats available. To list all the formats available for your configuration, use </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">objdump -i </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">(see &#8220;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">objdump</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">&#8221; in <I>Using </I></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">binutils </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">in <B><I>GNUPro Auxiliary Development Tools</I></B>).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">As with most implementations, BFD is a compromise between several conflicting requirements. The major factor influencing BFD design was efficiency: any time used converting between formats is time which would not have been spent had BFD not been involved. This is partly offset by abstraction payback; since BFD simplifies applications and back ends, more time and care may be spent optimizing algorithms for a greater speed.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">One minor artifact of the BFD solution which you should bear in mind is the potential for information loss. There are two places where useful information can be lost using the BFD mechanism: during conversion and during output. See &#8220;Information Loss&#8221; on page 68.</SPAN>