<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">How BFD Works (an Outline of BFD)</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">When an object file is opened, BFD subroutines automatically determine the format of the input object file. They then build a descriptor in memory with pointers to routines that will be used to access elements of the object file&#8217;s data structures.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-font-kerning: 0pt">As different information from the object files is required, BFD reads from different sections of the file and processes them. For example, a very common operation for the linker is processing symbol tables. Each BFD back end provides a routine for converting between the object file&#8217;s representation of symbols and an internal canonical format. When the linker asks for the symbol table of an object file, it calls through a memory pointer to the routine from the relevant BFD back end which reads and converts the table into a canonical form. The linker then operates upon the canonical form. When the link is finished and the linker writes the output file&#8217;s symbol table, another BFD back end routine is called to take the newly created symbol table and convert it into the chosen output format.</SPAN>