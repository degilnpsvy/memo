<SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-size: 14.0pt; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">Nomenclature: yield and Iterators</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Depending on your programming background, you may find the terms </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>yield</SPAN>&#8221;<SPAN lang=EN-US> and</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>iterator</SPAN>&#8221;<SPAN lang=EN-US> confusing. The </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">sequence </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method shown earlier is a fairly clear example of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">why </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">yield </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">has the name it does. After computing each number in the sequence, the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method yields control (and yields the computed number) to the block, so that the block</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">can work with it. It is not always this clear, however; in some code it may seem as if it</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is the block that is yielding a result back to the method that invoked it.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">A method such as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">sequence </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">that expects a block and invokes it multiple times is called</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">an </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">iterator </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">because it looks and behaves like a loop. This may be confusing if you are</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">used to languages like Java in which iterators are objects. In Java, the client code that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">uses the iterator is in control and </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>pulls</SPAN>&#8221;<SPAN lang=EN-US> values from the iterator when it needs them.</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">In Ruby, the iterator method is in control and </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>pushes</SPAN>&#8221;<SPAN lang=EN-US> values to the block that wants</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">them.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">This nomenclature issue is related to the distinction between </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>internal iterators</SPAN>&#8221;<SPAN lang=EN-US> and</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>external iterators,</SPAN>&#8221;<SPAN lang=EN-US> which is discussed later in this section.</SPAN></SPAN>