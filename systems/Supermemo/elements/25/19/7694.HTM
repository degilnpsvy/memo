<SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">CHAPTER 4 Expressions and Operators</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">An </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">expression </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">is a chunk of Ruby code that the Ruby interpreter can evaluate to produce</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">a value. Here are some sample expressions:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">2 # A numeric literal</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">x # A local variable reference</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">Math.sqrt(2) # A method invocation</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">x = Math.sqrt(2) # Assignment</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">x*x # Multiplication with the * operator</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">As you can see, primary expressions</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>such as literals, variable references, and method</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">invocations</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>can be combined into larger expressions with </SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">operators</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, such as the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">assignment operator and the multiplication operator.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Many programming languages distinguish between low-level expressions and higherlevel</SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">statements</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, such as conditionals and loops. In these languages, statements control</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">the flow of a program, but they do not have values. They are executed, rather than</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">evaluated. In Ruby, there is no clear distinction between statements and expressions;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">everything in Ruby, including class and method definitions, can be evaluated as an</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">expression and will return a value. It is still useful, however, to distinguish syntax typically</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">used as expressions from syntax typically used as statements. Ruby expressions</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">that affect flow-of-control are documented in Chapter 5. Ruby expressions that define</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">methods and classes are covered in Chapters 6 and 7.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">This chapter covers the simpler, more traditional sort of expressions. The simplest</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">expressions are literal values, which we already documented in Chapter 3. This chapter</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">explains variable and constant references, method invocations, assignment, and</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">compound expressions created by combining smaller expressions with operators.</SPAN>