<SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">CHAPTER 5 Statements and Control Structures</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Consider the following Ruby program. It adds two numbers passed to it on the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">command line and prints the sum:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">x = ARGV[0].to_f # Convert first argument to a number</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">y = ARGV[1].to_f # Convert second argument to a number</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">sum = x + y # Add the arguments</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 8.0pt">puts sum # Print the sum</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">This is a simple program that consists primarily of variable assignment and method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">invocations. What makes it particularly simple is its purely sequential execution. The</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">four lines of code are executed one after the other without branching or repetition. It</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">is a rare program that can be this simple. This chapter introduces Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s control structures,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">which alter the sequential execution, or </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">flow-of-control</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, of a program. We cover:</SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Conditionals</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Loops</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Iterators and blocks</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Flow-altering statements like </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">return </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">break</SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Exceptions</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> The special-case BEGIN and END statements</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> The esoteric control structures known as </SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">fibers </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">continuations</SPAN></I>