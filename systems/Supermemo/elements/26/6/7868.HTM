<SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">CHAPTER 7 Classes and Modules</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby is an object-oriented language in a very pure sense: every value in Ruby is (or at</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">least behaves like) an object. Every object is an instance of a class. A class defines a set</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">of methods that an object responds to. Classes may extend or subclass other classes,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and inherit or override the methods of their superclass. Classes can also include</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>or</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">inherit methods from</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>modules.</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s objects are strictly encapsulated: their state can be accessed only through the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">methods they define. The instance variables manipulated by those methods cannot be</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">directly accessed from outside of the object. It is possible to define getter and setter</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">accessor methods that appear to access object state directly. These pairs of accessor</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">methods are known as </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">attributes </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and are distinct from instance variables. The methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">defined by a class may have </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8220;<SPAN lang=EN-US>public,</SPAN>&#8221; &#8220;<SPAN lang=EN-US>protected,</SPAN>&#8221;<SPAN lang=EN-US> or </SPAN>&#8220;<SPAN lang=EN-US>private</SPAN>&#8221;<SPAN lang=EN-US> visibility, which affects</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">how and where they may be invoked.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">In contrast to the strict encapsulation of object state, Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s classes are very open. Any</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby program can add methods to existing classes, and it is even possible to add</SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8220;<SPAN lang=EN-US>singleton methods</SPAN>&#8221;<SPAN lang=EN-US> to individual objects.</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Much of Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s OO architecture is part of the core language. Other parts, such as the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">creation of attributes and the declaration of method visibility, are done with methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">rather than true language keywords. This chapter begins with an extended tutorial that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">demonstrates how to define a class and add methods to it. This tutorial is followed by</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">sections on more advanced topics, including:</SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Method visibility</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Subclassing and inheritance</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Object creation and initialization</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Modules, both as namespaces and as includable </SPAN>&#8220;<SPAN lang=EN-US>mixins</SPAN>&#8221;<SPAN lang=EN-US></SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> Singleton methods and the eigenclass</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> The method name resolution algorithm</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8226;<SPAN lang=EN-US> The constant name resolution algorithm</SPAN></SPAN>