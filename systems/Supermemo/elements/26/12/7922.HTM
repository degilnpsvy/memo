<SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">7.8.1 Class Method Lookup</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The name resolution algorithm for class methods is exactly the same as it is for instance</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods, but there is a twist. Let</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s start with a simple case, without the twist. Here is</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">a class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">that defines no class methods of its own:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">class C</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Remember that after we define a class like this, the constant </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">refers to an object that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is an instance of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. Any class methods we define are simply singleton methods of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the object </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Once we have defined a class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, we are likely to write a method invocation expression</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">involving the class method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">new</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">c = C.new</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">To resolve the method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">new</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, Ruby first looks for singleton methods in the eigenclass of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the object </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. Our class does not have any class methods, so nothing is found there. After</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">searching the eigenclass, the name resolution algorithm searches the class object of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The class of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, so Ruby next looks for methods in </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and it finds an instance</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method named </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">new </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">there.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">You read that right. The method name resolution algorithm for the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">class </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C.new </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">ends up locating the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">instance </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class.new</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. The distinction between instance</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods and class methods is a useful one to draw in the object-oriented programming</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">paradigm, but the truth is that in Ruby</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>where classes are represented by objects</SPAN>&#8212;<SPAN lang=EN-US></SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the distinction is somewhat artificial. Every method invocation, whether instance</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method or class method, has a receiver object and a method name. The name resolution</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">algorithm finds the appropriate method definition for that object. Our object </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is an</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">instance of class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, so we can of course invoke the instance methods of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">through </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. Furthermore, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">inherits the instance methods of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Kernel</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, so those inherited methods are also available as methods of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. The only reason</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">we call these </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>class methods</SPAN>&#8221;<SPAN lang=EN-US> is that our object </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">happens to be a class.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Our class method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">C.new </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is found as an instance method of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. If it had not been</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">found there, however, the name resolution algorithm would have continued just as it</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">would have for an instance method. After searching </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">unsuccessfully, we would</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">have looked at modules (</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">doesn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">t include any) and then at the superclass</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. Next, we would search the modules of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">(there aren</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">t any), and finally the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">superclass of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and its module </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Kernel</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The twist mentioned at the beginning of this section has to do with the fact that class</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods are inherited just like instance methods are. Let</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s define a class method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer.parse </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to use as an example:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def Integer.parse(text)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">text.to_i</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Because </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is a subclass of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, we can invoke this method with an expression</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">like this:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">n = Fixnum.parse("1")</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">From the description of the method name resolution algorithm that we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">ve seen previously,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">we know that Ruby would first search the eigenclass of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">for singleton</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods. Next, it would search for instance methods of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Kernel</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. So where does it find the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">parse </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method? A class method of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is just a</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">singleton method of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">object, which means that it is defined by the eigenclass</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. So how does this eigenclass of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">get involved in the name resolution</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">algorithm?</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Class objects are special: they have superclasses. The eigenclasses of class objects are</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">also special: they have superclasses, too. The eigenclass of an ordinary object stands</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">alone and has no superclass. Let</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s use the names </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum' </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer' </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to refer to the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">eigenclasses of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. The superclass of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum' </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer'</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">With that twist in mind, we can now more fully explain the method name resolution</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">algorithm and say that when Ruby searches for singleton methods in the eigenclass of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">an object, it also searches the superclass (and all ancestors) of the eigenclass as well. So</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">when looking for a class method of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, Ruby first checks the singleton methods of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Integer</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Numeric</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and then checks the instance methods of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Class</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Kernel</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">.</SPAN>