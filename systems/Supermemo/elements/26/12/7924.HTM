<SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">CHAPTER 8 Reflection and Metaprogramming</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">ve seen that Ruby is a very dynamic language; you can insert new methods into</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">classes at runtime, create aliases for existing methods, and even define methods on</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">individual objects. In addition, it has a rich API for </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">reflection</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">. Reflection, also called</SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">introspection</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, simply means that a program can examine its state and its structure. A</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby program can, for example, obtain the list of methods defined by the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Hash </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">class,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">query the value of a named instance variable within a specified object, or iterate through</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">all </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Regexp </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">objects currently defined by the interpreter. The reflection API actually goes</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">further and allows a program to alter its state and structure. A Ruby program can</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">dynamically set named variables, invoke named methods, and even define new classes</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and new methods.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s reflection API</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>along with its generally dynamic nature, its blocks-anditerators</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">control structures, and its parentheses-optional syntax</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#8212;<SPAN lang=EN-US>makes it an ideal</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">language for </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">metaprogramming</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">. Loosely defined, metaprogramming is writing programs</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">(or frameworks) that help you write programs. To put it another way, metaprogramming</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">is a set of techniques for extending Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s syntax in ways that make</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">programming easier. Metaprogramming is closely tied to the idea of writing </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">domainspecific</SPAN></I></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">languages</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, or DSLs. DSLs in Ruby typically use method invocations and blocks</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">as if they were keywords in a task-specific extension to the language.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">This chapter starts with several sections that introduce Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s reflection API. This API</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">is surprisingly rich and consists of quite a few methods. These methods are defined,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">for the most part, by </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Kernel</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Object</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">As you read these introductory sections, keep in mind that reflection is not, by itself,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">metaprogramming. Metaprogramming typically extends the syntax or the behavior of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby in some way, and often involves more than one kind of reflection. After introducing</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s core reflection API, this chapter moves on to demonstrate, by example,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">common metaprogramming techniques that use that API.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Note that this chapter covers advanced topics. You can be a productive Ruby programmer</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">without ever reading this chapter. You may find it helpful to read the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">remaining chapters of this book first, and then return to this chapter. Consider this</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">chapter a kind of final exam: if you understand the examples (particularly the longer</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">ones at the end), then you have mastered Ruby!</SPAN>