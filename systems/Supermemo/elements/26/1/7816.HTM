<SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">CHAPTER 6 Methods, Procs, Lambdas, and Closures</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">A </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">method </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">is a named block of parameterized code associated with one or more objects.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">A method </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">invocation </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">specifies the method name, the object on which it is to be invoked</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">(sometimes called the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">receiver</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">), and zero or more argument values that are assigned to</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">the named method parameters. The value of the last expression evaluated in the method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">becomes the value of the method invocation expression.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Many languages distinguish between functions, which have no associated object, and</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">methods, which are invoked on a receiver object. Because Ruby is a purely object oriented</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">language, all methods are true methods and are associated with at least one</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">object. We have not covered class definitions in Ruby yet, so the example methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">defined in this chapter look like global functions with no associated object. In fact,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Ruby implicitly defines and invokes them as private methods of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Object </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">class.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Methods are a fundamental part of Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s syntax, but they are not values that Ruby</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">programs can operate on. That is, Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s methods are not objects in the way that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">strings, numbers, and arrays are. It is possible, however, to obtain a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">object that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">represents a given method, and we can invoke methods indirectly through </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">objects.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Methods are not Ruby</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s only form of parameterized executable code. Blocks, which</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">we introduced in </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#167;<SPAN lang=EN-US>5.4, are executable chunks of code and may have parameters. Unlike</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">methods, blocks do not have names, and they can only be invoked indirectly through</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">an iterator method.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Blocks, like methods, are not objects that Ruby can manipulate. But it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">s possible to</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">create an object that represents a block, and this is actually done with some frequency</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">in Ruby programs. A </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Proc </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">object represents a block. Like a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">object, we can execute</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">the code of a block through the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Proc </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">that represents it. There are two varieties of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Proc</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">objects, called </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">procs </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">lambdas</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">, which have slightly different behavior. Both procs</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and lambdas are functions rather than methods invoked on an object. An important</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">feature of procs and lambdas is that they are </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">closures</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">: they retain access to the local</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">variables that were in scope when they were defined, even when the proc or lambda is</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">invoked from a different scope.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">Methods have a rich and fairly complex syntax in Ruby, and the first four sections of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">this chapter are dedicated to them. We begin by explaining how to define simple methods,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">and then follow this introductory section with three more advanced sections</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">covering methods names, method parentheses, and method parameters. Note that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">method invocation is a kind of expression, covered earlier in </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">&#167;<SPAN lang=EN-US>4.4. Further details on</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">method invocation are provided throughout the first four sections of this chapter.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">After covering methods, we turn our attention to procs and lambdas, explaining how</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">to create and invoke them, and also detailing the somewhat subtle differences between</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">them. A separate section covers the use of procs and lambdas as closures. This is followed</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">by a section on the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-bidi-font-size: 9.0pt">Method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">object, which actually behaves much like a lambda.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-bidi-font-size: 10.0pt">The chapter ends with an advanced exploration of functional programming in Ruby.</SPAN>