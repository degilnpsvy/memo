<SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">8.11.2 Chaining Methods for Thread Safety</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Two earlier examples in this chapter have involved thread safety. Example 8-2 defined</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronized </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method (based on an </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object.mutex </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method) that executed a block under</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the protection of a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Mutex </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">object. Then, Example 8-5 redefined the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronized </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">so that when it was invoked without a block, it would return a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">SynchronizedObject</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">wrapper around an object, protecting access to any methods invoked through that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">wrapper object. Now, in Example 8-9, we augment the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronized </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method again so</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">that when it is invoked within a class or module definition, it alias chains the named</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods to add synchronization.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The alias chaining is done by our method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module.synchronize_method</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, which in turn</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">uses a helper method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module.create_alias </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to define an appropriate alias for any given</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method (including operator methods like </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">+</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">).</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">After defining these new </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Module </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods, Example 8-9 redefines the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronized</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method again. When the method is invoked within a class or a module, it calls</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronize_method </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">on each of the symbols it is passed. Interestingly, however, it can</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">also be called with no arguments; when used this way, it adds synchronization to</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">whatever instance method is defined next. (It uses the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">method_added </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">hook to receive</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">notifications when a new method is added.) Note that the code in this example depends</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">on the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Object.mutex </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method of Example 8-2 and the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">SynchronizedObject </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">class of Example</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">8-5.</SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">Example 8-9. Alias chaining for thread safety</SPAN></I></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Define a Module.synchronize_method that alias chains instance methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># so they synchronize on the instance before running.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">class Module</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># This is a helper function for alias chaining.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Given a method name (as a string or symbol) and a prefix, create</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># a unique alias for the method, and return the name of the alias</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># as a symbol. Any punctuation characters in the original method name</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># will be converted to numbers so that operators can be aliased.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def create_alias(original, prefix="alias")</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Stick the prefix on the original name and convert punctuation</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka = "#{prefix}_#{original}"</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka.gsub!(/([\=\|\&amp;\+\-\*\/\^\!\?\~\%\&lt;\&gt;\[\]])/) {</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">num = $1[0] # Ruby 1.8 character -&gt; ordinal</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">num = num.ord if num.is_a? String # Ruby 1.9 character -&gt; ordinal</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">'_' + num.to_s</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">}</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Keep appending underscores until we get a name that is not in use</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka += "_" while method_defined? aka or private_method_defined? aka</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka = aka.to_sym # Convert the alias name to a symbol</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">alias_method aka, original # Actually create the alias</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka # Return the alias name</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Alias chain the named method to add synchronization</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def synchronize_method(m)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># First, make an alias for the unsynchronized version of the method.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">aka = create_alias(m, "unsync")</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Now redefine the original to invoke the alias in a synchronized block.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># We want the defined method to be able to accept blocks, so we</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># can't use define_method, and must instead evaluate a string with</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># class_eval. Note that everything between %Q{ and the matching }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># is a double-quoted string, not a block.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">class_eval %Q{</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def #{m}(*args, &amp;block)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">synchronized(self) { #{aka}(*args, &amp;block) }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">}</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># This global synchronized method can now be used in three different ways.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def synchronized(*args)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Case 1: with one argument and a block, synchronize on the object</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># and execute the block</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">if args.size == 1 &amp;&amp; block_given?</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">args[0].mutex.synchronize { yield }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Case two: with one argument that is not a symbol and no block</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># return a SynchronizedObject wrapper</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">elsif args.size == 1 and not args[0].is_a? Symbol and not block_given?</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">SynchronizedObject.new(args[0])</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Case three: when invoked on a module with no block, alias chain the</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># named methods to add synchronization. Or, if there are no arguments,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># then alias chain the next method defined.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">elsif self.is_a? Module and not block_given?</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">if (args.size &gt; 0) # Synchronize the named methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">args.each {|m| self.synchronize_method(m) }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">else</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># If no methods are specified synchronize the next method defined</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">eigenclass = class&lt;&lt;self; self; end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">eigenclass.class_eval do # Use eigenclass to define class methods</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Define method_added for notification when next method is defined</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">define_method :method_added do |name|</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># First remove this hook method</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">eigenclass.class_eval { remove_method :method_added }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Next, synchronize the method that was just added</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">self.synchronize_method name</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt"># Case 4: any other invocation is an error</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">else</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">raise ArgumentError, "Invalid arguments to synchronize()"</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN>