<SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-size: 14.0pt; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">Type Checking and Duck Typing</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Our </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">+ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method does not do any type checking; it simply assumes that it has been passed</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">a suitable object. It is fairly common in Ruby programming to be loose about the definition</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">of </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>suitable.</SPAN>&#8221;<SPAN lang=EN-US> In the case of our </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">+ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method, any object that has methods named</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">x </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">y </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">will do, as long as those methods expect no arguments and return a number of</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">some sort. We don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">t care if the argument actually </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">is </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">a point, as long as it looks and</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">behaves like a point. This approach is sometimes called </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>duck typing,</SPAN>&#8221;<SPAN lang=EN-US> after the adage</SPAN></SPAN></P>
<p><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>if it walks like a duck and quacks like a duck, it must be a duck.</SPAN>&#8221;<SPAN lang=EN-US></SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">If we pass an object to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">+ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">that is not suitable, Ruby will raise an exception. Attempting</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to add </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">3 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to a point, for example, results in this error message:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">NoMethodError: undefined method `x' for 3:Fixnum</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">from ./point.rb:37:in `+'</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Translated, this tells us that the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Fixnum 3 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">does not have a method named </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">x</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, and that</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">this error arose in the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">+ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Point </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">class. This is all the information we need</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to figure out the source of the problem, but it is somewhat obscure. Checking the class</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">of method arguments may make it easier to debug code that uses that method. Here is</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">a version of the method with class verification:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def +(other)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">raise TypeError, "Point argument expected" unless other.is_a? Point</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Point.new(@x + other.x, @y + other.y)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Here is a looser version of type checking that provides improved error messages but</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">still allows duck typing:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def +(other)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">raise TypeError, "Point-like argument expected" unless</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">other.respond_to? :x and other.respond_to? :y</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Point.new(@x + other.x, @y + other.y)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Note that this version of the method still assumes that the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">x </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">y </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">methods return</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">numbers. We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">d get an obscure error message if one of these methods returned a string,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">for example.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Another approach to type checking occurs after the fact. We can simply handle any</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">exceptions that occur during execution of the method and raise a more appropriate</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 9.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">exception of our own:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">def +(other) # Assume that other looks like a Point</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">Point.new(@x + other.x, @y + other.y)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">rescue # If anything goes wrong above</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">raise TypeError, # Then raise our own exception</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">"Point addition with an argument that does not quack like a Point!"</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">end</SPAN>