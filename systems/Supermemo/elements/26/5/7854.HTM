<SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: MyriadPro-SemiboldCond; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: MyriadPro-SemiboldCond; mso-font-kerning: 0pt">6.5.5.4 Argument passing to procs and lambdas</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Invoking a block with </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">yield </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is similar to, but not the same as, invoking a method. There</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">are differences in the way argument values in the invocation are assigned to the argument</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">variables declared in the block or method. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">yield </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">statement uses </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">yield</SPAN></I></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">semantics</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, whereas method invocation uses </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">invocation semantics</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. Yield semantics are</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">similar to parallel assignment and are described in </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#167;<SPAN lang=EN-US>5.4.4. As you might expect,</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">invoking a proc uses yield semantics and invoking a lambda uses invocation semantics:</SPAN></P>
<p><SPAN lang=FR style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-ansi-language: FR">p = Proc.new {|x,y| print x,y }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">p.call(1) # x,y=1: nil used for missing rvalue: Prints 1nil</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">p.call(1,2) # x,y=1,2: 2 lvalues, 2 rvalues: Prints 12</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">p.call(1,2,3) # x,y=1,2,3: extra rvalue discarded: Prints 12</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">p.call([1,2]) # x,y=[1,2]: array automatically unpacked: Prints 12</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">This code demonstrates that the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">call </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method of a proc handles the arguments it</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">receives flexibly: silently discarding extras, silently adding </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">nil </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">for omitted arguments,</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and even unpacking arrays. (Or, not demonstrated here, packing multiple arguments</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">into a single array when the proc expects only a single argument.)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Lambdas are not flexible in this way; like methods, they must be invoked with precisely</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the number of arguments they are declared with:</SPAN></P>
<p><SPAN lang=FR style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt; mso-ansi-language: FR">l = lambda {|x,y| print x,y }</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">l.call(1,2) # This works</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">l.call(1) # Wrong number of arguments</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">l.call(1,2,3) # Wrong number of arguments</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">l.call([1,2]) # Wrong number of arguments</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMono-Cd5; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMono-Cd5; mso-font-kerning: 0pt">l.call(*[1,2]) # Works: explicit splat to unpack the array</SPAN>