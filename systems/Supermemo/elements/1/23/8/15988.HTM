<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The pthread_exit() function terminates the calling thread, and specifies a return value that can be obtained in another thread by calling pthread_join().</SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=clozed>include &lt;pthread.h&gt;</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=clozed>void pthread_exit(void *retval);</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=clozed>Calling pthread_exit() is equivalent to performing a return in the thread&#8217;s start function, with the difference that pthread_exit() can be called from any function that has been called by the thread&#8217;s start function.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=clozed>The retval argument specifies the return value for the thread. The value pointed to by retval should not be located on the thread&#8217;s stack, since the contents of that stack become undefined on thread termination. (For example, that region of the process&#8217;s virtual memory might be immediately reused by the stack for a new thread.) The same statement applies to the value given to a return statement in the thread&#8217;s start function.</FONT></SPAN>