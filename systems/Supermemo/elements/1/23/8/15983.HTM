<SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM>int pthread_create(pthread_t *thread, const pthread_attr_t *attr,</EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM>void *(*start)(void *), void *arg);</EM></SPAN></P></SPAN>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The return value of </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>is likewise of type </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>void *</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, and it can be employed in the same way as the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>argument. We&#8217;ll see how this value is used when we describe the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>pthread_join() </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>function below.</SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>Caution is required when using a cast integer as the return value of a thread&#8217;s start function. The reason for this is that PTHREAD_CANCELED, the value returned when a thread is canceled (see Chapter 32), is usually some implementation defined integer value cast to void *. If a thread&#8217;s start function returns the same integer value, then, to another thread that is doing a pthread_join(), it will wrongly appear that the thread was canceled. In an application that employs thread cancellation and chooses to return cast integer values from a thread&#8217;s start functions, we must ensure that a normally terminating thread does not return an integer whose value matches PTHREAD_CANCELED on that Pthreads implementation. A portable application would need to ensure that normally terminating threads don&#8217;t return integer values that match PTHREAD_CANCELED on any of the implementations on which the application is to run.</FONT></EM></SPAN>