<H3 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 21pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt">31.3.2 Overview of the Thread-Specific Data API</SPAN></H3>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">The general steps that a library function performs in order to use thread-specific data are as follows:</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">1. The function creates a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">, which is the means of differentiating <FONT class=clozed>the thread-specific data item used by this function from the thread-specific data items used by other functions</FONT>. The key is created by calling the </SPAN><FONT class=clozed><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">function. Creating a key needs to be done only once, when the first thread calls the function. For this purpose, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_once() </SPAN></FONT><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman"><FONT class=clozed>is employed</FONT>. Creating a key <FONT class=clozed>doesn&#8217;t</FONT> allocate any blocks of thread-specific data.</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">2. The call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">serves a second purpose: <FONT class=clozed>it allows the caller to specify the address of the programmer-defined destructor function that is used to deallocate each of the storage blocks allocated for this key (see the next step). When a thread that has thread-specific data terminates, the Pthreads API automatically invokes the destructor, passing it a pointer to the data block for this thread</FONT>.</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">3. The function allocates a thread-specific data block <FONT class=clozed>for each thread from which it is called. This is done using </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta"><FONT class=clozed>malloc() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman"><FONT class=clozed>(or a similar function). This allocation is done once for each thread, the first time the thread calls the function</FONT>. </SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">4. In order to save a pointer to the storage allocated in the previous step, the function employs two Pthreads functions: </SPAN><FONT class=clozed><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_getspecific()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. A call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">is a request to the Pthreads implementation to say &#8220;save this pointer, recording the fact that it is associated with a particular key (the one for this function) and a particular thread (the calling thread).&#8221; Calling </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_getspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">performs the complementary task, returning the pointer previously associated with a given key for the calling thread. If no pointer was previously associated with a particular key and thread, then </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_getspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">returns </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-hansi-font-family: NewBaskervilleEF-Roman">NULL</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. This is how a function can determine that it is being called for the first time by this thread, and thus must allocate the storage block for the thread.</SPAN></FONT>