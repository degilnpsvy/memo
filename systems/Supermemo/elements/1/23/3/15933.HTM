<HEAD></HEAD>
<BODY>
<H3 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 21pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt">31.3.3 Details of the Thread-Specific Data API</SPAN></H3>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">In this section, we provide details of each of the functions mentioned in the previous section, and elucidate the operation of thread-specific data by describing how it is typically implemented. The next section shows how to use thread-specific data to write a thread-safe implementation of the standard C library function </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">strerror()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">.</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">Calling </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">creates a new thread-specific data key that is returned to the caller in the buffer pointed to by </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">.</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>#include &lt;pthread.h&gt;</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>int pthread_key_create(pthread_key_t *key, void (*destructor)(void *));</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>Returns 0 on success, or a positive error number on error</FONT></EM></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">Because the returned key is used by all threads in the process, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">should point to a global variable.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">destructor </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">argument points to a programmer-defined function of the following form:</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>void</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>dest(void *value)</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>{</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>/* Release storage pointed to by 'value' */</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>}</FONT></EM></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">Upon termination of a thread that has a non-</SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-hansi-font-family: NewBaskervilleEF-Roman">NULL </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">value associated with </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">, the destructor function is automatically invoked by the Pthreads API and given that value as its argument. The passed value is normally a pointer to this thread&#8217;s thread-specific data block for this key. If a destructor is not required, then </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">destructor </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">can be specified as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-hansi-font-family: NewBaskervilleEF-Roman">NULL</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">.</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>If a thread has multiple thread-specific data blocks, then the order in which the destructors are called is unspecified. Destructor functions should be designed to operate independently of one another.</FONT></EM></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman"><FONT class=extract>Looking at the implementation of thread-specific data helps us to understand how it is used. A typical implementation (NPTL is typical), involves the following arrays:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 21pt; TEXT-INDENT: -21pt; mso-layout-grid-align: none; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">a single global (i.e., process-wide) array of information about thread-specific data keys; and</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 21pt; TEXT-INDENT: -21pt; mso-layout-grid-align: none; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">a set of per-thread arrays, each containing pointers to all of the thread-specific data blocks allocated for a particular thread (i.e., this array contains the pointers stored by calls to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">).</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">In this implementation, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_t </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">value returned by </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">is simply an index into the global array, which we label </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_keys</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">, whose form is shown in Figure 31-2. Each element of this array is a structure containing two fields. The first field indicates whether this array element is in use (i.e., has been allocated by a previous call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">). The second field is used to store the pointer to the destructor function for the thread-specific data blocks for this key (i.e., it is a copy of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">destructor </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">argument to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">).</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><?xml:namespace prefix = "v" /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = "o" /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="HEIGHT: 291pt; WIDTH: 415.5pt" type="#_x0000_t75"><v:imagedata src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Futura-Heavy','sans-serif'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Heavy">Figure 31-2: </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Futura-Book','sans-serif'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Book">Implementation of thread-specific data keys</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">function requests the Pthreads API to save a copy of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">value </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">in a data structure that associates it with the calling thread and with </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">, a key returned by a previous call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_key_create()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_getspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">function performs the converse operation, returning the value that was previously associated with the given </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">for this thread.</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>#include &lt;pthread.h&gt;</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>int pthread_setspecific(pthread_key_t key, const void *value);</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>Returns 0 on success, or a positive error number on error</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>void *pthread_getspecific(pthread_key_t key);</FONT></EM></SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>Returns pointer, or NULL if no thread-specific data isassociated with key</FONT></EM></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">value </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">argument given to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">is normally a pointer to a block of memory that has previously been allocated by the caller. This pointer will be passed as the argument for the destructor function for this </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">when the thread terminates.</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt"><EM><FONT class=extract>The value argument doesn&#8217;t need to be a pointer to a block of memory. It could be some scalar value that can be assigned (with a cast) to void *. In this case, the earlier call to pthread_key_create() would specify destructor as NULL.</FONT></EM></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">Figure 31-3 shows a typical implementation of the data structure used to store </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">value</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. In this diagram, we assume that </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_keys[1] </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">was allocated to a function named </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">myfunc()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. For each thread, the Pthreads API maintains an array of pointers to thread-specific data blocks. The elements of each of these thread-specific arrays have a one-to-one correspondence with the elements of the global </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_keys </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">array shown in Figure 31-2. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">function sets the element corresponding to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">in the array for the calling thread.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><v:shape id=_x0000_i1026 style="HEIGHT: 435.75pt; WIDTH: 414.75pt" type="#_x0000_t75"><v:imagedata src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image003.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Futura-Heavy','sans-serif'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Heavy">Figure 31-3: </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Futura-Book','sans-serif'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Book">Data structure used to implement thread-specific data (TSD) pointers</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">When a thread is first created, all of its thread-specific data pointers are initialized to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-hansi-font-family: Futura-Heavy">NULL</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. This means that when our library function is called by a thread for the first time, it must begin by using </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_getspecific() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">to check whether the thread already has an associated value for </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">key</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. If it does not, then the function allocates a block of memory and saves a pointer to the block using </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pthread_setspecific()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">. We show an example of this in the thread-safe </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">strerror() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman">implementation presented in the next section.</SPAN></P></BODY>