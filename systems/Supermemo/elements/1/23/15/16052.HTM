<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>Threads offer advantages over processes in certain applications. Consider the traditional UNIX approach to achieving concurrency by creating multiple processes. An example of this is a network server design in which a parent process accepts incoming connections from clients, and then uses </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>fork() </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-Roman','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>to create a separate child process to handle communication with each client (refer to Section 60.3). Such a design</SPAN></P>
<P style="TEXT-INDENT: -21pt; MARGIN: 0cm 0cm 0pt 21pt; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" class=MsoNormal><SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore"><SPAN class=cloze>[...]</SPAN></SPAN></SPAN>