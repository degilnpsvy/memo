A similar variable <CODE>MFLAGS</CODE> exists also, for historical compatibility. It has the same value as <CODE>MAKEFLAGS</CODE> except that it does not contain the command line variable definitions, and it always begins with a hyphen unless it is empty (<CODE>MAKEFLAGS</CODE> begins with a hyphen only when it begins with an option that has no single-letter version, such as &#8216;<SAMP><SPAN class=samp>--warn-undefined-variables</SPAN></SAMP>&#8217;). <CODE>MFLAGS</CODE> was traditionally used explicitly in the recursive <CODE>make</CODE> command, like this: <PRE class=example>     subsystem:
             cd subdir &amp;&amp; $(MAKE) $(MFLAGS)
</PRE>
<P class=noindent>but now <CODE>MAKEFLAGS</CODE> makes this usage redundant. If you want your makefiles to be compatible with old <CODE>make</CODE> programs, use this technique; it will work fine with more modern <CODE>make</CODE> versions too. 
<P><A name=index-setting-options-from-environment-442></A><A name=index-options_002c-setting-from-environment-443></A><A name=index-setting-options-in-makefiles-444></A><A name=index-options_002c-setting-in-makefiles-445></A><FONT class=extract>The <CODE>MAKEFLAGS</CODE> variable can also be useful if you want to have certain options, such as &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>), set each time you run <CODE>make</CODE>. You simply put a value for <CODE>MAKEFLAGS</CODE> in your environment. You can also set <CODE>MAKEFLAGS</CODE> in a makefile, to specify additional flags that should also be in effect for that makefile. (Note that you cannot use <CODE>MFLAGS</CODE> this way. That variable is set only for compatibility; <CODE>make</CODE> does not interpret a value you set for it in any way.)</FONT> 
<P><FONT class=extract>When <CODE>make</CODE> interprets the value of <CODE>MAKEFLAGS</CODE> (either from the environment or from a makefile), it first prepends a hyphen if the value does not already begin with one. Then it chops the value into words separated by blanks, and parses these words as if they were options given on the command line (except that &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217;, and their long-named versions are ignored; and there is no error for an invalid option).</FONT> 
<P>If you do put <CODE>MAKEFLAGS</CODE> in your environment, you should be sure not to include any options that will drastically affect the actions of <CODE>make</CODE> and undermine the purpose of makefiles and of <CODE>make</CODE> itself. For instance, the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; options, if put in one of these variables, could have disastrous consequences and would certainly have at least surprising and probably annoying effects. 
<P>If you'd like to run other implementations of <CODE>make</CODE> in addition to GNU <CODE>make</CODE>, and hence do not want to add GNU <CODE>make</CODE>-specific flags to the <CODE>MAKEFLAGS</CODE> variable, you can add them to the <CODE>GNUMAKEFLAGS</CODE> variable instead. This variable is parsed just before <CODE>MAKEFLAGS</CODE>, in the same way as <CODE>MAKEFLAGS</CODE>. When <CODE>make</CODE> constructs <CODE>MAKEFLAGS</CODE> to pass to a recursive <CODE>make</CODE> it will include all flags, even those taken from <CODE>GNUMAKEFLAGS</CODE>. As a result, after parsing <CODE>GNUMAKEFLAGS</CODE> GNU <CODE>make</CODE> sets this variable to the empty string to avoid duplicating flags during recursion.