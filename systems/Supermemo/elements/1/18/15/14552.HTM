<H2 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 24pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt"><FONT face=Arial>41.1 Object Libraries</FONT></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">One way of building a program is simply to compile each of its source files to produce corresponding object files, and then link all of these object files together to produce the executable program, like so:</SPAN></P>
<p><SPAN lang=DA style="FONT-SIZE: 17pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">1</SPAN><SPAN lang=DA style="FONT-SIZE: 17pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">$ cc -g -c prog.c mod1.c mod2.c mod3.c</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 17pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 17pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">$ cc -g -o prog_nolib prog.o mod1.o mod2.o mod3.o</SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 17pt; mso-bidi-font-size: 12.0pt"><EM>Linking is actually performed by the separate linker program, ld. When we link a program using the cc (or gcc) command, the compiler invokes ld behind the scenes. On Linux, the linker should always be invoked indirectly via gcc, since gcc ensures that ld is invoked with the correct options and links the program against the correct library files.</EM></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">In many cases, however, we may have source files that are used by several programs. As a first step toward saving ourselves some work, we could compile these source files just once, and then link them into different executables as required. Although this technique saves us compilation time, it still suffers from the disadvantage that we must name all of the object files during the link phase. Furthermore, our directories may be inconveniently cluttered with a large number of object files.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">To get around these problems, we can group a set of object files into a single unit, known as an </SPAN><SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">object library</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">. Object libraries are of two types: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">shared</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">. Shared libraries are the more modern type of object library, and provide several advantages over static libraries, as we describe in Section 41.3.</SPAN>