<H2 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 24pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt"><FONT face=Arial>41.3 Overview of Shared Libraries</FONT></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">When a program is built by linking against a static library (or, for that matter, without using a library at all), the resulting executable file includes copies of all of the object files that were linked into the program. Thus, when several different executables use the same object modules, each executable has its own copy of the object modules. This redundancy of code has several disadvantages:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Disk space is wasted storing multiple copies of the same object modules. Such wastage can be considerable.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">If several different programs using the same modules are running at the same time, then each holds separate copies of the object modules in virtual memory, thus increasing the overall virtual memory demands on the system.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">If a change is required (perhaps a security or bug fix) to an object module in a static library, then all executables using that module must be relinked in order to incorporate the change. This disadvantage is further compounded by the fact that the system administrator needs to be aware of which applications were linked against the library.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Shared libraries were designed to address these shortcomings. The key idea of a shared library is that a single copy of the object modules is shared by all programs requiring the modules. The object modules are not copied into the linked executable; instead, a single copy of the library is loaded into memory at run time, when the first program requiring modules from the shared library is started. When other programs using the same shared library are later executed, they use the copy of the library that is already loaded into memory. The use of shared libraries means that executable programs require less space on disk and (when running) in virtual memory.</SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><SPAN lang=EN-US style="FONT-SIZE: 17pt; mso-bidi-font-size: 12.0pt"><EM>Although the code of a shared library is shared among multiple processes, its variables are not. Each process that uses the library has its own copies of the global and static variables that are defined within the library.</EM></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Shared libraries provide the following further advantages:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Because overall program size is smaller, in some cases, programs can be loaded into memory and started more quickly. This point holds true only for large shared libraries that are already in use by another program. The first program to load a shared library will actually take longer to start, since the shared library must be found and loaded into memory.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Since object modules are not copied into the executable files, but instead maintained centrally in the shared library, it is possible (subject to limitations described in Section 41.8) to make changes to the object modules without requiring programs to be relinked in order to see the changes. Such changes can be carried out even while running programs are using an existing version of the shared library. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">The principal costs of this added functionality are the following:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Shared libraries are more complex than static libraries, both at the conceptual level, and at the practical level of creating shared libraries and building the programs that use them.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Shared libraries must be compiled to use position-independent code (described in Section 41.4.2), which has a performance overhead on most architectures because it requires the use of an extra register ([Hubicka, 2003]).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 24pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">Symbol relocation </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">must be performed at run time. During symbol relocation, references to each symbol (a variable or function) in a shared library need to be modified to correspond to the actual run-time location at which the symbol is placed in virtual memory. Because of this relocation process, a program using a shared library may take a little more time to execute than its statically linked equivalent.</SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><EM><SPAN lang=EN-US style="FONT-SIZE: 17pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">One further use of shared libraries is as a building block in the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">Java Native Interface </SPAN><SPAN lang=EN-US style="FONT-SIZE: 17pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">( JNI), which allows Java code to directly access features of the underlying operating system by calling C functions within a shared library. For further information, see [Liang, 1999] and [Rochkind, 2004].</SPAN></EM>