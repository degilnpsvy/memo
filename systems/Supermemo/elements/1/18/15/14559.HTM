<H3 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 24pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt">41.4.1 Creating a Shared Library</SPAN></H3>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>In order to build a shared version of the static library we created earlier, we perform the following steps:</FONT></SPAN></P>
<P><SPAN lang=DA style="FONT-SIZE: 17pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA"><FONT class=extract>$ gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c</FONT></SPAN></P>
<P><SPAN lang=DA style="FONT-SIZE: 17pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA"><FONT class=extract>$ gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>The first of these commands creates the three object modules that are to be put into the library. (We explain the cc &#8211;fPIC option in the next section.) The cc &#8211;shared command creates a shared library containing the three object modules.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>By convention, shared libraries have the prefix lib and the suffix .so (for shared object).</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">In our examples, we use the gcc command, rather than the equivalent cc command, to emphasize that the command-line options we are using to create shared libraries are compiler-dependent. Using a different C compiler on another UNIX implementation will probably require different options.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Note that it is possible to compile the source files and create the shared library in a single command:</SPAN></P>
<P><SPAN lang=DA style="FONT-SIZE: 17pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">$ gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">However, to clearly distinguish the compilation and library building steps, we&#8217;ll write the two as separate commands in the examples shown in this chapter.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Unlike static libraries, it is not possible to add or remove individual object modules from a previously built shared library. As with normal executables, the object files within a shared library no longer maintain distinct identities.</SPAN>