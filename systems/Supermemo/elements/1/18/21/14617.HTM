Here is an example of how <CODE>eval</CODE> can be used; this example combines a number of concepts and other functions. Although it might seem overly complex to use <CODE>eval</CODE> in this example, rather than just writing out the rules, consider two things: first, the template definition (in <CODE>PROGRAM_template</CODE>) could need to be much more complex than it is here; and second, you might put the complex, &#8220;generic&#8221; part of this example into another makefile, then include it in all the individual makefiles. Now your individual makefiles are quite straightforward. <PRE class=example>     PROGRAMS    = server client
     
     server_OBJS = server.o server_priv.o server_access.o
     server_LIBS = priv protocol
     
     client_OBJS = client.o client_api.o client_mem.o
     client_LIBS = protocol
     
     # Everything after this is generic
     
     .PHONY: all
     all: $(PROGRAMS)
     
     define PROGRAM_template =
<FONT class=clozed>      $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%)
      ALL_OBJS   += $$($(1)_OBJS)
</FONT>     endef
     
     $(foreach <FONT class=clozed>prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog)))</FONT>)
     
     $(PROGRAMS):
             $(LINK.o) $^ $(LDLIBS) -o $@
     
     clean:
             rm -f $(ALL_OBJS) $(PROGRAMS)
</PRE>