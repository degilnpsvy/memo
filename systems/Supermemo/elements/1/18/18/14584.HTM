<HEAD></HEAD>
<BODY>
<H2 style="MARGIN: 13pt 0cm"><SPAN style="LINE-HEIGHT: 173%; FONT-SIZE: 24pt; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT face=Arial>41.12 Run-Time Symbol Resolution</FONT></SPAN></H2>
<P><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>Suppose that a global symbol (i.e., a function or variable) is defined in multiple locations, such as in an executable and in a shared library, or in multiple shared libraries. How is a reference to that symbol resolved?</SPAN></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>For example, suppose that we have a main program and a shared library, both of which define a global function, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz()</SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, and another function within the shared library calls </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz()</SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, as shown in Figure 41-5.</SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt" lang=EN-US><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><?xml:namespace prefix = o /><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype><v:shape style="WIDTH: 342.75pt; HEIGHT: 114.75pt" id=_x0000_i1025 type="#_x0000_t75"><v:imagedata o:title="" src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.emz"><FONT class=extract></FONT></v:imagedata></v:shape></SPAN></P>
<P><FONT class=extract><B><SPAN style="FONT-FAMILY: Futura-Heavy; FONT-SIZE: 20pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Heavy" lang=EN-US>Figure 41-5: </SPAN></B><SPAN style="FONT-FAMILY: Futura-Book; FONT-SIZE: 20pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: Futura-Book" lang=EN-US>Resolving a global symbol reference</SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>When we build the shared library and the executable program, and then run the program, this is what we see:</FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -c -fPIC -Wall -c foo.c</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>2</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -shared -o libfoo.so foo.o</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>3</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -o prog prog.c libfoo.so</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>4</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ <SPAN style="COLOR: #bfbf00">LD_LIBRARY_PATH</SPAN>=. ./prog</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>5</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>main-xyz</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>From the last line of output, we can see that the definition of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz() </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>in the main program overrides (interposes) the one in the shared library.</SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>Although this may at first appear surprising, there is a good historical reason why things are done this way.</FONT> <FONT class=extract>The first shared library implementations were designed so that the default semantics for symbol resolution exactly mirrored those of applications linked against static equivalents of the same libraries. This means that the following semantics apply:</FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: 'Times New Roman'" lang=EN-US><SPAN style="mso-list: Ignore">1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>A definition of a global symbol in the main program overrides a definition in a library.</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: 'Times New Roman'" lang=EN-US><SPAN style="mso-list: Ignore">2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>If a global symbol is defined in multiple libraries, then a reference to that symbol is bound to the first definition found by scanning libraries in the left-to-right order in which they were listed on the static link command line.</SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>Although these semantics make the transition from static to shared libraries relatively straightforward, they can cause some problems. The most significant problem is that these semantics conflict with the model of a shared library as implementing a self-contained subsystem. By default, a shared library can&#8217;t guarantee that a reference to one of its own global symbols will actually be bound to the library&#8217;s definition of that symbol. Consequently, the properties of a shared library can change when it is aggregated into a larger unit. This can lead to applications breaking in unexpected ways, and also makes it difficult to perform divide-and-conquer debugging (i.e., trying to reproduce a problem using fewer or different shared libraries).</SPAN></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>In the above scenario, if we wanted to ensure that the invocation of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz() </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>in the shared library actually called the version of the function defined within the library, then we could use the </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>&#8211;Bsymbolic </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>linker option when building the shared library:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -c -fPIC -Wall -c foo.c</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>2</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -shared -Wl,-Bsymbolic -o libfoo.so foo.o</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>3</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ gcc -g -o prog prog.c libfoo.so</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>4</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>$ <SPAN style="COLOR: #bfbf00">LD_LIBRARY_PATH</SPAN>=. ./prog</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>5</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 17pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>foo-xyz</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>&#8211;Bsymbolic </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>linker option specifies that references to global symbols within a shared library should be preferentially bound to definitions (if they exist) within that library. (Note that, regardless of this option, calling </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz() </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>from the main program would always invoke the version of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>xyz() </SPAN><SPAN style="FONT-SIZE: 18.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>defined in the main program.)</SPAN></FONT></P></BODY>