<SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">If </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">symbol </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">is the name of a function, then the pointer returned by </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">can be used to call the function. We can store the value returned by </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">in a pointer of the appropriate type, such as the following:</SPAN> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">1int</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"> (*<SPAN style="COLOR: #6060ff">funcp</SPAN>)(<SPAN style="COLOR: #00bf00">int</SPAN>); <SPAN style="COLOR: #bf0000">/* Pointer to a function taking an integer</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #bf0000; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>argument and returning an integer */</SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">However, we can&#8217;t simply assign the result of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">to such a pointer, as in the following example:</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">funcp = dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">The reason is that the C99 standard forbids assignment between a function pointer and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">void *</SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">. The solution is to use the following (somewhat clumsy) cast:</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">1</SPAN><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">*(<SPAN style="COLOR: #00bf00">void</SPAN> **) (&amp;funcp) = dlsym(handle, symbol);</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Having used </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">to obtain a pointer to the function, we can then call the function using the usual C syntax for dereferencing function pointers:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">1</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">res = (*funcp)(somearg);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Instead of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">*(void **) </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">syntax shown above, one might consider using the following seemingly equivalent code when assigning the return value of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">:</SPAN></P>
<P><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">1</SPAN><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">(<SPAN style="COLOR: #00bf00">void</SPAN> *) funcp = dlsym(handle, symbol);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">However, for this code, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">gcc &#8211;pedantic </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">warns that &#8220;ANSI C forbids the use of cast expressions as lvalues.&#8221; The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">*(void **) </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">syntax doesn&#8217;t incur this warning because we are assigning to an address </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">pointed to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">by the assignment&#8217;s lvalue.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>On many UNIX implementations, we can use casts such as the following to eliminate warnings from the C compiler:</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">1</SPAN><SPAN lang=DA style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA">funcp = (<SPAN style="COLOR: #00bf00">int</SPAN> (*) (<SPAN style="COLOR: #00bf00">int</SPAN>)) dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">However, the specification of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">in SUSv3 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">Technical Corrigendum Number 1 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">notes that the C99 standard nevertheless requires compilers to generate a warning for such a conversion, and proposes the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">*(void **) </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">syntax shown above.</SPAN></FONT></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><EM><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">SUSv3 TC1 noted that because of the need for the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 22pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">*(void **) </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">syntax, a future version of the standard may define separate </SPAN><SPAN lang=EN-US style="FONT-SIZE: 22pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlsym()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">-like APIs for handling data and function pointers. However, SUSv4 contains no changes with respect to this point.</SPAN></EM>