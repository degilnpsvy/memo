<H2 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 25pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt"><FONT face=Arial>42.7 Summary</FONT></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">The dynamic linker provides the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlopen </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">API, which allows programs to explicitly load additional shared libraries at run time. This allows programs to implement plug-in functionality.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>An important aspect of shared library design is controlling symbol visibility, so that the library exports only those symbols (functions and variables) that should actually be used by programs linked against the library. We looked at a range of techniques that can be used to control symbol visibility. Among these techniques was the use of version scripts, which provide fine-grained control of symbol visibility.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>We also showed how version scripts can be used to implement a scheme that allows a single shared library to export multiple definitions of a symbol for use by different applications linked against the library. (Each application uses the definition that was current when the application was statically linked against the library.) This technique provides an alternative to the traditional library versioning approach of using major and minor version numbers in the shared library real name.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt"><FONT class=extract>Defining initialization and finalization functions within a shared library allows us to automatically execute code when the library is loaded and unloaded.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">LD_PRELOAD </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">environment variable allows us to preload shared libraries. Using this mechanism, we can selectively override functions and other symbols that the dynamic linker would normally find in other shared libraries.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">We can assign various values to the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">LD_DEBUG </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">environment variable in order to monitor the operation of the dynamic linker.</SPAN></FONT>