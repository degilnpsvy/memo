<H2 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 25pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt"><FONT face=Arial>42.2 Controlling Symbol Visibility</FONT></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">A well-designed shared library should make visible only those symbols (functions and variables) that form part of its specified application binary interface (ABI). The reasons for this are as follows:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">If the shared library designer accidentally exports unspecified interfaces, then authors of applications that use the library may choose to employ these interfaces. This creates a compatibility problem for future upgrades of the shared library. The library developer expects to be able to change or remove any interfaces other than those in the documented ABI, while the library user expects to continue using the same interfaces (with the same semantics) that they currently employ.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">During run-time symbol resolution, any symbols that are exported by a shared library might interpose definitions that are provided in other shared libraries (Section 41.12).</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Exporting unnecessary symbols increases the size of the dynamic symbol table that must be loaded at run time.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">All of these problems can be minimized or avoided altogether if the library designer ensures that only the symbols required by the library&#8217;s specified ABI are exported. The following techniques can be used to control the export of symbols:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">In a C program, we can use the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-hansi-font-family: Futura-CondensedBold">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword to make a symbol private to a source-code module, thus rendering it unavailable for binding by other object files.</SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt"><EM><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">As well as making a symbol private to a source-code module, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword also has a converse effect. If a symbol is marked as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">, then all references to the symbol in the same source file will be bound to that definition of the symbol. Consequently, these references won&#8217;t be subject to run-time interposition by definitions from other shared libraries (in the manner described in Section 41.12). This effect of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword is similar to the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 22pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">&#8211;Bsymbolic </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">linker option described in Section 41.12, with the difference that the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword affects a single symbol within a single source file.</SPAN></EM></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">The GNU C complier, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">gcc</SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">, provides a compiler-specific attribute declaration that performs a similar task to the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword:</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">1void</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #40ffff; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">__attribute__</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"> ((visibility(<SPAN style="COLOR: #00bf00">"hidden"</SPAN>)))</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">3</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #6060ff; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">func</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">(<SPAN style="COLOR: #00bf00">void</SPAN>) {</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">4</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">/* Code */</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">5</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">}</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Whereas the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword limits the visibility of a symbol to a single source code file, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">hidden </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">attribute makes the symbol available across all source code files that compose the shared library, but prevents it from being visible outside the library.</SPAN></P>
<P class=a style="MARGIN: 0cm 10.5pt 0pt 31.5pt; mso-para-margin-top: 0cm; mso-para-margin-right: 10.5pt; mso-para-margin-bottom: .0001pt; mso-para-margin-left: 3.0gd"><EM><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">As with the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">static </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">keyword, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">hidden </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">attribute also has the converse effect of preventing symbol interposition at run time.</SPAN></EM></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">Version scripts (Section 42.3) can be used to precisely control symbol visibility and to select the version of a symbol to which a reference is bound.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings"><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">When dynamically loading a shared library (Section 42.1.1), the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">dlopen() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 20pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain">RTLD_GLOBAL </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">flag can be used to specify that the symbols defined by the library should be made available for binding by subsequently loaded libraries, and the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: NewBaskervilleEF-RomanIta; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta">&#8211;&#8211;export&#8211;dynamic </SPAN><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">linker option (Section 42.1.6) can be used to make the global symbols of the main program available to dynamically loaded libraries.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">For further details on the topic of symbol visibility, see [Drepper, 2004 (b)].</SPAN>