<H3 style="MARGIN: 13pt 0cm"><SPAN style="LINE-HEIGHT: 173%; FONT-SIZE: 25pt; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt" lang=EN-US>42.1.3 Obtaining the Address of a Symbol: </SPAN><SPAN style="LINE-HEIGHT: 173%; FONT-FAMILY: NewBaskervilleEF-BoldIta; FONT-SIZE: 72pt; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-BoldIta" lang=EN-US>dlsym()</SPAN></H3>
<P><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>function searches for the named </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>(a function or variable) in the library referred to by </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>handle </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>and in the libraries in that library&#8217;s dependency tree.</SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>#include &lt;dlfcn.h&gt;</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><EM><FONT class=extract><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>void *</SPAN><B><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Bold; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Bold" lang=EN-US>dlsym</SPAN></B><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>(void *</SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>handle</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, char *</SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>);</SPAN></FONT></EM></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><EM><FONT class=extract><SPAN style="FONT-FAMILY: NewBaskervilleEF-Roman; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>Returns address of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol</SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-Roman; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>, or </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>NULL </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-Roman; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>if </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-Roman; FONT-SIZE: 24pt; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-Roman" lang=EN-US>is not found</SPAN></FONT></EM></P>
<P><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>If </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>is found, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>returns its address; otherwise, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 20pt; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>NULL</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>. The </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>handle </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>argument is normally a library handle returned by a previous call to </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlopen()</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>. Alternatively, it may be one of the so-called pseudohandles described below.</SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><EM><FONT class=extract><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>A related function, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlvsym(handle, symbol, version)</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, is similar to </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym()</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, but can be used to search a symbol-versioned library for a symbol definition whose version matches the string specified in </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>version</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>. (We describe symbol versioning in Section 42.3.2.) The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 20pt; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>_GNU_SOURCE </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>feature test macro must be defined in order to obtain the declaration of this function from </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 20pt; mso-bidi-font-size: 8.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>&lt;dlfcn.h&gt;</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></EM></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The value of a symbol returned by </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>may be </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 20pt; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>NULL</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, which is indistinguishable from the &#8220;symbol not found&#8221; return. In order to differentiate the two possibilities, we must call </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlerror() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>beforehand (to make sure that any previously held error string is cleared) and then if, after the call to </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym()</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlerror() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>returns a non-</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 20pt; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>NULL </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>value, we know that an error occurred.</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>If </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>is the name of a variable, then we can assign the return value of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>to an appropriate pointer type, and obtain the value of the variable by dereferencing the pointer:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1int</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US> *<SPAN style="COLOR: #bfbf00">ip</SPAN>;</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>2</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>ip = (<SPAN style="COLOR: #00bf00">int</SPAN> *) dlsym(symbol, <SPAN style="COLOR: #00bf00">"myvar"</SPAN>);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>3</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #40ffff; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>if</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US> (ip != <SPAN style="COLOR: #bf00bf">NULL</SPAN>)</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>4</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>printf(<SPAN style="COLOR: #00bf00">"Value is %d\n"</SPAN>, *ip);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>If </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>symbol </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>is the name of a function, then the pointer returned by </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>can be used to call the function. We can store the value returned by </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>in a pointer of the appropriate type, such as the following:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1int</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US> (*<SPAN style="COLOR: #6060ff">funcp</SPAN>)(<SPAN style="COLOR: #00bf00">int</SPAN>); <SPAN style="COLOR: #bf0000">/* Pointer to a function taking an integer</SPAN></SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>2</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #bf0000; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>argument and returning an integer */</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>However, we can&#8217;t simply assign the result of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>to such a pointer, as in the following example:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>funcp = dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The reason is that the C99 standard forbids assignment between a function pointer and </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>void *</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>. The solution is to use the following (somewhat clumsy) cast:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>*(<SPAN style="COLOR: #00bf00">void</SPAN> **) (&amp;funcp) = dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>Having used </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>to obtain a pointer to the function, we can then call the function using the usual C syntax for dereferencing function pointers:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'" lang=EN-US>res = (*funcp)(somearg);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>Instead of the </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>*(void **) </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>syntax shown above, one might consider using the following seemingly equivalent code when assigning the return value of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym()</SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>(<SPAN style="COLOR: #00bf00">void</SPAN> *) funcp = dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>However, for this code, </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>gcc &#8211;pedantic </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>warns that &#8220;ANSI C forbids the use of cast expressions as lvalues.&#8221; The </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>*(void **) </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>syntax doesn&#8217;t incur this warning because we are assigning to an address </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>pointed to </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>by the assignment&#8217;s lvalue.</SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>On many UNIX implementations, we can use casts such as the following to eliminate warnings from the C compiler:</FONT></SPAN></P>
<P><FONT class=extract><SPAN style="FONT-FAMILY: 'Lucida Console'; COLOR: #00bf00; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>1</SPAN><SPAN style="FONT-FAMILY: 'Lucida Console'; FONT-SIZE: 18pt; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'; mso-ansi-language: DA" lang=DA>funcp = (<SPAN style="COLOR: #00bf00">int</SPAN> (*) (<SPAN style="COLOR: #00bf00">int</SPAN>)) dlsym(handle, symbol);</SPAN></FONT></P>
<P><FONT class=extract><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>However, the specification of </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym() </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>in SUSv3 </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>Technical Corrigendum Number 1 </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>notes that the C99 standard nevertheless requires compilers to generate a warning for such a conversion, and proposes the </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 26pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>*(void **) </SPAN><SPAN style="FONT-SIZE: 19.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>syntax shown above.</SPAN></FONT></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><EM><FONT class=extract><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>SUSv3 TC1 noted that because of the need for the </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>*(void **) </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>syntax, a future version of the standard may define separate </SPAN><SPAN style="FONT-FAMILY: NewBaskervilleEF-RomanIta; FONT-SIZE: 22pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>dlsym()</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>-like APIs for handling data and function pointers. However, SUSv4 contains no changes with respect to this point.</SPAN></FONT></EM>