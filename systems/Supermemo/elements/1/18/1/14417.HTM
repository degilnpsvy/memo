<H4 class=subsection>5.7.3 Communicating Options to a Sub-<CODE>make</CODE></H4>
<P><A name=index-options_002c-and-recursion-412></A><A name=index-recursion_002c-and-options-413></A><A name=index-MAKEFLAGS-414></A><FONT class=extract>Flags such as &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; are passed automatically to the sub-<CODE>make</CODE> through the variable <CODE>MAKEFLAGS</CODE>. This variable is set up automatically by <CODE>make</CODE> to contain the flag letters that <CODE>make</CODE> received. Thus, if you do &#8216;<SAMP><SPAN class=samp>make&nbsp;-ks</SPAN></SAMP>&#8217;<!-- /@w --> then <CODE>MAKEFLAGS</CODE> gets the value &#8216;<SAMP><SPAN class=samp>ks</SPAN></SAMP>&#8217;.</FONT> 
<P>As a consequence, every sub-<CODE>make</CODE> gets a value for <CODE>MAKEFLAGS</CODE> in its environment. In response, it takes the flags from that value and processes them as if they had been given as arguments. See <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Summary of Options</A>. 
<P><A name=index-command-line-variable-definitions_002c-and-recursion-415></A><A name=index-variables_002c-command-line_002c-and-recursion-416></A><A name=index-recursion_002c-and-command-line-variable-definitions-417></A><FONT class=extract>Likewise variables defined on the command line are passed to the sub-<CODE>make</CODE> through <CODE>MAKEFLAGS</CODE>. Words in the value of <CODE>MAKEFLAGS</CODE> that contain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, <CODE>make</CODE> treats as variable definitions just as if they appeared on the command line. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_0040code_007b_002dC_007d_002c-and-recursion-418></A><A name=index-g_t_0040code_007b_002df_007d_002c-and-recursion-419></A><A name=index-g_t_0040code_007b_002do_007d_002c-and-recursion-420></A><A name=index-g_t_0040code_007b_002dW_007d_002c-and-recursion-421></A><A name=index-g_t_0040code_007b_002d_002ddirectory_007d_002c-and-recursion-422></A><A name=index-g_t_0040code_007b_002d_002dfile_007d_002c-and-recursion-423></A><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d_002c-and-recursion-424></A><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d_002c-and-recursion-425></A><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d_002c-and-recursion-426></A><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d_002c-and-recursion-427></A><A name=index-recursion_002c-and-_0040code_007b_002dC_007d-428></A><A name=index-recursion_002c-and-_0040code_007b_002df_007d-429></A><A name=index-recursion_002c-and-_0040code_007b_002do_007d-430></A><A name=index-recursion_002c-and-_0040code_007b_002dW_007d-431></A><FONT class=extract>The options &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; are not put into <CODE>MAKEFLAGS</CODE>; these options are not passed down.</FONT> 
<P><A name=index-g_t_0040code_007b_002dj_007d_002c-and-recursion-432></A><A name=index-g_t_0040code_007b_002d_002djobs_007d_002c-and-recursion-433></A><A name=index-recursion_002c-and-_0040code_007b_002dj_007d-434></A><A name=index-job-slots_002c-and-recursion-435></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is a special case (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>). If you set it to some numeric value &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; and your operating system supports it (most any UNIX system will; others typically won't), the parent <CODE>make</CODE> and all the sub-<CODE>make</CODE>s will communicate to ensure that there are only &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; jobs running at the same time between them all. Note that any job that is marked recursive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>) doesn't count against the total jobs (otherwise we could get &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; sub-<CODE>make</CODE>s running and have no slots left over for any real work!)</FONT> 
<P><FONT class=extract>If your operating system doesn't support the above communication, then &#8216;<SAMP><SPAN class=samp>-j 1</SPAN></SAMP>&#8217; is always put into <CODE>MAKEFLAGS</CODE> instead of the value you specified. This is because if the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217;<!-- /@w --> option were passed down to sub-<CODE>make</CODE>s, you would get many more jobs running in parallel than you asked for. If you give &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; with no numeric argument, meaning to run as many jobs as posasible in parallel, this is passed down, since multiple infinities are no more than one.</FONT> 
<P><FONT class=extract>If you do not want to pass the other flags down, you must change the value of <CODE>MAKEFLAGS</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=
</FONT></PRE>
<P><A name=index-MAKEOVERRIDES-436></A><FONT class=extract>The command line variable definitions really appear in the variable <CODE>MAKEOVERRIDES</CODE>, and <CODE>MAKEFLAGS</CODE> contains a reference to this variable. If you do want to pass flags down normally, but don't want to pass down the command line variable definitions, you can reset <CODE>MAKEOVERRIDES</CODE> to empty, like this: </FONT><PRE class=example><FONT class=extract>     MAKEOVERRIDES =
</FONT></PRE>
<P class=noindent><A name=index-Arg-list-too-long-437></A><A name=index-E2BIG-438></A><FONT class=extract>This is not usually useful to do. However, some systems have a small fixed limit on the size of the environment, and putting so much information into the value of <CODE>MAKEFLAGS</CODE> can exceed it. If you see the error message &#8216;<SAMP><SPAN class=samp>Arg list too long</SPAN></SAMP>&#8217;, this may be the problem. </FONT><A name=index-g_t_002ePOSIX-439></A><A name=index-POSIX-440></A><FONT class=extract>(For strict compliance with POSIX.2, changing <CODE>MAKEOVERRIDES</CODE> does not affect <CODE>MAKEFLAGS</CODE> if the special target &#8216;<SAMP><SPAN class=samp>.POSIX</SPAN></SAMP>&#8217; appears in the makefile. You probably do not care about this.)</FONT> 
<P><A name=index-MFLAGS-441></A><FONT class=extract>A similar variable <CODE>MFLAGS</CODE> exists also, for historical compatibility. It has the same value as <CODE>MAKEFLAGS</CODE> except that it does not contain the command line variable definitions, and it always begins with a hyphen unless it is empty (<CODE>MAKEFLAGS</CODE> begins with a hyphen only when it begins with an option that has no single-letter version, such as &#8216;<SAMP><SPAN class=samp>--warn-undefined-variables</SPAN></SAMP>&#8217;). <CODE>MFLAGS</CODE> was traditionally used explicitly in the recursive <CODE>make</CODE> command, like this: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE) $(MFLAGS)
</FONT></PRE>
<P class=noindent><FONT class=extract>but now <CODE>MAKEFLAGS</CODE> makes this usage redundant. If you want your makefiles to be compatible with old <CODE>make</CODE> programs, use this technique; it will work fine with more modern <CODE>make</CODE> versions too. </FONT>
<P><A name=index-setting-options-from-environment-442></A><A name=index-options_002c-setting-from-environment-443></A><A name=index-setting-options-in-makefiles-444></A><A name=index-options_002c-setting-in-makefiles-445></A><FONT class=extract>The <CODE>MAKEFLAGS</CODE> variable can also be useful if you want to have certain options, such as &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>), set each time you run <CODE>make</CODE>. You simply put a value for <CODE>MAKEFLAGS</CODE> in your environment. You can also set <CODE>MAKEFLAGS</CODE> in a makefile, to specify additional flags that should also be in effect for that makefile. (Note that you cannot use <CODE>MFLAGS</CODE> this way. That variable is set only for compatibility; <CODE>make</CODE> does not interpret a value you set for it in any way.) </FONT>
<P><FONT class=extract>When <CODE>make</CODE> interprets the value of <CODE>MAKEFLAGS</CODE> (either from the environment or from a makefile), it first prepends a hyphen if the value does not already begin with one. Then it chops the value into words separated by blanks, and parses these words as if they were options given on the command line (except that &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217;, and their long-named versions are ignored; and there is no error for an invalid option). </FONT>
<P><FONT class=extract>If you do put <CODE>MAKEFLAGS</CODE> in your environment, you should be sure not to include any options that will drastically affect the actions of <CODE>make</CODE> and undermine the purpose of makefiles and of <CODE>make</CODE> itself. For instance, the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; options, if put in one of these variables, could have disastrous consequences and would certainly have at least surprising and probably annoying effects. </FONT>
<P><FONT class=extract>If you'd like to run other implementations of <CODE>make</CODE> in addition to GNU <CODE>make</CODE>, and hence do not want to add GNU <CODE>make</CODE>-specific flags to the <CODE>MAKEFLAGS</CODE> variable, you can add them to the <CODE>GNUMAKEFLAGS</CODE> variable instead. This variable is parsed just before <CODE>MAKEFLAGS</CODE>, in the same way as <CODE>MAKEFLAGS</CODE>. When <CODE>make</CODE> constructs <CODE>MAKEFLAGS</CODE> to pass to a recursive <CODE>make</CODE> it will include all flags, even those taken from <CODE>GNUMAKEFLAGS</CODE>. As a result, after parsing <CODE>GNUMAKEFLAGS</CODE> GNU <CODE>make</CODE> sets this variable to the empty string to avoid duplicating flags during recursion.</FONT> 
<P>It's best to use <CODE>GNUMAKEFLAGS</CODE> only with flags which won't materially change the behavior of your makefiles. If your makefiles require GNU make anyway then simply use <CODE>MAKEFLAGS</CODE>. Flags such as &#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--output-sync</SPAN></SAMP>&#8217; may be appropriate for <CODE>GNUMAKEFLAGS</CODE>.