<H4 class=subsection>5.7.2 Communicating Variables to a Sub-<CODE>make</CODE></H4>
<P><A name=index-sub_002d_0040code_007bmake_007d-397></A><A name=index-environment_002c-and-recursion-398></A><A name=index-exporting-variables-399></A><A name=index-variables_002c-environment-400></A><A name=index-variables_002c-exporting-401></A><A name=index-recursion_002c-and-environment-402></A><A name=index-recursion_002c-and-variables-403></A><FONT class=extract>Variable values of the top-level <CODE>make</CODE> can be passed to the sub-<CODE>make</CODE> through the environment by explicit request. These variables are defined in the sub-<CODE>make</CODE> as defaults, but they do not override variables defined in the makefile used by the sub-<CODE>make</CODE> unless you use the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; switch (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>).</FONT> 
<P><FONT class=extract>To pass down, or <DFN>export</DFN>, a variable, <CODE>make</CODE> adds the variable and its value to the environment for running each line of the recipe. The sub-<CODE>make</CODE>, in turn, uses the environment to initialize its table of variable values. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>.</FONT> 
<P><FONT class=extract>Except by explicit request, <CODE>make</CODE> exports a variable only if it is either defined in the environment initially or set on the command line, and if its name consists only of letters, numbers, and underscores. Some shells cannot cope with environment variable names consisting of characters other than letters, numbers, and underscores.</FONT> 
<P><A name=index-SHELL_002c-exported-value-404></A><FONT class=extract>The value of the <CODE>make</CODE> variable <CODE>SHELL</CODE> is not exported. Instead, the value of the <CODE>SHELL</CODE> variable from the invoking environment is passed to the sub-<CODE>make</CODE>. You can force <CODE>make</CODE> to export its value for <CODE>SHELL</CODE> by using the <CODE>export</CODE> directive, described below. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell"><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>.</FONT> 
<P><FONT class=extract>The special variable <CODE>MAKEFLAGS</CODE> is always exported (unless you unexport it). <CODE>MAKEFILES</CODE> is exported if you set it to anything.</FONT> 
<P><FONT class=extract><CODE>make</CODE> automatically passes down variable values that were defined on the command line, by putting them in the <CODE>MAKEFLAGS</CODE> variable. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Options/Recursion</FONT></A><FONT class=extract>.</FONT> 
<P><FONT class=extract>Variables are <EM>not</EM> normally passed down if they were created by default by <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>). The sub-<CODE>make</CODE> will define these for itself.</FONT> 
<P><A name=index-export-405></A><FONT class=extract>If you want to export specific variables to a sub-<CODE>make</CODE>, use the <CODE>export</CODE> directive, like this: </FONT><PRE class=example><FONT class=extract><FONT class=extract>     export <VAR>variable</VAR> ...</FONT>
</FONT></PRE>
<P class=noindent><A name=index-unexport-406></A><FONT class=extract>If you want to <EM>prevent</EM> a variable from being exported, use the <CODE>unexport</CODE> directive, like this: </FONT><PRE class=example><FONT class=extract>     unexport <VAR>variable</VAR> ...
</FONT></PRE>
<P class=noindent><FONT class=extract>In both of these forms, the arguments to <CODE>export</CODE> and <CODE>unexport</CODE> are expanded, and so could be variables or functions which expand to a (list of) variable names to be (un)exported.</FONT> 
<P><FONT class=extract>As a convenience, you can define a variable and export it at the same time by doing: </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> = value
</FONT></PRE>
<P class=noindent><FONT class=extract>has the same result as: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> = value
     export <VAR>variable</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>and </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> := value
</FONT></PRE>
<P class=noindent><FONT class=extract>has the same result as: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> := value
     export <VAR>variable</VAR>
</FONT></PRE>
<P><FONT class=extract>Likewise, </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> += value
</FONT></PRE>
<P class=noindent><FONT class=extract>is just like: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> += value
     export <VAR>variable</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Appending"><FONT class=extract>Appending More Text to Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>You may notice that the <CODE>export</CODE> and <CODE>unexport</CODE> directives work in <CODE>make</CODE> in the same way they work in the shell, <CODE>sh</CODE>. </FONT>
<P><FONT class=extract>If you want all variables to be exported by default, you can use <CODE>export</CODE> by itself: </FONT><PRE class=example><FONT class=extract>     export
</FONT></PRE>
<P class=noindent><FONT class=extract>This tells <CODE>make</CODE> that variables which are not explicitly mentioned in an <CODE>export</CODE> or <CODE>unexport</CODE> directive should be exported. Any variable given in an <CODE>unexport</CODE> directive will still <EM>not</EM> be exported. If you use <CODE>export</CODE> by itself to export variables by default, variables whose names contain characters other than alphanumerics and underscores will not be exported unless specifically mentioned in an <CODE>export</CODE> directive. </FONT>
<P><A name=index-g_t_002eEXPORT_005fALL_005fVARIABLES-407></A>The behavior elicited by an <CODE>export</CODE> directive by itself was the default in older versions of GNU <CODE>make</CODE>. If your makefiles depend on this behavior and you want to be compatible with old versions of <CODE>make</CODE>, you can write a rule for the special target <CODE>.EXPORT_ALL_VARIABLES</CODE> instead of using the <CODE>export</CODE> directive. This will be ignored by old <CODE>make</CODE>s, while the <CODE>export</CODE> directive will cause a syntax error. <A name=index-compatibility-in-exporting-408></A><FONT class=extract>Likewise, you can use <CODE>unexport</CODE> by itself to tell <CODE>make</CODE> <EM>not</EM> to export variables by default. Since this is the default behavior, you would only need to do this if <CODE>export</CODE> had been used by itself earlier (in an included makefile, perhaps). You <STRONG>cannot</STRONG> use <CODE>export</CODE> and <CODE>unexport</CODE> by themselves to have variables exported for some recipes and not for others. The last <CODE>export</CODE> or <CODE>unexport</CODE> directive that appears by itself determines the behavior for the entire run of <CODE>make</CODE>. </FONT>
<P><A name=index-MAKELEVEL-409></A><A name=index-recursion_002c-level-of-410></A><FONT class=extract>As a special feature, the variable <CODE>MAKELEVEL</CODE> is changed when it is passed down from level to level. This variable's value is a string which is the depth of the level as a decimal number. The value is &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217; for the top-level <CODE>make</CODE>; &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217; for a sub-<CODE>make</CODE>, &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217; for a sub-sub-<CODE>make</CODE>, and so on. The incrementation happens when <CODE>make</CODE> sets up the environment for a recipe. </FONT>
<P><FONT class=extract>The main use of <CODE>MAKELEVEL</CODE> is to test it in a conditional directive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditional Parts of Makefiles</FONT></A><FONT class=extract>); this way you can write a makefile that behaves one way if run recursively and another way if run directly by you.</FONT> 
<P><A name=index-MAKEFILES-411></A><FONT class=extract>You can use the variable <CODE>MAKEFILES</CODE> to cause all sub-<CODE>make</CODE> commands to use additional makefiles. The value of <CODE>MAKEFILES</CODE> is a whitespace-separated list of file names. This variable, if defined in the outer-level makefile, is passed down through the environment; then it serves as a list of extra makefiles for the sub-<CODE>make</CODE> to read before the usual or specified ones. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable"><FONT class=extract>The Variable <CODE>MAKEFILES</CODE></FONT></A><FONT class=extract>.</FONT>