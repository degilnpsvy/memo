<H3 class=section>5.8 Defining Canned Recipes</H3>
<P><A name=index-canned-recipes-459></A><A name=index-recipes_002c-canned-460></A><A name=index-sequences-of-commands-461></A><A name=index-commands_002c-sequences-of-462></A><FONT class=extract>When the same sequence of commands is useful in making various targets, you can define it as a canned sequence with the <CODE>define</CODE> directive, and refer to the canned sequence from the recipes for those targets. The canned sequence is actually a variable, so the name must not conflict with other variable names.</FONT> 
<P><FONT class=extract>Here is an example of defining a canned recipe: </FONT><PRE class=example><FONT class=extract>     define run-yacc =
     yacc $(firstword $^)
     mv y.tab.c $@
     endef
</FONT></PRE>
<P><A name=index-g_t_0040code_007byacc_007d-463></A><FONT class=extract>Here <CODE>run-yacc</CODE> is the name of the variable being defined; <CODE>endef</CODE> marks the end of the definition; the lines in between are the commands. The <CODE>define</CODE> directive does not expand variable references and function calls in the canned sequence; the &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; characters, parentheses, variable names, and so on, all become part of the value of the variable you are defining. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>, for a complete explanation of <CODE>define</CODE>. </FONT>
<P><FONT class=extract>The first command in this example runs Yacc on the first prerequisite of whichever rule uses the canned sequence. The output file from Yacc is always named <SAMP><SPAN class=file>y.tab.c</SPAN></SAMP>. The second command moves the output to the rule's target file name. </FONT>
<P><FONT class=extract>To use the canned sequence, substitute the variable into the recipe of a rule. You can substitute it like any other variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>). Because variables defined by <CODE>define</CODE> are recursively expanded variables, all the variable references you wrote inside the <CODE>define</CODE> are expanded now. For example: </FONT><PRE class=example><FONT class=extract>     foo.c : foo.y
             $(run-yacc)
</FONT></PRE>
<P class=noindent><FONT class=extract>&#8216;<SAMP><SPAN class=samp>foo.y</SPAN></SAMP>&#8217; will be substituted for the variable &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; when it occurs in <CODE>run-yacc</CODE>'s value, and &#8216;<SAMP><SPAN class=samp>foo.c</SPAN></SAMP>&#8217; for &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>This is a realistic example, but this particular one is not needed in practice because <CODE>make</CODE> has an implicit rule to figure out these commands based on the file names involved (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0040_0040_002c-and-_0040code_007bdefine_007d-464></A><A name=index-g_t_002d_002c-and-_0040code_007bdefine_007d-465></A><A name=index-g_t_002b_002c-and-_0040code_007bdefine_007d-466></A><FONT class=extract>In recipe execution, each line of a canned sequence is treated just as if the line appeared on its own in the rule, preceded by a tab. In particular, <CODE>make</CODE> invokes a separate sub-shell for each line. You can use the special prefix characters that affect command lines (&#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217;) on each line of a canned sequence. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes"><FONT class=extract>Writing Recipes in Rules</FONT></A><FONT class=extract>. For example, using this canned sequence: </FONT><PRE class=example><FONT class=extract>     define frobnicate =
     @echo "frobnicating target $@"
     frob-step-1 $&lt; -o $@-step-1
     frob-step-2 $@-step-1 -o $@
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>make</CODE> will not echo the first line, the <CODE>echo</CODE> command. But it <EM>will</EM> echo the following two recipe lines. </FONT>
<P><FONT class=extract>On the other hand, prefix characters on the recipe line that refers to a canned sequence apply to every line in the sequence. So the rule: </FONT><PRE class=example><FONT class=extract>     frob.out: frob.in
             @$(frobnicate)
</FONT></PRE>
<P class=noindent><FONT class=extract>does not echo <EM>any</EM> recipe lines. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>, for a full explanation of &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;.)</FONT>