<H3 class=section>4.5 Searching Directories for Prerequisites</H3>
<P><A name=index-VPATH-171></A><A name=index-vpath-172></A><A name=index-vpath-173></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029-174></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029-175></A>For large systems, it is often desirable to put sources in a separate directory from the binaries. The <DFN>directory search</DFN> features of <CODE>make</CODE> facilitate this by searching several directories automatically to find a prerequisite. When you redistribute the files among directories, you do not need to change the individual rules, just the search paths. 
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#General-Search">General Search</A>: Specifying a search path that applies to every prerequisite. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A>: Specifying a search path for a specified class of names. 
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A>: When and how search paths are applied. 
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch">Recipes/Search</A>: How to write recipes that work together with search paths. 
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A>: How search paths affect implicit rules. 
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A>: Directory search for link libraries. </LI></UL>
<DIV class=node><A name=General-Search></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Selective-Search" rel=next>Selective Search</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=previous>Directory Search</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.1 <CODE>VPATH</CODE>: Search Path for All Prerequisites</FONT></H4>
<P><A name=index-VPATH-176></A><FONT class=extract>The value of the <CODE>make</CODE> variable <CODE>VPATH</CODE> specifies a list of directories that <CODE>make</CODE> should search. Most often, the directories are expected to contain prerequisite files that are not in the current directory; however, <CODE>make</CODE> uses <CODE>VPATH</CODE> as a search list for both prerequisites and targets of rules. </FONT>
<P><FONT class=extract>Thus, if a file that is listed as a target or prerequisite does not exist in the current directory, <CODE>make</CODE> searches the directories listed in <CODE>VPATH</CODE> for a file with that name. If a file is found in one of them, that file may become the prerequisite (see below). Rules may then specify the names of files in the prerequisite list as if they all existed in the current directory. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch"><FONT class=extract>Writing Recipes with Directory Search</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>In the <CODE>VPATH</CODE> variable, directory names are separated by colons or blanks. The order in which directories are listed is the order followed by <CODE>make</CODE> in its search. (On MS-DOS and MS-Windows, semi-colons are used as separators of directory names in <CODE>VPATH</CODE>, since the colon can be used in the pathname itself, after the drive letter.) </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     VPATH = src:../headers
</FONT></PRE>
<P class=noindent><FONT class=extract>specifies a path containing two directories, <SAMP><SPAN class=file>src</SPAN></SAMP> and <SAMP><SPAN class=file>../headers</SPAN></SAMP>, which <CODE>make</CODE> searches in that order. </FONT>
<P><FONT class=extract>With this value of <CODE>VPATH</CODE>, the following rule, </FONT><PRE class=example><FONT class=extract>     foo.o : foo.c
</FONT></PRE>
<P class=noindent><FONT class=extract>is interpreted as if it were written like this: </FONT><PRE class=example><FONT class=extract>     foo.o : src/foo.c
</FONT></PRE>
<P class=noindent><FONT class=extract>assuming the file <SAMP><SPAN class=file>foo.c</SPAN></SAMP> does not exist in the current directory but is found in the directory <SAMP><SPAN class=file>src</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Selective-Search></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm" rel=next>Search Algorithm</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#General-Search" rel=previous>General Search</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.2 The <CODE>vpath</CODE> Directive</FONT></H4>
<P><A name=index-vpath-177></A><FONT class=extract>Similar to the <CODE>VPATH</CODE> variable, but more selective, is the <CODE>vpath</CODE> directive (note lower case), which allows you to specify a search path for a particular class of file names: those that match a particular pattern. Thus you can supply certain search directories for one class of file names and other directories (or none) for other file names. </FONT>
<P><FONT class=extract>There are three forms of the <CODE>vpath</CODE> directive: </FONT>
<DL>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> <VAR>directories</VAR> </FONT>
<DD><FONT class=extract>Specify the search path <VAR>directories</VAR> for file names that match <VAR>pattern</VAR>. </FONT>
<P><FONT class=extract>The search path, <VAR>directories</VAR>, is a list of directories to be searched, separated by colons (semi-colons on MS-DOS and MS-Windows) or blanks, just like the search path used in the <CODE>VPATH</CODE> variable. <BR></FONT></P>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> </FONT>
<DD><FONT class=extract>Clear out the search path associated with <VAR>pattern</VAR>. <!-- Extra blank line makes sure this gets two lines. --><BR></FONT>
<DT><FONT class=extract><CODE>vpath</CODE> </FONT>
<DD><FONT class=extract>Clear all search paths previously specified with <CODE>vpath</CODE> directives. </FONT></DD></DL>
<P><FONT class=extract>A <CODE>vpath</CODE> pattern is a string containing a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. The string must match the file name of a prerequisite that is being searched for, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character matching any sequence of zero or more characters (as in pattern rules; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). For example, <CODE>%.h</CODE> matches files that end in <CODE>.h</CODE>. (If there is no &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, the pattern must match the prerequisite exactly, which is not useful very often.) </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bvpath_007d-178></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-179></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-180></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-181></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bvpath_007d-182></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in a <CODE>vpath</CODE> directive's pattern can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared to file names. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. </FONT>
<P><FONT class=extract>When a prerequisite fails to exist in the current directory, if the <VAR>pattern</VAR> in a <CODE>vpath</CODE> directive matches the name of the prerequisite file, then the <VAR>directories</VAR> in that directive are searched just like (and before) the directories in the <CODE>VPATH</CODE> variable. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     vpath %.h ../headers
</FONT></PRE>
<P class=noindent><FONT class=extract>tells <CODE>make</CODE> to look for any prerequisite whose name ends in <SAMP><SPAN class=file>.h</SPAN></SAMP> in the directory <SAMP><SPAN class=file>../headers</SPAN></SAMP> if the file is not found in the current directory. </FONT>
<P><FONT class=extract>If several <CODE>vpath</CODE> patterns match the prerequisite file's name, then <CODE>make</CODE> processes each matching <CODE>vpath</CODE> directive one by one, searching all the directories mentioned in each directive. <CODE>make</CODE> handles multiple <CODE>vpath</CODE> directives in the order in which they appear in the makefile; multiple directives with the same pattern are independent of each other. </FONT>
<P><FONT class=extract>Thus, </FONT><PRE class=example><FONT class=extract>     vpath %.c foo
     vpath %   blish
     vpath %.c bar
</FONT></PRE>
<P class=noindent><FONT class=extract>will look for a file ending in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; in <SAMP><SPAN class=file>foo</SPAN></SAMP>, then <SAMP><SPAN class=file>blish</SPAN></SAMP>, then <SAMP><SPAN class=file>bar</SPAN></SAMP>, while </FONT><PRE class=example><FONT class=extract>     vpath %.c foo:bar
     vpath %   blish
</FONT></PRE>
<P class=noindent><FONT class=extract>will look for a file ending in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; in <SAMP><SPAN class=file>foo</SPAN></SAMP>, then <SAMP><SPAN class=file>bar</SPAN></SAMP>, then <SAMP><SPAN class=file>blish</SPAN></SAMP>.</FONT> 
<DIV class=node><A name=Search-Algorithm></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch" rel=next>Recipes/Search</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Selective-Search" rel=previous>Selective Search</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.3 How Directory Searches are Performed</FONT></H4>
<P><A name=index-algorithm-for-directory-search-183></A><A name=index-directory-search-algorithm-184></A><FONT class=extract>When a prerequisite is found through directory search, regardless of type (general or selective), the pathname located may not be the one that <CODE>make</CODE> actually provides you in the prerequisite list. Sometimes the path discovered through directory search is thrown away. </FONT>
<P><FONT class=extract>The algorithm <CODE>make</CODE> uses to decide whether to keep or abandon a path found via directory search is as follows: </FONT>
<OL type=1>
<LI><FONT class=extract>If a target file does not exist at the path specified in the makefile, directory search is performed. </FONT>
<LI><FONT class=extract>If the directory search is successful, that path is kept and this file is tentatively stored as the target. </FONT>
<LI><FONT class=extract>All prerequisites of this target are examined using this same method. </FONT>
<LI><FONT class=extract>After processing the prerequisites, the target may or may not need to be rebuilt: </FONT>
<OL type=a>
<LI><FONT class=extract>If the target does <EM>not</EM> need to be rebuilt, the path to the file found during directory search is used for any prerequisite lists which contain this target. In short, if <CODE>make</CODE> doesn't need to rebuild the target then you use the path found via directory search. </FONT>
<LI><FONT class=extract>If the target <EM>does</EM> need to be rebuilt (is out-of-date), the pathname found during directory search is <EM>thrown away</EM>, and the target is rebuilt using the file name specified in the makefile. In short, if <CODE>make</CODE> must rebuild, then the target is rebuilt locally, not in the directory found via directory search. </FONT></LI></OL></LI></OL>
<P><FONT class=extract>This algorithm may seem complex, but in practice it is quite often exactly what you want. </FONT>
<P><A name=index-traditional-directory-search-_0028GPATH_0029-185></A><A name=index-directory-search_002c-traditional-_0028GPATH_0029-186></A><FONT class=extract>Other versions of <CODE>make</CODE> use a simpler algorithm: if the file does not exist, and it is found via directory search, then that pathname is always used whether or not the target needs to be built. Thus, if the target is rebuilt it is created at the pathname discovered during directory search. </FONT>
<P><A name=index-GPATH-187></A><FONT class=extract>If, in fact, this is the behavior you want for some or all of your directories, you can use the <CODE>GPATH</CODE> variable to indicate this to <CODE>make</CODE>. </FONT>
<P><FONT class=extract><CODE>GPATH</CODE> has the same syntax and format as <CODE>VPATH</CODE> (that is, a space- or colon-delimited list of pathnames). If an out-of-date target is found by directory search in a directory that also appears in <CODE>GPATH</CODE>, then that pathname is not thrown away. The target is rebuilt using the expanded path. </FONT>
<DIV class=node><A name=Recipes%2fSearch></A><A name=Recipes_002fSearch></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch" rel=next>Implicit/Search</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm" rel=previous>Search Algorithm</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.4 Writing Recipes with Directory Search</FONT></H4>
<P><A name=index-recipes_002c-and-directory-search-188></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-recipes-189></A><FONT class=extract>When a prerequisite is found in another directory through directory search, this cannot change the recipe of the rule; they will execute as written. Therefore, you must write the recipe with care so that it will look for the prerequisite in the directory where <CODE>make</CODE> finds it. </FONT>
<P><FONT class=extract>This is done with the <DFN>automatic variables</DFN> such as &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). For instance, the value of &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; is a list of all the prerequisites of the rule, including the names of the directories in which they were found, and the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the target. Thus: </FONT><PRE class=example><FONT class=extract>     foo.o : foo.c
             cc -c $(CFLAGS) $^ -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>(The variable <CODE>CFLAGS</CODE> exists so you can specify flags for C compilation by implicit rules; we use it here for consistency so it will affect all C compilations uniformly; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Often the prerequisites include header files as well, which you do not want to mention in the recipe. The automatic variable &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; is just the first prerequisite: </FONT><PRE class=example><FONT class=extract>     VPATH = src:../headers
     foo.o : foo.c defs.h hack.h
             cc -c $(CFLAGS) $&lt; -o $@</FONT>
</PRE>
<DIV class=node><A name=Implicit%2fSearch></A><A name=Implicit_002fSearch></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch" rel=next>Libraries/Search</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch" rel=previous>Recipes/Search</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.5 Directory Search and Implicit Rules</FONT></H4>
<P><A name=index-g_t_0040code_007bVPATH_007d_002c-and-implicit-rules-190></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-191></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-192></A><A name=index-implicit-rule_002c-and-directory-search-193></A><A name=index-implicit-rule_002c-and-_0040code_007bVPATH_007d-194></A><A name=index-rule_002c-implicit_002c-and-directory-search-195></A><A name=index-rule_002c-implicit_002c-and-_0040code_007bVPATH_007d-196></A><FONT class=extract>The search through the directories specified in <CODE>VPATH</CODE> or with <CODE>vpath</CODE> also happens during consideration of implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>For example, when a file <SAMP><SPAN class=file>foo.o</SPAN></SAMP> has no explicit rule, <CODE>make</CODE> considers implicit rules, such as the built-in rule to compile <SAMP><SPAN class=file>foo.c</SPAN></SAMP> if that file exists. If such a file is lacking in the current directory, the appropriate directories are searched for it. If <SAMP><SPAN class=file>foo.c</SPAN></SAMP> exists (or is mentioned in the makefile) in any of the directories, the implicit rule for C compilation is applied. </FONT>
<P><FONT class=extract>The recipes of implicit rules normally use automatic variables as a matter of necessity; consequently they will use the file names found by directory search with no extra effort. </FONT>
<DIV class=node><A name=Libraries%2fSearch></A><A name=Libraries_002fSearch></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch" rel=previous>Implicit/Search</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up>Directory Search</A> </DIV>
<H4 class=subsection><FONT class=extract>4.5.6 Directory Search for Link Libraries</FONT></H4>
<P><A name=index-link-libraries_002c-and-directory-search-197></A><A name=index-libraries-for-linking_002c-directory-search-198></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-199></A><A name=index-g_t_0040code_007bVPATH_007d_002c-and-link-libraries-200></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-201></A><A name=index-g_t_0040code_007b_002dl_007d-_0028library-search_0029-202></A><A name=index-link-libraries_002c-patterns-matching-203></A><A name=index-g_t_0040code_007b_002eLIBPATTERNS_007d_002c-and-link-libraries-204></A><A name=index-g_t_002eLIBPATTERNS-205></A><FONT class=extract>Directory search applies in a special way to libraries used with the linker. This special feature comes into play when you write a prerequisite whose name is of the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;. (You can tell something strange is going on here because the prerequisite is normally the name of a file, and the <EM>file name</EM> of a library generally looks like <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, not like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>When a prerequisite's name has the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;, <CODE>make</CODE> handles it specially by searching for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP>, and, if it is not found, for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP> in the current directory, in directories specified by matching <CODE>vpath</CODE> search paths and the <CODE>VPATH</CODE> search path, and then in the directories <SAMP><SPAN class=file>/lib</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/lib</SPAN></SAMP>, and <SAMP><VAR>prefix</VAR><SPAN class=file>/lib</SPAN></SAMP> (normally <SAMP><SPAN class=file>/usr/local/lib</SPAN></SAMP>, but MS-DOS/MS-Windows versions of <CODE>make</CODE> behave as if <VAR>prefix</VAR> is defined to be the root of the DJGPP installation tree). </FONT>
<P><FONT class=extract>For example, if there is a <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP> library on your system (and no <SAMP><SPAN class=file>/usr/lib/libcurses.so</SPAN></SAMP> file), then </FONT><PRE class=example><FONT class=extract>     foo : foo.c -lcurses
             cc $^ -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>would cause the command &#8216;<SAMP><SPAN class=samp>cc foo.c /usr/lib/libcurses.a -o foo</SPAN></SAMP>&#8217; to be executed when <SAMP><SPAN class=file>foo</SPAN></SAMP> is older than <SAMP><SPAN class=file>foo.c</SPAN></SAMP> or than <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Although the default set of files to be searched for is <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP> and <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, this is customizable via the <CODE>.LIBPATTERNS</CODE> variable. Each word in the value of this variable is a pattern string. When a prerequisite like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217; is seen, <CODE>make</CODE> will replace the percent in each pattern in the list with <VAR>name</VAR> and perform the above directory searches using each library file name. </FONT>
<P><FONT class=extract>The default value for <CODE>.LIBPATTERNS</CODE> is &#8216;<SAMP><SPAN class=samp>lib%.so lib%.a</SPAN></SAMP>&#8217;, which provides the default behavior described above. </FONT>
<P><FONT class=extract>You can turn off link library expansion completely by setting this variable to an empty value.</FONT>