<H3 class=section>4.9 Special Built-in Target Names</H3>
<P><A name=index-special-targets-221></A><A name=index-built_002din-special-targets-222></A><A name=index-targets_002c-built_002din-special-223></A>Certain names have special meanings if they appear as targets. <A name=index-g_t_002ePHONY-224></A>
<DL>
<DT><FONT class=extract><CODE>.PHONY</CODE> </FONT>
<DD><FONT class=extract>The prerequisites of the special target <CODE>.PHONY</CODE> are considered to be phony targets. When it is time to consider such a target, <CODE>make</CODE> will run its recipe unconditionally, regardless of whether a file with that name exists or what its last-modification time is. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002eSUFFIXES-225></A><BR></P>
<DT><FONT class=extract><CODE>.SUFFIXES</CODE> </FONT>
<DD><FONT class=extract>The prerequisites of the special target <CODE>.SUFFIXES</CODE> are the list of suffixes to be used in checking for suffix rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002eDEFAULT-226></A><BR></P>
<DT><FONT class=extract><CODE>.DEFAULT</CODE> </FONT>
<DD><FONT class=extract>The recipe specified for <CODE>.DEFAULT</CODE> is used for any target for which no rules are found (either explicit rules or implicit rules). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort"><FONT class=extract>Last Resort</FONT></A><FONT class=extract>. If a <CODE>.DEFAULT</CODE> recipe is specified, every file mentioned as a prerequisite, but not as a target in a rule, will have that recipe executed on its behalf. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search Algorithm</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002ePRECIOUS-227></A><BR></P>
<DT><FONT class=extract><CODE>.PRECIOUS</CODE> </FONT>
<DD><A name=index-precious-targets-228></A><A name=index-preserving-with-_0040code_007b_002ePRECIOUS_007d-229></A><FONT class=extract>The targets which <CODE>.PRECIOUS</CODE> depends on are given the following special treatment: if <CODE>make</CODE> is killed or interrupted during the execution of their recipes, the target is not deleted. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts"><FONT class=extract>Interrupting or Killing <CODE>make</CODE></FONT></A><FONT class=extract>. Also, if the target is an intermediate file, it will not be deleted after it is no longer needed, as is normally done. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. In this latter respect it overlaps with the <CODE>.SECONDARY</CODE> special target. </FONT>
<P><FONT class=extract>You can also list the target pattern of an implicit rule (such as &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217;) as a prerequisite file of the special target <CODE>.PRECIOUS</CODE> to preserve intermediate files created by rules whose target patterns match that file's name. </FONT>
<P><A name=index-g_t_002eINTERMEDIATE-230></A><BR></P>
<DT><FONT class=extract><CODE>.INTERMEDIATE</CODE> </FONT>
<DD><A name=index-intermediate-targets_002c-explicit-231></A><FONT class=extract>The targets which <CODE>.INTERMEDIATE</CODE> depends on are treated as intermediate files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. <CODE>.INTERMEDIATE</CODE> with no prerequisites has no effect.</FONT> 
<P><A name=index-g_t_002eSECONDARY-232></A><BR></P>
<DT><FONT class=extract><CODE>.SECONDARY</CODE> </FONT>
<DD><A name=index-secondary-targets-233></A><A name=index-preserving-with-_0040code_007b_002eSECONDARY_007d-234></A><FONT class=extract>The targets which <CODE>.SECONDARY</CODE> depends on are treated as intermediate files, except that they are never automatically deleted. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract><CODE>.SECONDARY</CODE> with no prerequisites causes all targets to be treated as secondary (i.e., no target is removed because it is considered intermediate). </FONT>
<P><A name=index-g_t_002eSECONDEXPANSION-235></A><BR></P>
<DT><FONT class=extract><CODE>.SECONDEXPANSION</CODE> </FONT>
<DD><FONT class=extract>If <CODE>.SECONDEXPANSION</CODE> is mentioned as a target anywhere in the makefile, then all prerequisite lists defined <EM>after</EM> it appears will be expanded a second time after all makefiles have been read in. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002eDELETE_005fON_005fERROR-236></A><BR></P>
<DT><FONT class=extract><CODE>.DELETE_ON_ERROR</CODE> </FONT>
<DD><A name=index-removing-targets-on-failure-237></A><FONT class=extract>If <CODE>.DELETE_ON_ERROR</CODE> is mentioned as a target anywhere in the makefile, then <CODE>make</CODE> will delete the target of a rule if it has changed and its recipe exits with a nonzero exit status, just as it does when it receives a signal. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002eIGNORE-238></A><BR></P>
<DT><FONT class=extract><CODE>.IGNORE</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.IGNORE</CODE>, then <CODE>make</CODE> will ignore errors in execution of the recipe for those particular files. The recipe for <CODE>.IGNORE</CODE> (if any) is ignored. </FONT>
<P><FONT class=extract>If mentioned as a target with no prerequisites, <CODE>.IGNORE</CODE> says to ignore errors in execution of recipes for all files. This usage of &#8216;<SAMP><SPAN class=samp>.IGNORE</SPAN></SAMP>&#8217; is supported only for historical compatibility. Since this affects every recipe in the makefile, it is not very useful; we recommend you use the more selective ways to ignore errors in specific recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eLOW_005fRESOLUTION_005fTIME-239></A><BR></P>
<DT><FONT class=extract><CODE>.LOW_RESOLUTION_TIME</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.LOW_RESOLUTION_TIME</CODE>, <SAMP><SPAN class=command>make</SPAN></SAMP> assumes that these files are created by commands that generate low resolution time stamps. The recipe for the <CODE>.LOW_RESOLUTION_TIME</CODE> target are ignored. </FONT>
<P><FONT class=extract>The high resolution file time stamps of many modern file systems lessen the chance of <SAMP><SPAN class=command>make</SPAN></SAMP> incorrectly concluding that a file is up to date. Unfortunately, some hosts do not provide a way to set a high resolution file time stamp, so commands like &#8216;<SAMP><SPAN class=samp>cp -p</SPAN></SAMP>&#8217; that explicitly set a file's time stamp must discard its sub-second part. If a file is created by such a command, you should list it as a prerequisite of <CODE>.LOW_RESOLUTION_TIME</CODE> so that <SAMP><SPAN class=command>make</SPAN></SAMP> does not mistakenly conclude that the file is out of date. For example: </FONT><PRE class=example><FONT class=extract>          .LOW_RESOLUTION_TIME: dst
          dst: src
                  cp -p src dst
</FONT></PRE>
<P><FONT class=extract>Since &#8216;<SAMP><SPAN class=samp>cp -p</SPAN></SAMP>&#8217; discards the sub-second part of <SAMP><SPAN class=file>src</SPAN></SAMP>'s time stamp, <SAMP><SPAN class=file>dst</SPAN></SAMP> is typically slightly older than <SAMP><SPAN class=file>src</SPAN></SAMP> even when it is up to date. The <CODE>.LOW_RESOLUTION_TIME</CODE> line causes <SAMP><SPAN class=command>make</SPAN></SAMP> to consider <SAMP><SPAN class=file>dst</SPAN></SAMP> to be up to date if its time stamp is at the start of the same second that <SAMP><SPAN class=file>src</SPAN></SAMP>'s time stamp is in. </FONT>
<P><FONT class=extract>Due to a limitation of the archive format, archive member time stamps are always low resolution. You need not list archive members as prerequisites of <CODE>.LOW_RESOLUTION_TIME</CODE>, as <SAMP><SPAN class=command>make</SPAN></SAMP> does this automatically. </FONT>
<P><A name=index-g_t_002eSILENT-240></A><BR></P>
<DT><FONT class=extract><CODE>.SILENT</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.SILENT</CODE>, then <CODE>make</CODE> will not print the recipe used to remake those particular files before executing them. The recipe for <CODE>.SILENT</CODE> is ignored. </FONT>
<P><FONT class=extract>If mentioned as a target with no prerequisites, <CODE>.SILENT</CODE> says not to print any recipes before executing them. This usage of &#8216;<SAMP><SPAN class=samp>.SILENT</SPAN></SAMP>&#8217; is supported only for historical compatibility. We recommend you use the more selective ways to silence specific recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>. If you want to silence all recipes for a particular run of <CODE>make</CODE>, use the &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--silent</SPAN></SAMP>&#8217;<!-- /@w --> option (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Options Summary</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_002eEXPORT_005fALL_005fVARIABLES-241></A><BR></P>
<DT><FONT class=extract><CODE>.EXPORT_ALL_VARIABLES</CODE> </FONT>
<DD><FONT class=extract>Simply by being mentioned as a target, this tells <CODE>make</CODE> to export all variables to child processes by default. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>.</FONT> 
<P><A name=index-g_t_002eNOTPARALLEL-242></A><BR></P>
<DT><FONT class=extract><CODE>.NOTPARALLEL</CODE> </FONT>
<DD><A name=index-parallel-execution_002c-overriding-243></A><FONT class=extract>If <CODE>.NOTPARALLEL</CODE> is mentioned as a target, then this invocation of <CODE>make</CODE> will be run serially, even if the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is given. Any recursively invoked <CODE>make</CODE> command will still run recipes in parallel (unless its makefile also contains this target). Any prerequisites on this target are ignored.</FONT> 
<P><A name=index-g_t_002eONESHELL-244></A><BR></P>
<DT><FONT class=extract><CODE>.ONESHELL</CODE> </FONT>
<DD><A name=index-recipe-execution_002c-single-invocation-245></A><FONT class=extract>If <CODE>.ONESHELL</CODE> is mentioned as a target, then when a target is built all lines of the recipe will be given to a single invocation of the shell rather than each line being invoked separately (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>).</FONT> 
<P><A name=index-g_t_002ePOSIX-246></A><BR></P>
<DT><FONT class=extract><CODE>.POSIX</CODE> </FONT>
<DD><A name=index-POSIX_002dconforming-mode_002c-setting-247></A><FONT class=extract>If <CODE>.POSIX</CODE> is mentioned as a target, then the makefile will be parsed and run in POSIX-conforming mode. This does <EM>not</EM> mean that only POSIX-conforming makefiles will be accepted: all advanced GNU <CODE>make</CODE> features are still available. Rather, this target causes <CODE>make</CODE> to behave as required by POSIX in those areas where <CODE>make</CODE>'s default behavior differs. </FONT>
<P><FONT class=extract>In particular, if this target is mentioned then recipes will be invoked as if the shell had been passed the <CODE>-e</CODE> flag: the first failing command in a recipe will cause the recipe to fail immediately. </FONT></P></DD></DL>
<P>Any defined implicit rule suffix also counts as a special target if it appears as a target, and so does the concatenation of two suffixes, such as &#8216;<SAMP><SPAN class=samp>.c.o</SPAN></SAMP>&#8217;. These targets are suffix rules, an obsolete way of defining implicit rules (but a way still widely used). In principle, any target name could be special in this way if you break it in two and add both pieces to the suffix list. In practice, suffixes normally begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;, so these special target names also begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;. See <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Old-Fashioned Suffix Rules</A>.