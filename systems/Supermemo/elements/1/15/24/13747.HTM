<H3 class=section>4.10 Multiple Targets in a Rule</H3>
<P><A name=index-multiple-targets-248></A><A name=index-several-targets-in-a-rule-249></A><A name=index-targets_002c-multiple-250></A><A name=index-rule_002c-with-multiple-targets-251></A><FONT class=extract>A rule with multiple targets is equivalent to writing many rules, each with one target, and all identical aside from that. The same recipe applies to all the targets, but its effect may vary because you can substitute the actual target name into the recipe using &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217;. The rule contributes the same prerequisites to all the targets also.</FONT> 
<P>This is useful in two cases. 
<UL>
<LI>You want just prerequisites, no recipe. For example: <PRE class=example>          kbd.o command.o files.o: command.h
</PRE>
<P class=noindent>gives an additional prerequisite to each of the three object files mentioned. </P>
<LI>Similar recipes work for all the targets. The recipes do not need to be absolutely identical, since the automatic variable &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; can be used to substitute the particular target to be remade into the commands (see <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>). For example: <PRE class=example>          bigoutput littleoutput : text.g
                  generate text.g -$(subst output,,$@) &gt; $@
</PRE>
<P><A name=index-subst-252></A>is equivalent to <PRE class=example>          bigoutput : text.g
                  generate text.g -big &gt; bigoutput
          littleoutput : text.g
                  generate text.g -little &gt; littleoutput
</PRE>
<P class=noindent>Here we assume the hypothetical program <CODE>generate</CODE> makes two types of output, one if given &#8216;<SAMP><SPAN class=samp>-big</SPAN></SAMP>&#8217; and one if given &#8216;<SAMP><SPAN class=samp>-little</SPAN></SAMP>&#8217;. See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>, for an explanation of the <CODE>subst</CODE> function. </P></LI></UL>
<P>Suppose you would like to vary the prerequisites according to the target, much as the variable &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; allows you to vary the recipe. You cannot do this with multiple targets in an ordinary rule, but you can do it with a <DFN>static pattern rule</DFN>. See <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern Rules</A>.