The practice we recommend for automatic prerequisite generation is to have one makefile corresponding to each source file. For each source file <SAMP><VAR>name</VAR><SPAN class=file>.c</SPAN></SAMP> there is a makefile <SAMP><VAR>name</VAR><SPAN class=file>.d</SPAN></SAMP> which lists what files the object file <SAMP><VAR>name</VAR><SPAN class=file>.o</SPAN></SAMP> depends on. That way only the source files that have changed need to be rescanned to produce the new prerequisites. 
<P>Here is the pattern rule to generate a file of prerequisites (i.e., a makefile) called <SAMP><VAR>name</VAR><SPAN class=file>.d</SPAN></SAMP> from a C source file called <SAMP><VAR>name</VAR><SPAN class=file>.c</SPAN></SAMP>: <PRE class=smallexample>     %.d: %.c
             @set -e; rm -f $@; \
              $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \
              sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' &lt; $@.$$$$ &gt; $@; \
              rm -f $@.$$$$
</PRE>
<P class=noindent>See <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">Pattern Rules</A>, for information on defining pattern rules. The &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; flag to the shell causes it to exit immediately if the <CODE>$(CC)</CODE> command (or any other command) fails (exits with a nonzero status). <A name=index-g_t_0040code_007b_002de_007d-_0028shell-flag_0029-285></A><A name=index-g_t_0040code_007b_002dMM_007d-_0028to-GNU-compiler_0029-286></A>With the GNU C compiler, you may wish to use the &#8216;<SAMP><SPAN class=samp>-MM</SPAN></SAMP>&#8217; flag instead of &#8216;<SAMP><SPAN class=samp>-M</SPAN></SAMP>&#8217;. This omits prerequisites on system header files. See <A href="https://www.gnu.org/software/make/manual/gcc.html#Preprocessor-Options">Options Controlling the Preprocessor</A>, for details. 
<P><A name=index-g_t_0040code_007bsed_007d-_0028shell-command_0029-287></A>The purpose of the <CODE>sed</CODE> command is to translate (for example): <PRE class=example>     main.o : main.c defs.h
</PRE>
<P class=noindent>into: <PRE class=example>     main.o main.d : main.c defs.h
</PRE>
<P class=noindent><A name=index-g_t_0040code_007b_002ed_007d-288></A>This makes each &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; file depend on all the source and header files that the corresponding &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file depends on. <CODE>make</CODE> then knows it must regenerate the prerequisites whenever any of the source or header files changes. 
<P>Once you've defined the rule to remake the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files, you then use the <CODE>include</CODE> directive to read them all in. See <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A>. For example: <PRE class=example>     sources = foo.c bar.c
     
     include $(sources:.c=.d)
</PRE>
<P class=noindent>(This example uses a substitution variable reference to translate the list of source files &#8216;<SAMP><SPAN class=samp>foo.c bar.c</SPAN></SAMP>&#8217; into a list of prerequisite makefiles, &#8216;<SAMP><SPAN class=samp>foo.d bar.d</SPAN></SAMP>&#8217;. See <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A>, for full information on substitution references.) Since the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files are makefiles like any others, <CODE>make</CODE> will remake them as necessary with no further work from you. See <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</A>. 
<P>Note that the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files contain target definitions; you should be sure to place the <CODE>include</CODE> directive <EM>after</EM> the first, default goal in your makefiles or run the risk of having a random object file become the default goal. See <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A>.