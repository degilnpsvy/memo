<H2 class=chapter>2 An Introduction to Makefiles</H2>
<P>You need a file called a <DFN>makefile</DFN> to tell <CODE>make</CODE> what to do. Most often, the makefile tells <CODE>make</CODE> how to compile and link a program. <A name=index-makefile-7></A>In this chapter, we will discuss a simple makefile that describes how to compile and link a text editor which consists of eight C source files and three header files. The makefile can also tell <CODE>make</CODE> how to run miscellaneous commands when explicitly asked (for example, to remove certain files as a clean-up operation). To see a more complex example of a makefile, see <A href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile">Complex Makefile</A>. 
<P>When <CODE>make</CODE> recompiles the editor, each changed C source file must be recompiled. If a header file has changed, each C source file that includes the header file must be recompiled to be safe. Each compilation produces an object file corresponding to the source file. Finally, if any source file has been recompiled, all the object files, whether newly made or saved from previous compilations, must be linked together to produce the new executable editor. <A name=index-recompilation-8></A><A name=index-editor-9></A>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A>: What a rule looks like. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A>: A simple makefile. 
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A>: How <CODE>make</CODE> processes this makefile. 
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A>: Variables make makefiles simpler. 
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">make Deduces</A>: Letting <CODE>make</CODE> deduce the recipes. 
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite">Combine By Prerequisite</A>: Another style of makefile. 
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanup</A>: Rules for cleaning the directory. </LI></UL>
<DIV class=node><A name=Rule-Introduction></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile" rel=next>Simple Makefile</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=previous>Introduction</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section>2.1 What a Rule Looks Like</H3>
<P><A name=index-rule_002c-introduction-to-10></A><A name=index-makefile-rule-parts-11></A><A name=index-parts-of-makefile-rule-12></A>A simple makefile consists of &#8220;rules&#8221; with the following shape: 
<P><A name=index-targets_002c-introduction-to-13></A><A name=index-prerequisites_002c-introduction-to-14></A><A name=index-recipes_002c-introduction-to-15></A><PRE class=example>     <VAR>target</VAR> ... : <VAR>prerequisites</VAR> ...
             <VAR>recipe</VAR>
             ...
             ...
</PRE>
<P>A <DFN>target</DFN> is usually the name of a file that is generated by a program; examples of targets are executable or object files. A target can also be the name of an action to carry out, such as &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; (see <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>). 
<P>A <DFN>prerequisite</DFN> is a file that is used as input to create the target. A target often depends on several files. 
<P><A name=index-tabs-in-rules-16></A>A <DFN>recipe</DFN> is an action that <CODE>make</CODE> carries out. A recipe may have more than one command, either on the same line or each on its own line. <STRONG>Please note:</STRONG> you need to put a tab character at the beginning of every recipe line! <FONT class=extract>This is an obscurity that catches the unwary.</FONT> <FONT class=extract>If you prefer to prefix your recipes with a character other than tab, you can set the <CODE>.RECIPEPREFIX</CODE> variable to an alternate character (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>).</FONT> 
<P>Usually a recipe is in a rule with prerequisites and serves to create a target file if any of the prerequisites change. However, the rule that specifies a recipe for the target need not have prerequisites. For example, the rule containing the delete command associated with the target &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; does not have prerequisites. 
<P>A <DFN>rule</DFN>, then, explains how and when to remake certain files which are the targets of the particular rule. <CODE>make</CODE> carries out the recipe on the prerequisites to create or update the target. A rule can also explain how and when to carry out an action. See <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Writing Rules</A>. 
<P>A makefile may contain other text besides rules, but a simple makefile need only contain rules. Rules may look somewhat more complicated than shown in this template, but all fit the pattern more or less. 
<DIV class=node><A name=Simple-Makefile></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works" rel=next>How Make Works</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction" rel=previous>Rule Introduction</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV>
<H3 class=section>2.2 A Simple Makefile</H3>
<P><A name=index-simple-makefile-17></A><A name=index-makefile_002c-simple-18></A>Here is a straightforward makefile that describes the way an executable file called <CODE>edit</CODE> depends on eight object files which, in turn, depend on eight C source and three header files. 
<P>In this example, all the C files include <SAMP><SPAN class=file>defs.h</SPAN></SAMP>, but only those defining editing commands include <SAMP><SPAN class=file>command.h</SPAN></SAMP>, and only low level files that change the editor buffer include <SAMP><SPAN class=file>buffer.h</SPAN></SAMP>. <PRE class=example>     edit : main.o kbd.o command.o display.o \
            insert.o search.o files.o utils.o
             cc -o edit main.o kbd.o command.o display.o \
                        insert.o search.o files.o utils.o
     
     main.o : main.c defs.h
             cc -c main.c
     kbd.o : kbd.c defs.h command.h
             cc -c kbd.c
     command.o : command.c defs.h command.h
             cc -c command.c
     display.o : display.c defs.h buffer.h
             cc -c display.c
     insert.o : insert.c defs.h buffer.h
             cc -c insert.c
     search.o : search.c defs.h buffer.h
             cc -c search.c
     files.o : files.c defs.h buffer.h command.h
             cc -c files.c
     utils.o : utils.c defs.h
             cc -c utils.c
     clean :
             rm edit main.o kbd.o command.o display.o \
                insert.o search.o files.o utils.o
</PRE>
<P class=noindent>We split each long line into two lines using backslash/newline; this is like using one long line, but is easier to read. See <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">Splitting Long Lines</A>. <A name=index-continuation-lines-19></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-for-continuation-lines-20></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-for-continuation-lines-21></A><A name=index-quoting-newline_002c-in-makefile-22></A><A name=index-newline_002c-quoting_002c-in-makefile-23></A>To use this makefile to create the executable file called <SAMP><SPAN class=file>edit</SPAN></SAMP>, type: <PRE class=example>     make
</PRE>
<P>To use this makefile to delete the executable file and all the object files from the directory, type: <PRE class=example>     make clean
</PRE>
<P>In the example makefile, the targets include the executable file &#8216;<SAMP><SPAN class=samp>edit</SPAN></SAMP>&#8217;, and the object files &#8216;<SAMP><SPAN class=samp>main.o</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>kbd.o</SPAN></SAMP>&#8217;. The prerequisites are files such as &#8216;<SAMP><SPAN class=samp>main.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>defs.h</SPAN></SAMP>&#8217;. In fact, each &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file is both a target and a prerequisite. Recipes include &#8216;<SAMP><SPAN class=samp>cc&nbsp;-c&nbsp;main.c</SPAN></SAMP>&#8217;<!-- /@w --> and &#8216;<SAMP><SPAN class=samp>cc&nbsp;-c&nbsp;kbd.c</SPAN></SAMP>&#8217;<!-- /@w -->. 
<P>When a target is a file, it needs to be recompiled or relinked if any of its prerequisites change. In addition, any prerequisites that are themselves automatically generated should be updated first. In this example, <SAMP><SPAN class=file>edit</SPAN></SAMP> depends on each of the eight object files; the object file <SAMP><SPAN class=file>main.o</SPAN></SAMP> depends on the source file <SAMP><SPAN class=file>main.c</SPAN></SAMP> and on the header file <SAMP><SPAN class=file>defs.h</SPAN></SAMP>. 
<P>A recipe may follow each line that contains a target and prerequisites. These recipes say how to update the target file. A tab character (or whatever character is specified by the <CODE>.RECIPEPREFIX</CODE> variable; see <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A>) must come at the beginning of every line in the recipe to distinguish recipes from other lines in the makefile. (Bear in mind that <CODE>make</CODE> does not know anything about how the recipes work. It is up to you to supply recipes that will update the target file properly. All <CODE>make</CODE> does is execute the recipe you have specified when the target file needs to be updated.) <A name=index-recipe-24></A>The target &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; is not a file, but merely the name of an action. Since you normally do not want to carry out the actions in this rule, &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; is not a prerequisite of any other rule. Consequently, <CODE>make</CODE> never does anything with it unless you tell it specifically. Note that this rule not only is not a prerequisite, it also does not have any prerequisites, so the only purpose of the rule is to run the specified recipe. Targets that do not refer to files but are just actions are called <DFN>phony targets</DFN>. See <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>, for information about this kind of target. See <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors in Recipes</A>, to see how to cause <CODE>make</CODE> to ignore errors from <CODE>rm</CODE> or any other command. <A name=index-g_t_0040code_007bclean_007d-target-25></A><A name=index-g_t_0040code_007brm_007d-_0028shell-command_0029-26></A>
<DIV class=node><A name=How-Make-Works></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify" rel=next>Variables Simplify</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile" rel=previous>Simple Makefile</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>2.3 How <CODE>make</CODE> Processes a Makefile</FONT></H3>
<P><A name=index-processing-a-makefile-27></A><A name=index-makefile_002c-how-_0040code_007bmake_007d-processes-28></A><FONT class=extract>By default, <CODE>make</CODE> starts with the first target (not targets whose names start with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;). This is called the <DFN>default goal</DFN>. (<DFN>Goals</DFN> are the targets that <CODE>make</CODE> strives ultimately to update. You can override this behavior using the command line (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>) or with the <CODE>.DEFAULT_GOAL</CODE> special variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>). </FONT><A name=index-default-goal-29></A><A name=index-goal_002c-default-30></A><A name=index-goal-31></A><FONT class=extract>In the simple example of the previous section, the default goal is to update the executable program <SAMP><SPAN class=file>edit</SPAN></SAMP>; therefore, we put that rule first. </FONT>
<P><FONT class=extract>Thus, when you give the command: </FONT><PRE class=example><FONT class=extract>     make
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>make</CODE> reads the makefile in the current directory and begins by processing the first rule. In the example, this rule is for relinking <SAMP><SPAN class=file>edit</SPAN></SAMP>; but before <CODE>make</CODE> can fully process this rule, it must process the rules for the files that <SAMP><SPAN class=file>edit</SPAN></SAMP> depends on, which in this case are the object files. Each of these files is processed according to its own rule. These rules say to update each &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file by compiling its source file. The recompilation must be done if the source file, or any of the header files named as prerequisites, is more recent than the object file, or if the object file does not exist. </FONT>
<P><FONT class=extract>The other rules are processed because their targets appear as prerequisites of the goal. If some other rule is not depended on by the goal (or anything it depends on, etc.), that rule is not processed, unless you tell <CODE>make</CODE> to do so (with a command such as <CODE>make&nbsp;clean</CODE><!-- /@w -->). </FONT>
<P><FONT class=extract>Before recompiling an object file, <CODE>make</CODE> considers updating its prerequisites, the source file and header files. This makefile does not specify anything to be done for them&#8212;the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.h</SPAN></SAMP>&#8217; files are not the targets of any rules&#8212;so <CODE>make</CODE> does nothing for these files. But <CODE>make</CODE> would update automatically generated C programs, such as those made by Bison or Yacc, by their own rules at this time. </FONT>
<P><FONT class=extract>After recompiling whichever object files need it, <CODE>make</CODE> decides whether to relink <SAMP><SPAN class=file>edit</SPAN></SAMP>. This must be done if the file <SAMP><SPAN class=file>edit</SPAN></SAMP> does not exist, or if any of the object files are newer than it. If an object file was just recompiled, it is now newer than <SAMP><SPAN class=file>edit</SPAN></SAMP>, so <SAMP><SPAN class=file>edit</SPAN></SAMP> is relinked. </FONT><A name=index-relinking-32></A><FONT class=extract>Thus, if we change the file <SAMP><SPAN class=file>insert.c</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will compile that file to update <SAMP><SPAN class=file>insert.o</SPAN></SAMP>, and then link <SAMP><SPAN class=file>edit</SPAN></SAMP>. If we change the file <SAMP><SPAN class=file>command.h</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will recompile the object files <SAMP><SPAN class=file>kbd.o</SPAN></SAMP>, <SAMP><SPAN class=file>command.o</SPAN></SAMP> and <SAMP><SPAN class=file>files.o</SPAN></SAMP> and then link the file <SAMP><SPAN class=file>edit</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Variables-Simplify></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#make-Deduces" rel=next>make Deduces</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works" rel=previous>How Make Works</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV>
<H3 class=section>2.4 Variables Make Makefiles Simpler</H3>
<P><A name=index-variables-33></A><A name=index-simplifying-with-variables-34></A>In our example, we had to list all the object files twice in the rule for <SAMP><SPAN class=file>edit</SPAN></SAMP> (repeated here): <PRE class=example>     edit : main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o
             cc -o edit main.o kbd.o command.o display.o \
                        insert.o search.o files.o utils.o
</PRE>
<P><A name=index-g_t_0040code_007bobjects_007d-35></A>Such duplication is error-prone; if a new object file is added to the system, we might add it to one list and forget the other. We can eliminate the risk and simplify the makefile by using a variable. <DFN>Variables</DFN> allow a text string to be defined once and substituted in multiple places later (see <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">How to Use Variables</A>). 
<P><A name=index-g_t_0040code_007bOBJECTS_007d-36></A><A name=index-g_t_0040code_007bobjs_007d-37></A><A name=index-g_t_0040code_007bOBJS_007d-38></A><A name=index-g_t_0040code_007bobj_007d-39></A><A name=index-g_t_0040code_007bOBJ_007d-40></A><FONT class=extract>It is standard practice for every makefile to have a variable named <CODE>objects</CODE>, <CODE>OBJECTS</CODE>, <CODE>objs</CODE>, <CODE>OBJS</CODE>, <CODE>obj</CODE>, or <CODE>OBJ</CODE> which is a list of all object file names.</FONT> We would define such a variable <CODE>objects</CODE> with a line like this in the makefile: <PRE class=example>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
</PRE>
<P class=noindent>Then, each place we want to put a list of the object file names, we can substitute the variable's value by writing &#8216;<SAMP><SPAN class=samp>$(objects)</SPAN></SAMP>&#8217; (see <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">How to Use Variables</A>). 
<P>Here is how the complete simple makefile looks when you use a variable for the object files: <PRE class=example>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     main.o : main.c defs.h
             cc -c main.c
     kbd.o : kbd.c defs.h command.h
             cc -c kbd.c
     command.o : command.c defs.h command.h
             cc -c command.c
     display.o : display.c defs.h buffer.h
             cc -c display.c
     insert.o : insert.c defs.h buffer.h
             cc -c insert.c
     search.o : search.c defs.h buffer.h
             cc -c search.c
     files.o : files.c defs.h buffer.h command.h
             cc -c files.c
     utils.o : utils.c defs.h
             cc -c utils.c
     clean :
             rm edit $(objects)
</PRE>
<DIV class=node><A name=make-Deduces></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite" rel=next>Combine By Prerequisite</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify" rel=previous>Variables Simplify</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV>
<H3 class=section>2.5 Letting <CODE>make</CODE> Deduce the Recipes</H3>
<P><A name=index-deducing-recipes-_0028implicit-rules_0029-41></A><A name=index-implicit-rule_002c-introduction-to-42></A><A name=index-rule_002c-implicit_002c-introduction-to-43></A><FONT class=extract>It is not necessary to spell out the recipes for compiling the individual C source files, because <CODE>make</CODE> can figure them out: it has an <DFN>implicit rule</DFN> for updating a &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file from a correspondingly named &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file using a &#8216;<SAMP><SPAN class=samp>cc -c</SPAN></SAMP>&#8217; command.</FONT> For example, it will use the recipe &#8216;<SAMP><SPAN class=samp>cc -c main.c -o main.o</SPAN></SAMP>&#8217; to compile <SAMP><SPAN class=file>main.c</SPAN></SAMP> into <SAMP><SPAN class=file>main.o</SPAN></SAMP>. We can therefore omit the recipes from the rules for the object files. See <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules">Using Implicit Rules</A>. 
<P>When a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file is used automatically in this way, it is also automatically added to the list of prerequisites. We can therefore omit the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files from the prerequisites, provided we omit the recipe. 
<P>Here is the entire example, with both of these changes, and a variable <CODE>objects</CODE> as suggested above: <PRE class=example>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     
     main.o : defs.h
     kbd.o : defs.h command.h
     command.o : defs.h command.h
     display.o : defs.h buffer.h
     insert.o : defs.h buffer.h
     search.o : defs.h buffer.h
     files.o : defs.h buffer.h command.h
     utils.o : defs.h
     
     .PHONY : clean
     clean :
             rm edit $(objects)
</PRE>
<P class=noindent>This is how we would write the makefile in actual practice. (The complications associated with &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; are described elsewhere. See <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>, and <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors in Recipes</A>.) 
<P>Because implicit rules are so convenient, they are important. You will see them used frequently. 
<DIV class=node><A name=Combine-By-Prerequisite></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Cleanup" rel=next>Cleanup</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#make-Deduces" rel=previous>make Deduces</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV>
<H3 class=section>2.6 Another Style of Makefile</H3>
<P><A name=index-combining-rules-by-prerequisite-44></A>When the objects of a makefile are created only by implicit rules, an alternative style of makefile is possible. In this style of makefile, you group entries by their prerequisites instead of by their targets. Here is what one looks like: <PRE class=example>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     
     $(objects) : defs.h
     kbd.o command.o files.o : command.h
     display.o insert.o search.o files.o : buffer.h
</PRE>
<P class=noindent>Here <SAMP><SPAN class=file>defs.h</SPAN></SAMP> is given as a prerequisite of all the object files; <SAMP><SPAN class=file>command.h</SPAN></SAMP> and <SAMP><SPAN class=file>buffer.h</SPAN></SAMP> are prerequisites of the specific object files listed for them. 
<P>Whether this is better is a matter of taste: it is more compact, but some people dislike it because they find it clearer to put all the information about each target in one place. 
<DIV class=node><A name=Cleanup></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite" rel=previous>Combine By Prerequisite</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up>Introduction</A> </DIV>
<H3 class=section>2.7 Rules for Cleaning the Directory</H3>
<P><A name=index-cleaning-up-45></A><A name=index-removing_002c-to-clean-up-46></A>Compiling a program is not the only thing you might want to write rules for. Makefiles commonly tell how to do a few other things besides compiling a program: for example, how to delete all the object files and executables so that the directory is &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217;. 
<P><A name=index-g_t_0040code_007bclean_007d-target-47></A>Here is how we could write a <CODE>make</CODE> rule for cleaning our example editor: <PRE class=example>     clean:
             rm edit $(objects)
</PRE>
<P>In practice, we might want to write the rule in a somewhat more complicated manner to handle unanticipated situations. We would do this: <PRE class=example>     .PHONY : clean
     clean :
             -rm edit $(objects)
</PRE>
<P class=noindent>This prevents <CODE>make</CODE> from getting confused by an actual file called <SAMP><SPAN class=file>clean</SPAN></SAMP> and causes it to continue in spite of errors from <CODE>rm</CODE>. (See <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>, and <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors in Recipes</A>.) 
<P class=noindent>A rule such as this should not be placed at the beginning of the makefile, because we do not want it to run by default! Thus, in the example makefile, we want the rule for <CODE>edit</CODE>, which recompiles the editor, to remain the default goal. 
<P>Since <CODE>clean</CODE> is not a prerequisite of <CODE>edit</CODE>, this rule will not run at all if we give the command &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; with no arguments. In order to make the rule run, we have to type &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217;. See <A href="https://www.gnu.org/software/make/manual/make.html#Running">How to Run <CODE>make</CODE></A>.