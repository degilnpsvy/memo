<H1 class=settitle>GNU `make'</H1>
<DIV class=shortcontents>
<H2>Short Contents</H2>
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Top">GNU <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Overview">1 Overview of <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Introduction">2 An Introduction to Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Makefiles">3 Writing Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Rules">4 Writing Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Recipes">5 Writing Recipes in Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Using-Variables">6 How to Use Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Conditionals">7 Conditional Parts of Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Functions">8 Functions for Transforming Text</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Running">9 How to Run <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Implicit-Rules">10 Using Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Archives">11 Using <CODE>make</CODE> to Update Archive Files</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Extending-make">12 Extending GNU <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Features">13 Features of GNU <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Missing">14 Incompatibilities and Missing Features</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Makefile-Conventions">15 Makefile Conventions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Quick-Reference">Appendix A Quick Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Error-Messages">Appendix B Errors Generated by Make</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Complex-Makefile">Appendix C Complex Makefile Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Concept-Index">Index of Concepts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#toc_Name-Index">Index of Functions, Variables, &amp; Directives</A> </LI></UL></DIV>
<DIV class=contents>
<H2>Table of Contents</H2>
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Top" name=toc_Top>GNU <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Overview" name=toc_Overview>1 Overview of <CODE>make</CODE></A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reading">1.1 How to Read This Manual</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Bugs">1.2 Problems and Bugs</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Introduction" name=toc_Introduction>2 An Introduction to Makefiles</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">2.1 What a Rule Looks Like</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">2.2 A Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">2.3 How <CODE>make</CODE> Processes a Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">2.4 Variables Make Makefiles Simpler</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">2.5 Letting <CODE>make</CODE> Deduce the Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite">2.6 Another Style of Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Cleanup">2.7 Rules for Cleaning the Directory</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles" name=toc_Makefiles>3 Writing Makefiles</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">3.1 What Makefiles Contain</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">3.1.1 Splitting Long Lines</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">3.2 What Name to Give Your Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Include">3.3 Including Other Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">3.4 The Variable <CODE>MAKEFILES</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">3.5 How Makefiles Are Remade</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles">3.6 Overriding Part of Another Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">3.7 How <CODE>make</CODE> Reads a Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">3.8 Secondary Expansion</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rules" name=toc_Rules>4 Writing Rules</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Example">4.1 Rule Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">4.2 Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">4.3 Types of Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">4.4 Using Wildcard Characters in File Names</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">4.4.1 Wildcard Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">4.4.2 Pitfalls of Using Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">4.4.3 The Function <CODE>wildcard</CODE></A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">4.5 Searching Directories for Prerequisites</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#General-Search">4.5.1 <CODE>VPATH</CODE>: Search Path for All Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">4.5.2 The <CODE>vpath</CODE> Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">4.5.3 How Directory Searches are Performed</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch">4.5.4 Writing Recipes with Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">4.5.5 Directory Search and Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">4.5.6 Directory Search for Link Libraries</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">4.6 Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">4.7 Rules without Recipes or Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">4.8 Empty Target Files to Record Events</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">4.9 Special Built-in Target Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">4.10 Multiple Targets in a Rule</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">4.11 Multiple Rules for One Target</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">4.12 Static Pattern Rules</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">4.12.1 Syntax of Static Pattern Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit">4.12.2 Static Pattern Rules versus Implicit Rules</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">4.13 Double-Colon Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">4.14 Generating Prerequisites Automatically</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recipes" name=toc_Recipes>5 Writing Recipes in Rules</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">5.1 Recipe Syntax</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">5.1.1 Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes">5.1.2 Using Variables in Recipes</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Echoing">5.2 Recipe Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Execution">5.3 Recipe Execution</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#One-Shell">5.3.1 Using One Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">5.3.2 Choosing the Shell</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel">5.4 Parallel Execution</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">5.4.1 Output During Parallel Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">5.4.2 Input During Parallel Execution</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Errors">5.5 Errors in Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">5.6 Interrupting or Killing <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recursion">5.7 Recursive Use of <CODE>make</CODE></A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">5.7.1 How the <CODE>MAKE</CODE> Variable Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">5.7.2 Communicating Variables to a Sub-<CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">5.7.3 Communicating Options to a Sub-<CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#_002dw-Option">5.7.4 The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">5.8 Defining Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes">5.9 Using Empty Recipes</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" name=toc_Using-Variables>6 How to Use Variables</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reference">6.1 Basics of Variable References</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Flavors">6.2 The Two Flavors of Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Advanced">6.3 Advanced Features for Reference to Variables</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">6.3.1 Substitution References</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">6.3.2 Computed Variable Names</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Values">6.4 How Variables Get Their Values</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Setting">6.5 Setting Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Appending">6.6 Appending More Text to Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">6.7 The <CODE>override</CODE> Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">6.8 Defining Multi-Line Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive">6.9 Undefining Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Environment">6.10 Variables from the Environment</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific">6.11 Target-specific Variable Values</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific">6.12 Pattern-specific Variable Values</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">6.13 Suppressing Inheritance</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">6.14 Other Special Variables</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals" name=toc_Conditionals>7 Conditional Parts of Makefiles</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Example">7.1 Example of a Conditional</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">7.2 Syntax of Conditionals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags">7.3 Conditionals that Test Flags</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Functions" name=toc_Functions>8 Functions for Transforming Text</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">8.1 Function Call Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">8.2 Functions for String Substitution and Analysis</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">8.3 Functions for File Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">8.4 Functions for Conditionals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function">8.5 The <CODE>foreach</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#File-Function">8.6 The <CODE>file</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">8.7 The <CODE>call</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Value-Function">8.8 The <CODE>value</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">8.9 The <CODE>eval</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">8.10 The <CODE>origin</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">8.11 The <CODE>flavor</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">8.12 Functions That Control Make</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">8.13 The <CODE>shell</CODE> Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function">8.14 The <CODE>guile</CODE> Function</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Running" name=toc_Running>9 How to Run <CODE>make</CODE></A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">9.1 Arguments to Specify the Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Goals">9.2 Arguments to Specify the Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">9.3 Instead of Executing Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">9.4 Avoiding Recompilation of Some Files</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Overriding">9.5 Overriding Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Testing">9.6 Testing the Compilation of a Program</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">9.7 Summary of Options</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" name=toc_Implicit-Rules>10 Using Implicit Rules</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit">10.1 Using Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">10.2 Catalogue of Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">10.3 Variables Used by Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">10.4 Chains of Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">10.5 Defining and Redefining Pattern Rules</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">10.5.1 Introduction to Pattern Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Examples">10.5.2 Pattern Rule Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">10.5.3 Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">10.5.4 How Patterns Match</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules">10.5.5 Match-Anything Pattern Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules">10.5.6 Canceling Implicit Rules</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort">10.6 Defining Last-Resort Default Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">10.7 Old-Fashioned Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search">10.8 Implicit Rule Search Algorithm</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archives" name=toc_Archives>11 Using <CODE>make</CODE> to Update Archive Files</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members">11.1 Archive Members as Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Update">11.2 Implicit Rule for Archive Member Targets</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">11.2.1 Updating Archive Symbol Directories</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">11.3 Dangers When Using Archives</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">11.4 Suffix Rules for Archive Files</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Extending-make" name=toc_Extending-make>12 Extending GNU <CODE>make</CODE></A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration">12.1 GNU Guile Integration</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Types">12.1.1 Conversion of Guile Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">12.1.2 Interfaces from Guile to <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Example">12.1.3 Example Using Guile in <CODE>make</CODE></A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">12.2 Loading Dynamic Objects</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">12.2.1 The <CODE>load</CODE> Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects">12.2.2 How Loaded Objects Are Remade</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">12.2.3 Loaded Object Interface</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example">12.2.4 Example Loaded Object</A> </LI></UL></LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Features" name=toc_Features>13 Features of GNU <CODE>make</CODE></A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Missing" name=toc_Missing>14 Incompatibilities and Missing Features</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" name=toc_Makefile-Conventions>15 Makefile Conventions</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Basics">15.1 General Conventions for Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Utilities-in-Makefiles">15.2 Utilities in Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Command-Variables">15.3 Variables for Specifying Commands</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#DESTDIR">15.4 <CODE>DESTDIR</CODE>: Support for Staged Installs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">15.5 Variables for Installation Directories</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets">15.6 Standard Targets for Users</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories">15.7 Install Command Categories</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference" name=toc_Quick-Reference>Appendix A Quick Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Error-Messages" name=toc_Error-Messages>Appendix B Errors Generated by Make</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile" name=toc_Complex-Makefile>Appendix C Complex Makefile Example</A> 
<UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#GNU-Free-Documentation-License">C.1 GNU Free Documentation License</A> </LI></UL>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Concept-Index" name=toc_Concept-Index>Index of Concepts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Name-Index" name=toc_Name-Index>Index of Functions, Variables, &amp; Directives</A> </LI></UL></DIV>
<DIV class=node><A name=Top></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=next>Overview</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#dir" rel=previous>(dir)</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#dir" rel=up>(dir)</A> </DIV>
<H2 class=unnumbered>GNU <CODE>make</CODE></H2>
<P>This file documents the GNU <CODE>make</CODE> utility, which determines automatically which pieces of a large program need to be recompiled, and issues the commands to recompile them. 
<P>This is Edition 0.72, last updated 9 October 2013, of <CITE>The GNU Make Manual</CITE>, for GNU <CODE>make</CODE> version 4.0. 
<P>Copyright &#169; 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 Free Software Foundation, Inc. 
<BLOCKQUOTE>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being &#8220;A GNU Manual,&#8221; and with the Back-Cover Texts as in (a) below. A copy of the license is included in the section entitled &#8220;GNU Free Documentation License.&#8221; 
<P>(a) The FSF's Back-Cover Text is: &#8220;You have the freedom to copy and modify this GNU manual. Buying copies from the FSF supports it in developing GNU and promoting software freedom.&#8221; </P></BLOCKQUOTE>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Overview">Overview</A>: Overview of <CODE>make</CODE>. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Introduction">Introduction</A>: An introduction to <CODE>make</CODE>. 
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Makefiles">Makefiles</A>: Makefiles tell <CODE>make</CODE> what to do. 
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A>: Rules describe when a file must be remade. 
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Recipes">Recipes</A>: Recipes say how to remake a file. 
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A>: You can use variables to avoid repetition. 
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Conditionals">Conditionals</A>: Use or ignore parts of the makefile based on the values of variables. 
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Functions">Functions</A>: Many powerful ways to manipulate text. 
<LI><A accessKey=9 href="https://www.gnu.org/software/make/manual/make.html#Running">Invoking make</A>: How to invoke <CODE>make</CODE> on the command line. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules">Implicit Rules</A>: Use implicit rules to treat many files alike, based on their file names. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archives">Archives</A>: How <CODE>make</CODE> can update library archives. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Extending-make">Extending make</A>: Using extensions to <CODE>make</CODE>. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Features">Features</A>: Features GNU <CODE>make</CODE> has over other <CODE>make</CODE>s. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A>: What GNU <CODE>make</CODE> lacks from other <CODE>make</CODE>s. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions">Makefile Conventions</A>: Conventions for writing makefiles for GNU programs. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference">Quick Reference</A>: A quick reference for experienced users. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Error-Messages">Error Messages</A>: A list of common errors generated by <CODE>make</CODE>. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile">Complex Makefile</A>: A real example of a straightforward, but nontrivial, makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#GNU-Free-Documentation-License">GNU Free Documentation License</A>: License for copying this manual. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Concept-Index">Concept Index</A>: Index of Concepts. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Name-Index">Name Index</A>: Index of Functions, Variables, &amp; Directives. </LI></UL>
<P>--- The Detailed Node Listing --- 
<P>Overview of <CODE>make</CODE> </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Preparing">Preparing</A>: Preparing and running <CODE>make</CODE>. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reading">Reading</A>: On reading this text. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A>: Problems and bugs. </LI></UL>
<P>An Introduction to Makefiles </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A>: What a rule looks like. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A>: A simple makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A>: How <CODE>make</CODE> processes this makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A>: Variables make makefiles simpler. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">make Deduces</A>: Letting <CODE>make</CODE> deduce the recipes. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite">Combine By Prerequisite</A>: Another style of makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanup</A>: Rules for cleaning the directory. </LI></UL>
<P>Writing Makefiles </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A>: What makefiles contain. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A>: How to name your makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A>: How one makefile can use another makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">MAKEFILES Variable</A>: The environment can specify extra makefiles. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</A>: How makefiles get remade. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles">Overriding Makefiles</A>: How to override part of one makefile with another makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A>: How makefiles are parsed. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A>: How and when secondary expansion is performed. </LI></UL>
<P>What Makefiles Contain </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">Splitting Lines</A>: Splitting long lines in makefiles </LI></UL>
<P>Writing Rules </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Example">Rule Example</A>: An example explained. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A>: General syntax explained. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A>: There are two types of prerequisites. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A>: Using wildcard characters such as `*'. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A>: Searching other directories for source files. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>: Using a target that is not a real file's name. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">Force Targets</A>: You can use a target without a recipe or prerequisites to mark other targets as phony. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A>: When only the date matters and the files are empty. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A>: Targets with special built-in meanings. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A>: When to make use of several targets in a rule. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">Multiple Rules</A>: How to use several rules with the same target. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A>: Static pattern rules apply to multiple targets and can vary the prerequisites according to the target name. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">Double-Colon</A>: How to use a special kind of rule to allow several independent rules for one target. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A>: How to automatically generate rules giving prerequisites from source files themselves. </LI></UL>
<P>Using Wildcard Characters in File Names </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">Wildcard Examples</A>: Several examples. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A>: Problems to avoid. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">Wildcard Function</A>: How to cause wildcard expansion where it does not normally take place. </LI></UL>
<P>Searching Directories for Prerequisites </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#General-Search">General Search</A>: Specifying a search path that applies to every prerequisite. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A>: Specifying a search path for a specified class of names. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A>: When and how search paths are applied. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch">Recipes/Search</A>: How to write recipes that work together with search paths. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A>: How search paths affect implicit rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A>: Directory search for link libraries. </LI></UL>
<P>Static Pattern Rules </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A>: The syntax of static pattern rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit">Static versus Implicit</A>: When are they better than implicit rules? </LI></UL>
<P>Writing Recipes in Rules </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A>: Recipe syntax features and pitfalls. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A>: How to control when recipes are echoed. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A>: How recipes are executed. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A>: How recipes can be executed in parallel. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A>: What happens after a recipe execution error. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A>: What happens when a recipe is interrupted. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A>: Invoking <CODE>make</CODE> from makefiles. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A>: Defining canned recipes. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes">Empty Recipes</A>: Defining useful, do-nothing recipes. </LI></UL>
<P>Recipe Syntax </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A>: Breaking long recipe lines for readability. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes">Variables in Recipes</A>: Using <CODE>make</CODE> variables in recipes. </LI></UL>
<P>Recipe Execution </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#One-Shell">One Shell</A>: One shell for all lines in a recipe. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A>: How <CODE>make</CODE> chooses the shell used to run recipes. </LI></UL>
<P>Parallel Execution </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A>: Handling output during parallel execution 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A>: Handling input during parallel execution </LI></UL>
<P>Recursive Use of <CODE>make</CODE> </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A>: The special effects of using &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217;. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A>: How to communicate variables to a sub-<CODE>make</CODE>. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A>: How to communicate options to a sub-<CODE>make</CODE>. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A>: How the &#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; option helps debug use of recursive <CODE>make</CODE> commands. </LI></UL>
<P>How to Use Variables </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Reference">Reference</A>: How to use the value of a variable. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A>: Variables come in two flavors. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Advanced">Advanced</A>: Advanced features for referencing a variable. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Values">Values</A>: All the ways variables get their values. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A>: How to set a variable in the makefile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Appending">Appending</A>: How to append more text to the old value of a variable. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">Override Directive</A>: How to set a variable in the makefile even if the user has set it with a command argument. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A>: An alternate way to set a variable to a multi-line string. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive">Undefine Directive</A>: How to undefine a variable so that it appears as if it was never set. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Environment">Environment</A>: Variable values can come from the environment. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific">Target-specific</A>: Variable values can be defined on a per-target basis. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific">Pattern-specific</A>: Target-specific variable values can be applied to a group of targets that match a pattern. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">Suppressing Inheritance</A>: Suppress inheritance of variables. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A>: Variables with special meaning or behavior. </LI></UL>
<P>Advanced Features for Reference to Variables </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A>: Referencing a variable with substitutions on the value. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A>: Computing the name of the variable to refer to. </LI></UL>
<P>Conditional Parts of Makefiles </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Example">Conditional Example</A>: Example of a conditional 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A>: The syntax of conditionals. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags">Testing Flags</A>: Conditionals that test flags. </LI></UL>
<P>Functions for Transforming Text </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">Syntax of Functions</A>: How to write a function call. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A>: General-purpose text manipulation functions. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A>: Functions for manipulating file names. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Conditional Functions</A>: Functions that implement conditions. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function">Foreach Function</A>: Repeat some text with controlled variation. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#File-Function">File Function</A>: Write text to a file. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">Call Function</A>: Expand a user-defined function. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Value-Function">Value Function</A>: Return the un-expanded value of a variable. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">Eval Function</A>: Evaluate the arguments as makefile syntax. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">Origin Function</A>: Find where a variable got its value. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">Flavor Function</A>: Find out the flavor of a variable. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A>: Functions that control how make runs. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">Shell Function</A>: Substitute the output of a shell command. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function">Guile Function</A>: Use GNU Guile embedded scripting language. </LI></UL>
<P>How to Run <CODE>make</CODE> </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">Makefile Arguments</A>: How to specify which makefile to use. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A>: How to use goal arguments to specify which parts of the makefile to use. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A>: How to use mode flags to specify what kind of thing to do with the recipes in the makefile other than simply execute them. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A>: How to avoid recompiling certain files. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A>: How to override a variable to specify an alternate compiler and other things. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A>: How to proceed past some errors, to test compilation. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A>: Summary of Options </LI></UL>
<P>Using Implicit Rules </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit">Using Implicit</A>: How to use an existing implicit rule to get the recipes for updating a file. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A>: A list of built-in implicit rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A>: How to change what predefined rules do. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A>: How to use a chain of implicit rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">Pattern Rules</A>: How to define new implicit rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort">Last Resort</A>: How to define a recipe for rules which cannot find any. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Suffix Rules</A>: The old-fashioned style of implicit rule. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search">Implicit Rule Search</A>: The precise algorithm for applying implicit rules. </LI></UL>
<P>Defining and Redefining Pattern Rules </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A>: An introduction to pattern rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Examples">Pattern Examples</A>: Examples of pattern rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>: How to use automatic variables in the recipe of implicit rules. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">Pattern Match</A>: How patterns match. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules">Match-Anything Rules</A>: Precautions you should take prior to defining rules that can match any target file whatever. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules">Canceling Rules</A>: How to override or cancel built-in rules. </LI></UL>
<P>Using <CODE>make</CODE> to Update Archive Files </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members">Archive Members</A>: Archive members as targets. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Update">Archive Update</A>: The implicit rule for archive member targets. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">Archive Pitfalls</A>: Dangers to watch out for when using archives. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A>: You can write a special kind of suffix rule for updating archives. </LI></UL>
<P>Implicit Rule for Archive Member Targets </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A>: How to update archive symbol directories. </LI></UL>
<P>Extending GNU <CODE>make</CODE> </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration">Guile Integration</A>: Using Guile as an embedded scripting language. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">Loading Objects</A>: Loading dynamic objects as extensions. </LI></UL>
<P>GNU Guile Integration </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Types">Guile Types</A>: Converting Guile types to <CODE>make</CODE> strings. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">Guile Interface</A>: Invoking <CODE>make</CODE> functions from Guile. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Example">Guile Example</A>: Example using Guile in <CODE>make</CODE>. </LI></UL>
<P>Loading Dynamic Objects </P>
<UL class=menu>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A>: Loading dynamic objects as extensions. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects">Remaking Loaded Objects</A>: How loaded objects get remade. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A>: Programmatic interface for loaded objects. 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example">Loaded Object Example</A>: Example of a loaded object </LI></UL>
<DIV class=node><A name=Overview></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=next>Introduction</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Top" rel=previous>Top</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV><!-- node-name,  next,  previous,  up -->
<H2 class=chapter>1 Overview of <CODE>make</CODE></H2>
<P>The <CODE>make</CODE> utility automatically determines which pieces of a large program need to be recompiled, and issues commands to recompile them. This manual describes GNU <CODE>make</CODE>, which was implemented by Richard Stallman and Roland McGrath. Development since Version 3.76 has been handled by Paul D. Smith. 
<P>GNU <CODE>make</CODE> conforms to section 6.2 of <CITE>IEEE Standard 1003.2-1992</CITE> (POSIX.2). <A name=index-POSIX-1></A><A name=index-IEEE-Standard-1003_002e2-2></A><A name=index-standards-conformance-3></A>Our examples show C programs, since they are most common, but you can use <CODE>make</CODE> with any programming language whose compiler can be run with a shell command. Indeed, <CODE>make</CODE> is not limited to programs. You can use it to describe any task where some files must be updated automatically from others whenever the others change. 
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Preparing">Preparing</A>: Preparing and running <CODE>make</CODE>. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Reading">Reading</A>: On reading this text. 
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A>: Problems and bugs. </LI></UL>
<DIV class=node><A name=Preparing></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Reading" rel=next>Reading</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=previous>Overview</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=up>Overview</A> </DIV>
<H3 class=heading>Preparing and Running Make</H3>
<P>To prepare to use <CODE>make</CODE>, you must write a file called the <DFN>makefile</DFN> that describes the relationships among files in your program and provides commands for updating each file. In a program, typically, the executable file is updated from object files, which are in turn made by compiling source files. 
<P>Once a suitable makefile exists, each time you change some source files, this simple shell command: <PRE class=example>     make
</PRE>
<P class=noindent>suffices to perform all necessary recompilations. The <CODE>make</CODE> program uses the makefile data base and the last-modification times of the files to decide which of the files need to be updated. For each of those files, it issues the recipes recorded in the data base. 
<P>You can provide command line arguments to <CODE>make</CODE> to control which files should be recompiled, or how. See <A href="https://www.gnu.org/software/make/manual/make.html#Running">How to Run <CODE>make</CODE></A>. 
<DIV class=node><A name=Reading></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Bugs" rel=next>Bugs</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Preparing" rel=previous>Preparing</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=up>Overview</A> </DIV>
<H3 class=section>1.1 How to Read This Manual</H3>
<P>If you are new to <CODE>make</CODE>, or are looking for a general introduction, read the first few sections of each chapter, skipping the later sections. In each chapter, the first few sections contain introductory or general information and the later sections contain specialized or technical information. The exception is the second chapter, <A href="https://www.gnu.org/software/make/manual/make.html#Introduction">An Introduction to Makefiles</A>, all of which is introductory. 
<P>If you are familiar with other <CODE>make</CODE> programs, see <A href="https://www.gnu.org/software/make/manual/make.html#Features">Features of GNU <CODE>make</CODE></A>, which lists the enhancements GNU <CODE>make</CODE> has, and <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Incompatibilities and Missing Features</A>, which explains the few things GNU <CODE>make</CODE> lacks that others have. 
<P>For a quick summary, see <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A>, <A href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference">Quick Reference</A>, and <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A>. 
<DIV class=node><A name=Bugs></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Reading" rel=previous>Reading</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=up>Overview</A> </DIV>
<H3 class=section>1.2 Problems and Bugs</H3>
<P><A name=index-reporting-bugs-4></A><A name=index-bugs_002c-reporting-5></A><A name=index-problems-and-bugs_002c-reporting-6></A>If you have problems with GNU <CODE>make</CODE> or think you've found a bug, please report it to the developers; we cannot promise to do anything but we might well want to fix it. 
<P>Before reporting a bug, make sure you've actually found a real bug. Carefully reread the documentation and see if it really says you can do what you're trying to do. If it's not clear whether you should be able to do something or not, report that too; it's a bug in the documentation! 
<P>Before reporting a bug or trying to fix it yourself, try to isolate it to the smallest possible makefile that reproduces the problem. Then send us the makefile and the exact results <CODE>make</CODE> gave you, including any error or warning messages. Please don't paraphrase these messages: it's best to cut and paste them into your report. When generating this small makefile, be sure to not use any non-free or unusual tools in your recipes: you can almost always emulate what such a tool would do with simple shell commands. Finally, be sure to explain what you expected to occur; this will help us decide whether the problem was really in the documentation. 
<P>Once you have a precise problem you can report it in one of two ways. Either send electronic mail to: <PRE class=example>         bug-make@gnu.org
</PRE>
<P class=noindent>or use our Web-based project management tool, at: <PRE class=example>         http://savannah.gnu.org/projects/make/
</PRE>
<P class=noindent>In addition to the information above, please be careful to include the version number of <CODE>make</CODE> you are using. You can get this information with the command &#8216;<SAMP><SPAN class=samp>make --version</SPAN></SAMP>&#8217;. Be sure also to include the type of machine and operating system you are using. One way to obtain this information is by looking at the final lines of output from the command &#8216;<SAMP><SPAN class=samp>make --help</SPAN></SAMP>&#8217;. 
<DIV class=node><A name=Introduction></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=next>Makefiles</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Overview" rel=previous>Overview</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV><!-- node-name,  next,  previous,  up -->
<H2 class=chapter><FONT class=extract>2 An Introduction to Makefiles</FONT></H2>
<P><FONT class=extract>You need a file called a <DFN>makefile</DFN> to tell <CODE>make</CODE> what to do. Most often, the makefile tells <CODE>make</CODE> how to compile and link a program. </FONT><A name=index-makefile-7></A><FONT class=extract>In this chapter, we will discuss a simple makefile that describes how to compile and link a text editor which consists of eight C source files and three header files. The makefile can also tell <CODE>make</CODE> how to run miscellaneous commands when explicitly asked (for example, to remove certain files as a clean-up operation). To see a more complex example of a makefile, see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile"><FONT class=extract>Complex Makefile</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>When <CODE>make</CODE> recompiles the editor, each changed C source file must be recompiled. If a header file has changed, each C source file that includes the header file must be recompiled to be safe. Each compilation produces an object file corresponding to the source file. Finally, if any source file has been recompiled, all the object files, whether newly made or saved from previous compilations, must be linked together to produce the new executable editor. </FONT><A name=index-recompilation-8></A><A name=index-editor-9></A>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction"><FONT class=extract>Rule Introduction</FONT></A><FONT class=extract>: What a rule looks like. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile"><FONT class=extract>Simple Makefile</FONT></A><FONT class=extract>: A simple makefile. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works"><FONT class=extract>How Make Works</FONT></A><FONT class=extract>: How <CODE>make</CODE> processes this makefile. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify"><FONT class=extract>Variables Simplify</FONT></A><FONT class=extract>: Variables make makefiles simpler. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#make-Deduces"><FONT class=extract>make Deduces</FONT></A><FONT class=extract>: Letting <CODE>make</CODE> deduce the recipes. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite"><FONT class=extract>Combine By Prerequisite</FONT></A><FONT class=extract>: Another style of makefile. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Cleanup"><FONT class=extract>Cleanup</FONT></A><FONT class=extract>: Rules for cleaning the directory. </FONT></LI></UL>
<DIV class=node><A name=Rule-Introduction></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile" rel=next><FONT class=extract>Simple Makefile</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=previous><FONT class=extract>Introduction</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>2.1 What a Rule Looks Like</FONT></H3>
<P><A name=index-rule_002c-introduction-to-10></A><A name=index-makefile-rule-parts-11></A><A name=index-parts-of-makefile-rule-12></A><FONT class=extract>A simple makefile consists of &#8220;rules&#8221; with the following shape: </FONT>
<P><A name=index-targets_002c-introduction-to-13><FONT class=extract></FONT></A><A name=index-prerequisites_002c-introduction-to-14></A><A name=index-recipes_002c-introduction-to-15></A><PRE class=example><FONT class=extract>     <VAR>target</VAR> ... : <VAR>prerequisites</VAR> ...
             <VAR>recipe</VAR>
             ...
             ...
</FONT></PRE>
<P><FONT class=extract>A <DFN>target</DFN> is usually the name of a file that is generated by a program; examples of targets are executable or object files. A target can also be the name of an action to carry out, such as &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>A <DFN>prerequisite</DFN> is a file that is used as input to create the target. A target often depends on several files. </FONT>
<P><A name=index-tabs-in-rules-16></A><FONT class=extract>A <DFN>recipe</DFN> is an action that <CODE>make</CODE> carries out. A recipe may have more than one command, either on the same line or each on its own line. <STRONG>Please note:</STRONG> you need to put a tab character at the beginning of every recipe line! This is an obscurity that catches the unwary. If you prefer to prefix your recipes with a character other than tab, you can set the <CODE>.RECIPEPREFIX</CODE> variable to an alternate character (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Usually a recipe is in a rule with prerequisites and serves to create a target file if any of the prerequisites change. However, the rule that specifies a recipe for the target need not have prerequisites. For example, the rule containing the delete command associated with the target &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; does not have prerequisites. </FONT>
<P><FONT class=extract>A <DFN>rule</DFN>, then, explains how and when to remake certain files which are the targets of the particular rule. <CODE>make</CODE> carries out the recipe on the prerequisites to create or update the target. A rule can also explain how and when to carry out an action. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rules"><FONT class=extract>Writing Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>A makefile may contain other text besides rules, but a simple makefile need only contain rules. Rules may look somewhat more complicated than shown in this template, but all fit the pattern more or less. </FONT>
<DIV class=node><A name=Simple-Makefile></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works" rel=next><FONT class=extract>How Make Works</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction" rel=previous><FONT class=extract>Rule Introduction</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>2.2 A Simple Makefile</FONT></H3>
<P><A name=index-simple-makefile-17></A><A name=index-makefile_002c-simple-18></A><FONT class=extract>Here is a straightforward makefile that describes the way an executable file called <CODE>edit</CODE> depends on eight object files which, in turn, depend on eight C source and three header files. </FONT>
<P><FONT class=extract>In this example, all the C files include <SAMP><SPAN class=file>defs.h</SPAN></SAMP>, but only those defining editing commands include <SAMP><SPAN class=file>command.h</SPAN></SAMP>, and only low level files that change the editor buffer include <SAMP><SPAN class=file>buffer.h</SPAN></SAMP>. </FONT><PRE class=example><FONT class=extract>     edit : main.o kbd.o command.o display.o \
            insert.o search.o files.o utils.o
             cc -o edit main.o kbd.o command.o display.o \
                        insert.o search.o files.o utils.o
     
     main.o : main.c defs.h
             cc -c main.c
     kbd.o : kbd.c defs.h command.h
             cc -c kbd.c
     command.o : command.c defs.h command.h
             cc -c command.c
     display.o : display.c defs.h buffer.h
             cc -c display.c
     insert.o : insert.c defs.h buffer.h
             cc -c insert.c
     search.o : search.c defs.h buffer.h
             cc -c search.c
     files.o : files.c defs.h buffer.h command.h
             cc -c files.c
     utils.o : utils.c defs.h
             cc -c utils.c
     clean :
             rm edit main.o kbd.o command.o display.o \
                insert.o search.o files.o utils.o
</FONT></PRE>
<P class=noindent><FONT class=extract>We split each long line into two lines using backslash/newline; this is like using one long line, but is easier to read. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines"><FONT class=extract>Splitting Long Lines</FONT></A><FONT class=extract>. </FONT><A name=index-continuation-lines-19></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-for-continuation-lines-20></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-for-continuation-lines-21></A><A name=index-quoting-newline_002c-in-makefile-22></A><A name=index-newline_002c-quoting_002c-in-makefile-23></A><FONT class=extract>To use this makefile to create the executable file called <SAMP><SPAN class=file>edit</SPAN></SAMP>, type: </FONT><PRE class=example><FONT class=extract>     make
</FONT></PRE>
<P><FONT class=extract>To use this makefile to delete the executable file and all the object files from the directory, type: </FONT><PRE class=example><FONT class=extract>     make clean
</FONT></PRE>
<P><FONT class=extract>In the example makefile, the targets include the executable file &#8216;<SAMP><SPAN class=samp>edit</SPAN></SAMP>&#8217;, and the object files &#8216;<SAMP><SPAN class=samp>main.o</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>kbd.o</SPAN></SAMP>&#8217;. The prerequisites are files such as &#8216;<SAMP><SPAN class=samp>main.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>defs.h</SPAN></SAMP>&#8217;. In fact, each &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file is both a target and a prerequisite. Recipes include &#8216;<SAMP><SPAN class=samp>cc&nbsp;-c&nbsp;main.c</SPAN></SAMP>&#8217;<!-- /@w --> and &#8216;<SAMP><SPAN class=samp>cc&nbsp;-c&nbsp;kbd.c</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>When a target is a file, it needs to be recompiled or relinked if any of its prerequisites change. In addition, any prerequisites that are themselves automatically generated should be updated first. In this example, <SAMP><SPAN class=file>edit</SPAN></SAMP> depends on each of the eight object files; the object file <SAMP><SPAN class=file>main.o</SPAN></SAMP> depends on the source file <SAMP><SPAN class=file>main.c</SPAN></SAMP> and on the header file <SAMP><SPAN class=file>defs.h</SPAN></SAMP>. </FONT>
<P><FONT class=extract>A recipe may follow each line that contains a target and prerequisites. These recipes say how to update the target file. A tab character (or whatever character is specified by the <CODE>.RECIPEPREFIX</CODE> variable; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>) must come at the beginning of every line in the recipe to distinguish recipes from other lines in the makefile. (Bear in mind that <CODE>make</CODE> does not know anything about how the recipes work. It is up to you to supply recipes that will update the target file properly. All <CODE>make</CODE> does is execute the recipe you have specified when the target file needs to be updated.) </FONT><A name=index-recipe-24></A><FONT class=extract>The target &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; is not a file, but merely the name of an action. Since you normally do not want to carry out the actions in this rule, &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; is not a prerequisite of any other rule. Consequently, <CODE>make</CODE> never does anything with it unless you tell it specifically. Note that this rule not only is not a prerequisite, it also does not have any prerequisites, so the only purpose of the rule is to run the specified recipe. Targets that do not refer to files but are just actions are called <DFN>phony targets</DFN>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, for information about this kind of target. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>, to see how to cause <CODE>make</CODE> to ignore errors from <CODE>rm</CODE> or any other command. </FONT><A name=index-g_t_0040code_007bclean_007d-target-25></A><A name=index-g_t_0040code_007brm_007d-_0028shell-command_0029-26></A>
<DIV class=node><A name=How-Make-Works></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify" rel=next><FONT class=extract>Variables Simplify</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile" rel=previous><FONT class=extract>Simple Makefile</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>2.3 How <CODE>make</CODE> Processes a Makefile</FONT></H3>
<P><A name=index-processing-a-makefile-27></A><A name=index-makefile_002c-how-_0040code_007bmake_007d-processes-28></A><FONT class=extract>By default, <CODE>make</CODE> starts with the first target (not targets whose names start with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;). This is called the <DFN>default goal</DFN>. (<DFN>Goals</DFN> are the targets that <CODE>make</CODE> strives ultimately to update. You can override this behavior using the command line (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>) or with the <CODE>.DEFAULT_GOAL</CODE> special variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>). </FONT><A name=index-default-goal-29></A><A name=index-goal_002c-default-30></A><A name=index-goal-31></A><FONT class=extract>In the simple example of the previous section, the default goal is to update the executable program <SAMP><SPAN class=file>edit</SPAN></SAMP>; therefore, we put that rule first. </FONT>
<P><FONT class=extract>Thus, when you give the command: </FONT><PRE class=example><FONT class=extract>     make
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>make</CODE> reads the makefile in the current directory and begins by processing the first rule. In the example, this rule is for relinking <SAMP><SPAN class=file>edit</SPAN></SAMP>; but before <CODE>make</CODE> can fully process this rule, it must process the rules for the files that <SAMP><SPAN class=file>edit</SPAN></SAMP> depends on, which in this case are the object files. Each of these files is processed according to its own rule. These rules say to update each &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file by compiling its source file. The recompilation must be done if the source file, or any of the header files named as prerequisites, is more recent than the object file, or if the object file does not exist. </FONT>
<P><FONT class=extract>The other rules are processed because their targets appear as prerequisites of the goal. If some other rule is not depended on by the goal (or anything it depends on, etc.), that rule is not processed, unless you tell <CODE>make</CODE> to do so (with a command such as <CODE>make&nbsp;clean</CODE><!-- /@w -->). </FONT>
<P><FONT class=extract>Before recompiling an object file, <CODE>make</CODE> considers updating its prerequisites, the source file and header files. This makefile does not specify anything to be done for them&#8212;the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.h</SPAN></SAMP>&#8217; files are not the targets of any rules&#8212;so <CODE>make</CODE> does nothing for these files. But <CODE>make</CODE> would update automatically generated C programs, such as those made by Bison or Yacc, by their own rules at this time. </FONT>
<P><FONT class=extract>After recompiling whichever object files need it, <CODE>make</CODE> decides whether to relink <SAMP><SPAN class=file>edit</SPAN></SAMP>. This must be done if the file <SAMP><SPAN class=file>edit</SPAN></SAMP> does not exist, or if any of the object files are newer than it. If an object file was just recompiled, it is now newer than <SAMP><SPAN class=file>edit</SPAN></SAMP>, so <SAMP><SPAN class=file>edit</SPAN></SAMP> is relinked. </FONT><A name=index-relinking-32></A><FONT class=extract>Thus, if we change the file <SAMP><SPAN class=file>insert.c</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will compile that file to update <SAMP><SPAN class=file>insert.o</SPAN></SAMP>, and then link <SAMP><SPAN class=file>edit</SPAN></SAMP>. If we change the file <SAMP><SPAN class=file>command.h</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will recompile the object files <SAMP><SPAN class=file>kbd.o</SPAN></SAMP>, <SAMP><SPAN class=file>command.o</SPAN></SAMP> and <SAMP><SPAN class=file>files.o</SPAN></SAMP> and then link the file <SAMP><SPAN class=file>edit</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Variables-Simplify></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#make-Deduces" rel=next><FONT class=extract>make Deduces</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works" rel=previous><FONT class=extract>How Make Works</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>2.4 Variables Make Makefiles Simpler</FONT></H3>
<P><A name=index-variables-33></A><A name=index-simplifying-with-variables-34></A><FONT class=extract>In our example, we had to list all the object files twice in the rule for <SAMP><SPAN class=file>edit</SPAN></SAMP> (repeated here): </FONT><PRE class=example><FONT class=extract>     edit : main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o
             cc -o edit main.o kbd.o command.o display.o \
                        insert.o search.o files.o utils.o
</FONT></PRE>
<P><A name=index-g_t_0040code_007bobjects_007d-35></A><FONT class=extract>Such duplication is error-prone; if a new object file is added to the system, we might add it to one list and forget the other. We can eliminate the risk and simplify the makefile by using a variable. <DFN>Variables</DFN> allow a text string to be defined once and substituted in multiple places later (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0040code_007bOBJECTS_007d-36></A><A name=index-g_t_0040code_007bobjs_007d-37></A><A name=index-g_t_0040code_007bOBJS_007d-38></A><A name=index-g_t_0040code_007bobj_007d-39></A><A name=index-g_t_0040code_007bOBJ_007d-40></A><FONT class=extract>It is standard practice for every makefile to have a variable named <CODE>objects</CODE>, <CODE>OBJECTS</CODE>, <CODE>objs</CODE>, <CODE>OBJS</CODE>, <CODE>obj</CODE>, or <CODE>OBJ</CODE> which is a list of all object file names. We would define such a variable <CODE>objects</CODE> with a line like this in the makefile: </FONT><PRE class=example><FONT class=extract>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
</FONT></PRE>
<P class=noindent><FONT class=extract>Then, each place we want to put a list of the object file names, we can substitute the variable's value by writing &#8216;<SAMP><SPAN class=samp>$(objects)</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Here is how the complete simple makefile looks when you use a variable for the object files: </FONT><PRE class=example><FONT class=extract>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     main.o : main.c defs.h
             cc -c main.c
     kbd.o : kbd.c defs.h command.h
             cc -c kbd.c
     command.o : command.c defs.h command.h
             cc -c command.c
     display.o : display.c defs.h buffer.h
             cc -c display.c
     insert.o : insert.c defs.h buffer.h
             cc -c insert.c
     search.o : search.c defs.h buffer.h
             cc -c search.c
     files.o : files.c defs.h buffer.h command.h
             cc -c files.c
     utils.o : utils.c defs.h
             cc -c utils.c
     clean :
             rm edit $(objects)
</FONT></PRE>
<DIV class=node><A name=make-Deduces></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite" rel=next><FONT class=extract>Combine By Prerequisite</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify" rel=previous><FONT class=extract>Variables Simplify</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>2.5 Letting <CODE>make</CODE> Deduce the Recipes</FONT></H3>
<P><A name=index-deducing-recipes-_0028implicit-rules_0029-41></A><A name=index-implicit-rule_002c-introduction-to-42></A><A name=index-rule_002c-implicit_002c-introduction-to-43></A><FONT class=extract>It is not necessary to spell out the recipes for compiling the individual C source files, because <CODE>make</CODE> can figure them out: it has an <DFN>implicit rule</DFN> for updating a &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file from a correspondingly named &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file using a &#8216;<SAMP><SPAN class=samp>cc -c</SPAN></SAMP>&#8217; command. For example, it will use the recipe &#8216;<SAMP><SPAN class=samp>cc -c main.c -o main.o</SPAN></SAMP>&#8217; to compile <SAMP><SPAN class=file>main.c</SPAN></SAMP> into <SAMP><SPAN class=file>main.o</SPAN></SAMP>. We can therefore omit the recipes from the rules for the object files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>When a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file is used automatically in this way, it is also automatically added to the list of prerequisites. We can therefore omit the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files from the prerequisites, provided we omit the recipe. </FONT>
<P><FONT class=extract>Here is the entire example, with both of these changes, and a variable <CODE>objects</CODE> as suggested above: </FONT><PRE class=example><FONT class=extract>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     
     main.o : defs.h
     kbd.o : defs.h command.h
     command.o : defs.h command.h
     display.o : defs.h buffer.h
     insert.o : defs.h buffer.h
     search.o : defs.h buffer.h
     files.o : defs.h buffer.h command.h
     utils.o : defs.h
     
     .PHONY : clean
     clean :
             rm edit $(objects)
</FONT></PRE>
<P class=noindent><FONT class=extract>This is how we would write the makefile in actual practice. (The complications associated with &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; are described elsewhere. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, and </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Because implicit rules are so convenient, they are important. You will see them used frequently. </FONT>
<DIV class=node><A name=Combine-By-Prerequisite></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Cleanup" rel=next><FONT class=extract>Cleanup</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#make-Deduces" rel=previous><FONT class=extract>make Deduces</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>2.6 Another Style of Makefile</FONT></H3>
<P><A name=index-combining-rules-by-prerequisite-44></A><FONT class=extract>When the objects of a makefile are created only by implicit rules, an alternative style of makefile is possible. In this style of makefile, you group entries by their prerequisites instead of by their targets. Here is what one looks like: </FONT><PRE class=example><FONT class=extract>     objects = main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
     
     edit : $(objects)
             cc -o edit $(objects)
     
     $(objects) : defs.h
     kbd.o command.o files.o : command.h
     display.o insert.o search.o files.o : buffer.h
</FONT></PRE>
<P class=noindent><FONT class=extract>Here <SAMP><SPAN class=file>defs.h</SPAN></SAMP> is given as a prerequisite of all the object files; <SAMP><SPAN class=file>command.h</SPAN></SAMP> and <SAMP><SPAN class=file>buffer.h</SPAN></SAMP> are prerequisites of the specific object files listed for them. </FONT>
<P><FONT class=extract>Whether this is better is a matter of taste: it is more compact, but some people dislike it because they find it clearer to put all the information about each target in one place. </FONT>
<DIV class=node><A name=Cleanup></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite" rel=previous><FONT class=extract>Combine By Prerequisite</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=up><FONT class=extract>Introduction</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>2.7 Rules for Cleaning the Directory</FONT></H3>
<P><A name=index-cleaning-up-45></A><A name=index-removing_002c-to-clean-up-46></A><FONT class=extract>Compiling a program is not the only thing you might want to write rules for. Makefiles commonly tell how to do a few other things besides compiling a program: for example, how to delete all the object files and executables so that the directory is &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_0040code_007bclean_007d-target-47></A><FONT class=extract>Here is how we could write a <CODE>make</CODE> rule for cleaning our example editor: </FONT><PRE class=example><FONT class=extract>     clean:
             rm edit $(objects)
</FONT></PRE>
<P><FONT class=extract>In practice, we might want to write the rule in a somewhat more complicated manner to handle unanticipated situations. We would do this: </FONT><PRE class=example><FONT class=extract>     .PHONY : clean
     clean :
             -rm edit $(objects)
</FONT></PRE>
<P class=noindent><FONT class=extract>This prevents <CODE>make</CODE> from getting confused by an actual file called <SAMP><SPAN class=file>clean</SPAN></SAMP> and causes it to continue in spite of errors from <CODE>rm</CODE>. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, and </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>.) </FONT>
<P class=noindent><FONT class=extract>A rule such as this should not be placed at the beginning of the makefile, because we do not want it to run by default! Thus, in the example makefile, we want the rule for <CODE>edit</CODE>, which recompiles the editor, to remain the default goal. </FONT>
<P><FONT class=extract>Since <CODE>clean</CODE> is not a prerequisite of <CODE>edit</CODE>, this rule will not run at all if we give the command &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; with no arguments. In order to make the rule run, we have to type &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Running"><FONT class=extract>How to Run <CODE>make</CODE></FONT></A><FONT class=extract>.</FONT> 
<DIV class=node><A name=Makefiles></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=next>Rules</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Introduction" rel=previous>Introduction</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>3 Writing Makefiles</FONT></H2>
<P><A name=index-makefile_002c-how-to-write-48></A><FONT class=extract>The information that tells <CODE>make</CODE> how to recompile a system comes from reading a data base called the <DFN>makefile</DFN>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents"><FONT class=extract>Makefile Contents</FONT></A><FONT class=extract>: What makefiles contain. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names"><FONT class=extract>Makefile Names</FONT></A><FONT class=extract>: How to name your makefile. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Include</FONT></A><FONT class=extract>: How one makefile can use another makefile. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable"><FONT class=extract>MAKEFILES Variable</FONT></A><FONT class=extract>: The environment can specify extra makefiles. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>Remaking Makefiles</FONT></A><FONT class=extract>: How makefiles get remade. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles"><FONT class=extract>Overriding Makefiles</FONT></A><FONT class=extract>: How to override part of one makefile with another makefile. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles"><FONT class=extract>Reading Makefiles</FONT></A><FONT class=extract>: How makefiles are parsed. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>: How and when secondary expansion is performed. </FONT></LI></UL>
<DIV class=node><A name=Makefile-Contents></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names" rel=next><FONT class=extract>Makefile Names</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=previous><FONT class=extract>Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.1 What Makefiles Contain</FONT></H3>
<P><FONT class=extract>Makefiles contain five kinds of things: <DFN>explicit rules</DFN>, <DFN>implicit rules</DFN>, <DFN>variable definitions</DFN>, <DFN>directives</DFN>, and <DFN>comments</DFN>. Rules, variables, and directives are described at length in later chapters. </FONT><A name=index-rule_002c-explicit_002c-definition-of-49></A><A name=index-explicit-rule_002c-definition-of-50></A>
<UL>
<LI><FONT class=extract>An <DFN>explicit rule</DFN> says when and how to remake one or more files, called the rule's <DFN>targets</DFN>. It lists the other files that the targets depend on, called the <DFN>prerequisites</DFN> of the target, and may also give a recipe to use to create or update the targets. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rules"><FONT class=extract>Writing Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-rule_002c-implicit_002c-definition-of-51></A><A name=index-implicit-rule_002c-definition-of-52></A></P>
<LI><FONT class=extract>An <DFN>implicit rule</DFN> says when and how to remake a class of files based on their names. It describes how a target may depend on a file with a name similar to the target and gives a recipe to create or update such a target. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-variable-definition-53></A></P>
<LI><FONT class=extract>A <DFN>variable definition</DFN> is a line that specifies a text string value for a variable that can be substituted into the text later. The simple makefile example shows a variable definition for <CODE>objects</CODE> as a list of all object files (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify"><FONT class=extract>Variables Make Makefiles Simpler</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-directive-54></A></P>
<LI><FONT class=extract>A <DFN>directive</DFN> is an instruction for <CODE>make</CODE> to do something special while reading the makefile. These include: </FONT>
<UL>
<LI><FONT class=extract>Reading another makefile (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>). </FONT>
<LI><FONT class=extract>Deciding (based on the values of variables) whether to use or ignore a part of the makefile (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditional Parts of Makefiles</FONT></A><FONT class=extract>). </FONT>
<LI><FONT class=extract>Defining a variable from a verbatim string containing multiple lines (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>). </FONT></LI></UL>
<P><A name=index-comments_002c-in-makefile-55><FONT class=extract></FONT></A><A name=index-g_t_0040code_007b_0023_007d-_0028comments_0029_002c-in-makefile-56></A></P>
<LI><FONT class=extract>&#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; in a line of a makefile starts a <DFN>comment</DFN>. It and the rest of the line are ignored, except that a trailing backslash not escaped by another backslash will continue the comment across multiple lines. A line containing just a comment (with perhaps spaces before it) is effectively blank, and is ignored. If you want a literal <CODE>#</CODE>, escape it with a backslash (e.g., <CODE>\#</CODE>). Comments may appear on any line in the makefile, although they are treated specially in certain situations. </FONT>
<P><FONT class=extract>You cannot use comments within variable references or function calls: any instance of <CODE>#</CODE> will be treated literally (rather than as the start of a comment) inside a variable reference or function call. </FONT>
<P><FONT class=extract>Comments within a recipe are passed to the shell, just as with any other recipe text. The shell decides how to interpret it: whether or not this is a comment is up to the shell. </FONT>
<P><FONT class=extract>Within a <CODE>define</CODE> directive, comments are not ignored during the definition of the variable, but rather kept intact in the value of the variable. When the variable is expanded they will either be treated as <CODE>make</CODE> comments or as recipe text, depending on the context in which the variable is evaluated. </FONT></P></LI></UL>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines"><FONT class=extract>Splitting Lines</FONT></A><FONT class=extract>: Splitting long lines in makefiles </FONT></LI></UL>
<DIV class=node><A name=Splitting-Lines></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents" rel=previous><FONT class=extract>Makefile Contents</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents" rel=up><FONT class=extract>Makefile Contents</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>3.1.1 Splitting Long Lines</FONT></H4>
<P><A name=index-splitting-long-lines-57></A><A name=index-long-lines_002c-splitting-58></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-newlines-59></A><FONT class=extract>Makefiles use a &#8220;line-based&#8221; syntax in which the newline character is special and marks the end of a statement. GNU <CODE>make</CODE> has no limit on the length of a statement line, up to the amount of memory in your computer. </FONT>
<P><FONT class=extract>However, it is difficult to read lines which are too long to display without wrapping or scrolling. So, you can format your makefiles for readability by adding newlines into the middle of a statement: you do this by escaping the internal newlines with a backslash (<CODE>\</CODE>) character. Where we need to make a distinction we will refer to &#8220;physical lines&#8221; as a single line ending with a newline (regardless of whether it is escaped) and a &#8220;logical line&#8221; being a complete statement including all escaped newlines up to the first non-escaped newline. </FONT>
<P><FONT class=extract>The way in which backslash/newline combinations are handled depends on whether the statement is a recipe line or a non-recipe line. Handling of backslash/newline in a recipe line is discussed later (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines"><FONT class=extract>Splitting Recipe Lines</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Outside of recipe lines, backslash/newlines are converted into a single space character. Once that is done, all whitespace around the backslash/newline is condensed into a single space: this includes all whitespace preceding the backslash, all whitespace at the beginning of the line after the backslash/newline, and any consecutive backslash/newline combinations. </FONT>
<P><FONT class=extract>If the <CODE>.POSIX</CODE> special target is defined then backslash/newline handling is modified slightly to conform to POSIX.2: first, whitespace preceding a backslash is not removed and second, consecutive backslash/newlines are not condensed. </FONT>
<DIV class=node><A name=Makefile-Names></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Include" rel=next><FONT class=extract>Include</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents" rel=previous><FONT class=extract>Makefile Contents</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.2 What Name to Give Your Makefile</FONT></H3>
<P><A name=index-makefile-name-60></A><A name=index-name-of-makefile-61></A><A name=index-default-makefile-name-62></A><A name=index-file-name-of-makefile-63></A><!-- following paragraph rewritten to avoid overfull hbox --><FONT class=extract>By default, when <CODE>make</CODE> looks for the makefile, it tries the following names, in order: <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, <SAMP><SPAN class=file>makefile</SPAN></SAMP> and <SAMP><SPAN class=file>Makefile</SPAN></SAMP>. </FONT><A name=index-Makefile-64></A><A name=index-GNUmakefile-65></A><A name=index-makefile-66></A><A name=index-g_t_0040code_007bREADME_007d-67></A><FONT class=extract>Normally you should call your makefile either <SAMP><SPAN class=file>makefile</SPAN></SAMP> or <SAMP><SPAN class=file>Makefile</SPAN></SAMP>. (We recommend <SAMP><SPAN class=file>Makefile</SPAN></SAMP> because it appears prominently near the beginning of a directory listing, right near other important files such as <SAMP><SPAN class=file>README</SPAN></SAMP>.) The first name checked, <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, is not recommended for most makefiles. You should use this name if you have a makefile that is specific to GNU <CODE>make</CODE>, and will not be understood by other versions of <CODE>make</CODE>. Other <CODE>make</CODE> programs look for <SAMP><SPAN class=file>makefile</SPAN></SAMP> and <SAMP><SPAN class=file>Makefile</SPAN></SAMP>, but not <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If <CODE>make</CODE> finds none of these names, it does not use any makefile. Then you must specify a goal with a command argument, and <CODE>make</CODE> will attempt to figure out how to remake it using only its built-in implicit rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_0040code_007b_002df_007d-68></A><A name=index-g_t_0040code_007b_002d_002dfile_007d-69></A><A name=index-g_t_0040code_007b_002d_002dmakefile_007d-70></A><FONT class=extract>If you want to use a nonstandard name for your makefile, you can specify the makefile name with the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; option. The arguments &#8216;<SAMP><SPAN class=samp>-f&nbsp;</SPAN><VAR>name</VAR></SAMP>&#8217;<!-- /@w --> or &#8216;<SAMP><SPAN class=samp>--file=</SPAN><VAR>name</VAR></SAMP>&#8217;<!-- /@w --> tell <CODE>make</CODE> to read the file <VAR>name</VAR> as the makefile. If you use more than one &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; option, you can specify several makefiles. All the makefiles are effectively concatenated in the order specified. The default makefile names <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, <SAMP><SPAN class=file>makefile</SPAN></SAMP> and <SAMP><SPAN class=file>Makefile</SPAN></SAMP> are not checked automatically if you specify &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217;. </FONT><A name=index-specifying-makefile-name-71></A><A name=index-makefile-name_002c-how-to-specify-72></A><A name=index-name-of-makefile_002c-how-to-specify-73></A><A name=index-file-name-of-makefile_002c-how-to-specify-74></A>
<DIV class=node><A name=Include></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable" rel=next><FONT class=extract>MAKEFILES Variable</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names" rel=previous><FONT class=extract>Makefile Names</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.3 Including Other Makefiles</FONT></H3>
<P><A name=index-including-other-makefiles-75></A><A name=index-makefile_002c-including-76></A><A name=index-include-77></A><FONT class=extract>The <CODE>include</CODE> directive tells <CODE>make</CODE> to suspend reading the current makefile and read one or more other makefiles before continuing. The directive is a line in the makefile that looks like this: </FONT><PRE class=example><FONT class=extract>     include <VAR>filenames</VAR>...
</FONT></PRE>
<P class=noindent><FONT class=extract><VAR>filenames</VAR> can contain shell file name patterns. If <VAR>filenames</VAR> is empty, nothing is included and no error is printed. </FONT><A name=index-shell-file-name-pattern-_0028in-_0040code_007binclude_007d_0029-78></A><A name=index-shell-wildcards-_0028in-_0040code_007binclude_007d_0029-79></A><A name=index-wildcard_002c-in-_0040code_007binclude_007d-80></A><FONT class=extract>Extra spaces are allowed and ignored at the beginning of the line, but the first character must not be a tab (or the value of <CODE>.RECIPEPREFIX</CODE>)&#8212;if the line begins with a tab, it will be considered a recipe line. Whitespace is required between <CODE>include</CODE> and the file names, and between file names; extra whitespace is ignored there and at the end of the directive. A comment starting with &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; is allowed at the end of the line. If the file names contain any variable or function references, they are expanded. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>For example, if you have three <SAMP><SPAN class=file>.mk</SPAN></SAMP> files, <SAMP><SPAN class=file>a.mk</SPAN></SAMP>, <SAMP><SPAN class=file>b.mk</SPAN></SAMP>, and <SAMP><SPAN class=file>c.mk</SPAN></SAMP>, and <CODE>$(bar)</CODE> expands to <CODE>bish bash</CODE>, then the following expression </FONT><PRE class=example><FONT class=extract>     include foo *.mk $(bar)
</FONT></PRE>
<P><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>     include foo a.mk b.mk c.mk bish bash
</FONT></PRE>
<P><FONT class=extract>When <CODE>make</CODE> processes an <CODE>include</CODE> directive, it suspends reading of the containing makefile and reads from each listed file in turn. When that is finished, <CODE>make</CODE> resumes reading the makefile in which the directive appears. </FONT>
<P><FONT class=extract>One occasion for using <CODE>include</CODE> directives is when several programs, handled by individual makefiles in various directories, need to use a common set of variable definitions (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>) or pattern rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Another such occasion is when you want to generate prerequisites from source files automatically; the prerequisites can be put in a file that is included by the main makefile. This practice is generally cleaner than that of somehow appending the prerequisites to the end of the main makefile as has been traditionally done with other versions of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites"><FONT class=extract>Automatic Prerequisites</FONT></A><FONT class=extract>. </FONT><A name=index-prerequisites_002c-automatic-generation-81></A><A name=index-automatic-generation-of-prerequisites-82></A><A name=index-generating-prerequisites-automatically-83></A><A name=index-g_t_0040code_007b_002dI_007d-84></A><A name=index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-85></A><A name=index-included-makefiles_002c-default-directories-86></A><A name=index-default-directories-for-included-makefiles-87></A><A name=index-g_t_002fusr_002fgnu_002finclude-88></A><A name=index-g_t_002fusr_002flocal_002finclude-89></A><A name=index-g_t_002fusr_002finclude-90></A><FONT class=extract>If the specified name does not start with a slash, and the file is not found in the current directory, several other directories are searched. First, any directories you have specified with the &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--include-dir</SPAN></SAMP>&#8217; option are searched (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). Then the following directories (if they exist) are searched, in this order: <SAMP><VAR>prefix</VAR><SPAN class=file>/include</SPAN></SAMP> (normally <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP> </FONT><A href="https://www.gnu.org/software/make/manual/make.html#fn-1" rel=footnote name=fnd-1><SUP><FONT class=extract>1</FONT></SUP></A><FONT class=extract>) <SAMP><SPAN class=file>/usr/gnu/include</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/include</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If an included makefile cannot be found in any of these directories, a warning message is generated, but it is not an immediately fatal error; processing of the makefile containing the <CODE>include</CODE> continues. Once it has finished reading makefiles, <CODE>make</CODE> will try to remake any that are out of date or don't exist. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>. Only after it has tried to find a way to remake a makefile and failed, will <CODE>make</CODE> diagnose the missing makefile as a fatal error. </FONT>
<P><FONT class=extract>If you want <CODE>make</CODE> to simply ignore a makefile which does not exist or cannot be remade, with no error message, use the <CODE>-include</CODE><!-- /@w --> directive instead of <CODE>include</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     -include <VAR>filenames</VAR>...
</FONT></PRE>
<P><FONT class=extract>This acts like <CODE>include</CODE> in every way except that there is no error (not even a warning) if any of the <VAR>filenames</VAR> (or any prerequisites of any of the <VAR>filenames</VAR>) do not exist or cannot be remade. </FONT>
<P><FONT class=extract>For compatibility with some other <CODE>make</CODE> implementations, <CODE>sinclude</CODE> is another name for <CODE>-include</CODE><!-- /@w -->. </FONT>
<DIV class=node><A name=MAKEFILES-Variable></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles" rel=next><FONT class=extract>Remaking Makefiles</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Include" rel=previous><FONT class=extract>Include</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.4 The Variable <CODE>MAKEFILES</CODE></FONT></H3>
<P><A name=index-makefile_002c-and-_0040code_007bMAKEFILES_007d-variable-91></A><A name=index-including-_0028_0040code_007bMAKEFILES_007d-variable_0029-92></A><A name=index-MAKEFILES-93></A><FONT class=extract>If the environment variable <CODE>MAKEFILES</CODE> is defined, <CODE>make</CODE> considers its value as a list of names (separated by whitespace) of additional makefiles to be read before the others. This works much like the <CODE>include</CODE> directive: various directories are searched for those files (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>). In addition, the default goal is never taken from one of these makefiles (or any makefile included by them) and it is not an error if the files listed in <CODE>MAKEFILES</CODE> are not found. </FONT>
<P><A name=index-recursion_002c-and-_0040code_007bMAKEFILES_007d-variable-94></A><FONT class=extract>The main use of <CODE>MAKEFILES</CODE> is in communication between recursive invocations of <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). It usually is not desirable to set the environment variable before a top-level invocation of <CODE>make</CODE>, because it is usually better not to mess with a makefile from outside. However, if you are running <CODE>make</CODE> without a specific makefile, a makefile in <CODE>MAKEFILES</CODE> can do useful things to help the built-in implicit rules work better, such as defining search paths (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Directory Search</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Some users are tempted to set <CODE>MAKEFILES</CODE> in the environment automatically on login, and program makefiles to expect this to be done. This is a very bad idea, because such makefiles will fail to work if run by anyone else. It is much better to write explicit <CODE>include</CODE> directives in the makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Remaking-Makefiles></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles" rel=next><FONT class=extract>Overriding Makefiles</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable" rel=previous><FONT class=extract>MAKEFILES Variable</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.5 How Makefiles Are Remade</FONT></H3>
<P><A name=index-updating-makefiles-95></A><A name=index-remaking-makefiles-96></A><A name=index-makefile_002c-remaking-of-97></A><FONT class=extract>Sometimes makefiles can be remade from other files, such as RCS or SCCS files. If a makefile can be remade from other files, you probably want <CODE>make</CODE> to get an up-to-date version of the makefile to read in. </FONT>
<P><FONT class=extract>To this end, after reading in all makefiles, <CODE>make</CODE> will consider each as a goal target and attempt to update it. If a makefile has a rule which says how to update it (found either in that very makefile or in another one) or if an implicit rule applies to it (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>), it will be updated if necessary. After all makefiles have been checked, if any have actually been changed, <CODE>make</CODE> starts with a clean slate and reads all the makefiles over again. (It will also attempt to update each of them over again, but normally this will not change them again, since they are already up to date.) </FONT>
<P><FONT class=extract>If you know that one or more of your makefiles cannot be remade and you want to keep <CODE>make</CODE> from performing an implicit rule search on them, perhaps for efficiency reasons, you can use any normal method of preventing implicit rule look-up to do so. For example, you can write an explicit rule with the makefile as the target, and an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Using Empty Recipes</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>If the makefiles specify a double-colon rule to remake a file with a recipe but no prerequisites, that file will always be remade (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon"><FONT class=extract>Double-Colon</FONT></A><FONT class=extract>). In the case of makefiles, a makefile that has a double-colon rule with a recipe but no prerequisites will be remade every time <CODE>make</CODE> is run, and then again after <CODE>make</CODE> starts over and reads the makefiles in again. This would cause an infinite loop: <CODE>make</CODE> would constantly remake the makefile, and never do anything else. So, to avoid this, <CODE>make</CODE> will <STRONG>not</STRONG> attempt to remake makefiles which are specified as targets of a double-colon rule with a recipe but no prerequisites. </FONT>
<P><FONT class=extract>If you do not specify any makefiles to be read with &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; options, <CODE>make</CODE> will try the default makefile names; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names"><FONT class=extract>What Name to Give Your Makefile</FONT></A><FONT class=extract>. Unlike makefiles explicitly requested with &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; options, <CODE>make</CODE> is not certain that these makefiles should exist. However, if a default makefile does not exist but can be created by running <CODE>make</CODE> rules, you probably want the rules to be run so that the makefile can be used. </FONT>
<P><FONT class=extract>Therefore, if none of the default makefiles exists, <CODE>make</CODE> will try to make each of them in the same order in which they are searched for (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names"><FONT class=extract>What Name to Give Your Makefile</FONT></A><FONT class=extract>) until it succeeds in making one, or it runs out of names to try. Note that it is not an error if <CODE>make</CODE> cannot find or make any makefile; a makefile is not always necessary. </FONT>
<P><FONT class=extract>When you use the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217; option (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>), you would not want to use an out-of-date makefile to decide which targets to touch. So the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; option has no effect on updating makefiles; they are really updated even if &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; is specified. Likewise, &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; (or &#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217;) and &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; (or &#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217;) do not prevent updating of makefiles, because an out-of-date makefile would result in the wrong output for other targets. Thus, &#8216;<SAMP><SPAN class=samp>make -f mfile -n foo</SPAN></SAMP>&#8217; will update <SAMP><SPAN class=file>mfile</SPAN></SAMP>, read it in, and then print the recipe to update <SAMP><SPAN class=file>foo</SPAN></SAMP> and its prerequisites without running it. The recipe printed for <SAMP><SPAN class=file>foo</SPAN></SAMP> will be the one specified in the updated contents of <SAMP><SPAN class=file>mfile</SPAN></SAMP>. </FONT>
<P><FONT class=extract>However, on occasion you might actually wish to prevent updating of even the makefiles. You can do this by specifying the makefiles as goals in the command line as well as specifying them as makefiles. When the makefile name is specified explicitly as a goal, the options &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; and so on do apply to them. </FONT>
<P><FONT class=extract>Thus, &#8216;<SAMP><SPAN class=samp>make -f mfile -n mfile foo</SPAN></SAMP>&#8217; would read the makefile <SAMP><SPAN class=file>mfile</SPAN></SAMP>, print the recipe needed to update it without actually running it, and then print the recipe needed to update <SAMP><SPAN class=file>foo</SPAN></SAMP> without running that. The recipe for <SAMP><SPAN class=file>foo</SPAN></SAMP> will be the one specified by the existing contents of <SAMP><SPAN class=file>mfile</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Overriding-Makefiles></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles" rel=next><FONT class=extract>Reading Makefiles</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles" rel=previous><FONT class=extract>Remaking Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.6 Overriding Part of Another Makefile</FONT></H3>
<P><A name=index-overriding-makefiles-98></A><A name=index-makefile_002c-overriding-99></A><FONT class=extract>Sometimes it is useful to have a makefile that is mostly just like another makefile. You can often use the &#8216;<SAMP><SPAN class=samp>include</SPAN></SAMP>&#8217; directive to include one in the other, and add more targets or variable definitions. However, it is invalid for two makefiles to give different recipes for the same target. But there is another way. </FONT>
<P><A name=index-match_002danything-rule_002c-used-to-override-100></A><FONT class=extract>In the containing makefile (the one that wants to include the other), you can use a match-anything pattern rule to say that to remake any target that cannot be made from the information in the containing makefile, <CODE>make</CODE> should look in another makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>, for more information on pattern rules. </FONT>
<P><FONT class=extract>For example, if you have a makefile called <SAMP><SPAN class=file>Makefile</SPAN></SAMP> that says how to make the target &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; (and other targets), you can write a makefile called <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP> that contains: </FONT><PRE class=example><FONT class=extract>     foo:
             frobnicate &gt; foo
     
     %: force
             @$(MAKE) -f Makefile $@
     force: ;
</FONT></PRE>
<P><FONT class=extract>If you say &#8216;<SAMP><SPAN class=samp>make foo</SPAN></SAMP>&#8217;, <CODE>make</CODE> will find <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, read it, and see that to make <SAMP><SPAN class=file>foo</SPAN></SAMP>, it needs to run the recipe &#8216;<SAMP><SPAN class=samp>frobnicate &gt; foo</SPAN></SAMP>&#8217;. If you say &#8216;<SAMP><SPAN class=samp>make bar</SPAN></SAMP>&#8217;, <CODE>make</CODE> will find no way to make <SAMP><SPAN class=file>bar</SPAN></SAMP> in <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, so it will use the recipe from the pattern rule: &#8216;<SAMP><SPAN class=samp>make -f Makefile bar</SPAN></SAMP>&#8217;. If <SAMP><SPAN class=file>Makefile</SPAN></SAMP> provides a rule for updating <SAMP><SPAN class=file>bar</SPAN></SAMP>, <CODE>make</CODE> will apply the rule. And likewise for any other target that <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP> does not say how to make. </FONT>
<P><FONT class=extract>The way this works is that the pattern rule has a pattern of just &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, so it matches any target whatever. The rule specifies a prerequisite <SAMP><SPAN class=file>force</SPAN></SAMP>, to guarantee that the recipe will be run even if the target file already exists. We give the <SAMP><SPAN class=file>force</SPAN></SAMP> target an empty recipe to prevent <CODE>make</CODE> from searching for an implicit rule to build it&#8212;otherwise it would apply the same match-anything rule to <SAMP><SPAN class=file>force</SPAN></SAMP> itself and create a prerequisite loop! </FONT>
<DIV class=node><A name=Reading-Makefiles></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion" rel=next><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles" rel=previous><FONT class=extract>Overriding Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.7 How <CODE>make</CODE> Reads a Makefile</FONT></H3>
<P><A name=index-reading-makefiles-101></A><A name=index-makefile_002c-parsing-102></A><FONT class=extract>GNU <CODE>make</CODE> does its work in two distinct phases. During the first phase it reads all the makefiles, included makefiles, etc. and internalizes all the variables and their values, implicit and explicit rules, and constructs a dependency graph of all the targets and their prerequisites. During the second phase, <CODE>make</CODE> uses these internal structures to determine what targets will need to be rebuilt and to invoke the rules necessary to do so. </FONT>
<P><FONT class=extract>It's important to understand this two-phase approach because it has a direct impact on how variable and function expansion happens; this is often a source of some confusion when writing makefiles. Here we will present a summary of the phases in which expansion happens for different constructs within the makefile. We say that expansion is <DFN>immediate</DFN> if it happens during the first phase: in this case <CODE>make</CODE> will expand any variables or functions in that section of a construct as the makefile is parsed. We say that expansion is <DFN>deferred</DFN> if expansion is not performed immediately. Expansion of a deferred construct is not performed until either the construct appears later in an immediate context, or until the second phase. </FONT>
<P><FONT class=extract>You may not be familiar with some of these constructs yet. You can reference this section as you become familiar with them, in later chapters. </FONT>
<H4 class=subheading><FONT class=extract>Variable Assignment</FONT></H4>
<P><A name=index-g_t_002b_003d_002c-expansion-103></A><A name=index-g_t_003d_002c-expansion-104></A><A name=index-g_t_003f_003d_002c-expansion-105></A><A name=index-g_t_002b_003d_002c-expansion-106></A><A name=index-g_t_0021_003d_002c-expansion-107></A><A name=index-define_002c-expansion-108></A><FONT class=extract>Variable definitions are parsed as follows: </FONT><PRE class=example><FONT class=extract>     <VAR>immediate</VAR> = <VAR>deferred</VAR>
     <VAR>immediate</VAR> ?= <VAR>deferred</VAR>
     <VAR>immediate</VAR> := <VAR>immediate</VAR>
     <VAR>immediate</VAR> ::= <VAR>immediate</VAR>
     <VAR>immediate</VAR> += <VAR>deferred</VAR> or <VAR>immediate</VAR>
     <VAR>immediate</VAR> != <VAR>immediate</VAR>
     
     define <VAR>immediate</VAR>
       <VAR>deferred</VAR>
     endef
     
     define <VAR>immediate</VAR> =
       <VAR>deferred</VAR>
     endef
     
     define <VAR>immediate</VAR> ?=
       <VAR>deferred</VAR>
     endef
     
     define <VAR>immediate</VAR> :=
       <VAR>immediate</VAR>
     endef
     
     define <VAR>immediate</VAR> ::=
       <VAR>immediate</VAR>
     endef
     
     define <VAR>immediate</VAR> +=
       <VAR>deferred</VAR> or <VAR>immediate</VAR>
     endef
     
     define <VAR>immediate</VAR> !=
       <VAR>immediate</VAR>
     endef
</FONT></PRE>
<P><FONT class=extract>For the append operator, &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;, the right-hand side is considered immediate if the variable was previously set as a simple variable (&#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;), and deferred otherwise. </FONT>
<P><FONT class=extract>For the shell assignment operator, &#8216;<SAMP><SPAN class=samp>!=</SPAN></SAMP>&#8217;, the right-hand side is evaluated immediately and handed to the shell. The result is stored in the variable named on the left, and that variable becomes a simple variable (and will thus be re-evaluated on each reference). </FONT>
<H4 class=subheading><FONT class=extract>Conditional Directives</FONT></H4>
<P><A name=index-ifdef_002c-expansion-109></A><A name=index-ifeq_002c-expansion-110></A><A name=index-ifndef_002c-expansion-111></A><A name=index-ifneq_002c-expansion-112></A><FONT class=extract>Conditional directives are parsed immediately. This means, for example, that automatic variables cannot be used in conditional directives, as automatic variables are not set until the recipe for that rule is invoked. If you need to use automatic variables in a conditional directive you <EM>must</EM> move the condition into the recipe and use shell conditional syntax instead. </FONT>
<H4 class=subheading><FONT class=extract>Rule Definition</FONT></H4>
<P><A name=index-target_002c-expansion-113></A><A name=index-prerequisite_002c-expansion-114></A><A name=index-implicit-rule_002c-expansion-115></A><A name=index-pattern-rule_002c-expansion-116></A><A name=index-explicit-rule_002c-expansion-117></A><FONT class=extract>A rule is always expanded the same way, regardless of the form: </FONT><PRE class=example><FONT class=extract>     <VAR>immediate</VAR> : <VAR>immediate</VAR> ; <VAR>deferred</VAR>
     	<VAR>deferred</VAR>
</FONT></PRE>
<P><FONT class=extract>That is, the target and prerequisite sections are expanded immediately, and the recipe used to construct the target is always deferred. This general rule is true for explicit rules, pattern rules, suffix rules, static pattern rules, and simple prerequisite definitions. </FONT>
<DIV class=node><A name=Secondary-Expansion></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles" rel=previous><FONT class=extract>Reading Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=up><FONT class=extract>Makefiles</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>3.8 Secondary Expansion</FONT></H3>
<P><A name=index-secondary-expansion-118></A><A name=index-expansion_002c-secondary-119></A><A name=index-g_t_002eSECONDEXPANSION-120></A><FONT class=extract>In the previous section we learned that GNU <CODE>make</CODE> works in two distinct phases: a read-in phase and a target-update phase (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles"><FONT class=extract>How <CODE>make</CODE> Reads a Makefile</FONT></A><FONT class=extract>). GNU make also has the ability to enable a <EM>second expansion</EM> of the prerequisites (only) for some or all targets defined in the makefile. In order for this second expansion to occur, the special target <CODE>.SECONDEXPANSION</CODE> must be defined before the first prerequisite list that makes use of this feature. </FONT>
<P><FONT class=extract>If that special target is defined then in between the two phases mentioned above, right at the end of the read-in phase, all the prerequisites of the targets defined after the special target are expanded a <EM>second time</EM>. In most circumstances this secondary expansion will have no effect, since all variable and function references will have been expanded during the initial parsing of the makefiles. In order to take advantage of the secondary expansion phase of the parser, then, it's necessary to <EM>escape</EM> the variable or function reference in the makefile. In this case the first expansion merely un-escapes the reference but doesn't expand it, and expansion is left to the secondary expansion phase. For example, consider this makefile: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     ONEVAR = onefile
     TWOVAR = twofile
     myfile: $(ONEVAR) $$(TWOVAR)
</FONT></PRE>
<P><FONT class=extract>After the first expansion phase the prerequisites list of the <SAMP><SPAN class=file>myfile</SPAN></SAMP> target will be <CODE>onefile</CODE> and <CODE>$(TWOVAR)</CODE>; the first (unescaped) variable reference to <VAR>ONEVAR</VAR> is expanded, while the second (escaped) variable reference is simply unescaped, without being recognized as a variable reference. Now during the secondary expansion the first word is expanded again but since it contains no variable or function references it remains the value <SAMP><SPAN class=file>onefile</SPAN></SAMP>, while the second word is now a normal reference to the variable <VAR>TWOVAR</VAR>, which is expanded to the value <SAMP><SPAN class=file>twofile</SPAN></SAMP>. The final result is that there are two prerequisites, <SAMP><SPAN class=file>onefile</SPAN></SAMP> and <SAMP><SPAN class=file>twofile</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Obviously, this is not a very interesting case since the same result could more easily have been achieved simply by having both variables appear, unescaped, in the prerequisites list. One difference becomes apparent if the variables are reset; consider this example: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     AVAR = top
     onefile: $(AVAR)
     twofile: $$(AVAR)
     AVAR = bottom
</FONT></PRE>
<P><FONT class=extract>Here the prerequisite of <SAMP><SPAN class=file>onefile</SPAN></SAMP> will be expanded immediately, and resolve to the value <SAMP><SPAN class=file>top</SPAN></SAMP>, while the prerequisite of <SAMP><SPAN class=file>twofile</SPAN></SAMP> will not be full expanded until the secondary expansion and yield a value of <SAMP><SPAN class=file>bottom</SPAN></SAMP>. </FONT>
<P><FONT class=extract>This is marginally more exciting, but the true power of this feature only becomes apparent when you discover that secondary expansions always take place within the scope of the automatic variables for that target. This means that you can use variables such as <CODE>$@</CODE>, <CODE>$*</CODE>, etc. during the second expansion and they will have their expected values, just as in the recipe. All you have to do is defer the expansion by escaping the <CODE>$</CODE>. Also, secondary expansion occurs for both explicit and implicit (pattern) rules. Knowing this, the possible uses for this feature increase dramatically. For example: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     main_OBJS := main.o try.o test.o
     lib_OBJS := lib.o api.o
     
     main lib: $$($$@_OBJS)
</FONT></PRE>
<P><FONT class=extract>Here, after the initial expansion the prerequisites of both the <SAMP><SPAN class=file>main</SPAN></SAMP> and <SAMP><SPAN class=file>lib</SPAN></SAMP> targets will be <CODE>$($@_OBJS)</CODE>. During the secondary expansion, the <CODE>$@</CODE> variable is set to the name of the target and so the expansion for the <SAMP><SPAN class=file>main</SPAN></SAMP> target will yield <CODE>$(main_OBJS)</CODE>, or <CODE>main.o try.o test.o</CODE>, while the secondary expansion for the <SAMP><SPAN class=file>lib</SPAN></SAMP> target will yield <CODE>$(lib_OBJS)</CODE>, or <CODE>lib.o api.o</CODE>. </FONT>
<P><FONT class=extract>You can also mix in functions here, as long as they are properly escaped: </FONT><PRE class=example><FONT class=extract>     main_SRCS := main.c try.c test.c
     lib_SRCS := lib.c api.c
     
     .SECONDEXPANSION:
     main lib: $$(patsubst %.c,%.o,$$($$@_SRCS))
</FONT></PRE>
<P><FONT class=extract>This version allows users to specify source files rather than object files, but gives the same resulting prerequisites list as the previous example. </FONT>
<P><FONT class=extract>Evaluation of automatic variables during the secondary expansion phase, especially of the target name variable <CODE>$$@</CODE>, behaves similarly to evaluation within recipes. However, there are some subtle differences and &#8220;corner cases&#8221; which come into play for the different types of rule definitions that <CODE>make</CODE> understands. The subtleties of using the different automatic variables are described below. </FONT>
<H4 class=subheading><FONT class=extract>Secondary Expansion of Explicit Rules</FONT></H4>
<P><A name=index-secondary-expansion-and-explicit-rules-121></A><A name=index-explicit-rules_002c-secondary-expansion-of-122></A><FONT class=extract>During the secondary expansion of explicit rules, <CODE>$$@</CODE> and <CODE>$$%</CODE> evaluate, respectively, to the file name of the target and, when the target is an archive member, the target member name. The <CODE>$$&lt;</CODE> variable evaluates to the first prerequisite in the first rule for this target. <CODE>$$^</CODE> and <CODE>$$+</CODE> evaluate to the list of all prerequisites of rules <EM>that have already appeared</EM> for the same target (<CODE>$$+</CODE> with repetitions and <CODE>$$^</CODE> without). The following example will help illustrate these behaviors: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     
     foo: foo.1 bar.1 $$&lt; $$^ $$+    # line #1
     
     foo: foo.2 bar.2 $$&lt; $$^ $$+    # line #2
     
     foo: foo.3 bar.3 $$&lt; $$^ $$+    # line #3
</FONT></PRE>
<P><FONT class=extract>In the first prerequisite list, all three variables (<CODE>$$&lt;</CODE>, <CODE>$$^</CODE>, and <CODE>$$+</CODE>) expand to the empty string. In the second, they will have values <CODE>foo.1</CODE>, <CODE>foo.1 bar.1</CODE>, and <CODE>foo.1 bar.1</CODE> respectively. In the third they will have values <CODE>foo.1</CODE>, <CODE>foo.1 bar.1 foo.2 bar.2</CODE>, and <CODE>foo.1 bar.1 foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1</CODE> respectively. </FONT>
<P><FONT class=extract>Rules undergo secondary expansion in makefile order, except that the rule with the recipe is always evaluated last. </FONT>
<P><FONT class=extract>The variables <CODE>$$?</CODE> and <CODE>$$*</CODE> are not available and expand to the empty string. </FONT>
<H4 class=subheading><FONT class=extract>Secondary Expansion of Static Pattern Rules</FONT></H4>
<P><A name=index-secondary-expansion-and-static-pattern-rules-123></A><A name=index-static-pattern-rules_002c-secondary-expansion-of-124></A><FONT class=extract>Rules for secondary expansion of static pattern rules are identical to those for explicit rules, above, with one exception: for static pattern rules the <CODE>$$*</CODE> variable is set to the pattern stem. As with explicit rules, <CODE>$$?</CODE> is not available and expands to the empty string. </FONT>
<H4 class=subheading><FONT class=extract>Secondary Expansion of Implicit Rules</FONT></H4>
<P><A name=index-secondary-expansion-and-implicit-rules-125></A><A name=index-implicit-rules_002c-secondary-expansion-of-126></A><FONT class=extract>As <CODE>make</CODE> searches for an implicit rule, it substitutes the stem and then performs secondary expansion for every rule with a matching target pattern. The value of the automatic variables is derived in the same fashion as for static pattern rules. As an example: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     
     foo: bar
     
     foo foz: fo%: bo%
     
     %oo: $$&lt; $$^ $$+ $$*
</FONT></PRE>
<P><FONT class=extract>When the implicit rule is tried for target <SAMP><SPAN class=file>foo</SPAN></SAMP>, <CODE>$$&lt;</CODE> expands to <SAMP><SPAN class=file>bar</SPAN></SAMP>, <CODE>$$^</CODE> expands to <SAMP><SPAN class=file>bar boo</SPAN></SAMP>, <CODE>$$+</CODE> also expands to <SAMP><SPAN class=file>bar boo</SPAN></SAMP>, and <CODE>$$*</CODE> expands to <SAMP><SPAN class=file>f</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Note that the directory prefix (D), as described in </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search Algorithm</FONT></A><FONT class=extract>, is appended (after expansion) to all the patterns in the prerequisites list. As an example: </FONT><PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     
     /tmp/foo.o:
     
     %.o: $$(addsuffix /%.c,foo bar) foo.h
             @echo $^
</FONT></PRE>
<P><FONT class=extract>The prerequisite list printed, after the secondary expansion and directory prefix reconstruction, will be <SAMP><SPAN class=file>/tmp/foo/foo.c /tmp/bar/foo.c foo.h</SPAN></SAMP>. If you are not interested in this reconstruction, you can use <CODE>$$*</CODE> instead of <CODE>%</CODE> in the prerequisites list. </FONT>
<DIV class=node><A name=Rules></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=next>Recipes</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefiles" rel=previous>Makefiles</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>4 Writing Rules</FONT></H2>
<P><A name=index-writing-rules-127></A><A name=index-rule_002c-how-to-write-128></A><A name=index-target-129></A><A name=index-prerequisite-130></A><FONT class=extract>A <DFN>rule</DFN> appears in the makefile and says when and how to remake certain files, called the rule's <DFN>targets</DFN> (most often only one per rule). It lists the other files that are the <DFN>prerequisites</DFN> of the target, and the <DFN>recipe</DFN> to use to create or update the target. </FONT>
<P><A name=index-default-goal-131></A><A name=index-goal_002c-default-132></A><FONT class=extract>The order of rules is not significant, except for determining the <DFN>default goal</DFN>: the target for <CODE>make</CODE> to consider, if you do not otherwise specify one. The default goal is the target of the first rule in the first makefile. If the first rule has multiple targets, only the first target is taken as the default. There are two exceptions: a target starting with a period is not a default unless it contains one or more slashes, &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217;, as well; and, a target that defines a pattern rule has no effect on the default goal. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Therefore, we usually write the makefile so that the first rule is the one for compiling the entire program or all the programs described by the makefile (often with a target called &#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Rule-Example"><FONT class=extract>Rule Example</FONT></A><FONT class=extract>: An example explained. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax"><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>: General syntax explained. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types"><FONT class=extract>Prerequisite Types</FONT></A><FONT class=extract>: There are two types of prerequisites. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Wildcards</FONT></A><FONT class=extract>: Using wildcard characters such as `*'. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Directory Search</FONT></A><FONT class=extract>: Searching other directories for source files. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>: Using a target that is not a real file's name. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Force-Targets"><FONT class=extract>Force Targets</FONT></A><FONT class=extract>: You can use a target without a recipe or prerequisites to mark other targets as phony. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets"><FONT class=extract>Empty Targets</FONT></A><FONT class=extract>: When only the date matters and the files are empty. </FONT>
<LI><A accessKey=9 href="https://www.gnu.org/software/make/manual/make.html#Special-Targets"><FONT class=extract>Special Targets</FONT></A><FONT class=extract>: Targets with special built-in meanings. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets"><FONT class=extract>Multiple Targets</FONT></A><FONT class=extract>: When to make use of several targets in a rule. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules"><FONT class=extract>Multiple Rules</FONT></A><FONT class=extract>: How to use several rules with the same target. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern"><FONT class=extract>Static Pattern</FONT></A><FONT class=extract>: Static pattern rules apply to multiple targets and can vary the prerequisites according to the target name. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon"><FONT class=extract>Double-Colon</FONT></A><FONT class=extract>: How to use a special kind of rule to allow several independent rules for one target. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites"><FONT class=extract>Automatic Prerequisites</FONT></A><FONT class=extract>: How to automatically generate rules giving prerequisites from source files themselves. </FONT></LI></UL>
<DIV class=node><A name=Rule-Example></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax" rel=next><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=previous><FONT class=extract>Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.1 Rule Example</FONT></H3>
<P><FONT class=extract>Here is an example of a rule: </FONT><PRE class=example><FONT class=extract>     foo.o : foo.c defs.h       # module for twiddling the frobs
             cc -c -g foo.c
</FONT></PRE>
<P><FONT class=extract>Its target is <SAMP><SPAN class=file>foo.o</SPAN></SAMP> and its prerequisites are <SAMP><SPAN class=file>foo.c</SPAN></SAMP> and <SAMP><SPAN class=file>defs.h</SPAN></SAMP>. It has one command in the recipe: &#8216;<SAMP><SPAN class=samp>cc -c -g foo.c</SPAN></SAMP>&#8217;. The recipe starts with a tab to identify it as a recipe. </FONT>
<P><FONT class=extract>This rule says two things: </FONT>
<UL>
<LI><FONT class=extract>How to decide whether <SAMP><SPAN class=file>foo.o</SPAN></SAMP> is out of date: it is out of date if it does not exist, or if either <SAMP><SPAN class=file>foo.c</SPAN></SAMP> or <SAMP><SPAN class=file>defs.h</SPAN></SAMP> is more recent than it. </FONT>
<LI><FONT class=extract>How to update the file <SAMP><SPAN class=file>foo.o</SPAN></SAMP>: by running <CODE>cc</CODE> as stated. The recipe does not explicitly mention <SAMP><SPAN class=file>defs.h</SPAN></SAMP>, but we presume that <SAMP><SPAN class=file>foo.c</SPAN></SAMP> includes it, and that that is why <SAMP><SPAN class=file>defs.h</SPAN></SAMP> was added to the prerequisites. </FONT></LI></UL>
<DIV class=node><A name=Rule-Syntax></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types" rel=next><FONT class=extract>Prerequisite Types</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rule-Example" rel=previous><FONT class=extract>Rule Example</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.2 Rule Syntax</FONT></H3>
<P><A name=index-rule-syntax-133></A><A name=index-syntax-of-rules-134></A><FONT class=extract>In general, a rule looks like this: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>prerequisites</VAR>
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P class=noindent><FONT class=extract>or like this: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>prerequisites</VAR> ; <VAR>recipe</VAR>
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P><A name=index-targets-135></A><A name=index-rule-targets-136></A><FONT class=extract>The <VAR>targets</VAR> are file names, separated by spaces. Wildcard characters may be used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>) and a name of the form <SAMP><VAR>a</VAR><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP> represents member <VAR>m</VAR> in archive file <VAR>a</VAR> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members as Targets</FONT></A><FONT class=extract>). Usually there is only one target per rule, but occasionally there is a reason to have more (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets"><FONT class=extract>Multiple Targets in a Rule</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-recipes-137></A><A name=index-tab-character-_0028in-commands_0029-138></A><FONT class=extract>The <VAR>recipe</VAR> lines start with a tab character (or the first character in the value of the <CODE>.RECIPEPREFIX</CODE> variable; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>). The first recipe line may appear on the line after the prerequisites, with a tab character, or may appear on the same line, with a semicolon. Either way, the effect is the same. There are other differences in the syntax of recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes"><FONT class=extract>Writing Recipes in Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-rules-139></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-rules-140></A><A name=index-rules_002c-and-_0040code_007b_0024_007d-141></A><FONT class=extract>Because dollar signs are used to start <CODE>make</CODE> variable references, if you really want a dollar sign in a target or prerequisite you must write two of them, &#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>). If you have enabled secondary expansion (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>) and you want a literal dollar sign in the prerequisites list, you must actually write <EM>four</EM> dollar signs (&#8216;<SAMP><SPAN class=samp>$$$$</SPAN></SAMP>&#8217;). </FONT>
<P><FONT class=extract>You may split a long line by inserting a backslash followed by a newline, but this is not required, as <CODE>make</CODE> places no limit on the length of a line in a makefile. </FONT>
<P><FONT class=extract>A rule tells <CODE>make</CODE> two things: when the targets are out of date, and how to update them when necessary. </FONT>
<P><A name=index-prerequisites-142></A><A name=index-rule-prerequisites-143></A><FONT class=extract>The criterion for being out of date is specified in terms of the <VAR>prerequisites</VAR>, which consist of file names separated by spaces. (Wildcards and archive members (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>) are allowed here too.) A target is out of date if it does not exist or if it is older than any of the prerequisites (by comparison of last-modification times). The idea is that the contents of the target file are computed based on information in the prerequisites, so if any of the prerequisites changes, the contents of the existing target file are no longer necessarily valid. </FONT>
<P><FONT class=extract>How to update is specified by a <VAR>recipe</VAR>. This is one or more lines to be executed by the shell (normally &#8216;<SAMP><SPAN class=samp>sh</SPAN></SAMP>&#8217;), but with some extra features (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes"><FONT class=extract>Writing Recipes in Rules</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Prerequisite-Types></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=next><FONT class=extract>Wildcards</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax" rel=previous><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>4.3 Types of Prerequisites</FONT></H3>
<P><A name=index-prerequisite-types-144></A><A name=index-types-of-prerequisites-145></A><A name=index-prerequisites_002c-normal-146></A><A name=index-normal-prerequisites-147></A><A name=index-prerequisites_002c-order_002donly-148></A><A name=index-order_002donly-prerequisites-149></A><FONT class=extract>There are actually two different types of prerequisites understood by GNU <CODE>make</CODE>: normal prerequisites such as described in the previous section, and <DFN>order-only</DFN> prerequisites. A normal prerequisite makes two statements: first, it imposes an order in which recipes will be invoked: the recipes for all prerequisites of a target will be completed before the recipe for the target is run. Second, it imposes a dependency relationship: if any prerequisite is newer than the target, then the target is considered out-of-date and must be rebuilt. </FONT>
<P><FONT class=extract>Normally, this is exactly what you want: if a target's prerequisite is updated, then the target should also be updated. </FONT>
<P><FONT class=extract>Occasionally, however, you have a situation where you want to impose a specific ordering on the rules to be invoked <EM>without</EM> forcing the target to be updated if one of those rules is executed. In that case, you want to define <DFN>order-only</DFN> prerequisites. Order-only prerequisites can be specified by placing a pipe symbol (<CODE>|</CODE>) in the prerequisites list: any prerequisites to the left of the pipe symbol are normal; any prerequisites to the right are order-only: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>normal-prerequisites</VAR> | <VAR>order-only-prerequisites</VAR>
</FONT></PRE>
<P><FONT class=extract>The normal prerequisites section may of course be empty. Also, you may still declare multiple lines of prerequisites for the same target: they are appended appropriately (normal prerequisites are appended to the list of normal prerequisites; order-only prerequisites are appended to the list of order-only prerequisites). Note that if you declare the same file to be both a normal and an order-only prerequisite, the normal prerequisite takes precedence (since they have a strict superset of the behavior of an order-only prerequisite). </FONT>
<P><FONT class=extract>Consider an example where your targets are to be placed in a separate directory, and that directory might not exist before <CODE>make</CODE> is run. In this situation, you want the directory to be created before any targets are placed into it but, because the timestamps on directories change whenever a file is added, removed, or renamed, we certainly don't want to rebuild all the targets whenever the directory's timestamp changes. One way to manage this is with order-only prerequisites: make the directory an order-only prerequisite on all the targets: </FONT><PRE class=example><FONT class=extract>     OBJDIR := objdir
     OBJS := $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)
     
     $(OBJDIR)/%.o : %.c
             $(COMPILE.c) $(OUTPUT_OPTION) $&lt;
     
     all: $(OBJS)
     
     $(OBJS): | $(OBJDIR)
     
     $(OBJDIR):
             mkdir $(OBJDIR)
</FONT></PRE>
<P><FONT class=extract>Now the rule to create the <SAMP><SPAN class=file>objdir</SPAN></SAMP> directory will be run, if needed, before any &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; is built, but no &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; will be built because the <SAMP><SPAN class=file>objdir</SPAN></SAMP> directory timestamp changed. </FONT>
<DIV class=node><A name=Wildcards></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=next><FONT class=extract>Directory Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types" rel=previous><FONT class=extract>Prerequisite Types</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.4 Using Wildcard Characters in File Names</FONT></H3>
<P><A name=index-wildcard-150></A><A name=index-file-name-with-wildcards-151></A><A name=index-globbing-_0028wildcards_0029-152></A><A name=index-g_t_0040code_007b_002a_007d-_0028wildcard-character_0029-153></A><A name=index-g_t_0040code_007b_003f_007d-_0028wildcard-character_0029-154></A><A name=index-g_t_0040code_007b_005b_0040dots_007b_007d_005d_007d-_0028wildcard-characters_0029-155></A><FONT class=extract>A single file name can specify many files using <DFN>wildcard characters</DFN>. The wildcard characters in <CODE>make</CODE> are &#8216;<SAMP><SPAN class=samp>*</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>?</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>[...]</SPAN></SAMP>&#8217;, the same as in the Bourne shell. For example, <SAMP><SPAN class=file>*.c</SPAN></SAMP> specifies a list of all the files (in the working directory) whose names end in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_0040code_007b_007e_007d-_0028tilde_0029-156></A><A name=index-tilde-_0028_0040code_007b_007e_007d_0029-157></A><A name=index-home-directory-158></A><FONT class=extract>The character &#8216;<SAMP><SPAN class=samp>~</SPAN></SAMP>&#8217; at the beginning of a file name also has special significance. If alone, or followed by a slash, it represents your home directory. For example <SAMP><SPAN class=file>~/bin</SPAN></SAMP> expands to <SAMP><SPAN class=file>/home/you/bin</SPAN></SAMP>. If the &#8216;<SAMP><SPAN class=samp>~</SPAN></SAMP>&#8217; is followed by a word, the string represents the home directory of the user named by that word. For example <SAMP><SPAN class=file>~john/bin</SPAN></SAMP> expands to <SAMP><SPAN class=file>/home/john/bin</SPAN></SAMP>. On systems which don't have a home directory for each user (such as MS-DOS or MS-Windows), this functionality can be simulated by setting the environment variable <VAR>HOME</VAR>. </FONT>
<P><FONT class=extract>Wildcard expansion is performed by <CODE>make</CODE> automatically in targets and in prerequisites. In recipes, the shell is responsible for wildcard expansion. In other contexts, wildcard expansion happens only if you request it explicitly with the <CODE>wildcard</CODE> function. </FONT>
<P><FONT class=extract>The special significance of a wildcard character can be turned off by preceding it with a backslash. Thus, <SAMP><SPAN class=file>foo\*bar</SPAN></SAMP> would refer to a specific file whose name consists of &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;, an asterisk, and &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples"><FONT class=extract>Wildcard Examples</FONT></A><FONT class=extract>: Several examples. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall"><FONT class=extract>Wildcard Pitfall</FONT></A><FONT class=extract>: Problems to avoid. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function"><FONT class=extract>Wildcard Function</FONT></A><FONT class=extract>: How to cause wildcard expansion where it does not normally take place. </FONT></LI></UL>
<DIV class=node><A name=Wildcard-Examples></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall" rel=next><FONT class=extract>Wildcard Pitfall</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=previous><FONT class=extract>Wildcards</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=up><FONT class=extract>Wildcards</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.4.1 Wildcard Examples</FONT></H4>
<P><FONT class=extract>Wildcards can be used in the recipe of a rule, where they are expanded by the shell. For example, here is a rule to delete all the object files: </FONT><PRE class=example><FONT class=extract>     clean:
             rm -f *.o
</FONT></PRE>
<P><A name=index-g_t_0040code_007brm_007d-_0028shell-command_0029-159></A><FONT class=extract>Wildcards are also useful in the prerequisites of a rule. With the following rule in the makefile, &#8216;<SAMP><SPAN class=samp>make print</SPAN></SAMP>&#8217; will print all the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files that have changed since the last time you printed them: </FONT><PRE class=example><FONT class=extract>     print: *.c
             lpr -p $?
             touch print
</FONT></PRE>
<P><A name=index-g_t_0040code_007bprint_007d-target-160></A><A name=index-g_t_0040code_007blpr_007d-_0028shell-command_0029-161></A><A name=index-g_t_0040code_007btouch_007d-_0028shell-command_0029-162></A><FONT class=extract>This rule uses <SAMP><SPAN class=file>print</SPAN></SAMP> as an empty target file; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets"><FONT class=extract>Empty Target Files to Record Events</FONT></A><FONT class=extract>. (The automatic variable &#8216;<SAMP><SPAN class=samp>$?</SPAN></SAMP>&#8217; is used to print only those files that have changed; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Wildcard expansion does not happen when you define a variable. Thus, if you write this: </FONT><PRE class=example><FONT class=extract>     objects = *.o
</FONT></PRE>
<P class=noindent><FONT class=extract>then the value of the variable <CODE>objects</CODE> is the actual string &#8216;<SAMP><SPAN class=samp>*.o</SPAN></SAMP>&#8217;. However, if you use the value of <CODE>objects</CODE> in a target or prerequisite, wildcard expansion will take place there. If you use the value of <CODE>objects</CODE> in a recipe, the shell may perform wildcard expansion when the recipe runs. To set <CODE>objects</CODE> to the expansion, instead use: </FONT><PRE class=example><FONT class=extract>     objects := $(wildcard *.o)
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function"><FONT class=extract>Wildcard Function</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Wildcard-Pitfall></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function" rel=next><FONT class=extract>Wildcard Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples" rel=previous><FONT class=extract>Wildcard Examples</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=up><FONT class=extract>Wildcards</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.4.2 Pitfalls of Using Wildcards</FONT></H4>
<P><A name=index-wildcard-pitfalls-163></A><A name=index-pitfalls-of-wildcards-164></A><A name=index-mistakes-with-wildcards-165></A><A name=index-errors-with-wildcards-166></A><A name=index-problems-with-wildcards-167></A><FONT class=extract>Now here is an example of a naive way of using wildcard expansion, that does not do what you would intend. Suppose you would like to say that the executable file <SAMP><SPAN class=file>foo</SPAN></SAMP> is made from all the object files in the directory, and you write this: </FONT><PRE class=example><FONT class=extract>     objects = *.o
     
     foo : $(objects)
             cc -o foo $(CFLAGS) $(objects)
</FONT></PRE>
<P class=noindent><FONT class=extract>The value of <CODE>objects</CODE> is the actual string &#8216;<SAMP><SPAN class=samp>*.o</SPAN></SAMP>&#8217;. Wildcard expansion happens in the rule for <SAMP><SPAN class=file>foo</SPAN></SAMP>, so that each <EM>existing</EM> &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file becomes a prerequisite of <SAMP><SPAN class=file>foo</SPAN></SAMP> and will be recompiled if necessary. </FONT>
<P><FONT class=extract>But what if you delete all the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files? When a wildcard matches no files, it is left as it is, so then <SAMP><SPAN class=file>foo</SPAN></SAMP> will depend on the oddly-named file <SAMP><SPAN class=file>*.o</SPAN></SAMP>. Since no such file is likely to exist, <CODE>make</CODE> will give you an error saying it cannot figure out how to make <SAMP><SPAN class=file>*.o</SPAN></SAMP>. This is not what you want! </FONT>
<P><FONT class=extract>Actually it is possible to obtain the desired result with wildcard expansion, but you need more sophisticated techniques, including the <CODE>wildcard</CODE> function and string substitution. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function"><FONT class=extract>The Function <CODE>wildcard</CODE></FONT></A><FONT class=extract>. </FONT>
<P><A name=index-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes-168></A><A name=index-backslashes-in-pathnames-and-wildcard-expansion-169></A><FONT class=extract>Microsoft operating systems (MS-DOS and MS-Windows) use backslashes to separate directories in pathnames, like so: </FONT><PRE class=example><FONT class=extract>       c:\foo\bar\baz.c
</FONT></PRE>
<P><FONT class=extract>This is equivalent to the Unix-style <SAMP><SPAN class=file>c:/foo/bar/baz.c</SPAN></SAMP> (the <SAMP><SPAN class=file>c:</SPAN></SAMP> part is the so-called drive letter). When <CODE>make</CODE> runs on these systems, it supports backslashes as well as the Unix-style forward slashes in pathnames. However, this support does <EM>not</EM> include the wildcard expansion, where backslash is a quote character. Therefore, you <EM>must</EM> use Unix-style slashes in these cases. </FONT>
<DIV class=node><A name=Wildcard-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall" rel=previous><FONT class=extract>Wildcard Pitfall</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=up><FONT class=extract>Wildcards</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.4.3 The Function <CODE>wildcard</CODE></FONT></H4>
<P><A name=index-wildcard-170></A><FONT class=extract>Wildcard expansion happens automatically in rules. But wildcard expansion does not normally take place when a variable is set, or inside the arguments of a function. If you want to do wildcard expansion in such places, you need to use the <CODE>wildcard</CODE> function, like this: </FONT><PRE class=example><FONT class=extract>     $(wildcard <VAR>pattern</VAR>...)
</FONT></PRE>
<P class=noindent><FONT class=extract>This string, used anywhere in a makefile, is replaced by a space-separated list of names of existing files that match one of the given file name patterns. If no existing file name matches a pattern, then that pattern is omitted from the output of the <CODE>wildcard</CODE> function. Note that this is different from how unmatched wildcards behave in rules, where they are used verbatim rather than ignored (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall"><FONT class=extract>Wildcard Pitfall</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>One use of the <CODE>wildcard</CODE> function is to get a list of all the C source files in a directory, like this: </FONT><PRE class=example><FONT class=extract>     $(wildcard *.c)
</FONT></PRE>
<P><FONT class=extract>We can change the list of C source files into a list of object files by replacing the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; suffix with &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; in the result, like this: </FONT><PRE class=example><FONT class=extract>     $(patsubst %.c,%.o,$(wildcard *.c))
</FONT></PRE>
<P class=noindent><FONT class=extract>(Here we have used another function, <CODE>patsubst</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Thus, a makefile to compile all C source files in the directory and then link them together could be written as follows: </FONT><PRE class=example><FONT class=extract>     objects := $(patsubst %.c,%.o,$(wildcard *.c))
     
     foo : $(objects)
             cc -o foo $(objects)
</FONT></PRE>
<P class=noindent><FONT class=extract>(This takes advantage of the implicit rule for compiling C programs, so there is no need to write explicit rules for compiling the files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>, for an explanation of &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217;, which is a variant of &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;.) </FONT>
<DIV class=node><A name=Directory-Search></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets" rel=next><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Wildcards" rel=previous><FONT class=extract>Wildcards</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.5 Searching Directories for Prerequisites</FONT></H3>
<P><A name=index-VPATH-171></A><A name=index-vpath-172></A><A name=index-vpath-173></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029-174></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029-175></A><FONT class=extract>For large systems, it is often desirable to put sources in a separate directory from the binaries. The <DFN>directory search</DFN> features of <CODE>make</CODE> facilitate this by searching several directories automatically to find a prerequisite. When you redistribute the files among directories, you do not need to change the individual rules, just the search paths. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#General-Search"><FONT class=extract>General Search</FONT></A><FONT class=extract>: Specifying a search path that applies to every prerequisite. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Selective-Search"><FONT class=extract>Selective Search</FONT></A><FONT class=extract>: Specifying a search path for a specified class of names. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm"><FONT class=extract>Search Algorithm</FONT></A><FONT class=extract>: When and how search paths are applied. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch"><FONT class=extract>Recipes/Search</FONT></A><FONT class=extract>: How to write recipes that work together with search paths. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch"><FONT class=extract>Implicit/Search</FONT></A><FONT class=extract>: How search paths affect implicit rules. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch"><FONT class=extract>Libraries/Search</FONT></A><FONT class=extract>: Directory search for link libraries. </FONT></LI></UL>
<DIV class=node><A name=General-Search></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Selective-Search" rel=next><FONT class=extract>Selective Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=previous><FONT class=extract>Directory Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.1 <CODE>VPATH</CODE>: Search Path for All Prerequisites</FONT></H4>
<P><A name=index-VPATH-176></A><FONT class=extract>The value of the <CODE>make</CODE> variable <CODE>VPATH</CODE> specifies a list of directories that <CODE>make</CODE> should search. Most often, the directories are expected to contain prerequisite files that are not in the current directory; however, <CODE>make</CODE> uses <CODE>VPATH</CODE> as a search list for both prerequisites and targets of rules. </FONT>
<P><FONT class=extract>Thus, if a file that is listed as a target or prerequisite does not exist in the current directory, <CODE>make</CODE> searches the directories listed in <CODE>VPATH</CODE> for a file with that name. If a file is found in one of them, that file may become the prerequisite (see below). Rules may then specify the names of files in the prerequisite list as if they all existed in the current directory. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch"><FONT class=extract>Writing Recipes with Directory Search</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>In the <CODE>VPATH</CODE> variable, directory names are separated by colons or blanks. The order in which directories are listed is the order followed by <CODE>make</CODE> in its search. (On MS-DOS and MS-Windows, semi-colons are used as separators of directory names in <CODE>VPATH</CODE>, since the colon can be used in the pathname itself, after the drive letter.) </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     VPATH = src:../headers
</FONT></PRE>
<P class=noindent><FONT class=extract>specifies a path containing two directories, <SAMP><SPAN class=file>src</SPAN></SAMP> and <SAMP><SPAN class=file>../headers</SPAN></SAMP>, which <CODE>make</CODE> searches in that order. </FONT>
<P><FONT class=extract>With this value of <CODE>VPATH</CODE>, the following rule, </FONT><PRE class=example><FONT class=extract>     foo.o : foo.c
</FONT></PRE>
<P class=noindent><FONT class=extract>is interpreted as if it were written like this: </FONT><PRE class=example><FONT class=extract>     foo.o : src/foo.c
</FONT></PRE>
<P class=noindent><FONT class=extract>assuming the file <SAMP><SPAN class=file>foo.c</SPAN></SAMP> does not exist in the current directory but is found in the directory <SAMP><SPAN class=file>src</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Selective-Search></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm" rel=next><FONT class=extract>Search Algorithm</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#General-Search" rel=previous><FONT class=extract>General Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.2 The <CODE>vpath</CODE> Directive</FONT></H4>
<P><A name=index-vpath-177></A><FONT class=extract>Similar to the <CODE>VPATH</CODE> variable, but more selective, is the <CODE>vpath</CODE> directive (note lower case), which allows you to specify a search path for a particular class of file names: those that match a particular pattern. Thus you can supply certain search directories for one class of file names and other directories (or none) for other file names. </FONT>
<P><FONT class=extract>There are three forms of the <CODE>vpath</CODE> directive: </FONT>
<DL>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> <VAR>directories</VAR> </FONT>
<DD><FONT class=extract>Specify the search path <VAR>directories</VAR> for file names that match <VAR>pattern</VAR>. </FONT>
<P><FONT class=extract>The search path, <VAR>directories</VAR>, is a list of directories to be searched, separated by colons (semi-colons on MS-DOS and MS-Windows) or blanks, just like the search path used in the <CODE>VPATH</CODE> variable. <BR></FONT></P>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> </FONT>
<DD><FONT class=extract>Clear out the search path associated with <VAR>pattern</VAR>. <!-- Extra blank line makes sure this gets two lines. --><BR></FONT>
<DT><FONT class=extract><CODE>vpath</CODE> </FONT>
<DD><FONT class=extract>Clear all search paths previously specified with <CODE>vpath</CODE> directives. </FONT></DD></DL>
<P><FONT class=extract>A <CODE>vpath</CODE> pattern is a string containing a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. The string must match the file name of a prerequisite that is being searched for, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character matching any sequence of zero or more characters (as in pattern rules; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). For example, <CODE>%.h</CODE> matches files that end in <CODE>.h</CODE>. (If there is no &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, the pattern must match the prerequisite exactly, which is not useful very often.) </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bvpath_007d-178></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-179></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-180></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-181></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bvpath_007d-182></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in a <CODE>vpath</CODE> directive's pattern can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared to file names. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. </FONT>
<P><FONT class=extract>When a prerequisite fails to exist in the current directory, if the <VAR>pattern</VAR> in a <CODE>vpath</CODE> directive matches the name of the prerequisite file, then the <VAR>directories</VAR> in that directive are searched just like (and before) the directories in the <CODE>VPATH</CODE> variable. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     vpath %.h ../headers
</FONT></PRE>
<P class=noindent><FONT class=extract>tells <CODE>make</CODE> to look for any prerequisite whose name ends in <SAMP><SPAN class=file>.h</SPAN></SAMP> in the directory <SAMP><SPAN class=file>../headers</SPAN></SAMP> if the file is not found in the current directory. </FONT>
<P><FONT class=extract>If several <CODE>vpath</CODE> patterns match the prerequisite file's name, then <CODE>make</CODE> processes each matching <CODE>vpath</CODE> directive one by one, searching all the directories mentioned in each directive. <CODE>make</CODE> handles multiple <CODE>vpath</CODE> directives in the order in which they appear in the makefile; multiple directives with the same pattern are independent of each other. </FONT>
<P><FONT class=extract>Thus, </FONT><PRE class=example><FONT class=extract>     vpath %.c foo
     vpath %   blish
     vpath %.c bar
</FONT></PRE>
<P class=noindent><FONT class=extract>will look for a file ending in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; in <SAMP><SPAN class=file>foo</SPAN></SAMP>, then <SAMP><SPAN class=file>blish</SPAN></SAMP>, then <SAMP><SPAN class=file>bar</SPAN></SAMP>, while </FONT><PRE class=example><FONT class=extract>     vpath %.c foo:bar
     vpath %   blish
</FONT></PRE>
<P class=noindent><FONT class=extract>will look for a file ending in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; in <SAMP><SPAN class=file>foo</SPAN></SAMP>, then <SAMP><SPAN class=file>bar</SPAN></SAMP>, then <SAMP><SPAN class=file>blish</SPAN></SAMP>. </FONT>
<DIV class=node><A name=Search-Algorithm></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch" rel=next><FONT class=extract>Recipes/Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Selective-Search" rel=previous><FONT class=extract>Selective Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.3 How Directory Searches are Performed</FONT></H4>
<P><A name=index-algorithm-for-directory-search-183></A><A name=index-directory-search-algorithm-184></A><FONT class=extract>When a prerequisite is found through directory search, regardless of type (general or selective), the pathname located may not be the one that <CODE>make</CODE> actually provides you in the prerequisite list. Sometimes the path discovered through directory search is thrown away. </FONT>
<P><FONT class=extract>The algorithm <CODE>make</CODE> uses to decide whether to keep or abandon a path found via directory search is as follows: </FONT>
<OL type=1>
<LI><FONT class=extract>If a target file does not exist at the path specified in the makefile, directory search is performed. </FONT>
<LI><FONT class=extract>If the directory search is successful, that path is kept and this file is tentatively stored as the target. </FONT>
<LI><FONT class=extract>All prerequisites of this target are examined using this same method. </FONT>
<LI><FONT class=extract>After processing the prerequisites, the target may or may not need to be rebuilt: </FONT>
<OL type=a>
<LI><FONT class=extract>If the target does <EM>not</EM> need to be rebuilt, the path to the file found during directory search is used for any prerequisite lists which contain this target. In short, if <CODE>make</CODE> doesn't need to rebuild the target then you use the path found via directory search. </FONT>
<LI><FONT class=extract>If the target <EM>does</EM> need to be rebuilt (is out-of-date), the pathname found during directory search is <EM>thrown away</EM>, and the target is rebuilt using the file name specified in the makefile. In short, if <CODE>make</CODE> must rebuild, then the target is rebuilt locally, not in the directory found via directory search. </FONT></LI></OL></LI></OL>
<P><FONT class=extract>This algorithm may seem complex, but in practice it is quite often exactly what you want. </FONT>
<P><A name=index-traditional-directory-search-_0028GPATH_0029-185></A><A name=index-directory-search_002c-traditional-_0028GPATH_0029-186></A><FONT class=extract>Other versions of <CODE>make</CODE> use a simpler algorithm: if the file does not exist, and it is found via directory search, then that pathname is always used whether or not the target needs to be built. Thus, if the target is rebuilt it is created at the pathname discovered during directory search. </FONT>
<P><A name=index-GPATH-187></A><FONT class=extract>If, in fact, this is the behavior you want for some or all of your directories, you can use the <CODE>GPATH</CODE> variable to indicate this to <CODE>make</CODE>. </FONT>
<P><FONT class=extract><CODE>GPATH</CODE> has the same syntax and format as <CODE>VPATH</CODE> (that is, a space- or colon-delimited list of pathnames). If an out-of-date target is found by directory search in a directory that also appears in <CODE>GPATH</CODE>, then that pathname is not thrown away. The target is rebuilt using the expanded path. </FONT>
<DIV class=node><A name=Recipes%2fSearch></A><A name=Recipes_002fSearch></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch" rel=next><FONT class=extract>Implicit/Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm" rel=previous><FONT class=extract>Search Algorithm</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.4 Writing Recipes with Directory Search</FONT></H4>
<P><A name=index-recipes_002c-and-directory-search-188></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-recipes-189></A><FONT class=extract>When a prerequisite is found in another directory through directory search, this cannot change the recipe of the rule; they will execute as written. Therefore, you must write the recipe with care so that it will look for the prerequisite in the directory where <CODE>make</CODE> finds it. </FONT>
<P><FONT class=extract>This is done with the <DFN>automatic variables</DFN> such as &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). For instance, the value of &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; is a list of all the prerequisites of the rule, including the names of the directories in which they were found, and the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the target. Thus: </FONT><PRE class=example><FONT class=extract>     foo.o : foo.c
             cc -c $(CFLAGS) $^ -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>(The variable <CODE>CFLAGS</CODE> exists so you can specify flags for C compilation by implicit rules; we use it here for consistency so it will affect all C compilations uniformly; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>.) </FONT>
<P><FONT class=extract>Often the prerequisites include header files as well, which you do not want to mention in the recipe. The automatic variable &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; is just the first prerequisite: </FONT><PRE class=example><FONT class=extract>     VPATH = src:../headers
     foo.o : foo.c defs.h hack.h
             cc -c $(CFLAGS) $&lt; -o $@
</FONT></PRE>
<DIV class=node><A name=Implicit%2fSearch></A><A name=Implicit_002fSearch></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch" rel=next><FONT class=extract>Libraries/Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch" rel=previous><FONT class=extract>Recipes/Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.5 Directory Search and Implicit Rules</FONT></H4>
<P><A name=index-g_t_0040code_007bVPATH_007d_002c-and-implicit-rules-190></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-191></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-192></A><A name=index-implicit-rule_002c-and-directory-search-193></A><A name=index-implicit-rule_002c-and-_0040code_007bVPATH_007d-194></A><A name=index-rule_002c-implicit_002c-and-directory-search-195></A><A name=index-rule_002c-implicit_002c-and-_0040code_007bVPATH_007d-196></A><FONT class=extract>The search through the directories specified in <CODE>VPATH</CODE> or with <CODE>vpath</CODE> also happens during consideration of implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>For example, when a file <SAMP><SPAN class=file>foo.o</SPAN></SAMP> has no explicit rule, <CODE>make</CODE> considers implicit rules, such as the built-in rule to compile <SAMP><SPAN class=file>foo.c</SPAN></SAMP> if that file exists. If such a file is lacking in the current directory, the appropriate directories are searched for it. If <SAMP><SPAN class=file>foo.c</SPAN></SAMP> exists (or is mentioned in the makefile) in any of the directories, the implicit rule for C compilation is applied. </FONT>
<P><FONT class=extract>The recipes of implicit rules normally use automatic variables as a matter of necessity; consequently they will use the file names found by directory search with no extra effort. </FONT>
<DIV class=node><A name=Libraries%2fSearch></A><A name=Libraries_002fSearch></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch" rel=previous><FONT class=extract>Implicit/Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=up><FONT class=extract>Directory Search</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.5.6 Directory Search for Link Libraries</FONT></H4>
<P><A name=index-link-libraries_002c-and-directory-search-197></A><A name=index-libraries-for-linking_002c-directory-search-198></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-199></A><A name=index-g_t_0040code_007bVPATH_007d_002c-and-link-libraries-200></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-201></A><A name=index-g_t_0040code_007b_002dl_007d-_0028library-search_0029-202></A><A name=index-link-libraries_002c-patterns-matching-203></A><A name=index-g_t_0040code_007b_002eLIBPATTERNS_007d_002c-and-link-libraries-204></A><A name=index-g_t_002eLIBPATTERNS-205></A><FONT class=extract>Directory search applies in a special way to libraries used with the linker. This special feature comes into play when you write a prerequisite whose name is of the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;. (You can tell something strange is going on here because the prerequisite is normally the name of a file, and the <EM>file name</EM> of a library generally looks like <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, not like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>When a prerequisite's name has the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;, <CODE>make</CODE> handles it specially by searching for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP>, and, if it is not found, for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP> in the current directory, in directories specified by matching <CODE>vpath</CODE> search paths and the <CODE>VPATH</CODE> search path, and then in the directories <SAMP><SPAN class=file>/lib</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/lib</SPAN></SAMP>, and <SAMP><VAR>prefix</VAR><SPAN class=file>/lib</SPAN></SAMP> (normally <SAMP><SPAN class=file>/usr/local/lib</SPAN></SAMP>, but MS-DOS/MS-Windows versions of <CODE>make</CODE> behave as if <VAR>prefix</VAR> is defined to be the root of the DJGPP installation tree). </FONT>
<P><FONT class=extract>For example, if there is a <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP> library on your system (and no <SAMP><SPAN class=file>/usr/lib/libcurses.so</SPAN></SAMP> file), then </FONT><PRE class=example><FONT class=extract>     foo : foo.c -lcurses
             cc $^ -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>would cause the command &#8216;<SAMP><SPAN class=samp>cc foo.c /usr/lib/libcurses.a -o foo</SPAN></SAMP>&#8217; to be executed when <SAMP><SPAN class=file>foo</SPAN></SAMP> is older than <SAMP><SPAN class=file>foo.c</SPAN></SAMP> or than <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Although the default set of files to be searched for is <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP> and <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, this is customizable via the <CODE>.LIBPATTERNS</CODE> variable. Each word in the value of this variable is a pattern string. When a prerequisite like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217; is seen, <CODE>make</CODE> will replace the percent in each pattern in the list with <VAR>name</VAR> and perform the above directory searches using each library file name. </FONT>
<P><FONT class=extract>The default value for <CODE>.LIBPATTERNS</CODE> is &#8216;<SAMP><SPAN class=samp>lib%.so lib%.a</SPAN></SAMP>&#8217;, which provides the default behavior described above. </FONT>
<P><FONT class=extract>You can turn off link library expansion completely by setting this variable to an empty value. </FONT>
<DIV class=node><A name=Phony-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Force-Targets" rel=next><FONT class=extract>Force Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Directory-Search" rel=previous><FONT class=extract>Directory Search</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.6 Phony Targets</FONT></H3>
<P><A name=index-phony-targets-206></A><A name=index-targets_002c-phony-207></A><A name=index-targets-without-a-file-208></A><FONT class=extract>A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request. There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance. </FONT>
<P><FONT class=extract>If you write a rule whose recipe will not create the target file, the recipe will be executed every time the target comes up for remaking. Here is an example: </FONT><PRE class=example><FONT class=extract>     clean:
             rm *.o temp
</FONT></PRE>
<P class=noindent><FONT class=extract>Because the <CODE>rm</CODE> command does not create a file named <SAMP><SPAN class=file>clean</SPAN></SAMP>, probably no such file will ever exist. Therefore, the <CODE>rm</CODE> command will be executed every time you say &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217;. </FONT><A name=index-g_t_0040code_007brm_007d-_0028shell-command_0029-209></A><A name=index-g_t_002ePHONY-210></A><FONT class=extract>The phony target will cease to work if anything ever does create a file named <SAMP><SPAN class=file>clean</SPAN></SAMP> in this directory. Since it has no prerequisites, the file <SAMP><SPAN class=file>clean</SPAN></SAMP> would inevitably be considered up to date, and its recipe would not be executed. To avoid this problem, you can explicitly declare the target to be phony, using the special target <CODE>.PHONY</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets"><FONT class=extract>Special Built-in Target Names</FONT></A><FONT class=extract>) as follows: </FONT><PRE class=example><FONT class=extract>     .PHONY : clean
</FONT></PRE>
<P class=noindent><FONT class=extract>Once this is done, &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217; will run the recipe regardless of whether there is a file named <SAMP><SPAN class=file>clean</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Since it knows that phony targets do not name actual files that could be remade from other files, <CODE>make</CODE> skips the implicit rule search for phony targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract>). This is why declaring a target phony is good for performance, even if you are not worried about the actual file existing. </FONT>
<P><FONT class=extract>Thus, you first write the line that states that <CODE>clean</CODE> is a phony target, then you write the rule, like this: </FONT><PRE class=example><FONT class=extract>     .PHONY: clean
     clean:
             rm *.o temp
</FONT></PRE>
<P><FONT class=extract>Another example of the usefulness of phony targets is in conjunction with recursive invocations of <CODE>make</CODE> (for more information, see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). In this case the makefile will often contain a variable which lists a number of sub-directories to be built. One way to handle this is with one rule whose recipe is a shell loop over the sub-directories, like this: </FONT><PRE class=example><FONT class=extract>     SUBDIRS = foo bar baz
     
     subdirs:
             for dir in $(SUBDIRS); do \
               $(MAKE) -C $$dir; \
             done
</FONT></PRE>
<P><FONT class=extract>There are problems with this method, however. First, any error detected in a sub-make is ignored by this rule, so it will continue to build the rest of the directories even when one fails. This can be overcome by adding shell commands to note the error and exit, but then it will do so even if <CODE>make</CODE> is invoked with the <CODE>-k</CODE> option, which is unfortunate. Second, and perhaps more importantly, you cannot take advantage of <CODE>make</CODE>'s ability to build targets in parallel (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>), since there is only one rule. </FONT>
<P><FONT class=extract>By declaring the sub-directories as phony targets (you must do this as the sub-directory obviously always exists; otherwise it won't be built) you can remove these problems: </FONT><PRE class=example><FONT class=extract>     SUBDIRS = foo bar baz
     
     .PHONY: subdirs $(SUBDIRS)
     
     subdirs: $(SUBDIRS)
     
     $(SUBDIRS):
             $(MAKE) -C $@
     
     foo: baz
</FONT></PRE>
<P><FONT class=extract>Here we've also declared that the <SAMP><SPAN class=file>foo</SPAN></SAMP> sub-directory cannot be built until after the <SAMP><SPAN class=file>baz</SPAN></SAMP> sub-directory is complete; this kind of relationship declaration is particularly important when attempting parallel builds. </FONT>
<P><FONT class=extract>A phony target should not be a prerequisite of a real target file; if it is, its recipe will be run every time <CODE>make</CODE> goes to update that file. As long as a phony target is never a prerequisite of a real target, the phony target recipe will be executed only when the phony target is a specified goal (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Phony targets can have prerequisites. When one directory contains multiple programs, it is most convenient to describe all of the programs in one makefile <SAMP><SPAN class=file>./Makefile</SPAN></SAMP>. Since the target remade by default will be the first one in the makefile, it is common to make this a phony target named &#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217; and give it, as prerequisites, all the individual programs. For example: </FONT><PRE class=example><FONT class=extract>     all : prog1 prog2 prog3
     .PHONY : all
     
     prog1 : prog1.o utils.o
             cc -o prog1 prog1.o utils.o
     
     prog2 : prog2.o
             cc -o prog2 prog2.o
     
     prog3 : prog3.o sort.o utils.o
             cc -o prog3 prog3.o sort.o utils.o
</FONT></PRE>
<P class=noindent><FONT class=extract>Now you can say just &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; to remake all three programs, or specify as arguments the ones to remake (as in &#8216;<SAMP><SPAN class=samp>make prog1 prog3</SPAN></SAMP>&#8217;). Phoniness is not inherited: the prerequisites of a phony target are not themselves phony, unless explicitly declared to be so. </FONT>
<P><FONT class=extract>When one phony target is a prerequisite of another, it serves as a subroutine of the other. For example, here &#8216;<SAMP><SPAN class=samp>make cleanall</SPAN></SAMP>&#8217; will delete the object files, the difference files, and the file <SAMP><SPAN class=file>program</SPAN></SAMP>: </FONT><PRE class=example><FONT class=extract>     .PHONY: cleanall cleanobj cleandiff
     
     cleanall : cleanobj cleandiff
             rm program
     
     cleanobj :
             rm *.o
     
     cleandiff :
             rm *.diff
</FONT></PRE>
<DIV class=node><A name=Force-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets" rel=next><FONT class=extract>Empty Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets" rel=previous><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.7 Rules without Recipes or Prerequisites</FONT></H3>
<P><A name=index-force-targets-211></A><A name=index-targets_002c-force-212></A><A name=index-g_t_0040code_007bFORCE_007d-213></A><A name=index-rule_002c-no-recipe-or-prerequisites-214></A><FONT class=extract>If a rule has no prerequisites or recipe, and the target of the rule is a nonexistent file, then <CODE>make</CODE> imagines this target to have been updated whenever its rule is run. This implies that all targets depending on this one will always have their recipe run. </FONT>
<P><FONT class=extract>An example will illustrate this: </FONT><PRE class=example><FONT class=extract>     clean: FORCE
             rm $(objects)
     FORCE:
</FONT></PRE>
<P><FONT class=extract>Here the target &#8216;<SAMP><SPAN class=samp>FORCE</SPAN></SAMP>&#8217; satisfies the special conditions, so the target <SAMP><SPAN class=file>clean</SPAN></SAMP> that depends on it is forced to run its recipe. There is nothing special about the name &#8216;<SAMP><SPAN class=samp>FORCE</SPAN></SAMP>&#8217;, but that is one name commonly used this way. </FONT>
<P><FONT class=extract>As you can see, using &#8216;<SAMP><SPAN class=samp>FORCE</SPAN></SAMP>&#8217; this way has the same results as using &#8216;<SAMP><SPAN class=samp>.PHONY: clean</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Using &#8216;<SAMP><SPAN class=samp>.PHONY</SPAN></SAMP>&#8217; is more explicit and more efficient. However, other versions of <CODE>make</CODE> do not support &#8216;<SAMP><SPAN class=samp>.PHONY</SPAN></SAMP>&#8217;; thus &#8216;<SAMP><SPAN class=samp>FORCE</SPAN></SAMP>&#8217; appears in many makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Empty-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Special-Targets" rel=next><FONT class=extract>Special Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Force-Targets" rel=previous><FONT class=extract>Force Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.8 Empty Target Files to Record Events</FONT></H3>
<P><A name=index-empty-targets-215></A><A name=index-targets_002c-empty-216></A><A name=index-recording-events-with-empty-targets-217></A><FONT class=extract>The <DFN>empty target</DFN> is a variant of the phony target; it is used to hold recipes for an action that you request explicitly from time to time. Unlike a phony target, this target file can really exist; but the file's contents do not matter, and usually are empty. </FONT>
<P><FONT class=extract>The purpose of the empty target file is to record, with its last-modification time, when the rule's recipe was last executed. It does so because one of the commands in the recipe is a <CODE>touch</CODE> command to update the target file. </FONT>
<P><FONT class=extract>The empty target file should have some prerequisites (otherwise it doesn't make sense). When you ask to remake the empty target, the recipe is executed if any prerequisite is more recent than the target; in other words, if a prerequisite has changed since the last time you remade the target. Here is an example: </FONT><PRE class=example><FONT class=extract>     print: foo.c bar.c
             lpr -p $?
             touch print
</FONT></PRE>
<P><A name=index-g_t_0040code_007bprint_007d-target-218></A><A name=index-g_t_0040code_007blpr_007d-_0028shell-command_0029-219></A><A name=index-g_t_0040code_007btouch_007d-_0028shell-command_0029-220></A><FONT class=extract>With this rule, &#8216;<SAMP><SPAN class=samp>make print</SPAN></SAMP>&#8217; will execute the <CODE>lpr</CODE> command if either source file has changed since the last &#8216;<SAMP><SPAN class=samp>make print</SPAN></SAMP>&#8217;. The automatic variable &#8216;<SAMP><SPAN class=samp>$?</SPAN></SAMP>&#8217; is used to print only those files that have changed (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Special-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets" rel=next><FONT class=extract>Multiple Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets" rel=previous><FONT class=extract>Empty Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.9 Special Built-in Target Names</FONT></H3>
<P><A name=index-special-targets-221></A><A name=index-built_002din-special-targets-222></A><A name=index-targets_002c-built_002din-special-223></A><FONT class=extract>Certain names have special meanings if they appear as targets. </FONT><A name=index-g_t_002ePHONY-224></A>
<DL>
<DT><FONT class=extract><CODE>.PHONY</CODE> </FONT>
<DD><FONT class=extract>The prerequisites of the special target <CODE>.PHONY</CODE> are considered to be phony targets. When it is time to consider such a target, <CODE>make</CODE> will run its recipe unconditionally, regardless of whether a file with that name exists or what its last-modification time is. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eSUFFIXES-225></A><BR></P>
<DT><FONT class=extract><CODE>.SUFFIXES</CODE> </FONT>
<DD><FONT class=extract>The prerequisites of the special target <CODE>.SUFFIXES</CODE> are the list of suffixes to be used in checking for suffix rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eDEFAULT-226></A><BR></P>
<DT><FONT class=extract><CODE>.DEFAULT</CODE> </FONT>
<DD><FONT class=extract>The recipe specified for <CODE>.DEFAULT</CODE> is used for any target for which no rules are found (either explicit rules or implicit rules). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort"><FONT class=extract>Last Resort</FONT></A><FONT class=extract>. If a <CODE>.DEFAULT</CODE> recipe is specified, every file mentioned as a prerequisite, but not as a target in a rule, will have that recipe executed on its behalf. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search Algorithm</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002ePRECIOUS-227></A><BR></P>
<DT><FONT class=extract><CODE>.PRECIOUS</CODE> </FONT>
<DD><A name=index-precious-targets-228></A><A name=index-preserving-with-_0040code_007b_002ePRECIOUS_007d-229></A><FONT class=extract>The targets which <CODE>.PRECIOUS</CODE> depends on are given the following special treatment: if <CODE>make</CODE> is killed or interrupted during the execution of their recipes, the target is not deleted. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts"><FONT class=extract>Interrupting or Killing <CODE>make</CODE></FONT></A><FONT class=extract>. Also, if the target is an intermediate file, it will not be deleted after it is no longer needed, as is normally done. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. In this latter respect it overlaps with the <CODE>.SECONDARY</CODE> special target. </FONT>
<P><FONT class=extract>You can also list the target pattern of an implicit rule (such as &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217;) as a prerequisite file of the special target <CODE>.PRECIOUS</CODE> to preserve intermediate files created by rules whose target patterns match that file's name. </FONT>
<P><A name=index-g_t_002eINTERMEDIATE-230><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.INTERMEDIATE</CODE> </FONT>
<DD><A name=index-intermediate-targets_002c-explicit-231></A><FONT class=extract>The targets which <CODE>.INTERMEDIATE</CODE> depends on are treated as intermediate files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. <CODE>.INTERMEDIATE</CODE> with no prerequisites has no effect. </FONT>
<P><A name=index-g_t_002eSECONDARY-232></A><BR></P>
<DT><FONT class=extract><CODE>.SECONDARY</CODE> </FONT>
<DD><A name=index-secondary-targets-233></A><A name=index-preserving-with-_0040code_007b_002eSECONDARY_007d-234></A><FONT class=extract>The targets which <CODE>.SECONDARY</CODE> depends on are treated as intermediate files, except that they are never automatically deleted. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract><CODE>.SECONDARY</CODE> with no prerequisites causes all targets to be treated as secondary (i.e., no target is removed because it is considered intermediate). </FONT>
<P><A name=index-g_t_002eSECONDEXPANSION-235><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.SECONDEXPANSION</CODE> </FONT>
<DD><FONT class=extract>If <CODE>.SECONDEXPANSION</CODE> is mentioned as a target anywhere in the makefile, then all prerequisite lists defined <EM>after</EM> it appears will be expanded a second time after all makefiles have been read in. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eDELETE_005fON_005fERROR-236></A><BR></P>
<DT><FONT class=extract><CODE>.DELETE_ON_ERROR</CODE> </FONT>
<DD><A name=index-removing-targets-on-failure-237></A><FONT class=extract>If <CODE>.DELETE_ON_ERROR</CODE> is mentioned as a target anywhere in the makefile, then <CODE>make</CODE> will delete the target of a rule if it has changed and its recipe exits with a nonzero exit status, just as it does when it receives a signal. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eIGNORE-238></A><BR></P>
<DT><FONT class=extract><CODE>.IGNORE</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.IGNORE</CODE>, then <CODE>make</CODE> will ignore errors in execution of the recipe for those particular files. The recipe for <CODE>.IGNORE</CODE> (if any) is ignored. </FONT>
<P><FONT class=extract>If mentioned as a target with no prerequisites, <CODE>.IGNORE</CODE> says to ignore errors in execution of recipes for all files. This usage of &#8216;<SAMP><SPAN class=samp>.IGNORE</SPAN></SAMP>&#8217; is supported only for historical compatibility. Since this affects every recipe in the makefile, it is not very useful; we recommend you use the more selective ways to ignore errors in specific recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eLOW_005fRESOLUTION_005fTIME-239><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.LOW_RESOLUTION_TIME</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.LOW_RESOLUTION_TIME</CODE>, <SAMP><SPAN class=command>make</SPAN></SAMP> assumes that these files are created by commands that generate low resolution time stamps. The recipe for the <CODE>.LOW_RESOLUTION_TIME</CODE> target are ignored. </FONT>
<P><FONT class=extract>The high resolution file time stamps of many modern file systems lessen the chance of <SAMP><SPAN class=command>make</SPAN></SAMP> incorrectly concluding that a file is up to date. Unfortunately, some hosts do not provide a way to set a high resolution file time stamp, so commands like &#8216;<SAMP><SPAN class=samp>cp -p</SPAN></SAMP>&#8217; that explicitly set a file's time stamp must discard its sub-second part. If a file is created by such a command, you should list it as a prerequisite of <CODE>.LOW_RESOLUTION_TIME</CODE> so that <SAMP><SPAN class=command>make</SPAN></SAMP> does not mistakenly conclude that the file is out of date. For example: </FONT><PRE class=example><FONT class=extract>          .LOW_RESOLUTION_TIME: dst
          dst: src
                  cp -p src dst
</FONT></PRE>
<P><FONT class=extract>Since &#8216;<SAMP><SPAN class=samp>cp -p</SPAN></SAMP>&#8217; discards the sub-second part of <SAMP><SPAN class=file>src</SPAN></SAMP>'s time stamp, <SAMP><SPAN class=file>dst</SPAN></SAMP> is typically slightly older than <SAMP><SPAN class=file>src</SPAN></SAMP> even when it is up to date. The <CODE>.LOW_RESOLUTION_TIME</CODE> line causes <SAMP><SPAN class=command>make</SPAN></SAMP> to consider <SAMP><SPAN class=file>dst</SPAN></SAMP> to be up to date if its time stamp is at the start of the same second that <SAMP><SPAN class=file>src</SPAN></SAMP>'s time stamp is in. </FONT>
<P><FONT class=extract>Due to a limitation of the archive format, archive member time stamps are always low resolution. You need not list archive members as prerequisites of <CODE>.LOW_RESOLUTION_TIME</CODE>, as <SAMP><SPAN class=command>make</SPAN></SAMP> does this automatically. </FONT>
<P><A name=index-g_t_002eSILENT-240><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.SILENT</CODE> </FONT>
<DD><FONT class=extract>If you specify prerequisites for <CODE>.SILENT</CODE>, then <CODE>make</CODE> will not print the recipe used to remake those particular files before executing them. The recipe for <CODE>.SILENT</CODE> is ignored. </FONT>
<P><FONT class=extract>If mentioned as a target with no prerequisites, <CODE>.SILENT</CODE> says not to print any recipes before executing them. This usage of &#8216;<SAMP><SPAN class=samp>.SILENT</SPAN></SAMP>&#8217; is supported only for historical compatibility. We recommend you use the more selective ways to silence specific recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>. If you want to silence all recipes for a particular run of <CODE>make</CODE>, use the &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--silent</SPAN></SAMP>&#8217;<!-- /@w --> option (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Options Summary</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_002eEXPORT_005fALL_005fVARIABLES-241><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.EXPORT_ALL_VARIABLES</CODE> </FONT>
<DD><FONT class=extract>Simply by being mentioned as a target, this tells <CODE>make</CODE> to export all variables to child processes by default. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_002eNOTPARALLEL-242></A><BR></P>
<DT><FONT class=extract><CODE>.NOTPARALLEL</CODE> </FONT>
<DD><A name=index-parallel-execution_002c-overriding-243></A><FONT class=extract>If <CODE>.NOTPARALLEL</CODE> is mentioned as a target, then this invocation of <CODE>make</CODE> will be run serially, even if the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is given. Any recursively invoked <CODE>make</CODE> command will still run recipes in parallel (unless its makefile also contains this target). Any prerequisites on this target are ignored. </FONT>
<P><A name=index-g_t_002eONESHELL-244></A><BR></P>
<DT><FONT class=extract><CODE>.ONESHELL</CODE> </FONT>
<DD><A name=index-recipe-execution_002c-single-invocation-245></A><FONT class=extract>If <CODE>.ONESHELL</CODE> is mentioned as a target, then when a target is built all lines of the recipe will be given to a single invocation of the shell rather than each line being invoked separately (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_002ePOSIX-246></A><BR></P>
<DT><FONT class=extract><CODE>.POSIX</CODE> </FONT>
<DD><A name=index-POSIX_002dconforming-mode_002c-setting-247></A><FONT class=extract>If <CODE>.POSIX</CODE> is mentioned as a target, then the makefile will be parsed and run in POSIX-conforming mode. This does <EM>not</EM> mean that only POSIX-conforming makefiles will be accepted: all advanced GNU <CODE>make</CODE> features are still available. Rather, this target causes <CODE>make</CODE> to behave as required by POSIX in those areas where <CODE>make</CODE>'s default behavior differs. </FONT>
<P><FONT class=extract>In particular, if this target is mentioned then recipes will be invoked as if the shell had been passed the <CODE>-e</CODE> flag: the first failing command in a recipe will cause the recipe to fail immediately. </FONT></P></DD></DL>
<P><FONT class=extract>Any defined implicit rule suffix also counts as a special target if it appears as a target, and so does the concatenation of two suffixes, such as &#8216;<SAMP><SPAN class=samp>.c.o</SPAN></SAMP>&#8217;. These targets are suffix rules, an obsolete way of defining implicit rules (but a way still widely used). In principle, any target name could be special in this way if you break it in two and add both pieces to the suffix list. In practice, suffixes normally begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;, so these special target names also begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Multiple-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules" rel=next><FONT class=extract>Multiple Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Special-Targets" rel=previous><FONT class=extract>Special Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.10 Multiple Targets in a Rule</FONT></H3>
<P><A name=index-multiple-targets-248></A><A name=index-several-targets-in-a-rule-249></A><A name=index-targets_002c-multiple-250></A><A name=index-rule_002c-with-multiple-targets-251></A><FONT class=extract>A rule with multiple targets is equivalent to writing many rules, each with one target, and all identical aside from that. The same recipe applies to all the targets, but its effect may vary because you can substitute the actual target name into the recipe using &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217;. The rule contributes the same prerequisites to all the targets also. </FONT>
<P><FONT class=extract>This is useful in two cases. </FONT>
<UL>
<LI><FONT class=extract>You want just prerequisites, no recipe. For example: </FONT><PRE class=example><FONT class=extract>          kbd.o command.o files.o: command.h
</FONT></PRE>
<P class=noindent><FONT class=extract>gives an additional prerequisite to each of the three object files mentioned. </FONT></P>
<LI><FONT class=extract>Similar recipes work for all the targets. The recipes do not need to be absolutely identical, since the automatic variable &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; can be used to substitute the particular target to be remade into the commands (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). For example: </FONT><PRE class=example><FONT class=extract>          bigoutput littleoutput : text.g
                  generate text.g -$(subst output,,$@) &gt; $@
</FONT></PRE>
<P><A name=index-subst-252></A><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          bigoutput : text.g
                  generate text.g -big &gt; bigoutput
          littleoutput : text.g
                  generate text.g -little &gt; littleoutput
</FONT></PRE>
<P class=noindent><FONT class=extract>Here we assume the hypothetical program <CODE>generate</CODE> makes two types of output, one if given &#8216;<SAMP><SPAN class=samp>-big</SPAN></SAMP>&#8217; and one if given &#8216;<SAMP><SPAN class=samp>-little</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>, for an explanation of the <CODE>subst</CODE> function. </FONT></P></LI></UL>
<P><FONT class=extract>Suppose you would like to vary the prerequisites according to the target, much as the variable &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; allows you to vary the recipe. You cannot do this with multiple targets in an ordinary rule, but you can do it with a <DFN>static pattern rule</DFN>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern"><FONT class=extract>Static Pattern Rules</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Multiple-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern" rel=next><FONT class=extract>Static Pattern</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets" rel=previous><FONT class=extract>Multiple Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.11 Multiple Rules for One Target</FONT></H3>
<P><A name=index-multiple-rules-for-one-target-253></A><A name=index-several-rules-for-one-target-254></A><A name=index-rule_002c-multiple-for-one-target-255></A><A name=index-target_002c-multiple-rules-for-one-256></A><FONT class=extract>One file can be the target of several rules. All the prerequisites mentioned in all the rules are merged into one list of prerequisites for the target. If the target is older than any prerequisite from any rule, the recipe is executed. </FONT>
<P><FONT class=extract>There can only be one recipe to be executed for a file. If more than one rule gives a recipe for the same file, <CODE>make</CODE> uses the last one given and prints an error message. (As a special case, if the file's name begins with a dot, no error message is printed. This odd behavior is only for compatibility with other implementations of <CODE>make</CODE><SMALL class=dots><FONT size=2>...</FONT></SMALL> you should avoid using it). Occasionally it is useful to have the same target invoke multiple recipes which are defined in different parts of your makefile; you can use <DFN>double-colon rules</DFN> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon"><FONT class=extract>Double-Colon</FONT></A><FONT class=extract>) for this. </FONT>
<P><FONT class=extract>An extra rule with just prerequisites can be used to give a few extra prerequisites to many files at once. For example, makefiles often have a variable, such as <CODE>objects</CODE>, containing a list of all the compiler output files in the system being made. An easy way to say that all of them must be recompiled if <SAMP><SPAN class=file>config.h</SPAN></SAMP> changes is to write the following: </FONT><PRE class=example><FONT class=extract>     objects = foo.o bar.o
     foo.o : defs.h
     bar.o : defs.h test.h
     $(objects) : config.h
</FONT></PRE>
<P><FONT class=extract>This could be inserted or taken out without changing the rules that really specify how to make the object files, making it a convenient form to use if you wish to add the additional prerequisite intermittently. </FONT>
<P><FONT class=extract>Another wrinkle is that the additional prerequisites could be specified with a variable that you set with a command line argument to <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>). For example, </FONT><PRE class=example><FONT class=extract>     extradeps=
     $(objects) : $(extradeps)
</FONT></PRE>
<P class=noindent><FONT class=extract>means that the command &#8216;<SAMP><SPAN class=samp>make extradeps=foo.h</SPAN></SAMP>&#8217; will consider <SAMP><SPAN class=file>foo.h</SPAN></SAMP> as a prerequisite of each object file, but plain &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; will not. </FONT>
<P><FONT class=extract>If none of the explicit rules for a target has a recipe, then <CODE>make</CODE> searches for an applicable implicit rule to find one see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Static-Pattern></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon" rel=next><FONT class=extract>Double-Colon</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules" rel=previous><FONT class=extract>Multiple Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.12 Static Pattern Rules</FONT></H3>
<P><A name=index-static-pattern-rule-257></A><A name=index-rule_002c-static-pattern-258></A><A name=index-pattern-rules_002c-static-_0028not-implicit_0029-259></A><A name=index-varying-prerequisites-260></A><A name=index-prerequisites_002c-varying-_0028static-pattern_0029-261></A><FONT class=extract><DFN>Static pattern rules</DFN> are rules which specify multiple targets and construct the prerequisite names for each target based on the target name. They are more general than ordinary rules with multiple targets because the targets do not have to have identical prerequisites. Their prerequisites must be <EM>analogous</EM>, but not necessarily <EM>identical</EM>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Static-Usage"><FONT class=extract>Static Usage</FONT></A><FONT class=extract>: The syntax of static pattern rules. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit"><FONT class=extract>Static versus Implicit</FONT></A><FONT class=extract>: When are they better than implicit rules? </FONT></LI></UL>
<DIV class=node><A name=Static-Usage></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit" rel=next><FONT class=extract>Static versus Implicit</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern" rel=previous><FONT class=extract>Static Pattern</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern" rel=up><FONT class=extract>Static Pattern</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.12.1 Syntax of Static Pattern Rules</FONT></H4>
<P><A name=index-static-pattern-rule_002c-syntax-of-262></A><A name=index-pattern-rules_002c-static_002c-syntax-of-263></A><FONT class=extract>Here is the syntax of a static pattern rule: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> ...: <VAR>target-pattern</VAR>: <VAR>prereq-patterns</VAR> ...
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P class=noindent><FONT class=extract>The <VAR>targets</VAR> list specifies the targets that the rule applies to. The targets can contain wildcard characters, just like the targets of ordinary rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-target-pattern_002c-static-_0028not-implicit_0029-264></A><A name=index-stem-265></A><FONT class=extract>The <VAR>target-pattern</VAR> and <VAR>prereq-patterns</VAR> say how to compute the prerequisites of each target. Each target is matched against the <VAR>target-pattern</VAR> to extract a part of the target name, called the <DFN>stem</DFN>. This stem is substituted into each of the <VAR>prereq-patterns</VAR> to make the prerequisite names (one from each <VAR>prereq-pattern</VAR>). </FONT>
<P><FONT class=extract>Each pattern normally contains the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; just once. When the <VAR>target-pattern</VAR> matches a target, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; can match any part of the target name; this part is called the <DFN>stem</DFN>. The rest of the pattern must match exactly. For example, the target <SAMP><SPAN class=file>foo.o</SPAN></SAMP> matches the pattern &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217;, with &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; as the stem. The targets <SAMP><SPAN class=file>foo.c</SPAN></SAMP> and <SAMP><SPAN class=file>foo.out</SPAN></SAMP> do not match that pattern. </FONT>
<P><A name=index-prerequisite-pattern_002c-static-_0028not-implicit_0029-266></A><FONT class=extract>The prerequisite names for each target are made by substituting the stem for the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in each prerequisite pattern. For example, if one prerequisite pattern is <SAMP><SPAN class=file>%.c</SPAN></SAMP>, then substitution of the stem &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; gives the prerequisite name <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. It is legitimate to write a prerequisite pattern that does not contain &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;; then this prerequisite is the same for all targets. </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-static-pattern-267></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-268></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-269></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-270></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-static-pattern-271></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in pattern rules can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared to file names or has a stem substituted into it. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. For example, the pattern <SAMP><SPAN class=file>the\%weird\\%pattern\\</SPAN></SAMP> has &#8216;<SAMP><SPAN class=samp>the%weird\</SPAN></SAMP>&#8217; preceding the operative &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character, and &#8216;<SAMP><SPAN class=samp>pattern\\</SPAN></SAMP>&#8217; following it. The final two backslashes are left alone because they cannot affect any &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. </FONT>
<P><FONT class=extract>Here is an example, which compiles each of <SAMP><SPAN class=file>foo.o</SPAN></SAMP> and <SAMP><SPAN class=file>bar.o</SPAN></SAMP> from the corresponding <SAMP><SPAN class=file>.c</SPAN></SAMP> file: </FONT><PRE class=example><FONT class=extract>     objects = foo.o bar.o
     
     all: $(objects)
     
     $(objects): %.o: %.c
             $(CC) -c $(CFLAGS) $&lt; -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>Here &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; is the automatic variable that holds the name of the prerequisite and &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the automatic variable that holds the name of the target; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Each target specified must match the target pattern; a warning is issued for each target that does not. If you have a list of files, only some of which will match the pattern, you can use the <CODE>filter</CODE> function to remove non-matching file names (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     files = foo.elc bar.o lose.o
     
     $(filter %.o,$(files)): %.o: %.c
             $(CC) -c $(CFLAGS) $&lt; -o $@
     $(filter %.elc,$(files)): %.elc: %.el
             emacs -f batch-byte-compile $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>In this example the result of &#8216;<SAMP><SPAN class=samp>$(filter %.o,$(files))</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o lose.o</SPAN></SAMP>, and the first static pattern rule causes each of these object files to be updated by compiling the corresponding C source file. The result of &#8216;<SAMP><SPAN class=samp>$(filter&nbsp;%.elc,$(files))</SPAN></SAMP>&#8217;<!-- /@w --> is <SAMP><SPAN class=file>foo.elc</SPAN></SAMP>, so that file is made from <SAMP><SPAN class=file>foo.el</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Another example shows how to use <CODE>$*</CODE> in static pattern rules: </FONT><A name=index-g_t_0024_002a_0040r_007b_002c-and-static-pattern_007d-272></A><PRE class=example><FONT class=extract>     bigoutput littleoutput : %output : text.g
             generate text.g -$* &gt; $@
</FONT></PRE>
<P class=noindent><FONT class=extract>When the <CODE>generate</CODE> command is run, <CODE>$*</CODE> will expand to the stem, either &#8216;<SAMP><SPAN class=samp>big</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>little</SPAN></SAMP>&#8217;. </FONT>
<DIV class=node><A name=Static-versus-Implicit></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Static-Usage" rel=previous><FONT class=extract>Static Usage</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern" rel=up><FONT class=extract>Static Pattern</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>4.12.2 Static Pattern Rules versus Implicit Rules</FONT></H4>
<P><A name=index-rule_002c-static-pattern-versus-implicit-273></A><A name=index-static-pattern-rule_002c-versus-implicit-274></A><FONT class=extract>A static pattern rule has much in common with an implicit rule defined as a pattern rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). Both have a pattern for the target and patterns for constructing the names of prerequisites. The difference is in how <CODE>make</CODE> decides <EM>when</EM> the rule applies. </FONT>
<P><FONT class=extract>An implicit rule <EM>can</EM> apply to any target that matches its pattern, but it <EM>does</EM> apply only when the target has no recipe otherwise specified, and only when the prerequisites can be found. If more than one implicit rule appears applicable, only one applies; the choice depends on the order of rules. </FONT>
<P><FONT class=extract>By contrast, a static pattern rule applies to the precise list of targets that you specify in the rule. It cannot apply to any other target and it invariably does apply to each of the targets specified. If two conflicting rules apply, and both have recipes, that's an error. </FONT>
<P><FONT class=extract>The static pattern rule can be better than an implicit rule for these reasons: </FONT>
<UL>
<LI><FONT class=extract>You may wish to override the usual implicit rule for a few files whose names cannot be categorized syntactically but can be given in an explicit list. </FONT>
<LI><FONT class=extract>If you cannot be sure of the precise contents of the directories you are using, you may not be sure which other irrelevant files might lead <CODE>make</CODE> to use the wrong implicit rule. The choice might depend on the order in which the implicit rule search is done. With static pattern rules, there is no uncertainty: each rule applies to precisely the targets specified. </FONT></LI></UL>
<DIV class=node><A name=Double-Colon></A><A name=Double_002dColon></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites" rel=next><FONT class=extract>Automatic Prerequisites</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern" rel=previous><FONT class=extract>Static Pattern</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.13 Double-Colon Rules</FONT></H3>
<P><A name=index-double_002dcolon-rules-275></A><A name=index-rule_002c-double_002dcolon-_0028_0040code_007b_003a_003a_007d_0029-276></A><A name=index-multiple-rules-for-one-target-_0028_0040code_007b_003a_003a_007d_0029-277></A><A name=index-g_t_0040code_007b_003a_003a_007d-rules-_0028double_002dcolon_0029-278></A><FONT class=extract><DFN>Double-colon</DFN> rules are explicit rules written with &#8216;<SAMP><SPAN class=samp>::</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>:</SPAN></SAMP>&#8217; after the target names. They are handled differently from ordinary rules when the same target appears in more than one rule. Pattern rules with double-colons have an entirely different meaning (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>When a target appears in multiple rules, all the rules must be the same type: all ordinary, or all double-colon. If they are double-colon, each of them is independent of the others. Each double-colon rule's recipe is executed if the target is older than any prerequisites of that rule. If there are no prerequisites for that rule, its recipe is always executed (even if the target already exists). This can result in executing none, any, or all of the double-colon rules. </FONT>
<P><FONT class=extract>Double-colon rules with the same target are in fact completely separate from one another. Each double-colon rule is processed individually, just as rules with different targets are processed. </FONT>
<P><FONT class=extract>The double-colon rules for a target are executed in the order they appear in the makefile. However, the cases where double-colon rules really make sense are those where the order of executing the recipes would not matter. </FONT>
<P><FONT class=extract>Double-colon rules are somewhat obscure and not often very useful; they provide a mechanism for cases in which the method used to update a target differs depending on which prerequisite files caused the update, and such cases are rare. </FONT>
<P><FONT class=extract>Each double-colon rule should specify a recipe; if it does not, an implicit rule will be used if one applies. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Automatic-Prerequisites></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon" rel=previous><FONT class=extract>Double-Colon</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=up><FONT class=extract>Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>4.14 Generating Prerequisites Automatically</FONT></H3>
<P><A name=index-prerequisites_002c-automatic-generation-279></A><A name=index-automatic-generation-of-prerequisites-280></A><A name=index-generating-prerequisites-automatically-281></A><FONT class=extract>In the makefile for a program, many of the rules you need to write often say only that some object file depends on some header file. For example, if <SAMP><SPAN class=file>main.c</SPAN></SAMP> uses <SAMP><SPAN class=file>defs.h</SPAN></SAMP> via an <CODE>#include</CODE>, you would write: </FONT><PRE class=example><FONT class=extract>     main.o: defs.h
</FONT></PRE>
<P class=noindent><FONT class=extract>You need this rule so that <CODE>make</CODE> knows that it must remake <SAMP><SPAN class=file>main.o</SPAN></SAMP> whenever <SAMP><SPAN class=file>defs.h</SPAN></SAMP> changes. You can see that for a large program you would have to write dozens of such rules in your makefile. And, you must always be very careful to update the makefile every time you add or remove an <CODE>#include</CODE>. </FONT><A name=index-g_t_0040code_007b_0023include_007d-282></A><A name=index-g_t_0040code_007b_002dM_007d-_0028to-compiler_0029-283></A><FONT class=extract>To avoid this hassle, most modern C compilers can write these rules for you, by looking at the <CODE>#include</CODE> lines in the source files. Usually this is done with the &#8216;<SAMP><SPAN class=samp>-M</SPAN></SAMP>&#8217; option to the compiler. For example, the command: </FONT><PRE class=example><FONT class=extract>     cc -M main.c
</FONT></PRE>
<P class=noindent><FONT class=extract>generates the output: </FONT><PRE class=example><FONT class=extract>     main.o : main.c defs.h
</FONT></PRE>
<P class=noindent><FONT class=extract>Thus you no longer have to write all those rules yourself. The compiler will do it for you. </FONT>
<P><FONT class=extract>Note that such a rule constitutes mentioning <SAMP><SPAN class=file>main.o</SPAN></SAMP> in a makefile, so it can never be considered an intermediate file by implicit rule search. This means that <CODE>make</CODE> won't ever remove the file after using it; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_0040code_007bmake-depend_007d-284></A><FONT class=extract>With old <CODE>make</CODE> programs, it was traditional practice to use this compiler feature to generate prerequisites on demand with a command like &#8216;<SAMP><SPAN class=samp>make depend</SPAN></SAMP>&#8217;. That command would create a file <SAMP><SPAN class=file>depend</SPAN></SAMP> containing all the automatically-generated prerequisites; then the makefile could use <CODE>include</CODE> to read them in (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Include</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>In GNU <CODE>make</CODE>, the feature of remaking makefiles makes this practice obsolete&#8212;you need never tell <CODE>make</CODE> explicitly to regenerate the prerequisites, because it always regenerates any makefile that is out of date. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>Remaking Makefiles</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>The practice we recommend for automatic prerequisite generation is to have one makefile corresponding to each source file. For each source file <SAMP><VAR>name</VAR><SPAN class=file>.c</SPAN></SAMP> there is a makefile <SAMP><VAR>name</VAR><SPAN class=file>.d</SPAN></SAMP> which lists what files the object file <SAMP><VAR>name</VAR><SPAN class=file>.o</SPAN></SAMP> depends on. That way only the source files that have changed need to be rescanned to produce the new prerequisites. </FONT>
<P><FONT class=extract>Here is the pattern rule to generate a file of prerequisites (i.e., a makefile) called <SAMP><VAR>name</VAR><SPAN class=file>.d</SPAN></SAMP> from a C source file called <SAMP><VAR>name</VAR><SPAN class=file>.c</SPAN></SAMP>: </FONT><PRE class=smallexample><FONT class=extract>     %.d: %.c
             @set -e; rm -f $@; \
              $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \
              sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' &lt; $@.$$$$ &gt; $@; \
              rm -f $@.$$$$
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>, for information on defining pattern rules. The &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; flag to the shell causes it to exit immediately if the <CODE>$(CC)</CODE> command (or any other command) fails (exits with a nonzero status). </FONT><A name=index-g_t_0040code_007b_002de_007d-_0028shell-flag_0029-285></A><A name=index-g_t_0040code_007b_002dMM_007d-_0028to-GNU-compiler_0029-286></A><FONT class=extract>With the GNU C compiler, you may wish to use the &#8216;<SAMP><SPAN class=samp>-MM</SPAN></SAMP>&#8217; flag instead of &#8216;<SAMP><SPAN class=samp>-M</SPAN></SAMP>&#8217;. This omits prerequisites on system header files. See </FONT><A href="https://www.gnu.org/software/make/manual/gcc.html#Preprocessor-Options"><FONT class=extract>Options Controlling the Preprocessor</FONT></A><FONT class=extract>, for details. </FONT>
<P><A name=index-g_t_0040code_007bsed_007d-_0028shell-command_0029-287></A><FONT class=extract>The purpose of the <CODE>sed</CODE> command is to translate (for example): </FONT><PRE class=example><FONT class=extract>     main.o : main.c defs.h
</FONT></PRE>
<P class=noindent><FONT class=extract>into: </FONT><PRE class=example><FONT class=extract>     main.o main.d : main.c defs.h
</FONT></PRE>
<P class=noindent><A name=index-g_t_0040code_007b_002ed_007d-288></A><FONT class=extract>This makes each &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; file depend on all the source and header files that the corresponding &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file depends on. <CODE>make</CODE> then knows it must regenerate the prerequisites whenever any of the source or header files changes. </FONT>
<P><FONT class=extract>Once you've defined the rule to remake the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files, you then use the <CODE>include</CODE> directive to read them all in. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Include</FONT></A><FONT class=extract>. For example: </FONT><PRE class=example><FONT class=extract>     sources = foo.c bar.c
     
     include $(sources:.c=.d)
</FONT></PRE>
<P class=noindent><FONT class=extract>(This example uses a substitution variable reference to translate the list of source files &#8216;<SAMP><SPAN class=samp>foo.c bar.c</SPAN></SAMP>&#8217; into a list of prerequisite makefiles, &#8216;<SAMP><SPAN class=samp>foo.d bar.d</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs"><FONT class=extract>Substitution Refs</FONT></A><FONT class=extract>, for full information on substitution references.) Since the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files are makefiles like any others, <CODE>make</CODE> will remake them as necessary with no further work from you. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>Remaking Makefiles</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Note that the &#8216;<SAMP><SPAN class=samp>.d</SPAN></SAMP>&#8217; files contain target definitions; you should be sure to place the <CODE>include</CODE> directive <EM>after</EM> the first, default goal in your makefiles or run the risk of having a random object file become the default goal. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works"><FONT class=extract>How Make Works</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Recipes></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=next>Using Variables</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Rules" rel=previous>Rules</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>5 Writing Recipes in Rules</FONT></H2>
<P><A name=index-recipes-289></A><A name=index-recipes_002c-how-to-write-290></A><A name=index-writing-recipes-291></A><FONT class=extract>The recipe of a rule consists of one or more shell command lines to be executed, one at a time, in the order they appear. Typically, the result of executing these commands is that the target of the rule is brought up to date. </FONT>
<P><FONT class=extract>Users use many different shell programs, but recipes in makefiles are always interpreted by <SAMP><SPAN class=file>/bin/sh</SPAN></SAMP> unless the makefile specifies otherwise. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax"><FONT class=extract>Recipe Syntax</FONT></A><FONT class=extract>: Recipe syntax features and pitfalls. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Echoing</FONT></A><FONT class=extract>: How to control when recipes are echoed. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Execution</FONT></A><FONT class=extract>: How recipes are executed. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel</FONT></A><FONT class=extract>: How recipes can be executed in parallel. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors</FONT></A><FONT class=extract>: What happens after a recipe execution error. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Interrupts"><FONT class=extract>Interrupts</FONT></A><FONT class=extract>: What happens when a recipe is interrupted. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursion</FONT></A><FONT class=extract>: Invoking <CODE>make</CODE> from makefiles. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes"><FONT class=extract>Canned Recipes</FONT></A><FONT class=extract>: Defining canned recipes. </FONT>
<LI><A accessKey=9 href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Empty Recipes</FONT></A><FONT class=extract>: Defining useful, do-nothing recipes. </FONT></LI></UL>
<DIV class=node><A name=Recipe-Syntax></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Echoing" rel=next><FONT class=extract>Echoing</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=previous><FONT class=extract>Recipes</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.1 Recipe Syntax</FONT></H3>
<P><A name=index-recipe-syntax-292></A><A name=index-syntax-of-recipe-293></A><FONT class=extract>Makefiles have the unusual property that there are really two distinct syntaxes in one file. Most of the makefile uses <CODE>make</CODE> syntax (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>). However, recipes are meant to be interpreted by the shell and so they are written using shell syntax. The <CODE>make</CODE> program does not try to understand shell syntax: it performs only a very few specific translations on the content of the recipe before handing it to the shell. </FONT>
<P><FONT class=extract>Each line in the recipe must start with a tab (or the first character in the value of the <CODE>.RECIPEPREFIX</CODE> variable; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>), except that the first recipe line may be attached to the target-and-prerequisites line with a semicolon in between. <EM>Any</EM> line in the makefile that begins with a tab and appears in a &#8220;rule context&#8221; (that is, after a rule has been started until another rule or variable definition) will be considered part of a recipe for that rule. Blank lines and lines of just comments may appear among the recipe lines; they are ignored. </FONT>
<P><FONT class=extract>Some consequences of these rules include: </FONT>
<UL>
<LI><FONT class=extract>A blank line that begins with a tab is not blank: it's an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Empty Recipes</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-comments_002c-in-recipes-294></A><A name=index-recipes_002c-comments-in-295></A><A name=index-g_t_0040code_007b_0023_007d-_0028comments_0029_002c-in-recipes-296></A></P>
<LI><FONT class=extract>A comment in a recipe is not a <CODE>make</CODE> comment; it will be passed to the shell as-is. Whether the shell treats it as a comment or not depends on your shell. </FONT>
<LI><FONT class=extract>A variable definition in a &#8220;rule context&#8221; which is indented by a tab as the first character on the line, will be considered part of a recipe, not a <CODE>make</CODE> variable definition, and passed to the shell. </FONT>
<LI><FONT class=extract>A conditional expression (<CODE>ifdef</CODE>, <CODE>ifeq</CODE>, etc. see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax"><FONT class=extract>Syntax of Conditionals</FONT></A><FONT class=extract>) in a &#8220;rule context&#8221; which is indented by a tab as the first character on the line, will be considered part of a recipe and be passed to the shell. </FONT></LI></UL>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines"><FONT class=extract>Splitting Recipe Lines</FONT></A><FONT class=extract>: Breaking long recipe lines for readability. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes"><FONT class=extract>Variables in Recipes</FONT></A><FONT class=extract>: Using <CODE>make</CODE> variables in recipes. </FONT></LI></UL>
<DIV class=node><A name=Splitting-Recipe-Lines></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes" rel=next><FONT class=extract>Variables in Recipes</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" rel=previous><FONT class=extract>Recipe Syntax</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" rel=up><FONT class=extract>Recipe Syntax</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.1.1 Splitting Recipe Lines</FONT></H4>
<P><A name=index-recipes_002c-splitting-297></A><A name=index-splitting-recipes-298></A><A name=index-recipes_002c-backslash-_0028_0040code_007b_005c_007d_0029-in-299></A><A name=index-recipes_002c-quoting-newlines-in-300></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-in-recipes-301></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-in-recipes-302></A><A name=index-quoting-newline_002c-in-recipes-303></A><A name=index-newline_002c-quoting_002c-in-recipes-304></A><FONT class=extract>One of the few ways in which <CODE>make</CODE> does interpret recipes is checking for a backslash just before the newline. As in normal makefile syntax, a single logical recipe line can be split into multiple physical lines in the makefile by placing a backslash before each newline. A sequence of lines like this is considered a single recipe line, and one instance of the shell will be invoked to run it. </FONT>
<P><FONT class=extract>However, in contrast to how they are treated in other places in a makefile (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines"><FONT class=extract>Splitting Long Lines</FONT></A><FONT class=extract>), backslash/newline pairs are <EM>not</EM> removed from the recipe. Both the backslash and the newline characters are preserved and passed to the shell. How the backslash/newline is interpreted depends on your shell. If the first character of the next line after the backslash/newline is the recipe prefix character (a tab by default; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>), then that character (and only that character) is removed. Whitespace is never added to the recipe. </FONT>
<P><FONT class=extract>For example, the recipe for the all target in this makefile: </FONT><PRE class=example><FONT class=extract>     all :
             @echo no\
     space
             @echo no\
             space
             @echo one \
             space
             @echo one\
              space
</FONT></PRE>
<P class=noindent><FONT class=extract>consists of four separate shell commands where the output is: </FONT><PRE class=example><FONT class=extract>     nospace
     nospace
     one space
     one space
</FONT></PRE>
<P><FONT class=extract>As a more complex example, this makefile: </FONT><PRE class=example><FONT class=extract>     all : ; @echo 'hello \
             world' ; echo "hello \
         world"
</FONT></PRE>
<P class=noindent><FONT class=extract>will invoke one shell with a command of: </FONT><PRE class=example><FONT class=extract>     echo 'hello \
     world' ; echo "hello \
         world"
</FONT></PRE>
<P class=noindent><FONT class=extract>which, according to shell quoting rules, will yield the following output: </FONT><PRE class=example><FONT class=extract>     hello \
     world
     hello     world
</FONT></PRE>
<P class=noindent><FONT class=extract>Notice how the backslash/newline pair was removed inside the string quoted with double quotes (<CODE>"..."</CODE>), but not from the string quoted with single quotes (<CODE>'...'</CODE>). This is the way the default shell (<SAMP><SPAN class=file>/bin/sh</SPAN></SAMP>) handles backslash/newline pairs. If you specify a different shell in your makefiles it may treat them differently. </FONT>
<P><FONT class=extract>Sometimes you want to split a long line inside of single quotes, but you don't want the backslash/newline to appear in the quoted content. This is often the case when passing scripts to languages such as Perl, where extraneous backslashes inside the script can change its meaning or even be a syntax error. One simple way of handling this is to place the quoted string, or even the entire command, into a <CODE>make</CODE> variable then use the variable in the recipe. In this situation the newline quoting rules for makefiles will be used, and the backslash/newline will be removed. If we rewrite our example above using this method: </FONT><PRE class=example><FONT class=extract>     HELLO = 'hello \
     world'
     
     all : ; @echo $(HELLO)
</FONT></PRE>
<P class=noindent><FONT class=extract>we will get output like this: </FONT><PRE class=example><FONT class=extract>     hello world
</FONT></PRE>
<P><FONT class=extract>If you like, you can also use target-specific variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific"><FONT class=extract>Target-specific Variable Values</FONT></A><FONT class=extract>) to obtain a tighter correspondence between the variable and the recipe that uses it. </FONT>
<DIV class=node><A name=Variables-in-Recipes></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines" rel=previous><FONT class=extract>Splitting Recipe Lines</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" rel=up><FONT class=extract>Recipe Syntax</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.1.2 Using Variables in Recipes</FONT></H4>
<P><A name=index-variable-references-in-recipes-305></A><A name=index-recipes_002c-using-variables-in-306></A><FONT class=extract>The other way in which <CODE>make</CODE> processes recipes is by expanding any variable references in them (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>). This occurs after make has finished reading all the makefiles and the target is determined to be out of date; so, the recipes for targets which are not rebuilt are never expanded. </FONT>
<P><FONT class=extract>Variable and function references in recipes have identical syntax and semantics to references elsewhere in the makefile. They also have the same quoting rules: if you want a dollar sign to appear in your recipe, you must double it (&#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217;). For shells like the default shell, that use dollar signs to introduce variables, it's important to keep clear in your mind whether the variable you want to reference is a <CODE>make</CODE> variable (use a single dollar sign) or a shell variable (use two dollar signs). For example: </FONT><PRE class=example><FONT class=extract>     LIST = one two three
     all:
             for i in $(LIST); do \
                 echo $$i; \
             done
</FONT></PRE>
<P class=noindent><FONT class=extract>results in the following command being passed to the shell: </FONT><PRE class=example><FONT class=extract>     for i in one two three; do \
         echo $i; \
     done
</FONT></PRE>
<P class=noindent><FONT class=extract>which generates the expected result: </FONT><PRE class=example><FONT class=extract>     one
     two
     three
</FONT></PRE>
<DIV class=node><A name=Echoing></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Execution" rel=next><FONT class=extract>Execution</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" rel=previous><FONT class=extract>Recipe Syntax</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.2 Recipe Echoing</FONT></H3>
<P><A name=index-echoing-of-recipes-307></A><A name=index-silent-operation-308></A><A name=index-g_t_0040code_007b_0040_0040_007d-_0028in-recipes_0029-309></A><A name=index-recipes_002c-echoing-310></A><A name=index-printing-of-recipes-311></A><FONT class=extract><FONT class=extract>Normally <CODE>make</CODE> prints each line of the recipe before it is executed. We call this <DFN>echoing</DFN> because it gives the appearance that you are typing the lines yourself.</FONT> </FONT>
<P><FONT class=extract>When a line starts with &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;, the echoing of that line is suppressed. The &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217; is discarded before the line is passed to the shell. Typically you would use this for a command whose only effect is to print something, such as an <CODE>echo</CODE> command to indicate progress through the makefile: </FONT><PRE class=example><FONT class=extract>     @echo About to make distribution files
</FONT></PRE>
<P><A name=index-g_t_0040code_007b_002dn_007d-312></A><A name=index-g_t_0040code_007b_002d_002djust_002dprint_007d-313></A><A name=index-g_t_0040code_007b_002d_002ddry_002drun_007d-314></A><A name=index-g_t_0040code_007b_002d_002drecon_007d-315></A><FONT class=extract>When <CODE>make</CODE> is given the flag &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217; it only echoes most recipes, without executing them. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. In this case even the recipe lines starting with &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217; are printed. This flag is useful for finding out which recipes <CODE>make</CODE> thinks are necessary without actually doing them. </FONT>
<P><A name=index-g_t_0040code_007b_002ds_007d-316></A><A name=index-g_t_0040code_007b_002d_002dsilent_007d-317></A><A name=index-g_t_0040code_007b_002d_002dquiet_007d-318></A><A name=index-g_t_002eSILENT-319></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--silent</SPAN></SAMP>&#8217; flag to <CODE>make</CODE> prevents all echoing, as if all recipes started with &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;. A rule in the makefile for the special target <CODE>.SILENT</CODE> without prerequisites has the same effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets"><FONT class=extract>Special Built-in Target Names</FONT></A><FONT class=extract>). <CODE>.SILENT</CODE> is essentially obsolete since &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217; is more flexible. </FONT>
<DIV class=node><A name=Execution></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Parallel" rel=next><FONT class=extract>Parallel</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Echoing" rel=previous><FONT class=extract>Echoing</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.3 Recipe Execution</FONT></H3>
<P><A name=index-recipe_002c-execution-320></A><A name=index-execution_002c-of-recipes-321></A><A name=index-g_t_0040code_007bSHELL_007d-_0040r_007b_0028recipe-execution_0029_007d-322></A><FONT class=extract>When it is time to execute recipes to update a target, they are executed by invoking a new sub-shell for each line of the recipe, unless the <CODE>.ONESHELL</CODE> special target is in effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#One-Shell"><FONT class=extract>Using One Shell</FONT></A><FONT class=extract>) (In practice, <CODE>make</CODE> may take shortcuts that do not affect the results.) </FONT>
<P><A name=index-g_t_0040code_007bcd_007d-_0028shell-command_0029-323></A><A name=index-shell-variables_002c-setting-in-recipes-324></A><A name=index-recipes-setting-shell-variables-325></A><FONT class=extract><STRONG>Please note:</STRONG> this implies that setting shell variables and invoking shell commands such as <CODE>cd</CODE> that set a context local to each process will not affect the following lines in the recipe.</FONT><A href="https://www.gnu.org/software/make/manual/make.html#fn-2" rel=footnote name=fnd-2><SUP><FONT class=extract>2</FONT></SUP></A><FONT class=extract> If you want to use <CODE>cd</CODE> to affect the next statement, put both statements in a single recipe line. Then <CODE>make</CODE> will invoke one shell to run the entire line, and the shell will execute the statements in sequence. For example: </FONT><PRE class=example><FONT class=extract>     foo : bar/lose
             cd $(@D) &amp;&amp; gobble $(@F) &gt; ../$@
</FONT></PRE>
<P class=noindent><FONT class=extract>Here we use the shell AND operator (<CODE>&amp;&amp;</CODE>) so that if the <CODE>cd</CODE> command fails, the script will fail without trying to invoke the <CODE>gobble</CODE> command in the wrong directory, which could cause problems (in this case it would certainly cause <SAMP><SPAN class=file>../foo</SPAN></SAMP> to be truncated, at least). </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#One-Shell"><FONT class=extract>One Shell</FONT></A><FONT class=extract>: One shell for all lines in a recipe. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell"><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>: How <CODE>make</CODE> chooses the shell used to run recipes. </FONT></LI></UL>
<DIV class=node><A name=One-Shell></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell" rel=next><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Execution" rel=previous><FONT class=extract>Execution</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Execution" rel=up><FONT class=extract>Execution</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.3.1 Using One Shell</FONT></H4>
<P><A name=index-recipe-lines_002c-single-shell-326></A><A name=index-g_t_0040code_007b_002eONESHELL_007d_002c-use-of-327></A><A name=index-g_t_002eONESHELL-328></A><FONT class=extract>Sometimes you would prefer that all the lines in the recipe be passed to a single invocation of the shell. There are generally two situations where this is useful: first, it can improve performance in makefiles where recipes consist of many command lines, by avoiding extra processes. Second, you might want newlines to be included in your recipe command (for example perhaps you are using a very different interpreter as your <CODE>SHELL</CODE>). If the <CODE>.ONESHELL</CODE> special target appears anywhere in the makefile then <EM>all</EM> recipe lines for each target will be provided to a single invocation of the shell. Newlines between recipe lines will be preserved. For example: </FONT><PRE class=example><FONT class=extract>     .ONESHELL:
     foo : bar/lose
             cd $(@D)
             gobble $(@F) &gt; ../$@
</FONT></PRE>
<P class=noindent><FONT class=extract>would now work as expected even though the commands are on different recipe lines. </FONT>
<P><FONT class=extract>If <CODE>.ONESHELL</CODE> is provided, then only the first line of the recipe will be checked for the special prefix characters (&#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217;). Subsequent lines will include the special characters in the recipe line when the <CODE>SHELL</CODE> is invoked. If you want your recipe to start with one of these special characters you'll need to arrange for them to not be the first characters on the first line, perhaps by adding a comment or similar. For example, this would be a syntax error in Perl because the first &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217; is removed by make: </FONT><PRE class=example><FONT class=extract>     .ONESHELL:
     SHELL = /usr/bin/perl
     .SHELLFLAGS = -e
     show :
             @f = qw(a b c);
             print "@f\n";
</FONT></PRE>
<P class=noindent><FONT class=extract>However, either of these alternatives would work properly: </FONT><PRE class=example><FONT class=extract>     .ONESHELL:
     SHELL = /usr/bin/perl
     .SHELLFLAGS = -e
     show :
             # Make sure "@" is not the first character on the first line
             @f = qw(a b c);
             print "@f\n";
</FONT></PRE>
<P class=noindent><FONT class=extract>or </FONT><PRE class=example><FONT class=extract>     .ONESHELL:
     SHELL = /usr/bin/perl
     .SHELLFLAGS = -e
     show :
             my @f = qw(a b c);
             print "@f\n";
</FONT></PRE>
<P><FONT class=extract>As a special feature, if <CODE>SHELL</CODE> is determined to be a POSIX-style shell, the special prefix characters in &#8220;internal&#8221; recipe lines will <EM>removed</EM> before the recipe is processed. This feature is intended to allow existing makefiles to add the <CODE>.ONESHELL</CODE> special target and still run properly without extensive modifications. Since the special prefix characters are not legal at the beginning of a line in a POSIX shell script this is not a loss in functionality. For example, this works as expected: </FONT><PRE class=example><FONT class=extract>     .ONESHELL:
     foo : bar/lose
             @cd $(@D)
             @gobble $(@F) &gt; ../$@
</FONT></PRE>
<P><FONT class=extract>Even with this special feature, however, makefiles with <CODE>.ONESHELL</CODE> will behave differently in ways that could be noticeable. For example, normally if any line in the recipe fails, that causes the rule to fail and no more recipe lines are processed. Under <CODE>.ONESHELL</CODE> a failure of any but the final recipe line will not be noticed by <CODE>make</CODE>. You can modify <CODE>.SHELLFLAGS</CODE> to add the <CODE>-e</CODE> option to the shell which will cause any failure anywhere in the command line to cause the shell to fail, but this could itself cause your recipe to behave differently. Ultimately you may need to harden your recipe lines to allow them to work with <CODE>.ONESHELL</CODE>. </FONT>
<DIV class=node><A name=Choosing-the-Shell></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#One-Shell" rel=previous><FONT class=extract>One Shell</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Execution" rel=up><FONT class=extract>Execution</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.3.2 Choosing the Shell</FONT></H4>
<P><A name=index-shell_002c-choosing-the-329></A><A name=index-g_t_0040code_007bSHELL_007d_002c-value-of-330></A><A name=index-g_t_0040code_007b_002eSHELLFLAGS_007d_002c-value-of-331></A><A name=index-SHELL-332></A><A name=index-g_t_002eSHELLFLAGS-333></A><FONT class=extract>The program used as the shell is taken from the variable <CODE>SHELL</CODE>. If this variable is not set in your makefile, the program <SAMP><SPAN class=file>/bin/sh</SPAN></SAMP> is used as the shell. The argument(s) passed to the shell are taken from the variable <CODE>.SHELLFLAGS</CODE>. The default value of <CODE>.SHELLFLAGS</CODE> is <CODE>-c</CODE> normally, or <CODE>-ec</CODE> in POSIX-conforming mode. </FONT>
<P><A name=index-environment_002c-_0040code_007bSHELL_007d-in-334></A><FONT class=extract>Unlike most variables, the variable <CODE>SHELL</CODE> is never set from the environment. This is because the <CODE>SHELL</CODE> environment variable is used to specify your personal choice of shell program for interactive use. It would be very bad for personal choices like this to affect the functioning of makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Furthermore, when you do set <CODE>SHELL</CODE> in your makefile that value is <EM>not</EM> exported in the environment to recipe lines that <CODE>make</CODE> invokes. Instead, the value inherited from the user's environment, if any, is exported. You can override this behavior by explicitly exporting <CODE>SHELL</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>), forcing it to be passed in the environment to recipe lines. </FONT>
<P><A name=index-g_t_0040code_007bMAKESHELL_007d-_0040r_007b_0028MS_002dDOS-alternative-to-_0040code_007bSHELL_007d_0029_007d-335></A><FONT class=extract>However, on MS-DOS and MS-Windows the value of <CODE>SHELL</CODE> in the environment <STRONG>is</STRONG> used, since on those systems most users do not set this variable, and therefore it is most likely set specifically to be used by <CODE>make</CODE>. On MS-DOS, if the setting of <CODE>SHELL</CODE> is not suitable for <CODE>make</CODE>, you can set the variable <CODE>MAKESHELL</CODE> to the shell that <CODE>make</CODE> should use; if set it will be used as the shell instead of the value of <CODE>SHELL</CODE>. </FONT>
<H5 class=subsubheading><FONT class=extract>Choosing a Shell in DOS and Windows</FONT></H5>
<P><A name=index-shell_002c-in-DOS-and-Windows-336></A><A name=index-DOS_002c-choosing-a-shell-in-337></A><A name=index-Windows_002c-choosing-a-shell-in-338></A><FONT class=extract>Choosing a shell in MS-DOS and MS-Windows is much more complex than on other systems. </FONT>
<P><A name=index-COMSPEC-339></A><FONT class=extract>On MS-DOS, if <CODE>SHELL</CODE> is not set, the value of the variable <CODE>COMSPEC</CODE> (which is always set) is used instead. </FONT>
<P><A name=index-g_t_0040code_007bSHELL_007d_002c-MS_002dDOS-specifics-340></A><FONT class=extract>The processing of lines that set the variable <CODE>SHELL</CODE> in Makefiles is different on MS-DOS. The stock shell, <SAMP><SPAN class=file>command.com</SPAN></SAMP>, is ridiculously limited in its functionality and many users of <CODE>make</CODE> tend to install a replacement shell. Therefore, on MS-DOS, <CODE>make</CODE> examines the value of <CODE>SHELL</CODE>, and changes its behavior based on whether it points to a Unix-style or DOS-style shell. This allows reasonable functionality even if <CODE>SHELL</CODE> points to <SAMP><SPAN class=file>command.com</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If <CODE>SHELL</CODE> points to a Unix-style shell, <CODE>make</CODE> on MS-DOS additionally checks whether that shell can indeed be found; if not, it ignores the line that sets <CODE>SHELL</CODE>. In MS-DOS, GNU <CODE>make</CODE> searches for the shell in the following places: </FONT>
<OL type=1>
<LI><FONT class=extract>In the precise place pointed to by the value of <CODE>SHELL</CODE>. For example, if the makefile specifies &#8216;<SAMP><SPAN class=samp>SHELL = /bin/sh</SPAN></SAMP>&#8217;, <CODE>make</CODE> will look in the directory <SAMP><SPAN class=file>/bin</SPAN></SAMP> on the current drive. </FONT>
<LI><FONT class=extract>In the current directory. </FONT>
<LI><FONT class=extract>In each of the directories in the <CODE>PATH</CODE> variable, in order. </FONT></LI></OL>
<P><FONT class=extract>In every directory it examines, <CODE>make</CODE> will first look for the specific file (<SAMP><SPAN class=file>sh</SPAN></SAMP> in the example above). If this is not found, it will also look in that directory for that file with one of the known extensions which identify executable files. For example <SAMP><SPAN class=file>.exe</SPAN></SAMP>, <SAMP><SPAN class=file>.com</SPAN></SAMP>, <SAMP><SPAN class=file>.bat</SPAN></SAMP>, <SAMP><SPAN class=file>.btm</SPAN></SAMP>, <SAMP><SPAN class=file>.sh</SPAN></SAMP>, and some others. </FONT>
<P><FONT class=extract>If any of these attempts is successful, the value of <CODE>SHELL</CODE> will be set to the full pathname of the shell as found. However, if none of these is found, the value of <CODE>SHELL</CODE> will not be changed, and thus the line that sets it will be effectively ignored. This is so <CODE>make</CODE> will only support features specific to a Unix-style shell if such a shell is actually installed on the system where <CODE>make</CODE> runs. </FONT>
<P><FONT class=extract>Note that this extended search for the shell is limited to the cases where <CODE>SHELL</CODE> is set from the Makefile; if it is set in the environment or command line, you are expected to set it to the full pathname of the shell, exactly as things are on Unix. </FONT>
<P><FONT class=extract>The effect of the above DOS-specific processing is that a Makefile that contains &#8216;<SAMP><SPAN class=samp>SHELL = /bin/sh</SPAN></SAMP>&#8217; (as many Unix makefiles do), will work on MS-DOS unaltered if you have e.g. <SAMP><SPAN class=file>sh.exe</SPAN></SAMP> installed in some directory along your <CODE>PATH</CODE>. </FONT>
<P><A name=index-SHELL-341><FONT class=extract></FONT></A><A name=index-g_t_002eSHELLFLAGS-342></A>
<DIV class=node><A name=Parallel></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Errors" rel=next><FONT class=extract>Errors</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Execution" rel=previous><FONT class=extract>Execution</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.4 Parallel Execution</FONT></H3>
<P><A name=index-recipes_002c-execution-in-parallel-343></A><A name=index-parallel-execution-344></A><A name=index-execution_002c-in-parallel-345></A><A name=index-job-slots-346></A><A name=index-g_t_0040code_007b_002dj_007d-347></A><A name=index-g_t_0040code_007b_002d_002djobs_007d-348></A><FONT class=extract>GNU <CODE>make</CODE> knows how to execute several recipes at once. Normally, <CODE>make</CODE> will execute only one recipe at a time, waiting for it to finish before executing the next. However, the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--jobs</SPAN></SAMP>&#8217; option tells <CODE>make</CODE> to execute many recipes simultaneously. You can inhibit parallelism in a particular makefile with the <CODE>.NOTPARALLEL</CODE> pseudo-target (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets"><FONT class=extract>Special Built-in Target Names</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>On MS-DOS, the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option has no effect, since that system doesn't support multi-processing. </FONT>
<P><FONT class=extract>If the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is followed by an integer, this is the number of recipes to execute at once; this is called the number of <DFN>job slots</DFN>. If there is nothing looking like an integer after the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option, there is no limit on the number of job slots. The default number of job slots is one, which means serial execution (one thing at a time). </FONT>
<P><FONT class=extract>Handling recursive <CODE>make</CODE> invocations raises issues for parallel execution. For more information on this, see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>If a recipe fails (is killed by a signal or exits with a nonzero status), and errors are not ignored for that recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>), the remaining recipe lines to remake the same target will not be run. If a recipe fails and the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; option was not given (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>), <CODE>make</CODE> aborts execution. If make terminates for any reason (including a signal) with child processes running, it waits for them to finish before actually exiting. </FONT>
<P><A name=index-load-average-349></A><A name=index-limiting-jobs-based-on-load-350></A><A name=index-jobs_002c-limiting-based-on-load-351></A><A name=index-g_t_0040code_007b_002dl_007d-_0028load-average_0029-352></A><A name=index-g_t_0040code_007b_002d_002dmax_002dload_007d-353></A><A name=index-g_t_0040code_007b_002d_002dload_002daverage_007d-354></A><FONT class=extract>When the system is heavily loaded, you will probably want to run fewer jobs than when it is lightly loaded. You can use the &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option to tell <CODE>make</CODE> to limit the number of jobs to run at once, based on the load average. The &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--max-load</SPAN></SAMP>&#8217; option is followed by a floating-point number. For example, </FONT><PRE class=example><FONT class=extract>     -l 2.5
</FONT></PRE>
<P class=noindent><FONT class=extract>will not let <CODE>make</CODE> start more than one job if the load average is above 2.5. The &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option with no following number removes the load limit, if one was given with a previous &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option. </FONT>
<P><FONT class=extract>More precisely, when <CODE>make</CODE> goes to start up a job, and it already has at least one job running, it checks the current load average; if it is not lower than the limit given with &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217;, <CODE>make</CODE> waits until the load average goes below that limit, or until all the other jobs finish. </FONT>
<P><FONT class=extract>By default, there is no load limit. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output"><FONT class=extract>Parallel Output</FONT></A><FONT class=extract>: Handling output during parallel execution </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input"><FONT class=extract>Parallel Input</FONT></A><FONT class=extract>: Handling input during parallel execution </FONT></LI></UL>
<DIV class=node><A name=Parallel-Output></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input" rel=next><FONT class=extract>Parallel Input</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Parallel" rel=previous><FONT class=extract>Parallel</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Parallel" rel=up><FONT class=extract>Parallel</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.4.1 Output During Parallel Execution</FONT></H4>
<P><A name=index-output-during-parallel-execution-355></A><A name=index-parallel-execution_002c-output-during-356></A><FONT class=extract>When running several recipes in parallel the output from each recipe appears as soon as it is generated, with the result that messages from different recipes may be interspersed, sometimes even appearing on the same line. This can make reading the output very difficult. </FONT>
<P><A name=index-g_t_0040code_007b_002d_002doutput_002dsync_007d-357></A><A name=index-g_t_0040code_007b_002dO_007d-358></A><FONT class=extract>To avoid this you can use the &#8216;<SAMP><SPAN class=samp>--output-sync</SPAN></SAMP>&#8217; (&#8216;<SAMP><SPAN class=samp>-O</SPAN></SAMP>&#8217;) option. This option instructs <CODE>make</CODE> to save the output from the commands it invokes and print it all once the commands are completed. Additionally, if there are multiple recursive <CODE>make</CODE> invocations running in parallel, they will communicate so that only one of them is generating output at a time. </FONT>
<P><FONT class=extract>If working directory printing is enabled (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></A><FONT class=extract>), the enter/leave messages are printed around each output grouping. If you prefer not to see these messages add the &#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; option to <CODE>MAKEFLAGS</CODE>. </FONT>
<P><FONT class=extract>There are four levels of granularity when synchronizing output, specified by giving an argument to the option (e.g., &#8216;<SAMP><SPAN class=samp>-Oline</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--output-sync=recurse</SPAN></SAMP>&#8217;). </FONT>
<DL>
<DT><FONT class=extract><CODE>none</CODE> </FONT>
<DD><FONT class=extract>This is the default: all output is sent directly as it is generated and no synchronization is performed. <BR></FONT>
<DT><FONT class=extract><CODE>line</CODE> </FONT>
<DD><FONT class=extract>Output from each individual line of the recipe is grouped and printed as soon as that line is complete. If a recipe consists of multiple lines, they may be interspersed with lines from other recipes. <BR></FONT>
<DT><FONT class=extract><CODE>target</CODE> </FONT>
<DD><FONT class=extract>Output from the entire recipe for each target is grouped and printed once the target is complete. This is the default if the <CODE>--output-sync</CODE> or <CODE>-O</CODE> option is given with no argument. <BR></FONT>
<DT><FONT class=extract><CODE>recurse</CODE> </FONT>
<DD><FONT class=extract>Output from each recursive invocation of <CODE>make</CODE> is grouped and printed once the recursive invocation is complete. </FONT></DD></DL>
<P><FONT class=extract>Regardless of the mode chosen, the total build time will be the same. The only difference is in how the output appears. </FONT>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>recurse</SPAN></SAMP>&#8217; modes both collect the output of the entire recipe of a target and display it uninterrupted when the recipe completes. The difference between them is in how recipes that contain recursive invocations of <CODE>make</CODE> are treated (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). For all recipes which have no recursive lines, the &#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>recurse</SPAN></SAMP>&#8217; modes behave identically. </FONT>
<P><FONT class=extract>If the &#8216;<SAMP><SPAN class=samp>recurse</SPAN></SAMP>&#8217; mode is chosen, recipes that contain recursive <CODE>make</CODE> invocations are treated the same as other targets: the output from the recipe, including the output from the recursive <CODE>make</CODE>, is saved and printed after the entire recipe is complete. This ensures output from all the targets built by a given recursive <CODE>make</CODE> instance are grouped together, which may make the output easier to understand. However it also leads to long periods of time during the build where no output is seen, followed by large bursts of output. If you are not watching the build as it proceeds, but instead viewing a log of the build after the fact, this may be the best option for you. </FONT>
<P><FONT class=extract>If you are watching the output, the long gaps of quiet during the build can be frustrating. The &#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217; output synchronization mode detects when <CODE>make</CODE> is going to be invoked recursively, using the standard methods, and it will not synchronize the output of those lines. The recursive <CODE>make</CODE> will perform the synchronization for its targets and the output from each will be displayed immediately when it completes. Be aware that output from recursive lines of the recipe are not synchronized (for example if the recursive line prints a message before running <CODE>make</CODE>, that message will not be synchronized). </FONT>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>line</SPAN></SAMP>&#8217; mode can be useful for front-ends that are watching the output of <CODE>make</CODE> to track when recipes are started and completed. </FONT>
<P><FONT class=extract>Some programs invoked by <CODE>make</CODE> may behave differently if they determine they're writing output to a terminal versus a file (often described as &#8220;interactive&#8221; vs. &#8220;non-interactive&#8221; modes). For example, many programs that can display colorized output will not do so if they determine they are not writing to a terminal. If your makefile invokes a program like this then using the output synchronization options will cause the program to believe it's running in &#8220;non-interactive&#8221; mode even though the output will ultimately go to the terminal. </FONT>
<DIV class=node><A name=Parallel-Input></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output" rel=previous><FONT class=extract>Parallel Output</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Parallel" rel=up><FONT class=extract>Parallel</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.4.2 Input During Parallel Execution</FONT></H4>
<P><A name=index-input-during-parallel-execution-359></A><A name=index-parallel-execution_002c-input-during-360></A><A name=index-standard-input-361></A><FONT class=extract>Two processes cannot both take input from the same device at the same time. To make sure that only one recipe tries to take input from the terminal at once, <CODE>make</CODE> will invalidate the standard input streams of all but one running recipe. If another recipe attempts to read from standard input it will usually incur a fatal error (a &#8216;<SAMP><SPAN class=samp>Broken pipe</SPAN></SAMP>&#8217; signal). </FONT><A name=index-broken-pipe-362></A><FONT class=extract>It is unpredictable which recipe will have a valid standard input stream (which will come from the terminal, or wherever you redirect the standard input of <CODE>make</CODE>). The first recipe run will always get it first, and the first recipe started after that one finishes will get it next, and so on. </FONT>
<P><FONT class=extract>We will change how this aspect of <CODE>make</CODE> works if we find a better alternative. In the mean time, you should not rely on any recipe using standard input at all if you are using the parallel execution feature; but if you are not using this feature, then standard input works normally in all recipes. </FONT>
<DIV class=node><A name=Errors></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Interrupts" rel=next><FONT class=extract>Interrupts</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Parallel" rel=previous><FONT class=extract>Parallel</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.5 Errors in Recipes</FONT></H3>
<P><A name=index-errors-_0028in-recipes_0029-363></A><A name=index-recipes_002c-errors-in-364></A><A name=index-exit-status-_0028errors_0029-365></A><FONT class=extract>After each shell invocation returns, <CODE>make</CODE> looks at its exit status. If the shell completed successfully (the exit status is zero), the next line in the recipe is executed in a new shell; after the last line is finished, the rule is finished. </FONT>
<P><FONT class=extract>If there is an error (the exit status is nonzero), <CODE>make</CODE> gives up on the current rule, and perhaps on all rules. </FONT>
<P><FONT class=extract>Sometimes the failure of a certain recipe line does not indicate a problem. For example, you may use the <CODE>mkdir</CODE> command to ensure that a directory exists. If the directory already exists, <CODE>mkdir</CODE> will report an error, but you probably want <CODE>make</CODE> to continue regardless. </FONT>
<P><A name=index-g_t_0040code_007b_002d_007d-_0028in-recipes_0029-366></A><FONT class=extract>To ignore errors in a recipe line, write a &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; at the beginning of the line's text (after the initial tab). The &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; is discarded before the line is passed to the shell for execution. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     clean:
             -rm -f *.o
</FONT></PRE>
<P><A name=index-g_t_0040code_007brm_007d-_0028shell-command_0029-367></A><FONT class=extract>This causes <CODE>make</CODE> to continue even if <CODE>rm</CODE> is unable to remove a file. </FONT>
<P><A name=index-g_t_0040code_007b_002di_007d-368></A><A name=index-g_t_0040code_007b_002d_002dignore_002derrors_007d-369></A><A name=index-g_t_002eIGNORE-370></A><FONT class=extract>When you run <CODE>make</CODE> with the &#8216;<SAMP><SPAN class=samp>-i</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--ignore-errors</SPAN></SAMP>&#8217; flag, errors are ignored in all recipes of all rules. A rule in the makefile for the special target <CODE>.IGNORE</CODE> has the same effect, if there are no prerequisites. These ways of ignoring errors are obsolete because &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; is more flexible. </FONT>
<P><FONT class=extract>When errors are to be ignored, because of either a &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; or the &#8216;<SAMP><SPAN class=samp>-i</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> treats an error return just like success, except that it prints out a message that tells you the status code the shell exited with, and says that the error has been ignored. </FONT>
<P><FONT class=extract>When an error happens that <CODE>make</CODE> has not been told to ignore, it implies that the current target cannot be correctly remade, and neither can any other that depends on it either directly or indirectly. No further recipes will be executed for these targets, since their preconditions have not been achieved. </FONT>
<P><A name=index-g_t_0040code_007b_002dk_007d-371></A><A name=index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-372></A><FONT class=extract>Normally <CODE>make</CODE> gives up immediately in this circumstance, returning a nonzero status. However, if the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; flag is specified, <CODE>make</CODE> continues to consider the other prerequisites of the pending targets, remaking them if necessary, before it gives up and returns nonzero status. For example, after an error in compiling one object file, &#8216;<SAMP><SPAN class=samp>make -k</SPAN></SAMP>&#8217; will continue compiling other object files even though it already knows that linking them will be impossible. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>The usual behavior assumes that your purpose is to get the specified targets up to date; once <CODE>make</CODE> learns that this is impossible, it might as well report the failure immediately. The &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; option says that the real purpose is to test as many of the changes made in the program as possible, perhaps to find several independent problems so that you can correct them all before the next attempt to compile. This is why Emacs' <CODE>compile</CODE> command passes the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag by default. </FONT><A name=index-Emacs-_0028_0040code_007bM_002dx-compile_007d_0029-373></A><A name=index-g_t_002eDELETE_005fON_005fERROR-374></A><A name=index-deletion-of-target-files-375></A><A name=index-removal-of-target-files-376></A><A name=index-target_002c-deleting-on-error-377></A><FONT class=extract>Usually when a recipe line fails, if it has changed the target file at all, the file is corrupted and cannot be used&#8212;or at least it is not completely updated. Yet the file's time stamp says that it is now up to date, so the next time <CODE>make</CODE> runs, it will not try to update that file. The situation is just the same as when the shell is killed by a signal; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts"><FONT class=extract>Interrupts</FONT></A><FONT class=extract>. So generally the right thing to do is to delete the target file if the recipe fails after beginning to change the file. <CODE>make</CODE> will do this if <CODE>.DELETE_ON_ERROR</CODE> appears as a target. This is almost always what you want <CODE>make</CODE> to do, but it is not historical practice; so for compatibility, you must explicitly request it. </FONT>
<DIV class=node><A name=Interrupts></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=next><FONT class=extract>Recursion</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Errors" rel=previous><FONT class=extract>Errors</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.6 Interrupting or Killing <CODE>make</CODE></FONT></H3>
<P><A name=index-interrupt-378></A><A name=index-signal-379></A><A name=index-deletion-of-target-files-380></A><A name=index-removal-of-target-files-381></A><A name=index-target_002c-deleting-on-interrupt-382></A><A name=index-killing-_0028interruption_0029-383></A><FONT class=extract>If <CODE>make</CODE> gets a fatal signal while a shell is executing, it may delete the target file that the recipe was supposed to update. This is done if the target file's last-modification time has changed since <CODE>make</CODE> first checked it. </FONT>
<P><FONT class=extract>The purpose of deleting the target is to make sure that it is remade from scratch when <CODE>make</CODE> is next run. Why is this? Suppose you type <KBD>Ctrl-c</KBD> while a compiler is running, and it has begun to write an object file <SAMP><SPAN class=file>foo.o</SPAN></SAMP>. The <KBD>Ctrl-c</KBD> kills the compiler, resulting in an incomplete file whose last-modification time is newer than the source file <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. But <CODE>make</CODE> also receives the <KBD>Ctrl-c</KBD> signal and deletes this incomplete file. If <CODE>make</CODE> did not do this, the next invocation of <CODE>make</CODE> would think that <SAMP><SPAN class=file>foo.o</SPAN></SAMP> did not require updating&#8212;resulting in a strange error message from the linker when it tries to link an object file half of which is missing. </FONT>
<P><A name=index-g_t_002ePRECIOUS-384></A><FONT class=extract>You can prevent the deletion of a target file in this way by making the special target <CODE>.PRECIOUS</CODE> depend on it. Before remaking a target, <CODE>make</CODE> checks to see whether it appears on the prerequisites of <CODE>.PRECIOUS</CODE>, and thereby decides whether the target should be deleted if a signal happens. Some reasons why you might do this are that the target is updated in some atomic fashion, or exists only to record a modification-time (its contents do not matter), or must exist at all times to prevent other sorts of trouble. </FONT>
<DIV class=node><A name=Recursion></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes" rel=next><FONT class=extract>Canned Recipes</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Interrupts" rel=previous><FONT class=extract>Interrupts</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.7 Recursive Use of <CODE>make</CODE></FONT></H3>
<P><A name=index-recursion-385></A><A name=index-subdirectories_002c-recursion-for-386></A><FONT class=extract>Recursive use of <CODE>make</CODE> means using <CODE>make</CODE> as a command in a makefile. This technique is useful when you want separate makefiles for various subsystems that compose a larger system. For example, suppose you have a sub-directory <SAMP><SPAN class=file>subdir</SPAN></SAMP> which has its own makefile, and you would like the containing directory's makefile to run <CODE>make</CODE> on the sub-directory. You can do it by writing this: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE)
</FONT></PRE>
<P class=noindent><FONT class=extract>or, equivalently, this (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     subsystem:
             $(MAKE) -C subdir
</FONT></PRE>
<P><A name=index-g_t_0040code_007b_002dC_007d-387></A><A name=index-g_t_0040code_007b_002d_002ddirectory_007d-388></A><FONT class=extract>You can write recursive <CODE>make</CODE> commands just by copying this example, but there are many things to know about how they work and why, and about how the sub-<CODE>make</CODE> relates to the top-level <CODE>make</CODE>. You may also find it useful to declare targets that invoke recursive <CODE>make</CODE> commands as &#8216;<SAMP><SPAN class=samp>.PHONY</SPAN></SAMP>&#8217; (for more discussion on when this is useful, see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0040code_007bCURDIR_007d-389></A><FONT class=extract>For your convenience, when GNU <CODE>make</CODE> starts (after it has processed any <CODE>-C</CODE> options) it sets the variable <CODE>CURDIR</CODE> to the pathname of the current working directory. This value is never touched by <CODE>make</CODE> again: in particular note that if you include files from other directories the value of <CODE>CURDIR</CODE> does not change. The value has the same precedence it would have if it were set in the makefile (by default, an environment variable <CODE>CURDIR</CODE> will not override this value). Note that setting this variable has no impact on the operation of <CODE>make</CODE> (it does not cause <CODE>make</CODE> to change its working directory, for example). </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>MAKE Variable</FONT></A><FONT class=extract>: The special effects of using &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217;. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Variables/Recursion</FONT></A><FONT class=extract>: How to communicate variables to a sub-<CODE>make</CODE>. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Options/Recursion</FONT></A><FONT class=extract>: How to communicate options to a sub-<CODE>make</CODE>. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>-w Option</FONT></A><FONT class=extract>: How the &#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; option helps debug use of recursive <CODE>make</CODE> commands. </FONT></LI></UL>
<DIV class=node><A name=MAKE-Variable></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion" rel=next><FONT class=extract>Variables/Recursion</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=previous><FONT class=extract>Recursion</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=up><FONT class=extract>Recursion</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.7.1 How the <CODE>MAKE</CODE> Variable Works</FONT></H4>
<P><A name=index-MAKE-390></A><A name=index-recursion_002c-and-_0040code_007bMAKE_007d-variable-391></A><FONT class=extract>Recursive <CODE>make</CODE> commands should always use the variable <CODE>MAKE</CODE>, not the explicit command name &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217;, as shown here: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE)
</FONT></PRE>
<P><FONT class=extract>The value of this variable is the file name with which <CODE>make</CODE> was invoked. If this file name was <SAMP><SPAN class=file>/bin/make</SPAN></SAMP>, then the recipe executed is &#8216;<SAMP><SPAN class=samp>cd subdir &amp;&amp; /bin/make</SPAN></SAMP>&#8217;. If you use a special version of <CODE>make</CODE> to run the top-level makefile, the same special version will be executed for recursive invocations. </FONT><A name=index-g_t_0040code_007bcd_007d-_0028shell-command_0029-392></A><A name=index-g_t_002b_002c-and-recipes-393></A><FONT class=extract>As a special feature, using the variable <CODE>MAKE</CODE> in the recipe of a rule alters the effects of the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; (&#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217;), &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; (&#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217;), or &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; (&#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217;<!-- /@w -->) option. Using the <CODE>MAKE</CODE> variable has the same effect as using a &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; character at the beginning of the recipe line. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing the Recipes</FONT></A><FONT class=extract>. This special feature is only enabled if the <CODE>MAKE</CODE> variable appears directly in the recipe: it does not apply if the <CODE>MAKE</CODE> variable is referenced through expansion of another variable. In the latter case you must use the &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; token to get these special effects. </FONT>
<P><FONT class=extract>Consider the command &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217; in the above example. (The &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; option marks targets as up to date without actually running any recipes; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Execution</FONT></A><FONT class=extract>.) Following the usual definition of &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, a &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217; command in the example would create a file named <SAMP><SPAN class=file>subsystem</SPAN></SAMP> and do nothing else. What you really want it to do is run &#8216;<SAMP><SPAN class=samp>cd&nbsp;subdir&nbsp;&amp;&amp;<!-- /@w --> make&nbsp;-t<!-- /@w --></SPAN></SAMP>&#8217;; but that would require executing the recipe, and &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; says not to execute recipes. </FONT><A name=index-g_t_0040code_007b_002dt_007d_002c-and-recursion-394></A><A name=index-recursion_002c-and-_0040code_007b_002dt_007d-395></A><A name=index-g_t_0040code_007b_002d_002dtouch_007d_002c-and-recursion-396></A><FONT class=extract>The special feature makes this do what you want: whenever a recipe line of a rule contains the variable <CODE>MAKE</CODE>, the flags &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; do not apply to that line. Recipe lines containing <CODE>MAKE</CODE> are executed normally despite the presence of a flag that causes most recipes not to be run. The usual <CODE>MAKEFLAGS</CODE> mechanism passes the flags to the sub-<CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>), so your request to touch the files, or print the recipes, is propagated to the subsystem. </FONT>
<DIV class=node><A name=Variables%2fRecursion></A><A name=Variables_002fRecursion></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion" rel=next><FONT class=extract>Options/Recursion</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable" rel=previous><FONT class=extract>MAKE Variable</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=up><FONT class=extract>Recursion</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.7.2 Communicating Variables to a Sub-<CODE>make</CODE></FONT></H4>
<P><A name=index-sub_002d_0040code_007bmake_007d-397></A><A name=index-environment_002c-and-recursion-398></A><A name=index-exporting-variables-399></A><A name=index-variables_002c-environment-400></A><A name=index-variables_002c-exporting-401></A><A name=index-recursion_002c-and-environment-402></A><A name=index-recursion_002c-and-variables-403></A><FONT class=extract>Variable values of the top-level <CODE>make</CODE> can be passed to the sub-<CODE>make</CODE> through the environment by explicit request. These variables are defined in the sub-<CODE>make</CODE> as defaults, but they do not override variables defined in the makefile used by the sub-<CODE>make</CODE> unless you use the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; switch (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>To pass down, or <DFN>export</DFN>, a variable, <CODE>make</CODE> adds the variable and its value to the environment for running each line of the recipe. The sub-<CODE>make</CODE>, in turn, uses the environment to initialize its table of variable values. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Except by explicit request, <CODE>make</CODE> exports a variable only if it is either defined in the environment initially or set on the command line, and if its name consists only of letters, numbers, and underscores. Some shells cannot cope with environment variable names consisting of characters other than letters, numbers, and underscores. </FONT>
<P><A name=index-SHELL_002c-exported-value-404></A><FONT class=extract>The value of the <CODE>make</CODE> variable <CODE>SHELL</CODE> is not exported. Instead, the value of the <CODE>SHELL</CODE> variable from the invoking environment is passed to the sub-<CODE>make</CODE>. You can force <CODE>make</CODE> to export its value for <CODE>SHELL</CODE> by using the <CODE>export</CODE> directive, described below. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell"><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>The special variable <CODE>MAKEFLAGS</CODE> is always exported (unless you unexport it). <CODE>MAKEFILES</CODE> is exported if you set it to anything. </FONT>
<P><FONT class=extract><CODE>make</CODE> automatically passes down variable values that were defined on the command line, by putting them in the <CODE>MAKEFLAGS</CODE> variable. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Options/Recursion</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Variables are <EM>not</EM> normally passed down if they were created by default by <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>). The sub-<CODE>make</CODE> will define these for itself. </FONT>
<P><A name=index-export-405></A><FONT class=extract>If you want to export specific variables to a sub-<CODE>make</CODE>, use the <CODE>export</CODE> directive, like this: </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> ...
</FONT></PRE>
<P class=noindent><A name=index-unexport-406></A><FONT class=extract>If you want to <EM>prevent</EM> a variable from being exported, use the <CODE>unexport</CODE> directive, like this: </FONT><PRE class=example><FONT class=extract>     unexport <VAR>variable</VAR> ...
</FONT></PRE>
<P class=noindent><FONT class=extract>In both of these forms, the arguments to <CODE>export</CODE> and <CODE>unexport</CODE> are expanded, and so could be variables or functions which expand to a (list of) variable names to be (un)exported. </FONT>
<P><FONT class=extract>As a convenience, you can define a variable and export it at the same time by doing: </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> = value
</FONT></PRE>
<P class=noindent><FONT class=extract>has the same result as: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> = value
     export <VAR>variable</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>and </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> := value
</FONT></PRE>
<P class=noindent><FONT class=extract>has the same result as: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> := value
     export <VAR>variable</VAR>
</FONT></PRE>
<P><FONT class=extract>Likewise, </FONT><PRE class=example><FONT class=extract>     export <VAR>variable</VAR> += value
</FONT></PRE>
<P class=noindent><FONT class=extract>is just like: </FONT><PRE class=example><FONT class=extract>     <VAR>variable</VAR> += value
     export <VAR>variable</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Appending"><FONT class=extract>Appending More Text to Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>You may notice that the <CODE>export</CODE> and <CODE>unexport</CODE> directives work in <CODE>make</CODE> in the same way they work in the shell, <CODE>sh</CODE>. </FONT>
<P><FONT class=extract>If you want all variables to be exported by default, you can use <CODE>export</CODE> by itself: </FONT><PRE class=example><FONT class=extract>     export
</FONT></PRE>
<P class=noindent><FONT class=extract>This tells <CODE>make</CODE> that variables which are not explicitly mentioned in an <CODE>export</CODE> or <CODE>unexport</CODE> directive should be exported. Any variable given in an <CODE>unexport</CODE> directive will still <EM>not</EM> be exported. If you use <CODE>export</CODE> by itself to export variables by default, variables whose names contain characters other than alphanumerics and underscores will not be exported unless specifically mentioned in an <CODE>export</CODE> directive. </FONT>
<P><A name=index-g_t_002eEXPORT_005fALL_005fVARIABLES-407></A><FONT class=extract>The behavior elicited by an <CODE>export</CODE> directive by itself was the default in older versions of GNU <CODE>make</CODE>. If your makefiles depend on this behavior and you want to be compatible with old versions of <CODE>make</CODE>, you can write a rule for the special target <CODE>.EXPORT_ALL_VARIABLES</CODE> instead of using the <CODE>export</CODE> directive. This will be ignored by old <CODE>make</CODE>s, while the <CODE>export</CODE> directive will cause a syntax error. </FONT><A name=index-compatibility-in-exporting-408></A><FONT class=extract>Likewise, you can use <CODE>unexport</CODE> by itself to tell <CODE>make</CODE> <EM>not</EM> to export variables by default. Since this is the default behavior, you would only need to do this if <CODE>export</CODE> had been used by itself earlier (in an included makefile, perhaps). You <STRONG>cannot</STRONG> use <CODE>export</CODE> and <CODE>unexport</CODE> by themselves to have variables exported for some recipes and not for others. The last <CODE>export</CODE> or <CODE>unexport</CODE> directive that appears by itself determines the behavior for the entire run of <CODE>make</CODE>. </FONT>
<P><A name=index-MAKELEVEL-409></A><A name=index-recursion_002c-level-of-410></A><FONT class=extract>As a special feature, the variable <CODE>MAKELEVEL</CODE> is changed when it is passed down from level to level. This variable's value is a string which is the depth of the level as a decimal number. The value is &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217; for the top-level <CODE>make</CODE>; &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217; for a sub-<CODE>make</CODE>, &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217; for a sub-sub-<CODE>make</CODE>, and so on. The incrementation happens when <CODE>make</CODE> sets up the environment for a recipe. </FONT>
<P><FONT class=extract>The main use of <CODE>MAKELEVEL</CODE> is to test it in a conditional directive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditional Parts of Makefiles</FONT></A><FONT class=extract>); this way you can write a makefile that behaves one way if run recursively and another way if run directly by you. </FONT>
<P><A name=index-MAKEFILES-411></A><FONT class=extract>You can use the variable <CODE>MAKEFILES</CODE> to cause all sub-<CODE>make</CODE> commands to use additional makefiles. The value of <CODE>MAKEFILES</CODE> is a whitespace-separated list of file names. This variable, if defined in the outer-level makefile, is passed down through the environment; then it serves as a list of extra makefiles for the sub-<CODE>make</CODE> to read before the usual or specified ones. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable"><FONT class=extract>The Variable <CODE>MAKEFILES</CODE></FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Options%2fRecursion></A><A name=Options_002fRecursion></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option" rel=next><FONT class=extract>-w Option</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion" rel=previous><FONT class=extract>Variables/Recursion</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=up><FONT class=extract>Recursion</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.7.3 Communicating Options to a Sub-<CODE>make</CODE></FONT></H4>
<P><A name=index-options_002c-and-recursion-412></A><A name=index-recursion_002c-and-options-413></A><A name=index-MAKEFLAGS-414></A><FONT class=extract>Flags such as &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; are passed automatically to the sub-<CODE>make</CODE> through the variable <CODE>MAKEFLAGS</CODE>. This variable is set up automatically by <CODE>make</CODE> to contain the flag letters that <CODE>make</CODE> received. Thus, if you do &#8216;<SAMP><SPAN class=samp>make&nbsp;-ks</SPAN></SAMP>&#8217;<!-- /@w --> then <CODE>MAKEFLAGS</CODE> gets the value &#8216;<SAMP><SPAN class=samp>ks</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>As a consequence, every sub-<CODE>make</CODE> gets a value for <CODE>MAKEFLAGS</CODE> in its environment. In response, it takes the flags from that value and processes them as if they had been given as arguments. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-command-line-variable-definitions_002c-and-recursion-415></A><A name=index-variables_002c-command-line_002c-and-recursion-416></A><A name=index-recursion_002c-and-command-line-variable-definitions-417></A><FONT class=extract>Likewise variables defined on the command line are passed to the sub-<CODE>make</CODE> through <CODE>MAKEFLAGS</CODE>. Words in the value of <CODE>MAKEFLAGS</CODE> that contain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, <CODE>make</CODE> treats as variable definitions just as if they appeared on the command line. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>. </FONT>
<P><A name=index-g_t_0040code_007b_002dC_007d_002c-and-recursion-418></A><A name=index-g_t_0040code_007b_002df_007d_002c-and-recursion-419></A><A name=index-g_t_0040code_007b_002do_007d_002c-and-recursion-420></A><A name=index-g_t_0040code_007b_002dW_007d_002c-and-recursion-421></A><A name=index-g_t_0040code_007b_002d_002ddirectory_007d_002c-and-recursion-422></A><A name=index-g_t_0040code_007b_002d_002dfile_007d_002c-and-recursion-423></A><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d_002c-and-recursion-424></A><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d_002c-and-recursion-425></A><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d_002c-and-recursion-426></A><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d_002c-and-recursion-427></A><A name=index-recursion_002c-and-_0040code_007b_002dC_007d-428></A><A name=index-recursion_002c-and-_0040code_007b_002df_007d-429></A><A name=index-recursion_002c-and-_0040code_007b_002do_007d-430></A><A name=index-recursion_002c-and-_0040code_007b_002dW_007d-431></A><FONT class=extract>The options &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; are not put into <CODE>MAKEFLAGS</CODE>; these options are not passed down. </FONT>
<P><A name=index-g_t_0040code_007b_002dj_007d_002c-and-recursion-432></A><A name=index-g_t_0040code_007b_002d_002djobs_007d_002c-and-recursion-433></A><A name=index-recursion_002c-and-_0040code_007b_002dj_007d-434></A><A name=index-job-slots_002c-and-recursion-435></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is a special case (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>). If you set it to some numeric value &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; and your operating system supports it (most any UNIX system will; others typically won't), the parent <CODE>make</CODE> and all the sub-<CODE>make</CODE>s will communicate to ensure that there are only &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; jobs running at the same time between them all. Note that any job that is marked recursive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>) doesn't count against the total jobs (otherwise we could get &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; sub-<CODE>make</CODE>s running and have no slots left over for any real work!) </FONT>
<P><FONT class=extract>If your operating system doesn't support the above communication, then &#8216;<SAMP><SPAN class=samp>-j 1</SPAN></SAMP>&#8217; is always put into <CODE>MAKEFLAGS</CODE> instead of the value you specified. This is because if the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217;<!-- /@w --> option were passed down to sub-<CODE>make</CODE>s, you would get many more jobs running in parallel than you asked for. If you give &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; with no numeric argument, meaning to run as many jobs as possible in parallel, this is passed down, since multiple infinities are no more than one. </FONT>
<P><FONT class=extract>If you do not want to pass the other flags down, you must change the value of <CODE>MAKEFLAGS</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=
</FONT></PRE>
<P><A name=index-MAKEOVERRIDES-436></A><FONT class=extract>The command line variable definitions really appear in the variable <CODE>MAKEOVERRIDES</CODE>, and <CODE>MAKEFLAGS</CODE> contains a reference to this variable. If you do want to pass flags down normally, but don't want to pass down the command line variable definitions, you can reset <CODE>MAKEOVERRIDES</CODE> to empty, like this: </FONT><PRE class=example><FONT class=extract>     MAKEOVERRIDES =
</FONT></PRE>
<P class=noindent><A name=index-Arg-list-too-long-437></A><A name=index-E2BIG-438></A><FONT class=extract>This is not usually useful to do. However, some systems have a small fixed limit on the size of the environment, and putting so much information into the value of <CODE>MAKEFLAGS</CODE> can exceed it. If you see the error message &#8216;<SAMP><SPAN class=samp>Arg list too long</SPAN></SAMP>&#8217;, this may be the problem. </FONT><A name=index-g_t_002ePOSIX-439></A><A name=index-POSIX-440></A><FONT class=extract>(For strict compliance with POSIX.2, changing <CODE>MAKEOVERRIDES</CODE> does not affect <CODE>MAKEFLAGS</CODE> if the special target &#8216;<SAMP><SPAN class=samp>.POSIX</SPAN></SAMP>&#8217; appears in the makefile. You probably do not care about this.) </FONT>
<P><A name=index-MFLAGS-441></A><FONT class=extract>A similar variable <CODE>MFLAGS</CODE> exists also, for historical compatibility. It has the same value as <CODE>MAKEFLAGS</CODE> except that it does not contain the command line variable definitions, and it always begins with a hyphen unless it is empty (<CODE>MAKEFLAGS</CODE> begins with a hyphen only when it begins with an option that has no single-letter version, such as &#8216;<SAMP><SPAN class=samp>--warn-undefined-variables</SPAN></SAMP>&#8217;). <CODE>MFLAGS</CODE> was traditionally used explicitly in the recursive <CODE>make</CODE> command, like this: </FONT><PRE class=example><FONT class=extract>     subsystem:
             cd subdir &amp;&amp; $(MAKE) $(MFLAGS)
</FONT></PRE>
<P class=noindent><FONT class=extract>but now <CODE>MAKEFLAGS</CODE> makes this usage redundant. If you want your makefiles to be compatible with old <CODE>make</CODE> programs, use this technique; it will work fine with more modern <CODE>make</CODE> versions too. </FONT>
<P><A name=index-setting-options-from-environment-442></A><A name=index-options_002c-setting-from-environment-443></A><A name=index-setting-options-in-makefiles-444></A><A name=index-options_002c-setting-in-makefiles-445></A><FONT class=extract>The <CODE>MAKEFLAGS</CODE> variable can also be useful if you want to have certain options, such as &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>), set each time you run <CODE>make</CODE>. You simply put a value for <CODE>MAKEFLAGS</CODE> in your environment. You can also set <CODE>MAKEFLAGS</CODE> in a makefile, to specify additional flags that should also be in effect for that makefile. (Note that you cannot use <CODE>MFLAGS</CODE> this way. That variable is set only for compatibility; <CODE>make</CODE> does not interpret a value you set for it in any way.) </FONT>
<P><FONT class=extract>When <CODE>make</CODE> interprets the value of <CODE>MAKEFLAGS</CODE> (either from the environment or from a makefile), it first prepends a hyphen if the value does not already begin with one. Then it chops the value into words separated by blanks, and parses these words as if they were options given on the command line (except that &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217;, and their long-named versions are ignored; and there is no error for an invalid option). </FONT>
<P><FONT class=extract>If you do put <CODE>MAKEFLAGS</CODE> in your environment, you should be sure not to include any options that will drastically affect the actions of <CODE>make</CODE> and undermine the purpose of makefiles and of <CODE>make</CODE> itself. For instance, the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; options, if put in one of these variables, could have disastrous consequences and would certainly have at least surprising and probably annoying effects. </FONT>
<P><FONT class=extract>If you'd like to run other implementations of <CODE>make</CODE> in addition to GNU <CODE>make</CODE>, and hence do not want to add GNU <CODE>make</CODE>-specific flags to the <CODE>MAKEFLAGS</CODE> variable, you can add them to the <CODE>GNUMAKEFLAGS</CODE> variable instead. This variable is parsed just before <CODE>MAKEFLAGS</CODE>, in the same way as <CODE>MAKEFLAGS</CODE>. When <CODE>make</CODE> constructs <CODE>MAKEFLAGS</CODE> to pass to a recursive <CODE>make</CODE> it will include all flags, even those taken from <CODE>GNUMAKEFLAGS</CODE>. As a result, after parsing <CODE>GNUMAKEFLAGS</CODE> GNU <CODE>make</CODE> sets this variable to the empty string to avoid duplicating flags during recursion. </FONT>
<P><FONT class=extract>It's best to use <CODE>GNUMAKEFLAGS</CODE> only with flags which won't materially change the behavior of your makefiles. If your makefiles require GNU make anyway then simply use <CODE>MAKEFLAGS</CODE>. Flags such as &#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--output-sync</SPAN></SAMP>&#8217; may be appropriate for <CODE>GNUMAKEFLAGS</CODE>. </FONT>
<DIV class=node><A name=-w-Option></A><A name=g_t_002dw-Option></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion" rel=previous><FONT class=extract>Options/Recursion</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=up><FONT class=extract>Recursion</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>5.7.4 The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></H4>
<P><A name=index-directories_002c-printing-them-446></A><A name=index-printing-directories-447></A><A name=index-recursion_002c-and-printing-directories-448></A><FONT class=extract>If you use several levels of recursive <CODE>make</CODE> invocations, the &#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217;<!-- /@w --> option can make the output a lot easier to understand by showing each directory as <CODE>make</CODE> starts processing it and as <CODE>make</CODE> finishes processing it. For example, if &#8216;<SAMP><SPAN class=samp>make -w</SPAN></SAMP>&#8217; is run in the directory <SAMP><SPAN class=file>/u/gnu/make</SPAN></SAMP>, <CODE>make</CODE> will print a line of the form: </FONT><PRE class=example><FONT class=extract>     make: Entering directory `/u/gnu/make'.
</FONT></PRE>
<P class=noindent><FONT class=extract>before doing anything else, and a line of the form: </FONT><PRE class=example><FONT class=extract>     make: Leaving directory `/u/gnu/make'.
</FONT></PRE>
<P class=noindent><FONT class=extract>when processing is completed. </FONT>
<P><A name=index-g_t_0040code_007b_002dC_007d_002c-and-_0040code_007b_002dw_007d-449></A><A name=index-g_t_0040code_007b_002d_002ddirectory_007d_002c-and-_0040code_007b_002d_002dprint_002ddirectory_007d-450></A><A name=index-recursion_002c-and-_0040code_007b_002dw_007d-451></A><A name=index-g_t_0040code_007b_002dw_007d_002c-and-_0040code_007b_002dC_007d-452></A><A name=index-g_t_0040code_007b_002dw_007d_002c-and-recursion-453></A><A name=index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-and-_0040code_007b_002d_002ddirectory_007d-454></A><A name=index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-and-recursion-455></A><A name=index-g_t_0040code_007b_002d_002dno_002dprint_002ddirectory_007d-456></A><A name=index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-disabling-457></A><A name=index-g_t_0040code_007b_002dw_007d_002c-disabling-458></A><FONT class=extract>Normally, you do not need to specify this option because &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; does it for you: &#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; is turned on automatically when you use the &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217; option, and in sub-<CODE>make</CODE>s. <CODE>make</CODE> will not automatically turn on &#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; if you also use &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217;, which says to be silent, or if you use &#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; to explicitly disable it. </FONT>
<DIV class=node><A name=Canned-Recipes></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes" rel=next><FONT class=extract>Empty Recipes</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recursion" rel=previous><FONT class=extract>Recursion</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.8 Defining Canned Recipes</FONT></H3>
<P><A name=index-canned-recipes-459></A><A name=index-recipes_002c-canned-460></A><A name=index-sequences-of-commands-461></A><A name=index-commands_002c-sequences-of-462></A><FONT class=extract>When the same sequence of commands is useful in making various targets, you can define it as a canned sequence with the <CODE>define</CODE> directive, and refer to the canned sequence from the recipes for those targets. The canned sequence is actually a variable, so the name must not conflict with other variable names. </FONT>
<P><FONT class=extract>Here is an example of defining a canned recipe: </FONT><PRE class=example><FONT class=extract>     define run-yacc =
     yacc $(firstword $^)
     mv y.tab.c $@
     endef
</FONT></PRE>
<P><A name=index-g_t_0040code_007byacc_007d-463></A><FONT class=extract>Here <CODE>run-yacc</CODE> is the name of the variable being defined; <CODE>endef</CODE> marks the end of the definition; the lines in between are the commands. The <CODE>define</CODE> directive does not expand variable references and function calls in the canned sequence; the &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; characters, parentheses, variable names, and so on, all become part of the value of the variable you are defining. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>, for a complete explanation of <CODE>define</CODE>. </FONT>
<P><FONT class=extract>The first command in this example runs Yacc on the first prerequisite of whichever rule uses the canned sequence. The output file from Yacc is always named <SAMP><SPAN class=file>y.tab.c</SPAN></SAMP>. The second command moves the output to the rule's target file name. </FONT>
<P><FONT class=extract>To use the canned sequence, substitute the variable into the recipe of a rule. You can substitute it like any other variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>). Because variables defined by <CODE>define</CODE> are recursively expanded variables, all the variable references you wrote inside the <CODE>define</CODE> are expanded now. For example: </FONT><PRE class=example><FONT class=extract>     foo.c : foo.y
             $(run-yacc)
</FONT></PRE>
<P class=noindent><FONT class=extract>&#8216;<SAMP><SPAN class=samp>foo.y</SPAN></SAMP>&#8217; will be substituted for the variable &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; when it occurs in <CODE>run-yacc</CODE>'s value, and &#8216;<SAMP><SPAN class=samp>foo.c</SPAN></SAMP>&#8217; for &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>This is a realistic example, but this particular one is not needed in practice because <CODE>make</CODE> has an implicit rule to figure out these commands based on the file names involved (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0040_0040_002c-and-_0040code_007bdefine_007d-464></A><A name=index-g_t_002d_002c-and-_0040code_007bdefine_007d-465></A><A name=index-g_t_002b_002c-and-_0040code_007bdefine_007d-466></A><FONT class=extract>In recipe execution, each line of a canned sequence is treated just as if the line appeared on its own in the rule, preceded by a tab. In particular, <CODE>make</CODE> invokes a separate sub-shell for each line. You can use the special prefix characters that affect command lines (&#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217;) on each line of a canned sequence. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes"><FONT class=extract>Writing Recipes in Rules</FONT></A><FONT class=extract>. For example, using this canned sequence: </FONT><PRE class=example><FONT class=extract>     define frobnicate =
     @echo "frobnicating target $@"
     frob-step-1 $&lt; -o $@-step-1
     frob-step-2 $@-step-1 -o $@
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>make</CODE> will not echo the first line, the <CODE>echo</CODE> command. But it <EM>will</EM> echo the following two recipe lines. </FONT>
<P><FONT class=extract>On the other hand, prefix characters on the recipe line that refers to a canned sequence apply to every line in the sequence. So the rule: </FONT><PRE class=example><FONT class=extract>     frob.out: frob.in
             @$(frobnicate)
</FONT></PRE>
<P class=noindent><FONT class=extract>does not echo <EM>any</EM> recipe lines. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>, for a full explanation of &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;.) </FONT>
<DIV class=node><A name=Empty-Recipes></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes" rel=previous><FONT class=extract>Canned Recipes</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=up><FONT class=extract>Recipes</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>5.9 Using Empty Recipes</FONT></H3>
<P><A name=index-empty-recipes-467></A><A name=index-recipes_002c-empty-468></A><FONT class=extract>It is sometimes useful to define recipes which do nothing. This is done simply by giving a recipe that consists of nothing but whitespace. For example: </FONT><PRE class=example><FONT class=extract>     target: ;
</FONT></PRE>
<P class=noindent><FONT class=extract>defines an empty recipe for <SAMP><SPAN class=file>target</SPAN></SAMP>. You could also use a line beginning with a recipe prefix character to define an empty recipe, but this would be confusing because such a line looks empty. </FONT>
<P><A name=index-g_t_002eDEFAULT_0040r_007b_002c-and-empty-recipes_007d-469></A><FONT class=extract>You may be wondering why you would want to define a recipe that does nothing. The only reason this is useful is to prevent a target from getting implicit recipes (from implicit rules or the <CODE>.DEFAULT</CODE> special target; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> and see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort"><FONT class=extract>Defining Last-Resort Default Rules</FONT></A><FONT class=extract>). <!-- !!! another reason is for canonical stamp files: --></FONT>
<P><FONT class=extract>You may be inclined to define empty recipes for targets that are not actual files, but only exist so that their prerequisites can be remade. However, this is not the best way to do that, because the prerequisites may not be remade properly if the target file actually does exist. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>, for a better way to do this. </FONT>
<DIV class=node><A name=Using-Variables></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=next>Conditionals</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Recipes" rel=previous>Recipes</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>6 How to Use Variables</FONT></H2>
<P><A name=index-variable-470></A><A name=index-value-471></A><A name=index-recursive-variable-expansion-472></A><A name=index-simple-variable-expansion-473></A><FONT class=extract>A <DFN>variable</DFN> is a name defined in a makefile to represent a string of text, called the variable's <DFN>value</DFN>. These values are substituted by explicit request into targets, prerequisites, recipes, and other parts of the makefile. (In some other versions of <CODE>make</CODE>, variables are called <DFN>macros</DFN>.) </FONT><A name=index-macro-474></A><FONT class=extract>Variables and functions in all parts of a makefile are expanded when read, except for in recipes, the right-hand sides of variable definitions using &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, and the bodies of variable definitions using the <CODE>define</CODE> directive. </FONT>
<P><FONT class=extract>Variables can represent lists of file names, options to pass to compilers, programs to run, directories to look in for source files, directories to write output in, or anything else you can imagine. </FONT>
<P><FONT class=extract>A variable name may be any sequence of characters not containing &#8216;<SAMP><SPAN class=samp>:</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, or whitespace. However, variable names containing characters other than letters, numbers, and underscores should be considered carefully, as in some shells they cannot be passed through the environment to a sub-<CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>). Variable names beginning with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217; and an uppercase letter may be given special meaning in future versions of <CODE>make</CODE>. </FONT>
<P><FONT class=extract>Variable names are case-sensitive. The names &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>FOO</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>Foo</SPAN></SAMP>&#8217; all refer to different variables. </FONT>
<P><FONT class=extract>It is traditional to use upper case letters in variable names, but we recommend using lower case letters for variable names that serve internal purposes in the makefile, and reserving upper case for parameters that control implicit rules or for parameters that the user should override with command options (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>A few variables have names that are a single punctuation character or just a few characters. These are the <DFN>automatic variables</DFN>, and they have particular specialized uses. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Reference</FONT></A><FONT class=extract>: How to use the value of a variable. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>Flavors</FONT></A><FONT class=extract>: Variables come in two flavors. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Advanced"><FONT class=extract>Advanced</FONT></A><FONT class=extract>: Advanced features for referencing a variable. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Values"><FONT class=extract>Values</FONT></A><FONT class=extract>: All the ways variables get their values. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting</FONT></A><FONT class=extract>: How to set a variable in the makefile. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Appending"><FONT class=extract>Appending</FONT></A><FONT class=extract>: How to append more text to the old value of a variable. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>Override Directive</FONT></A><FONT class=extract>: How to set a variable in the makefile even if the user has set it with a command argument. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Multi-Line</FONT></A><FONT class=extract>: An alternate way to set a variable to a multi-line string. </FONT>
<LI><A accessKey=9 href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive"><FONT class=extract>Undefine Directive</FONT></A><FONT class=extract>: How to undefine a variable so that it appears as if it was never set. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Environment</FONT></A><FONT class=extract>: Variable values can come from the environment. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific"><FONT class=extract>Target-specific</FONT></A><FONT class=extract>: Variable values can be defined on a per-target basis. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific"><FONT class=extract>Pattern-specific</FONT></A><FONT class=extract>: Target-specific variable values can be applied to a group of targets that match a pattern. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance"><FONT class=extract>Suppressing Inheritance</FONT></A><FONT class=extract>: Suppress inheritance of variables. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>: Variables with special meaning or behavior. </FONT></LI></UL>
<DIV class=node><A name=Reference></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Flavors" rel=next><FONT class=extract>Flavors</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=previous><FONT class=extract>Using Variables</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.1 Basics of Variable References</FONT></H3>
<P><A name=index-variables_002c-how-to-reference-475></A><A name=index-reference-to-variables-476></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-variable-reference-477></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-reference-478></A><FONT class=extract>To substitute a variable's value, write a dollar sign followed by the name of the variable in parentheses or braces: either &#8216;<SAMP><SPAN class=samp>$(foo)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${foo}</SPAN></SAMP>&#8217; is a valid reference to the variable <CODE>foo</CODE>. This special significance of &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; is why you must write &#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217; to have the effect of a single dollar sign in a file name or recipe. </FONT>
<P><FONT class=extract>Variable references can be used in any context: targets, prerequisites, recipes, most directives, and new variable values. Here is an example of a common case, where a variable holds the names of all the object files in a program: </FONT><PRE class=example><FONT class=extract>     objects = program.o foo.o utils.o
     program : $(objects)
             cc -o program $(objects)
     
     $(objects) : defs.h
</FONT></PRE>
<P><FONT class=extract>Variable references work by strict textual substitution. Thus, the rule </FONT><PRE class=example><FONT class=extract>     foo = c
     prog.o : prog.$(foo)
             $(foo)$(foo) -$(foo) prog.$(foo)
</FONT></PRE>
<P class=noindent><FONT class=extract>could be used to compile a C program <SAMP><SPAN class=file>prog.c</SPAN></SAMP>. Since spaces before the variable value are ignored in variable assignments, the value of <CODE>foo</CODE> is precisely &#8216;<SAMP><SPAN class=samp>c</SPAN></SAMP>&#8217;. (Don't actually write your makefiles this way!) </FONT>
<P><FONT class=extract>A dollar sign followed by a character other than a dollar sign, open-parenthesis or open-brace treats that single character as the variable name. Thus, you could reference the variable <CODE>x</CODE> with &#8216;<SAMP><SPAN class=samp>$x</SPAN></SAMP>&#8217;. However, this practice is strongly discouraged, except in the case of the automatic variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Flavors></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=next><FONT class=extract>Advanced</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Reference" rel=previous><FONT class=extract>Reference</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.2 The Two Flavors of Variables</FONT></H3>
<P><A name=index-flavors-of-variables-479></A><A name=index-recursive-variable-expansion-480></A><A name=index-variables_002c-flavors-481></A><A name=index-recursively-expanded-variables-482></A><A name=index-variables_002c-recursively-expanded-483></A><FONT class=extract>There are two ways that a variable in GNU <CODE>make</CODE> can have a value; we call them the two <DFN>flavors</DFN> of variables. The two flavors are distinguished in how they are defined and in what they do when expanded. </FONT>
<P><A name=index-g_t_003d-484></A><FONT class=extract>The first flavor of variable is a <DFN>recursively expanded</DFN> variable. Variables of this sort are defined by lines using &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>) or by the <CODE>define</CODE> directive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>). The value you specify is installed verbatim; if it contains references to other variables, these references are expanded whenever this variable is substituted (in the course of expanding some other string). When this happens, it is called <DFN>recursive expansion</DFN>. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>     foo = $(bar)
     bar = $(ugh)
     ugh = Huh?
     
     all:;echo $(foo)
</FONT></PRE>
<P class=noindent><FONT class=extract>will echo &#8216;<SAMP><SPAN class=samp>Huh?</SPAN></SAMP>&#8217;: &#8216;<SAMP><SPAN class=samp>$(foo)</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(bar)</SPAN></SAMP>&#8217; which expands to &#8216;<SAMP><SPAN class=samp>$(ugh)</SPAN></SAMP>&#8217; which finally expands to &#8216;<SAMP><SPAN class=samp>Huh?</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>This flavor of variable is the only sort supported by most other versions of <CODE>make</CODE>. It has its advantages and its disadvantages. An advantage (most would say) is that: </FONT><PRE class=example><FONT class=extract>     CFLAGS = $(include_dirs) -O
     include_dirs = -Ifoo -Ibar
</FONT></PRE>
<P class=noindent><FONT class=extract>will do what was intended: when &#8216;<SAMP><SPAN class=samp>CFLAGS</SPAN></SAMP>&#8217; is expanded in a recipe, it will expand to &#8216;<SAMP><SPAN class=samp>-Ifoo -Ibar -O</SPAN></SAMP>&#8217;. A major disadvantage is that you cannot append something on the end of a variable, as in </FONT><PRE class=example><FONT class=extract>     CFLAGS = $(CFLAGS) -O
</FONT></PRE>
<P class=noindent><FONT class=extract>because it will cause an infinite loop in the variable expansion. (Actually <CODE>make</CODE> detects the infinite loop and reports an error.) </FONT><A name=index-loops-in-variable-expansion-485></A><A name=index-variables_002c-loops-in-expansion-486></A><FONT class=extract>Another disadvantage is that any functions (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>) referenced in the definition will be executed every time the variable is expanded. This makes <CODE>make</CODE> run slower; worse, it causes the <CODE>wildcard</CODE> and <CODE>shell</CODE> functions to give unpredictable results because you cannot easily control when they are called, or even how many times. </FONT>
<P><FONT class=extract>To avoid all the problems and inconveniences of recursively expanded variables, there is another flavor: simply expanded variables. </FONT>
<P><A name=index-simply-expanded-variables-487></A><A name=index-variables_002c-simply-expanded-488></A><A name=index-g_t_003a_003d-489></A><A name=index-g_t_003a_003a_003d-490></A><FONT class=extract><DFN>Simply expanded variables</DFN> are defined by lines using &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>). Both forms are equivalent in GNU <CODE>make</CODE>; however only the &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; form is described by the POSIX standard (support for &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; was added to the POSIX standard in 2012, so older versions of <CODE>make</CODE> won't accept this form either). </FONT>
<P><FONT class=extract>The value of a simply expanded variable is scanned once and for all, expanding any references to other variables and functions, when the variable is defined. The actual value of the simply expanded variable is the result of expanding the text that you write. It does not contain any references to other variables; it contains their values <EM>as of the time this variable was defined</EM>. Therefore, </FONT><PRE class=example><FONT class=extract>     x := foo
     y := $(x) bar
     x := later
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>     y := foo bar
     x := later
</FONT></PRE>
<P><FONT class=extract>When a simply expanded variable is referenced, its value is substituted verbatim. </FONT>
<P><FONT class=extract>Here is a somewhat more complicated example, illustrating the use of &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; in conjunction with the <CODE>shell</CODE> function. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function"><FONT class=extract>The <CODE>shell</CODE> Function</FONT></A><FONT class=extract>.) This example also shows use of the variable <CODE>MAKELEVEL</CODE>, which is changed when it is passed down from level to level. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>, for information about <CODE>MAKELEVEL</CODE>.) </FONT>
<P><A name=index-MAKELEVEL-491><FONT class=extract></FONT></A><A name=index-MAKE-492></A><PRE class=example><FONT class=extract>     ifeq (0,${MAKELEVEL})
     whoami    := $(shell whoami)
     host-type := $(shell arch)
     MAKE := ${MAKE} host-type=${host-type} whoami=${whoami}
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>An advantage of this use of &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; is that a typical `descend into a directory' recipe then looks like this: </FONT><PRE class=example><FONT class=extract>     ${subdirs}:
             ${MAKE} -C $@ all
</FONT></PRE>
<P><FONT class=extract>Simply expanded variables generally make complicated makefile programming more predictable because they work like variables in most programming languages. They allow you to redefine a variable using its own value (or its value processed in some way by one of the expansion functions) and to use the expansion functions much more efficiently (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-spaces_002c-in-variable-values-493></A><A name=index-whitespace_002c-in-variable-values-494></A><A name=index-variables_002c-spaces-in-values-495></A><FONT class=extract>You can also use them to introduce controlled leading whitespace into variable values. Leading whitespace characters are discarded from your input before substitution of variable references and function calls; this means you can include leading spaces in a variable value by protecting them with variable references, like this: </FONT><PRE class=example><FONT class=extract>     nullstring :=
     space := $(nullstring) # end of the line
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the value of the variable <CODE>space</CODE> is precisely one space. The comment &#8216;<SAMP><SPAN class=samp>#&nbsp;end&nbsp;of&nbsp;the&nbsp;line</SPAN></SAMP>&#8217;<!-- /@w --> is included here just for clarity. Since trailing space characters are <EM>not</EM> stripped from variable values, just a space at the end of the line would have the same effect (but be rather hard to read). If you put whitespace at the end of a variable value, it is a good idea to put a comment like that at the end of the line to make your intent clear. Conversely, if you do <EM>not</EM> want any whitespace characters at the end of your variable value, you must remember not to put a random comment on the end of the line after some whitespace, such as this: </FONT><PRE class=example><FONT class=extract>     dir := /foo/bar    # directory to put the frobs in
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the value of the variable <CODE>dir</CODE> is &#8216;<SAMP><SPAN class=samp>/foo/bar&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></SAMP>&#8217;<!-- /@w --> (with four trailing spaces), which was probably not the intention. (Imagine something like &#8216;<SAMP><SPAN class=samp>$(dir)/file</SPAN></SAMP>&#8217;<!-- /@w --> with this definition!) </FONT>
<P><A name=index-conditional-variable-assignment-496></A><A name=index-variables_002c-conditional-assignment-497></A><A name=index-g_t_003f_003d-498></A><FONT class=extract>There is another assignment operator for variables, &#8216;<SAMP><SPAN class=samp>?=</SPAN></SAMP>&#8217;. This is called a conditional variable assignment operator, because it only has an effect if the variable is not yet defined. This statement: </FONT><PRE class=example><FONT class=extract>     FOO ?= bar
</FONT></PRE>
<P class=noindent><FONT class=extract>is exactly equivalent to this (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function"><FONT class=extract>The <CODE>origin</CODE> Function</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     ifeq ($(origin FOO), undefined)
       FOO = bar
     endif
</FONT></PRE>
<P><FONT class=extract>Note that a variable set to an empty value is still defined, so &#8216;<SAMP><SPAN class=samp>?=</SPAN></SAMP>&#8217; will not set that variable. </FONT>
<DIV class=node><A name=Advanced></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Values" rel=next><FONT class=extract>Values</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Flavors" rel=previous><FONT class=extract>Flavors</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.3 Advanced Features for Reference to Variables</FONT></H3>
<P><A name=index-reference-to-variables-499></A><FONT class=extract>This section describes some advanced features you can use to reference variables in more flexible ways. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs"><FONT class=extract>Substitution Refs</FONT></A><FONT class=extract>: Referencing a variable with substitutions on the value. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Computed-Names"><FONT class=extract>Computed Names</FONT></A><FONT class=extract>: Computing the name of the variable to refer to. </FONT></LI></UL>
<DIV class=node><A name=Substitution-Refs></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Computed-Names" rel=next><FONT class=extract>Computed Names</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=previous><FONT class=extract>Advanced</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=up><FONT class=extract>Advanced</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>6.3.1 Substitution References</FONT></H4>
<P><A name=index-modified-variable-reference-500></A><A name=index-substitution-variable-reference-501></A><A name=index-variables_002c-modified-reference-502></A><A name=index-variables_002c-substitution-reference-503></A><A name=index-variables_002c-substituting-suffix-in-504></A><A name=index-suffix_002c-substituting-in-variables-505></A><FONT class=extract>A <DFN>substitution reference</DFN> substitutes the value of a variable with alterations that you specify. It has the form &#8216;<SAMP><SPAN class=samp>$(</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217; (or &#8216;<SAMP><SPAN class=samp>${</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>}</SPAN></SAMP>&#8217;) and its meaning is to take the value of the variable <VAR>var</VAR>, replace every <VAR>a</VAR> at the end of a word with <VAR>b</VAR> in that value, and substitute the resulting string. </FONT>
<P><FONT class=extract>When we say &#8220;at the end of a word&#8221;, we mean that <VAR>a</VAR> must appear either followed by whitespace or at the end of the value in order to be replaced; other occurrences of <VAR>a</VAR> in the value are unaltered. For example: </FONT><PRE class=example><FONT class=extract>     foo := a.o b.o c.o
     bar := $(foo:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>A substitution reference is actually an abbreviation for use of the <CODE>patsubst</CODE> expansion function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>). We provide substitution references as well as <CODE>patsubst</CODE> for compatibility with other implementations of <CODE>make</CODE>. </FONT>
<P><A name=index-patsubst-506></A><FONT class=extract>Another type of substitution reference lets you use the full power of the <CODE>patsubst</CODE> function. It has the same form &#8216;<SAMP><SPAN class=samp>$(</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217; described above, except that now <VAR>a</VAR> must contain a single &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. This case is equivalent to &#8216;<SAMP><SPAN class=samp>$(patsubst </SPAN><VAR>a</VAR><SPAN class=samp>,</SPAN><VAR>b</VAR><SPAN class=samp>,$(</SPAN><VAR>var</VAR><SPAN class=samp>))</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>, for a description of the <CODE>patsubst</CODE> function. </FONT><PRE class=example><BR><FONT class=extract>For example:<BR>
     
     foo := a.o b.o c.o
     bar := $(foo:%.o=%.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217;. </FONT>
<DIV class=node><A name=Computed-Names></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs" rel=previous><FONT class=extract>Substitution Refs</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=up><FONT class=extract>Advanced</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>6.3.2 Computed Variable Names</FONT></H4>
<P><A name=index-nested-variable-reference-507></A><A name=index-computed-variable-name-508></A><A name=index-variables_002c-computed-names-509></A><A name=index-variables_002c-nested-references-510></A><A name=index-variables_002c-_0040samp_007b_0024_007d-in-name-511></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-variable-name-512></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-name-513></A><FONT class=extract>Computed variable names are a complicated concept needed only for sophisticated makefile programming. For most purposes you need not consider them, except to know that making a variable with a dollar sign in its name might have strange results. However, if you are the type that wants to understand everything, or you are actually interested in what they do, read on. </FONT>
<P><FONT class=extract>Variables may be referenced inside the name of a variable. This is called a <DFN>computed variable name</DFN> or a <DFN>nested variable reference</DFN>. For example, </FONT><PRE class=example><FONT class=extract>     x = y
     y = z
     a := $($(x))
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;: the &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; inside &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;. Here the name of the variable to reference is not stated explicitly; it is computed by expansion of &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217;. The reference &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; here is nested within the outer variable reference. </FONT>
<P><FONT class=extract>The previous example shows two levels of nesting, but any number of levels is possible. For example, here are three levels: </FONT><PRE class=example><FONT class=extract>     x = y
     y = z
     z = u
     a := $($($(x)))
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the innermost &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;; now we have &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217;, which becomes &#8216;<SAMP><SPAN class=samp>u</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>References to recursively-expanded variables within a variable name are re-expanded in the usual fashion. For example: </FONT><PRE class=example><FONT class=extract>     x = $(y)
     y = z
     z = Hello
     a := $($(x))
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;: &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; becomes &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Nested variable references can also contain modified references and function invocations (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>), just like any other reference. For example, using the <CODE>subst</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     x = variable1
     variable2 := Hello
     y = $(subst 1,2,$(x))
     z = y
     a := $($($(z)))
</FONT></PRE>
<P class=noindent><FONT class=extract>eventually defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. It is doubtful that anyone would ever want to write a nested reference as convoluted as this one, but it works: &#8216;<SAMP><SPAN class=samp>$($($(z)))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$($(subst 1,2,$(x)))</SPAN></SAMP>&#8217;. This gets the value &#8216;<SAMP><SPAN class=samp>variable1</SPAN></SAMP>&#8217; from <CODE>x</CODE> and changes it by substitution to &#8216;<SAMP><SPAN class=samp>variable2</SPAN></SAMP>&#8217;, so that the entire string becomes &#8216;<SAMP><SPAN class=samp>$(variable2)</SPAN></SAMP>&#8217;, a simple variable reference whose value is &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>A computed variable name need not consist entirely of a single variable reference. It can contain several variable references, as well as some invariant text. For example, </FONT><PRE class=example><FONT class=extract>     a_dirs := dira dirb
     1_dirs := dir1 dir2
     
     a_files := filea fileb
     1_files := file1 file2
     
     ifeq "$(use_a)" "yes"
     a1 := a
     else
     a1 := 1
     endif
     
     ifeq "$(use_dirs)" "yes"
     df := dirs
     else
     df := files
     endif
     
     dirs := $($(a1)_$(df))
</FONT></PRE>
<P class=noindent><FONT class=extract>will give <CODE>dirs</CODE> the same value as <CODE>a_dirs</CODE>, <CODE>1_dirs</CODE>, <CODE>a_files</CODE> or <CODE>1_files</CODE> depending on the settings of <CODE>use_a</CODE> and <CODE>use_dirs</CODE>. </FONT>
<P><FONT class=extract>Computed variable names can also be used in substitution references: </FONT><PRE class=example><FONT class=extract>     a_objects := a.o b.o c.o
     1_objects := 1.o 2.o 3.o
     
     sources := $($(a1)_objects:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>sources</CODE> as either &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>1.c 2.c 3.c</SPAN></SAMP>&#8217;, depending on the value of <CODE>a1</CODE>. </FONT>
<P><FONT class=extract>The only restriction on this sort of use of nested variable references is that they cannot specify part of the name of a function to be called. This is because the test for a recognized function name is done before the expansion of nested references. For example, </FONT><PRE class=example><FONT class=extract>     ifdef do_sort
     func := sort
     else
     func := strip
     endif
     
     bar := a d b g q c
     
     foo := $($(func) $(bar))
</FONT></PRE>
<P class=noindent><FONT class=extract>attempts to give &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; the value of the variable &#8216;<SAMP><SPAN class=samp>sort a d b g q c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>strip a d b g q c</SPAN></SAMP>&#8217;, rather than giving &#8216;<SAMP><SPAN class=samp>a d b g q c</SPAN></SAMP>&#8217; as the argument to either the <CODE>sort</CODE> or the <CODE>strip</CODE> function. This restriction could be removed in the future if that change is shown to be a good idea. </FONT>
<P><FONT class=extract>You can also use computed variable names in the left-hand side of a variable assignment, or in a <CODE>define</CODE> directive, as in: </FONT><PRE class=example><FONT class=extract>     dir = foo
     $(dir)_sources := $(wildcard $(dir)/*.c)
     define $(dir)_print =
     lpr $($(dir)_sources)
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract>This example defines the variables &#8216;<SAMP><SPAN class=samp>dir</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>foo_sources</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>foo_print</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Note that <DFN>nested variable references</DFN> are quite different from <DFN>recursively expanded variables</DFN> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>), though both are used together in complex ways when doing makefile programming. </FONT>
<DIV class=node><A name=Values></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Setting" rel=next><FONT class=extract>Setting</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=previous><FONT class=extract>Advanced</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.4 How Variables Get Their Values</FONT></H3>
<P><A name=index-variables_002c-how-they-get-their-values-514></A><A name=index-value_002c-how-a-variable-gets-it-515></A><FONT class=extract>Variables can get values in several different ways: </FONT>
<UL>
<LI><FONT class=extract>You can specify an overriding value when you run <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>You can specify a value in the makefile, either with an assignment (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>) or with a verbatim definition (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>). </FONT>
<LI><FONT class=extract>Variables in the environment become <CODE>make</CODE> variables. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Several <DFN>automatic</DFN> variables are given new values for each rule. Each of these has a single conventional use. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Several variables have constant initial values. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>. </FONT></LI></UL>
<DIV class=node><A name=Setting></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Appending" rel=next><FONT class=extract>Appending</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Values" rel=previous><FONT class=extract>Values</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.5 Setting Variables</FONT></H3>
<P><A name=index-setting-variables-516></A><A name=index-variables_002c-setting-517></A><A name=index-g_t_003d-518></A><A name=index-g_t_003a_003d-519></A><A name=index-g_t_003a_003a_003d-520></A><A name=index-g_t_003f_003d-521></A><A name=index-g_t_0021_003d-522></A><FONT class=extract>To set a variable from the makefile, write a line starting with the variable name followed by &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;. Whatever follows the &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; on the line becomes the value. For example, </FONT><PRE class=example><FONT class=extract>     objects = main.o foo.o bar.o utils.o
</FONT></PRE>
<P class=noindent><FONT class=extract>defines a variable named <CODE>objects</CODE>. Whitespace around the variable name and immediately after the &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; is ignored. </FONT>
<P><FONT class=extract>Variables defined with &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; are <DFN>recursively expanded</DFN> variables. Variables defined with &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; are <DFN>simply expanded</DFN> variables; these definitions can contain variable references which will be expanded before the definition is made. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>The variable name may contain function and variable references, which are expanded when the line is read to find the actual variable name to use. </FONT>
<P><FONT class=extract>There is no limit on the length of the value of a variable except the amount of memory on the computer. You can split the value of a variable into multiple physical lines for readability (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines"><FONT class=extract>Splitting Long Lines</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Most variable names are considered to have the empty string as a value if you have never set them. Several variables have built-in initial values that are not empty, but you can set them in the usual ways (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>). Several special variables are set automatically to a new value for each rule; these are called the <DFN>automatic</DFN> variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>If you'd like a variable to be set to a value only if it's not already set, then you can use the shorthand operator &#8216;<SAMP><SPAN class=samp>?=</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;. These two settings of the variable &#8216;<SAMP><SPAN class=samp>FOO</SPAN></SAMP>&#8217; are identical (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function"><FONT class=extract>The <CODE>origin</CODE> Function</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     FOO ?= bar
</FONT></PRE>
<P class=noindent><FONT class=extract>and </FONT><PRE class=example><FONT class=extract>     ifeq ($(origin FOO), undefined)
     FOO = bar
     endif
</FONT></PRE>
<P><FONT class=extract>The shell assignment operator &#8216;<SAMP><SPAN class=samp>!=</SPAN></SAMP>&#8217; can be used to execute a program and set a variable to its output. This operator first evaluates the right-hand side, then passes that result to the shell for execution. If the result of the execution ends in a newline, that one newline is removed; all other newlines are replaced by spaces. The resulting string is then placed into the named recursively-expanded variable. For example: </FONT><PRE class=example><FONT class=extract>     hash != printf '\043'
     file_list != find . -name '*.c'
</FONT></PRE>
<P><FONT class=extract>If the result of the execution could produce a <CODE>$</CODE>, and you don't intend what follows that to be interpreted as a make variable or function reference, then you must replace every <CODE>$</CODE> with <CODE>$$</CODE> as part of the execution. Alternatively, you can set a simply expanded variable to the result of running a program using the <CODE>shell</CODE> function call. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function"><FONT class=extract>The <CODE>shell</CODE> Function</FONT></A><FONT class=extract>. For example: </FONT><PRE class=example><FONT class=extract>     hash := $(shell printf '\043')
     var := $(shell find . -name "*.c")
</FONT></PRE>
<DIV class=node><A name=Appending></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Override-Directive" rel=next><FONT class=extract>Override Directive</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Setting" rel=previous><FONT class=extract>Setting</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.6 Appending More Text to Variables</FONT></H3>
<P><A name=index-g_t_002b_003d-523></A><A name=index-appending-to-variables-524></A><A name=index-variables_002c-appending-to-525></A><FONT class=extract>Often it is useful to add more text to the value of a variable already defined. You do this with a line containing &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;, like this: </FONT><PRE class=example><FONT class=extract>     objects += another.o
</FONT></PRE>
<P class=noindent><FONT class=extract>This takes the value of the variable <CODE>objects</CODE>, and adds the text &#8216;<SAMP><SPAN class=samp>another.o</SPAN></SAMP>&#8217; to it (preceded by a single space). Thus: </FONT><PRE class=example><FONT class=extract>     objects = main.o foo.o bar.o utils.o
     objects += another.o
</FONT></PRE>
<P class=noindent><FONT class=extract>sets <CODE>objects</CODE> to &#8216;<SAMP><SPAN class=samp>main.o foo.o bar.o utils.o another.o</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Using &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; is similar to: </FONT><PRE class=example><FONT class=extract>     objects = main.o foo.o bar.o utils.o
     objects := $(objects) another.o
</FONT></PRE>
<P class=noindent><FONT class=extract>but differs in ways that become important when you use more complex values. </FONT>
<P><FONT class=extract>When the variable in question has not been defined before, &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; acts just like normal &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;: it defines a recursively-expanded variable. However, when there <EM>is</EM> a previous definition, exactly what &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; does depends on what flavor of variable you defined originally. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>, for an explanation of the two flavors of variables. </FONT>
<P><FONT class=extract>When you add to a variable's value with &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;, <CODE>make</CODE> acts essentially as if you had included the extra text in the initial definition of the variable. If you defined it first with &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;, making it a simply-expanded variable, &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; adds to that simply-expanded definition, and expands the new text before appending it to the old value just as &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; does (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>, for a full explanation of &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;). In fact, </FONT><PRE class=example><FONT class=extract>     variable := value
     variable += more
</FONT></PRE>
<P class=noindent><FONT class=extract>is exactly equivalent to: </FONT>
<P class=noindent><FONT class=extract></FONT><PRE class=example><FONT class=extract>     variable := value
     variable := $(variable) more
</FONT></PRE>
<P><FONT class=extract>On the other hand, when you use &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; with a variable that you defined first to be recursively-expanded using plain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, <CODE>make</CODE> does something a bit different. Recall that when you define a recursively-expanded variable, <CODE>make</CODE> does not expand the value you set for variable and function references immediately. Instead it stores the text verbatim, and saves these variable and function references to be expanded later, when you refer to the new variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>). When you use &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; on a recursively-expanded variable, it is this unexpanded text to which <CODE>make</CODE> appends the new text you specify. </FONT><PRE class=example><FONT class=extract>     variable = value
     variable += more
</FONT></PRE>
<P class=noindent><FONT class=extract>is roughly equivalent to: </FONT><PRE class=example><FONT class=extract>     temp = value
     variable = $(temp) more
</FONT></PRE>
<P class=noindent><FONT class=extract>except that of course it never defines a variable called <CODE>temp</CODE>. The importance of this comes when the variable's old value contains variable references. Take this common example: </FONT><PRE class=example><FONT class=extract>     CFLAGS = $(includes) -O
     ...
     CFLAGS += -pg # enable profiling
</FONT></PRE>
<P class=noindent><FONT class=extract>The first line defines the <CODE>CFLAGS</CODE> variable with a reference to another variable, <CODE>includes</CODE>. (<CODE>CFLAGS</CODE> is used by the rules for C compilation; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>.) Using &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; for the definition makes <CODE>CFLAGS</CODE> a recursively-expanded variable, meaning &#8216;<SAMP><SPAN class=samp>$(includes)&nbsp;-O</SPAN></SAMP>&#8217;<!-- /@w --> is <EM>not</EM> expanded when <CODE>make</CODE> processes the definition of <CODE>CFLAGS</CODE>. Thus, <CODE>includes</CODE> need not be defined yet for its value to take effect. It only has to be defined before any reference to <CODE>CFLAGS</CODE>. If we tried to append to the value of <CODE>CFLAGS</CODE> without using &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;, we might do it like this: </FONT><PRE class=example><FONT class=extract>     CFLAGS := $(CFLAGS) -pg # enable profiling
</FONT></PRE>
<P class=noindent><FONT class=extract>This is pretty close, but not quite what we want. Using &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; redefines <CODE>CFLAGS</CODE> as a simply-expanded variable; this means <CODE>make</CODE> expands the text &#8216;<SAMP><SPAN class=samp>$(CFLAGS)&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w --> before setting the variable. If <CODE>includes</CODE> is not yet defined, we get &#8216;<SAMP><SPAN class=samp>&nbsp;-O&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w -->, and a later definition of <CODE>includes</CODE> will have no effect. Conversely, by using &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; we set <CODE>CFLAGS</CODE> to the <EM>unexpanded</EM> value &#8216;<SAMP><SPAN class=samp>$(includes)&nbsp;-O&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w -->. Thus we preserve the reference to <CODE>includes</CODE>, so if that variable gets defined at any later point, a reference like &#8216;<SAMP><SPAN class=samp>$(CFLAGS)</SPAN></SAMP>&#8217; still uses its value. </FONT>
<DIV class=node><A name=Override-Directive></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine" rel=next><FONT class=extract>Multi-Line</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Appending" rel=previous><FONT class=extract>Appending</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.7 The <CODE>override</CODE> Directive</FONT></H3>
<P><A name=index-override-526></A><A name=index-overriding-with-_0040code_007boverride_007d-527></A><A name=index-variables_002c-overriding-528></A><FONT class=extract>If a variable has been set with a command argument (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding Variables</FONT></A><FONT class=extract>), then ordinary assignments in the makefile are ignored. If you want to set the variable in the makefile even though it was set with a command argument, you can use an <CODE>override</CODE> directive, which is a line that looks like this: </FONT><PRE class=example><FONT class=extract>     override <VAR>variable</VAR> = <VAR>value</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>or </FONT><PRE class=example><FONT class=extract>     override <VAR>variable</VAR> := <VAR>value</VAR>
</FONT></PRE>
<P><FONT class=extract>To append more text to a variable defined on the command line, use: </FONT><PRE class=example><FONT class=extract>     override <VAR>variable</VAR> += <VAR>more text</VAR>
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Appending"><FONT class=extract>Appending More Text to Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Variable assignments marked with the <CODE>override</CODE> flag have a higher priority than all other assignments, except another <CODE>override</CODE>. Subsequent assignments or appends to this variable which are not marked <CODE>override</CODE> will be ignored. </FONT>
<P><FONT class=extract>The <CODE>override</CODE> directive was not invented for escalation in the war between makefiles and command arguments. It was invented so you can alter and add to values that the user specifies with command arguments. </FONT>
<P><FONT class=extract>For example, suppose you always want the &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; switch when you run the C compiler, but you would like to allow the user to specify the other switches with a command argument just as usual. You could use this <CODE>override</CODE> directive: </FONT><PRE class=example><FONT class=extract>     override CFLAGS += -g
</FONT></PRE>
<P><FONT class=extract>You can also use <CODE>override</CODE> directives with <CODE>define</CODE> directives. This is done as you might expect: </FONT><PRE class=example><FONT class=extract>     override define foo =
     bar
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Multi-Line></A><A name=Multi_002dLine></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive" rel=next><FONT class=extract>Undefine Directive</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Override-Directive" rel=previous><FONT class=extract>Override Directive</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.8 Defining Multi-Line Variables</FONT></H3>
<P><A name=index-define-529></A><A name=index-endef-530></A><A name=index-multi_002dline-variable-definition-531></A><A name=index-variables_002c-multi_002dline-532></A><A name=index-verbatim-variable-definition-533></A><A name=index-defining-variables-verbatim-534></A><A name=index-variables_002c-defining-verbatim-535></A><FONT class=extract>Another way to set the value of a variable is to use the <CODE>define</CODE> directive. This directive has an unusual syntax which allows newline characters to be included in the value, which is convenient for defining both canned sequences of commands (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes"><FONT class=extract>Defining Canned Recipes</FONT></A><FONT class=extract>), and also sections of makefile syntax to use with <CODE>eval</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The <CODE>define</CODE> directive is followed on the same line by the name of the variable being defined and an (optional) assignment operator, and nothing more. The value to give the variable appears on the following lines. The end of the value is marked by a line containing just the word <CODE>endef</CODE>. Aside from this difference in syntax, <CODE>define</CODE> works just like any other variable definition. The variable name may contain function and variable references, which are expanded when the directive is read to find the actual variable name to use. </FONT>
<P><FONT class=extract>You may omit the variable assignment operator if you prefer. If omitted, <CODE>make</CODE> assumes it to be &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; and creates a recursively-expanded variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>). When using a &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; operator, the value is appended to the previous value as with any other append operation: with a single space separating the old and new values. </FONT>
<P><FONT class=extract>You may nest <CODE>define</CODE> directives: <CODE>make</CODE> will keep track of nested directives and report an error if they are not all properly closed with <CODE>endef</CODE>. Note that lines beginning with the recipe prefix character are considered part of a recipe, so any <CODE>define</CODE> or <CODE>endef</CODE> strings appearing on such a line will not be considered <CODE>make</CODE> directives. </FONT><PRE class=example><FONT class=extract>     define two-lines =
     echo foo
     echo $(bar)
     endef
</FONT></PRE>
<P><FONT class=extract>The value in an ordinary assignment cannot contain a newline; but the newlines that separate the lines of the value in a <CODE>define</CODE> become part of the variable's value (except for the final newline which precedes the <CODE>endef</CODE> and is not considered part of the value). </FONT>
<P><FONT class=extract>When used in a recipe, the previous example is functionally equivalent to this: </FONT><PRE class=example><FONT class=extract>     two-lines = echo foo; echo $(bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>since two commands separated by semicolon behave much like two separate shell commands. However, note that using two separate lines means <CODE>make</CODE> will invoke the shell twice, running an independent sub-shell for each line. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>If you want variable definitions made with <CODE>define</CODE> to take precedence over command-line variable definitions, you can use the <CODE>override</CODE> directive together with <CODE>define</CODE>: </FONT><PRE class=example><FONT class=extract>     override define two-lines =
     foo
     $(bar)
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Undefine-Directive></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Environment" rel=next><FONT class=extract>Environment</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine" rel=previous><FONT class=extract>Multi-Line</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.9 Undefining Variables</FONT></H3>
<P><A name=index-undefine-536></A><A name=index-undefining-variable-537></A><FONT class=extract>If you want to clear a variable, setting its value to empty is usually sufficient. Expanding such a variable will yield the same result (empty string) regardless of whether it was set or not. However, if you are using the <CODE>flavor</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function"><FONT class=extract>Flavor Function</FONT></A><FONT class=extract>) and <CODE>origin</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function"><FONT class=extract>Origin Function</FONT></A><FONT class=extract>) functions, there is a difference between a variable that was never set and a variable with an empty value. In such situations you may want to use the <CODE>undefine</CODE> directive to make a variable appear as if it was never set. For example: </FONT><PRE class=example><FONT class=extract>     foo := foo
     bar = bar
     
     undefine foo
     undefine bar
     
     $(info $(origin foo))
     $(info $(flavor bar))
</FONT></PRE>
<P><FONT class=extract>This example will print &#8220;undefined&#8221; for both variables. </FONT>
<P><FONT class=extract>If you want to undefine a command-line variable definition, you can use the <CODE>override</CODE> directive together with <CODE>undefine</CODE>, similar to how this is done for variable definitions: </FONT><PRE class=example><FONT class=extract>     override undefine CFLAGS
</FONT></PRE>
<DIV class=node><A name=Environment></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific" rel=next><FONT class=extract>Target-specific</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive" rel=previous><FONT class=extract>Undefine Directive</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.10 Variables from the Environment</FONT></H3>
<P><A name=index-variables_002c-environment-538></A><A name=index-environment-539></A><FONT class=extract>Variables in <CODE>make</CODE> can come from the environment in which <CODE>make</CODE> is run. Every environment variable that <CODE>make</CODE> sees when it starts up is transformed into a <CODE>make</CODE> variable with the same name and value. However, an explicit assignment in the makefile, or with a command argument, overrides the environment. (If the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; flag is specified, then values from the environment override assignments in the makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. But this is not recommended practice.) </FONT>
<P><FONT class=extract>Thus, by setting the variable <CODE>CFLAGS</CODE> in your environment, you can cause all C compilations in most makefiles to use the compiler switches you prefer. This is safe for variables with standard or conventional meanings because you know that no makefile will use them for other things. (Note this is not totally reliable; some makefiles set <CODE>CFLAGS</CODE> explicitly and therefore are not affected by the value in the environment.) </FONT>
<P><FONT class=extract>When <CODE>make</CODE> runs a recipe, variables defined in the makefile are placed into the environment of each shell. This allows you to pass values to sub-<CODE>make</CODE> invocations (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). By default, only variables that came from the environment or the command line are passed to recursive invocations. You can use the <CODE>export</CODE> directive to pass other variables. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>, for full details. </FONT>
<P><FONT class=extract>Other use of variables from the environment is not recommended. It is not wise for makefiles to depend for their functioning on environment variables set up outside their control, since this would cause different users to get different results from the same makefile. This is against the whole purpose of most makefiles. </FONT>
<P><A name=index-SHELL_002c-import-from-environment-540></A><FONT class=extract>Such problems would be especially likely with the variable <CODE>SHELL</CODE>, which is normally present in the environment to specify the user's choice of interactive shell. It would be very undesirable for this choice to affect <CODE>make</CODE>; so, <CODE>make</CODE> handles the <CODE>SHELL</CODE> environment variable in a special way; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell"><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Target-specific></A><A name=Target_002dspecific></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific" rel=next><FONT class=extract>Pattern-specific</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Environment" rel=previous><FONT class=extract>Environment</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.11 Target-specific Variable Values</FONT></H3>
<P><A name=index-target_002dspecific-variables-541></A><A name=index-variables_002c-target_002dspecific-542></A><FONT class=extract>Variable values in <CODE>make</CODE> are usually global; that is, they are the same regardless of where they are evaluated (unless they're reset, of course). One exception to that is automatic variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The other exception is <DFN>target-specific variable values</DFN>. This feature allows you to define different values for the same variable, based on the target that <CODE>make</CODE> is currently building. As with automatic variables, these values are only available within the context of a target's recipe (and in other target-specific assignments). </FONT>
<P><FONT class=extract>Set a target-specific variable value like this: </FONT><PRE class=example><FONT class=extract>     <VAR>target</VAR> ... : <VAR>variable-assignment</VAR>
</FONT></PRE>
<P><FONT class=extract>Target-specific variable assignments can be prefixed with any or all of the special keywords <CODE>export</CODE>, <CODE>override</CODE>, or <CODE>private</CODE>; these apply their normal behavior to this instance of the variable only. </FONT>
<P><FONT class=extract>Multiple <VAR>target</VAR> values create a target-specific variable value for each member of the target list individually. </FONT>
<P><FONT class=extract>The <VAR>variable-assignment</VAR> can be any valid form of assignment; recursive (&#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;), simple (&#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;), appending (&#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;), or conditional (&#8216;<SAMP><SPAN class=samp>?=</SPAN></SAMP>&#8217;). All variables that appear within the <VAR>variable-assignment</VAR> are evaluated within the context of the target: thus, any previously-defined target-specific variable values will be in effect. Note that this variable is actually distinct from any &#8220;global&#8221; value: the two variables do not have to have the same flavor (recursive vs. simple). </FONT>
<P><FONT class=extract>Target-specific variables have the same priority as any other makefile variable. Variables provided on the command line (and in the environment if the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; option is in force) will take precedence. Specifying the <CODE>override</CODE> directive will allow the target-specific variable value to be preferred. </FONT>
<P><FONT class=extract>There is one more special feature of target-specific variables: when you define a target-specific variable that variable value is also in effect for all prerequisites of this target, and all their prerequisites, etc. (unless those prerequisites override that variable with their own target-specific variable value). So, for example, a statement like this: </FONT><PRE class=example><FONT class=extract>     prog : CFLAGS = -g
     prog : prog.o foo.o bar.o
</FONT></PRE>
<P class=noindent><FONT class=extract>will set <CODE>CFLAGS</CODE> to &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; in the recipe for <SAMP><SPAN class=file>prog</SPAN></SAMP>, but it will also set <CODE>CFLAGS</CODE> to &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; in the recipes that create <SAMP><SPAN class=file>prog.o</SPAN></SAMP>, <SAMP><SPAN class=file>foo.o</SPAN></SAMP>, and <SAMP><SPAN class=file>bar.o</SPAN></SAMP>, and any recipes which create their prerequisites. </FONT>
<P><FONT class=extract>Be aware that a given prerequisite will only be built once per invocation of make, at most. If the same file is a prerequisite of multiple targets, and each of those targets has a different value for the same target-specific variable, then the first target to be built will cause that prerequisite to be built and the prerequisite will inherit the target-specific value from the first target. It will ignore the target-specific values from any other targets. </FONT>
<DIV class=node><A name=Pattern-specific></A><A name=Pattern_002dspecific></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance" rel=next><FONT class=extract>Suppressing Inheritance</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific" rel=previous><FONT class=extract>Target-specific</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.12 Pattern-specific Variable Values</FONT></H3>
<P><A name=index-pattern_002dspecific-variables-543></A><A name=index-variables_002c-pattern_002dspecific-544></A><FONT class=extract>In addition to target-specific variable values (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific"><FONT class=extract>Target-specific Variable Values</FONT></A><FONT class=extract>), GNU <CODE>make</CODE> supports pattern-specific variable values. In this form, the variable is defined for any target that matches the pattern specified. </FONT>
<P><FONT class=extract>Set a pattern-specific variable value like this: </FONT><PRE class=example><FONT class=extract>     <VAR>pattern</VAR> ... : <VAR>variable-assignment</VAR>
</FONT></PRE>
<P><FONT class=extract>where <VAR>pattern</VAR> is a %-pattern. As with target-specific variable values, multiple <VAR>pattern</VAR> values create a pattern-specific variable value for each pattern individually. The <VAR>variable-assignment</VAR> can be any valid form of assignment. Any command line variable setting will take precedence, unless <CODE>override</CODE> is specified. </FONT>
<P><FONT class=extract>For example: </FONT><PRE class=example><FONT class=extract>     %.o : CFLAGS = -O
</FONT></PRE>
<P class=noindent><FONT class=extract>will assign <CODE>CFLAGS</CODE> the value of &#8216;<SAMP><SPAN class=samp>-O</SPAN></SAMP>&#8217; for all targets matching the pattern <CODE>%.o</CODE>. </FONT>
<P><FONT class=extract>If a target matches more than one pattern, the matching pattern-specific variables with longer stems are interpreted first. This results in more specific variables taking precedence over the more generic ones, for example: </FONT><PRE class=example><FONT class=extract>     %.o: %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
     
     lib/%.o: CFLAGS := -fPIC -g
     %.o: CFLAGS := -g
     
     all: foo.o lib/bar.o
</FONT></PRE>
<P><FONT class=extract>In this example the first definition of the <CODE>CFLAGS</CODE> variable will be used to update <SAMP><SPAN class=file>lib/bar.o</SPAN></SAMP> even though the second one also applies to this target. Pattern-specific variables which result in the same stem length are considered in the order in which they were defined in the makefile. </FONT>
<P><FONT class=extract>Pattern-specific variables are searched after any target-specific variables defined explicitly for that target, and before target-specific variables defined for the parent target. </FONT>
<DIV class=node><A name=Suppressing-Inheritance></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Special-Variables" rel=next><FONT class=extract>Special Variables</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific" rel=previous><FONT class=extract>Pattern-specific</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>6.13 Suppressing Inheritance</FONT></H3>
<P><A name=index-private-545></A><A name=index-suppressing-inheritance-546></A><A name=index-inheritance_002c-suppressing-547></A><FONT class=extract>As described in previous sections, <CODE>make</CODE> variables are inherited by prerequisites. This capability allows you to modify the behavior of a prerequisite based on which targets caused it to be rebuilt. For example, you might set a target-specific variable on a <CODE>debug</CODE> target, then running &#8216;<SAMP><SPAN class=samp>make debug</SPAN></SAMP>&#8217; will cause that variable to be inherited by all prerequisites of <CODE>debug</CODE>, while just running &#8216;<SAMP><SPAN class=samp>make all</SPAN></SAMP>&#8217; (for example) would not have that assignment. </FONT>
<P><FONT class=extract>Sometimes, however, you may not want a variable to be inherited. For these situations, <CODE>make</CODE> provides the <CODE>private</CODE> modifier. Although this modifier can be used with any variable assignment, it makes the most sense with target- and pattern-specific variables. Any variable marked <CODE>private</CODE> will be visible to its local target but will not be inherited by prerequisites of that target. A global variable marked <CODE>private</CODE> will be visible in the global scope but will not be inherited by any target, and hence will not be visible in any recipe. </FONT>
<P><FONT class=extract>As an example, consider this makefile: </FONT><PRE class=example><FONT class=extract>     EXTRA_CFLAGS =
     
     prog: private EXTRA_CFLAGS = -L/usr/local/lib
     prog: a.o b.o
</FONT></PRE>
<P><FONT class=extract>Due to the <CODE>private</CODE> modifier, <CODE>a.o</CODE> and <CODE>b.o</CODE> will not inherit the <CODE>EXTRA_CFLAGS</CODE> variable assignment from the <CODE>prog</CODE> target. </FONT>
<DIV class=node><A name=Special-Variables></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance" rel=previous><FONT class=extract>Suppressing Inheritance</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=up><FONT class=extract>Using Variables</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>6.14 Other Special Variables</FONT></H3>
<P><A name=index-makefiles_002c-and-special-variables-548></A><A name=index-special-variables-549></A><FONT class=extract>GNU <CODE>make</CODE> supports some variables that have special properties. </FONT><A name=index-MAKEFILE_005fLIST-_0040r_007b_0028list-of-parsed-makefiles_0029_007d-550></A><A name=index-makefiles_002c-and-_0040code_007bMAKEFILE_005fLIST_007d-variable-551></A><A name=index-including-_0028_0040code_007bMAKEFILE_005fLIST_007d-variable_0029-552></A>
<DL>
<DT><FONT class=extract><CODE>MAKEFILE_LIST</CODE> </FONT>
<DD><FONT class=extract>Contains the name of each makefile that is parsed by <CODE>make</CODE>, in the order in which it was parsed. The name is appended just before <CODE>make</CODE> begins to parse the makefile. Thus, if the first thing a makefile does is examine the last word in this variable, it will be the name of the current makefile. Once the current makefile has used <CODE>include</CODE>, however, the last word will be the just-included makefile. </FONT>
<P><FONT class=extract>If a makefile named <CODE>Makefile</CODE> has this content: </FONT><PRE class=example><FONT class=extract>          name1 := $(lastword $(MAKEFILE_LIST))
          
          include inc.mk
          
          name2 := $(lastword $(MAKEFILE_LIST))
          
          all:
                  @echo name1 = $(name1)
                  @echo name2 = $(name2)
</FONT></PRE>
<P class=noindent><FONT class=extract>then you would expect to see this output: </FONT><PRE class=example><FONT class=extract>          name1 = Makefile
          name2 = inc.mk
</FONT></PRE>
<P><A name=index-g_t_002eDEFAULT_005fGOAL-_0040r_007b_0028define-default-goal_0029_007d-553><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.DEFAULT_GOAL</CODE> </FONT>
<DD><FONT class=extract>Sets the default goal to be used if no targets were specified on the command line (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>). The <CODE>.DEFAULT_GOAL</CODE> variable allows you to discover the current default goal, restart the default goal selection algorithm by clearing its value, or to explicitly set the default goal. The following example illustrates these cases: </FONT><PRE class=example><FONT class=extract>          # Query the default goal.
          ifeq ($(.DEFAULT_GOAL),)
            $(warning no default goal is set)
          endif
          
          .PHONY: foo
          foo: ; @echo $@
          
          $(warning default goal is $(.DEFAULT_GOAL))
          
          # Reset the default goal.
          .DEFAULT_GOAL :=
          
          .PHONY: bar
          bar: ; @echo $@
          
          $(warning default goal is $(.DEFAULT_GOAL))
          
          # Set our own.
          .DEFAULT_GOAL := foo
</FONT></PRE>
<P><FONT class=extract>This makefile prints: </FONT><PRE class=example><FONT class=extract>          no default goal is set
          default goal is foo
          default goal is bar
          foo
</FONT></PRE>
<P><FONT class=extract>Note that assigning more than one target name to <CODE>.DEFAULT_GOAL</CODE> is invalid and will result in an error. </FONT>
<P><A name=index-MAKE_005fRESTARTS-_0040r_007b_0028number-of-times-_0040code_007bmake_007d-has-restarted_0029_007d-554><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>MAKE_RESTARTS</CODE> </FONT>
<DD><FONT class=extract>This variable is set only if this instance of <CODE>make</CODE> has restarted (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>): it will contain the number of times this instance has restarted. Note this is not the same as recursion (counted by the <CODE>MAKELEVEL</CODE> variable). You should not set, modify, or export this variable. </FONT>
<P><A name=index-g_t_002eRECIPEPREFIX-_0040r_007b_0028change-the-recipe-prefix-character_0029_007d-555></A><BR></P>
<DT><FONT class=extract><CODE>.RECIPEPREFIX</CODE> </FONT>
<DD><FONT class=extract>The first character of the value of this variable is used as the character make assumes is introducing a recipe line. If the variable is empty (as it is by default) that character is the standard tab character. For example, this is a valid makefile: </FONT><PRE class=example><FONT class=extract>          .RECIPEPREFIX = &gt;
          all:
          &gt; @echo Hello, world
</FONT></PRE>
<P><FONT class=extract>The value of <CODE>.RECIPEPREFIX</CODE> can be changed multiple times; once set it stays in effect for all rules parsed until it is modified. </FONT>
<P><A name=index-g_t_002eVARIABLES-_0040r_007b_0028list-of-variables_0029_007d-556><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.VARIABLES</CODE> </FONT>
<DD><FONT class=extract>Expands to a list of the <EM>names</EM> of all global variables defined so far. This includes variables which have empty values, as well as built-in variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>), but does not include any variables which are only defined in a target-specific context. Note that any value you assign to this variable will be ignored; it will always return its special value. <!-- @vindex .TARGETS @r{(list of targets)} --><!-- @item .TARGETS --><!-- The second special variable is @code{.TARGETS}.  When expanded, the --><!-- value consists of a list of all targets defined in all makefiles read --><!-- up until that point.  Note it's not enough for a file to be simply --><!-- mentioned in the makefile to be listed in this variable, even if it --><!-- would match an implicit rule and become an ``implicit target''.  The --><!-- file must appear as a target, on the left-hand side of a ``:'', to be --><!-- considered a target for the purposes of this variable. --></FONT>
<P><A name=index-g_t_002eFEATURES-_0040r_007b_0028list-of-supported-features_0029_007d-557></A><BR></P>
<DT><FONT class=extract><CODE>.FEATURES</CODE> </FONT>
<DD><FONT class=extract>Expands to a list of special features supported by this version of <CODE>make</CODE>. Possible values include, but are not limited to: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>archives</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports <CODE>ar</CODE> (archive) files using special file name syntax. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Using <CODE>make</CODE> to Update Archive Files</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>check-symlink</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports the <CODE>-L</CODE> (<CODE>--check-symlink-times</CODE>) flag. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>else-if</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports &#8220;else if&#8221; non-nested conditionals. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax"><FONT class=extract>Syntax of Conditionals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>jobserver</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports &#8220;job server&#8221; enhanced parallel builds. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>oneshell</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports the <CODE>.ONESHELL</CODE> special target. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#One-Shell"><FONT class=extract>Using One Shell</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>order-only</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports order-only prerequisites. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types"><FONT class=extract>Types of Prerequisites</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>second-expansion</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports secondary expansion of prerequisite lists. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>shortest-stem</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Uses the &#8220;shortest stem&#8221; method of choosing which pattern, of multiple applicable options, will be used. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>target-specific</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports target-specific and pattern-specific variable assignments. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific"><FONT class=extract>Target-specific Variable Values</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>undefine</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports the <CODE>undefine</CODE> directive. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive"><FONT class=extract>Undefine Directive</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>guile</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Has GNU Guile available as an embedded extension language. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration"><FONT class=extract>GNU Guile Integration</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>load</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Supports dynamically loadable objects for creating custom extensions. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects"><FONT class=extract>Loading Dynamic Objects</FONT></A><FONT class=extract>. </FONT></DD></DL>
<P><A name=index-g_t_002eINCLUDE_005fDIRS-_0040r_007b_0028list-of-include-directories_0029_007d-558><FONT class=extract></FONT></A><BR></P>
<DT><FONT class=extract><CODE>.INCLUDE_DIRS</CODE> </FONT>
<DD><FONT class=extract>Expands to a list of directories that <CODE>make</CODE> searches for included makefiles (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>). </FONT></DD></DL>
<DIV class=node><A name=Conditionals></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=next>Functions</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Using-Variables" rel=previous>Using Variables</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>7 Conditional Parts of Makefiles</FONT></H2>
<P><A name=index-conditionals-559></A><FONT class=extract>A <DFN>conditional</DFN> directive causes part of a makefile to be obeyed or ignored depending on the values of variables. Conditionals can compare the value of one variable to another, or the value of a variable to a constant string. Conditionals control what <CODE>make</CODE> actually &#8220;sees&#8221; in the makefile, so they <EM>cannot</EM> be used to control recipes at the time of execution. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Conditional-Example"><FONT class=extract>Conditional Example</FONT></A><FONT class=extract>: Example of a conditional </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax"><FONT class=extract>Conditional Syntax</FONT></A><FONT class=extract>: The syntax of conditionals. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags"><FONT class=extract>Testing Flags</FONT></A><FONT class=extract>: Conditionals that test flags. </FONT></LI></UL>
<DIV class=node><A name=Conditional-Example></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax" rel=next><FONT class=extract>Conditional Syntax</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=previous><FONT class=extract>Conditionals</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=up><FONT class=extract>Conditionals</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>7.1 Example of a Conditional</FONT></H3>
<P><FONT class=extract>The following example of a conditional tells <CODE>make</CODE> to use one set of libraries if the <CODE>CC</CODE> variable is &#8216;<SAMP><SPAN class=samp>gcc</SPAN></SAMP>&#8217;, and a different set of libraries otherwise. It works by controlling which of two recipe lines will be used for the rule. The result is that &#8216;<SAMP><SPAN class=samp>CC=gcc</SPAN></SAMP>&#8217; as an argument to <CODE>make</CODE> changes not only which compiler is used but also which libraries are linked. </FONT><PRE class=example><FONT class=extract>     libs_for_gcc = -lgnu
     normal_libs =
     
     foo: $(objects)
     ifeq ($(CC),gcc)
             $(CC) -o foo $(objects) $(libs_for_gcc)
     else
             $(CC) -o foo $(objects) $(normal_libs)
     endif
</FONT></PRE>
<P><FONT class=extract>This conditional uses three directives: one <CODE>ifeq</CODE>, one <CODE>else</CODE> and one <CODE>endif</CODE>. </FONT>
<P><FONT class=extract>The <CODE>ifeq</CODE> directive begins the conditional, and specifies the condition. It contains two arguments, separated by a comma and surrounded by parentheses. Variable substitution is performed on both arguments and then they are compared. The lines of the makefile following the <CODE>ifeq</CODE> are obeyed if the two arguments match; otherwise they are ignored. </FONT>
<P><FONT class=extract>The <CODE>else</CODE> directive causes the following lines to be obeyed if the previous conditional failed. In the example above, this means that the second alternative linking command is used whenever the first alternative is not used. It is optional to have an <CODE>else</CODE> in a conditional. </FONT>
<P><FONT class=extract>The <CODE>endif</CODE> directive ends the conditional. Every conditional must end with an <CODE>endif</CODE>. Unconditional makefile text follows. </FONT>
<P><FONT class=extract>As this example illustrates, conditionals work at the textual level: the lines of the conditional are treated as part of the makefile, or ignored, according to the condition. This is why the larger syntactic units of the makefile, such as rules, may cross the beginning or the end of the conditional. </FONT>
<P><FONT class=extract>When the variable <CODE>CC</CODE> has the value &#8216;<SAMP><SPAN class=samp>gcc</SPAN></SAMP>&#8217;, the above example has this effect: </FONT><PRE class=example><FONT class=extract>     foo: $(objects)
             $(CC) -o foo $(objects) $(libs_for_gcc)
</FONT></PRE>
<P class=noindent><FONT class=extract>When the variable <CODE>CC</CODE> has any other value, the effect is this: </FONT><PRE class=example><FONT class=extract>     foo: $(objects)
             $(CC) -o foo $(objects) $(normal_libs)
</FONT></PRE>
<P><FONT class=extract>Equivalent results can be obtained in another way by conditionalizing a variable assignment and then using the variable unconditionally: </FONT><PRE class=example><FONT class=extract>     libs_for_gcc = -lgnu
     normal_libs =
     
     ifeq ($(CC),gcc)
       libs=$(libs_for_gcc)
     else
       libs=$(normal_libs)
     endif
     
     foo: $(objects)
             $(CC) -o foo $(objects) $(libs)
</FONT></PRE>
<DIV class=node><A name=Conditional-Syntax></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags" rel=next><FONT class=extract>Testing Flags</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Conditional-Example" rel=previous><FONT class=extract>Conditional Example</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=up><FONT class=extract>Conditionals</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>7.2 Syntax of Conditionals</FONT></H3>
<P><A name=index-ifdef-560></A><A name=index-ifeq-561></A><A name=index-ifndef-562></A><A name=index-ifneq-563></A><A name=index-else-564></A><A name=index-endif-565></A><FONT class=extract>The syntax of a simple conditional with no <CODE>else</CODE> is as follows: </FONT><PRE class=example><FONT class=extract>     <VAR>conditional-directive</VAR>
     <VAR>text-if-true</VAR>
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>The <VAR>text-if-true</VAR> may be any lines of text, to be considered as part of the makefile if the condition is true. If the condition is false, no text is used instead. </FONT>
<P><FONT class=extract>The syntax of a complex conditional is as follows: </FONT><PRE class=example><FONT class=extract>     <VAR>conditional-directive</VAR>
     <VAR>text-if-true</VAR>
     else
     <VAR>text-if-false</VAR>
     endif
</FONT></PRE>
<P><FONT class=extract>or: </FONT><PRE class=example><FONT class=extract>     <VAR>conditional-directive-one</VAR>
     <VAR>text-if-one-is-true</VAR>
     else <VAR>conditional-directive-two</VAR>
     <VAR>text-if-two-is-true</VAR>
     else
     <VAR>text-if-one-and-two-are-false</VAR>
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>There can be as many &#8220;<CODE>else</CODE> <VAR>conditional-directive</VAR>&#8221; clauses as necessary. Once a given condition is true, <VAR>text-if-true</VAR> is used and no other clause is used; if no condition is true then <VAR>text-if-false</VAR> is used. The <VAR>text-if-true</VAR> and <VAR>text-if-false</VAR> can be any number of lines of text. </FONT>
<P><FONT class=extract>The syntax of the <VAR>conditional-directive</VAR> is the same whether the conditional is simple or complex; after an <CODE>else</CODE> or not. There are four different directives that test different conditions. Here is a table of them: </FONT>
<DL>
<DT><FONT class=extract><CODE>ifeq (</CODE><VAR>arg1</VAR><CODE>, </CODE><VAR>arg2</VAR><CODE>)</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq '</CODE><VAR>arg1</VAR><CODE>' '</CODE><VAR>arg2</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq "</CODE><VAR>arg1</VAR><CODE>" "</CODE><VAR>arg2</VAR><CODE>"</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq "</CODE><VAR>arg1</VAR><CODE>" '</CODE><VAR>arg2</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq '</CODE><VAR>arg1</VAR><CODE>' "</CODE><VAR>arg2</VAR><CODE>"</CODE> </FONT>
<DD><FONT class=extract>Expand all variable references in <VAR>arg1</VAR> and <VAR>arg2</VAR> and compare them. If they are identical, the <VAR>text-if-true</VAR> is effective; otherwise, the <VAR>text-if-false</VAR>, if any, is effective. </FONT>
<P><FONT class=extract>Often you want to test if a variable has a non-empty value. When the value results from complex expansions of variables and functions, expansions you would consider empty may actually contain whitespace characters and thus are not seen as empty. However, you can use the <CODE>strip</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Text Functions</FONT></A><FONT class=extract>) to avoid interpreting whitespace as a non-empty value. For example: </FONT><PRE class=example><FONT class=extract>          ifeq ($(strip $(foo)),)
          <VAR>text-if-empty</VAR>
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>will evaluate <VAR>text-if-empty</VAR> even if the expansion of <CODE>$(foo)</CODE> contains whitespace characters. <BR></FONT></P>
<DT><FONT class=extract><CODE>ifneq (</CODE><VAR>arg1</VAR><CODE>, </CODE><VAR>arg2</VAR><CODE>)</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq '</CODE><VAR>arg1</VAR><CODE>' '</CODE><VAR>arg2</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq "</CODE><VAR>arg1</VAR><CODE>" "</CODE><VAR>arg2</VAR><CODE>"</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq "</CODE><VAR>arg1</VAR><CODE>" '</CODE><VAR>arg2</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq '</CODE><VAR>arg1</VAR><CODE>' "</CODE><VAR>arg2</VAR><CODE>"</CODE> </FONT>
<DD><FONT class=extract>Expand all variable references in <VAR>arg1</VAR> and <VAR>arg2</VAR> and compare them. If they are different, the <VAR>text-if-true</VAR> is effective; otherwise, the <VAR>text-if-false</VAR>, if any, is effective. <BR></FONT>
<DT><FONT class=extract><CODE>ifdef </CODE><VAR>variable-name</VAR> </FONT>
<DD><FONT class=extract>The <CODE>ifdef</CODE> form takes the <EM>name</EM> of a variable as its argument, not a reference to a variable. The value of that variable has a non-empty value, the <VAR>text-if-true</VAR> is effective; otherwise, the <VAR>text-if-false</VAR>, if any, is effective. Variables that have never been defined have an empty value. The text <VAR>variable-name</VAR> is expanded, so it could be a variable or function that expands to the name of a variable. For example: </FONT><PRE class=example><FONT class=extract>          bar = true
          foo = bar
          ifdef $(foo)
          frobozz = yes
          endif
</FONT></PRE>
<P><FONT class=extract>The variable reference <CODE>$(foo)</CODE> is expanded, yielding <CODE>bar</CODE>, which is considered to be the name of a variable. The variable <CODE>bar</CODE> is not expanded, but its value is examined to determine if it is non-empty. </FONT>
<P><FONT class=extract>Note that <CODE>ifdef</CODE> only tests whether a variable has a value. It does not expand the variable to see if that value is nonempty. Consequently, tests using <CODE>ifdef</CODE> return true for all definitions except those like <CODE>foo =</CODE>. To test for an empty value, use <CODE>ifeq&nbsp;($(foo),)</CODE><!-- /@w -->. For example, </FONT><PRE class=example><FONT class=extract>          bar =
          foo = $(bar)
          ifdef foo
          frobozz = yes
          else
          frobozz = no
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>frobozz</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>yes</SPAN></SAMP>&#8217;, while: </FONT><PRE class=example><FONT class=extract>          foo =
          ifdef foo
          frobozz = yes
          else
          frobozz = no
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>frobozz</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>no</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>ifndef </CODE><VAR>variable-name</VAR> </FONT>
<DD><FONT class=extract>If the variable <VAR>variable-name</VAR> has an empty value, the <VAR>text-if-true</VAR> is effective; otherwise, the <VAR>text-if-false</VAR>, if any, is effective. The rules for expansion and testing of <VAR>variable-name</VAR> are identical to the <CODE>ifdef</CODE> directive. </FONT></DD></DL>
<P><FONT class=extract>Extra spaces are allowed and ignored at the beginning of the conditional directive line, but a tab is not allowed. (If the line begins with a tab, it will be considered part of a recipe for a rule.) Aside from this, extra spaces or tabs may be inserted with no effect anywhere except within the directive name or within an argument. A comment starting with &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; may appear at the end of the line. </FONT>
<P><FONT class=extract>The other two directives that play a part in a conditional are <CODE>else</CODE> and <CODE>endif</CODE>. Each of these directives is written as one word, with no arguments. Extra spaces are allowed and ignored at the beginning of the line, and spaces or tabs at the end. A comment starting with &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; may appear at the end of the line. </FONT>
<P><FONT class=extract>Conditionals affect which lines of the makefile <CODE>make</CODE> uses. If the condition is true, <CODE>make</CODE> reads the lines of the <VAR>text-if-true</VAR> as part of the makefile; if the condition is false, <CODE>make</CODE> ignores those lines completely. It follows that syntactic units of the makefile, such as rules, may safely be split across the beginning or the end of the conditional. </FONT>
<P><FONT class=extract><CODE>make</CODE> evaluates conditionals when it reads a makefile. Consequently, you cannot use automatic variables in the tests of conditionals because they are not defined until recipes are run (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>To prevent intolerable confusion, it is not permitted to start a conditional in one makefile and end it in another. However, you may write an <CODE>include</CODE> directive within a conditional, provided you do not attempt to terminate the conditional inside the included file. </FONT>
<DIV class=node><A name=Testing-Flags></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax" rel=previous><FONT class=extract>Conditional Syntax</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=up><FONT class=extract>Conditionals</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>7.3 Conditionals that Test Flags</FONT></H3>
<P><FONT class=extract>You can write a conditional that tests <CODE>make</CODE> command flags such as &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; by using the variable <CODE>MAKEFLAGS</CODE> together with the <CODE>findstring</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>). This is useful when <CODE>touch</CODE> is not enough to make a file appear up to date. </FONT>
<P><FONT class=extract>The <CODE>findstring</CODE> function determines whether one string appears as a substring of another. If you want to test for the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag, use &#8216;<SAMP><SPAN class=samp>t</SPAN></SAMP>&#8217; as the first string and the value of <CODE>MAKEFLAGS</CODE> as the other. </FONT>
<P><FONT class=extract>For example, here is how to arrange to use &#8216;<SAMP><SPAN class=samp>ranlib -t</SPAN></SAMP>&#8217; to finish marking an archive file up to date: </FONT><PRE class=example><FONT class=extract>     archive.a: ...
     ifneq (,$(findstring t,$(MAKEFLAGS)))
             +touch archive.a
             +ranlib -t archive.a
     else
             ranlib archive.a
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; prefix marks those recipe lines as &#8220;recursive&#8221; so that they will be executed despite use of the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>.</FONT> 
<DIV class=node><A name=Functions></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Running" rel=next>Running</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Conditionals" rel=previous>Conditionals</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>8 Functions for Transforming Text</FONT></H2>
<P><A name=index-functions-566></A><FONT class=extract><DFN>Functions</DFN> allow you to do text processing in the makefile to compute the files to operate on or the commands to use in recipes. You use a function in a <DFN>function call</DFN>, where you give the name of the function and some text (the <DFN>arguments</DFN>) for the function to operate on. The result of the function's processing is substituted into the makefile at the point of the call, just as a variable might be substituted. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions"><FONT class=extract>Syntax of Functions</FONT></A><FONT class=extract>: How to write a function call. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Text Functions</FONT></A><FONT class=extract>: General-purpose text manipulation functions. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>File Name Functions</FONT></A><FONT class=extract>: Functions for manipulating file names. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions"><FONT class=extract>Conditional Functions</FONT></A><FONT class=extract>: Functions that implement conditions. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function"><FONT class=extract>Foreach Function</FONT></A><FONT class=extract>: Repeat some text with controlled variation. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#File-Function"><FONT class=extract>File Function</FONT></A><FONT class=extract>: Write text to a file. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Call-Function"><FONT class=extract>Call Function</FONT></A><FONT class=extract>: Expand a user-defined function. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Value-Function"><FONT class=extract>Value Function</FONT></A><FONT class=extract>: Return the un-expanded value of a variable. </FONT>
<LI><A accessKey=9 href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>: Evaluate the arguments as makefile syntax. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function"><FONT class=extract>Origin Function</FONT></A><FONT class=extract>: Find where a variable got its value. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function"><FONT class=extract>Flavor Function</FONT></A><FONT class=extract>: Find out the flavor of a variable. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions"><FONT class=extract>Make Control Functions</FONT></A><FONT class=extract>: Functions that control how make runs. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function"><FONT class=extract>Shell Function</FONT></A><FONT class=extract>: Substitute the output of a shell command. </FONT>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function"><FONT class=extract>Guile Function</FONT></A><FONT class=extract>: Use GNU Guile embedded scripting language. </FONT></LI></UL>
<DIV class=node><A name=Syntax-of-Functions></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Text-Functions" rel=next><FONT class=extract>Text Functions</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=previous><FONT class=extract>Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.1 Function Call Syntax</FONT></H3>
<P><A name=index-g_t_0040code_007b_0024_007d_002c-in-function-call-567></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-function-call-568></A><A name=index-arguments-of-functions-569></A><A name=index-functions_002c-syntax-of-570></A><FONT class=extract>A function call resembles a variable reference. It can appear anywhere a variable reference can appear, and it is expanded using the same rules as variable references. A function call looks like this: </FONT><PRE class=example><FONT class=extract>     $(<VAR>function</VAR> <VAR>arguments</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>or like this: </FONT><PRE class=example><FONT class=extract>     ${<VAR>function</VAR> <VAR>arguments</VAR>}
</FONT></PRE>
<P><FONT class=extract>Here <VAR>function</VAR> is a function name; one of a short list of names that are part of <CODE>make</CODE>. You can also essentially create your own functions by using the <CODE>call</CODE> built-in function. </FONT>
<P><FONT class=extract>The <VAR>arguments</VAR> are the arguments of the function. They are separated from the function name by one or more spaces or tabs, and if there is more than one argument, then they are separated by commas. Such whitespace and commas are not part of an argument's value. The delimiters which you use to surround the function call, whether parentheses or braces, can appear in an argument only in matching pairs; the other kind of delimiters may appear singly. If the arguments themselves contain other function calls or variable references, it is wisest to use the same kind of delimiters for all the references; write &#8216;<SAMP><SPAN class=samp>$(subst&nbsp;a,b,$(x))</SPAN></SAMP>&#8217;<!-- /@w -->, not &#8216;<SAMP><SPAN class=samp>$(subst&nbsp;a,b,${x})</SPAN></SAMP>&#8217;<!-- /@w -->. This is because it is clearer, and because only one type of delimiter is matched to find the end of the reference. </FONT>
<P><FONT class=extract>The text written for each argument is processed by substitution of variables and function calls to produce the argument value, which is the text on which the function acts. The substitution is done in the order in which the arguments appear. </FONT>
<P><FONT class=extract>Commas and unmatched parentheses or braces cannot appear in the text of an argument as written; leading spaces cannot appear in the text of the first argument as written. These characters can be put into the argument value by variable substitution. First define variables <CODE>comma</CODE> and <CODE>space</CODE> whose values are isolated comma and space characters, then substitute these variables where such characters are wanted, like this: </FONT><PRE class=example><FONT class=extract>     comma:= ,
     empty:=
     space:= $(empty) $(empty)
     foo:= a b c
     bar:= $(subst $(space),$(comma),$(foo))
     # <SPAN class=roman><FONT face="Times New Roman">bar is now `a,b,c'.</FONT></SPAN>
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the <CODE>subst</CODE> function replaces each space with a comma, through the value of <CODE>foo</CODE>, and substitutes the result. </FONT>
<DIV class=node><A name=Text-Functions></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions" rel=next><FONT class=extract>File Name Functions</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions" rel=previous><FONT class=extract>Syntax of Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.2 Functions for String Substitution and Analysis</FONT></H3>
<P><A name=index-functions_002c-for-text-571></A><FONT class=extract>Here are some functions that operate on strings: </FONT>
<DL>
<DT><FONT class=extract><CODE>$(subst </CODE><VAR>from</VAR><CODE>,</CODE><VAR>to</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-subst-572></A><FONT class=extract>Performs a textual replacement on the text <VAR>text</VAR>: each occurrence of <VAR>from</VAR> is replaced by <VAR>to</VAR>. The result is substituted for the function call. For example, </FONT><PRE class=example><FONT class=extract>          $(subst ee,EE,feet on the street)
</FONT></PRE>
<P><FONT class=extract>substitutes the string &#8216;<SAMP><SPAN class=samp>fEEt on the strEEt</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(patsubst </CODE><VAR>pattern</VAR><CODE>,</CODE><VAR>replacement</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-patsubst-573></A><FONT class=extract>Finds whitespace-separated words in <VAR>text</VAR> that match <VAR>pattern</VAR> and replaces them with <VAR>replacement</VAR>. Here <VAR>pattern</VAR> may contain a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; which acts as a wildcard, matching any number of any characters within a word. If <VAR>replacement</VAR> also contains a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is replaced by the text that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in <VAR>pattern</VAR>. Only the first &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the <VAR>pattern</VAR> and <VAR>replacement</VAR> is treated this way; any subsequent &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is unchanged. </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bpatsubst_007d-574></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-575></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-576></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-577></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bpatsubst_007d-578></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in <CODE>patsubst</CODE> function invocations can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared file names or has a stem substituted into it. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. For example, the pattern <SAMP><SPAN class=file>the\%weird\\%pattern\\</SPAN></SAMP> has &#8216;<SAMP><SPAN class=samp>the%weird\</SPAN></SAMP>&#8217; preceding the operative &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character, and &#8216;<SAMP><SPAN class=samp>pattern\\</SPAN></SAMP>&#8217; following it. The final two backslashes are left alone because they cannot affect any &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. </FONT>
<P><FONT class=extract>Whitespace between words is folded into single space characters; leading and trailing whitespace is discarded. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(patsubst %.c,%.o,x.c.c bar.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the value &#8216;<SAMP><SPAN class=samp>x.c.o bar.o</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Substitution references (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs"><FONT class=extract>Substitution References</FONT></A><FONT class=extract>) are a simpler way to get the effect of the <CODE>patsubst</CODE> function: </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>pattern</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst <VAR>pattern</VAR>,<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P><FONT class=extract>The second shorthand simplifies one of the most common uses of <CODE>patsubst</CODE>: replacing the suffix at the end of file names. </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>suffix</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst %<VAR>suffix</VAR>,%<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P class=noindent><FONT class=extract>For example, you might have a list of object files: </FONT><PRE class=example><FONT class=extract>          objects = foo.o bar.o baz.o
</FONT></PRE>
<P class=noindent><FONT class=extract>To get the list of corresponding source files, you could simply write: </FONT><PRE class=example><FONT class=extract>          $(objects:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>instead of using the general form: </FONT><PRE class=example><FONT class=extract>          $(patsubst %.o,%.c,$(objects))
</FONT></PRE><BR>
<DT><FONT class=extract><CODE>$(strip </CODE><VAR>string</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-stripping-whitespace-579></A><A name=index-whitespace_002c-stripping-580></A><A name=index-spaces_002c-stripping-581></A><A name=index-strip-582></A><FONT class=extract>Removes leading and trailing whitespace from <VAR>string</VAR> and replaces each internal sequence of one or more whitespace characters with a single space. Thus, &#8216;<SAMP><SPAN class=samp>$(strip a b c )</SPAN></SAMP>&#8217; results in &#8216;<SAMP><SPAN class=samp>a&nbsp;b&nbsp;c</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>The function <CODE>strip</CODE> can be very useful when used in conjunction with conditionals. When comparing something with the empty string &#8216;<SAMP></SAMP>&#8217; using <CODE>ifeq</CODE> or <CODE>ifneq</CODE>, you usually want a string of just whitespace to match the empty string (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditionals</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Thus, the following may fail to have the desired results: </FONT><PRE class=example><FONT class=extract>          .PHONY: all
          ifneq   "$(needs_made)" ""
          all: $(needs_made)
          else
          all:;@echo 'Nothing to make!'
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>Replacing the variable reference &#8216;<SAMP><SPAN class=samp>$(needs_made)</SPAN></SAMP>&#8217;<!-- /@w --> with the function call &#8216;<SAMP><SPAN class=samp>$(strip&nbsp;$(needs_made))</SPAN></SAMP>&#8217;<!-- /@w --> in the <CODE>ifneq</CODE> directive would make it more robust. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(findstring </CODE><VAR>find</VAR><CODE>,</CODE><VAR>in</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-findstring-583></A><A name=index-searching-for-strings-584></A><A name=index-finding-strings-585></A><A name=index-strings_002c-searching-for-586></A><FONT class=extract>Searches <VAR>in</VAR> for an occurrence of <VAR>find</VAR>. If it occurs, the value is <VAR>find</VAR>; otherwise, the value is empty. You can use this function in a conditional to test for the presence of a specific substring in a given string. Thus, the two examples, </FONT><PRE class=example><FONT class=extract>          $(findstring a,a b c)
          $(findstring a,b c)
</FONT></PRE>
<P class=noindent><FONT class=extract>produce the values &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; and &#8216;<SAMP></SAMP>&#8217; (the empty string), respectively. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags"><FONT class=extract>Testing Flags</FONT></A><FONT class=extract>, for a practical application of <CODE>findstring</CODE>. </FONT>
<P><A name=index-filter-587><FONT class=extract></FONT></A><A name=index-filtering-words-588></A><A name=index-words_002c-filtering-589></A><BR></P>
<DT><FONT class=extract><CODE>$(filter </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Returns all whitespace-separated words in <VAR>text</VAR> that <EM>do</EM> match any of the <VAR>pattern</VAR> words, removing any words that <EM>do not</EM> match. The patterns are written using &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, just like the patterns used in the <CODE>patsubst</CODE> function above. </FONT>
<P><FONT class=extract>The <CODE>filter</CODE> function can be used to separate out different types of strings (such as file names) in a variable. For example: </FONT><PRE class=example><FONT class=extract>          sources := foo.c bar.c baz.s ugh.h
          foo: $(sources)
                  cc $(filter %.c %.s,$(sources)) -o foo
</FONT></PRE>
<P class=noindent><FONT class=extract>says that <SAMP><SPAN class=file>foo</SPAN></SAMP> depends of <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <SAMP><SPAN class=file>bar.c</SPAN></SAMP>, <SAMP><SPAN class=file>baz.s</SPAN></SAMP> and <SAMP><SPAN class=file>ugh.h</SPAN></SAMP> but only <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <SAMP><SPAN class=file>bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>baz.s</SPAN></SAMP> should be specified in the command to the compiler. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(filter-out </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-filter_002dout-590></A><A name=index-filtering-out-words-591></A><A name=index-words_002c-filtering-out-592></A><FONT class=extract>Returns all whitespace-separated words in <VAR>text</VAR> that <EM>do not</EM> match any of the <VAR>pattern</VAR> words, removing the words that <EM>do</EM> match one or more. This is the exact opposite of the <CODE>filter</CODE> function. </FONT>
<P><FONT class=extract>For example, given: </FONT><PRE class=example><FONT class=extract>          objects=main1.o foo.o main2.o bar.o
          mains=main1.o main2.o
</FONT></PRE>
<P class=noindent><FONT class=extract>the following generates a list which contains all the object files not in &#8216;<SAMP><SPAN class=samp>mains</SPAN></SAMP>&#8217;: </FONT><PRE class=example><FONT class=extract>          $(filter-out $(mains),$(objects))
</FONT></PRE>
<P><A name=index-sort-593><FONT class=extract></FONT></A><A name=index-sorting-words-594></A><BR></P>
<DT><FONT class=extract><CODE>$(sort </CODE><VAR>list</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Sorts the words of <VAR>list</VAR> in lexical order, removing duplicate words. The output is a list of words separated by single spaces. Thus, </FONT><PRE class=example><FONT class=extract>          $(sort foo bar lose)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns the value &#8216;<SAMP><SPAN class=samp>bar foo lose</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-removing-duplicate-words-595></A><A name=index-duplicate-words_002c-removing-596></A><A name=index-words_002c-removing-duplicates-597></A><FONT class=extract>Incidentally, since <CODE>sort</CODE> removes duplicate words, you can use it for this purpose even if you don't care about the sort order. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(word </CODE><VAR>n</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-word-598></A><A name=index-word_002c-selecting-a-599></A><A name=index-selecting-a-word-600></A><FONT class=extract>Returns the <VAR>n</VAR>th word of <VAR>text</VAR>. The legitimate values of <VAR>n</VAR> start from 1. If <VAR>n</VAR> is bigger than the number of words in <VAR>text</VAR>, the value is empty. For example, </FONT><PRE class=example><FONT class=extract>          $(word 2, foo bar baz)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(wordlist </CODE><VAR>s</VAR><CODE>,</CODE><VAR>e</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-wordlist-601></A><A name=index-words_002c-selecting-lists-of-602></A><A name=index-selecting-word-lists-603></A><FONT class=extract>Returns the list of words in <VAR>text</VAR> starting with word <VAR>s</VAR> and ending with word <VAR>e</VAR> (inclusive). The legitimate values of <VAR>s</VAR> start from 1; <VAR>e</VAR> may start from 0. If <VAR>s</VAR> is bigger than the number of words in <VAR>text</VAR>, the value is empty. If <VAR>e</VAR> is bigger than the number of words in <VAR>text</VAR>, words up to the end of <VAR>text</VAR> are returned. If <VAR>s</VAR> is greater than <VAR>e</VAR>, nothing is returned. For example, </FONT><PRE class=example><FONT class=extract>          $(wordlist 2, 3, foo bar baz)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns &#8216;<SAMP><SPAN class=samp>bar baz</SPAN></SAMP>&#8217;. <!-- Following item phrased to prevent overfull hbox.  -RJC 17 Jul 92 --><BR></FONT></P>
<DT><FONT class=extract><CODE>$(words </CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-words-604></A><A name=index-words_002c-finding-number-605></A><FONT class=extract>Returns the number of words in <VAR>text</VAR>. Thus, the last word of <VAR>text</VAR> is <CODE>$(word&nbsp;$(words&nbsp;</CODE><VAR>text</VAR><CODE>),</CODE><VAR>text</VAR><CODE>)</CODE><!-- /@w -->. <BR></FONT>
<DT><FONT class=extract><CODE>$(firstword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-firstword-606></A><A name=index-words_002c-extracting-first-607></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace. The value is the first name in the series. The rest of the names are ignored. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(firstword foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;. Although <CODE>$(firstword </CODE><VAR>text</VAR><CODE>)</CODE> is the same as <CODE>$(word 1,</CODE><VAR>text</VAR><CODE>)</CODE>, the <CODE>firstword</CODE> function is retained for its simplicity. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(lastword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-lastword-608></A><A name=index-words_002c-extracting-last-609></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace. The value is the last name in the series. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(lastword foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;. Although <CODE>$(lastword </CODE><VAR>text</VAR><CODE>)</CODE> is the same as <CODE>$(word $(words </CODE><VAR>text</VAR><CODE>),</CODE><VAR>text</VAR><CODE>)</CODE>, the <CODE>lastword</CODE> function was added for its simplicity and better performance. </FONT></P></DD></DL>
<P><FONT class=extract>Here is a realistic example of the use of <CODE>subst</CODE> and <CODE>patsubst</CODE>. Suppose that a makefile uses the <CODE>VPATH</CODE> variable to specify a list of directories that <CODE>make</CODE> should search for prerequisite files (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#General-Search"><FONT class=extract><CODE>VPATH</CODE> Search Path for All Prerequisites</FONT></A><FONT class=extract>). This example shows how to tell the C compiler to search for header files in the same list of directories. </FONT>
<P><FONT class=extract>The value of <CODE>VPATH</CODE> is a list of directories separated by colons, such as &#8216;<SAMP><SPAN class=samp>src:../headers</SPAN></SAMP>&#8217;. First, the <CODE>subst</CODE> function is used to change the colons to spaces: </FONT><PRE class=example><FONT class=extract>     $(subst :, ,$(VPATH))
</FONT></PRE>
<P class=noindent><FONT class=extract>This produces &#8216;<SAMP><SPAN class=samp>src ../headers</SPAN></SAMP>&#8217;. Then <CODE>patsubst</CODE> is used to turn each directory name into a &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; flag. These can be added to the value of the variable <CODE>CFLAGS</CODE>, which is passed automatically to the C compiler, like this: </FONT><PRE class=example><FONT class=extract>     override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
</FONT></PRE>
<P class=noindent><FONT class=extract>The effect is to append the text &#8216;<SAMP><SPAN class=samp>-Isrc -I../headers</SPAN></SAMP>&#8217; to the previously given value of <CODE>CFLAGS</CODE>. The <CODE>override</CODE> directive is used so that the new value is assigned even if the previous value of <CODE>CFLAGS</CODE> was specified with a command argument (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=File-Name-Functions></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions" rel=next><FONT class=extract>Conditional Functions</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Text-Functions" rel=previous><FONT class=extract>Text Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.3 Functions for File Names</FONT></H3>
<P><A name=index-functions_002c-for-file-names-610></A><A name=index-file-name-functions-611></A><FONT class=extract>Several of the built-in expansion functions relate specifically to taking apart file names or lists of file names. </FONT>
<P><FONT class=extract>Each of the following functions performs a specific transformation on a file name. The argument of the function is regarded as a series of file names, separated by whitespace. (Leading and trailing whitespace is ignored.) Each file name in the series is transformed in the same way and the results are concatenated with single spaces between them. </FONT>
<DL>
<DT><FONT class=extract><CODE>$(dir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-dir-612></A><A name=index-directory-part-613></A><A name=index-file-name_002c-directory-part-614></A><FONT class=extract>Extracts the directory-part of each file name in <VAR>names</VAR>. The directory-part of the file name is everything up through (and including) the last slash in it. If the file name contains no slash, the directory part is the string &#8216;<SAMP><SPAN class=samp>./</SPAN></SAMP>&#8217;. For example, </FONT><PRE class=example><FONT class=extract>          $(dir src/foo.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/ ./</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(notdir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-notdir-615></A><A name=index-file-name_002c-nondirectory-part-616></A><A name=index-nondirectory-part-617></A><FONT class=extract>Extracts all but the directory-part of each file name in <VAR>names</VAR>. If the file name contains no slash, it is left unchanged. Otherwise, everything through the last slash is removed from it. </FONT>
<P><FONT class=extract>A file name that ends with a slash becomes an empty string. This is unfortunate, because it means that the result does not always have the same number of whitespace-separated file names as the argument had; but we do not see any other valid alternative. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(notdir src/foo.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo.c hacks</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(suffix </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-suffix-618></A><A name=index-suffix_002c-function-to-find-619></A><A name=index-file-name-suffix-620></A><FONT class=extract>Extracts the suffix of each file name in <VAR>names</VAR>. If the file name contains a period, the suffix is everything starting with the last period. Otherwise, the suffix is the empty string. This frequently means that the result will be empty when <VAR>names</VAR> is not, and if <VAR>names</VAR> contains multiple file names, the result may contain fewer file names. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(suffix src/foo.c src-1.0/bar.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>.c .c</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(basename </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-basename-621></A><A name=index-basename-622></A><A name=index-file-name_002c-basename-of-623></A><FONT class=extract>Extracts all but the suffix of each file name in <VAR>names</VAR>. If the file name contains a period, the basename is everything starting up to (and not including) the last period. Periods in the directory part are ignored. If there is no period, the basename is the entire file name. For example, </FONT><PRE class=example><FONT class=extract>          $(basename src/foo.c src-1.0/bar hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/foo src-1.0/bar hacks</SPAN></SAMP>&#8217;. <!-- plural convention with dots (be consistent) --><BR></FONT></P>
<DT><FONT class=extract><CODE>$(addsuffix </CODE><VAR>suffix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-addsuffix-624></A><A name=index-suffix_002c-adding-625></A><A name=index-file-name-suffix_002c-adding-626></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace; <VAR>suffix</VAR> is used as a unit. The value of <VAR>suffix</VAR> is appended to the end of each individual name and the resulting larger names are concatenated with single spaces between them. For example, </FONT><PRE class=example><FONT class=extract>          $(addsuffix .c,foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo.c bar.c</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(addprefix </CODE><VAR>prefix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-addprefix-627></A><A name=index-prefix_002c-adding-628></A><A name=index-file-name-prefix_002c-adding-629></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace; <VAR>prefix</VAR> is used as a unit. The value of <VAR>prefix</VAR> is prepended to the front of each individual name and the resulting larger names are concatenated with single spaces between them. For example, </FONT><PRE class=example><FONT class=extract>          $(addprefix src/,foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/foo src/bar</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(join </CODE><VAR>list1</VAR><CODE>,</CODE><VAR>list2</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-join-630></A><A name=index-joining-lists-of-words-631></A><A name=index-words_002c-joining-lists-632></A><FONT class=extract>Concatenates the two arguments word by word: the two first words (one from each argument) concatenated form the first word of the result, the two second words form the second word of the result, and so on. So the <VAR>n</VAR>th word of the result comes from the <VAR>n</VAR>th word of each argument. If one argument has more words that the other, the extra words are copied unchanged into the result. </FONT>
<P><FONT class=extract>For example, &#8216;<SAMP><SPAN class=samp>$(join a b,.c .o)</SPAN></SAMP>&#8217; produces &#8216;<SAMP><SPAN class=samp>a.c b.o</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Whitespace between the words in the lists is not preserved; it is replaced with a single space. </FONT>
<P><FONT class=extract>This function can merge the results of the <CODE>dir</CODE> and <CODE>notdir</CODE> functions, to produce the original list of files which was given to those two functions. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(wildcard </CODE><VAR>pattern</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-wildcard-633></A><A name=index-wildcard_002c-function-634></A><FONT class=extract>The argument <VAR>pattern</VAR> is a file name pattern, typically containing wildcard characters (as in shell file name patterns). The result of <CODE>wildcard</CODE> is a space-separated list of the names of existing files that match the pattern. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(realpath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-realpath-635></A><A name=index-realpath-636></A><A name=index-file-name_002c-realpath-of-637></A><FONT class=extract>For each file name in <VAR>names</VAR> return the canonical absolute name. A canonical name does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, nor any repeated path separators (<CODE>/</CODE>) or symlinks. In case of a failure the empty string is returned. Consult the <CODE>realpath(3)</CODE> documentation for a list of possible failure causes. <BR></FONT>
<DT><FONT class=extract><CODE>$(abspath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-abspath-638></A><A name=index-abspath-639></A><A name=index-file-name_002c-abspath-of-640></A><FONT class=extract>For each file name in <VAR>names</VAR> return an absolute name that does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, nor any repeated path separators (<CODE>/</CODE>). Note that, in contrast to <CODE>realpath</CODE> function, <CODE>abspath</CODE> does not resolve symlinks and does not require the file names to refer to an existing file or directory. Use the <CODE>wildcard</CODE> function to test for existence. </FONT></DD></DL>
<DIV class=node><A name=Conditional-Functions></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function" rel=next><FONT class=extract>Foreach Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions" rel=previous><FONT class=extract>File Name Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.4 Functions for Conditionals</FONT></H3>
<P><A name=index-if-641></A><A name=index-conditional-expansion-642></A><FONT class=extract>There are three functions that provide conditional expansion. A key aspect of these functions is that not all of the arguments are expanded initially. Only those arguments which need to be expanded, will be expanded. </FONT>
<DL>
<DT><FONT class=extract><CODE>$(if </CODE><VAR>condition</VAR><CODE>,</CODE><VAR>then-part</VAR><CODE>[,</CODE><VAR>else-part</VAR><CODE>])</CODE> </FONT>
<DD><A name=index-if-643></A><FONT class=extract>The <CODE>if</CODE> function provides support for conditional expansion in a functional context (as opposed to the GNU <CODE>make</CODE> makefile conditionals such as <CODE>ifeq</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax"><FONT class=extract>Syntax of Conditionals</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The first argument, <VAR>condition</VAR>, first has all preceding and trailing whitespace stripped, then is expanded. If it expands to any non-empty string, then the condition is considered to be true. If it expands to an empty string, the condition is considered to be false. </FONT>
<P><FONT class=extract>If the condition is true then the second argument, <VAR>then-part</VAR>, is evaluated and this is used as the result of the evaluation of the entire <CODE>if</CODE> function. </FONT>
<P><FONT class=extract>If the condition is false then the third argument, <VAR>else-part</VAR>, is evaluated and this is the result of the <CODE>if</CODE> function. If there is no third argument, the <CODE>if</CODE> function evaluates to nothing (the empty string). </FONT>
<P><FONT class=extract>Note that only one of the <VAR>then-part</VAR> or the <VAR>else-part</VAR> will be evaluated, never both. Thus, either can contain side-effects (such as <CODE>shell</CODE> function calls, etc.) <BR></FONT></P>
<DT><FONT class=extract><CODE>$(or </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> </FONT>
<DD><A name=index-or-644></A><FONT class=extract>The <CODE>or</CODE> function provides a &#8220;short-circuiting&#8221; OR operation. Each argument is expanded, in order. If an argument expands to a non-empty string the processing stops and the result of the expansion is that string. If, after all arguments are expanded, all of them are false (empty), then the result of the expansion is the empty string. <BR></FONT>
<DT><FONT class=extract><CODE>$(and </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> </FONT>
<DD><A name=index-and-645></A><FONT class=extract>The <CODE>and</CODE> function provides a &#8220;short-circuiting&#8221; AND operation. Each argument is expanded, in order. If an argument expands to an empty string the processing stops and the result of the expansion is the empty string. If all arguments expand to a non-empty string then the result of the expansion is the expansion of the last argument. </FONT></DD></DL>
<DIV class=node><A name=Foreach-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#File-Function" rel=next><FONT class=extract>File Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions" rel=previous><FONT class=extract>Conditional Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.5 The <CODE>foreach</CODE> Function</FONT></H3>
<P><A name=index-foreach-646></A><A name=index-words_002c-iterating-over-647></A><FONT class=extract>The <CODE>foreach</CODE> function is very different from other functions. It causes one piece of text to be used repeatedly, each time with a different substitution performed on it. It resembles the <CODE>for</CODE> command in the shell <CODE>sh</CODE> and the <CODE>foreach</CODE> command in the C-shell <CODE>csh</CODE>. </FONT>
<P><FONT class=extract>The syntax of the <CODE>foreach</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(foreach <VAR>var</VAR>,<VAR>list</VAR>,<VAR>text</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>The first two arguments, <VAR>var</VAR> and <VAR>list</VAR>, are expanded before anything else is done; note that the last argument, <VAR>text</VAR>, is <STRONG>not</STRONG> expanded at the same time. Then for each word of the expanded value of <VAR>list</VAR>, the variable named by the expanded value of <VAR>var</VAR> is set to that word, and <VAR>text</VAR> is expanded. Presumably <VAR>text</VAR> contains references to that variable, so its expansion will be different each time. </FONT>
<P><FONT class=extract>The result is that <VAR>text</VAR> is expanded as many times as there are whitespace-separated words in <VAR>list</VAR>. The multiple expansions of <VAR>text</VAR> are concatenated, with spaces between them, to make the result of <CODE>foreach</CODE>. </FONT>
<P><FONT class=extract>This simple example sets the variable &#8216;<SAMP><SPAN class=samp>files</SPAN></SAMP>&#8217; to the list of all files in the directories in the list &#8216;<SAMP><SPAN class=samp>dirs</SPAN></SAMP>&#8217;: </FONT><PRE class=example><FONT class=extract>     dirs := a b c d
     files := $(foreach dir,$(dirs),$(wildcard $(dir)/*))
</FONT></PRE>
<P><FONT class=extract>Here <VAR>text</VAR> is &#8216;<SAMP><SPAN class=samp>$(wildcard $(dir)/*)</SPAN></SAMP>&#8217;. The first repetition finds the value &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; for <CODE>dir</CODE>, so it produces the same result as &#8216;<SAMP><SPAN class=samp>$(wildcard a/*)</SPAN></SAMP>&#8217;; the second repetition produces the result of &#8216;<SAMP><SPAN class=samp>$(wildcard b/*)</SPAN></SAMP>&#8217;; and the third, that of &#8216;<SAMP><SPAN class=samp>$(wildcard c/*)</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>This example has the same result (except for setting &#8216;<SAMP><SPAN class=samp>dirs</SPAN></SAMP>&#8217;) as the following example: </FONT><PRE class=example><FONT class=extract>     files := $(wildcard a/* b/* c/* d/*)
</FONT></PRE>
<P><FONT class=extract>When <VAR>text</VAR> is complicated, you can improve readability by giving it a name, with an additional variable: </FONT><PRE class=example><FONT class=extract>     find_files = $(wildcard $(dir)/*)
     dirs := a b c d
     files := $(foreach dir,$(dirs),$(find_files))
</FONT></PRE>
<P class=noindent><FONT class=extract>Here we use the variable <CODE>find_files</CODE> this way. We use plain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; to define a recursively-expanding variable, so that its value contains an actual function call to be re-expanded under the control of <CODE>foreach</CODE>; a simply-expanded variable would not do, since <CODE>wildcard</CODE> would be called only once at the time of defining <CODE>find_files</CODE>. </FONT>
<P><FONT class=extract>The <CODE>foreach</CODE> function has no permanent effect on the variable <VAR>var</VAR>; its value and flavor after the <CODE>foreach</CODE> function call are the same as they were beforehand. The other values which are taken from <VAR>list</VAR> are in effect only temporarily, during the execution of <CODE>foreach</CODE>. The variable <VAR>var</VAR> is a simply-expanded variable during the execution of <CODE>foreach</CODE>. If <VAR>var</VAR> was undefined before the <CODE>foreach</CODE> function call, it is undefined after the call. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>You must take care when using complex variable expressions that result in variable names because many strange things are valid variable names, but are probably not what you intended. For example, </FONT><PRE class=smallexample><FONT class=extract>     files := $(foreach Esta-escrito-en-espanol!,b c ch,$(find_files))
</FONT></PRE>
<P class=noindent><FONT class=extract>might be useful if the value of <CODE>find_files</CODE> references the variable whose name is &#8216;<SAMP><SPAN class=samp>Esta-escrito-en-espanol!</SPAN></SAMP>&#8217; (es un nombre bastante largo, no?), but it is more likely to be a mistake. </FONT>
<DIV class=node><A name=File-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Call-Function" rel=next><FONT class=extract>Call Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function" rel=previous><FONT class=extract>Foreach Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.6 The <CODE>file</CODE> Function</FONT></H3>
<P><A name=index-file-648></A><A name=index-writing-to-a-file-649></A><A name=index-file_002c-writing-to-650></A><FONT class=extract>The <CODE>file</CODE> function allows the makefile to write to a file. Two modes of writing are supported: overwrite, where the text is written to the beginning of the file and any existing content is lost, and append, where the text is written to the end of the file, preserving the existing content. In all cases the file is created if it does not exist. </FONT>
<P><FONT class=extract>The syntax of the <CODE>file</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(file <VAR>op</VAR> <VAR>filename</VAR>,<VAR>text</VAR>)
</FONT></PRE>
<P><FONT class=extract>The operator <VAR>op</VAR> can be either <CODE>&gt;</CODE> which indicates overwrite mode, or <CODE>&gt;&gt;</CODE> which indicates append mode. The <VAR>filename</VAR> indicates the file to be written to. There may optionally be whitespace between the operator and the file name. </FONT>
<P><FONT class=extract>When the <CODE>file</CODE> function is expanded all its arguments are expanded first, then the file indicated by <VAR>filename</VAR> will be opened in the mode described by <VAR>op</VAR>. Finally <VAR>text</VAR> will be written to the file. If <VAR>text</VAR> does not already end in a newline, a final newline will be written. The result of evaluating the <CODE>file</CODE> function is always the empty string. </FONT>
<P><FONT class=extract>It is a fatal error if the file cannot be opened for writing, or if the write operation fails. </FONT>
<P><FONT class=extract>For example, the <CODE>file</CODE> function can be useful if your build system has a limited command line size and your recipe runs a command that can accept arguments from a file as well. Many commands use the convention that an argument prefixed with an <CODE>@</CODE> specifies a file containing more arguments. Then you might write your recipe in this way: </FONT><PRE class=example><FONT class=extract>     program: $(OBJECTS)
             $(file &gt;$@.in,$^)
             $(CMD) $(CMDFLAGS) @$@.in
             @rm $@.in
</FONT></PRE>
<P><FONT class=extract>If the command required each argument to be on a separate line of the input file, you might write your recipe like this: </FONT><PRE class=example><FONT class=extract>     program: $(OBJECTS)
             $(file &gt;$@.in,) $(foreach O,$^,$(file &gt;&gt;$@.in,$O))
             $(CMD) $(CMDFLAGS) @$@.in
             @rm $@.in
</FONT></PRE>
<DIV class=node><A name=Call-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Value-Function" rel=next><FONT class=extract>Value Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#File-Function" rel=previous><FONT class=extract>File Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.7 The <CODE>call</CODE> Function</FONT></H3>
<P><A name=index-call-651></A><A name=index-functions_002c-user-defined-652></A><A name=index-user-defined-functions-653></A><FONT class=extract>The <CODE>call</CODE> function is unique in that it can be used to create new parameterized functions. You can write a complex expression as the value of a variable, then use <CODE>call</CODE> to expand it with different values. </FONT>
<P><FONT class=extract>The syntax of the <CODE>call</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(call <VAR>variable</VAR>,<VAR>param</VAR>,<VAR>param</VAR>,...)
</FONT></PRE>
<P><FONT class=extract>When <CODE>make</CODE> expands this function, it assigns each <VAR>param</VAR> to temporary variables <CODE>$(1)</CODE>, <CODE>$(2)</CODE>, etc. The variable <CODE>$(0)</CODE> will contain <VAR>variable</VAR>. There is no maximum number of parameter arguments. There is no minimum, either, but it doesn't make sense to use <CODE>call</CODE> with no parameters. </FONT>
<P><FONT class=extract>Then <VAR>variable</VAR> is expanded as a <CODE>make</CODE> variable in the context of these temporary assignments. Thus, any reference to <CODE>$(1)</CODE> in the value of <VAR>variable</VAR> will resolve to the first <VAR>param</VAR> in the invocation of <CODE>call</CODE>. </FONT>
<P><FONT class=extract>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable, not a <EM>reference</EM> to that variable. Therefore you would not normally use a &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; or parentheses when writing it. (You can, however, use a variable reference in the name if you want the name not to be a constant.) </FONT>
<P><FONT class=extract>If <VAR>variable</VAR> is the name of a built-in function, the built-in function is always invoked (even if a <CODE>make</CODE> variable by that name also exists). </FONT>
<P><FONT class=extract>The <CODE>call</CODE> function expands the <VAR>param</VAR> arguments before assigning them to temporary variables. This means that <VAR>variable</VAR> values containing references to built-in functions that have special expansion rules, like <CODE>foreach</CODE> or <CODE>if</CODE>, may not work as you expect. </FONT>
<P><FONT class=extract>Some examples may make this clearer. </FONT>
<P><FONT class=extract>This macro simply reverses its arguments: </FONT><PRE class=smallexample><FONT class=extract>     reverse = $(2) $(1)
     
     foo = $(call reverse,a,b)
</FONT></PRE>
<P class=noindent><FONT class=extract>Here <VAR>foo</VAR> will contain &#8216;<SAMP><SPAN class=samp>b a</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>This one is slightly more interesting: it defines a macro to search for the first instance of a program in <CODE>PATH</CODE>: </FONT><PRE class=smallexample><FONT class=extract>     pathsearch = $(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(PATH)))))
     
     LS := $(call pathsearch,ls)
</FONT></PRE>
<P class=noindent><FONT class=extract>Now the variable LS contains <CODE>/bin/ls</CODE> or similar. </FONT>
<P><FONT class=extract>The <CODE>call</CODE> function can be nested. Each recursive invocation gets its own local values for <CODE>$(1)</CODE>, etc. that mask the values of higher-level <CODE>call</CODE>. For example, here is an implementation of a <DFN>map</DFN> function: </FONT><PRE class=smallexample><FONT class=extract>     map = $(foreach a,$(2),$(call $(1),$(a)))
</FONT></PRE>
<P><FONT class=extract>Now you can <VAR>map</VAR> a function that normally takes only one argument, such as <CODE>origin</CODE>, to multiple values in one step: </FONT><PRE class=smallexample><FONT class=extract>     o = $(call map,origin,o map MAKE)
</FONT></PRE>
<P><FONT class=extract>and end up with <VAR>o</VAR> containing something like &#8216;<SAMP><SPAN class=samp>file file default</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>A final caution: be careful when adding whitespace to the arguments to <CODE>call</CODE>. As with other functions, any whitespace contained in the second and subsequent arguments is kept; this can cause strange effects. It's generally safest to remove all extraneous whitespace when providing parameters to <CODE>call</CODE>. </FONT>
<DIV class=node><A name=Value-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Eval-Function" rel=next><FONT class=extract>Eval Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Call-Function" rel=previous><FONT class=extract>Call Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>8.8 The <CODE>value</CODE> Function</FONT></H3>
<P><A name=index-value-654></A><A name=index-variables_002c-unexpanded-value-655></A><FONT class=extract>The <CODE>value</CODE> function provides a way for you to use the value of a variable <EM>without</EM> having it expanded. Please note that this does not undo expansions which have already occurred; for example if you create a simply expanded variable its value is expanded during the definition; in that case the <CODE>value</CODE> function will return the same result as using the variable directly. </FONT>
<P><FONT class=extract>The syntax of the <CODE>value</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(value <VAR>variable</VAR>)
</FONT></PRE>
<P><FONT class=extract>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable, not a <EM>reference</EM> to that variable. Therefore you would not normally use a &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; or parentheses when writing it. (You can, however, use a variable reference in the name if you want the name not to be a constant.) </FONT>
<P><FONT class=extract>The result of this function is a string containing the value of <VAR>variable</VAR>, without any expansion occurring. For example, in this makefile: </FONT><PRE class=example><FONT class=extract>     FOO = $PATH
     
     all:
             @echo $(FOO)
             @echo $(value FOO)
</FONT></PRE>
<P class=noindent><FONT class=extract>The first output line would be <CODE>ATH</CODE>, since the &#8220;$P&#8221; would be expanded as a <CODE>make</CODE> variable, while the second output line would be the current value of your <CODE>$PATH</CODE> environment variable, since the <CODE>value</CODE> function avoided the expansion. </FONT>
<P><FONT class=extract>The <CODE>value</CODE> function is most often used in conjunction with the <CODE>eval</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Eval-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Origin-Function" rel=next><FONT class=extract>Origin Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Value-Function" rel=previous><FONT class=extract>Value Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV><!-- node-name,  next,  previous,  up -->
<H3 class=section><FONT class=extract>8.9 The <CODE>eval</CODE> Function</FONT></H3>
<P><A name=index-eval-656></A><A name=index-evaluating-makefile-syntax-657></A><A name=index-makefile-syntax_002c-evaluating-658></A><FONT class=extract>The <CODE>eval</CODE> function is very special: it allows you to define new makefile constructs that are not constant; which are the result of evaluating other variables and functions. The argument to the <CODE>eval</CODE> function is expanded, then the results of that expansion are parsed as makefile syntax. The expanded results can define new <CODE>make</CODE> variables, targets, implicit or explicit rules, etc. </FONT>
<P><FONT class=extract>The result of the <CODE>eval</CODE> function is always the empty string; thus, it can be placed virtually anywhere in a makefile without causing syntax errors. </FONT>
<P><FONT class=extract>It's important to realize that the <CODE>eval</CODE> argument is expanded <EM>twice</EM>; first by the <CODE>eval</CODE> function, then the results of that expansion are expanded again when they are parsed as makefile syntax. This means you may need to provide extra levels of escaping for &#8220;$&#8221; characters when using <CODE>eval</CODE>. The <CODE>value</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Value-Function"><FONT class=extract>Value Function</FONT></A><FONT class=extract>) can sometimes be useful in these situations, to circumvent unwanted expansions. </FONT>
<P><FONT class=extract>Here is an example of how <CODE>eval</CODE> can be used; this example combines a number of concepts and other functions. Although it might seem overly complex to use <CODE>eval</CODE> in this example, rather than just writing out the rules, consider two things: first, the template definition (in <CODE>PROGRAM_template</CODE>) could need to be much more complex than it is here; and second, you might put the complex, &#8220;generic&#8221; part of this example into another makefile, then include it in all the individual makefiles. Now your individual makefiles are quite straightforward. </FONT><PRE class=example><FONT class=extract>     PROGRAMS    = server client
     
     server_OBJS = server.o server_priv.o server_access.o
     server_LIBS = priv protocol
     
     client_OBJS = client.o client_api.o client_mem.o
     client_LIBS = protocol
     
     # Everything after this is generic
     
     .PHONY: all
     all: $(PROGRAMS)
     
     define PROGRAM_template =
      $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%)
      ALL_OBJS   += $$($(1)_OBJS)
     endef
     
     $(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))
     
     $(PROGRAMS):
             $(LINK.o) $^ $(LDLIBS) -o $@
     
     clean:
             rm -f $(ALL_OBJS) $(PROGRAMS)
</FONT></PRE>
<DIV class=node><A name=Origin-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function" rel=next><FONT class=extract>Flavor Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Eval-Function" rel=previous><FONT class=extract>Eval Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.10 The <CODE>origin</CODE> Function</FONT></H3>
<P><A name=index-origin-659></A><A name=index-variables_002c-origin-of-660></A><A name=index-origin-of-variable-661></A><FONT class=extract>The <CODE>origin</CODE> function is unlike most other functions in that it does not operate on the values of variables; it tells you something <EM>about</EM> a variable. Specifically, it tells you where it came from. </FONT>
<P><FONT class=extract>The syntax of the <CODE>origin</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(origin <VAR>variable</VAR>)
</FONT></PRE>
<P><FONT class=extract>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable to inquire about, not a <EM>reference</EM> to that variable. Therefore you would not normally use a &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; or parentheses when writing it. (You can, however, use a variable reference in the name if you want the name not to be a constant.) </FONT>
<P><FONT class=extract>The result of this function is a string telling you how the variable <VAR>variable</VAR> was defined: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>undefined</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was never defined. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>default</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> has a default definition, as is usual with <CODE>CC</CODE> and so on. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>. Note that if you have redefined a default variable, the <CODE>origin</CODE> function will return the origin of the later definition. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>environment</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was inherited from the environment provided to <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>environment override</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was inherited from the environment provided to <CODE>make</CODE>, and is overriding a setting for <VAR>variable</VAR> in the makefile as a result of the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217;<!-- /@w --> option (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>file</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined in a makefile. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>command line</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined on the command line. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>override</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined with an <CODE>override</CODE> directive in a makefile (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>automatic</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> is an automatic variable defined for the execution of the recipe for each rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT></DD></DL>
<P><FONT class=extract>This information is primarily useful (other than for your curiosity) to determine if you want to believe the value of a variable. For example, suppose you have a makefile <SAMP><SPAN class=file>foo</SPAN></SAMP> that includes another makefile <SAMP><SPAN class=file>bar</SPAN></SAMP>. You want a variable <CODE>bletch</CODE> to be defined in <SAMP><SPAN class=file>bar</SPAN></SAMP> if you run the command &#8216;<SAMP><SPAN class=samp>make&nbsp;-f&nbsp;bar</SPAN></SAMP>&#8217;<!-- /@w -->, even if the environment contains a definition of <CODE>bletch</CODE>. However, if <SAMP><SPAN class=file>foo</SPAN></SAMP> defined <CODE>bletch</CODE> before including <SAMP><SPAN class=file>bar</SPAN></SAMP>, you do not want to override that definition. This could be done by using an <CODE>override</CODE> directive in <SAMP><SPAN class=file>foo</SPAN></SAMP>, giving that definition precedence over the later definition in <SAMP><SPAN class=file>bar</SPAN></SAMP>; unfortunately, the <CODE>override</CODE> directive would also override any command line definitions. So, <SAMP><SPAN class=file>bar</SPAN></SAMP> could include: </FONT><PRE class=example><FONT class=extract>     ifdef bletch
     ifeq "$(origin bletch)" "environment"
     bletch = barf, gag, etc.
     endif
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>If <CODE>bletch</CODE> has been defined from the environment, this will redefine it. </FONT>
<P><FONT class=extract>If you want to override a previous definition of <CODE>bletch</CODE> if it came from the environment, even under &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217;, you could instead write: </FONT><PRE class=example><FONT class=extract>     ifneq "$(findstring environment,$(origin bletch))" ""
     bletch = barf, gag, etc.
     endif
</FONT></PRE>
<P><FONT class=extract>Here the redefinition takes place if &#8216;<SAMP><SPAN class=samp>$(origin bletch)</SPAN></SAMP>&#8217; returns either &#8216;<SAMP><SPAN class=samp>environment</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>environment override</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Flavor-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions" rel=next><FONT class=extract>Make Control Functions</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Origin-Function" rel=previous><FONT class=extract>Origin Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.11 The <CODE>flavor</CODE> Function</FONT></H3>
<P><A name=index-flavor-662></A><A name=index-variables_002c-flavor-of-663></A><A name=index-flavor-of-variable-664></A><FONT class=extract>The <CODE>flavor</CODE> function, like the <CODE>origin</CODE> function, does not operate on the values of variables but rather it tells you something <EM>about</EM> a variable. Specifically, it tells you the flavor of a variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The syntax of the <CODE>flavor</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(flavor <VAR>variable</VAR>)
</FONT></PRE>
<P><FONT class=extract>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable to inquire about, not a <EM>reference</EM> to that variable. Therefore you would not normally use a &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; or parentheses when writing it. (You can, however, use a variable reference in the name if you want the name not to be a constant.) </FONT>
<P><FONT class=extract>The result of this function is a string that identifies the flavor of the variable <VAR>variable</VAR>: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>undefined</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was never defined. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>recursive</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> is a recursively expanded variable. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>simple</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> is a simply expanded variable. </FONT></DD></DL>
<DIV class=node><A name=Make-Control-Functions></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Shell-Function" rel=next><FONT class=extract>Shell Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function" rel=previous><FONT class=extract>Flavor Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.12 Functions That Control Make</FONT></H3>
<P><A name=index-functions_002c-for-controlling-make-665></A><A name=index-controlling-make-666></A><FONT class=extract>These functions control the way make runs. Generally, they are used to provide information to the user of the makefile or to cause make to stop if some sort of environmental error is detected. </FONT>
<DL>
<DT><FONT class=extract><CODE>$(error </CODE><VAR>text</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-error-667></A><A name=index-error_002c-stopping-on-668></A><A name=index-stopping-make-669></A><FONT class=extract>Generates a fatal error where the message is <VAR>text</VAR>. Note that the error is generated whenever this function is evaluated. So, if you put it inside a recipe or on the right side of a recursive variable assignment, it won't be evaluated until later. The <VAR>text</VAR> will be expanded before the error is generated. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          ifdef ERROR1
          $(error error is $(ERROR1))
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>will generate a fatal error during the read of the makefile if the <CODE>make</CODE> variable <CODE>ERROR1</CODE> is defined. Or, </FONT><PRE class=example><FONT class=extract>          ERR = $(error found an error!)
          
          .PHONY: err
          err: ; $(ERR)
</FONT></PRE>
<P class=noindent><FONT class=extract>will generate a fatal error while <CODE>make</CODE> is running, if the <CODE>err</CODE> target is invoked. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(warning </CODE><VAR>text</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-warning-670></A><A name=index-warnings_002c-printing-671></A><A name=index-printing-user-warnings-672></A><FONT class=extract>This function works similarly to the <CODE>error</CODE> function, above, except that <CODE>make</CODE> doesn't exit. Instead, <VAR>text</VAR> is expanded and the resulting message is displayed, but processing of the makefile continues. </FONT>
<P><FONT class=extract>The result of the expansion of this function is the empty string. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(info </CODE><VAR>text</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-info-673></A><A name=index-printing-messages-674></A><FONT class=extract>This function does nothing more than print its (expanded) argument(s) to standard output. No makefile name or line number is added. The result of the expansion of this function is the empty string. </FONT></DD></DL>
<DIV class=node><A name=Shell-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Guile-Function" rel=next><FONT class=extract>Guile Function</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions" rel=previous><FONT class=extract>Make Control Functions</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.13 The <CODE>shell</CODE> Function</FONT></H3>
<P><A name=index-shell-675></A><A name=index-command-expansion-676></A><A name=index-backquotes-677></A><A name=index-shell-command_002c-function-for-678></A><FONT class=extract>The <CODE>shell</CODE> function is unlike any other function other than the <CODE>wildcard</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function"><FONT class=extract>The Function <CODE>wildcard</CODE></FONT></A><FONT class=extract>) in that it communicates with the world outside of <CODE>make</CODE>. </FONT>
<P><FONT class=extract>The <CODE>shell</CODE> function performs the same function that backquotes (&#8216;<SAMP><SPAN class=samp>`</SPAN></SAMP>&#8217;) perform in most shells: it does <DFN>command expansion</DFN>. This means that it takes as an argument a shell command and evaluates to the output of the command. The only processing <CODE>make</CODE> does on the result is to convert each newline (or carriage-return / newline pair) to a single space. If there is a trailing (carriage-return and) newline it will simply be removed. </FONT>
<P><FONT class=extract>The commands run by calls to the <CODE>shell</CODE> function are run when the function calls are expanded (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles"><FONT class=extract>How <CODE>make</CODE> Reads a Makefile</FONT></A><FONT class=extract>). Because this function involves spawning a new shell, you should carefully consider the performance implications of using the <CODE>shell</CODE> function within recursively expanded variables vs. simply expanded variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Here are some examples of the use of the <CODE>shell</CODE> function: </FONT><PRE class=example><FONT class=extract>     contents := $(shell cat foo)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets <CODE>contents</CODE> to the contents of the file <SAMP><SPAN class=file>foo</SPAN></SAMP>, with a space (rather than a newline) separating each line. </FONT><PRE class=example><FONT class=extract>     files := $(shell echo *.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets <CODE>files</CODE> to the expansion of &#8216;<SAMP><SPAN class=samp>*.c</SPAN></SAMP>&#8217;. Unless <CODE>make</CODE> is using a very strange shell, this has the same result as &#8216;<SAMP><SPAN class=samp>$(wildcard&nbsp;*.c)</SPAN></SAMP>&#8217;<!-- /@w --> (as long as at least one &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file exists). </FONT>
<DIV class=node><A name=Guile-Function></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Shell-Function" rel=previous><FONT class=extract>Shell Function</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=up><FONT class=extract>Functions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>8.14 The <CODE>guile</CODE> Function</FONT></H3>
<P><A name=index-guile-679></A><A name=index-Guile-680></A><FONT class=extract>If GNU <CODE>make</CODE> is built with support for GNU Guile as an embedded extension language then the <CODE>guile</CODE> function will be available. The <CODE>guile</CODE> function takes one argument which is first expanded by <CODE>make</CODE> in the normal fashion, then passed to the GNU Guile evaluator. The result of the evaluator is converted into a string and used as the expansion of the <CODE>guile</CODE> function in the makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration"><FONT class=extract>GNU Guile Integration</FONT></A><FONT class=extract> for details on writing extensions to <CODE>make</CODE> in Guile. </FONT>
<P><FONT class=extract>You can determine whether GNU Guile support is available by checking the <CODE>.FEATURES</CODE> variable for the word <VAR>guile</VAR>. </FONT>
<DIV class=node><A name=Running></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=next>Implicit Rules</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Functions" rel=previous>Functions</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>9 How to Run <CODE>make</CODE></FONT></H2>
<P><FONT class=extract>A makefile that says how to recompile a program can be used in more than one way. The simplest use is to recompile every file that is out of date. Usually, makefiles are written so that if you run <CODE>make</CODE> with no arguments, it does just that. </FONT>
<P><FONT class=extract>But you might want to update only some of the files; you might want to use a different compiler or different compiler options; you might want just to find out which files are out of date without changing them. </FONT>
<P><FONT class=extract>By giving arguments when you run <CODE>make</CODE>, you can do any of these things and many others. </FONT>
<P><A name=index-exit-status-of-make-681></A><FONT class=extract>The exit status of <CODE>make</CODE> is always one of three values: </FONT>
<DL>
<DT><FONT class=extract><CODE>0</CODE> </FONT>
<DD><FONT class=extract>The exit status is zero if <CODE>make</CODE> is successful. <BR></FONT>
<DT><FONT class=extract><CODE>2</CODE> </FONT>
<DD><FONT class=extract>The exit status is two if <CODE>make</CODE> encounters any errors. It will print messages describing the particular errors. <BR></FONT>
<DT><FONT class=extract><CODE>1</CODE> </FONT>
<DD><FONT class=extract>The exit status is one if you use the &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag and <CODE>make</CODE> determines that some target is not already up to date. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. </FONT></DD></DL>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments"><FONT class=extract>Makefile Arguments</FONT></A><FONT class=extract>: How to specify which makefile to use. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Goals</FONT></A><FONT class=extract>: How to use goal arguments to specify which parts of the makefile to use. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Execution</FONT></A><FONT class=extract>: How to use mode flags to specify what kind of thing to do with the recipes in the makefile other than simply execute them. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation"><FONT class=extract>Avoiding Compilation</FONT></A><FONT class=extract>: How to avoid recompiling certain files. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Overriding"><FONT class=extract>Overriding</FONT></A><FONT class=extract>: How to override a variable to specify an alternate compiler and other things. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Testing"><FONT class=extract>Testing</FONT></A><FONT class=extract>: How to proceed past some errors, to test compilation. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Options Summary</FONT></A><FONT class=extract>: Summary of Options </FONT></LI></UL>
<DIV class=node><A name=Makefile-Arguments></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Goals" rel=next><FONT class=extract>Goals</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Running" rel=previous><FONT class=extract>Running</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.1 Arguments to Specify the Makefile</FONT></H3>
<P><A name=index-g_t_0040code_007b_002d_002dfile_007d-682></A><A name=index-g_t_0040code_007b_002d_002dmakefile_007d-683></A><A name=index-g_t_0040code_007b_002df_007d-684></A><FONT class=extract>The way to specify the name of the makefile is with the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; option (&#8216;<SAMP><SPAN class=samp>--makefile</SPAN></SAMP>&#8217; also works). For example, &#8216;<SAMP><SPAN class=samp>-f altmake</SPAN></SAMP>&#8217; says to use the file <SAMP><SPAN class=file>altmake</SPAN></SAMP> as the makefile. </FONT>
<P><FONT class=extract>If you use the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; flag several times and follow each &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; with an argument, all the specified files are used jointly as makefiles. </FONT>
<P><FONT class=extract>If you do not use the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; flag, the default is to try <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, <SAMP><SPAN class=file>makefile</SPAN></SAMP>, and <SAMP><SPAN class=file>Makefile</SPAN></SAMP>, in that order, and use the first of these three which exists or can be made (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Goals></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution" rel=next><FONT class=extract>Instead of Execution</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments" rel=previous><FONT class=extract>Makefile Arguments</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.2 Arguments to Specify the Goals</FONT></H3>
<P><A name=index-goal_002c-how-to-specify-685></A><FONT class=extract>The <DFN>goals</DFN> are the targets that <CODE>make</CODE> should strive ultimately to update. Other targets are updated as well if they appear as prerequisites of goals, or prerequisites of prerequisites of goals, etc. </FONT>
<P><FONT class=extract>By default, the goal is the first target in the makefile (not counting targets that start with a period). Therefore, makefiles are usually written so that the first target is for compiling the entire program or programs they describe. If the first rule in the makefile has several targets, only the first target in the rule becomes the default goal, not the whole list. You can manage the selection of the default goal from within your makefile using the <CODE>.DEFAULT_GOAL</CODE> variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>You can also specify a different goal or goals with command line arguments to <CODE>make</CODE>. Use the name of the goal as an argument. If you specify several goals, <CODE>make</CODE> processes each of them in turn, in the order you name them. </FONT>
<P><FONT class=extract>Any target in the makefile may be specified as a goal (unless it starts with &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; or contains an &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, in which case it will be parsed as a switch or variable definition, respectively). Even targets not in the makefile may be specified, if <CODE>make</CODE> can find implicit rules that say how to make them. </FONT>
<P><A name=index-MAKECMDGOALS-686></A><FONT class=extract><CODE>Make</CODE> will set the special variable <CODE>MAKECMDGOALS</CODE> to the list of goals you specified on the command line. If no goals were given on the command line, this variable is empty. Note that this variable should be used only in special circumstances. </FONT>
<P><FONT class=extract>An example of appropriate use is to avoid including <SAMP><SPAN class=file>.d</SPAN></SAMP> files during <CODE>clean</CODE> rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites"><FONT class=extract>Automatic Prerequisites</FONT></A><FONT class=extract>), so <CODE>make</CODE> won't create them only to immediately remove them again: </FONT><PRE class=example><FONT class=extract>     sources = foo.c bar.c
     
     ifneq ($(MAKECMDGOALS),clean)
     include $(sources:.c=.d)
     endif
</FONT></PRE>
<P><FONT class=extract>One use of specifying a goal is if you want to compile only a part of the program, or only one of several programs. Specify as a goal each file that you wish to remake. For example, consider a directory containing several programs, with a makefile that starts like this: </FONT><PRE class=example><FONT class=extract>     .PHONY: all
     all: size nm ld ar as
</FONT></PRE>
<P><FONT class=extract>If you are working on the program <CODE>size</CODE>, you might want to say &#8216;<SAMP><SPAN class=samp>make&nbsp;size</SPAN></SAMP>&#8217;<!-- /@w --> so that only the files of that program are recompiled. </FONT>
<P><FONT class=extract>Another use of specifying a goal is to make files that are not normally made. For example, there may be a file of debugging output, or a version of the program that is compiled specially for testing, which has a rule in the makefile but is not a prerequisite of the default goal. </FONT>
<P><FONT class=extract>Another use of specifying a goal is to run the recipe associated with a phony target (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>) or empty target (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets"><FONT class=extract>Empty Target Files to Record Events</FONT></A><FONT class=extract>). Many makefiles contain a phony target named <SAMP><SPAN class=file>clean</SPAN></SAMP> which deletes everything except source files. Naturally, this is done only if you request it explicitly with &#8216;<SAMP><SPAN class=samp>make&nbsp;clean</SPAN></SAMP>&#8217;<!-- /@w -->. Following is a list of typical phony and empty target names. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets"><FONT class=extract>Standard Targets</FONT></A><FONT class=extract>, for a detailed list of all the standard target names which GNU software packages use. </FONT>
<DL>
<DT><FONT class=extract><SAMP><SPAN class=file>all</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007ball_007d-_0040r_007b_0028standard-target_0029_007d-687></A><FONT class=extract>Make all the top-level targets the makefile knows about. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>clean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bclean_007d-_0040r_007b_0028standard-target_0029_007d-688></A><FONT class=extract>Delete all files that are normally created by running <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>mostlyclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bmostlyclean_007d-_0040r_007b_0028standard-target_0029_007d-689></A><FONT class=extract>Like &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217;, but may refrain from deleting a few files that people normally don't want to recompile. For example, the &#8216;<SAMP><SPAN class=samp>mostlyclean</SPAN></SAMP>&#8217; target for GCC does not delete <SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>, because recompiling it is rarely necessary and takes a lot of time. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>distclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bdistclean_007d-_0040r_007b_0028standard-target_0029_007d-690><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>realclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007brealclean_007d-_0040r_007b_0028standard-target_0029_007d-691><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>clobber</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bclobber_007d-_0040r_007b_0028standard-target_0029_007d-692></A><FONT class=extract>Any of these targets might be defined to delete <EM>more</EM> files than &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; does. For example, this would delete configuration files or links that you would normally create as preparation for compilation, even if the makefile itself cannot create these files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>install</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007binstall_007d-_0040r_007b_0028standard-target_0029_007d-693></A><FONT class=extract>Copy the executable file into a directory that users typically search for commands; copy any auxiliary files that the executable uses into the directories where it will look for them. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>print</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bprint_007d-_0040r_007b_0028standard-target_0029_007d-694></A><FONT class=extract>Print listings of the source files that have changed. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>tar</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007btar_007d-_0040r_007b_0028standard-target_0029_007d-695></A><FONT class=extract>Create a tar file of the source files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>shar</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bshar_007d-_0040r_007b_0028standard-target_0029_007d-696></A><FONT class=extract>Create a shell archive (shar file) of the source files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>dist</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bdist_007d-_0040r_007b_0028standard-target_0029_007d-697></A><FONT class=extract>Create a distribution file of the source files. This might be a tar file, or a shar file, or a compressed version of one of the above, or even more than one of the above. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>TAGS</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bTAGS_007d-_0040r_007b_0028standard-target_0029_007d-698></A><FONT class=extract>Update a tags table for this program. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>check</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bcheck_007d-_0040r_007b_0028standard-target_0029_007d-699><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>test</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007btest_007d-_0040r_007b_0028standard-target_0029_007d-700></A><FONT class=extract>Perform self tests on the program this makefile builds. </FONT></DD></DL>
<DIV class=node><A name=Instead-of-Execution></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation" rel=next><FONT class=extract>Avoiding Compilation</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Goals" rel=previous><FONT class=extract>Goals</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.3 Instead of Executing Recipes</FONT></H3>
<P><A name=index-execution_002c-instead-of-701></A><A name=index-recipes_002c-instead-of-executing-702></A><FONT class=extract>The makefile tells <CODE>make</CODE> how to tell whether a target is up to date, and how to update each target. But updating the targets is not always what you want. Certain options specify other activities for <CODE>make</CODE>. <!-- Extra blank lines make it print better. --></FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--dry-run</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--recon</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djust_002dprint_007d-703></A><A name=index-g_t_0040code_007b_002d_002ddry_002drun_007d-704></A><A name=index-g_t_0040code_007b_002d_002drecon_007d-705></A><A name=index-g_t_0040code_007b_002dn_007d-706></A><FONT class=extract>&#8220;No-op&#8221;. Causes <CODE>make</CODE> to print the recipes that are needed to make the targets up to date, but not actually execute them. Note that some recipes are still executed, even with this flag (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>). Also any recipes needed to update included makefiles are still executed (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtouch_007d-707></A><A name=index-touching-files-708></A><A name=index-target_002c-touching-709></A><A name=index-g_t_0040code_007b_002dt_007d-710></A><FONT class=extract>&#8220;Touch&#8221;. Marks targets as up to date without actually changing them. In other words, <CODE>make</CODE> pretends to update the targets but does not really change their contents; instead only their modified times are updated. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquestion_007d-711></A><A name=index-g_t_0040code_007b_002dq_007d-712></A><A name=index-question-mode-713></A><FONT class=extract>&#8220;Question&#8221;. Silently check whether the targets are up to date, but do not execute recipes; the exit code shows whether any updates are needed. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-W </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--what-if=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-new=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--new-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwhat_002dif_007d-714></A><A name=index-g_t_0040code_007b_002dW_007d-715></A><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d-716></A><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d-717></A><A name=index-what-if-718></A><A name=index-files_002c-assuming-new-719></A><FONT class=extract>&#8220;What if&#8221;. Each &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag is followed by a file name. The given files' modification times are recorded by <CODE>make</CODE> as being the present time, although the actual modification times remain the same. You can use the &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag in conjunction with the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag to see what would happen if you were to modify specific files. </FONT></DD></DL>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> prints the recipe that it would normally execute but usually does not execute it. </FONT>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> ignores the recipes in the rules and uses (in effect) the command <CODE>touch</CODE> for each target that needs to be remade. The <CODE>touch</CODE> command is also printed, unless &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; or <CODE>.SILENT</CODE> is used. For speed, <CODE>make</CODE> does not actually invoke the program <CODE>touch</CODE>. It does the work directly. </FONT>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> prints nothing and executes no recipes, but the exit status code it returns is zero if and only if the targets to be considered are already up to date. If the exit status is one, then some updating needs to be done. If <CODE>make</CODE> encounters an error, the exit status is two, so you can distinguish an error from a target that is not up to date. </FONT>
<P><FONT class=extract>It is an error to use more than one of these three flags in the same invocation of <CODE>make</CODE>. </FONT>
<P><A name=index-g_t_002b_002c-and-recipe-execution-720></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; options do not affect recipe lines that begin with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; characters or contain the strings &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217;. Note that only the line containing the &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; character or the strings &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217; is run regardless of these options. Other lines in the same rule are not run unless they too begin with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; or contain &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217; (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>.) </FONT>
<P><A name=index-phony-targets-and-recipe-execution-721></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag prevents phony targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>) from being updated, unless there are recipe lines beginning with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; or containing &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag provides two features: </FONT>
<UL>
<LI><FONT class=extract>If you also use the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, you can see what <CODE>make</CODE> would do if you were to modify some files. </FONT>
<LI><FONT class=extract>Without the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, when <CODE>make</CODE> is actually executing recipes, the &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag can direct <CODE>make</CODE> to act as if some files had been modified, without actually running the recipes for those files. </FONT></LI></UL>
<P><FONT class=extract>Note that the options &#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; allow you to obtain other information about <CODE>make</CODE> or about the makefiles in use (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Avoiding-Compilation></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Overriding" rel=next><FONT class=extract>Overriding</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution" rel=previous><FONT class=extract>Instead of Execution</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.4 Avoiding Recompilation of Some Files</FONT></H3>
<P><A name=index-g_t_0040code_007b_002do_007d-722></A><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d-723></A><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d-724></A><A name=index-files_002c-assuming-old-725></A><A name=index-files_002c-avoiding-recompilation-of-726></A><A name=index-recompilation_002c-avoiding-727></A><FONT class=extract>Sometimes you may have changed a source file but you do not want to recompile all the files that depend on it. For example, suppose you add a macro or a declaration to a header file that many other files depend on. Being conservative, <CODE>make</CODE> assumes that any change in the header file requires recompilation of all dependent files, but you know that they do not need to be recompiled and you would rather not waste the time waiting for them to compile. </FONT>
<P><FONT class=extract>If you anticipate the problem before changing the header file, you can use the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag. This flag tells <CODE>make</CODE> not to run the recipes in the rules, but rather to mark the target up to date by changing its last-modification date. You would follow this procedure: </FONT>
<OL type=1>
<LI><FONT class=extract>Use the command &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; to recompile the source files that really need recompilation, ensuring that the object files are up-to-date before you begin. </FONT>
<LI><FONT class=extract>Make the changes in the header files. </FONT>
<LI><FONT class=extract>Use the command &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217; to mark all the object files as up to date. The next time you run <CODE>make</CODE>, the changes in the header files will not cause any recompilation. </FONT></LI></OL>
<P><FONT class=extract>If you have already changed the header file at a time when some files do need recompilation, it is too late to do this. Instead, you can use the &#8216;<SAMP><SPAN class=samp>-o&nbsp;</SPAN><VAR>file</VAR></SAMP>&#8217;<!-- /@w --> flag, which marks a specified file as &#8220;old&#8221; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). This means that the file itself will not be remade, and nothing else will be remade on its account. Follow this procedure: </FONT>
<OL type=1>
<LI><FONT class=extract>Recompile the source files that need compilation for reasons independent of the particular header file, with &#8216;<SAMP><SPAN class=samp>make -o </SPAN><VAR>headerfile</VAR></SAMP>&#8217;. If several header files are involved, use a separate &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; option for each header file. </FONT>
<LI><FONT class=extract>Touch all the object files with &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217;. </FONT></LI></OL>
<DIV class=node><A name=Overriding></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Testing" rel=next><FONT class=extract>Testing</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation" rel=previous><FONT class=extract>Avoiding Compilation</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.5 Overriding Variables</FONT></H3>
<P><A name=index-overriding-variables-with-arguments-728></A><A name=index-variables_002c-overriding-with-arguments-729></A><A name=index-command-line-variables-730></A><A name=index-variables_002c-command-line-731></A><FONT class=extract>An argument that contains &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; specifies the value of a variable: &#8216;<SAMP><VAR>v</VAR><SPAN class=samp>=</SPAN><VAR>x</VAR></SAMP>&#8217; sets the value of the variable <VAR>v</VAR> to <VAR>x</VAR>. If you specify a value in this way, all ordinary assignments of the same variable in the makefile are ignored; we say they have been <DFN>overridden</DFN> by the command line argument. </FONT>
<P><FONT class=extract>The most common way to use this facility is to pass extra flags to compilers. For example, in a properly written makefile, the variable <CODE>CFLAGS</CODE> is included in each recipe that runs the C compiler, so a file <SAMP><SPAN class=file>foo.c</SPAN></SAMP> would be compiled something like this: </FONT><PRE class=example><FONT class=extract>     cc -c $(CFLAGS) foo.c
</FONT></PRE>
<P><FONT class=extract>Thus, whatever value you set for <CODE>CFLAGS</CODE> affects each compilation that occurs. The makefile probably specifies the usual value for <CODE>CFLAGS</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     CFLAGS=-g
</FONT></PRE>
<P><FONT class=extract>Each time you run <CODE>make</CODE>, you can override this value if you wish. For example, if you say &#8216;<SAMP><SPAN class=samp>make CFLAGS='-g -O'</SPAN></SAMP>&#8217;, each C compilation will be done with &#8216;<SAMP><SPAN class=samp>cc -c -g -O</SPAN></SAMP>&#8217;. (This also illustrates how you can use quoting in the shell to enclose spaces and other special characters in the value of a variable when you override it.) </FONT>
<P><FONT class=extract>The variable <CODE>CFLAGS</CODE> is only one of many standard variables that exist just so that you can change them this way. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>, for a complete list. </FONT>
<P><FONT class=extract>You can also program the makefile to look at additional variables of your own, giving the user the ability to control other aspects of how the makefile works by changing the variables. </FONT>
<P><FONT class=extract>When you override a variable with a command line argument, you can define either a recursively-expanded variable or a simply-expanded variable. The examples shown above make a recursively-expanded variable; to make a simply-expanded variable, write &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;. But, unless you want to include a variable reference or function call in the <EM>value</EM> that you specify, it makes no difference which kind of variable you create. </FONT>
<P><FONT class=extract>There is one way that the makefile can change a variable that you have overridden. This is to use the <CODE>override</CODE> directive, which is a line that looks like this: &#8216;<SAMP><SPAN class=samp>override </SPAN><VAR>variable</VAR><SPAN class=samp> = </SPAN><VAR>value</VAR></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Testing></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Options-Summary" rel=next><FONT class=extract>Options Summary</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Overriding" rel=previous><FONT class=extract>Overriding</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.6 Testing the Compilation of a Program</FONT></H3>
<P><A name=index-testing-compilation-732></A><A name=index-compilation_002c-testing-733></A><FONT class=extract>Normally, when an error happens in executing a shell command, <CODE>make</CODE> gives up immediately, returning a nonzero status. No further recipes are executed for any target. The error implies that the goal cannot be correctly remade, and <CODE>make</CODE> reports this as soon as it knows. </FONT>
<P><FONT class=extract>When you are compiling a program that you have just changed, this is not what you want. Instead, you would rather that <CODE>make</CODE> try compiling every file that can be tried, to show you as many compilation errors as possible. </FONT>
<P><A name=index-g_t_0040code_007b_002dk_007d-734></A><A name=index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-735></A><FONT class=extract>On these occasions, you should use the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; flag. This tells <CODE>make</CODE> to continue to consider the other prerequisites of the pending targets, remaking them if necessary, before it gives up and returns nonzero status. For example, after an error in compiling one object file, &#8216;<SAMP><SPAN class=samp>make -k</SPAN></SAMP>&#8217; will continue compiling other object files even though it already knows that linking them will be impossible. In addition to continuing after failed shell commands, &#8216;<SAMP><SPAN class=samp>make -k</SPAN></SAMP>&#8217; will continue as much as possible after discovering that it does not know how to make a target or prerequisite file. This will always cause an error message, but without &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217;, it is a fatal error (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The usual behavior of <CODE>make</CODE> assumes that your purpose is to get the goals up to date; once <CODE>make</CODE> learns that this is impossible, it might as well report the failure immediately. The &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag says that the real purpose is to test as much as possible of the changes made in the program, perhaps to find several independent problems so that you can correct them all before the next attempt to compile. This is why Emacs' <KBD>M-x compile</KBD> command passes the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag by default. </FONT>
<DIV class=node><A name=Options-Summary></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Testing" rel=previous><FONT class=extract>Testing</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up><FONT class=extract>Running</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>9.7 Summary of Options</FONT></H3>
<P><A name=index-options-736></A><A name=index-flags-737></A><A name=index-switches-738></A><FONT class=extract>Here is a table of all the options <CODE>make</CODE> understands: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-b</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002db_007d-739><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dm_007d-740></A><FONT class=extract>These options are ignored for compatibility with other versions of <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-B</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dB_007d-741><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--always-make</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dalways_002dmake_007d-742></A><FONT class=extract>Consider all targets out-of-date. GNU <CODE>make</CODE> proceeds to consider targets and their prerequisites using the normal algorithms; however, all targets so considered are always remade regardless of the status of their prerequisites. To avoid infinite recursion, if <CODE>MAKE_RESTARTS</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>) is set to a number greater than 0 this option is disabled when considering whether to remake makefiles (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-C </SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dC_007d-743><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--directory=</SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddirectory_007d-744></A><FONT class=extract>Change to directory <VAR>dir</VAR> before reading the makefiles. If multiple &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217; options are specified, each is interpreted relative to the previous one: &#8216;<SAMP><SPAN class=samp>-C / -C etc</SPAN></SAMP>&#8217; is equivalent to &#8216;<SAMP><SPAN class=samp>-C /etc</SPAN></SAMP>&#8217;. This is typically used with recursive invocations of <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-d</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dd_007d-745></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print debugging information in addition to normal processing. The debugging information says which files are being considered for remaking, which file-times are being compared and with what results, which files actually need to be remade, which implicit rules are considered and which are applied&#8212;everything interesting about how <CODE>make</CODE> decides what to do. The <CODE>-d</CODE> option is equivalent to &#8216;<SAMP><SPAN class=samp>--debug=a</SPAN></SAMP>&#8217; (see below). <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--debug[=</SPAN><VAR>options</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddebug_007d-746></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print debugging information in addition to normal processing. Various levels and types of output can be chosen. With no arguments, print the &#8220;basic&#8221; level of debugging. Possible arguments are below; only the first character is considered, and values must be comma- or space-separated. </FONT>
<DL>
<DT><FONT class=extract><CODE>a (</CODE><I>all</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>All types of debugging output are enabled. This is equivalent to using &#8216;<SAMP><SPAN class=samp>-d</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract><CODE>b (</CODE><I>basic</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Basic debugging prints each target that was found to be out-of-date, and whether the build was successful or not. <BR></FONT>
<DT><FONT class=extract><CODE>v (</CODE><I>verbose</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>A level above &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217;; includes messages about which makefiles were parsed, prerequisites that did not need to be rebuilt, etc. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>i (</CODE><I>implicit</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Prints messages describing the implicit rule searches for each target. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>j (</CODE><I>jobs</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Prints messages giving details on the invocation of specific sub-commands. <BR></FONT>
<DT><FONT class=extract><CODE>m (</CODE><I>makefile</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>By default, the above messages are not enabled while trying to remake the makefiles. This option enables messages while rebuilding makefiles, too. Note that the &#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217; option does enable this option. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>n (</CODE><I>none</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Disable all debugging currently enabled. If additional debugging flags are encountered after this they will still take effect. </FONT></DD></DL><BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002de_007d-747><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--environment-overrides</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002denvironment_002doverrides_007d-748></A><FONT class=extract>Give variables taken from the environment precedence over variables from makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--eval=</SPAN><VAR>string</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002deval_007d-749></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Evaluate <VAR>string</VAR> as makefile syntax. This is a command-line version of the <CODE>eval</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>). The evaluation is performed after the default rules and variables have been defined, but before any makefiles are read. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-f </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002df_007d-750><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dfile_007d-751><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--makefile=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dmakefile_007d-752></A><FONT class=extract>Read the file named <VAR>file</VAR> as a makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dh_007d-753><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--help</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dhelp_007d-754></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Remind you of the options that <CODE>make</CODE> understands and then exit. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-i</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002di_007d-755><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--ignore-errors</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dignore_002derrors_007d-756></A><FONT class=extract>Ignore all errors in recipes executed to remake files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-I </SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dI_007d-757><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--include-dir=</SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-758></A><FONT class=extract>Specifies a directory <VAR>dir</VAR> to search for included makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. If several &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; options are used to specify several directories, the directories are searched in the order specified. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-j [</SPAN><VAR>jobs</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dj_007d-759><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--jobs[=</SPAN><VAR>jobs</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djobs_007d-760></A><FONT class=extract>Specifies the number of recipes (jobs) to run simultaneously. With no argument, <CODE>make</CODE> runs as many recipes simultaneously as possible. If there is more than one &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option, the last one is effective. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>, for more information on how recipes are run. Note that this option is ignored on MS-DOS. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dk_007d-761><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-762></A><FONT class=extract>Continue as much as possible after an error. While the target that failed, and those that depend on it, cannot be remade, the other prerequisites of these targets can be processed all the same. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Testing"><FONT class=extract>Testing the Compilation of a Program</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-l [</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dl_007d-763><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--load-average[=</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dload_002daverage_007d-764><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--max-load[=</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dmax_002dload_007d-765></A><FONT class=extract>Specifies that no new recipes should be started if there are other recipes running and the load average is at least <VAR>load</VAR> (a floating-point number). With no argument, removes a previous load limit. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-L</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dL_007d-766><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--check-symlink-times</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dcheck_002dsymlink_002dtimes_007d-767></A><FONT class=extract>On systems that support symbolic links, this option causes <CODE>make</CODE> to consider the timestamps on any symbolic links in addition to the timestamp on the file referenced by those links. When this option is provided, the most recent timestamp among the file and the symbolic links is taken as the modification time for this target file. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dn_007d-768><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djust_002dprint_007d-769><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--dry-run</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddry_002drun_007d-770><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--recon</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002drecon_007d-771></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print the recipe that would be executed, but do not execute it (except in certain circumstances). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-o </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002do_007d-772><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--old-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d-773><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-old=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d-774></A><FONT class=extract>Do not remake the file <VAR>file</VAR> even if it is older than its prerequisites, and do not remake anything on account of changes in <VAR>file</VAR>. Essentially the file is treated as very old and its rules are ignored. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation"><FONT class=extract>Avoiding Recompilation of Some Files</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-O[</SPAN><VAR>type</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dO_007d-775><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--output-sync[=</SPAN><VAR>type</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002doutput_002dsync_007d-776></A><A name=index-output-during-parallel-execution-777></A><A name=index-parallel-execution_002c-output-during-778></A><FONT class=extract>Ensure that the complete output from each recipe is printed in one uninterrupted sequence. This option is only useful when using the <CODE>--jobs</CODE> option to run multiple recipes simultaneously (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>) Without this option output will be displayed as it is generated by the recipes. </FONT>
<P><FONT class=extract>With no type or the type &#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217;, output from the entire recipe of each target is grouped together. With the type &#8216;<SAMP><SPAN class=samp>line</SPAN></SAMP>&#8217;, output from each line in the recipe is grouped together. With the type &#8216;<SAMP><SPAN class=samp>recurse</SPAN></SAMP>&#8217;, the output from an entire recursive make is grouped together. With the type &#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;, no output synchronization is performed. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output"><FONT class=extract>Output During Parallel Execution</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dp_007d-779><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--print-data-base</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dprint_002ddata_002dbase_007d-780></A><A name=index-data-base-of-_0040code_007bmake_007d-rules-781></A><A name=index-predefined-rules-and-variables_002c-printing-782></A><FONT class=extract>Print the data base (rules and variable values) that results from reading the makefiles; then execute as usual or as otherwise specified. This also prints the version information given by the &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; switch (see below). To print the data base without trying to remake any files, use &#8216;<SAMP><SPAN class=samp>make&nbsp;-qp</SPAN></SAMP>&#8217;<!-- /@w -->. To print the data base of predefined rules and variables, use &#8216;<SAMP><SPAN class=samp>make&nbsp;-p&nbsp;-f&nbsp;/dev/null</SPAN></SAMP>&#8217;<!-- /@w -->. The data base output contains file name and line number information for recipe and variable definitions, so it can be a useful debugging tool in complex environments. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dq_007d-783><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquestion_007d-784></A><FONT class=extract>&#8220;Question mode&#8221;. Do not run any recipes, or print anything; just return an exit status that is zero if the specified targets are already up to date, one if any remaking is required, or two if an error is encountered. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dr_007d-785><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-builtin-rules</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dbuiltin_002drules_007d-786></A><FONT class=extract>Eliminate use of the built-in implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). You can still define your own by writing pattern rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). The &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option also clears out the default list of suffixes for suffix rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>). But you can still define your own suffixes with a rule for <CODE>.SUFFIXES</CODE>, and then define your own suffix rules. Note that only <EM>rules</EM> are affected by the <CODE>-r</CODE> option; default variables remain in effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>); see the &#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; option below. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dR_007d-787><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-builtin-variables</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dbuiltin_002dvariables_007d-788></A><FONT class=extract>Eliminate use of the built-in rule-specific variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>). You can still define your own, of course. The &#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; option also automatically enables the &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option (see above), since it doesn't make sense to have implicit rules without any definitions for the variables that they use. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002ds_007d-789><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--silent</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dsilent_007d-790><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--quiet</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquiet_007d-791></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Silent operation; do not print the recipes as they are executed. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-S</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dS_007d-792><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-keep-going</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dkeep_002dgoing_007d-793><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--stop</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dstop_007d-794></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Cancel the effect of the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; option. This is never necessary except in a recursive <CODE>make</CODE> where &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; might be inherited from the top-level <CODE>make</CODE> via <CODE>MAKEFLAGS</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>) or if you set &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; in <CODE>MAKEFLAGS</CODE> in your environment. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dt_007d-795><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtouch_007d-796></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Touch files (mark them up to date without really changing them) instead of running their recipes. This is used to pretend that the recipes were done, in order to fool future invocations of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--trace</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtrace_007d-797></A><FONT class=extract>Show tracing information for <CODE>make</CODE> execution. Prints the entire recipe to be executed, even for recipes that are normally silent (due to <CODE>.SILENT</CODE> or &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;). Also prints the makefile name and line number where the recipe was defined, and information on why the target is being rebuilt. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dv_007d-798><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--version</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dversion_007d-799></A><FONT class=extract>Print the version of the <CODE>make</CODE> program plus a copyright, a list of authors, and a notice that there is no warranty; then exit. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dw_007d-800><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d-801></A><FONT class=extract>Print a message containing the working directory both before and after executing the makefile. This may be useful for tracking down errors from complicated nests of recursive <CODE>make</CODE> commands. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. (In practice, you rarely need to specify this option since &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; does it for you; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></A><FONT class=extract>.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dprint_002ddirectory_007d-802></A><FONT class=extract>Disable printing of the working directory under <CODE>-w</CODE>. This option is useful when <CODE>-w</CODE> is turned on automatically, but you do not want to see the extra messages. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-W </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dW_007d-803><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--what-if=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwhat_002dif_007d-804><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--new-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d-805><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-new=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d-806></A><FONT class=extract>Pretend that the target <VAR>file</VAR> has just been modified. When used with the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag, this shows you what would happen if you were to modify that file. Without &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, it is almost the same as running a <CODE>touch</CODE> command on the given file before running <CODE>make</CODE>, except that the modification time is changed only in the imagination of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--warn-undefined-variables</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwarn_002dundefined_002dvariables_007d-807></A><A name=index-variables_002c-warning-for-undefined-808></A><A name=index-undefined-variables_002c-warning-message-809></A><FONT class=extract>Issue a warning message whenever <CODE>make</CODE> sees a reference to an undefined variable. This can be helpful when you are trying to debug makefiles which use variables in complex ways. </FONT></DD></DL>
<DIV class=node><A name=Implicit-Rules></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=next>Archives</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Running" rel=previous>Running</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>10 Using Implicit Rules</FONT></H2>
<P><A name=index-implicit-rule-810></A><A name=index-rule_002c-implicit-811></A><FONT class=extract>Certain standard ways of remaking target files are used very often. For example, one customary way to make an object file is from a C source file using the C compiler, <CODE>cc</CODE>. </FONT>
<P><FONT class=extract><DFN>Implicit rules</DFN> tell <CODE>make</CODE> how to use customary techniques so that you do not have to specify them in detail when you want to use them. For example, there is an implicit rule for C compilation. File names determine which implicit rules are run. For example, C compilation typically takes a <SAMP><SPAN class=file>.c</SPAN></SAMP> file and makes a <SAMP><SPAN class=file>.o</SPAN></SAMP> file. So <CODE>make</CODE> applies the implicit rule for C compilation when it sees this combination of file name endings. </FONT>
<P><FONT class=extract>A chain of implicit rules can apply in sequence; for example, <CODE>make</CODE> will remake a <SAMP><SPAN class=file>.o</SPAN></SAMP> file from a <SAMP><SPAN class=file>.y</SPAN></SAMP> file by way of a <SAMP><SPAN class=file>.c</SPAN></SAMP> file. </FONT>
<P><FONT class=extract>The built-in implicit rules use several variables in their recipes so that, by changing the values of the variables, you can change the way the implicit rule works. For example, the variable <CODE>CFLAGS</CODE> controls the flags given to the C compiler by the implicit rule for C compilation. </FONT>
<P><FONT class=extract>You can define your own implicit rules by writing <DFN>pattern rules</DFN>. </FONT>
<P><FONT class=extract><DFN>Suffix rules</DFN> are a more limited way to define implicit rules. Pattern rules are more general and clearer, but suffix rules are retained for compatibility. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit"><FONT class=extract>Using Implicit</FONT></A><FONT class=extract>: How to use an existing implicit rule to get the recipes for updating a file. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Rules</FONT></A><FONT class=extract>: A list of built-in implicit rules. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Implicit Variables</FONT></A><FONT class=extract>: How to change what predefined rules do. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chained Rules</FONT></A><FONT class=extract>: How to use a chain of implicit rules. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>: How to define new implicit rules. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Last-Resort"><FONT class=extract>Last Resort</FONT></A><FONT class=extract>: How to define a recipe for rules which cannot find any. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Suffix Rules</FONT></A><FONT class=extract>: The old-fashioned style of implicit rule. </FONT>
<LI><A accessKey=8 href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search</FONT></A><FONT class=extract>: The precise algorithm for applying implicit rules. </FONT></LI></UL>
<DIV class=node><A name=Using-Implicit></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules" rel=next><FONT class=extract>Catalogue of Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=previous><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.1 Using Implicit Rules</FONT></H3>
<P><A name=index-implicit-rule_002c-how-to-use-812></A><A name=index-rule_002c-implicit_002c-how-to-use-813></A><FONT class=extract>To allow <CODE>make</CODE> to find a customary method for updating a target file, all you have to do is refrain from specifying recipes yourself. Either write a rule with no recipe, or don't write a rule at all. Then <CODE>make</CODE> will figure out which implicit rule to use based on which kind of source file exists or can be made. </FONT>
<P><FONT class=extract>For example, suppose the makefile looks like this: </FONT><PRE class=example><FONT class=extract>     foo : foo.o bar.o
             cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)
</FONT></PRE>
<P class=noindent><FONT class=extract>Because you mention <SAMP><SPAN class=file>foo.o</SPAN></SAMP> but do not give a rule for it, <CODE>make</CODE> will automatically look for an implicit rule that tells how to update it. This happens whether or not the file <SAMP><SPAN class=file>foo.o</SPAN></SAMP> currently exists. </FONT>
<P><FONT class=extract>If an implicit rule is found, it can supply both a recipe and one or more prerequisites (the source files). You would want to write a rule for <SAMP><SPAN class=file>foo.o</SPAN></SAMP> with no recipe if you need to specify additional prerequisites, such as header files, that the implicit rule cannot supply. </FONT>
<P><FONT class=extract>Each implicit rule has a target pattern and prerequisite patterns. There may be many implicit rules with the same target pattern. For example, numerous rules make &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files: one, from a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file with the C compiler; another, from a &#8216;<SAMP><SPAN class=samp>.p</SPAN></SAMP>&#8217; file with the Pascal compiler; and so on. The rule that actually applies is the one whose prerequisites exist or can be made. So, if you have a file <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <CODE>make</CODE> will run the C compiler; otherwise, if you have a file <SAMP><SPAN class=file>foo.p</SPAN></SAMP>, <CODE>make</CODE> will run the Pascal compiler; and so on. </FONT>
<P><FONT class=extract>Of course, when you write the makefile, you know which implicit rule you want <CODE>make</CODE> to use, and you know it will choose that one because you know which possible prerequisite files are supposed to exist. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>, for a catalogue of all the predefined implicit rules. </FONT>
<P><FONT class=extract>Above, we said an implicit rule applies if the required prerequisites &#8220;exist or can be made&#8221;. A file &#8220;can be made&#8221; if it is mentioned explicitly in the makefile as a target or a prerequisite, or if an implicit rule can be recursively found for how to make it. When an implicit prerequisite is the result of another implicit rule, we say that <DFN>chaining</DFN> is occurring. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>In general, <CODE>make</CODE> searches for an implicit rule for each target, and for each double-colon rule, that has no recipe. A file that is mentioned only as a prerequisite is considered a target whose rule specifies nothing, so implicit rule search happens for it. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search Algorithm</FONT></A><FONT class=extract>, for the details of how the search is done. </FONT>
<P><FONT class=extract>Note that explicit prerequisites do not influence implicit rule search. For example, consider this explicit rule: </FONT><PRE class=example><FONT class=extract>     foo.o: foo.p
</FONT></PRE>
<P class=noindent><FONT class=extract>The prerequisite on <SAMP><SPAN class=file>foo.p</SPAN></SAMP> does not necessarily mean that <CODE>make</CODE> will remake <SAMP><SPAN class=file>foo.o</SPAN></SAMP> according to the implicit rule to make an object file, a <SAMP><SPAN class=file>.o</SPAN></SAMP> file, from a Pascal source file, a <SAMP><SPAN class=file>.p</SPAN></SAMP> file. For example, if <SAMP><SPAN class=file>foo.c</SPAN></SAMP> also exists, the implicit rule to make an object file from a C source file is used instead, because it appears before the Pascal rule in the list of predefined implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>If you do not want an implicit rule to be used for a target that has no recipe, you can give that target an empty recipe by writing a semicolon (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Defining Empty Recipes</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Catalogue-of-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables" rel=next><FONT class=extract>Implicit Variables</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit" rel=previous><FONT class=extract>Using Implicit</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.2 Catalogue of Implicit Rules</FONT></H3>
<P><A name=index-implicit-rule_002c-predefined-814></A><A name=index-rule_002c-implicit_002c-predefined-815></A><FONT class=extract>Here is a catalogue of predefined implicit rules which are always available unless the makefile explicitly overrides or cancels them. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules"><FONT class=extract>Canceling Implicit Rules</FONT></A><FONT class=extract>, for information on canceling or overriding an implicit rule. The &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--no-builtin-rules</SPAN></SAMP>&#8217; option cancels all predefined rules. </FONT>
<P><FONT class=extract>This manual only documents the default rules available on POSIX-based operating systems. Other operating systems, such as VMS, Windows, OS/2, etc. may have different sets of default rules. To see the full list of default rules and variables available in your version of GNU <CODE>make</CODE>, run &#8216;<SAMP><SPAN class=samp>make -p</SPAN></SAMP>&#8217; in a directory with no makefile. </FONT>
<P><FONT class=extract>Not all of these rules will always be defined, even when the &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option is not given. Many of the predefined implicit rules are implemented in <CODE>make</CODE> as suffix rules, so which ones will be defined depends on the <DFN>suffix list</DFN> (the list of prerequisites of the special target <CODE>.SUFFIXES</CODE>). The default suffix list is: <CODE>.out</CODE>, <CODE>.a</CODE>, <CODE>.ln</CODE>, <CODE>.o</CODE>, <CODE>.c</CODE>, <CODE>.cc</CODE>, <CODE>.C</CODE>, <CODE>.cpp</CODE>, <CODE>.p</CODE>, <CODE>.f</CODE>, <CODE>.F</CODE>, <CODE>.m</CODE>, <CODE>.r</CODE>, <CODE>.y</CODE>, <CODE>.l</CODE>, <CODE>.ym</CODE>, <CODE>.lm</CODE>, <CODE>.s</CODE>, <CODE>.S</CODE>, <CODE>.mod</CODE>, <CODE>.sym</CODE>, <CODE>.def</CODE>, <CODE>.h</CODE>, <CODE>.info</CODE>, <CODE>.dvi</CODE>, <CODE>.tex</CODE>, <CODE>.texinfo</CODE>, <CODE>.texi</CODE>, <CODE>.txinfo</CODE>, <CODE>.w</CODE>, <CODE>.ch</CODE> <CODE>.web</CODE>, <CODE>.sh</CODE>, <CODE>.elc</CODE>, <CODE>.el</CODE>. All of the implicit rules described below whose prerequisites have one of these suffixes are actually suffix rules. If you modify the suffix list, the only predefined suffix rules in effect will be those named by one or two of the suffixes that are on the list you specify; rules whose suffixes fail to be on the list are disabled. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>, for full details on suffix rules. </FONT>
<DL>
<DT><FONT class=extract>Compiling C programs </FONT>
<DD><A name=index-C_002c-rule-to-compile-816></A><A name=index-cc-817></A><A name=index-gcc-818></A><A name=index-g_t_002eo-819></A><A name=index-g_t_002ec-820></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(CC) $(CPPFLAGS) $(CFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Compiling C++ programs </FONT>
<DD><A name=index-C_002b_002b_002c-rule-to-compile-821></A><A name=index-g_002b_002b-822></A><A name=index-g_t_002ecc-823></A><A name=index-g_t_002ecpp-824></A><A name=index-g_t_002eC-825></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.cc</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.cpp</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.C</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c</SPAN></SAMP>&#8217;. We encourage you to use the suffix &#8216;<SAMP><SPAN class=samp>.cc</SPAN></SAMP>&#8217; for C++ source files instead of &#8216;<SAMP><SPAN class=samp>.C</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Compiling Pascal programs </FONT>
<DD><A name=index-Pascal_002c-rule-to-compile-826></A><A name=index-pc-827></A><A name=index-g_t_002ep-828></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.p</SPAN></SAMP> with the recipe &#8216;<SAMP><SPAN class=samp>$(PC) $(PFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Compiling Fortran and Ratfor programs </FONT>
<DD><A name=index-Fortran_002c-rule-to-compile-829></A><A name=index-Ratfor_002c-rule-to-compile-830></A><A name=index-f77-831></A><A name=index-g_t_002ef-832></A><A name=index-g_t_002er-833></A><A name=index-g_t_002eF-834></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.F</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.f</SPAN></SAMP> by running the Fortran compiler. The precise recipe used is as follows: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.f</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.F</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(CPPFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.r</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(RFLAGS) -c</SPAN></SAMP>&#8217;. </FONT></DD></DL><BR>
<DT><FONT class=extract>Preprocessing Fortran and Ratfor programs </FONT>
<DD><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.f</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.F</SPAN></SAMP>. This rule runs just the preprocessor to convert a Ratfor or preprocessable Fortran program into a strict Fortran program. The precise recipe used is as follows: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.F</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(CPPFLAGS) $(FFLAGS) -F</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.r</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(RFLAGS) -F</SPAN></SAMP>&#8217;. </FONT></DD></DL><BR>
<DT><FONT class=extract>Compiling Modula-2 programs </FONT>
<DD><A name=index-Modula_002d2_002c-rule-to-compile-835></A><A name=index-m2c-836></A><A name=index-g_t_002esym-837></A><A name=index-g_t_002edef-838></A><A name=index-g_t_002emod-839></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.sym</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.def</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(M2C) $(M2FLAGS) $(DEFFLAGS)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.mod</SPAN></SAMP>; the form is: &#8216;<SAMP><SPAN class=samp>$(M2C)&nbsp;$(M2FLAGS)&nbsp;$(MODFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <BR></FONT>
<DT><FONT class=extract>Assembling and preprocessing assembler programs </FONT>
<DD><A name=index-assembly_002c-rule-to-compile-840></A><A name=index-as-841></A><A name=index-g_t_002es-842></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.s</SPAN></SAMP> by running the assembler, <CODE>as</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(AS) $(ASFLAGS)</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_002eS-843></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.s</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.S</SPAN></SAMP> by running the C preprocessor, <CODE>cpp</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(CPP)&nbsp;$(CPPFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <BR></FONT></P>
<DT><FONT class=extract>Linking a single object file </FONT>
<DD><A name=index-linking_002c-predefined-rule-for-844></A><A name=index-ld-845></A><A name=index-g_t_002eo-846></A><FONT class=extract><SAMP><VAR>n</VAR></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> by running the linker (usually called <CODE>ld</CODE>) via the C compiler. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(CC)&nbsp;$(LDFLAGS)&nbsp;</SPAN><VAR>n</VAR><SPAN class=samp>.o&nbsp;$(LOADLIBES)&nbsp;$(LDLIBS)</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>This rule does the right thing for a simple program with only one source file. It will also do the right thing if there are multiple object files (presumably coming from various other source files), one of which has a name matching that of the executable file. Thus, </FONT><PRE class=example><FONT class=extract>          x: y.o z.o
</FONT></PRE>
<P class=noindent><FONT class=extract>when <SAMP><SPAN class=file>x.c</SPAN></SAMP>, <SAMP><SPAN class=file>y.c</SPAN></SAMP> and <SAMP><SPAN class=file>z.c</SPAN></SAMP> all exist will execute: </FONT><PRE class=example><FONT class=extract>          cc -c x.c -o x.o
          cc -c y.c -o y.o
          cc -c z.c -o z.o
          cc x.o y.o z.o -o x
          rm -f x.o
          rm -f y.o
          rm -f z.o
</FONT></PRE>
<P class=noindent><FONT class=extract>In more complicated cases, such as when there is no object file whose name derives from the executable file name, you must write an explicit recipe for linking. </FONT>
<P><FONT class=extract>Each kind of file automatically made into &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files will be automatically linked by using the compiler (&#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>$(FC)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>$(PC)</SPAN></SAMP>&#8217;; the C compiler &#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217; is used to assemble &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217; files) without the &#8216;<SAMP><SPAN class=samp>-c</SPAN></SAMP>&#8217; option. This could be done by using the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files as intermediates, but it is faster to do the compiling and linking in one step, so that's how it's done. <BR></FONT></P>
<DT><FONT class=extract>Yacc for C programs </FONT>
<DD><A name=index-yacc-847></A><A name=index-Yacc_002c-rule-to-run-848></A><A name=index-g_t_002ey-849></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP> by running Yacc with the recipe &#8216;<SAMP><SPAN class=samp>$(YACC) $(YFLAGS)</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Lex for C programs </FONT>
<DD><A name=index-lex-850></A><A name=index-Lex_002c-rule-to-run-851></A><A name=index-g_t_002el-852></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP> by running Lex. The actual recipe is &#8216;<SAMP><SPAN class=samp>$(LEX) $(LFLAGS)</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Lex for Ratfor programs </FONT>
<DD><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP> by running Lex. The actual recipe is &#8216;<SAMP><SPAN class=samp>$(LEX) $(LFLAGS)</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>The convention of using the same suffix &#8216;<SAMP><SPAN class=samp>.l</SPAN></SAMP>&#8217; for all Lex files regardless of whether they produce C code or Ratfor code makes it impossible for <CODE>make</CODE> to determine automatically which of the two languages you are using in any particular case. If <CODE>make</CODE> is called upon to remake an object file from a &#8216;<SAMP><SPAN class=samp>.l</SPAN></SAMP>&#8217; file, it must guess which compiler to use. It will guess the C compiler, because that is more common. If you are using Ratfor, make sure <CODE>make</CODE> knows this by mentioning <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> in the makefile. Or, if you are using Ratfor exclusively, with no C files, remove &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; from the list of implicit rule suffixes with: </FONT><PRE class=example><FONT class=extract>          .SUFFIXES:
          .SUFFIXES: .o .r .f .l ...
</FONT></PRE><BR>
<DT><FONT class=extract>Making Lint Libraries from C, Yacc, or Lex programs </FONT>
<DD><A name=index-lint-853></A><A name=index-g_t_0040code_007blint_007d_002c-rule-to-run-854></A><A name=index-g_t_002eln-855></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.ln</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> by running <CODE>lint</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(LINT)&nbsp;$(LINTFLAGS)&nbsp;$(CPPFLAGS)&nbsp;-i</SPAN></SAMP>&#8217;<!-- /@w -->. The same recipe is used on the C code produced from <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP>. <BR></FONT>
<DT><FONT class=extract>TeX and Web </FONT>
<DD><A name=index-g_t_0040TeX_007b_007d_002c-rule-to-run-856></A><A name=index-Web_002c-rule-to-run-857></A><A name=index-tex-858></A><A name=index-cweave-859></A><A name=index-weave-860></A><A name=index-tangle-861></A><A name=index-ctangle-862></A><A name=index-g_t_002edvi-863></A><A name=index-g_t_002etex-864></A><A name=index-g_t_002eweb-865></A><A name=index-g_t_002ew-866></A><A name=index-g_t_002ech-867></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.dvi</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.tex</SPAN></SAMP> with the recipe &#8216;<SAMP><SPAN class=samp>$(TEX)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.tex</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.web</SPAN></SAMP> with &#8216;<SAMP><SPAN class=samp>$(WEAVE)</SPAN></SAMP>&#8217;, or from <SAMP><VAR>n</VAR><SPAN class=file>.w</SPAN></SAMP> (and from <SAMP><VAR>n</VAR><SPAN class=file>.ch</SPAN></SAMP> if it exists or can be made) with &#8216;<SAMP><SPAN class=samp>$(CWEAVE)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.p</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.web</SPAN></SAMP> with &#8216;<SAMP><SPAN class=samp>$(TANGLE)</SPAN></SAMP>&#8217; and <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.w</SPAN></SAMP> (and from <SAMP><VAR>n</VAR><SPAN class=file>.ch</SPAN></SAMP> if it exists or can be made) with &#8216;<SAMP><SPAN class=samp>$(CTANGLE)</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>Texinfo and Info </FONT>
<DD><A name=index-Texinfo_002c-rule-to-format-868></A><A name=index-Info_002c-rule-to-format-869></A><A name=index-texi2dvi-870></A><A name=index-makeinfo-871></A><A name=index-g_t_002etexinfo-872></A><A name=index-g_t_002einfo-873></A><A name=index-g_t_002etexi-874></A><A name=index-g_t_002etxinfo-875></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.dvi</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.texinfo</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.texi</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.txinfo</SPAN></SAMP>, with the recipe &#8216;<SAMP><SPAN class=samp>$(TEXI2DVI)&nbsp;$(TEXI2DVI_FLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <SAMP><VAR>n</VAR><SPAN class=file>.info</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.texinfo</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.texi</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.txinfo</SPAN></SAMP>, with the recipe &#8216;<SAMP><SPAN class=samp>$(MAKEINFO)&nbsp;$(MAKEINFO_FLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <BR></FONT>
<DT><FONT class=extract>RCS </FONT>
<DD><A name=index-RCS_002c-rule-to-extract-from-876></A><A name=index-co-877></A><A name=index-g_t_002cv-_0040r_007b_0028RCS-file-extension_0029_007d-878></A><FONT class=extract>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from an RCS file named either <SAMP><VAR>n</VAR><SPAN class=file>,v</SPAN></SAMP> or <SAMP><SPAN class=file>RCS/</SPAN><VAR>n</VAR><SPAN class=file>,v</SPAN></SAMP>. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(CO)&nbsp;$(COFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <SAMP><VAR>n</VAR></SAMP> will not be extracted from RCS if it already exists, even if the RCS file is newer. The rules for RCS are terminal (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>), so RCS files cannot be generated from another source; they must actually exist. <BR></FONT>
<DT><FONT class=extract>SCCS </FONT>
<DD><A name=index-SCCS_002c-rule-to-extract-from-879></A><A name=index-get-880></A><A name=index-s_002e-_0040r_007b_0028SCCS-file-prefix_0029_007d-881></A><FONT class=extract>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from an SCCS file named either <SAMP><SPAN class=file>s.</SPAN><VAR>n</VAR></SAMP> or <SAMP><SPAN class=file>SCCS/s.</SPAN><VAR>n</VAR></SAMP>. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(GET)&nbsp;$(GFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. The rules for SCCS are terminal (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>), so SCCS files cannot be generated from another source; they must actually exist. </FONT>
<P><A name=index-g_t_002esh-882></A><FONT class=extract>For the benefit of SCCS, a file <SAMP><VAR>n</VAR></SAMP> is copied from <SAMP><VAR>n</VAR><SPAN class=file>.sh</SPAN></SAMP> and made executable (by everyone). This is for shell scripts that are checked into SCCS. Since RCS preserves the execution permission of a file, you do not need to use this feature with RCS. </FONT>
<P><FONT class=extract>We recommend that you avoid using of SCCS. RCS is widely held to be superior, and is also free. By choosing free software in place of comparable (or inferior) proprietary software, you support the free software movement. </FONT></P></DD></DL>
<P><FONT class=extract>Usually, you want to change only the variables listed in the table above, which are documented in the following section. </FONT>
<P><FONT class=extract>However, the recipes in built-in implicit rules actually use variables such as <CODE>COMPILE.c</CODE>, <CODE>LINK.p</CODE>, and <CODE>PREPROCESS.S</CODE>, whose values contain the recipes listed above. </FONT>
<P><FONT class=extract><CODE>make</CODE> follows the convention that the rule to compile a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> source file uses the variable <CODE>COMPILE.</CODE><VAR>x</VAR>. Similarly, the rule to produce an executable from a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> file uses <CODE>LINK.</CODE><VAR>x</VAR>; and the rule to preprocess a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> file uses <CODE>PREPROCESS.</CODE><VAR>x</VAR>. </FONT>
<P><A name=index-OUTPUT_005fOPTION-883></A><FONT class=extract>Every rule that produces an object file uses the variable <CODE>OUTPUT_OPTION</CODE>. <CODE>make</CODE> defines this variable either to contain &#8216;<SAMP><SPAN class=samp>-o $@</SPAN></SAMP>&#8217;, or to be empty, depending on a compile-time option. You need the &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; option to ensure that the output goes into the right file when the source file is in a different directory, as when using <CODE>VPATH</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Directory Search</FONT></A><FONT class=extract>). However, compilers on some systems do not accept a &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; switch for object files. If you use such a system, and use <CODE>VPATH</CODE>, some compilations will put their output in the wrong place. A possible workaround for this problem is to give <CODE>OUTPUT_OPTION</CODE> the value &#8216;<SAMP><SPAN class=samp>;&nbsp;mv&nbsp;$*.o&nbsp;$@</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<DIV class=node><A name=Implicit-Variables></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules" rel=next><FONT class=extract>Chained Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules" rel=previous><FONT class=extract>Catalogue of Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.3 Variables Used by Implicit Rules</FONT></H3>
<P><A name=index-flags-for-compilers-884></A><FONT class=extract>The recipes in built-in implicit rules make liberal use of certain predefined variables. You can alter the values of these variables in the makefile, with arguments to <CODE>make</CODE>, or in the environment to alter how the implicit rules work without redefining the rules themselves. You can cancel all variables used by implicit rules with the &#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--no-builtin-variables</SPAN></SAMP>&#8217; option. </FONT>
<P><FONT class=extract>For example, the recipe used to compile a C source file actually says &#8216;<SAMP><SPAN class=samp>$(CC) -c $(CFLAGS) $(CPPFLAGS)</SPAN></SAMP>&#8217;. The default values of the variables used are &#8216;<SAMP><SPAN class=samp>cc</SPAN></SAMP>&#8217; and nothing, resulting in the command &#8216;<SAMP><SPAN class=samp>cc -c</SPAN></SAMP>&#8217;. By redefining &#8216;<SAMP><SPAN class=samp>CC</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>ncc</SPAN></SAMP>&#8217;, you could cause &#8216;<SAMP><SPAN class=samp>ncc</SPAN></SAMP>&#8217; to be used for all C compilations performed by the implicit rule. By redefining &#8216;<SAMP><SPAN class=samp>CFLAGS</SPAN></SAMP>&#8217; to be &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217;, you could pass the &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; option to each compilation. <EM>All</EM> implicit rules that do C compilation use &#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217; to get the program name for the compiler and <EM>all</EM> include &#8216;<SAMP><SPAN class=samp>$(CFLAGS)</SPAN></SAMP>&#8217; among the arguments given to the compiler. </FONT>
<P><FONT class=extract>The variables used in implicit rules fall into two classes: those that are names of programs (like <CODE>CC</CODE>) and those that contain arguments for the programs (like <CODE>CFLAGS</CODE>). (The &#8220;name of a program&#8221; may also contain some command arguments, but it must start with an actual executable program name.) If a variable value contains more than one argument, separate them with spaces. </FONT>
<P><FONT class=extract>The following tables describe of some of the more commonly-used predefined variables. This list is not exhaustive, and the default values shown here may not be what <CODE>make</CODE> selects for your environment. To see the complete list of predefined variables for your instance of GNU <CODE>make</CODE> you can run &#8216;<SAMP><SPAN class=samp>make -p</SPAN></SAMP>&#8217; in a directory with no makefiles. </FONT>
<P><FONT class=extract>Here is a table of some of the more common variables used as names of programs in built-in rules: </FONT>
<DL>
<DT><FONT class=extract><CODE>AR</CODE> </FONT>
<DD><A name=index-AR-885></A><FONT class=extract>Archive-maintaining program; default &#8216;<SAMP><SPAN class=samp>ar</SPAN></SAMP>&#8217;. </FONT><A name=index-ar-886></A><BR>
<DT><FONT class=extract><CODE>AS</CODE> </FONT>
<DD><A name=index-AS-887></A><FONT class=extract>Program for compiling assembly files; default &#8216;<SAMP><SPAN class=samp>as</SPAN></SAMP>&#8217;. </FONT><A name=index-as-888></A><BR>
<DT><FONT class=extract><CODE>CC</CODE> </FONT>
<DD><A name=index-CC-889></A><FONT class=extract>Program for compiling C programs; default &#8216;<SAMP><SPAN class=samp>cc</SPAN></SAMP>&#8217;. </FONT><A name=index-cc-890></A><BR>
<DT><FONT class=extract><CODE>CXX</CODE> </FONT>
<DD><A name=index-CXX-891></A><FONT class=extract>Program for compiling C++ programs; default &#8216;<SAMP><SPAN class=samp>g++</SPAN></SAMP>&#8217;. </FONT><A name=index-g_002b_002b-892></A><BR>
<DT><FONT class=extract><CODE>CPP</CODE> </FONT>
<DD><A name=index-CPP-893></A><FONT class=extract>Program for running the C preprocessor, with results to standard output; default &#8216;<SAMP><SPAN class=samp>$(CC) -E</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract><CODE>FC</CODE> </FONT>
<DD><A name=index-FC-894></A><FONT class=extract>Program for compiling or preprocessing Fortran and Ratfor programs; default &#8216;<SAMP><SPAN class=samp>f77</SPAN></SAMP>&#8217;. </FONT><A name=index-f77-895></A><BR>
<DT><FONT class=extract><CODE>M2C</CODE> </FONT>
<DD><A name=index-M2C-896></A><FONT class=extract>Program to use to compile Modula-2 source code; default &#8216;<SAMP><SPAN class=samp>m2c</SPAN></SAMP>&#8217;. </FONT><A name=index-m2c-897></A><BR>
<DT><FONT class=extract><CODE>PC</CODE> </FONT>
<DD><A name=index-PC-898></A><FONT class=extract>Program for compiling Pascal programs; default &#8216;<SAMP><SPAN class=samp>pc</SPAN></SAMP>&#8217;. </FONT><A name=index-pc-899></A><BR>
<DT><FONT class=extract><CODE>CO</CODE> </FONT>
<DD><A name=index-CO-900></A><FONT class=extract>Program for extracting a file from RCS; default &#8216;<SAMP><SPAN class=samp>co</SPAN></SAMP>&#8217;. </FONT><A name=index-co-901></A><BR>
<DT><FONT class=extract><CODE>GET</CODE> </FONT>
<DD><A name=index-GET-902></A><FONT class=extract>Program for extracting a file from SCCS; default &#8216;<SAMP><SPAN class=samp>get</SPAN></SAMP>&#8217;. </FONT><A name=index-get-903></A><BR>
<DT><FONT class=extract><CODE>LEX</CODE> </FONT>
<DD><A name=index-LEX-904></A><FONT class=extract>Program to use to turn Lex grammars into source code; default &#8216;<SAMP><SPAN class=samp>lex</SPAN></SAMP>&#8217;. </FONT><A name=index-lex-905></A><BR>
<DT><FONT class=extract><CODE>YACC</CODE> </FONT>
<DD><A name=index-YACC-906></A><FONT class=extract>Program to use to turn Yacc grammars into source code; default &#8216;<SAMP><SPAN class=samp>yacc</SPAN></SAMP>&#8217;. </FONT><A name=index-yacc-907></A><BR>
<DT><FONT class=extract><CODE>LINT</CODE> </FONT>
<DD><A name=index-LINT-908></A><FONT class=extract>Program to use to run lint on source code; default &#8216;<SAMP><SPAN class=samp>lint</SPAN></SAMP>&#8217;. </FONT><A name=index-lint-909></A><BR>
<DT><FONT class=extract><CODE>MAKEINFO</CODE> </FONT>
<DD><A name=index-MAKEINFO-910></A><FONT class=extract>Program to convert a Texinfo source file into an Info file; default &#8216;<SAMP><SPAN class=samp>makeinfo</SPAN></SAMP>&#8217;. </FONT><A name=index-makeinfo-911></A><BR>
<DT><FONT class=extract><CODE>TEX</CODE> </FONT>
<DD><A name=index-TEX-912></A><FONT class=extract>Program to make TeX <SPAN class=sc>dvi</SPAN> files from TeX source; default &#8216;<SAMP><SPAN class=samp>tex</SPAN></SAMP>&#8217;. </FONT><A name=index-tex-913></A><BR>
<DT><FONT class=extract><CODE>TEXI2DVI</CODE> </FONT>
<DD><A name=index-TEXI2DVI-914></A><FONT class=extract>Program to make TeX <SPAN class=sc>dvi</SPAN> files from Texinfo source; default &#8216;<SAMP><SPAN class=samp>texi2dvi</SPAN></SAMP>&#8217;. </FONT><A name=index-texi2dvi-915></A><BR>
<DT><FONT class=extract><CODE>WEAVE</CODE> </FONT>
<DD><A name=index-WEAVE-916></A><FONT class=extract>Program to translate Web into TeX; default &#8216;<SAMP><SPAN class=samp>weave</SPAN></SAMP>&#8217;. </FONT><A name=index-weave-917></A><BR>
<DT><FONT class=extract><CODE>CWEAVE</CODE> </FONT>
<DD><A name=index-CWEAVE-918></A><FONT class=extract>Program to translate C Web into TeX; default &#8216;<SAMP><SPAN class=samp>cweave</SPAN></SAMP>&#8217;. </FONT><A name=index-cweave-919></A><BR>
<DT><FONT class=extract><CODE>TANGLE</CODE> </FONT>
<DD><A name=index-TANGLE-920></A><FONT class=extract>Program to translate Web into Pascal; default &#8216;<SAMP><SPAN class=samp>tangle</SPAN></SAMP>&#8217;. </FONT><A name=index-tangle-921></A><BR>
<DT><FONT class=extract><CODE>CTANGLE</CODE> </FONT>
<DD><A name=index-CTANGLE-922></A><FONT class=extract>Program to translate C Web into C; default &#8216;<SAMP><SPAN class=samp>ctangle</SPAN></SAMP>&#8217;. </FONT><A name=index-ctangle-923></A><BR>
<DT><FONT class=extract><CODE>RM</CODE> </FONT>
<DD><A name=index-RM-924></A><FONT class=extract>Command to remove a file; default &#8216;<SAMP><SPAN class=samp>rm -f</SPAN></SAMP>&#8217;. </FONT><A name=index-rm-925></A></DD></DL>
<P><FONT class=extract>Here is a table of variables whose values are additional arguments for the programs above. The default values for all of these is the empty string, unless otherwise noted. </FONT>
<DL>
<DT><FONT class=extract><CODE>ARFLAGS</CODE> </FONT>
<DD><A name=index-ARFLAGS-926></A><FONT class=extract>Flags to give the archive-maintaining program; default &#8216;<SAMP><SPAN class=samp>rv</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract><CODE>ASFLAGS</CODE> </FONT>
<DD><A name=index-ASFLAGS-927></A><FONT class=extract>Extra flags to give to the assembler (when explicitly invoked on a &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>.S</SPAN></SAMP>&#8217; file). <BR></FONT>
<DT><FONT class=extract><CODE>CFLAGS</CODE> </FONT>
<DD><A name=index-CFLAGS-928></A><FONT class=extract>Extra flags to give to the C compiler. <BR></FONT>
<DT><FONT class=extract><CODE>CXXFLAGS</CODE> </FONT>
<DD><A name=index-CXXFLAGS-929></A><FONT class=extract>Extra flags to give to the C++ compiler. <BR></FONT>
<DT><FONT class=extract><CODE>COFLAGS</CODE> </FONT>
<DD><A name=index-COFLAGS-930></A><FONT class=extract>Extra flags to give to the RCS <CODE>co</CODE> program. <BR></FONT>
<DT><FONT class=extract><CODE>CPPFLAGS</CODE> </FONT>
<DD><A name=index-CPPFLAGS-931></A><FONT class=extract>Extra flags to give to the C preprocessor and programs that use it (the C and Fortran compilers). <BR></FONT>
<DT><FONT class=extract><CODE>FFLAGS</CODE> </FONT>
<DD><A name=index-FFLAGS-932></A><FONT class=extract>Extra flags to give to the Fortran compiler. <BR></FONT>
<DT><FONT class=extract><CODE>GFLAGS</CODE> </FONT>
<DD><A name=index-GFLAGS-933></A><FONT class=extract>Extra flags to give to the SCCS <CODE>get</CODE> program. <BR></FONT>
<DT><FONT class=extract><CODE>LDFLAGS</CODE> </FONT>
<DD><A name=index-LDFLAGS-934></A><FONT class=extract>Extra flags to give to compilers when they are supposed to invoke the linker, &#8216;<SAMP><SPAN class=samp>ld</SPAN></SAMP>&#8217;, such as <CODE>-L</CODE>. Libraries (<CODE>-lfoo</CODE>) should be added to the <CODE>LDLIBS</CODE> variable instead. <BR></FONT>
<DT><FONT class=extract><CODE>LDLIBS</CODE> </FONT>
<DD><A name=index-LDLIBS-935></A><A name=index-LOADLIBES-936></A><FONT class=extract>Library flags or names given to compilers when they are supposed to invoke the linker, &#8216;<SAMP><SPAN class=samp>ld</SPAN></SAMP>&#8217;. <CODE>LOADLIBES</CODE> is a deprecated (but still supported) alternative to <CODE>LDLIBS</CODE>. Non-library linker flags, such as <CODE>-L</CODE>, should go in the <CODE>LDFLAGS</CODE> variable. <BR></FONT>
<DT><FONT class=extract><CODE>LFLAGS</CODE> </FONT>
<DD><A name=index-LFLAGS-937></A><FONT class=extract>Extra flags to give to Lex. <BR></FONT>
<DT><FONT class=extract><CODE>YFLAGS</CODE> </FONT>
<DD><A name=index-YFLAGS-938></A><FONT class=extract>Extra flags to give to Yacc. <BR></FONT>
<DT><FONT class=extract><CODE>PFLAGS</CODE> </FONT>
<DD><A name=index-PFLAGS-939></A><FONT class=extract>Extra flags to give to the Pascal compiler. <BR></FONT>
<DT><FONT class=extract><CODE>RFLAGS</CODE> </FONT>
<DD><A name=index-RFLAGS-940></A><FONT class=extract>Extra flags to give to the Fortran compiler for Ratfor programs. <BR></FONT>
<DT><FONT class=extract><CODE>LINTFLAGS</CODE> </FONT>
<DD><A name=index-LINTFLAGS-941></A><FONT class=extract>Extra flags to give to lint. </FONT></DD></DL>
<DIV class=node><A name=Chained-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=next><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables" rel=previous><FONT class=extract>Implicit Variables</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.4 Chains of Implicit Rules</FONT></H3>
<P><A name=index-chains-of-rules-942></A><A name=index-rule_002c-implicit_002c-chains-of-943></A><FONT class=extract>Sometimes a file can be made by a sequence of implicit rules. For example, a file <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> could be made from <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP> by running first Yacc and then <CODE>cc</CODE>. Such a sequence is called a <DFN>chain</DFN>. </FONT>
<P><FONT class=extract>If the file <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> exists, or is mentioned in the makefile, no special searching is required: <CODE>make</CODE> finds that the object file can be made by C compilation from <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP>; later on, when considering how to make <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP>, the rule for running Yacc is used. Ultimately both <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> and <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> are updated. </FONT>
<P><A name=index-intermediate-files-944></A><A name=index-files_002c-intermediate-945></A><FONT class=extract>However, even if <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> does not exist and is not mentioned, <CODE>make</CODE> knows how to envision it as the missing link between <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> and <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP>! In this case, <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is called an <DFN>intermediate file</DFN>. Once <CODE>make</CODE> has decided to use the intermediate file, it is entered in the data base as if it had been mentioned in the makefile, along with the implicit rule that says how to create it. </FONT>
<P><FONT class=extract>Intermediate files are remade using their rules just like all other files. But intermediate files are treated differently in two ways. </FONT>
<P><FONT class=extract>The first difference is what happens if the intermediate file does not exist. If an ordinary file <VAR>b</VAR> does not exist, and <CODE>make</CODE> considers a target that depends on <VAR>b</VAR>, it invariably creates <VAR>b</VAR> and then updates the target from <VAR>b</VAR>. But if <VAR>b</VAR> is an intermediate file, then <CODE>make</CODE> can leave well enough alone. It won't bother updating <VAR>b</VAR>, or the ultimate target, unless some prerequisite of <VAR>b</VAR> is newer than that target or there is some other reason to update that target. </FONT>
<P><FONT class=extract>The second difference is that if <CODE>make</CODE> <EM>does</EM> create <VAR>b</VAR> in order to update something else, it deletes <VAR>b</VAR> later on after it is no longer needed. Therefore, an intermediate file which did not exist before <CODE>make</CODE> also does not exist after <CODE>make</CODE>. <CODE>make</CODE> reports the deletion to you by printing a &#8216;<SAMP><SPAN class=samp>rm -f</SPAN></SAMP>&#8217; command showing which file it is deleting. </FONT>
<P><FONT class=extract>Ordinarily, a file cannot be intermediate if it is mentioned in the makefile as a target or prerequisite. However, you can explicitly mark a file as intermediate by listing it as a prerequisite of the special target <CODE>.INTERMEDIATE</CODE>. This takes effect even if the file is mentioned explicitly in some other way. </FONT>
<P><A name=index-intermediate-files_002c-preserving-946></A><A name=index-preserving-intermediate-files-947></A><A name=index-secondary-files-948></A><FONT class=extract>You can prevent automatic deletion of an intermediate file by marking it as a <DFN>secondary</DFN> file. To do this, list it as a prerequisite of the special target <CODE>.SECONDARY</CODE>. When a file is secondary, <CODE>make</CODE> will not create the file merely because it does not already exist, but <CODE>make</CODE> does not automatically delete the file. Marking a file as secondary also marks it as intermediate. </FONT>
<P><FONT class=extract>You can list the target pattern of an implicit rule (such as &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217;) as a prerequisite of the special target <CODE>.PRECIOUS</CODE> to preserve intermediate files made by implicit rules whose target patterns match that file's name; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Interrupts"><FONT class=extract>Interrupts</FONT></A><FONT class=extract>. </FONT><A name=index-preserving-with-_0040code_007b_002ePRECIOUS_007d-949></A><A name=index-g_t_0040code_007b_002ePRECIOUS_007d-intermediate-files-950></A><FONT class=extract>A chain can involve more than two implicit rules. For example, it is possible to make a file <SAMP><SPAN class=file>foo</SPAN></SAMP> from <SAMP><SPAN class=file>RCS/foo.y,v</SPAN></SAMP> by running RCS, Yacc and <CODE>cc</CODE>. Then both <SAMP><SPAN class=file>foo.y</SPAN></SAMP> and <SAMP><SPAN class=file>foo.c</SPAN></SAMP> are intermediate files that are deleted at the end. </FONT>
<P><FONT class=extract>No single implicit rule can appear more than once in a chain. This means that <CODE>make</CODE> will not even consider such a ridiculous thing as making <SAMP><SPAN class=file>foo</SPAN></SAMP> from <SAMP><SPAN class=file>foo.o.o</SPAN></SAMP> by running the linker twice. This constraint has the added benefit of preventing any infinite loop in the search for an implicit rule chain. </FONT>
<P><FONT class=extract>There are some special implicit rules to optimize certain cases that would otherwise be handled by rule chains. For example, making <SAMP><SPAN class=file>foo</SPAN></SAMP> from <SAMP><SPAN class=file>foo.c</SPAN></SAMP> could be handled by compiling and linking with separate chained rules, using <SAMP><SPAN class=file>foo.o</SPAN></SAMP> as an intermediate file. But what actually happens is that a special rule for this case does the compilation and linking with a single <CODE>cc</CODE> command. The optimized rule is used in preference to the step-by-step chain because it comes earlier in the ordering of rules. </FONT>
<DIV class=node><A name=Pattern-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Last-Resort" rel=next><FONT class=extract>Last Resort</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules" rel=previous><FONT class=extract>Chained Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.5 Defining and Redefining Pattern Rules</FONT></H3>
<P><FONT class=extract>You define an implicit rule by writing a <DFN>pattern rule</DFN>. A pattern rule looks like an ordinary rule, except that its target contains the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; (exactly one of them). The target is considered a pattern for matching file names; the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; can match any nonempty substring, while other characters match only themselves. The prerequisites likewise use &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; to show how their names relate to the target name. </FONT>
<P><FONT class=extract>Thus, a pattern rule &#8216;<SAMP><SPAN class=samp>%.o : %.c</SPAN></SAMP>&#8217; says how to make any file <SAMP><VAR>stem</VAR><SPAN class=file>.o</SPAN></SAMP> from another file <SAMP><VAR>stem</VAR><SPAN class=file>.c</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Note that expansion using &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in pattern rules occurs <STRONG>after</STRONG> any variable or function expansions, which take place when the makefile is read. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>, and </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro"><FONT class=extract>Pattern Intro</FONT></A><FONT class=extract>: An introduction to pattern rules. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Pattern-Examples"><FONT class=extract>Pattern Examples</FONT></A><FONT class=extract>: Examples of pattern rules. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>: How to use automatic variables in the recipe of implicit rules. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>Pattern Match</FONT></A><FONT class=extract>: How patterns match. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>: Precautions you should take prior to defining rules that can match any target file whatever. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules"><FONT class=extract>Canceling Rules</FONT></A><FONT class=extract>: How to override or cancel built-in rules. </FONT></LI></UL>
<DIV class=node><A name=Pattern-Intro></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Pattern-Examples" rel=next><FONT class=extract>Pattern Examples</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=previous><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.1 Introduction to Pattern Rules</FONT></H4>
<P><A name=index-pattern-rule-951></A><A name=index-rule_002c-pattern-952></A><FONT class=extract>A pattern rule contains the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; (exactly one of them) in the target; otherwise, it looks exactly like an ordinary rule. The target is a pattern for matching file names; the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; matches any nonempty substring, while other characters match only themselves. </FONT><A name=index-target-pattern_002c-implicit-953></A><A name=index-g_t_0040code_007b_0025_007d_002c-in-pattern-rules-954></A><FONT class=extract>For example, &#8216;<SAMP><SPAN class=samp>%.c</SPAN></SAMP>&#8217; as a pattern matches any file name that ends in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;. &#8216;<SAMP><SPAN class=samp>s.%.c</SPAN></SAMP>&#8217; as a pattern matches any file name that starts with &#8216;<SAMP><SPAN class=samp>s.</SPAN></SAMP>&#8217;, ends in &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and is at least five characters long. (There must be at least one character to match the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;.) The substring that the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; matches is called the <DFN>stem</DFN>. </FONT>
<P><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in a prerequisite of a pattern rule stands for the same stem that was matched by the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the target. In order for the pattern rule to apply, its target pattern must match the file name under consideration and all of its prerequisites (after pattern substitution) must name files that exist or can be made. These files become prerequisites of the target. </FONT><A name=index-prerequisite-pattern_002c-implicit-955></A><FONT class=extract>Thus, a rule of the form </FONT><PRE class=example><FONT class=extract>     %.o : %.c ; <VAR>recipe</VAR>...
</FONT></PRE>
<P class=noindent><FONT class=extract>specifies how to make a file <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP>, with another file <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> as its prerequisite, provided that <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> exists or can be made. </FONT>
<P><FONT class=extract>There may also be prerequisites that do not use &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;; such a prerequisite attaches to every file made by this pattern rule. These unvarying prerequisites are useful occasionally. </FONT>
<P><FONT class=extract>A pattern rule need not have any prerequisites that contain &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, or in fact any prerequisites at all. Such a rule is effectively a general wildcard. It provides a way to make any file that matches the target pattern. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort"><FONT class=extract>Last Resort</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>More than one pattern rule may match a target. In this case <CODE>make</CODE> will choose the &#8220;best fit&#8221; rule. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>. <!-- !!! The end of of this paragraph should be rewritten.  -bob --></FONT>
<P><FONT class=extract>Pattern rules may have more than one target. Unlike normal rules, this does not act as many different rules with the same prerequisites and recipe. If a pattern rule has multiple targets, <CODE>make</CODE> knows that the rule's recipe is responsible for making all of the targets. The recipe is executed only once to make all the targets. When searching for a pattern rule to match a target, the target patterns of a rule other than the one that matches the target in need of a rule are incidental: <CODE>make</CODE> worries only about giving a recipe and prerequisites to the file presently in question. However, when this file's recipe is run, the other targets are marked as having been updated themselves. </FONT><A name=index-multiple-targets_002c-in-pattern-rule-956></A><A name=index-target_002c-multiple-in-pattern-rule-957></A>
<DIV class=node><A name=Pattern-Examples></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables" rel=next><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro" rel=previous><FONT class=extract>Pattern Intro</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.2 Pattern Rule Examples</FONT></H4>
<P><FONT class=extract>Here are some examples of pattern rules actually predefined in <CODE>make</CODE>. First, the rule that compiles &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files into &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files: </FONT><PRE class=example><FONT class=extract>     %.o : %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>defines a rule that can make any file <SAMP><VAR>x</VAR><SPAN class=file>.o</SPAN></SAMP> from <SAMP><VAR>x</VAR><SPAN class=file>.c</SPAN></SAMP>. The recipe uses the automatic variables &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; to substitute the names of the target file and the source file in each case where the rule applies (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Here is a second built-in rule: </FONT><PRE class=example><FONT class=extract>     % :: RCS/%,v
             $(CO) $(COFLAGS) $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>defines a rule that can make any file <SAMP><VAR>x</VAR></SAMP> whatsoever from a corresponding file <SAMP><VAR>x</VAR><SPAN class=file>,v</SPAN></SAMP> in the sub-directory <SAMP><SPAN class=file>RCS</SPAN></SAMP>. Since the target is &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, this rule will apply to any file whatever, provided the appropriate prerequisite file exists. The double colon makes the rule <DFN>terminal</DFN>, which means that its prerequisite may not be an intermediate file (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>This pattern rule has two targets: </FONT><PRE class=example><FONT class=extract>     %.tab.c %.tab.h: %.y
             bison -d $&lt;
</FONT></PRE>
<P class=noindent><!-- The following paragraph is rewritten to avoid overfull hboxes --><FONT class=extract>This tells <CODE>make</CODE> that the recipe &#8216;<SAMP><SPAN class=samp>bison -d </SPAN><VAR>x</VAR><SPAN class=samp>.y</SPAN></SAMP>&#8217; will make both <SAMP><VAR>x</VAR><SPAN class=file>.tab.c</SPAN></SAMP> and <SAMP><VAR>x</VAR><SPAN class=file>.tab.h</SPAN></SAMP>. If the file <SAMP><SPAN class=file>foo</SPAN></SAMP> depends on the files <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> depends on the file <SAMP><SPAN class=file>parse.tab.h</SPAN></SAMP>, when <SAMP><SPAN class=file>parse.y</SPAN></SAMP> is changed, the recipe &#8216;<SAMP><SPAN class=samp>bison -d parse.y</SPAN></SAMP>&#8217; will be executed only once, and the prerequisites of both <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> will be satisfied. (Presumably the file <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> will be recompiled from <SAMP><SPAN class=file>parse.tab.c</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> from <SAMP><SPAN class=file>scan.c</SPAN></SAMP>, while <SAMP><SPAN class=file>foo</SPAN></SAMP> is linked from <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP>, <SAMP><SPAN class=file>scan.o</SPAN></SAMP>, and its other prerequisites, and it will execute happily ever after.) </FONT>
<DIV class=node><A name=Automatic-Variables></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match" rel=next><FONT class=extract>Pattern Match</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern-Examples" rel=previous><FONT class=extract>Pattern Examples</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.3 Automatic Variables</FONT></H4>
<P><A name=index-automatic-variables-958></A><A name=index-variables_002c-automatic-959></A><A name=index-variables_002c-and-implicit-rule-960></A><FONT class=extract>Suppose you are writing a pattern rule to compile a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file into a &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file: how do you write the &#8216;<SAMP><SPAN class=samp>cc</SPAN></SAMP>&#8217; command so that it operates on the right source file name? You cannot write the name in the recipe, because the name is different each time the implicit rule is applied. </FONT>
<P><FONT class=extract>What you do is use a special feature of <CODE>make</CODE>, the <DFN>automatic variables</DFN>. These variables have values computed afresh for each rule that is executed, based on the target and prerequisites of the rule. In this example, you would use &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; for the object file name and &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; for the source file name. </FONT>
<P><A name=index-automatic-variables-in-prerequisites-961></A><A name=index-prerequisites_002c-and-automatic-variables-962></A><FONT class=extract>It's very important that you recognize the limited scope in which automatic variable values are available: they only have values within the recipe. In particular, you cannot use them anywhere within the target list of a rule; they have no value there and will expand to the empty string. Also, they cannot be accessed directly within the prerequisite list of a rule. A common mistake is attempting to use <CODE>$@</CODE> within the prerequisites list; this will not work. However, there is a special feature of GNU <CODE>make</CODE>, secondary expansion (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>), which will allow automatic variable values to be used in prerequisite lists. </FONT>
<P><FONT class=extract>Here is a table of automatic variables: </FONT><A name=index-g_t_0024_0040_0040-963></A><A name=index-g_t_0040_0040-_0040r_007b_0028automatic-variable_0029_007d-964></A>
<DL>
<DT><FONT class=extract><CODE>$@</CODE> </FONT>
<DD><FONT class=extract>The file name of the target of the rule. If the target is an archive member, then &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of the archive file. In a pattern rule that has multiple targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro"><FONT class=extract>Introduction to Pattern Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of whichever target caused the rule's recipe to be run. </FONT>
<P><A name=index-g_t_0024_0025-965></A><A name=index-g_t_0025-_0040r_007b_0028automatic-variable_0029_007d-966></A><BR></P>
<DT><FONT class=extract><CODE>$%</CODE> </FONT>
<DD><FONT class=extract>The target member name, when the target is an archive member. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>. For example, if the target is <SAMP><SPAN class=file>foo.a(bar.o)</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o</SPAN></SAMP> and &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>foo.a</SPAN></SAMP>. &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is empty when the target is not an archive member. </FONT>
<P><A name=index-g_t_0024_003c-967></A><A name=index-g_t_003c-_0040r_007b_0028automatic-variable_0029_007d-968></A><BR></P>
<DT><FONT class=extract><CODE>$&lt;</CODE> </FONT>
<DD><FONT class=extract>The name of the first prerequisite. If the target got its recipe from an implicit rule, this will be the first prerequisite added by the implicit rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0024_003f-969></A><A name=index-g_t_003f-_0040r_007b_0028automatic-variable_0029_007d-970></A><BR></P>
<DT><FONT class=extract><CODE>$?</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites that are newer than the target, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). </FONT><A name=index-prerequisites_002c-list-of-changed-971></A><A name=index-list-of-changed-prerequisites-972></A><A name=index-g_t_0024_005e-973></A><A name=index-g_t_005e-_0040r_007b_0028automatic-variable_0029_007d-974></A><BR>
<DT><FONT class=extract><CODE>$^</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). A target has only one prerequisite on each other file it depends on, no matter how many times each file is listed as a prerequisite. So if you list a prerequisite more than once for a target, the value of <CODE>$^</CODE> contains just one copy of the name. This list does <STRONG>not</STRONG> contain any of the order-only prerequisites; for those see the &#8216;<SAMP><SPAN class=samp>$|</SPAN></SAMP>&#8217; variable, below. </FONT><A name=index-prerequisites_002c-list-of-all-975></A><A name=index-list-of-all-prerequisites-976></A><A name=index-g_t_0024_002b-977></A><A name=index-g_t_002b-_0040r_007b_0028automatic-variable_0029_007d-978></A><BR>
<DT><FONT class=extract><CODE>$+</CODE> </FONT>
<DD><FONT class=extract>This is like &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217;, but prerequisites listed more than once are duplicated in the order they were listed in the makefile. This is primarily useful for use in linking commands where it is meaningful to repeat library file names in a particular order. </FONT>
<P><A name=index-g_t_0024_007c-979></A><A name=index-g_t_007c-_0040r_007b_0028automatic-variable_0029_007d-980></A><BR></P>
<DT><FONT class=extract><CODE>$|</CODE> </FONT>
<DD><FONT class=extract>The names of all the order-only prerequisites, with spaces between them. </FONT>
<P><A name=index-g_t_0024_002a-981></A><A name=index-g_t_002a-_0040r_007b_0028automatic-variable_0029_007d-982></A><BR></P>
<DT><FONT class=extract><CODE>$*</CODE> </FONT>
<DD><FONT class=extract>The stem with which an implicit rule matches (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>). If the target is <SAMP><SPAN class=file>dir/a.foo.b</SPAN></SAMP> and the target pattern is <SAMP><SPAN class=file>a.%.b</SPAN></SAMP> then the stem is <SAMP><SPAN class=file>dir/foo</SPAN></SAMP>. The stem is useful for constructing names of related files. </FONT><A name=index-stem_002c-variable-for-983></A><FONT class=extract>In a static pattern rule, the stem is part of the file name that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the target pattern. </FONT>
<P><FONT class=extract>In an explicit rule, there is no stem; so &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; cannot be determined in that way. Instead, if the target name ends with a recognized suffix (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the target name minus the suffix. For example, if the target name is &#8216;<SAMP><SPAN class=samp>foo.c</SPAN></SAMP>&#8217;, then &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;, since &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; is a suffix. GNU <CODE>make</CODE> does this bizarre thing only for compatibility with other implementations of <CODE>make</CODE>. You should generally avoid using &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; except in implicit rules or static pattern rules. </FONT>
<P><FONT class=extract>If the target name in an explicit rule does not end with a recognized suffix, &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the empty string for that rule. </FONT></P></DD></DL>
<P><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$?</SPAN></SAMP>&#8217; is useful even in explicit rules when you wish to operate on only the prerequisites that have changed. For example, suppose that an archive named <SAMP><SPAN class=file>lib</SPAN></SAMP> is supposed to contain copies of several object files. This rule copies just the changed object files into the archive: </FONT><PRE class=example><FONT class=extract>     lib: foo.o bar.o lose.o win.o
             ar r lib $?
</FONT></PRE>
<P><FONT class=extract>Of the variables listed above, four have values that are single file names, and three have values that are lists of file names. These seven have variants that get just the file's directory name or just the file name within the directory. The variant variables' names are formed by appending &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217;, respectively. These variants are semi-obsolete in GNU <CODE>make</CODE> since the functions <CODE>dir</CODE> and <CODE>notdir</CODE> can be used to get a similar effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>). Note, however, that the &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217; variants all omit the trailing slash which always appears in the output of the <CODE>dir</CODE> function. Here is a table of the variants: </FONT><A name=index-g_t_0024_0028_0040_0040D_0029-984></A><A name=index-g_t_0040_0040D-_0040r_007b_0028automatic-variable_0029_007d-985></A>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(@D)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part of the file name of the target, with the trailing slash removed. If the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir/foo.o</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$(@D)</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir</SPAN></SAMP>. This value is <SAMP><SPAN class=file>.</SPAN></SAMP> if &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; does not contain a slash. </FONT>
<P><A name=index-g_t_0024_0028_0040_0040F_0029-986></A><A name=index-g_t_0040_0040F-_0040r_007b_0028automatic-variable_0029_007d-987></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The file-within-directory part of the file name of the target. If the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir/foo.o</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>foo.o</SPAN></SAMP>. &#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; is equivalent to &#8216;<SAMP><SPAN class=samp>$(notdir $@)</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_0024_0028_002aD_0029-988></A><A name=index-g_t_002aD-_0040r_007b_0028automatic-variable_0029_007d-989></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(*D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_002aF_0029-990><FONT class=extract></FONT></A><A name=index-g_t_002aF-_0040r_007b_0028automatic-variable_0029_007d-991></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(*F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the stem; <SAMP><SPAN class=file>dir</SPAN></SAMP> and <SAMP><SPAN class=file>foo</SPAN></SAMP> in this example. </FONT>
<P><A name=index-g_t_0024_0028_0025D_0029-992></A><A name=index-g_t_0025D-_0040r_007b_0028automatic-variable_0029_007d-993></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(%D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_0025F_0029-994><FONT class=extract></FONT></A><A name=index-g_t_0025F-_0040r_007b_0028automatic-variable_0029_007d-995></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(%F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the target archive member name. This makes sense only for archive member targets of the form <SAMP><VAR>archive</VAR><SPAN class=file>(</SPAN><VAR>member</VAR><SPAN class=file>)</SPAN></SAMP> and is useful only when <VAR>member</VAR> may contain a directory name. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members as Targets</FONT></A><FONT class=extract>.) </FONT>
<P><A name=index-g_t_0024_0028_003cD_0029-996></A><A name=index-g_t_003cD-_0040r_007b_0028automatic-variable_0029_007d-997></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(&lt;D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_003cF_0029-998><FONT class=extract></FONT></A><A name=index-g_t_003cF-_0040r_007b_0028automatic-variable_0029_007d-999></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(&lt;F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the first prerequisite. </FONT>
<P><A name=index-g_t_0024_0028_005eD_0029-1000></A><A name=index-g_t_005eD-_0040r_007b_0028automatic-variable_0029_007d-1001></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(^D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_005eF_0029-1002><FONT class=extract></FONT></A><A name=index-g_t_005eF-_0040r_007b_0028automatic-variable_0029_007d-1003></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(^F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites. </FONT>
<P><A name=index-g_t_0024_0028_002bD_0029-1004></A><A name=index-g_t_002bD-_0040r_007b_0028automatic-variable_0029_007d-1005></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(+D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_002bF_0029-1006><FONT class=extract></FONT></A><A name=index-g_t_002bF-_0040r_007b_0028automatic-variable_0029_007d-1007></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(+F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites, including multiple instances of duplicated prerequisites. </FONT>
<P><A name=index-g_t_0024_0028_003fD_0029-1008></A><A name=index-g_t_003fD-_0040r_007b_0028automatic-variable_0029_007d-1009></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(?D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_003fF_0029-1010><FONT class=extract></FONT></A><A name=index-g_t_003fF-_0040r_007b_0028automatic-variable_0029_007d-1011></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(?F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites that are newer than the target. </FONT></DD></DL>
<P><FONT class=extract>Note that we use a special stylistic convention when we talk about these automatic variables; we write &#8220;the value of &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217;&#8221;, rather than &#8220;the&nbsp;variable&nbsp;<CODE>&lt;</CODE>&#8221;<!-- /@w --> as we would write for ordinary variables such as <CODE>objects</CODE> and <CODE>CFLAGS</CODE>. We think this convention looks more natural in this special case. Please do not assume it has a deep significance; &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; refers to the variable named <CODE>&lt;</CODE> just as &#8216;<SAMP><SPAN class=samp>$(CFLAGS)</SPAN></SAMP>&#8217; refers to the variable named <CODE>CFLAGS</CODE>. You could just as well use &#8216;<SAMP><SPAN class=samp>$(&lt;)</SPAN></SAMP>&#8217; in place of &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217;. </FONT>
<DIV class=node><A name=Pattern-Match></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules" rel=next><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables" rel=previous><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.4 How Patterns Match</FONT></H4>
<P><A name=index-stem-1012></A><FONT class=extract>A target pattern is composed of a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; between a prefix and a suffix, either or both of which may be empty. The pattern matches a file name only if the file name starts with the prefix and ends with the suffix, without overlap. The text between the prefix and the suffix is called the <DFN>stem</DFN>. Thus, when the pattern &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217; matches the file name <SAMP><SPAN class=file>test.o</SPAN></SAMP>, the stem is &#8216;<SAMP><SPAN class=samp>test</SPAN></SAMP>&#8217;. The pattern rule prerequisites are turned into actual file names by substituting the stem for the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. Thus, if in the same example one of the prerequisites is written as &#8216;<SAMP><SPAN class=samp>%.c</SPAN></SAMP>&#8217;, it expands to &#8216;<SAMP><SPAN class=samp>test.c</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>When the target pattern does not contain a slash (and it usually does not), directory names in the file names are removed from the file name before it is compared with the target prefix and suffix. After the comparison of the file name to the target pattern, the directory names, along with the slash that ends them, are added on to the prerequisite file names generated from the pattern rule's prerequisite patterns and the file name. The directories are ignored only for the purpose of finding an implicit rule to use, not in the application of that rule. Thus, &#8216;<SAMP><SPAN class=samp>e%t</SPAN></SAMP>&#8217; matches the file name <SAMP><SPAN class=file>src/eat</SPAN></SAMP>, with &#8216;<SAMP><SPAN class=samp>src/a</SPAN></SAMP>&#8217; as the stem. When prerequisites are turned into file names, the directories from the stem are added at the front, while the rest of the stem is substituted for the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. The stem &#8216;<SAMP><SPAN class=samp>src/a</SPAN></SAMP>&#8217; with a prerequisite pattern &#8216;<SAMP><SPAN class=samp>c%r</SPAN></SAMP>&#8217; gives the file name <SAMP><SPAN class=file>src/car</SPAN></SAMP>. </FONT>
<P><A name=index-pattern-rules_002c-order-of-1013></A><A name=index-order-of-pattern-rules-1014></A><FONT class=extract>A pattern rule can be used to build a given file only if there is a target pattern that matches the file name, <EM>and</EM> all prerequisites in that rule either exist or can be built. The rules you write take precedence over those that are built in. Note however, that a rule whose prerequisites actually exist or are mentioned always takes priority over a rule with prerequisites that must be made by chaining other implicit rules. </FONT>
<P><A name=index-stem_002c-shortest-1015></A><FONT class=extract>It is possible that more than one pattern rule will meet these criteria. In that case, <CODE>make</CODE> will choose the rule with the shortest stem (that is, the pattern that matches most specifically). If more than one pattern rule has the shortest stem, <CODE>make</CODE> will choose the first one found in the makefile. </FONT>
<P><FONT class=extract>This algorithm results in more specific rules being preferred over more generic ones; for example: </FONT><PRE class=example><FONT class=extract>     %.o: %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
     
     %.o : %.f
             $(COMPILE.F) $(OUTPUT_OPTION) $&lt;
     
     lib/%.o: lib/%.c
             $(CC) -fPIC -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</FONT></PRE>
<P><FONT class=extract>Given these rules and asked to build <SAMP><SPAN class=file>bar.o</SPAN></SAMP> where both <SAMP><SPAN class=file>bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>bar.f</SPAN></SAMP> exist, <CODE>make</CODE> will choose the first rule and compile <SAMP><SPAN class=file>bar.c</SPAN></SAMP> into <SAMP><SPAN class=file>bar.o</SPAN></SAMP>. In the same situation where <SAMP><SPAN class=file>bar.c</SPAN></SAMP> does not exist, then <CODE>make</CODE> will choose the second rule and compile <SAMP><SPAN class=file>bar.f</SPAN></SAMP> into <SAMP><SPAN class=file>bar.o</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If <CODE>make</CODE> is asked to build <SAMP><SPAN class=file>lib/bar.o</SPAN></SAMP> and both <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>lib/bar.f</SPAN></SAMP> exist, then the third rule will be chosen since the stem for this rule (&#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;) is shorter than the stem for the first rule (&#8216;<SAMP><SPAN class=samp>lib/bar</SPAN></SAMP>&#8217;). If <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> does not exist then the third rule is not eligible and the second rule will be used, even though the stem is longer. </FONT>
<DIV class=node><A name=Match-Anything-Rules></A><A name=Match_002dAnything-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules" rel=next><FONT class=extract>Canceling Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match" rel=previous><FONT class=extract>Pattern Match</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.5 Match-Anything Pattern Rules</FONT></H4>
<P><A name=index-match_002danything-rule-1016></A><A name=index-terminal-rule-1017></A><FONT class=extract>When a pattern rule's target is just &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, it matches any file name whatever. We call these rules <DFN>match-anything</DFN> rules. They are very useful, but it can take a lot of time for <CODE>make</CODE> to think about them, because it must consider every such rule for each file name listed either as a target or as a prerequisite. </FONT>
<P><FONT class=extract>Suppose the makefile mentions <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. For this target, <CODE>make</CODE> would have to consider making it by linking an object file <SAMP><SPAN class=file>foo.c.o</SPAN></SAMP>, or by C compilation-and-linking in one step from <SAMP><SPAN class=file>foo.c.c</SPAN></SAMP>, or by Pascal compilation-and-linking from <SAMP><SPAN class=file>foo.c.p</SPAN></SAMP>, and many other possibilities. </FONT>
<P><FONT class=extract>We know these possibilities are ridiculous since <SAMP><SPAN class=file>foo.c</SPAN></SAMP> is a C source file, not an executable. If <CODE>make</CODE> did consider these possibilities, it would ultimately reject them, because files such as <SAMP><SPAN class=file>foo.c.o</SPAN></SAMP> and <SAMP><SPAN class=file>foo.c.p</SPAN></SAMP> would not exist. But these possibilities are so numerous that <CODE>make</CODE> would run very slowly if it had to consider them. </FONT>
<P><FONT class=extract>To gain speed, we have put various constraints on the way <CODE>make</CODE> considers match-anything rules. There are two different constraints that can be applied, and each time you define a match-anything rule you must choose one or the other for that rule. </FONT>
<P><FONT class=extract>One choice is to mark the match-anything rule as <DFN>terminal</DFN> by defining it with a double colon. When a rule is terminal, it does not apply unless its prerequisites actually exist. Prerequisites that could be made with other implicit rules are not good enough. In other words, no further chaining is allowed beyond a terminal rule. </FONT>
<P><FONT class=extract>For example, the built-in implicit rules for extracting sources from RCS and SCCS files are terminal; as a result, if the file <SAMP><SPAN class=file>foo.c,v</SPAN></SAMP> does not exist, <CODE>make</CODE> will not even consider trying to make it as an intermediate file from <SAMP><SPAN class=file>foo.c,v.o</SPAN></SAMP> or from <SAMP><SPAN class=file>RCS/SCCS/s.foo.c,v</SPAN></SAMP>. RCS and SCCS files are generally ultimate source files, which should not be remade from any other files; therefore, <CODE>make</CODE> can save time by not looking for ways to remake them. </FONT>
<P><FONT class=extract>If you do not mark the match-anything rule as terminal, then it is non-terminal. A non-terminal match-anything rule cannot apply to a file name that indicates a specific type of data. A file name indicates a specific type of data if some non-match-anything implicit rule target matches it. </FONT>
<P><FONT class=extract>For example, the file name <SAMP><SPAN class=file>foo.c</SPAN></SAMP> matches the target for the pattern rule &#8216;<SAMP><SPAN class=samp>%.c : %.y</SPAN></SAMP>&#8217; (the rule to run Yacc). Regardless of whether this rule is actually applicable (which happens only if there is a file <SAMP><SPAN class=file>foo.y</SPAN></SAMP>), the fact that its target matches is enough to prevent consideration of any non-terminal match-anything rules for the file <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. Thus, <CODE>make</CODE> will not even consider trying to make <SAMP><SPAN class=file>foo.c</SPAN></SAMP> as an executable file from <SAMP><SPAN class=file>foo.c.o</SPAN></SAMP>, <SAMP><SPAN class=file>foo.c.c</SPAN></SAMP>, <SAMP><SPAN class=file>foo.c.p</SPAN></SAMP>, etc. </FONT>
<P><FONT class=extract>The motivation for this constraint is that non-terminal match-anything rules are used for making files containing specific types of data (such as executable files) and a file name with a recognized suffix indicates some other specific type of data (such as a C source file). </FONT>
<P><FONT class=extract>Special built-in dummy pattern rules are provided solely to recognize certain file names so that non-terminal match-anything rules will not be considered. These dummy rules have no prerequisites and no recipes, and they are ignored for all other purposes. For example, the built-in implicit rule </FONT><PRE class=example><FONT class=extract>     %.p :
</FONT></PRE>
<P class=noindent><FONT class=extract>exists to make sure that Pascal source files such as <SAMP><SPAN class=file>foo.p</SPAN></SAMP> match a specific target pattern and thereby prevent time from being wasted looking for <SAMP><SPAN class=file>foo.p.o</SPAN></SAMP> or <SAMP><SPAN class=file>foo.p.c</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Dummy pattern rules such as the one for &#8216;<SAMP><SPAN class=samp>%.p</SPAN></SAMP>&#8217; are made for every suffix listed as valid for use in suffix rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>). </FONT>
<DIV class=node><A name=Canceling-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules" rel=previous><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=up><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>10.5.6 Canceling Implicit Rules</FONT></H4>
<P><FONT class=extract>You can override a built-in implicit rule (or one you have defined yourself) by defining a new pattern rule with the same target and prerequisites, but a different recipe. When the new rule is defined, the built-in one is replaced. The new rule's position in the sequence of implicit rules is determined by where you write the new rule. </FONT>
<P><FONT class=extract>You can cancel a built-in implicit rule by defining a pattern rule with the same target and prerequisites, but no recipe. For example, the following would cancel the rule that runs the assembler: </FONT><PRE class=example><FONT class=extract>     %.o : %.s
</FONT></PRE>
<DIV class=node><A name=Last-Resort></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules" rel=next><FONT class=extract>Suffix Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel=previous><FONT class=extract>Pattern Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.6 Defining Last-Resort Default Rules</FONT></H3>
<P><A name=index-last_002dresort-default-rules-1018></A><A name=index-default-rules_002c-last_002dresort-1019></A><FONT class=extract>You can define a last-resort implicit rule by writing a terminal match-anything pattern rule with no prerequisites (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>). This is just like any other pattern rule; the only thing special about it is that it will match any target. So such a rule's recipe is used for all targets and prerequisites that have no recipe of their own and for which no other implicit rule applies. </FONT>
<P><FONT class=extract>For example, when testing a makefile, you might not care if the source files contain real data, only that they exist. Then you might do this: </FONT><PRE class=example><FONT class=extract>     %::
             touch $@
</FONT></PRE>
<P class=noindent><FONT class=extract>to cause all the source files needed (as prerequisites) to be created automatically. </FONT>
<P><A name=index-g_t_002eDEFAULT-1020></A><FONT class=extract>You can instead define a recipe to be used for targets for which there are no rules at all, even ones which don't specify recipes. You do this by writing a rule for the target <CODE>.DEFAULT</CODE>. Such a rule's recipe is used for all prerequisites which do not appear as targets in any explicit rule, and for which no implicit rule applies. Naturally, there is no <CODE>.DEFAULT</CODE> rule unless you write one. </FONT>
<P><FONT class=extract>If you use <CODE>.DEFAULT</CODE> with no recipe or prerequisites: </FONT><PRE class=example><FONT class=extract>     .DEFAULT:
</FONT></PRE>
<P class=noindent><FONT class=extract>the recipe previously stored for <CODE>.DEFAULT</CODE> is cleared. Then <CODE>make</CODE> acts as if you had never defined <CODE>.DEFAULT</CODE> at all. </FONT>
<P><FONT class=extract>If you do not want a target to get the recipe from a match-anything pattern rule or <CODE>.DEFAULT</CODE>, but you also do not want any recipe to be run for the target, you can give it an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Defining Empty Recipes</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>You can use a last-resort rule to override part of another makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles"><FONT class=extract>Overriding Part of Another Makefile</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Suffix-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search" rel=next><FONT class=extract>Implicit Rule Search</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Last-Resort" rel=previous><FONT class=extract>Last Resort</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.7 Old-Fashioned Suffix Rules</FONT></H3>
<P><A name=index-old_002dfashioned-suffix-rules-1021></A><A name=index-suffix-rule-1022></A><FONT class=extract><DFN>Suffix rules</DFN> are the old-fashioned way of defining implicit rules for <CODE>make</CODE>. Suffix rules are obsolete because pattern rules are more general and clearer. They are supported in GNU <CODE>make</CODE> for compatibility with old makefiles. They come in two kinds: <DFN>double-suffix</DFN> and <DFN>single-suffix</DFN>. </FONT>
<P><FONT class=extract>A double-suffix rule is defined by a pair of suffixes: the target suffix and the source suffix. It matches any file whose name ends with the target suffix. The corresponding implicit prerequisite is made by replacing the target suffix with the source suffix in the file name. A two-suffix rule whose target and source suffixes are &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; is equivalent to the pattern rule &#8216;<SAMP><SPAN class=samp>%.o : %.c</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>A single-suffix rule is defined by a single suffix, which is the source suffix. It matches any file name, and the corresponding implicit prerequisite name is made by appending the source suffix. A single-suffix rule whose source suffix is &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; is equivalent to the pattern rule &#8216;<SAMP><SPAN class=samp>% : %.c</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Suffix rule definitions are recognized by comparing each rule's target against a defined list of known suffixes. When <CODE>make</CODE> sees a rule whose target is a known suffix, this rule is considered a single-suffix rule. When <CODE>make</CODE> sees a rule whose target is two known suffixes concatenated, this rule is taken as a double-suffix rule. </FONT>
<P><FONT class=extract>For example, &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; are both on the default list of known suffixes. Therefore, if you define a rule whose target is &#8216;<SAMP><SPAN class=samp>.c.o</SPAN></SAMP>&#8217;, <CODE>make</CODE> takes it to be a double-suffix rule with source suffix &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and target suffix &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217;. Here is the old-fashioned way to define the rule for compiling a C source file: </FONT><PRE class=example><FONT class=extract>     .c.o:
             $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</FONT></PRE>
<P><FONT class=extract>Suffix rules cannot have any prerequisites of their own. If they have any, they are treated as normal files with funny names, not as suffix rules. Thus, the rule: </FONT><PRE class=example><FONT class=extract>     .c.o: foo.h
             $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>tells how to make the file <SAMP><SPAN class=file>.c.o</SPAN></SAMP> from the prerequisite file <SAMP><SPAN class=file>foo.h</SPAN></SAMP>, and is not at all like the pattern rule: </FONT><PRE class=example><FONT class=extract>     %.o: %.c foo.h
             $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>which tells how to make &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files from &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files, and makes all &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files using this pattern rule also depend on <SAMP><SPAN class=file>foo.h</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Suffix rules with no recipe are also meaningless. They do not remove previous rules as do pattern rules with no recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules"><FONT class=extract>Canceling Implicit Rules</FONT></A><FONT class=extract>). They simply enter the suffix or pair of suffixes concatenated as a target in the data base. </FONT>
<P><A name=index-g_t_002eSUFFIXES-1023></A><FONT class=extract>The known suffixes are simply the names of the prerequisites of the special target <CODE>.SUFFIXES</CODE>. You can add your own suffixes by writing a rule for <CODE>.SUFFIXES</CODE> that adds more prerequisites, as in: </FONT><PRE class=example><FONT class=extract>     .SUFFIXES: .hack .win
</FONT></PRE>
<P class=noindent><FONT class=extract>which adds &#8216;<SAMP><SPAN class=samp>.hack</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.win</SPAN></SAMP>&#8217; to the end of the list of suffixes. </FONT>
<P><FONT class=extract>If you wish to eliminate the default known suffixes instead of just adding to them, write a rule for <CODE>.SUFFIXES</CODE> with no prerequisites. By special dispensation, this eliminates all existing prerequisites of <CODE>.SUFFIXES</CODE>. You can then write another rule to add the suffixes you want. For example, </FONT><PRE class=example><FONT class=extract>     .SUFFIXES:            # <SPAN class=roman><FONT face="Times New Roman">Delete the default suffixes</FONT></SPAN>
     .SUFFIXES: .c .o .h   # <SPAN class=roman><FONT face="Times New Roman">Define our suffix list</FONT></SPAN>
</FONT></PRE>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--no-builtin-rules</SPAN></SAMP>&#8217; flag causes the default list of suffixes to be empty. </FONT>
<P><A name=index-SUFFIXES-1024></A><FONT class=extract>The variable <CODE>SUFFIXES</CODE> is defined to the default list of suffixes before <CODE>make</CODE> reads any makefiles. You can change the list of suffixes with a rule for the special target <CODE>.SUFFIXES</CODE>, but that does not alter this variable. </FONT>
<DIV class=node><A name=Implicit-Rule-Search></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules" rel=previous><FONT class=extract>Suffix Rules</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=up><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>10.8 Implicit Rule Search Algorithm</FONT></H3>
<P><A name=index-implicit-rule_002c-search-algorithm-1025></A><A name=index-search-algorithm_002c-implicit-rule-1026></A><FONT class=extract>Here is the procedure <CODE>make</CODE> uses for searching for an implicit rule for a target <VAR>t</VAR>. This procedure is followed for each double-colon rule with no recipe, for each target of ordinary rules none of which have a recipe, and for each prerequisite that is not the target of any rule. It is also followed recursively for prerequisites that come from implicit rules, in the search for a chain of rules. </FONT>
<P><FONT class=extract>Suffix rules are not mentioned in this algorithm because suffix rules are converted to equivalent pattern rules once the makefiles have been read in. </FONT>
<P><FONT class=extract>For an archive member target of the form &#8216;<SAMP><VAR>archive</VAR><SPAN class=samp>(</SPAN><VAR>member</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217;, the following algorithm is run twice, first using the entire target name <VAR>t</VAR>, and second using &#8216;<SAMP><SPAN class=samp>(</SPAN><VAR>member</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217; as the target <VAR>t</VAR> if the first run found no rule. </FONT>
<OL type=1>
<LI><FONT class=extract>Split <VAR>t</VAR> into a directory part, called <VAR>d</VAR>, and the rest, called <VAR>n</VAR>. For example, if <VAR>t</VAR> is &#8216;<SAMP><SPAN class=samp>src/foo.o</SPAN></SAMP>&#8217;, then <VAR>d</VAR> is &#8216;<SAMP><SPAN class=samp>src/</SPAN></SAMP>&#8217; and <VAR>n</VAR> is &#8216;<SAMP><SPAN class=samp>foo.o</SPAN></SAMP>&#8217;. </FONT>
<LI><FONT class=extract>Make a list of all the pattern rules one of whose targets matches <VAR>t</VAR> or <VAR>n</VAR>. If the target pattern contains a slash, it is matched against <VAR>t</VAR>; otherwise, against <VAR>n</VAR>. </FONT>
<LI><FONT class=extract>If any rule in that list is <EM>not</EM> a match-anything rule, then remove all non-terminal match-anything rules from the list. </FONT>
<LI><FONT class=extract>Remove from the list all rules with no recipe. </FONT>
<LI><FONT class=extract>For each pattern rule in the list: </FONT>
<OL type=a>
<LI><FONT class=extract>Find the stem <VAR>s</VAR>, which is the nonempty part of <VAR>t</VAR> or <VAR>n</VAR> matched by the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the target pattern. </FONT>
<LI><FONT class=extract>Compute the prerequisite names by substituting <VAR>s</VAR> for &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;; if the target pattern does not contain a slash, append <VAR>d</VAR> to the front of each prerequisite name. </FONT>
<LI><FONT class=extract>Test whether all the prerequisites exist or ought to exist. (If a file name is mentioned in the makefile as a target or as an explicit prerequisite, then we say it ought to exist.) </FONT>
<P><FONT class=extract>If all prerequisites exist or ought to exist, or there are no prerequisites, then this rule applies. </FONT></P></LI></OL>
<LI><FONT class=extract>If no pattern rule has been found so far, try harder. For each pattern rule in the list: </FONT>
<OL type=a>
<LI><FONT class=extract>If the rule is terminal, ignore it and go on to the next rule. </FONT>
<LI><FONT class=extract>Compute the prerequisite names as before. </FONT>
<LI><FONT class=extract>Test whether all the prerequisites exist or ought to exist. </FONT>
<LI><FONT class=extract>For each prerequisite that does not exist, follow this algorithm recursively to see if the prerequisite can be made by an implicit rule. </FONT>
<LI><FONT class=extract>If all prerequisites exist, ought to exist, or can be made by implicit rules, then this rule applies. </FONT></LI></OL>
<LI><FONT class=extract>If no implicit rule applies, the rule for <CODE>.DEFAULT</CODE>, if any, applies. In that case, give <VAR>t</VAR> the same recipe that <CODE>.DEFAULT</CODE> has. Otherwise, there is no recipe for <VAR>t</VAR>. </FONT></LI></OL>
<P><FONT class=extract>Once a rule that applies has been found, for each target pattern of the rule other than the one that matched <VAR>t</VAR> or <VAR>n</VAR>, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the pattern is replaced with <VAR>s</VAR> and the resultant file name is stored until the recipe to remake the target file <VAR>t</VAR> is executed. After the recipe is executed, each of these stored file names are entered into the data base and marked as having been updated and having the same update status as the file <VAR>t</VAR>. </FONT>
<P><FONT class=extract>When the recipe of a pattern rule is executed for <VAR>t</VAR>, the automatic variables are set corresponding to the target and prerequisites. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<DIV class=node><A name=Archives></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Extending-make" rel=next>Extending make</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules" rel=previous>Implicit Rules</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>11 Using <CODE>make</CODE> to Update Archive Files</FONT></H2>
<P><A name=index-archive-1027></A><FONT class=extract><DFN>Archive files</DFN> are files containing named sub-files called <DFN>members</DFN>; they are maintained with the program <CODE>ar</CODE> and their main use is as subroutine libraries for linking. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members</FONT></A><FONT class=extract>: Archive members as targets. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Archive-Update"><FONT class=extract>Archive Update</FONT></A><FONT class=extract>: The implicit rule for archive member targets. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls"><FONT class=extract>Archive Pitfalls</FONT></A><FONT class=extract>: Dangers to watch out for when using archives. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules"><FONT class=extract>Archive Suffix Rules</FONT></A><FONT class=extract>: You can write a special kind of suffix rule for updating archives. </FONT></LI></UL>
<DIV class=node><A name=Archive-Members></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Archive-Update" rel=next><FONT class=extract>Archive Update</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=previous><FONT class=extract>Archives</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=up><FONT class=extract>Archives</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>11.1 Archive Members as Targets</FONT></H3>
<P><A name=index-archive-member-targets-1028></A><FONT class=extract>An individual member of an archive file can be used as a target or prerequisite in <CODE>make</CODE>. You specify the member named <VAR>member</VAR> in archive file <VAR>archive</VAR> as follows: </FONT><PRE class=example><FONT class=extract>     <VAR>archive</VAR>(<VAR>member</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>This construct is available only in targets and prerequisites, not in recipes! Most programs that you might use in recipes do not support this syntax and cannot act directly on archive members. Only <CODE>ar</CODE> and other programs specifically designed to operate on archives can do so. Therefore, valid recipes to update an archive member target probably must use <CODE>ar</CODE>. For example, this rule says to create a member <SAMP><SPAN class=file>hack.o</SPAN></SAMP> in archive <SAMP><SPAN class=file>foolib</SPAN></SAMP> by copying the file <SAMP><SPAN class=file>hack.o</SPAN></SAMP>: </FONT><PRE class=example><FONT class=extract>     foolib(hack.o) : hack.o
             ar cr foolib hack.o
</FONT></PRE>
<P><FONT class=extract>In fact, nearly all archive member targets are updated in just this way and there is an implicit rule to do it for you. <STRONG>Please note:</STRONG> The &#8216;<SAMP><SPAN class=samp>c</SPAN></SAMP>&#8217; flag to <CODE>ar</CODE> is required if the archive file does not already exist. </FONT>
<P><FONT class=extract>To specify several members in the same archive, you can write all the member names together between the parentheses. For example: </FONT><PRE class=example><FONT class=extract>     foolib(hack.o kludge.o)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to: </FONT><PRE class=example><FONT class=extract>     foolib(hack.o) foolib(kludge.o)
</FONT></PRE>
<P><A name=index-wildcard_002c-in-archive-member-1029></A><FONT class=extract>You can also use shell-style wildcards in an archive member reference. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>. For example, &#8216;<SAMP><SPAN class=samp>foolib(*.o)</SPAN></SAMP>&#8217;<!-- /@w --> expands to all existing members of the <SAMP><SPAN class=file>foolib</SPAN></SAMP> archive whose names end in &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217;; perhaps &#8216;<SAMP><SPAN class=samp>foolib(hack.o)<!-- /@w --> foolib(kludge.o)<!-- /@w --></SPAN></SAMP>&#8217;. </FONT>
<DIV class=node><A name=Archive-Update></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls" rel=next><FONT class=extract>Archive Pitfalls</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archive-Members" rel=previous><FONT class=extract>Archive Members</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=up><FONT class=extract>Archives</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>11.2 Implicit Rule for Archive Member Targets</FONT></H3>
<P><FONT class=extract>Recall that a target that looks like <SAMP><VAR>a</VAR><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP> stands for the member named <VAR>m</VAR> in the archive file <VAR>a</VAR>. </FONT>
<P><FONT class=extract>When <CODE>make</CODE> looks for an implicit rule for such a target, as a special feature it considers implicit rules that match <SAMP><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP>, as well as those that match the actual target <SAMP><VAR>a</VAR><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP>. </FONT>
<P><FONT class=extract>This causes one special rule whose target is <SAMP><SPAN class=file>(%)</SPAN></SAMP> to match. This rule updates the target <SAMP><VAR>a</VAR><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP> by copying the file <VAR>m</VAR> into the archive. For example, it will update the archive member target <SAMP><SPAN class=file>foo.a(bar.o)</SPAN></SAMP> by copying the <EM>file</EM> <SAMP><SPAN class=file>bar.o</SPAN></SAMP> into the archive <SAMP><SPAN class=file>foo.a</SPAN></SAMP> as a <EM>member</EM> named <SAMP><SPAN class=file>bar.o</SPAN></SAMP>. </FONT>
<P><FONT class=extract>When this rule is chained with others, the result is very powerful. Thus, &#8216;<SAMP><SPAN class=samp>make "foo.a(bar.o)"</SPAN></SAMP>&#8217; (the quotes are needed to protect the &#8216;<SAMP><SPAN class=samp>(</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>)</SPAN></SAMP>&#8217; from being interpreted specially by the shell) in the presence of a file <SAMP><SPAN class=file>bar.c</SPAN></SAMP> is enough to cause the following recipe to be run, even without a makefile: </FONT><PRE class=example><FONT class=extract>     cc -c bar.c -o bar.o
     ar r foo.a bar.o
     rm -f bar.o
</FONT></PRE>
<P class=noindent><FONT class=extract>Here <CODE>make</CODE> has envisioned the file <SAMP><SPAN class=file>bar.o</SPAN></SAMP> as an intermediate file. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Implicit rules such as this one are written using the automatic variable &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>An archive member name in an archive cannot contain a directory name, but it may be useful in a makefile to pretend that it does. If you write an archive member target <SAMP><SPAN class=file>foo.a(dir/file.o)</SPAN></SAMP>, <CODE>make</CODE> will perform automatic updating with this recipe: </FONT><PRE class=example><FONT class=extract>     ar r foo.a dir/file.o
</FONT></PRE>
<P class=noindent><FONT class=extract>which has the effect of copying the file <SAMP><SPAN class=file>dir/file.o</SPAN></SAMP> into a member named <SAMP><SPAN class=file>file.o</SPAN></SAMP>. In connection with such usage, the automatic variables <CODE>%D</CODE> and <CODE>%F</CODE> may be useful. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols"><FONT class=extract>Archive Symbols</FONT></A><FONT class=extract>: How to update archive symbol directories. </FONT></LI></UL>
<DIV class=node><A name=Archive-Symbols></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archive-Update" rel=previous><FONT class=extract>Archive Update</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Archive-Update" rel=up><FONT class=extract>Archive Update</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>11.2.1 Updating Archive Symbol Directories</FONT></H4>
<P><A name=index-g_t_0040code_007b_005f_005f_002eSYMDEF_007d-1030></A><A name=index-updating-archive-symbol-directories-1031></A><A name=index-archive-symbol-directory-updating-1032></A><A name=index-symbol-directories_002c-updating-archive-1033></A><A name=index-directories_002c-updating-archive-symbol-1034></A><FONT class=extract>An archive file that is used as a library usually contains a special member named <SAMP><SPAN class=file>__.SYMDEF</SPAN></SAMP> that contains a directory of the external symbol names defined by all the other members. After you update any other members, you need to update <SAMP><SPAN class=file>__.SYMDEF</SPAN></SAMP> so that it will summarize the other members properly. This is done by running the <CODE>ranlib</CODE> program: </FONT><PRE class=example><FONT class=extract>     ranlib <VAR>archivefile</VAR>
</FONT></PRE>
<P><FONT class=extract>Normally you would put this command in the rule for the archive file, and make all the members of the archive file prerequisites of that rule. For example, </FONT><PRE class=example><FONT class=extract>     libfoo.a: libfoo.a(x.o) libfoo.a(y.o) ...
             ranlib libfoo.a
</FONT></PRE>
<P class=noindent><FONT class=extract>The effect of this is to update archive members <SAMP><SPAN class=file>x.o</SPAN></SAMP>, <SAMP><SPAN class=file>y.o</SPAN></SAMP>, etc., and then update the symbol directory member <SAMP><SPAN class=file>__.SYMDEF</SPAN></SAMP> by running <CODE>ranlib</CODE>. The rules for updating the members are not shown here; most likely you can omit them and use the implicit rule which copies files into the archive, as described in the preceding section. </FONT>
<P><FONT class=extract>This is not necessary when using the GNU <CODE>ar</CODE> program, which updates the <SAMP><SPAN class=file>__.SYMDEF</SPAN></SAMP> member automatically. </FONT>
<DIV class=node><A name=Archive-Pitfalls></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules" rel=next><FONT class=extract>Archive Suffix Rules</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archive-Update" rel=previous><FONT class=extract>Archive Update</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=up><FONT class=extract>Archives</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>11.3 Dangers When Using Archives</FONT></H3>
<P><A name=index-archive_002c-and-parallel-execution-1035></A><A name=index-parallel-execution_002c-and-archive-update-1036></A><A name=index-archive_002c-and-_0040code_007b_002dj_007d-1037></A><A name=index-g_t_0040code_007b_002dj_007d_002c-and-archive-update-1038></A><FONT class=extract>It is important to be careful when using parallel execution (the <CODE>-j</CODE> switch; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>) and archives. If multiple <CODE>ar</CODE> commands run at the same time on the same archive file, they will not know about each other and can corrupt the file. </FONT>
<P><FONT class=extract>Possibly a future version of <CODE>make</CODE> will provide a mechanism to circumvent this problem by serializing all recipes that operate on the same archive file. But for the time being, you must either write your makefiles to avoid this problem in some other way, or not use <CODE>-j</CODE>. </FONT>
<DIV class=node><A name=Archive-Suffix-Rules></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls" rel=previous><FONT class=extract>Archive Pitfalls</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=up><FONT class=extract>Archives</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>11.4 Suffix Rules for Archive Files</FONT></H3>
<P><A name=index-suffix-rule_002c-for-archive-1039></A><A name=index-archive_002c-suffix-rule-for-1040></A><A name=index-library-archive_002c-suffix-rule-for-1041></A><A name=index-g_t_0040code_007b_002ea_007d-_0028archives_0029-1042></A><FONT class=extract>You can write a special kind of suffix rule for dealing with archive files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Suffix Rules</FONT></A><FONT class=extract>, for a full explanation of suffix rules. Archive suffix rules are obsolete in GNU <CODE>make</CODE>, because pattern rules for archives are a more general mechanism (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Update"><FONT class=extract>Archive Update</FONT></A><FONT class=extract>). But they are retained for compatibility with other <CODE>make</CODE>s. </FONT>
<P><FONT class=extract>To write a suffix rule for archives, you simply write a suffix rule using the target suffix &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; (the usual suffix for archive files). For example, here is the old-fashioned suffix rule to update a library archive from C source files: </FONT><PRE class=example><FONT class=extract>     .c.a:
             $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
             $(AR) r $@ $*.o
             $(RM) $*.o
</FONT></PRE>
<P class=noindent><FONT class=extract>This works just as if you had written the pattern rule: </FONT><PRE class=example><FONT class=extract>     (%.o): %.c
             $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
             $(AR) r $@ $*.o
             $(RM) $*.o
</FONT></PRE>
<P><FONT class=extract>In fact, this is just what <CODE>make</CODE> does when it sees a suffix rule with &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; as the target suffix. Any double-suffix rule &#8216;<SAMP><SPAN class=samp>.</SPAN><VAR>x</VAR><SPAN class=samp>.a</SPAN></SAMP>&#8217;<!-- /@w --> is converted to a pattern rule with the target pattern &#8216;<SAMP><SPAN class=samp>(%.o)</SPAN></SAMP>&#8217; and a prerequisite pattern of &#8216;<SAMP><SPAN class=samp>%.</SPAN><VAR>x</VAR></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Since you might want to use &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; as the suffix for some other kind of file, <CODE>make</CODE> also converts archive suffix rules to pattern rules in the normal way (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Suffix Rules</FONT></A><FONT class=extract>). Thus a double-suffix rule &#8216;<SAMP><SPAN class=samp>.</SPAN><VAR>x</VAR><SPAN class=samp>.a</SPAN></SAMP>&#8217;<!-- /@w --> produces two pattern rules: &#8216;<SAMP><SPAN class=samp>(%.o):<!-- /@w --> %.</SPAN><VAR>x</VAR><SPAN class=samp><!-- /@w --></SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>%.a<!-- /@w -->: %.</SPAN><VAR>x</VAR><SPAN class=samp><!-- /@w --></SPAN></SAMP>&#8217;.</FONT> 
<DIV class=node><A name=Extending-make></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Features" rel=next>Features</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Archives" rel=previous>Archives</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>12 Extending GNU <CODE>make</CODE></FONT></H2>
<P><A name=index-make-extensions-1043></A><FONT class=extract>GNU <CODE>make</CODE> provides many advanced capabilities, including many useful functions. However, it does not contain a complete programming language and so it has limitations. Sometimes these limitations can be overcome through use of the <CODE>shell</CODE> function to invoke a separate program, although this can be inefficient. </FONT>
<P><FONT class=extract>In cases where the built-in capabilities of GNU <CODE>make</CODE> are insufficient to your requirements there are two options for extending <CODE>make</CODE>. On systems where it's provided, you can utilize GNU Guile as an embedded scripting language (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration"><FONT class=extract>GNU Guile Integration</FONT></A><FONT class=extract>). On systems which support dynamically loadable objects, you can write your own extension in any language (which can be compiled into such an object) and load it to provide extended capabilities (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#load-Directive"><FONT class=extract>The <CODE>load</CODE> Directive</FONT></A><FONT class=extract>). </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration"><FONT class=extract>Guile Integration</FONT></A><FONT class=extract>: Using Guile as an embedded scripting language. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects"><FONT class=extract>Loading Objects</FONT></A><FONT class=extract>: Loading dynamic objects as extensions. </FONT></LI></UL>
<DIV class=node><A name=Guile-Integration></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=next><FONT class=extract>Loading Objects</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Extending-make" rel=previous><FONT class=extract>Extending make</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Extending-make" rel=up><FONT class=extract>Extending make</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>12.1 GNU Guile Integration</FONT></H3>
<P><A name=index-Guile-1044></A><A name=index-extensions_002c-Guile-1045></A><FONT class=extract>GNU <CODE>make</CODE> may be built with support for GNU Guile as an embedded extension language. Guile implements the Scheme language. A review of GNU Guile and the Scheme language and its features is beyond the scope of this manual: see the documentation for GNU Guile and Scheme. </FONT>
<P><FONT class=extract>You can determine if <CODE>make</CODE> contains support for Guile by examining the <CODE>.FEATURES</CODE> variable; it will contain the word <VAR>guile</VAR> if Guile support is available. </FONT>
<P><FONT class=extract>The Guile integration provides one new <CODE>make</CODE> function: <CODE>guile</CODE>. The <CODE>guile</CODE> function takes one argument which is first expanded by <CODE>make</CODE> in the normal fashion, then passed to the GNU Guile evaluator. The result of the evaluator is converted into a string and used as the expansion of the <CODE>guile</CODE> function in the makefile. </FONT>
<P><FONT class=extract>In addition, GNU <CODE>make</CODE> exposes Guile procedures for use in Guile scripts. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Guile-Types"><FONT class=extract>Guile Types</FONT></A><FONT class=extract>: Converting Guile types to <CODE>make</CODE> strings. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface"><FONT class=extract>Guile Interface</FONT></A><FONT class=extract>: Invoking <CODE>make</CODE> functions from Guile. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Guile-Example"><FONT class=extract>Guile Example</FONT></A><FONT class=extract>: Example using Guile in <CODE>make</CODE>. </FONT></LI></UL>
<DIV class=node><A name=Guile-Types></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface" rel=next><FONT class=extract>Guile Interface</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration" rel=previous><FONT class=extract>Guile Integration</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration" rel=up><FONT class=extract>Guile Integration</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.1.1 Conversion of Guile Types</FONT></H4>
<P><A name=index-convert-guile-types-1046></A><A name=index-guile_002c-conversion-of-types-1047></A><A name=index-types_002c-conversion-of-1048></A><FONT class=extract>There is only one &#8220;data type&#8221; in <CODE>make</CODE>: a string. GNU Guile, on the other hand, provides a rich variety of different data types. An important aspect of the interface between <CODE>make</CODE> and GNU Guile is the conversion of Guile data types into <CODE>make</CODE> strings. </FONT>
<P><FONT class=extract>This conversion is relevant in two places: when a makefile invokes the <CODE>guile</CODE> function to evaluate a Guile expression, the result of that evaluation must be converted into a make string so it can be further evaluated by <CODE>make</CODE>. And secondly, when a Guile script invokes one of the procedures exported by <CODE>make</CODE> the argument provided to the procedure must be converted into a string. </FONT>
<P><FONT class=extract>The conversion of Guile types into <CODE>make</CODE> strings is as below: </FONT>
<DL>
<DT><FONT class=extract><CODE>#f</CODE> </FONT>
<DD><FONT class=extract>False is converted into the empty string: in <CODE>make</CODE> conditionals the empty string is considered false. <BR></FONT>
<DT><FONT class=extract><CODE>#t</CODE> </FONT>
<DD><FONT class=extract>True is converted to the string &#8216;<SAMP><SPAN class=samp>#t</SPAN></SAMP>&#8217;: in <CODE>make</CODE> conditionals any non-empty string is considered true. <BR></FONT>
<DT><FONT class=extract><CODE>symbol</CODE><BR></FONT>
<DT><FONT class=extract><CODE>number</CODE> </FONT>
<DD><FONT class=extract>A symbol or number is converted into the string representation of that symbol or number. <BR></FONT>
<DT><FONT class=extract><CODE>character</CODE> </FONT>
<DD><FONT class=extract>A printable character is converted to the same character. <BR></FONT>
<DT><FONT class=extract><CODE>string</CODE> </FONT>
<DD><FONT class=extract>A string containing only printable characters is converted to the same string. <BR></FONT>
<DT><FONT class=extract><CODE>list</CODE> </FONT>
<DD><FONT class=extract>A list is converted recursively according to the above rules. This implies that any structured list will be flattened (that is, a result of &#8216;<SAMP><SPAN class=samp>'(a b (c d) e)</SPAN></SAMP>&#8217; will be converted to the <CODE>make</CODE> string &#8216;<SAMP><SPAN class=samp>a b c d e</SPAN></SAMP>&#8217;). <BR></FONT>
<DT><FONT class=extract><CODE>other</CODE> </FONT>
<DD><FONT class=extract>Any other Guile type results in an error. In future versions of <CODE>make</CODE>, other Guile types may be converted. </FONT></DD></DL>
<P><FONT class=extract>The translation of &#8216;<SAMP><SPAN class=samp>#f</SPAN></SAMP>&#8217; (to the empty string) and &#8216;<SAMP><SPAN class=samp>#t</SPAN></SAMP>&#8217; (to the non-empty string &#8216;<SAMP><SPAN class=samp>#t</SPAN></SAMP>&#8217;) is designed to allow you to use Guile boolean results directly as <CODE>make</CODE> boolean conditions. For example: </FONT><PRE class=example><FONT class=extract>     $(if $(guile (access? "myfile" R_OK)),$(info myfile exists))
</FONT></PRE>
<P><FONT class=extract>As a consequence of these conversion rules you must consider the result of your Guile script, as that result will be converted into a string and parsed by <CODE>make</CODE>. If there is no natural result for the script (that is, the script exists solely for its side-effects), you should add &#8216;<SAMP><SPAN class=samp>#f</SPAN></SAMP>&#8217; as the final expression in order to avoid syntax errors in your makefile. </FONT>
<DIV class=node><A name=Guile-Interface></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Guile-Example" rel=next><FONT class=extract>Guile Example</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Guile-Types" rel=previous><FONT class=extract>Guile Types</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration" rel=up><FONT class=extract>Guile Integration</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.1.2 Interfaces from Guile to <CODE>make</CODE></FONT></H4>
<P><A name=index-make-interface-to-guile-1049></A><A name=index-make-procedures-in-guile-1050></A><FONT class=extract>In addition to the <CODE>guile</CODE> function available in makefiles, <CODE>make</CODE> exposes some procedures for use in your Guile scripts. At startup <CODE>make</CODE> creates a new Guile module, <CODE>gnu make</CODE>, and exports these procedures as public interfaces from that module: </FONT>
<DL>
<DT><FONT class=extract><CODE>gmk-expand</CODE> </FONT>
<DD><A name=index-gmk_002dexpand-1051></A><FONT class=extract>This procedure takes a single argument which is converted into a string. The string is expanded by <CODE>make</CODE> using normal <CODE>make</CODE> expansion rules. The result of the expansion is converted into a Guile string and provided as the result of the procedure. <BR></FONT>
<DT><FONT class=extract><CODE>gmk-eval</CODE> </FONT>
<DD><A name=index-gmk_002deval-1052></A><FONT class=extract>This procedure takes a single argument which is converted into a string. The string is evaluated by <CODE>make</CODE> as if it were a makefile. This is the same capability available via the <CODE>eval</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>). The result of the <CODE>gmk-eval</CODE> procedure is always the empty string. </FONT>
<P><FONT class=extract>Note that <CODE>gmk-eval</CODE> is not quite the same as using <CODE>gmk-expand</CODE> with the <CODE>eval</CODE> function: in the latter case the evaluated string will be expanded <EM>twice</EM>; first by <CODE>gmk-expand</CODE>, then again by the <CODE>eval</CODE> function. </FONT></P></DD></DL>
<DIV class=node><A name=Guile-Example></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface" rel=previous><FONT class=extract>Guile Interface</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration" rel=up><FONT class=extract>Guile Integration</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.1.3 Example Using Guile in <CODE>make</CODE></FONT></H4>
<P><A name=index-Guile-example-1053></A><A name=index-example-using-Guile-1054></A><FONT class=extract>Here is a very simple example using GNU Guile to manage writing to a file. These Guile procedures simply open a file, allow writing to the file (one string per line), and close the file. Note that because we cannot store complex values such as Guile ports in <CODE>make</CODE> variables, we'll keep the port as a global variable in the Guile interpreter. </FONT>
<P><FONT class=extract>You can create Guile functions easily using <CODE>define</CODE>/<CODE>endef</CODE> to create a Guile script, then use the <CODE>guile</CODE> function to internalize it: </FONT><PRE class=example><FONT class=extract>     define GUILEIO
     ;; A simple Guile IO library for GNU make
     
     (define MKPORT #f)
     
     (define (mkopen name mode)
       (set! MKPORT (open-file name mode))
       #f)
     
     (define (mkwrite s)
       (display s MKPORT)
       (newline MKPORT)
       #f)
     
     (define (mkclose)
       (close-port MKPORT)
       #f)
     
     #f
     endef
     
     # Internalize the Guile IO functions
     $(guile $(GUILEIO))
</FONT></PRE>
<P><FONT class=extract>If you have a significant amount of Guile support code, you might consider keeping it in a different file (e.g., <SAMP><SPAN class=file>guileio.scm</SPAN></SAMP>) and then loading it in your makefile using the <CODE>guile</CODE> function: </FONT><PRE class=example><FONT class=extract>     $(guile (load "guileio.scm"))
</FONT></PRE>
<P><FONT class=extract>An advantage to this method is that when editing <SAMP><SPAN class=file>guileio.scm</SPAN></SAMP>, your editor will understand that this file contains Scheme syntax rather than makefile syntax. </FONT>
<P><FONT class=extract>Now you can use these Guile functions to create files. Suppose you need to operate on a very large list, which cannot fit on the command line, but the utility you're using accepts the list as input as well: </FONT><PRE class=example><FONT class=extract>     prog: $(PREREQS)
             @$(guile (mkopen "tmp.out" "w")) \
              $(foreach X,$^,$(guile (mkwrite "$(X)"))) \
              $(guile (mkclose))
             $(LINK) &lt; tmp.out
</FONT></PRE>
<P><FONT class=extract>A more comprehensive suite of file manipulation procedures is possible of course. You could, for example, maintain multiple output files at the same time by choosing a symbol for each one and using it as the key to a hash table, where the value is a port, then returning the symbol to be stored in a <CODE>make</CODE> variable. </FONT>
<DIV class=node><A name=Loading-Objects></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration" rel=previous><FONT class=extract>Guile Integration</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Extending-make" rel=up><FONT class=extract>Extending make</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>12.2 Loading Dynamic Objects</FONT></H3>
<P><A name=index-loaded-objects-1055><FONT class=extract></FONT></A><A name=index-objects_002c-loaded-1056></A><A name=index-extensions_002c-loading-1057></A>
<P>
<TABLE class=cartouche summary=cartouche border=1>
<TBODY>
<TR>
<TD>
<BLOCKQUOTE><FONT class=extract><B>Warning:</B> The <CODE>load</CODE> directive and extension capability is considered a &#8220;technology preview&#8221; in this release of GNU make. We encourage you to experiment with this feature and we appreciate any feedback on it. However we cannot guarantee to maintain backward-compatibility in the next release. Consider using GNU Guile instead for extending GNU make (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function"><FONT class=extract>The <CODE>guile</CODE> Function</FONT></A><FONT class=extract>). </FONT></BLOCKQUOTE></TD></TR></TBODY></TABLE>
<P><FONT class=extract>Many operating systems provide a facility for dynamically loading compiled objects. If your system provides this facility, GNU <CODE>make</CODE> can make use of it to load dynamic objects at runtime, providing new capabilities which may then be invoked by your makefile. </FONT>
<P><FONT class=extract>The <CODE>load</CODE> directive is used to load a dynamic object. Once the object is loaded, a &#8220;setup&#8221; function will be invoked to allow the object to initialize itself and register new facilities with GNU <CODE>make</CODE>. A dynamic object might include new <CODE>make</CODE> functions, for example, and the &#8220;setup&#8221; function would register them with GNU <CODE>make</CODE>'s function handling system. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#load-Directive"><FONT class=extract>load Directive</FONT></A><FONT class=extract>: Loading dynamic objects as extensions. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects"><FONT class=extract>Remaking Loaded Objects</FONT></A><FONT class=extract>: How loaded objects get remade. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API"><FONT class=extract>Loaded Object API</FONT></A><FONT class=extract>: Programmatic interface for loaded objects. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example"><FONT class=extract>Loaded Object Example</FONT></A><FONT class=extract>: Example of a loaded object </FONT></LI></UL>
<DIV class=node><A name=load-Directive></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects" rel=next><FONT class=extract>Remaking Loaded Objects</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=previous><FONT class=extract>Loading Objects</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=up><FONT class=extract>Loading Objects</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.2.1 The <CODE>load</CODE> Directive</FONT></H4>
<P><A name=index-load-directive-1058></A><A name=index-extensions_002c-load-directive-1059></A><FONT class=extract>Objects are loaded into GNU <CODE>make</CODE> by placing the <CODE>load</CODE> directive into your makefile. The syntax of the <CODE>load</CODE> directive is as follows: </FONT>
<P><A name=index-load-1060><FONT class=extract></FONT></A><PRE class=example><FONT class=extract>     load <VAR>object-file</VAR> ...
</FONT></PRE>
<P><FONT class=extract>or: </FONT><PRE class=example><FONT class=extract>     load <VAR>object-file</VAR>(<VAR>symbol-name</VAR>) ...
</FONT></PRE>
<P><FONT class=extract>The file <VAR>object-file</VAR> is dynamically loaded by GNU <CODE>make</CODE>. If <VAR>object-file</VAR> does not include a directory path then it is first looked for in the current directory. If it is not found there, or a directory path is included, then system-specific paths will be searched. If the load fails for any reason, <CODE>make</CODE> will print a message and exit. </FONT>
<P><FONT class=extract>If the load succeeds <CODE>make</CODE> will invoke an initializing function. </FONT>
<P><FONT class=extract>If <VAR>symbol-name</VAR> is provided, it will be used as the name of the initializing function. </FONT>
<P><FONT class=extract>If no <VAR>symbol-name</VAR> is provided, the initializing function name is created by taking the base file name of <VAR>object-file</VAR>, up to the first character which is not a valid symbol name character (alphanumerics and underscores are valid symbol name characters). To this prefix will be appended the suffix <CODE>_gmk_setup</CODE>. </FONT>
<P><FONT class=extract>More than one object file may be loaded with a single <CODE>load</CODE> directive, and both forms of <CODE>load</CODE> arguments may be used in the same directive. </FONT>
<P><FONT class=extract>The initializing function will be provided the file name and line number of the invocation of the <CODE>load</CODE> operation. It should return a value of type <CODE>int</CODE>, which must be <CODE>0</CODE> on failure and non-<CODE>0</CODE> on success. If the return value is <CODE>-1</CODE>, then GNU make will <EM>not</EM> attempt to rebuild the object file (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects"><FONT class=extract>How Loaded Objects Are Remade</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>For example: </FONT><PRE class=example><FONT class=extract>     load ../mk_funcs.so
</FONT></PRE>
<P><FONT class=extract>will load the dynamic object <SAMP><SPAN class=file>../mk_funcs.so</SPAN></SAMP>. After the object is loaded, <CODE>make</CODE> will invoke the function (assumed to be defined by the shared object) <CODE>mk_funcs_gmk_setup</CODE>. </FONT>
<P><FONT class=extract>On the other hand: </FONT><PRE class=example><FONT class=extract>     load ../mk_funcs.so(init_mk_func)
</FONT></PRE>
<P><FONT class=extract>will load the dynamic object <SAMP><SPAN class=file>../mk_funcs.so</SPAN></SAMP>. After the object is loaded, <CODE>make</CODE> will invoke the function <CODE>init_mk_func</CODE>. </FONT>
<P><FONT class=extract>Regardless of how many times an object file appears in a <CODE>load</CODE> directive, it will only be loaded (and its setup function will only be invoked) once. </FONT>
<P><A name=index-g_t_002eLOADED-1061></A><FONT class=extract>After an object has been successfully loaded, its file name is appended to the <CODE>.LOADED</CODE> variable. </FONT>
<P><A name=index-g_t_002dload-1062></A><FONT class=extract>If you would prefer that failure to load a dynamic object not be reported as an error, you can use the <CODE>-load</CODE> directive instead of <CODE>load</CODE>. GNU <CODE>make</CODE> will not fail and no message will be generated if an object fails to load. The failed object is not added to the <CODE>.LOADED</CODE> variable, which can then be consulted to determine if the load was successful. </FONT>
<DIV class=node><A name=Remaking-Loaded-Objects></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API" rel=next><FONT class=extract>Loaded Object API</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#load-Directive" rel=previous><FONT class=extract>load Directive</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=up><FONT class=extract>Loading Objects</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.2.2 How Loaded Objects Are Remade</FONT></H4>
<P><A name=index-updating-loaded-objects-1063></A><A name=index-remaking-loaded-objects-1064></A><A name=index-loaded-objects_002c-remaking-of-1065></A><FONT class=extract>Loaded objects undergo the same re-make procedure as makefiles (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>). If any loaded object is recreated, then <CODE>make</CODE> will start from scratch and re-read all the makefiles, and reload the object files again. It is not necessary for the loaded object to do anything special to support this. </FONT>
<P><FONT class=extract>It's up to the makefile author to provide the rules needed for rebuilding the loaded object. </FONT>
<DIV class=node><A name=Loaded-Object-API></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example" rel=next><FONT class=extract>Loaded Object Example</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects" rel=previous><FONT class=extract>Remaking Loaded Objects</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=up><FONT class=extract>Loading Objects</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.2.3 Loaded Object Interface</FONT></H4>
<P><A name=index-loaded-object-API-1066><FONT class=extract></FONT></A><A name=index-interface-for-loaded-objects-1067></A>
<P>
<TABLE class=cartouche summary=cartouche border=1>
<TBODY>
<TR>
<TD>
<BLOCKQUOTE><FONT class=extract><B>Warning:</B> For this feature to be useful your extensions will need to invoke various functions internal to GNU <CODE>make</CODE>. The programming interfaces provided in this release should not be considered stable: functions may be added, removed, or change calling signatures or implementations in future versions of GNU <CODE>make</CODE>. </FONT></BLOCKQUOTE></TD></TR></TBODY></TABLE>
<P><FONT class=extract>To be useful, loaded objects must be able to interact with GNU <CODE>make</CODE>. This interaction includes both interfaces the loaded object provides to makefiles and also interfaces <CODE>make</CODE> provides to the loaded object to manipulate <CODE>make</CODE>'s operation. </FONT>
<P><FONT class=extract>The interface between loaded objects and <CODE>make</CODE> is defined by the <SAMP><SPAN class=file>gnumake.h</SPAN></SAMP> C header file. All loaded objects written in C should include this header file. Any loaded object not written in C will need to implement the interface defined in this header file. </FONT>
<P><FONT class=extract>Typically, a loaded object will register one or more new GNU <CODE>make</CODE> functions using the <CODE>gmk_add_function</CODE> routine from within its setup function. The implementations of these <CODE>make</CODE> functions may make use of the <CODE>gmk_expand</CODE> and <CODE>gmk_eval</CODE> routines to perform their tasks, then optionally return a string as the result of the function expansion. </FONT>
<H5 class=subsubheading><FONT class=extract>Loaded Object Licensing</FONT></H5>
<P><A name=index-loaded-object-licensing-1068></A><A name=index-plugin_005fis_005fGPL_005fcompatible-1069></A><FONT class=extract>Every dynamic extension should define the global symbol <CODE>plugin_is_GPL_compatible</CODE> to assert that it has been licensed under a GPL-compatible license. If this symbol does not exist, <CODE>make</CODE> emits a fatal error and exits when it tries to load your extension. </FONT>
<P><FONT class=extract>The declared type of the symbol should be <CODE>int</CODE>. It does not need to be in any allocated section, though. The code merely asserts that the symbol exists in the global scope. Something like this is enough: </FONT><PRE class=example><FONT class=extract>     int plugin_is_GPL_compatible;
</FONT></PRE>
<H5 class=subsubheading><FONT class=extract>Data Structures</FONT></H5>
<DL>
<DT><FONT class=extract><CODE>gmk_floc</CODE> </FONT>
<DD><FONT class=extract>This structure represents a filename/location pair. It is provided when defining items, so GNU <CODE>make</CODE> can inform the user later where the definition occurred if necessary. </FONT></DD></DL>
<H5 class=subsubheading><FONT class=extract>Registering Functions</FONT></H5>
<P><A name=index-gmk_005fadd_005ffunction-1070></A><FONT class=extract>There is currently one way for makefiles to invoke operations provided by the loaded object: through the <CODE>make</CODE> function call interface. A loaded object can register one or more new functions which may then be invoked from within the makefile in the same way as any other function. </FONT>
<P><FONT class=extract>Use <CODE>gmk_add_function</CODE> to create a new <CODE>make</CODE> function. Its arguments are as follows: </FONT>
<DL>
<DT><FONT class=extract><CODE>name</CODE> </FONT>
<DD><FONT class=extract>The function name. This is what the makefile should use to invoke the function. The name must be between 1 and 255 characters long and it may only contain alphanumeric, period (&#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;), dash (&#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;), and underscore (&#8216;<SAMP><SPAN class=samp>_</SPAN></SAMP>&#8217;) characters. It may not begin with a period. <BR></FONT>
<DT><FONT class=extract><CODE>func_ptr</CODE> </FONT>
<DD><FONT class=extract>A pointer to a function that <CODE>make</CODE> will invoke when it expands the function in a makefile. This function must be defined by the loaded object. <BR></FONT>
<DT><FONT class=extract><CODE>min_args</CODE> </FONT>
<DD><FONT class=extract>The minimum number of arguments the function will accept. Must be between 0 and 255. GNU <CODE>make</CODE> will check this and fail before invoking <CODE>func_ptr</CODE> if the function was invoked with too few arguments. <BR></FONT>
<DT><FONT class=extract><CODE>max_args</CODE> </FONT>
<DD><FONT class=extract>The maximum number of arguments the function will accept. Must be between 0 and 255. GNU <CODE>make</CODE> will check this and fail before invoking <CODE>func_ptr</CODE> if the function was invoked with too few arguments. If the value is 0, then any number of arguments is accepted. If the value is greater than 0, then it must be greater than or equal to <CODE>min_args</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>flags</CODE> </FONT>
<DD><FONT class=extract>Flags that specify how this function will operate; the desired flags should be OR'd together. If the <CODE>GMK_FUNC_NOEXPAND</CODE> flag is given then the function arguments will not be expanded before the function is called; otherwise they will be expanded first. </FONT></DD></DL>
<H5 class=subsubheading><FONT class=extract>Registered Function Interface</FONT></H5>
<P><A name=index-gmk_005ffunc_005fptr-1071></A><FONT class=extract>A function registered with <CODE>make</CODE> must match the <CODE>gmk_func_ptr</CODE> type. It will be invoked with three parameters: <CODE>name</CODE> (the name of the function), <CODE>argc</CODE> (the number of arguments to the function), and <CODE>argv</CODE> (an array of pointers to arguments to the function). The last pointer (that is, <CODE>argv[argc]</CODE>) will be null (<CODE>0</CODE>). </FONT>
<P><FONT class=extract>The return value of the function is the result of expanding the function. If the function expands to nothing the return value may be null. Otherwise, it must be a pointer to a string created with <CODE>gmk_alloc</CODE>. Once the function returns, <CODE>make</CODE> owns this string and will free it when appropriate; it cannot be accessed by the loaded object. </FONT>
<H5 class=subsubheading><FONT class=extract>GNU <CODE>make</CODE> Facilities</FONT></H5>
<P><FONT class=extract>There are some facilities exported by GNU <CODE>make</CODE> for use by loaded objects. Typically these would be run from within the setup function and/or the functions registered via <CODE>gmk_add_function</CODE>, to retrieve or modify the data <CODE>make</CODE> works with. </FONT>
<DL>
<DT><FONT class=extract><CODE>gmk_expand</CODE> </FONT>
<DD><A name=index-gmk_005fexpand-1072></A><FONT class=extract>This function takes a string and expands it using <CODE>make</CODE> expansion rules. The result of the expansion is returned in a nil-terminated string buffer. The caller is responsible for calling <CODE>gmk_free</CODE> with a pointer to the returned buffer when done. <BR></FONT>
<DT><FONT class=extract><CODE>gmk_eval</CODE> </FONT>
<DD><A name=index-gmk_005feval-1073></A><FONT class=extract>This function takes a buffer and evaluates it as a segment of makefile syntax. This function can be used to define new variables, new rules, etc. It is equivalent to using the <CODE>eval</CODE> <CODE>make</CODE> function. </FONT></DD></DL>
<P><FONT class=extract>Note that there is a difference between <CODE>gmk_eval</CODE> and calling <CODE>gmk_expand</CODE> with a string using the <CODE>eval</CODE> function: in the latter case the string will be expanded <EM>twice</EM>; once by <CODE>gmk_expand</CODE> and then again by the <CODE>eval</CODE> function. Using <CODE>gmk_eval</CODE> the buffer is only expanded once, at most (as it's read by the <CODE>make</CODE> parser). </FONT>
<H5 class=subsubheading><FONT class=extract>Memory Management</FONT></H5>
<P><FONT class=extract>Some systems allow for different memory management schemes. Thus you should never pass memory that you've allocated directly to any <CODE>make</CODE> function, nor should you attempt to directly free any memory returned to you by any <CODE>make</CODE> function. Instead, use the <CODE>gmk_alloc</CODE> and <CODE>gmk_free</CODE> functions. </FONT>
<P><FONT class=extract>In particular, the string returned to <CODE>make</CODE> by a function registered using <CODE>gmk_add_function</CODE> <EM>must</EM> be allocated using <CODE>gmk_alloc</CODE>, and the string returned from the <CODE>make</CODE> <CODE>gmk_expand</CODE> function <EM>must</EM> be freed (when no longer needed) using <CODE>gmk_free</CODE>. </FONT>
<DL>
<DT><FONT class=extract><CODE>gmk_alloc</CODE> </FONT>
<DD><A name=index-gmk_005falloc-1074></A><FONT class=extract>Return a pointer to a newly-allocated buffer. This function will always return a valid pointer; if not enough memory is available <CODE>make</CODE> will exit. <BR></FONT>
<DT><FONT class=extract><CODE>gmk_free</CODE> </FONT>
<DD><A name=index-gmk_005ffree-1075></A><FONT class=extract>Free a buffer returned to you by <CODE>make</CODE>. Once the <CODE>gmk_free</CODE> function returns the string will no longer be valid. </FONT></DD></DL>
<DIV class=node><A name=Loaded-Object-Example></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API" rel=previous><FONT class=extract>Loaded Object API</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects" rel=up><FONT class=extract>Loading Objects</FONT></A><FONT class=extract> </FONT></DIV>
<H4 class=subsection><FONT class=extract>12.2.4 Example Loaded Object</FONT></H4>
<P><A name=index-loaded-object-example-1076></A><A name=index-example-of-loaded-objects-1077></A><FONT class=extract>Let's suppose we wanted to write a new GNU <CODE>make</CODE> function that would create a temporary file and return its name. We would like our function to take a prefix as an argument. First we can write the function in a file <SAMP><SPAN class=file>mk_temp.c</SPAN></SAMP>: </FONT><PRE class=example><FONT class=extract>     #include &lt;stdlib.h&gt;
     #include &lt;stdlib.h&gt;
     #include &lt;stdio.h&gt;
     #include &lt;string.h&gt;
     #include &lt;unistd.h&gt;
     #include &lt;errno.h&gt;
     
     #include &lt;gnumake.h&gt;
     
     int plugin_is_GPL_compatible;
     
     char *
     gen_tmpfile(const char *nm, int argc, char **argv)
     {
       int fd;
     
       /* Compute the size of the filename and allocate space for it.  */
       int len = strlen (argv[0]) + 6 + 1;
       char *buf = gmk_alloc (len);
     
       strcpy (buf, argv[0]);
       strcat (buf, "XXXXXX");
     
       fd = mkstemp(buf);
       if (fd &gt;= 0)
         {
           /* Don't leak the file descriptor.  */
           close (fd);
           return buf;
         }
     
       /* Failure.  */
       fprintf (stderr, "mkstemp(%s) failed: %s\n", buf, strerror (errno));
       gmk_free (buf);
       return NULL;
     }
     
     int
     mk_temp_gmk_setup ()
     {
       /* Register the function with make name "mk-temp".  */
       gmk_add_function ("mk-temp", gen_tmpfile, 1, 1, 1);
       return 1;
     }
</FONT></PRE>
<P><FONT class=extract>Next, we will write a makefile that can build this shared object, load it, and use it: </FONT><PRE class=example><FONT class=extract>     all:
             @echo Temporary file: $(mk-temp tmpfile.)
     
     load mk_temp.so
     
     mk_temp.so: mk_temp.c
             $(CC) -shared -fPIC -o $ $&lt;
</FONT></PRE>
<P><FONT class=extract>On MS-Windows, due to peculiarities of how shared objects are produced, the compiler needs to scan the <DFN>import library</DFN> produced when building <CODE>make</CODE>, typically called <SAMP><SPAN class=file>libgnumake-</SPAN><VAR>version</VAR><SPAN class=file>.dll.a</SPAN></SAMP>, where <VAR>version</VAR> is the version of the load object API. So the recipe to produce a shared object will look on Windows like this (assuming the API version is 1): </FONT><PRE class=example><FONT class=extract>     mk_temp.dll: mk_temp.c
             $(CC) -shared -o $ $&lt; -lgnumake-1
</FONT></PRE>
<P><FONT class=extract>Now when you run <CODE>make</CODE> you'll see something like: </FONT><PRE class=example><FONT class=extract>     $ make
     cc -shared -fPIC -o mk_temp.so mk_temp.c
     Temporary filename: tmpfile.A7JEwd</FONT>
</PRE>
<DIV class=node><A name=Features></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Missing" rel=next>Missing</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Extending-make" rel=previous>Extending make</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>13 Features of GNU <CODE>make</CODE></FONT></H2>
<P><A name=index-features-of-GNU-_0040code_007bmake_007d-1078></A><A name=index-portability-1079></A><A name=index-compatibility-1080></A><FONT class=extract>Here is a summary of the features of GNU <CODE>make</CODE>, for comparison with and credit to other versions of <CODE>make</CODE>. We consider the features of <CODE>make</CODE> in 4.2 BSD systems as a baseline. If you are concerned with writing portable makefiles, you should not use the features of <CODE>make</CODE> listed here, nor the ones in </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Missing"><FONT class=extract>Missing</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>Many features come from the version of <CODE>make</CODE> in System V. </FONT>
<UL>
<LI><FONT class=extract>The <CODE>VPATH</CODE> variable and its special meaning. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Searching Directories for Prerequisites</FONT></A><FONT class=extract>. This feature exists in System V <CODE>make</CODE>, but is undocumented. It is documented in 4.3 BSD <CODE>make</CODE> (which says it mimics System V's <CODE>VPATH</CODE> feature). </FONT>
<LI><FONT class=extract>Included makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. Allowing multiple files to be included with a single directive is a GNU extension. </FONT>
<LI><FONT class=extract>Variables are read from and communicated via the environment. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Options passed through the variable <CODE>MAKEFLAGS</CODE> to recursive invocations of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The automatic variable <CODE>$%</CODE> is set to the member name in an archive reference. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The automatic variables <CODE>$@</CODE>, <CODE>$*</CODE>, <CODE>$&lt;</CODE>, <CODE>$%</CODE>, and <CODE>$?</CODE> have corresponding forms like <CODE>$(@F)</CODE> and <CODE>$(@D)</CODE>. We have generalized this to <CODE>$^</CODE> as an obvious extension. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Substitution variable references. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The command line options &#8216;<SAMP><SPAN class=samp>-b</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217;, accepted and ignored. In System V <CODE>make</CODE>, these options actually do something. </FONT>
<LI><FONT class=extract>Execution of recursive commands to run <CODE>make</CODE> via the variable <CODE>MAKE</CODE> even if &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; is specified. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Support for suffix &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; in suffix rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules"><FONT class=extract>Archive Suffix Rules</FONT></A><FONT class=extract>. This feature is obsolete in GNU <CODE>make</CODE>, because the general feature of rule chaining (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>) allows one pattern rule for installing members in an archive (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Update"><FONT class=extract>Archive Update</FONT></A><FONT class=extract>) to be sufficient. </FONT>
<LI><FONT class=extract>The arrangement of lines and backslash/newline combinations in recipes is retained when the recipes are printed, so they appear as they do in the makefile, except for the stripping of initial whitespace. </FONT></LI></UL>
<P><FONT class=extract>The following features were inspired by various other versions of <CODE>make</CODE>. In some cases it is unclear exactly which versions inspired which others. </FONT>
<UL>
<LI><FONT class=extract>Pattern rules using &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. This has been implemented in several versions of <CODE>make</CODE>. We're not sure who invented it first, but it's been spread around a bit. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Rule chaining and implicit intermediate files. This was implemented by Stu Feldman in his version of <CODE>make</CODE> for AT&amp;T Eighth Edition Research Unix, and later by Andrew Hume of AT&amp;T Bell Labs in his <CODE>mk</CODE> program (where he terms it &#8220;transitive closure&#8221;). We do not really know if we got this from either of them or thought it up ourselves at the same time. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The automatic variable <CODE>$^</CODE> containing a list of all prerequisites of the current target. We did not invent this, but we have no idea who did. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>. The automatic variable <CODE>$+</CODE> is a simple extension of <CODE>$^</CODE>. </FONT>
<LI><FONT class=extract>The &#8220;what if&#8221; flag (&#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; in GNU <CODE>make</CODE>) was (as far as we know) invented by Andrew Hume in <CODE>mk</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The concept of doing several things at once (parallelism) exists in many incarnations of <CODE>make</CODE> and similar programs, though not in the System V or BSD implementations. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>A number of different build tools that support parallelism also support collecting output and displaying as a single block. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output"><FONT class=extract>Output During Parallel Execution</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Modified variable references using pattern substitution come from SunOS 4. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>. This functionality was provided in GNU <CODE>make</CODE> by the <CODE>patsubst</CODE> function before the alternate syntax was implemented for compatibility with SunOS 4. It is not altogether clear who inspired whom, since GNU <CODE>make</CODE> had <CODE>patsubst</CODE> before SunOS 4 was released. </FONT>
<LI><FONT class=extract>The special significance of &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; characters preceding recipe lines (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>) is mandated by <CITE>IEEE Standard 1003.2-1992</CITE> (POSIX.2). </FONT>
<LI><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; syntax to append to the value of a variable comes from SunOS 4 <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Appending"><FONT class=extract>Appending More Text to Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The syntax &#8216;<SAMP><VAR>archive</VAR><SPAN class=samp>(</SPAN><VAR>mem1</VAR><SPAN class=samp>&nbsp;</SPAN><VAR>mem2</VAR><SPAN class=samp>...)</SPAN></SAMP>&#8217;<!-- /@w --> to list multiple members in a single archive file comes from SunOS 4 <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>The <CODE>-include</CODE> directive to include makefiles with no error for a nonexistent file comes from SunOS 4 <CODE>make</CODE>. (But note that SunOS 4 <CODE>make</CODE> does not allow multiple makefiles to be specified in one <CODE>-include</CODE> directive.) The same feature appears with the name <CODE>sinclude</CODE> in SGI <CODE>make</CODE> and perhaps others. </FONT>
<LI><FONT class=extract>The <CODE>!=</CODE> shell assignment operator exists in many BSD of <CODE>make</CODE> and is purposefully implemented here to behave identically to those implementations. </FONT>
<LI><FONT class=extract>Various build management tools are implemented using scripting languages such as Perl or Python and thus provide a natural embedded scripting language, similar to GNU <CODE>make</CODE>'s integration of GNU Guile. </FONT></LI></UL>
<P><FONT class=extract>The remaining features are inventions new in GNU <CODE>make</CODE>: </FONT>
<UL>
<LI><FONT class=extract>Use the &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--version</SPAN></SAMP>&#8217; option to print version and copyright information. </FONT>
<LI><FONT class=extract>Use the &#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--help</SPAN></SAMP>&#8217; option to summarize the options to <CODE>make</CODE>. </FONT>
<LI><FONT class=extract>Simply-expanded variables. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Pass command line variable assignments automatically through the variable <CODE>MAKE</CODE> to recursive <CODE>make</CODE> invocations. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Use the &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--directory</SPAN></SAMP>&#8217; command option to change directory. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Make verbatim variable definitions with <CODE>define</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Defining Multi-Line Variables</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Declare phony targets with the special target <CODE>.PHONY</CODE>. </FONT>
<P><FONT class=extract>Andrew Hume of AT&amp;T Bell Labs implemented a similar feature with a different syntax in his <CODE>mk</CODE> program. This seems to be a case of parallel discovery. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>. </FONT></P>
<LI><FONT class=extract>Manipulate text by calling functions. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Use the &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--old-file</SPAN></SAMP>&#8217; option to pretend a file's modification-time is old. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation"><FONT class=extract>Avoiding Recompilation of Some Files</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Conditional execution. </FONT>
<P><FONT class=extract>This feature has been implemented numerous times in various versions of <CODE>make</CODE>; it seems a natural extension derived from the features of the C preprocessor and similar macro languages and is not a revolutionary concept. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditional Parts of Makefiles</FONT></A><FONT class=extract>. </FONT></P>
<LI><FONT class=extract>Specify a search path for included makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Specify extra makefiles to read with an environment variable. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable"><FONT class=extract>The Variable <CODE>MAKEFILES</CODE></FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Strip leading sequences of &#8216;<SAMP><SPAN class=samp>./</SPAN></SAMP>&#8217; from file names, so that <SAMP><SPAN class=file>./</SPAN><VAR>file</VAR></SAMP> and <SAMP><VAR>file</VAR></SAMP> are considered to be the same file. </FONT>
<LI><FONT class=extract>Use a special search method for library prerequisites written in the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch"><FONT class=extract>Directory Search for Link Libraries</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Allow suffixes for suffix rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>) to contain any characters. In other versions of <CODE>make</CODE>, they must begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217; and not contain any &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217; characters. </FONT>
<LI><FONT class=extract>Keep track of the current level of <CODE>make</CODE> recursion using the variable <CODE>MAKELEVEL</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Provide any goals given on the command line in the variable <CODE>MAKECMDGOALS</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Specify static pattern rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern"><FONT class=extract>Static Pattern Rules</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Provide selective <CODE>vpath</CODE> search. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Searching Directories for Prerequisites</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Provide computed variable references. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Reference"><FONT class=extract>Basics of Variable References</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Update makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>. System V <CODE>make</CODE> has a very, very limited form of this functionality in that it will check out SCCS files for makefiles. </FONT>
<LI><FONT class=extract>Various new built-in implicit rules. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>. </FONT>
<LI><FONT class=extract>Load dynamic objects which can modify the behavior of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects"><FONT class=extract>Loading Dynamic Objects</FONT></A><FONT class=extract>.</FONT> </LI></UL>
<DIV class=node><A name=Missing></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=next>Makefile Conventions</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Features" rel=previous>Features</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>14 Incompatibilities and Missing Features</FONT></H2>
<P><A name=index-incompatibilities-1081></A><A name=index-missing-features-1082></A><A name=index-features_002c-missing-1083></A><FONT class=extract>The <CODE>make</CODE> programs in various other systems support a few features that are not implemented in GNU <CODE>make</CODE>. The POSIX.2 standard (<CITE>IEEE Standard 1003.2-1992</CITE>) which specifies <CODE>make</CODE> does not require any of these features. </FONT>
<UL>
<LI><FONT class=extract>A target of the form &#8216;<SAMP><VAR>file</VAR><SPAN class=samp>((</SPAN><VAR>entry</VAR><SPAN class=samp>))</SPAN></SAMP>&#8217; stands for a member of archive file <VAR>file</VAR>. The member is chosen, not by name, but by being an object file which defines the linker symbol <VAR>entry</VAR>. </FONT>
<P><FONT class=extract>This feature was not put into GNU <CODE>make</CODE> because of the non-modularity of putting knowledge into <CODE>make</CODE> of the internal format of archive file symbol tables. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols"><FONT class=extract>Updating Archive Symbol Directories</FONT></A><FONT class=extract>. </FONT></P>
<LI><FONT class=extract>Suffixes (used in suffix rules) that end with the character &#8216;<SAMP><SPAN class=samp>~</SPAN></SAMP>&#8217; have a special meaning to System V <CODE>make</CODE>; they refer to the SCCS file that corresponds to the file one would get without the &#8216;<SAMP><SPAN class=samp>~</SPAN></SAMP>&#8217;. For example, the suffix rule &#8216;<SAMP><SPAN class=samp>.c~.o</SPAN></SAMP>&#8217; would make the file <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> from the SCCS file <SAMP><SPAN class=file>s.</SPAN><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP>. For complete coverage, a whole series of such suffix rules is required. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>In GNU <CODE>make</CODE>, this entire series of cases is handled by two pattern rules for extraction from SCCS, in combination with the general feature of rule chaining. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>. </FONT></P>
<LI><FONT class=extract>In System V and 4.3 BSD <CODE>make</CODE>, files found by <CODE>VPATH</CODE> search (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Searching Directories for Prerequisites</FONT></A><FONT class=extract>) have their names changed inside recipes. We feel it is much cleaner to always use automatic variables and thus make this feature obsolete. </FONT>
<LI><FONT class=extract>In some Unix <CODE>make</CODE>s, the automatic variable <CODE>$*</CODE> appearing in the prerequisites of a rule has the amazingly strange &#8220;feature&#8221; of expanding to the full name of the <EM>target of that rule</EM>. We cannot imagine what went on in the minds of Unix <CODE>make</CODE> developers to do this; it is utterly inconsistent with the normal definition of <CODE>$*</CODE>. </FONT><A name=index-g_t_002a-_0040r_007b_0028automatic-variable_0029_002c-unsupported-bizarre-usage_007d-1084></A>
<LI><FONT class=extract>In some Unix <CODE>make</CODE>s, implicit rule search (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>) is apparently done for <EM>all</EM> targets, not just those without recipes. This means you can do: </FONT><PRE class=example><FONT class=extract>          foo.o:
                  cc -c foo.c
</FONT></PRE>
<P class=noindent><FONT class=extract>and Unix <CODE>make</CODE> will intuit that <SAMP><SPAN class=file>foo.o</SPAN></SAMP> depends on <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. </FONT>
<P><FONT class=extract>We feel that such usage is broken. The prerequisite properties of <CODE>make</CODE> are well-defined (for GNU <CODE>make</CODE>, at least), and doing such a thing simply does not fit the model. </FONT></P>
<LI><FONT class=extract>GNU <CODE>make</CODE> does not include any built-in implicit rules for compiling or preprocessing EFL programs. If we hear of anyone who is using EFL, we will gladly add them. </FONT>
<LI><FONT class=extract>It appears that in SVR4 <CODE>make</CODE>, a suffix rule can be specified with no recipe, and it is treated as if it had an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Empty Recipes</FONT></A><FONT class=extract>). For example: </FONT><PRE class=example><FONT class=extract>          .c.a:
</FONT></PRE>
<P class=noindent><FONT class=extract>will override the built-in <SAMP><SPAN class=file>.c.a</SPAN></SAMP> suffix rule. </FONT>
<P><FONT class=extract>We feel that it is cleaner for a rule without a recipe to always simply add to the prerequisite list for the target. The above example can be easily rewritten to get the desired behavior in GNU <CODE>make</CODE>: </FONT><PRE class=example><FONT class=extract>          .c.a: ;
</FONT></PRE>
<LI><FONT class=extract>Some versions of <CODE>make</CODE> invoke the shell with the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; flag, except under &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Testing"><FONT class=extract>Testing the Compilation of a Program</FONT></A><FONT class=extract>). The &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; flag tells the shell to exit as soon as any program it runs returns a nonzero status. We feel it is cleaner to write each line of the recipe to stand on its own and not require this special treatment.</FONT> </LI></UL><!-- The makefile standards are in a separate file that is also --><!-- included by standards.texi. --><!-- This file is included by both standards.texi and make.texinfo. --><!-- It was broken out of standards.texi on 1/6/93 by roland. -->
<DIV class=node><A name=Makefile-Conventions></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference" rel=next>Quick Reference</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Missing" rel=previous>Missing</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=chapter><FONT class=extract>15 Makefile Conventions</FONT></H2>
<P><A name=index-makefile_002c-conventions-for-1085><FONT class=extract></FONT></A><A name=index-conventions-for-makefiles-1086></A><A name=index-standards-for-makefiles-1087></A><!-- Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, --><!-- 2004, 2005, 2006, 2007, 2008, 2010, 2013 Free Software Foundation, Inc. --><!-- Permission is granted to copy, distribute and/or modify this document --><!-- under the terms of the GNU Free Documentation License, Version 1.3 --><!-- or any later version published by the Free Software Foundation; --><!-- with no Invariant Sections, with no --><!-- Front-Cover Texts, and with no Back-Cover Texts. --><!-- A copy of the license is included in the section entitled ``GNU --><!-- Free Documentation License''. -->
<P><FONT class=extract>This describes conventions for writing the Makefiles for GNU programs. Using Automake will help you write a Makefile that follows these conventions. For more information on portable Makefiles, see <SPAN class=sc>posix</SPAN> and </FONT><A href="https://www.gnu.org/software/make/manual/autoconf.html#Portable-Make"><FONT class=extract>Portable Make Programming</FONT></A><FONT class=extract>. </FONT>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Makefile-Basics"><FONT class=extract>Makefile Basics</FONT></A><FONT class=extract>: General conventions for Makefiles. </FONT>
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Utilities-in-Makefiles"><FONT class=extract>Utilities in Makefiles</FONT></A><FONT class=extract>: Utilities to be used in Makefiles. </FONT>
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Command-Variables"><FONT class=extract>Command Variables</FONT></A><FONT class=extract>: Variables for specifying commands. </FONT>
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#DESTDIR"><FONT class=extract>DESTDIR</FONT></A><FONT class=extract>: Supporting staged installs. </FONT>
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables"><FONT class=extract>Directory Variables</FONT></A><FONT class=extract>: Variables for installation directories. </FONT>
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets"><FONT class=extract>Standard Targets</FONT></A><FONT class=extract>: Standard targets for users. </FONT>
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories"><FONT class=extract>Install Command Categories</FONT></A><FONT class=extract>: Three categories of commands in the `install' rule: normal, pre-install and post-install. </FONT></LI></UL>
<DIV class=node><A name=Makefile-Basics></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Utilities-in-Makefiles" rel=next><FONT class=extract>Utilities in Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.1 General Conventions for Makefiles</FONT></H3>
<P><FONT class=extract>Every Makefile should contain this line: </FONT><PRE class=example><FONT class=extract>     SHELL = /bin/sh
</FONT></PRE>
<P class=noindent><FONT class=extract>to avoid trouble on systems where the <CODE>SHELL</CODE> variable might be inherited from the environment. (This is never a problem with GNU <CODE>make</CODE>.) </FONT>
<P><FONT class=extract>Different <CODE>make</CODE> programs have incompatible suffix lists and implicit rules, and this sometimes creates confusion or misbehavior. So it is a good idea to set the suffix list explicitly using only the suffixes you need in the particular Makefile, like this: </FONT><PRE class=example><FONT class=extract>     .SUFFIXES:
     .SUFFIXES: .c .o
</FONT></PRE>
<P class=noindent><FONT class=extract>The first line clears out the suffix list, the second introduces all suffixes which may be subject to implicit rules in this Makefile. </FONT>
<P><FONT class=extract>Don't assume that <SAMP><SPAN class=file>.</SPAN></SAMP> is in the path for command execution. When you need to run programs that are a part of your package during the make, please make sure that it uses <SAMP><SPAN class=file>./</SPAN></SAMP> if the program is built as part of the make or <SAMP><SPAN class=file>$(srcdir)/</SPAN></SAMP> if the file is an unchanging part of the source code. Without one of these prefixes, the current search path is used. </FONT>
<P><FONT class=extract>The distinction between <SAMP><SPAN class=file>./</SPAN></SAMP> (the <DFN>build directory</DFN>) and <SAMP><SPAN class=file>$(srcdir)/</SPAN></SAMP> (the <DFN>source directory</DFN>) is important because users can build in a separate directory using the &#8216;<SAMP><SPAN class=samp>--srcdir</SPAN></SAMP>&#8217; option to <SAMP><SPAN class=file>configure</SPAN></SAMP>. A rule of the form: </FONT><PRE class=smallexample><FONT class=extract>     foo.1 : foo.man sedscript
             sed -f sedscript foo.man &gt; foo.1
</FONT></PRE>
<P class=noindent><FONT class=extract>will fail when the build directory is not the source directory, because <SAMP><SPAN class=file>foo.man</SPAN></SAMP> and <SAMP><SPAN class=file>sedscript</SPAN></SAMP> are in the source directory. </FONT>
<P><FONT class=extract>When using GNU <CODE>make</CODE>, relying on &#8216;<SAMP><SPAN class=samp>VPATH</SPAN></SAMP>&#8217; to find the source file will work in the case where there is a single dependency file, since the <CODE>make</CODE> automatic variable &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; will represent the source file wherever it is. (Many versions of <CODE>make</CODE> set &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; only in implicit rules.) A Makefile target like </FONT><PRE class=smallexample><FONT class=extract>     foo.o : bar.c
             $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</FONT></PRE>
<P class=noindent><FONT class=extract>should instead be written as </FONT><PRE class=smallexample><FONT class=extract>     foo.o : bar.c
             $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>in order to allow &#8216;<SAMP><SPAN class=samp>VPATH</SPAN></SAMP>&#8217; to work correctly. When the target has multiple dependencies, using an explicit &#8216;<SAMP><SPAN class=samp>$(srcdir)</SPAN></SAMP>&#8217; is the easiest way to make the rule work well. For example, the target above for <SAMP><SPAN class=file>foo.1</SPAN></SAMP> is best written as: </FONT><PRE class=smallexample><FONT class=extract>     foo.1 : foo.man sedscript
             sed -f $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</FONT></PRE>
<P><FONT class=extract>GNU distributions usually contain some files which are not source files&#8212;for example, Info files, and the output from Autoconf, Automake, Bison or Flex. Since these files normally appear in the source directory, they should always appear in the source directory, not in the build directory. So Makefile rules to update them should put the updated files in the source directory. </FONT>
<P><FONT class=extract>However, if a file does not appear in the distribution, then the Makefile should not put it in the source directory, because building a program in ordinary circumstances should not modify the source directory in any way. </FONT>
<P><FONT class=extract>Try to make the build and installation targets, at least (and all their subtargets) work correctly with a parallel <CODE>make</CODE>. </FONT>
<DIV class=node><A name=Utilities-in-Makefiles></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Command-Variables" rel=next><FONT class=extract>Command Variables</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Basics" rel=previous><FONT class=extract>Makefile Basics</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.2 Utilities in Makefiles</FONT></H3>
<P><FONT class=extract>Write the Makefile commands (and any shell scripts, such as <CODE>configure</CODE>) to run under <CODE>sh</CODE> (both the traditional Bourne shell and the <SPAN class=sc>posix</SPAN> shell), not <CODE>csh</CODE>. Don't use any special features of <CODE>ksh</CODE> or <CODE>bash</CODE>, or <SPAN class=sc>posix</SPAN> features not widely supported in traditional Bourne <CODE>sh</CODE>. </FONT>
<P><FONT class=extract>The <CODE>configure</CODE> script and the Makefile rules for building and installation should not use any utilities directly except these: <!-- dd find --><!-- gunzip gzip md5sum --><!-- mkfifo mknod tee uname --></FONT><PRE class=example><FONT class=extract>     awk cat cmp cp diff echo egrep expr false grep install-info ln ls
     mkdir mv printf pwd rm rmdir sed sleep sort tar test touch tr true
</FONT></PRE>
<P><FONT class=extract>Compression programs such as <CODE>gzip</CODE> can be used in the <CODE>dist</CODE> rule. </FONT>
<P><FONT class=extract>Generally, stick to the widely-supported (usually <SPAN class=sc>posix</SPAN>-specified) options and features of these programs. For example, don't use &#8216;<SAMP><SPAN class=samp>mkdir -p</SPAN></SAMP>&#8217;, convenient as it may be, because a few systems don't support it at all and with others, it is not safe for parallel execution. For a list of known incompatibilities, see </FONT><A href="https://www.gnu.org/software/make/manual/autoconf.html#Portable-Shell"><FONT class=extract>Portable Shell Programming</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>It is a good idea to avoid creating symbolic links in makefiles, since a few file systems don't support them. </FONT>
<P><FONT class=extract>The Makefile rules for building and installation can also use compilers and related programs, but should do so via <CODE>make</CODE> variables so that the user can substitute alternatives. Here are some of the programs we mean: </FONT><PRE class=example><FONT class=extract>     ar bison cc flex install ld ldconfig lex
     make makeinfo ranlib texi2dvi yacc
</FONT></PRE>
<P><FONT class=extract>Use the following <CODE>make</CODE> variables to run those programs: </FONT><PRE class=example><FONT class=extract>     $(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)
     $(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)
</FONT></PRE>
<P><FONT class=extract>When you use <CODE>ranlib</CODE> or <CODE>ldconfig</CODE>, you should make sure nothing bad happens if the system does not have the program in question. Arrange to ignore an error from that command, and print a message before the command to tell the user that failure of this command does not mean a problem. (The Autoconf &#8216;<SAMP><SPAN class=samp>AC_PROG_RANLIB</SPAN></SAMP>&#8217; macro can help with this.) </FONT>
<P><FONT class=extract>If you use symbolic links, you should implement a fallback for systems that don't have symbolic links. </FONT>
<P><FONT class=extract>Additional utilities that can be used via Make variables are: </FONT><PRE class=example><FONT class=extract>     chgrp chmod chown mknod
</FONT></PRE>
<P><FONT class=extract>It is ok to use other utilities in Makefile portions (or scripts) intended only for particular systems where you know those utilities exist. </FONT>
<DIV class=node><A name=Command-Variables></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#DESTDIR" rel=next><FONT class=extract>DESTDIR</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Utilities-in-Makefiles" rel=previous><FONT class=extract>Utilities in Makefiles</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.3 Variables for Specifying Commands</FONT></H3>
<P><FONT class=extract>Makefiles should provide variables for overriding certain commands, options, and so on. </FONT>
<P><FONT class=extract>In particular, you should run most utility programs via variables. Thus, if you use Bison, have a variable named <CODE>BISON</CODE> whose default value is set with &#8216;<SAMP><SPAN class=samp>BISON = bison</SPAN></SAMP>&#8217;, and refer to it with <CODE>$(BISON)</CODE> whenever you need to use Bison. </FONT>
<P><FONT class=extract>File management utilities such as <CODE>ln</CODE>, <CODE>rm</CODE>, <CODE>mv</CODE>, and so on, need not be referred to through variables in this way, since users don't need to replace them with other programs. </FONT>
<P><FONT class=extract>Each program-name variable should come with an options variable that is used to supply options to the program. Append &#8216;<SAMP><SPAN class=samp>FLAGS</SPAN></SAMP>&#8217; to the program-name variable name to get the options variable name&#8212;for example, <CODE>BISONFLAGS</CODE>. (The names <CODE>CFLAGS</CODE> for the C compiler, <CODE>YFLAGS</CODE> for yacc, and <CODE>LFLAGS</CODE> for lex, are exceptions to this rule, but we keep them because they are standard.) Use <CODE>CPPFLAGS</CODE> in any compilation command that runs the preprocessor, and use <CODE>LDFLAGS</CODE> in any compilation command that does linking as well as in any direct use of <CODE>ld</CODE>. </FONT>
<P><FONT class=extract>If there are C compiler options that <EM>must</EM> be used for proper compilation of certain files, do not include them in <CODE>CFLAGS</CODE>. Users expect to be able to specify <CODE>CFLAGS</CODE> freely themselves. Instead, arrange to pass the necessary options to the C compiler independently of <CODE>CFLAGS</CODE>, by writing them explicitly in the compilation commands or by defining an implicit rule, like this: </FONT><PRE class=smallexample><FONT class=extract>     CFLAGS = -g
     ALL_CFLAGS = -I. $(CFLAGS)
     .c.o:
             $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&lt;
</FONT></PRE>
<P><FONT class=extract>Do include the &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; option in <CODE>CFLAGS</CODE>, because that is not <EM>required</EM> for proper compilation. You can consider it a default that is only recommended. If the package is set up so that it is compiled with GCC by default, then you might as well include &#8216;<SAMP><SPAN class=samp>-O</SPAN></SAMP>&#8217; in the default value of <CODE>CFLAGS</CODE> as well. </FONT>
<P><FONT class=extract>Put <CODE>CFLAGS</CODE> last in the compilation command, after other variables containing compiler options, so the user can use <CODE>CFLAGS</CODE> to override the others. </FONT>
<P><FONT class=extract><CODE>CFLAGS</CODE> should be used in every invocation of the C compiler, both those which do compilation and those which do linking. </FONT>
<P><FONT class=extract>Every Makefile should define the variable <CODE>INSTALL</CODE>, which is the basic command for installing a file into the system. </FONT>
<P><FONT class=extract>Every Makefile should also define the variables <CODE>INSTALL_PROGRAM</CODE> and <CODE>INSTALL_DATA</CODE>. (The default for <CODE>INSTALL_PROGRAM</CODE> should be <CODE>$(INSTALL)</CODE>; the default for <CODE>INSTALL_DATA</CODE> should be <CODE>${INSTALL} -m 644</CODE>.) Then it should use those variables as the commands for actual installation, for executables and non-executables respectively. Minimal use of these variables is as follows: </FONT><PRE class=example><FONT class=extract>     $(INSTALL_PROGRAM) foo $(bindir)/foo
     $(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a
</FONT></PRE>
<P><FONT class=extract>However, it is preferable to support a <CODE>DESTDIR</CODE> prefix on the target files, as explained in the next section. </FONT>
<P><FONT class=extract>It is acceptable, but not required, to install multiple files in one command, with the final argument being a directory, as in: </FONT><PRE class=example><FONT class=extract>     $(INSTALL_PROGRAM) foo bar baz $(bindir)
</FONT></PRE>
<DIV class=node><A name=DESTDIR></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables" rel=next><FONT class=extract>Directory Variables</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Command-Variables" rel=previous><FONT class=extract>Command Variables</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.4 <CODE>DESTDIR</CODE>: Support for Staged Installs</FONT></H3>
<P><A name=index-DESTDIR-1088></A><A name=index-staged-installs-1089></A><A name=index-installations_002c-staged-1090></A><FONT class=extract><CODE>DESTDIR</CODE> is a variable prepended to each installed target file, like this: </FONT><PRE class=example><FONT class=extract>     $(INSTALL_PROGRAM) foo $(DESTDIR)$(bindir)/foo
     $(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a
</FONT></PRE>
<P><FONT class=extract>The <CODE>DESTDIR</CODE> variable is specified by the user on the <CODE>make</CODE> command line as an absolute file name. For example: </FONT><PRE class=example><FONT class=extract>     make DESTDIR=/tmp/stage install
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>DESTDIR</CODE> should be supported only in the <CODE>install*</CODE> and <CODE>uninstall*</CODE> targets, as those are the only targets where it is useful. </FONT>
<P><FONT class=extract>If your installation step would normally install <SAMP><SPAN class=file>/usr/local/bin/foo</SPAN></SAMP> and <SAMP><SPAN class=file>/usr/local/lib/libfoo.a</SPAN></SAMP>, then an installation invoked as in the example above would install <SAMP><SPAN class=file>/tmp/stage/usr/local/bin/foo</SPAN></SAMP> and <SAMP><SPAN class=file>/tmp/stage/usr/local/lib/libfoo.a</SPAN></SAMP> instead. </FONT>
<P><FONT class=extract>Prepending the variable <CODE>DESTDIR</CODE> to each target in this way provides for <DFN>staged installs</DFN>, where the installed files are not placed directly into their expected location but are instead copied into a temporary location (<CODE>DESTDIR</CODE>). However, installed files maintain their relative directory structure and any embedded file names will not be modified. </FONT>
<P><FONT class=extract>You should not set the value of <CODE>DESTDIR</CODE> in your <SAMP><SPAN class=file>Makefile</SPAN></SAMP> at all; then the files are installed into their expected locations by default. Also, specifying <CODE>DESTDIR</CODE> should not change the operation of the software in any way, so its value should not be included in any file contents. </FONT>
<P><FONT class=extract><CODE>DESTDIR</CODE> support is commonly used in package creation. It is also helpful to users who want to understand what a given package will install where, and to allow users who don't normally have permissions to install into protected areas to build and install before gaining those permissions. Finally, it can be useful with tools such as <CODE>stow</CODE>, where code is installed in one place but made to appear to be installed somewhere else using symbolic links or special mount operations. So, we strongly recommend GNU packages support <CODE>DESTDIR</CODE>, though it is not an absolute requirement. </FONT>
<DIV class=node><A name=Directory-Variables></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets" rel=next><FONT class=extract>Standard Targets</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#DESTDIR" rel=previous><FONT class=extract>DESTDIR</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.5 Variables for Installation Directories</FONT></H3>
<P><FONT class=extract>Installation directories should always be named by variables, so it is easy to install in a nonstandard place. The standard names for these variables and the values they should have in GNU packages are described below. They are based on a standard file system layout; variants of it are used in GNU/Linux and other modern operating systems. </FONT>
<P><FONT class=extract>Installers are expected to override these values when calling <SAMP><SPAN class=command>make</SPAN></SAMP> (e.g., <KBD>make prefix=/usr install</KBD> or <SAMP><SPAN class=command>configure</SPAN></SAMP> (e.g., <KBD>configure --prefix=/usr</KBD>). GNU packages should not try to guess which value should be appropriate for these variables on the system they are being installed onto: use the default settings specified here so that all GNU packages behave identically, allowing the installer to achieve any desired layout. </FONT>
<P><A name=index-directories_002c-creating-installation-1091></A><A name=index-installation-directories_002c-creating-1092></A><FONT class=extract>All installation directories, and their parent directories, should be created (if necessary) before they are installed into. </FONT>
<P><FONT class=extract>These first two variables set the root for the installation. All the other installation directories should be subdirectories of one of these two, and nothing should be directly installed into these two directories. </FONT>
<DL>
<DT><FONT class=extract><CODE>prefix</CODE> </FONT>
<DD><A name=index-prefix-1093></A><FONT class=extract>A prefix used in constructing the default values of the variables listed below. The default value of <CODE>prefix</CODE> should be <SAMP><SPAN class=file>/usr/local</SPAN></SAMP>. When building the complete GNU system, the prefix will be empty and <SAMP><SPAN class=file>/usr</SPAN></SAMP> will be a symbolic link to <SAMP><SPAN class=file>/</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@prefix@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>Running &#8216;<SAMP><SPAN class=samp>make install</SPAN></SAMP>&#8217; with a different value of <CODE>prefix</CODE> from the one used to build the program should <EM>not</EM> recompile the program. <BR></FONT></P>
<DT><FONT class=extract><CODE>exec_prefix</CODE> </FONT>
<DD><A name=index-exec_005fprefix-1094></A><FONT class=extract>A prefix used in constructing the default values of some of the variables listed below. The default value of <CODE>exec_prefix</CODE> should be <CODE>$(prefix)</CODE>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@exec_prefix@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>Generally, <CODE>$(exec_prefix)</CODE> is used for directories that contain machine-specific files (such as executables and subroutine libraries), while <CODE>$(prefix)</CODE> is used directly for other directories. </FONT>
<P><FONT class=extract>Running &#8216;<SAMP><SPAN class=samp>make install</SPAN></SAMP>&#8217; with a different value of <CODE>exec_prefix</CODE> from the one used to build the program should <EM>not</EM> recompile the program. </FONT></P></DD></DL>
<P><FONT class=extract>Executable programs are installed in one of the following directories. </FONT>
<DL>
<DT><FONT class=extract><CODE>bindir</CODE> </FONT>
<DD><A name=index-bindir-1095></A><FONT class=extract>The directory for installing executable programs that users can run. This should normally be <SAMP><SPAN class=file>/usr/local/bin</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/bin</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@bindir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract><CODE>sbindir</CODE> </FONT>
<DD><A name=index-sbindir-1096></A><FONT class=extract>The directory for installing executable programs that can be run from the shell, but are only generally useful to system administrators. This should normally be <SAMP><SPAN class=file>/usr/local/sbin</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/sbin</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sbindir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract><CODE>libexecdir</CODE> </FONT>
<DD><A name=index-libexecdir-1097></A><!-- This paragraph adjusted to avoid overfull hbox -roland 5jul94 --><FONT class=extract>The directory for installing executable programs to be run by other programs rather than by users. This directory should normally be <SAMP><SPAN class=file>/usr/local/libexec</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/libexec</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@libexecdir@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>The definition of &#8216;<SAMP><SPAN class=samp>libexecdir</SPAN></SAMP>&#8217; is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under <SAMP><SPAN class=file>$(libexecdir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN></SAMP>, possibly within additional subdirectories thereof, such as <SAMP><SPAN class=file>$(libexecdir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN><VAR>machine</VAR><SPAN class=file>/</SPAN><VAR>version</VAR></SAMP>. </FONT></P></DD></DL>
<P><FONT class=extract>Data files used by the program during its execution are divided into categories in two ways. </FONT>
<UL>
<LI><FONT class=extract>Some files are normally modified by programs; others are never normally modified (though users may edit some of these). </FONT>
<LI><FONT class=extract>Some files are architecture-independent and can be shared by all machines at a site; some are architecture-dependent and can be shared only by machines of the same kind and operating system; others may never be shared between two machines. </FONT></LI></UL>
<P><FONT class=extract>This makes for six different possibilities. However, we want to discourage the use of architecture-dependent files, aside from object files and libraries. It is much cleaner to make other data files architecture-independent, and it is generally not hard. </FONT>
<P><FONT class=extract>Here are the variables Makefiles should use to specify directories to put these various kinds of files in: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>datarootdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The root of the directory tree for read-only architecture-independent data files. This should normally be <SAMP><SPAN class=file>/usr/local/share</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/share</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@datarootdir@</SPAN></SAMP>&#8217;.) &#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217;'s default value is based on this variable; so are &#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mandir</SPAN></SAMP>&#8217;, and others. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing idiosyncratic read-only architecture-independent data files for this program. This is usually the same place as &#8216;<SAMP><SPAN class=samp>datarootdir</SPAN></SAMP>&#8217;, but we use the two separate variables so that you can move these program-specific files without altering the location for Info files, man pages, etc. <!-- raggedright  (not until next Texinfo release) --></FONT>
<P><FONT class=extract>This should normally be <SAMP><SPAN class=file>/usr/local/share</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(datarootdir)</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@datadir@</SPAN></SAMP>&#8217;.) <!-- end raggedright --></FONT>
<P><FONT class=extract>The definition of &#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217; is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under <SAMP><SPAN class=file>$(datadir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN></SAMP>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>sysconfdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing read-only data files that pertain to a single machine&#8211;that is to say, files for configuring a host. Mailer and network configuration files, <SAMP><SPAN class=file>/etc/passwd</SPAN></SAMP>, and so forth belong here. All the files in this directory should be ordinary ASCII text files. This directory should normally be <SAMP><SPAN class=file>/usr/local/etc</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/etc</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sysconfdir@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>Do not install executables here in this directory (they probably belong in <SAMP><SPAN class=file>$(libexecdir)</SPAN></SAMP> or <SAMP><SPAN class=file>$(sbindir)</SPAN></SAMP>). Also do not install files that are modified in the normal course of their use (programs whose purpose is to change the configuration of the system excluded). Those probably belong in <SAMP><SPAN class=file>$(localstatedir)</SPAN></SAMP>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>sharedstatedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing architecture-independent data files which the programs modify while they run. This should normally be <SAMP><SPAN class=file>/usr/local/com</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/com</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sharedstatedir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>localstatedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing data files which the programs modify while they run, and that pertain to one specific machine. Users should never need to modify files in this directory to configure the package's operation; put such configuration information in separate files that go in <SAMP><SPAN class=file>$(datadir)</SPAN></SAMP> or <SAMP><SPAN class=file>$(sysconfdir)</SPAN></SAMP>. <SAMP><SPAN class=file>$(localstatedir)</SPAN></SAMP> should normally be <SAMP><SPAN class=file>/usr/local/var</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/var</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@localstatedir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>runstatedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing data files which the programs modify while they run, that pertain to one specific machine, and which need not persist longer than the execution of the program&#8212;which is generally long-lived, for example, until the next reboot. PID files for system daemons are a typical use. In addition, this directory should not be cleaned except perhaps at reboot, while the general <SAMP><SPAN class=file>/tmp</SPAN></SAMP> (<CODE>TMPDIR</CODE>) may be cleaned arbitrarily. This should normally be <SAMP><SPAN class=file>/var/run</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(localstatedir)/run</SPAN></SAMP>. Having it as a separate variable allows the use of <SAMP><SPAN class=file>/run</SPAN></SAMP> if desired, for example. (If you are using Autoconf 2.70 or later, write it as &#8216;<SAMP><SPAN class=samp>@runstatedir@</SPAN></SAMP>&#8217;.) </FONT></DD></DL>
<P><FONT class=extract>These variables specify the directory for installing certain specific types of files, if your program has them. Every GNU package should have Info files, so every program needs &#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217;, but not all need &#8216;<SAMP><SPAN class=samp>libdir</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>lispdir</SPAN></SAMP>&#8217;. </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>includedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing header files to be included by user programs with the C &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; preprocessor directive. This should normally be <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/include</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@includedir@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>Most compilers other than GCC do not look for header files in directory <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>. So installing the header files this way is only useful with GCC. Sometimes this is not a problem because some libraries are only really intended to work with GCC. But some libraries are intended to work with other compilers. They should install their header files in two places, one specified by <CODE>includedir</CODE> and one specified by <CODE>oldincludedir</CODE>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>oldincludedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; header files for use with compilers other than GCC. This should normally be <SAMP><SPAN class=file>/usr/include</SPAN></SAMP>. (If you are using Autoconf, you can write it as &#8216;<SAMP><SPAN class=samp>@oldincludedir@</SPAN></SAMP>&#8217;.) </FONT>
<P><FONT class=extract>The Makefile commands should check whether the value of <CODE>oldincludedir</CODE> is empty. If it is, they should not try to use it; they should cancel the second installation of the header files. </FONT>
<P><FONT class=extract>A package should not replace an existing header in this directory unless the header came from the same package. Thus, if your Foo package provides a header file <SAMP><SPAN class=file>foo.h</SPAN></SAMP>, then it should install the header file in the <CODE>oldincludedir</CODE> directory if either (1) there is no <SAMP><SPAN class=file>foo.h</SPAN></SAMP> there or (2) the <SAMP><SPAN class=file>foo.h</SPAN></SAMP> that exists came from the Foo package. </FONT>
<P><FONT class=extract>To tell whether <SAMP><SPAN class=file>foo.h</SPAN></SAMP> came from the Foo package, put a magic string in the file&#8212;part of a comment&#8212;and <CODE>grep</CODE> for that string. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>docdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing documentation files (other than Info) for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/doc/</SPAN><VAR>yourpkg</VAR></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/doc/</SPAN><VAR>yourpkg</VAR></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@docdir@</SPAN></SAMP>&#8217;.) The <VAR>yourpkg</VAR> subdirectory, which may include a version number, prevents collisions among files with common names, such as <SAMP><SPAN class=file>README</SPAN></SAMP>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing the Info files for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/info</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/info</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@infodir@</SPAN></SAMP>&#8217;.) <CODE>infodir</CODE> is separate from <CODE>docdir</CODE> for compatibility with existing practice. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>htmldir</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>dvidir</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>pdfdir</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>psdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Directories for installing documentation files in the particular format. They should all be set to <CODE>$(docdir)</CODE> by default. (If you are using Autoconf, write them as &#8216;<SAMP><SPAN class=samp>@htmldir@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>@dvidir@</SPAN></SAMP>&#8217;, etc.) Packages which supply several translations of their documentation should install them in &#8216;<SAMP><SPAN class=samp>$(htmldir)/</SPAN></SAMP>&#8217;<VAR>ll</VAR>, &#8216;<SAMP><SPAN class=samp>$(pdfdir)/</SPAN></SAMP>&#8217;<VAR>ll</VAR>, etc. where <VAR>ll</VAR> is a locale abbreviation such as &#8216;<SAMP><SPAN class=samp>en</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>pt_BR</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>libdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for object files and libraries of object code. Do not install executables here, they probably ought to go in <SAMP><SPAN class=file>$(libexecdir)</SPAN></SAMP> instead. The value of <CODE>libdir</CODE> should normally be <SAMP><SPAN class=file>/usr/local/lib</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/lib</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@libdir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>lispdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing any Emacs Lisp files in this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/emacs/site-lisp</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/emacs/site-lisp</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If you are using Autoconf, write the default as &#8216;<SAMP><SPAN class=samp>@lispdir@</SPAN></SAMP>&#8217;. In order to make &#8216;<SAMP><SPAN class=samp>@lispdir@</SPAN></SAMP>&#8217; work, you need the following lines in your <SAMP><SPAN class=file>configure.ac</SPAN></SAMP> file: </FONT><PRE class=example><FONT class=extract>          lispdir='${datarootdir}/emacs/site-lisp'
          AC_SUBST(lispdir)
</FONT></PRE><BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>localedir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing locale-specific message catalogs for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/locale</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/locale</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@localedir@</SPAN></SAMP>&#8217;.) This directory usually has a subdirectory per locale. </FONT></DD></DL>
<P><FONT class=extract>Unix-style man pages are installed in one of the following: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>mandir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The top-level directory for installing the man pages (if any) for this package. It will normally be <SAMP><SPAN class=file>/usr/local/share/man</SPAN></SAMP>, but you should write it as <SAMP><SPAN class=file>$(datarootdir)/man</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@mandir@</SPAN></SAMP>&#8217;.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>man1dir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing section 1 man pages. Write it as <SAMP><SPAN class=file>$(mandir)/man1</SPAN></SAMP>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>man2dir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for installing section 2 man pages. Write it as <SAMP><SPAN class=file>$(mandir)/man2</SPAN></SAMP> <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>...</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract><STRONG>Don't make the primary documentation for any GNU software be a man page. Write a manual in Texinfo instead. Man pages are just for the sake of people running GNU software on Unix, which is a secondary application only.</STRONG> <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>manext</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The file name extension for the installed man page. This should contain a period followed by the appropriate digit; it should normally be &#8216;<SAMP><SPAN class=samp>.1</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>man1ext</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The file name extension for installed section 1 man pages. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>man2ext</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The file name extension for installed section 2 man pages. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>...</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Use these names instead of &#8216;<SAMP><SPAN class=samp>manext</SPAN></SAMP>&#8217; if the package needs to install man pages in more than one section of the manual. </FONT></DD></DL>
<P><FONT class=extract>And finally, you should set the following variable: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>srcdir</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory for the sources being compiled. The value of this variable is normally inserted by the <CODE>configure</CODE> shell script. (If you are using Autoconf, use &#8216;<SAMP><SPAN class=samp>srcdir = @srcdir@</SPAN></SAMP>&#8217;.) </FONT></DD></DL>
<P><FONT class=extract>For example: </FONT><PRE class=smallexample><FONT class=extract>     <!-- I have changed some of the comments here slightly to fix an overfull -->
     <!-- hbox, so the make manual can format correctly. -roland -->
     # Common prefix for installation directories.
     # NOTE: This directory must exist when you start the install.
     prefix = /usr/local
     datarootdir = $(prefix)/share
     datadir = $(datarootdir)
     exec_prefix = $(prefix)
     # Where to put the executable for the command `gcc'.
     bindir = $(exec_prefix)/bin
     # Where to put the directories used by the compiler.
     libexecdir = $(exec_prefix)/libexec
     # Where to put the Info files.
     infodir = $(datarootdir)/info
</FONT></PRE>
<P><FONT class=extract>If your program installs a large number of files into one of the standard user-specified directories, it might be useful to group them into a subdirectory particular to that program. If you do this, you should write the <CODE>install</CODE> rule to create these subdirectories. </FONT>
<P><FONT class=extract>Do not expect the user to include the subdirectory name in the value of any of the variables listed above. The idea of having a uniform set of variable names for installation directories is to enable the user to specify the exact same values for several different GNU packages. In order for this to be useful, all the packages must be designed so that they will work sensibly when the user does so. </FONT>
<P><FONT class=extract>At times, not all of these variables may be implemented in the current release of Autoconf and/or Automake; but as of Autoconf&nbsp;2.60, we believe all of them are. When any are missing, the descriptions here serve as specifications for what Autoconf will implement. As a programmer, you can either use a development version of Autoconf or avoid using these variables until a stable release is made which supports them. </FONT>
<DIV class=node><A name=Standard-Targets></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Next:&nbsp;</FONT><A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories" rel=next><FONT class=extract>Install Command Categories</FONT></A><FONT class=extract>, Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables" rel=previous><FONT class=extract>Directory Variables</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.6 Standard Targets for Users</FONT></H3>
<P><FONT class=extract>All GNU programs should have the following targets in their Makefiles: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Compile the entire program. This should be the default target. This target need not rebuild any documentation files; Info files should normally be included in the distribution, and DVI (and other documentation format) files should be made only when explicitly asked for. </FONT>
<P><FONT class=extract>By default, the Make rules should compile and link with &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217;, so that executable programs have debugging symbols. Otherwise, you are essentially helpless in the face of a crash, and it is often far from easy to reproduce with a fresh build. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Compile the program and copy the executables, libraries, and so on to the file names where they should reside for actual use. If there is a simple test to verify that a program is properly installed, this target should run that test. </FONT>
<P><FONT class=extract>Do not strip executables when installing them. This helps eventual debugging that may be needed later, and nowadays disk space is cheap and dynamic loaders typically ensure debug sections are not loaded during normal execution. Users that need stripped binaries may invoke the <CODE>install-strip</CODE> target to do that. </FONT>
<P><FONT class=extract>If possible, write the <CODE>install</CODE> target rule so that it does not modify anything in the directory where the program was built, provided &#8216;<SAMP><SPAN class=samp>make all</SPAN></SAMP>&#8217; has just been done. This is convenient for building the program under one user name and installing it under another. </FONT>
<P><FONT class=extract>The commands should create all the directories in which files are to be installed, if they don't already exist. This includes the directories specified as the values of the variables <CODE>prefix</CODE> and <CODE>exec_prefix</CODE>, as well as all subdirectories that are needed. One way to do this is by means of an <CODE>installdirs</CODE> target as described below. </FONT>
<P><FONT class=extract>Use &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; before any command for installing a man page, so that <CODE>make</CODE> will ignore any errors. This is in case there are systems that don't have the Unix man page documentation system installed. </FONT>
<P><FONT class=extract>The way to install Info files is to copy them into <SAMP><SPAN class=file>$(infodir)</SPAN></SAMP> with <CODE>$(INSTALL_DATA)</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Command-Variables"><FONT class=extract>Command Variables</FONT></A><FONT class=extract>), and then run the <CODE>install-info</CODE> program if it is present. <CODE>install-info</CODE> is a program that edits the Info <SAMP><SPAN class=file>dir</SPAN></SAMP> file to add or update the menu entry for the given Info file; it is part of the Texinfo package. </FONT>
<P><FONT class=extract>Here is a sample rule to install an Info file that also tries to handle some additional situations, such as <CODE>install-info</CODE> not being present. <!-- This example has been carefully formatted for the Make manual. --><!-- Please do not reformat it without talking to bug-make@gnu.org. --></FONT><PRE class=smallexample><FONT class=extract>          do-install-info: foo.info installdirs
                  $(NORMAL_INSTALL)
          # Prefer an info file in . to one in srcdir.
                  if test -f foo.info; then d=.; \
                   else d="$(srcdir)"; fi; \
                  $(INSTALL_DATA) $$d/foo.info \
                    "$(DESTDIR)$(infodir)/foo.info"
          # Run install-info only if it exists.
          # Use `if' instead of just prepending `-' to the
          # line so we notice real errors from install-info.
          # Use `$(SHELL) -c' because some shells do not
          # fail gracefully when there is an unknown command.
                  $(POST_INSTALL)
                  if $(SHELL) -c 'install-info --version' \
                     &gt;/dev/null 2&gt;&amp;1; then \
                    install-info --dir-file="$(DESTDIR)$(infodir)/dir" \
                                 "$(DESTDIR)$(infodir)/foo.info"; \
                  else true; fi
</FONT></PRE>
<P><FONT class=extract>When writing the <CODE>install</CODE> target, you must classify all the commands into three categories: normal ones, <DFN>pre-installation</DFN> commands and <DFN>post-installation</DFN> commands. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories"><FONT class=extract>Install Command Categories</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install-html</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install-dvi</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install-pdf</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install-ps</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>These targets install documentation in formats other than Info; they're intended to be called explicitly by the person installing the package, if that format is desired. GNU prefers Info files, so these must be installed by the <CODE>install</CODE> target. </FONT>
<P><FONT class=extract>When you have many documentation files to install, we recommend that you avoid collisions and clutter by arranging for these targets to install in subdirectories of the appropriate installation directory, such as <CODE>htmldir</CODE>. As one example, if your package has multiple manuals, and you wish to install HTML documentation with many files (such as the &#8220;split&#8221; mode output by <CODE>makeinfo --html</CODE>), you'll certainly want to use subdirectories, or two nodes with the same name in different manuals will overwrite each other. </FONT>
<P><FONT class=extract>Please make these <CODE>install-</CODE><VAR>format</VAR> targets invoke the commands for the <VAR>format</VAR> target, for example, by making <VAR>format</VAR> a dependency. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>uninstall</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Delete all the installed files&#8212;the copies that the &#8216;<SAMP><SPAN class=samp>install</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>install-*</SPAN></SAMP>&#8217; targets create. </FONT>
<P><FONT class=extract>This rule should not modify the directories where compilation is done, only the directories where files are installed. </FONT>
<P><FONT class=extract>The uninstallation commands are divided into three categories, just like the installation commands. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories"><FONT class=extract>Install Command Categories</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>install-strip</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Like <CODE>install</CODE>, but strip the executable files while installing them. In simple cases, this target can use the <CODE>install</CODE> target in a simple way: </FONT><PRE class=smallexample><FONT class=extract>          install-strip:
                  $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \
                          install
</FONT></PRE>
<P><FONT class=extract>But if the package installs scripts as well as real executables, the <CODE>install-strip</CODE> target can't just refer to the <CODE>install</CODE> target; it has to strip the executables but not the scripts. </FONT>
<P><FONT class=extract><CODE>install-strip</CODE> should not strip the executables in the build directory which are being copied for installation. It should only strip the copies that are installed. </FONT>
<P><FONT class=extract>Normally we do not recommend stripping an executable unless you are sure the program has no bugs. However, it can be reasonable to install a stripped executable for actual execution while saving the unstripped executable elsewhere in case there is a bug. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Delete all files in the current directory that are normally created by building the program. Also delete files in other directories if they are created by this makefile. However, don't delete the files that record the configuration. Also preserve files that could be made by building, but normally aren't because the distribution comes with them. There is no need to delete parent directories that were created with &#8216;<SAMP><SPAN class=samp>mkdir -p</SPAN></SAMP>&#8217;, since they could have existed anyway. </FONT>
<P><FONT class=extract>Delete <SAMP><SPAN class=file>.dvi</SPAN></SAMP> files here if they are not part of the distribution. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>distclean</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Delete all files in the current directory (or created by this makefile) that are created by configuring or building the program. If you have unpacked the source and built the program without creating any other files, &#8216;<SAMP><SPAN class=samp>make distclean</SPAN></SAMP>&#8217; should leave only the files that were in the distribution. However, there is no need to delete parent directories that were created with &#8216;<SAMP><SPAN class=samp>mkdir -p</SPAN></SAMP>&#8217;, since they could have existed anyway. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>mostlyclean</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Like &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217;, but may refrain from deleting a few files that people normally don't want to recompile. For example, the &#8216;<SAMP><SPAN class=samp>mostlyclean</SPAN></SAMP>&#8217; target for GCC does not delete <SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>, because recompiling it is rarely necessary and takes a lot of time. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>maintainer-clean</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Delete almost everything that can be reconstructed with this Makefile. This typically includes everything deleted by <CODE>distclean</CODE>, plus more: C source files produced by Bison, tags tables, Info files, and so on. </FONT>
<P><FONT class=extract>The reason we say &#8220;almost everything&#8221; is that running the command &#8216;<SAMP><SPAN class=samp>make maintainer-clean</SPAN></SAMP>&#8217; should not delete <SAMP><SPAN class=file>configure</SPAN></SAMP> even if <SAMP><SPAN class=file>configure</SPAN></SAMP> can be remade using a rule in the Makefile. More generally, &#8216;<SAMP><SPAN class=samp>make maintainer-clean</SPAN></SAMP>&#8217; should not delete anything that needs to exist in order to run <SAMP><SPAN class=file>configure</SPAN></SAMP> and then begin to build the program. Also, there is no need to delete parent directories that were created with &#8216;<SAMP><SPAN class=samp>mkdir -p</SPAN></SAMP>&#8217;, since they could have existed anyway. These are the only exceptions; <CODE>maintainer-clean</CODE> should delete everything else that can be rebuilt. </FONT>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>maintainer-clean</SPAN></SAMP>&#8217; target is intended to be used by a maintainer of the package, not by ordinary users. You may need special tools to reconstruct some of the files that &#8216;<SAMP><SPAN class=samp>make maintainer-clean</SPAN></SAMP>&#8217; deletes. Since these files are normally included in the distribution, we don't take care to make them easy to reconstruct. If you find you need to unpack the full distribution again, don't blame us. </FONT>
<P><FONT class=extract>To help make users aware of this, the commands for the special <CODE>maintainer-clean</CODE> target should start with these two: </FONT><PRE class=smallexample><FONT class=extract>          @echo 'This command is intended for maintainers to use; it'
          @echo 'deletes files that may need special tools to rebuild.'
</FONT></PRE><BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>TAGS</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Update a tags table for this program. <!-- ADR: how? --><BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>info</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Generate any Info files needed. The best way to write the rules is as follows: </FONT><PRE class=smallexample><FONT class=extract>          info: foo.info
          
          foo.info: foo.texi chap1.texi chap2.texi
                  $(MAKEINFO) $(srcdir)/foo.texi
</FONT></PRE>
<P class=noindent><FONT class=extract>You must define the variable <CODE>MAKEINFO</CODE> in the Makefile. It should run the <CODE>makeinfo</CODE> program, which is part of the Texinfo distribution. </FONT>
<P><FONT class=extract>Normally a GNU distribution comes with Info files, and that means the Info files are present in the source directory. Therefore, the Make rule for an info file should update it in the source directory. When users build the package, ordinarily Make will not update the Info files because they will already be up to date. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>dvi</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>html</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>pdf</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>ps</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Generate documentation files in the given format. These targets should always exist, but any or all can be a no-op if the given output format cannot be generated. These targets should not be dependencies of the <CODE>all</CODE> target; the user must manually invoke them. </FONT>
<P><FONT class=extract>Here's an example rule for generating DVI files from Texinfo: </FONT><PRE class=smallexample><FONT class=extract>          dvi: foo.dvi
          
          foo.dvi: foo.texi chap1.texi chap2.texi
                  $(TEXI2DVI) $(srcdir)/foo.texi
</FONT></PRE>
<P class=noindent><FONT class=extract>You must define the variable <CODE>TEXI2DVI</CODE> in the Makefile. It should run the program <CODE>texi2dvi</CODE>, which is part of the Texinfo distribution. (<CODE>texi2dvi</CODE> uses TeX to do the real work of formatting. TeX is not distributed with Texinfo.) Alternatively, write only the dependencies, and allow GNU <CODE>make</CODE> to provide the command. </FONT>
<P><FONT class=extract>Here's another example, this one for generating HTML from Texinfo: </FONT><PRE class=smallexample><FONT class=extract>          html: foo.html
          
          foo.html: foo.texi chap1.texi chap2.texi
                  $(TEXI2HTML) $(srcdir)/foo.texi
</FONT></PRE>
<P class=noindent><FONT class=extract>Again, you would define the variable <CODE>TEXI2HTML</CODE> in the Makefile; for example, it might run <CODE>makeinfo --no-split --html</CODE> (<SAMP><SPAN class=command>makeinfo</SPAN></SAMP> is part of the Texinfo distribution). <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>dist</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Create a distribution tar file for this program. The tar file should be set up so that the file names in the tar file start with a subdirectory name which is the name of the package it is a distribution for. This name can include the version number. </FONT>
<P><FONT class=extract>For example, the distribution tar file of GCC version 1.40 unpacks into a subdirectory named <SAMP><SPAN class=file>gcc-1.40</SPAN></SAMP>. </FONT>
<P><FONT class=extract>The easiest way to do this is to create a subdirectory appropriately named, use <CODE>ln</CODE> or <CODE>cp</CODE> to install the proper files in it, and then <CODE>tar</CODE> that subdirectory. </FONT>
<P><FONT class=extract>Compress the tar file with <CODE>gzip</CODE>. For example, the actual distribution file for GCC version 1.40 is called <SAMP><SPAN class=file>gcc-1.40.tar.gz</SPAN></SAMP>. It is ok to support other free compression formats as well. </FONT>
<P><FONT class=extract>The <CODE>dist</CODE> target should explicitly depend on all non-source files that are in the distribution, to make sure they are up to date in the distribution. See </FONT><A href="https://www.gnu.org/software/make/manual/standards.html#Releases"><FONT class=extract>Making Releases</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>check</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Perform self-tests (if any). The user must build the program before running the tests, but need not install the program; you should write the self-tests so that they work when the program is built but not installed. </FONT></DD></DL>
<P><FONT class=extract>The following targets are suggested as conventional names, for programs in which they are useful. </FONT>
<DL>
<DT><FONT class=extract><CODE>installcheck</CODE> </FONT>
<DD><FONT class=extract>Perform installation tests (if any). The user must build and install the program before running the tests. You should not assume that <SAMP><SPAN class=file>$(bindir)</SPAN></SAMP> is in the search path. <BR></FONT>
<DT><FONT class=extract><CODE>installdirs</CODE> </FONT>
<DD><FONT class=extract>It's useful to add a target named &#8216;<SAMP><SPAN class=samp>installdirs</SPAN></SAMP>&#8217; to create the directories where files are installed, and their parent directories. There is a script called <SAMP><SPAN class=file>mkinstalldirs</SPAN></SAMP> which is convenient for this; you can find it in the Gnulib package. You can use a rule like this: <!-- This has been carefully formatted to look decent in the Make manual. --><!-- Please be sure not to make it extend any further to the right.-roland --></FONT><PRE class=smallexample><FONT class=extract>          # Make sure all installation directories (e.g. $(bindir))
          # actually exist by making them if necessary.
          installdirs: mkinstalldirs
                  $(srcdir)/mkinstalldirs $(bindir) $(datadir) \
                                          $(libdir) $(infodir) \
                                          $(mandir)
</FONT></PRE>
<P class=noindent><FONT class=extract>or, if you wish to support <SAMP><SPAN class=env>DESTDIR</SPAN></SAMP> (strongly encouraged), </FONT><PRE class=smallexample><FONT class=extract>          # Make sure all installation directories (e.g. $(bindir))
          # actually exist by making them if necessary.
          installdirs: mkinstalldirs
                  $(srcdir)/mkinstalldirs \
                      $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \
                      $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \
                      $(DESTDIR)$(mandir)
</FONT></PRE>
<P><FONT class=extract>This rule should not modify the directories where compilation is done. It should do nothing but create installation directories. </FONT></P></DD></DL>
<DIV class=node><A name=Install-Command-Categories></A>
<P><FONT class=extract></FONT></P><FONT class=extract>
<HR>
Previous:&nbsp;</FONT><A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets" rel=previous><FONT class=extract>Standard Targets</FONT></A><FONT class=extract>, Up:&nbsp;</FONT><A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=up><FONT class=extract>Makefile Conventions</FONT></A><FONT class=extract> </FONT></DIV>
<H3 class=section><FONT class=extract>15.7 Install Command Categories</FONT></H3>
<P><A name=index-pre_002dinstallation-commands-1098></A><A name=index-post_002dinstallation-commands-1099></A><FONT class=extract>When writing the <CODE>install</CODE> target, you must classify all the commands into three categories: normal ones, <DFN>pre-installation</DFN> commands and <DFN>post-installation</DFN> commands. </FONT>
<P><FONT class=extract>Normal commands move files into their proper places, and set their modes. They may not alter any files except the ones that come entirely from the package they belong to. </FONT>
<P><FONT class=extract>Pre-installation and post-installation commands may alter other files; in particular, they can edit global configuration files or data bases. </FONT>
<P><FONT class=extract>Pre-installation commands are typically executed before the normal commands, and post-installation commands are typically run after the normal commands. </FONT>
<P><FONT class=extract>The most common use for a post-installation command is to run <CODE>install-info</CODE>. This cannot be done with a normal command, since it alters a file (the Info directory) which does not come entirely and solely from the package being installed. It is a post-installation command because it needs to be done after the normal command which installs the package's Info files. </FONT>
<P><FONT class=extract>Most programs don't need any pre-installation commands, but we have the feature just in case it is needed. </FONT>
<P><FONT class=extract>To classify the commands in the <CODE>install</CODE> rule into these three categories, insert <DFN>category lines</DFN> among them. A category line specifies the category for the commands that follow. </FONT>
<P><FONT class=extract>A category line consists of a tab and a reference to a special Make variable, plus an optional comment at the end. There are three variables you can use, one for each category; the variable name specifies the category. Category lines are no-ops in ordinary execution because these three Make variables are normally undefined (and you <EM>should not</EM> define them in the makefile). </FONT>
<P><FONT class=extract>Here are the three possible category lines, each with a comment that explains what it means: </FONT><PRE class=smallexample><FONT class=extract>             $(PRE_INSTALL)     # <SPAN class=roman><FONT face="Times New Roman">Pre-install commands follow.</FONT></SPAN>
             $(POST_INSTALL)    # <SPAN class=roman><FONT face="Times New Roman">Post-install commands follow.</FONT></SPAN>
             $(NORMAL_INSTALL)  # <SPAN class=roman><FONT face="Times New Roman">Normal commands follow.</FONT></SPAN>
</FONT></PRE>
<P><FONT class=extract>If you don't use a category line at the beginning of the <CODE>install</CODE> rule, all the commands are classified as normal until the first category line. If you don't use any category lines, all the commands are classified as normal. </FONT>
<P><FONT class=extract>These are the category lines for <CODE>uninstall</CODE>: </FONT><PRE class=smallexample><FONT class=extract>             $(PRE_UNINSTALL)     # <SPAN class=roman><FONT face="Times New Roman">Pre-uninstall commands follow.</FONT></SPAN>
             $(POST_UNINSTALL)    # <SPAN class=roman><FONT face="Times New Roman">Post-uninstall commands follow.</FONT></SPAN>
             $(NORMAL_UNINSTALL)  # <SPAN class=roman><FONT face="Times New Roman">Normal commands follow.</FONT></SPAN>
</FONT></PRE>
<P><FONT class=extract>Typically, a pre-uninstall command would be used for deleting entries from the Info directory. </FONT>
<P><FONT class=extract>If the <CODE>install</CODE> or <CODE>uninstall</CODE> target has any dependencies which act as subroutines of installation, then you should start <EM>each</EM> dependency's commands with a category line, and start the main target's commands with a category line also. This way, you can ensure that each command is placed in the right category regardless of which of the dependencies actually run. </FONT>
<P><FONT class=extract>Pre-installation and post-installation commands should not run any programs except for these: </FONT><PRE class=example><FONT class=extract>     [ basename bash cat chgrp chmod chown cmp cp dd diff echo
     egrep expand expr false fgrep find getopt grep gunzip gzip
     hostname install install-info kill ldconfig ln ls md5sum
     mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee
     test touch true uname xargs yes
</FONT></PRE>
<P><A name=index-binary-packages-1100></A><FONT class=extract>The reason for distinguishing the commands in this way is for the sake of making binary packages. Typically a binary package contains all the executables and other files that need to be installed, and has its own method of installing them&#8212;so it does not need to run the normal installation commands. But installing the binary package does need to execute the pre-installation and post-installation commands. </FONT>
<P><FONT class=extract>Programs to build binary packages work by extracting the pre-installation and post-installation commands. Here is one way of extracting the pre-installation commands (the <SAMP><SPAN class=option>-s</SPAN></SAMP> option to <SAMP><SPAN class=command>make</SPAN></SAMP> is needed to silence messages about entering subdirectories): </FONT><PRE class=smallexample><FONT class=extract>     make -s -n install -o all \
           PRE_INSTALL=pre-install \
           POST_INSTALL=post-install \
           NORMAL_INSTALL=normal-install \
       | gawk -f pre-install.awk
</FONT></PRE>
<P class=noindent><FONT class=extract>where the file <SAMP><SPAN class=file>pre-install.awk</SPAN></SAMP> could contain this: </FONT><PRE class=smallexample><FONT class=extract>     $0 ~ /^(normal-install|post-install)[ \t]*$/ {on = 0}
     on {print $0}
     $0 ~ /^pre-install[ \t]*$/ {on = 1}</FONT>
</PRE>
<DIV class=node><A name=Quick-Reference></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Error-Messages" rel=next>Error Messages</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions" rel=previous>Makefile Conventions</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=appendix><FONT class=extract>Appendix A Quick Reference</FONT></H2>
<P><FONT class=extract>This appendix summarizes the directives, text manipulation functions, and special variables which GNU <CODE>make</CODE> understands. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets"><FONT class=extract>Special Targets</FONT></A><FONT class=extract>, </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>, and </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>, for other summaries. </FONT>
<P><FONT class=extract>Here is a summary of the directives GNU <CODE>make</CODE> recognizes: </FONT>
<DL>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR> </FONT>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR><CODE> =</CODE> </FONT>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR><CODE> :=</CODE> </FONT>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR><CODE> ::=</CODE> </FONT>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR><CODE> +=</CODE> </FONT>
<DT><FONT class=extract><CODE>define </CODE><VAR>variable</VAR><CODE> ?=</CODE> </FONT>
<DT><FONT class=extract><CODE>endef</CODE> </FONT>
<DD><FONT class=extract>Define multi-line variables.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine"><FONT class=extract>Multi-Line</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>undefine </CODE><VAR>variable</VAR> </FONT>
<DD><FONT class=extract>Undefining variables.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive"><FONT class=extract>Undefine Directive</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>ifdef </CODE><VAR>variable</VAR> </FONT>
<DT><FONT class=extract><CODE>ifndef </CODE><VAR>variable</VAR> </FONT>
<DT><FONT class=extract><CODE>ifeq (</CODE><VAR>a</VAR><CODE>,</CODE><VAR>b</VAR><CODE>)</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq "</CODE><VAR>a</VAR><CODE>" "</CODE><VAR>b</VAR><CODE>"</CODE> </FONT>
<DT><FONT class=extract><CODE>ifeq '</CODE><VAR>a</VAR><CODE>' '</CODE><VAR>b</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq (</CODE><VAR>a</VAR><CODE>,</CODE><VAR>b</VAR><CODE>)</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq "</CODE><VAR>a</VAR><CODE>" "</CODE><VAR>b</VAR><CODE>"</CODE> </FONT>
<DT><FONT class=extract><CODE>ifneq '</CODE><VAR>a</VAR><CODE>' '</CODE><VAR>b</VAR><CODE>'</CODE> </FONT>
<DT><FONT class=extract><CODE>else</CODE> </FONT>
<DT><FONT class=extract><CODE>endif</CODE> </FONT>
<DD><FONT class=extract>Conditionally evaluate part of the makefile.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditionals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>include </CODE><VAR>file</VAR> </FONT>
<DT><FONT class=extract><CODE>-include </CODE><VAR>file</VAR> </FONT>
<DT><FONT class=extract><CODE>sinclude </CODE><VAR>file</VAR> </FONT>
<DD><FONT class=extract>Include another makefile.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>override </CODE><VAR>variable-assignment</VAR> </FONT>
<DD><FONT class=extract>Define a variable, overriding any previous definition, even one from the command line.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>export</CODE> </FONT>
<DD><FONT class=extract>Tell <CODE>make</CODE> to export all variables to child processes by default.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>export </CODE><VAR>variable</VAR> </FONT>
<DT><FONT class=extract><CODE>export </CODE><VAR>variable-assignment</VAR> </FONT>
<DT><FONT class=extract><CODE>unexport </CODE><VAR>variable</VAR> </FONT>
<DD><FONT class=extract>Tell <CODE>make</CODE> whether or not to export a particular variable to child processes.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Communicating Variables to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>private </CODE><VAR>variable-assignment</VAR> </FONT>
<DD><FONT class=extract>Do not allow this variable assignment to be inherited by prerequisites.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance"><FONT class=extract>Suppressing Inheritance</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> <VAR>path</VAR> </FONT>
<DD><FONT class=extract>Specify a search path for files matching a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; pattern.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search"><FONT class=extract>The <CODE>vpath</CODE> Directive</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>vpath </CODE><VAR>pattern</VAR> </FONT>
<DD><FONT class=extract>Remove all search paths previously specified for <VAR>pattern</VAR>. <BR></FONT>
<DT><FONT class=extract><CODE>vpath</CODE> </FONT>
<DD><FONT class=extract>Remove all search paths previously specified in any <CODE>vpath</CODE> directive. </FONT></DD></DL>
<P><FONT class=extract>Here is a summary of the built-in functions (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions</FONT></A><FONT class=extract>): </FONT>
<DL>
<DT><FONT class=extract><CODE>$(subst </CODE><VAR>from</VAR><CODE>,</CODE><VAR>to</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Replace <VAR>from</VAR> with <VAR>to</VAR> in <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(patsubst </CODE><VAR>pattern</VAR><CODE>,</CODE><VAR>replacement</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Replace words matching <VAR>pattern</VAR> with <VAR>replacement</VAR> in <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(strip </CODE><VAR>string</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Remove excess whitespace characters from <VAR>string</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(findstring </CODE><VAR>find</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Locate <VAR>find</VAR> in <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(filter </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Select words in <VAR>text</VAR> that match one of the <VAR>pattern</VAR> words.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(filter-out </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Select words in <VAR>text</VAR> that <EM>do not</EM> match any of the <VAR>pattern</VAR> words.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(sort </CODE><VAR>list</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Sort the words in <VAR>list</VAR> lexicographically, removing duplicates.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(word </CODE><VAR>n</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Extract the <VAR>n</VAR>th word (one-origin) of <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(words </CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Count the number of words in <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(wordlist </CODE><VAR>s</VAR><CODE>,</CODE><VAR>e</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Returns the list of words in <VAR>text</VAR> from <VAR>s</VAR> to <VAR>e</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(firstword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the first word of <VAR>names</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(lastword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the last word of <VAR>names</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(dir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the directory part of each file name.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(notdir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the non-directory part of each file name.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(suffix </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the suffix (the last &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217; and following characters) of each file name.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(basename </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Extract the base name (name without suffix) of each file name.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(addsuffix </CODE><VAR>suffix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Append <VAR>suffix</VAR> to each word in <VAR>names</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(addprefix </CODE><VAR>prefix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Prepend <VAR>prefix</VAR> to each word in <VAR>names</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(join </CODE><VAR>list1</VAR><CODE>,</CODE><VAR>list2</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Join two parallel lists of words.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(wildcard </CODE><VAR>pattern</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>Find file names matching a shell file name pattern (<EM>not</EM> a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; pattern).<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function"><FONT class=extract>The Function <CODE>wildcard</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(realpath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>For each file name in <VAR>names</VAR>, expand to an absolute name that does not contain any <CODE>.</CODE>, <CODE>..</CODE>, nor symlinks.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(abspath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>For each file name in <VAR>names</VAR>, expand to an absolute name that does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, but preserves symlinks.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(error </CODE><VAR>text</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>When this function is evaluated, <CODE>make</CODE> generates a fatal error with the message <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions"><FONT class=extract>Functions That Control Make</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(warning </CODE><VAR>text</VAR><CODE>...)</CODE> </FONT>
<DD><FONT class=extract>When this function is evaluated, <CODE>make</CODE> generates a warning with the message <VAR>text</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions"><FONT class=extract>Functions That Control Make</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(shell </CODE><VAR>command</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Execute a shell command and return its output.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function"><FONT class=extract>The <CODE>shell</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(origin </CODE><VAR>variable</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Return a string describing how the <CODE>make</CODE> variable <VAR>variable</VAR> was defined.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function"><FONT class=extract>The <CODE>origin</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(flavor </CODE><VAR>variable</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Return a string describing the flavor of the <CODE>make</CODE> variable <VAR>variable</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function"><FONT class=extract>The <CODE>flavor</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(foreach </CODE><VAR>var</VAR><CODE>,</CODE><VAR>words</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Evaluate <VAR>text</VAR> with <VAR>var</VAR> bound to each word in <VAR>words</VAR>, and concatenate the results.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function"><FONT class=extract>The <CODE>foreach</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(if </CODE><VAR>condition</VAR><CODE>,</CODE><VAR>then-part</VAR><CODE>[,</CODE><VAR>else-part</VAR><CODE>])</CODE> </FONT>
<DD><FONT class=extract>Evaluate the condition <VAR>condition</VAR>; if it's non-empty substitute the expansion of the <VAR>then-part</VAR> otherwise substitute the expansion of the <VAR>else-part</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions"><FONT class=extract>Functions for Conditionals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(or </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> </FONT>
<DD><FONT class=extract>Evaluate each condition <VAR>conditionN</VAR> one at a time; substitute the first non-empty expansion. If all expansions are empty, substitute the empty string.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions"><FONT class=extract>Functions for Conditionals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(and </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> </FONT>
<DD><FONT class=extract>Evaluate each condition <VAR>conditionN</VAR> one at a time; if any expansion results in the empty string substitute the empty string. If all expansions result in a non-empty string, substitute the expansion of the last <VAR>condition</VAR>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions"><FONT class=extract>Functions for Conditionals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(call </CODE><VAR>var</VAR><CODE>,</CODE><VAR>param</VAR><CODE>,...)</CODE> </FONT>
<DD><FONT class=extract>Evaluate the variable <VAR>var</VAR> replacing any references to <CODE>$(1)</CODE>, <CODE>$(2)</CODE> with the first, second, etc. <VAR>param</VAR> values.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Call-Function"><FONT class=extract>The <CODE>call</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(eval </CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Evaluate <VAR>text</VAR> then read the results as makefile commands. Expands to the empty string.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>The <CODE>eval</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(file </CODE><VAR>op</VAR> <VAR>filename</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Expand the arguments, then open the file <VAR>filename</VAR> using mode <VAR>op</VAR> and write <VAR>text</VAR> to that file.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Function"><FONT class=extract>The <CODE>file</CODE> Function</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(value </CODE><VAR>var</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Evaluates to the contents of the variable <VAR>var</VAR>, with no expansion performed on it.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Value-Function"><FONT class=extract>The <CODE>value</CODE> Function</FONT></A><FONT class=extract>. </FONT></DD></DL>
<P><FONT class=extract>Here is a summary of the automatic variables. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>, for full information. </FONT>
<DL>
<DT><FONT class=extract><CODE>$@</CODE> </FONT>
<DD><FONT class=extract>The file name of the target. <BR></FONT>
<DT><FONT class=extract><CODE>$%</CODE> </FONT>
<DD><FONT class=extract>The target member name, when the target is an archive member. <BR></FONT>
<DT><FONT class=extract><CODE>$&lt;</CODE> </FONT>
<DD><FONT class=extract>The name of the first prerequisite. <BR></FONT>
<DT><FONT class=extract><CODE>$?</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites that are newer than the target, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract><CODE>$^</CODE> </FONT>
<DT><FONT class=extract><CODE>$+</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). The value of <CODE>$^</CODE> omits duplicate prerequisites, while <CODE>$+</CODE> retains them and preserves their order. <BR></FONT>
<DT><FONT class=extract><CODE>$*</CODE> </FONT>
<DD><FONT class=extract>The stem with which an implicit rule matches (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract><CODE>$(@D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(@F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$@</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(*D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(*F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$*</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(%D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(%F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$%</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(&lt;D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(&lt;F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$&lt;</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(^D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(^F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$^</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(+D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(+F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$+</CODE>. <BR></FONT>
<DT><FONT class=extract><CODE>$(?D)</CODE> </FONT>
<DT><FONT class=extract><CODE>$(?F)</CODE> </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of <CODE>$?</CODE>. </FONT></DD></DL>
<P><FONT class=extract>These variables are used specially by GNU <CODE>make</CODE>: </FONT>
<DL>
<DT><FONT class=extract><CODE>MAKEFILES</CODE> </FONT>
<DD><FONT class=extract>Makefiles to be read on every invocation of <CODE>make</CODE>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable"><FONT class=extract>The Variable <CODE>MAKEFILES</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>VPATH</CODE> </FONT>
<DD><FONT class=extract>Directory search path for files not found in the current directory.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#General-Search"><FONT class=extract><CODE>VPATH</CODE> Search Path for All Prerequisites</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>SHELL</CODE> </FONT>
<DD><FONT class=extract>The name of the system default command interpreter, usually <SAMP><SPAN class=file>/bin/sh</SPAN></SAMP>. You can set <CODE>SHELL</CODE> in the makefile to change the shell used to run recipes. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>Recipe Execution</FONT></A><FONT class=extract>. The <CODE>SHELL</CODE> variable is handled specially when importing from and exporting to the environment. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell"><FONT class=extract>Choosing the Shell</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>MAKESHELL</CODE> </FONT>
<DD><FONT class=extract>On MS-DOS only, the name of the command interpreter that is to be used by <CODE>make</CODE>. This value takes precedence over the value of <CODE>SHELL</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Execution"><FONT class=extract>MAKESHELL variable</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>MAKE</CODE> </FONT>
<DD><FONT class=extract>The name with which <CODE>make</CODE> was invoked. Using this variable in recipes has special meaning. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>MAKE_VERSION</CODE> </FONT>
<DD><FONT class=extract>The built-in variable &#8216;<SAMP><SPAN class=samp>MAKE_VERSION</SPAN></SAMP>&#8217; expands to the version number of the GNU <CODE>make</CODE> program. </FONT><A name=index-MAKE_005fVERSION-1101></A><BR>
<DT><FONT class=extract><CODE>MAKE_HOST</CODE> </FONT>
<DD><FONT class=extract>The built-in variable &#8216;<SAMP><SPAN class=samp>MAKE_HOST</SPAN></SAMP>&#8217; expands to a string representing the host that GNU <CODE>make</CODE> was built to run on. </FONT><A name=index-MAKE_005fHOST-1102></A><BR>
<DT><FONT class=extract><CODE>MAKELEVEL</CODE> </FONT>
<DD><FONT class=extract>The number of levels of recursion (sub-<CODE>make</CODE>s).<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion"><FONT class=extract>Variables/Recursion</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>MAKEFLAGS</CODE> </FONT>
<DD><FONT class=extract>The flags given to <CODE>make</CODE>. You can set this in the environment or a makefile to set flags.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>It is <EM>never</EM> appropriate to use <CODE>MAKEFLAGS</CODE> directly in a recipe line: its contents may not be quoted correctly for use in the shell. Always allow recursive <CODE>make</CODE>'s to obtain these values through the environment from its parent. <BR></FONT></P>
<DT><FONT class=extract><CODE>GNUMAKEFLAGS</CODE> </FONT>
<DD><FONT class=extract>Other flags parsed by <CODE>make</CODE>. You can set this in the environment or a makefile to set <CODE>make</CODE> command-line flags. GNU <CODE>make</CODE> never sets this variable itself. This variable is only needed if you'd like to set GNU <CODE>make</CODE>-specific flags in a POSIX-compliant makefile. This variable will be seen by GNU <CODE>make</CODE> and ignored by other <CODE>make</CODE> implementations. It's not needed if you only use GNU <CODE>make</CODE>; just use <CODE>MAKEFLAGS</CODE> directly. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>MAKECMDGOALS</CODE> </FONT>
<DD><FONT class=extract>The targets given to <CODE>make</CODE> on the command line. Setting this variable has no effect on the operation of <CODE>make</CODE>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>CURDIR</CODE> </FONT>
<DD><FONT class=extract>Set to the pathname of the current working directory (after all <CODE>-C</CODE> options are processed, if any). Setting this variable has no effect on the operation of <CODE>make</CODE>.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>SUFFIXES</CODE> </FONT>
<DD><FONT class=extract>The default list of suffixes before <CODE>make</CODE> reads any makefiles. <BR></FONT>
<DT><FONT class=extract><CODE>.LIBPATTERNS</CODE> </FONT>
<DD><FONT class=extract>Defines the naming of the libraries <CODE>make</CODE> searches for, and their order.<BR>See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch"><FONT class=extract>Directory Search for Link Libraries</FONT></A><FONT class=extract>.</FONT> </DD></DL>
<DIV class=node><A name=Error-Messages></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile" rel=next>Complex Makefile</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference" rel=previous>Quick Reference</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV><!-- node-name,  next,  previous,  up -->
<H2 class=appendix><FONT class=extract>Appendix B Errors Generated by Make</FONT></H2>
<P><FONT class=extract>Here is a list of the more common errors you might see generated by <CODE>make</CODE>, and some information about what they mean and how to fix them. </FONT>
<P><FONT class=extract>Sometimes <CODE>make</CODE> errors are not fatal, especially in the presence of a <CODE>-</CODE> prefix on a recipe line, or the <CODE>-k</CODE> command line option. Errors that are fatal are prefixed with the string <CODE>***</CODE>. </FONT>
<P><FONT class=extract>Error messages are all either prefixed with the name of the program (usually &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217;), or, if the error is found in a makefile, the name of the file and line number containing the problem. </FONT>
<P><FONT class=extract>In the table below, these common prefixes are left off. </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>[</SPAN><VAR>foo</VAR><SPAN class=samp>] Error </SPAN><VAR>NN</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>[</SPAN><VAR>foo</VAR><SPAN class=samp>] </SPAN><VAR>signal description</VAR></SAMP>&#8217; </FONT>
<DD><FONT class=extract>These errors are not really <CODE>make</CODE> errors at all. They mean that a program that <CODE>make</CODE> invoked as part of a recipe returned a non-0 error code (&#8216;<SAMP><SPAN class=samp>Error </SPAN><VAR>NN</VAR></SAMP>&#8217;), which <CODE>make</CODE> interprets as failure, or it exited in some other abnormal fashion (with a signal of some type). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>If no <CODE>***</CODE> is attached to the message, then the sub-process failed but the rule in the makefile was prefixed with the <CODE>-</CODE> special character, so <CODE>make</CODE> ignored the error. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing separator. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing separator (did you mean TAB instead of 8 spaces?). Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> could not understand much of anything about the makefile line it just read. GNU <CODE>make</CODE> looks for various separators (<CODE>:</CODE>, <CODE>=</CODE>, recipe prefix characters, etc.) to indicate what kind of line it's parsing. This message means it couldn't find a valid one. </FONT>
<P><FONT class=extract>One of the most common reasons for this message is that you (or perhaps your oh-so-helpful editor, as is the case with many MS-Windows editors) have attempted to indent your recipe lines with spaces instead of a tab character. In this case, <CODE>make</CODE> will use the second form of the error above. Remember that every line in the recipe must begin with a tab character (unless you set <CODE>.RECIPEPREFIX</CODE>; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>). Eight spaces do not count. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax"><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>recipe commences before first target. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing rule before recipe. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means the first thing in the makefile seems to be part of a recipe: it begins with a recipe prefix character and doesn't appear to be a legal <CODE>make</CODE> directive (such as a variable assignment). Recipes must always be associated with a target. </FONT>
<P><FONT class=extract>The second form is generated if the line has a semicolon as the first non-whitespace character; <CODE>make</CODE> interprets this to mean you left out the "target: prerequisite" section of a rule. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax"><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No rule to make target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No rule to make target `</SPAN><VAR>xxx</VAR><SPAN class=samp>', needed by `</SPAN><VAR>yyy</VAR><SPAN class=samp>'.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> decided it needed to build a target, but then couldn't find any instructions in the makefile on how to do that, either explicit or implicit (including in the default rules database). </FONT>
<P><FONT class=extract>If you want that file to be built, you will need to add a rule to your makefile describing how that target can be built. Other possible sources of this problem are typos in the makefile (if that file name is wrong) or a corrupted source tree (if that file is not supposed to be built, but rather only a prerequisite). <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No targets specified and no makefile found. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No targets. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The former means that you didn't provide any targets to be built on the command line, and <CODE>make</CODE> couldn't find any makefiles to read in. The latter means that some makefile was found, but it didn't contain any default goal and none was given on the command line. GNU <CODE>make</CODE> has nothing to do in these situations. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments"><FONT class=extract>Arguments to Specify the Makefile</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Makefile `</SPAN><VAR>xxx</VAR><SPAN class=samp>' was not found.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Included makefile `</SPAN><VAR>xxx</VAR><SPAN class=samp>' was not found.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>A makefile specified on the command line (first form) or included (second form) was not found. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: overriding recipe for target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: ignoring old recipe for target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>GNU <CODE>make</CODE> allows only one recipe to be specified per target (except for double-colon rules). If you give a recipe for a target which already has been defined to have one, this warning is issued and the second recipe will overwrite the first. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules"><FONT class=extract>Multiple Rules for One Target</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Circular </SPAN><VAR>xxx</VAR><SPAN class=samp> &lt;- </SPAN><VAR>yyy</VAR><SPAN class=samp> dependency dropped.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> detected a loop in the dependency graph: after tracing the prerequisite <VAR>yyy</VAR> of target <VAR>xxx</VAR>, and its prerequisites, etc., one of them depended on <VAR>xxx</VAR> again. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Recursive variable `</SPAN><VAR>xxx</VAR><SPAN class=samp>' references itself (eventually). Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you've defined a normal (recursive) <CODE>make</CODE> variable <VAR>xxx</VAR> that, when it's expanded, will refer to itself (<VAR>xxx</VAR>). This is not allowed; either use simply-expanded variables (&#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;) or use the append operator (&#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Unterminated variable reference. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you forgot to provide the proper closing parenthesis or brace in your variable or function reference. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>insufficient arguments to function `</SPAN><VAR>xxx</VAR><SPAN class=samp>'. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you haven't provided the requisite number of arguments for this function. See the documentation of the function for a description of its arguments. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing target pattern. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>multiple target patterns. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>target pattern contains no `%'. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>mixed implicit and static pattern rules. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>These are generated for malformed static pattern rules. The first means there's no pattern in the target section of the rule; the second means there are multiple patterns in the target section; the third means the target doesn't contain a pattern character (<CODE>%</CODE>); and the fourth means that all three parts of the static pattern rule contain pattern characters (<CODE>%</CODE>)&#8211;only the first two parts should. If you see these errors and you aren't trying to create a static pattern rule, check the value of any variables in your target and prerequisite lists to be sure they do not contain colons. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage"><FONT class=extract>Syntax of Static Pattern Rules</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: -jN forced in submake: disabling jobserver mode.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This warning and the next are generated if <CODE>make</CODE> detects error conditions related to parallel processing on systems where sub-<CODE>make</CODE>s can communicate (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>). This warning is generated if a recursive invocation of a <CODE>make</CODE> process is forced to have &#8216;<SAMP><SPAN class=samp>-j</SPAN><VAR>N</VAR></SAMP>&#8217; in its argument list (where <VAR>N</VAR> is greater than one). This could happen, for example, if you set the <CODE>MAKE</CODE> environment variable to &#8216;<SAMP><SPAN class=samp>make -j2</SPAN></SAMP>&#8217;. In this case, the sub-<CODE>make</CODE> doesn't communicate with other <CODE>make</CODE> processes and will simply pretend it has two jobs of its own. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: jobserver unavailable: using -j1. Add `+' to parent make rule.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>In order for <CODE>make</CODE> processes to communicate, the parent will pass information to the child. Since this could result in problems if the child process isn't actually a <CODE>make</CODE>, the parent will only do this if it thinks the child is a <CODE>make</CODE>. The parent uses the normal algorithms to determine this (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>). If the makefile is constructed such that the parent doesn't know the child is a <CODE>make</CODE> process, then the child will receive only part of the information necessary. In this case, the child will generate this warning message and proceed with its build in a sequential manner. </FONT></DD></DL>
<DIV class=node><A name=Complex-Makefile></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#GNU-Free-Documentation-License" rel=next>GNU Free Documentation License</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Error-Messages" rel=previous>Error Messages</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=appendix><FONT class=extract>Appendix C Complex Makefile Example</FONT></H2>
<P><FONT class=extract>Here is the makefile for the GNU <CODE>tar</CODE> program. This is a moderately complex makefile. The first line uses a <CODE>#!</CODE> setting to allow the makefile to be executed directly. </FONT>
<P><FONT class=extract>Because it is the first target, the default goal is &#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;. An interesting feature of this makefile is that <SAMP><SPAN class=file>testpad.h</SPAN></SAMP> is a source file automatically created by the <CODE>testpad</CODE> program, itself compiled from <SAMP><SPAN class=file>testpad.c</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If you type &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>make all</SPAN></SAMP>&#8217;, then <CODE>make</CODE> creates the <SAMP><SPAN class=file>tar</SPAN></SAMP> executable, the <SAMP><SPAN class=file>rmt</SPAN></SAMP> daemon that provides remote tape access, and the <SAMP><SPAN class=file>tar.info</SPAN></SAMP> Info file. </FONT>
<P><FONT class=extract>If you type &#8216;<SAMP><SPAN class=samp>make install</SPAN></SAMP>&#8217;, then <CODE>make</CODE> not only creates <SAMP><SPAN class=file>tar</SPAN></SAMP>, <SAMP><SPAN class=file>rmt</SPAN></SAMP>, and <SAMP><SPAN class=file>tar.info</SPAN></SAMP>, but also installs them. </FONT>
<P><FONT class=extract>If you type &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217;, then <CODE>make</CODE> removes the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files, and the <SAMP><SPAN class=file>tar</SPAN></SAMP>, <SAMP><SPAN class=file>rmt</SPAN></SAMP>, <SAMP><SPAN class=file>testpad</SPAN></SAMP>, <SAMP><SPAN class=file>testpad.h</SPAN></SAMP>, and <SAMP><SPAN class=file>core</SPAN></SAMP> files. </FONT>
<P><FONT class=extract>If you type &#8216;<SAMP><SPAN class=samp>make distclean</SPAN></SAMP>&#8217;, then <CODE>make</CODE> not only removes the same files as does &#8216;<SAMP><SPAN class=samp>make clean</SPAN></SAMP>&#8217; but also the <SAMP><SPAN class=file>TAGS</SPAN></SAMP>, <SAMP><SPAN class=file>Makefile</SPAN></SAMP>, and <SAMP><SPAN class=file>config.status</SPAN></SAMP> files. (Although it is not evident, this makefile (and <SAMP><SPAN class=file>config.status</SPAN></SAMP>) is generated by the user with the <CODE>configure</CODE> program, which is provided in the <CODE>tar</CODE> distribution, but is not shown here.) </FONT>
<P><FONT class=extract>If you type &#8216;<SAMP><SPAN class=samp>make realclean</SPAN></SAMP>&#8217;, then <CODE>make</CODE> removes the same files as does &#8216;<SAMP><SPAN class=samp>make distclean</SPAN></SAMP>&#8217; and also removes the Info files generated from <SAMP><SPAN class=file>tar.texinfo</SPAN></SAMP>. </FONT>
<P><FONT class=extract>In addition, there are targets <CODE>shar</CODE> and <CODE>dist</CODE> that create distribution kits. </FONT><PRE class=example><FONT class=extract>     #!/usr/bin/make -f
     # Generated automatically from Makefile.in by configure.
     # Un*x Makefile for GNU tar program.
     # Copyright (C) 1991 Free Software Foundation, Inc.
     
     # This program is free software; you can redistribute
     # it and/or modify it under the terms of the GNU
     # General Public License ...
     ...
     ...
     
     SHELL = /bin/sh
     
     #### Start of system configuration section. ####
     
     srcdir = .
     
     # If you use gcc, you should either run the
     # fixincludes script that comes with it or else use
     # gcc with the -traditional option.  Otherwise ioctl
     # calls will be compiled incorrectly on some systems.
     CC = gcc -O
     YACC = bison -y
     INSTALL = /usr/local/bin/install -c
     INSTALLDATA = /usr/local/bin/install -c -m 644
     
     # Things you might add to DEFS:
     # -DSTDC_HEADERS        If you have ANSI C headers and
     #                       libraries.
     # -DPOSIX               If you have POSIX.1 headers and
     #                       libraries.
     # -DBSD42               If you have sys/dir.h (unless
     #                       you use -DPOSIX), sys/file.h,
     #                       and st_blocks in `struct stat'.
     # -DUSG                 If you have System V/ANSI C
     #                       string and memory functions
     #                       and headers, sys/sysmacros.h,
     #                       fcntl.h, getcwd, no valloc,
     #                       and ndir.h (unless
     #                       you use -DDIRENT).
     # -DNO_MEMORY_H         If USG or STDC_HEADERS but do not
     #                       include memory.h.
     # -DDIRENT              If USG and you have dirent.h
     #                       instead of ndir.h.
     # -DSIGTYPE=int         If your signal handlers
     #                       return int, not void.
     # -DNO_MTIO             If you lack sys/mtio.h
     #                       (magtape ioctls).
     # -DNO_REMOTE           If you do not have a remote shell
     #                       or rexec.
     # -DUSE_REXEC           To use rexec for remote tape
     #                       operations instead of
     #                       forking rsh or remsh.
     # -DVPRINTF_MISSING     If you lack vprintf function
     #                       (but have _doprnt).
     # -DDOPRNT_MISSING      If you lack _doprnt function.
     #                       Also need to define
     #                       -DVPRINTF_MISSING.
     # -DFTIME_MISSING       If you lack ftime system call.
     # -DSTRSTR_MISSING      If you lack strstr function.
     # -DVALLOC_MISSING      If you lack valloc function.
     # -DMKDIR_MISSING       If you lack mkdir and
     #                       rmdir system calls.
     # -DRENAME_MISSING      If you lack rename system call.
     # -DFTRUNCATE_MISSING   If you lack ftruncate
     #                       system call.
     # -DV7                  On Version 7 Unix (not
     #                       tested in a long time).
     # -DEMUL_OPEN3          If you lack a 3-argument version
     #                       of open, and want to emulate it
     #                       with system calls you do have.
     # -DNO_OPEN3            If you lack the 3-argument open
     #                       and want to disable the tar -k
     #                       option instead of emulating open.
     # -DXENIX               If you have sys/inode.h
     #                       and need it 94 to be included.
     
     DEFS =  -DSIGTYPE=int -DDIRENT -DSTRSTR_MISSING \
             -DVPRINTF_MISSING -DBSD42
     # Set this to rtapelib.o unless you defined NO_REMOTE,
     # in which case make it empty.
     RTAPELIB = rtapelib.o
     LIBS =
     DEF_AR_FILE = /dev/rmt8
     DEFBLOCKING = 20
     
     CDEBUG = -g
     CFLAGS = $(CDEBUG) -I. -I$(srcdir) $(DEFS) \
             -DDEF_AR_FILE=\"$(DEF_AR_FILE)\" \
             -DDEFBLOCKING=$(DEFBLOCKING)
     LDFLAGS = -g
     
     prefix = /usr/local
     # Prefix for each installed program,
     # normally empty or `g'.
     binprefix =
     
     # The directory to install tar in.
     bindir = $(prefix)/bin
     
     # The directory to install the info files in.
     infodir = $(prefix)/info
     
     #### End of system configuration section. ####
     
     SRCS_C  = tar.c create.c extract.c buffer.c   \
               getoldopt.c update.c gnu.c mangle.c \
               version.c list.c names.c diffarch.c \
               port.c wildmat.c getopt.c getopt1.c \
               regex.c
     SRCS_Y  = getdate.y
     SRCS    = $(SRCS_C) $(SRCS_Y)
     OBJS    = $(SRCS_C:.c=.o) $(SRCS_Y:.y=.o) $(RTAPELIB)
     AUX =   README COPYING ChangeLog Makefile.in  \
             makefile.pc configure configure.in \
             tar.texinfo tar.info* texinfo.tex \
             tar.h port.h open3.h getopt.h regex.h \
             rmt.h rmt.c rtapelib.c alloca.c \
             msd_dir.h msd_dir.c tcexparg.c \
             level-0 level-1 backup-specs testpad.c
     
     .PHONY: all
     all:    tar rmt tar.info
     
     tar:    $(OBJS)
             $(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
     
     rmt:    rmt.c
             $(CC) $(CFLAGS) $(LDFLAGS) -o $@ rmt.c
     
     tar.info: tar.texinfo
             makeinfo tar.texinfo
     
     .PHONY: install
     install: all
             $(INSTALL) tar $(bindir)/$(binprefix)tar
             -test ! -f rmt || $(INSTALL) rmt /etc/rmt
             $(INSTALLDATA) $(srcdir)/tar.info* $(infodir)
     
     $(OBJS): tar.h port.h testpad.h
     regex.o buffer.o tar.o: regex.h
     # getdate.y has 8 shift/reduce conflicts.
     
     testpad.h: testpad
             ./testpad
     
     testpad: testpad.o
             $(CC) -o $@ testpad.o
     
     TAGS:   $(SRCS)
             etags $(SRCS)
     
     .PHONY: clean
     clean:
             rm -f *.o tar rmt testpad testpad.h core
     
     .PHONY: distclean
     distclean: clean
             rm -f TAGS Makefile config.status
     
     .PHONY: realclean
     realclean: distclean
             rm -f tar.info*
     
     .PHONY: shar
     shar: $(SRCS) $(AUX)
             shar $(SRCS) $(AUX) | compress \
               &gt; tar-`sed -e '/version_string/!d' \
                          -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
                          -e q
                          version.c`.shar.Z
     
     .PHONY: dist
     dist: $(SRCS) $(AUX)
             echo tar-`sed \
                  -e '/version_string/!d' \
                  -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
                  -e q
                  version.c` &gt; .fname
             -rm -rf `cat .fname`
             mkdir `cat .fname`
             ln $(SRCS) $(AUX) `cat .fname`
             tar chZf `cat .fname`.tar.Z `cat .fname`
             -rm -rf `cat .fname` .fname
     
     tar.zoo: $(SRCS) $(AUX)
             -rm -rf tmp.dir
             -mkdir tmp.dir
             -rm tar.zoo
             for X in $(SRCS) $(AUX) ; do \
                 echo $$X ; \
                 sed 's/$$/^M/' $$X \
                 &gt; tmp.dir/$$X ; done
             cd tmp.dir ; zoo aM ../tar.zoo *
             -rm -rf tmp.dir</FONT>
</PRE>
<DIV class=node><A name=GNU-Free-Documentation-License></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Concept-Index" rel=next>Concept Index</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Complex-Makefile" rel=previous>Complex Makefile</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H3 class=appendixsec>C.1 GNU Free Documentation License</H3>
<P><A name=index-FDL_002c-GNU-Free-Documentation-License-1103></A><!-- The GNU Free Documentation License. -->
<DIV align=center>Version 1.3, 3 November 2008</DIV><!-- This file is intended to be included within another document, --><!-- hence no sectioning command or @node. --><PRE class=display>     Copyright &#169; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <A href="http://fsf.org/">http://fsf.org/</A>
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.
</PRE>
<OL type=1 start=0>
<LI>PREAMBLE 
<P>The purpose of this License is to make a manual, textbook, or other functional and useful document <DFN>free</DFN> in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. 
<P>This License is a kind of &#8220;copyleft&#8221;, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. 
<P>We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. </P>
<LI>APPLICABILITY AND DEFINITIONS 
<P>This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The &#8220;Document&#8221;, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as &#8220;you&#8221;. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. 
<P>A &#8220;Modified Version&#8221; of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. 
<P>A &#8220;Secondary Section&#8221; is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. 
<P>The &#8220;Invariant Sections&#8221; are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. 
<P>The &#8220;Cover Texts&#8221; are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. 
<P>A &#8220;Transparent&#8221; copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not &#8220;Transparent&#8221; is called &#8220;Opaque&#8221;. 
<P>Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. 
<P>The &#8220;Title Page&#8221; means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, &#8220;Title Page&#8221; means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text. 
<P>The &#8220;publisher&#8221; means any person or entity that distributes copies of the Document to the public. 
<P>A section &#8220;Entitled XYZ&#8221; means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as &#8220;Acknowledgements&#8221;, &#8220;Dedications&#8221;, &#8220;Endorsements&#8221;, or &#8220;History&#8221;.) To &#8220;Preserve the Title&#8221; of such a section when you modify the Document means that it remains a section &#8220;Entitled XYZ&#8221; according to this definition. 
<P>The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. </P>
<LI>VERBATIM COPYING 
<P>You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. 
<P>You may also lend copies, under the same conditions stated above, and you may publicly display copies. </P>
<LI>COPYING IN QUANTITY 
<P>If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. 
<P>If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. 
<P>If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. 
<P>It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. </P>
<LI>MODIFICATIONS 
<P>You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: 
<OL type=A>
<LI>Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. 
<LI>List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. 
<LI>State on the Title page the name of the publisher of the Modified Version, as the publisher. 
<LI>Preserve all the copyright notices of the Document. 
<LI>Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. 
<LI>Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. 
<LI>Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. 
<LI>Include an unaltered copy of this License. 
<LI>Preserve the section Entitled &#8220;History&#8221;, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled &#8220;History&#8221; in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. 
<LI>Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the &#8220;History&#8221; section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. 
<LI>For any section Entitled &#8220;Acknowledgements&#8221; or &#8220;Dedications&#8221;, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. 
<LI>Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. 
<LI>Delete any section Entitled &#8220;Endorsements&#8221;. Such a section may not be included in the Modified Version. 
<LI>Do not retitle any existing section to be Entitled &#8220;Endorsements&#8221; or to conflict in title with any Invariant Section. 
<LI>Preserve any Warranty Disclaimers. </LI></OL>
<P>If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles. 
<P>You may add a section Entitled &#8220;Endorsements&#8221;, provided it contains nothing but endorsements of your Modified Version by various parties&#8212;for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. 
<P>You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. 
<P>The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. </P>
<LI>COMBINING DOCUMENTS 
<P>You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. 
<P>The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. 
<P>In the combination, you must combine any sections Entitled &#8220;History&#8221; in the various original documents, forming one section Entitled &#8220;History&#8221;; likewise combine any sections Entitled &#8220;Acknowledgements&#8221;, and any sections Entitled &#8220;Dedications&#8221;. You must delete all sections Entitled &#8220;Endorsements.&#8221; </P>
<LI>COLLECTIONS OF DOCUMENTS 
<P>You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. 
<P>You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. </P>
<LI>AGGREGATION WITH INDEPENDENT WORKS 
<P>A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an &#8220;aggregate&#8221; if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. 
<P>If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. </P>
<LI>TRANSLATION 
<P>Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. 
<P>If a section in the Document is Entitled &#8220;Acknowledgements&#8221;, &#8220;Dedications&#8221;, or &#8220;History&#8221;, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. </P>
<LI>TERMINATION 
<P>You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. 
<P>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. 
<P>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. 
<P>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. </P>
<LI>FUTURE REVISIONS OF THIS LICENSE 
<P>The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See <A href="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</A>. 
<P>Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License &#8220;or any later version&#8221; applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document. </P>
<LI>RELICENSING 
<P>&#8220;Massive Multiauthor Collaboration Site&#8221; (or &#8220;MMC Site&#8221;) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A &#8220;Massive Multiauthor Collaboration&#8221; (or &#8220;MMC&#8221;) contained in the site means any set of copyrightable works thus published on the MMC site. 
<P>&#8220;CC-BY-SA&#8221; means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. 
<P>&#8220;Incorporate&#8221; means to publish or republish a Document, in whole or in part, as part of another Document. 
<P>An MMC is &#8220;eligible for relicensing&#8221; if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. 
<P>The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. </P></LI></OL>
<H3 class=heading>ADDENDUM: How to use this License for your documents</H3>
<P>To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: <PRE class=smallexample>       Copyright (C)  <VAR>year</VAR>  <VAR>your name</VAR>.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.
</PRE>
<P>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the &#8220;with<SMALL class=dots><FONT size=2>...</FONT></SMALL>Texts.&#8221; line with this: <PRE class=smallexample>         with the Invariant Sections being <VAR>list their titles</VAR>, with
         the Front-Cover Texts being <VAR>list</VAR>, and with the Back-Cover Texts
         being <VAR>list</VAR>.
</PRE>
<P>If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. 
<P>If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software. <!-- Local Variables: --><!-- ispell-local-pdict: "ispell-dict" --><!-- End: -->
<DIV class=node><A name=Concept-Index></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Name-Index" rel=next>Name Index</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#GNU-Free-Documentation-License" rel=previous>GNU Free Documentation License</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=unnumbered>Index of Concepts</H2>
<UL class=index-cp compact>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0021_003d-522">!=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0021_003d_002c-expansion-107">!=, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0023_007d-_0028comments_0029_002c-in-makefile-56"><CODE>#</CODE> (comments), in makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0023_007d-_0028comments_0029_002c-in-recipes-296"><CODE>#</CODE> (comments), in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0023include_007d-282"><CODE>#include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0024_007d_002c-in-function-call-567"><CODE>$</CODE>, in function call</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">Syntax of Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0024_007d_002c-in-rules-140"><CODE>$</CODE>, in rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0024_007d_002c-in-variable-name-512"><CODE>$</CODE>, in variable name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0024_007d_002c-in-variable-reference-477"><CODE>$</CODE>, in variable reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-in-pattern-rules-954"><CODE>%</CODE>, in pattern rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bpatsubst_007d-574"><CODE>%</CODE>, quoting in <CODE>patsubst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-in-static-pattern-267"><CODE>%</CODE>, quoting in static pattern</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bvpath_007d-178"><CODE>%</CODE>, quoting in <CODE>vpath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-575"><CODE>%</CODE>, quoting with <CODE>\</CODE> (backslash)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-268"><CODE>%</CODE>, quoting with <CODE>\</CODE> (backslash)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-179"><CODE>%</CODE>, quoting with <CODE>\</CODE> (backslash)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002a_007d-_0028wildcard-character_0029-153"><CODE>*</CODE> (wildcard character)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b_002c-and-_0040code_007bdefine_007d-466">+, and <CODE>define</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b_002c-and-recipe-execution-720">+, and recipe execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b_002c-and-recipes-393">+, and recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b_003d-523">+=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Appending">Appending</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b_003d_002c-expansion-103">+=, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002cv-_0040r_007b_0028RCS-file-extension_0029_007d-878"><CODE>,v </CODE><SPAN class=roman>(RCS file extension)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_007d-_0028in-recipes_0029-366"><CODE>-</CODE> (in recipes)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002d_002c-and-_0040code_007bdefine_007d-465">-, and <CODE>define</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dalways_002dmake_007d-742"><CODE>--always-make</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dnew_007d-806"><CODE>--assume-new</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dnew_007d-716"><CODE>--assume-new</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dnew_007d_002c-and-recursion-426"><CODE>--assume-new</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dold_007d-774"><CODE>--assume-old</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dold_007d-724"><CODE>--assume-old</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dassume_002dold_007d_002c-and-recursion-425"><CODE>--assume-old</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dcheck_002dsymlink_002dtimes_007d-767"><CODE>--check-symlink-times</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddebug_007d-746"><CODE>--debug</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddirectory_007d-744"><CODE>--directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddirectory_007d-388"><CODE>--directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddirectory_007d_002c-and-_0040code_007b_002d_002dprint_002ddirectory_007d-450"><CODE>--directory</CODE>, and <CODE>--print-directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddirectory_007d_002c-and-recursion-422"><CODE>--directory</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddry_002drun_007d-770"><CODE>--dry-run</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddry_002drun_007d-704"><CODE>--dry-run</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002ddry_002drun_007d-314"><CODE>--dry-run</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002denvironment_002doverrides_007d-748"><CODE>--environment-overrides</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002deval_007d-749"><CODE>--eval</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dfile_007d-751"><CODE>--file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dfile_007d-682"><CODE>--file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">Makefile Arguments</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dfile_007d-69"><CODE>--file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dfile_007d_002c-and-recursion-423"><CODE>--file</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dhelp_007d-754"><CODE>--help</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dignore_002derrors_007d-756"><CODE>--ignore-errors</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dignore_002derrors_007d-369"><CODE>--ignore-errors</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-758"><CODE>--include-dir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-85"><CODE>--include-dir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djobs_007d-760"><CODE>--jobs</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djobs_007d-348"><CODE>--jobs</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djobs_007d_002c-and-recursion-433"><CODE>--jobs</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djust_002dprint_007d-769"><CODE>--just-print</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djust_002dprint_007d-703"><CODE>--just-print</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002djust_002dprint_007d-313"><CODE>--just-print</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-762"><CODE>--keep-going</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-735"><CODE>--keep-going</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-372"><CODE>--keep-going</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dload_002daverage_007d-764"><CODE>--load-average</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dload_002daverage_007d-354"><CODE>--load-average</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dmakefile_007d-752"><CODE>--makefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dmakefile_007d-683"><CODE>--makefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">Makefile Arguments</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dmakefile_007d-70"><CODE>--makefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dmax_002dload_007d-765"><CODE>--max-load</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dmax_002dload_007d-353"><CODE>--max-load</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dnew_002dfile_007d-805"><CODE>--new-file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dnew_002dfile_007d-717"><CODE>--new-file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dnew_002dfile_007d_002c-and-recursion-427"><CODE>--new-file</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dno_002dbuiltin_002drules_007d-786"><CODE>--no-builtin-rules</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dno_002dbuiltin_002dvariables_007d-788"><CODE>--no-builtin-variables</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dno_002dkeep_002dgoing_007d-793"><CODE>--no-keep-going</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dno_002dprint_002ddirectory_007d-802"><CODE>--no-print-directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dno_002dprint_002ddirectory_007d-456"><CODE>--no-print-directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dold_002dfile_007d-773"><CODE>--old-file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dold_002dfile_007d-723"><CODE>--old-file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dold_002dfile_007d_002c-and-recursion-424"><CODE>--old-file</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002doutput_002dsync_007d-776"><CODE>--output-sync</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002doutput_002dsync_007d-357"><CODE>--output-sync</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dprint_002ddata_002dbase_007d-780"><CODE>--print-data-base</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d-801"><CODE>--print-directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-and-_0040code_007b_002d_002ddirectory_007d-454"><CODE>--print-directory</CODE>, and <CODE>--directory</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-and-recursion-455"><CODE>--print-directory</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d_002c-disabling-457"><CODE>--print-directory</CODE>, disabling</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dquestion_007d-784"><CODE>--question</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dquestion_007d-711"><CODE>--question</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dquiet_007d-791"><CODE>--quiet</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dquiet_007d-318"><CODE>--quiet</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002drecon_007d-771"><CODE>--recon</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002drecon_007d-705"><CODE>--recon</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002drecon_007d-315"><CODE>--recon</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dsilent_007d-790"><CODE>--silent</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dsilent_007d-317"><CODE>--silent</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dstop_007d-794"><CODE>--stop</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dtouch_007d-796"><CODE>--touch</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dtouch_007d-707"><CODE>--touch</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dtouch_007d_002c-and-recursion-396"><CODE>--touch</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dtrace_007d-797"><CODE>--trace</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dversion_007d-799"><CODE>--version</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dwarn_002dundefined_002dvariables_007d-807"><CODE>--warn-undefined-variables</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dwhat_002dif_007d-804"><CODE>--what-if</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002d_002dwhat_002dif_007d-714"><CODE>--what-if</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dB_007d-741"><CODE>-B</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002db_007d-739"><CODE>-b</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dC_007d-743"><CODE>-C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dC_007d-387"><CODE>-C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dC_007d_002c-and-_0040code_007b_002dw_007d-449"><CODE>-C</CODE>, and <CODE>-w</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dC_007d_002c-and-recursion-418"><CODE>-C</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dd_007d-745"><CODE>-d</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002de_007d-747"><CODE>-e</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002de_007d-_0028shell-flag_0029-285"><CODE>-e</CODE> (shell flag)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002df_007d-750"><CODE>-f</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002df_007d-684"><CODE>-f</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">Makefile Arguments</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002df_007d-68"><CODE>-f</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002df_007d_002c-and-recursion-419"><CODE>-f</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dh_007d-753"><CODE>-h</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dI_007d-757"><CODE>-I</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002di_007d-755"><CODE>-i</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002di_007d-368"><CODE>-i</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dI_007d-84"><CODE>-I</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dj_007d-759"><CODE>-j</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dj_007d-347"><CODE>-j</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dj_007d_002c-and-archive-update-1038"><CODE>-j</CODE>, and archive update</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">Archive Pitfalls</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dj_007d_002c-and-recursion-432"><CODE>-j</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dk_007d-761"><CODE>-k</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dk_007d-734"><CODE>-k</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dk_007d-371"><CODE>-k</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dL_007d-766"><CODE>-L</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dl_007d-763"><CODE>-l</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dl_007d-_0028library-search_0029-202"><CODE>-l</CODE> (library search)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dl_007d-_0028load-average_0029-352"><CODE>-l</CODE> (load average)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dm_007d-740"><CODE>-m</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dM_007d-_0028to-compiler_0029-283"><CODE>-M</CODE> (to compiler)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dMM_007d-_0028to-GNU-compiler_0029-286"><CODE>-MM</CODE> (to GNU compiler)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dn_007d-768"><CODE>-n</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dn_007d-706"><CODE>-n</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dn_007d-312"><CODE>-n</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dO_007d-775"><CODE>-O</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002do_007d-772"><CODE>-o</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002do_007d-722"><CODE>-o</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dO_007d-358"><CODE>-O</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002do_007d_002c-and-recursion-420"><CODE>-o</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dp_007d-779"><CODE>-p</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dq_007d-783"><CODE>-q</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dq_007d-712"><CODE>-q</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dR_007d-787"><CODE>-R</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dr_007d-785"><CODE>-r</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dS_007d-792"><CODE>-S</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002ds_007d-789"><CODE>-s</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002ds_007d-316"><CODE>-s</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dt_007d-795"><CODE>-t</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dt_007d-710"><CODE>-t</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dt_007d_002c-and-recursion-394"><CODE>-t</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dv_007d-798"><CODE>-v</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dW_007d-803"><CODE>-W</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dw_007d-800"><CODE>-w</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dW_007d-715"><CODE>-W</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dw_007d_002c-and-_0040code_007b_002dC_007d-452"><CODE>-w</CODE>, and <CODE>-C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dw_007d_002c-and-recursion-453"><CODE>-w</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dW_007d_002c-and-recursion-421"><CODE>-W</CODE>, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002dw_007d_002c-disabling-458"><CODE>-w</CODE>, disabling</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002ea_007d-_0028archives_0029-1042"><CODE>.a</CODE> (archives)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eC-825"><CODE>.C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ec-820"><CODE>.c</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ecc-823"><CODE>.cc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ech-867"><CODE>.ch</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ecpp-824"><CODE>.cpp</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002ed_007d-288"><CODE>.d</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002edef-838"><CODE>.def</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002edvi-863"><CODE>.dvi</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eF-834"><CODE>.F</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ef-832"><CODE>.f</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002einfo-873"><CODE>.info</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002el-852"><CODE>.l</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002eLIBPATTERNS_007d_002c-and-link-libraries-204"><CODE>.LIBPATTERNS</CODE>, and link libraries</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eln-855"><CODE>.ln</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002emod-839"><CODE>.mod</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eo-819"><CODE>.o</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002eONESHELL_007d_002c-use-of-327"><CODE>.ONESHELL</CODE>, use of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#One-Shell">One Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ep-828"><CODE>.p</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002ePRECIOUS_007d-intermediate-files-950"><CODE>.PRECIOUS</CODE> intermediate files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002er-833"><CODE>.r</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eS-843"><CODE>.S</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002es-842"><CODE>.s</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002esh-882"><CODE>.sh</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_002eSHELLFLAGS_007d_002c-value-of-331"><CODE>.SHELLFLAGS</CODE>, value of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002esym-837"><CODE>.sym</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002etex-864"><CODE>.tex</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002etexi-874"><CODE>.texi</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002etexinfo-872"><CODE>.texinfo</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002etxinfo-875"><CODE>.txinfo</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ew-866"><CODE>.w</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eweb-865"><CODE>.web</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ey-849"><CODE>.y</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_003a_003a_007d-rules-_0028double_002dcolon_0029-278"><CODE>::</CODE> rules (double-colon)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">Double-Colon</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003a_003a_003d-520">::=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003a_003a_003d-490">::=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003a_003d-519">:=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003a_003d-489">:=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003d-518">=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003d-484">=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003d_002c-expansion-104">=, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_003f_007d-_0028wildcard-character_0029-154"><CODE>?</CODE> (wildcard character)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003f_003d-521">?=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003f_003d-498">?=</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003f_003d_002c-expansion-105">?=, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_0040_0040_007d-_0028in-recipes_0029-309"><CODE>@</CODE> (in recipes)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040_0040_002c-and-_0040code_007bdefine_007d-464">@, and <CODE>define</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005b_0040dots_007b_007d_005d_007d-_0028wildcard-characters_0029-155"><CODE>[...]</CODE> (wildcard characters)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-for-continuation-lines-20"><CODE>\</CODE> (backslash), for continuation lines</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-in-recipes-302"><CODE>\</CODE> (backslash), in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-576"><CODE>\</CODE> (backslash), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-269"><CODE>\</CODE> (backslash), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-180"><CODE>\</CODE> (backslash), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_005f_005f_002eSYMDEF_007d-1030"><CODE>__.SYMDEF</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-abspath-639">abspath</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-algorithm-for-directory-search-183">algorithm for directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007ball_007d-_0040r_007b_0028standard-target_0029_007d-687"><CODE>all</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-appending-to-variables-524">appending to variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Appending">Appending</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ar-886"><CODE>ar</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive-1027">archive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archives">Archives</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive-member-targets-1028">archive member targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members">Archive Members</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive-symbol-directory-updating-1032">archive symbol directory updating</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive_002c-and-_0040code_007b_002dj_007d-1037">archive, and <CODE>-j</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">Archive Pitfalls</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive_002c-and-parallel-execution-1035">archive, and parallel execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">Archive Pitfalls</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-archive_002c-suffix-rule-for-1040">archive, suffix rule for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Arg-list-too-long-437">Arg list too long</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-arguments-of-functions-569">arguments of functions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">Syntax of Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-as-888"><CODE>as</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-as-841"><CODE>as</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-assembly_002c-rule-to-compile-840">assembly, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-automatic-generation-of-prerequisites-280">automatic generation of prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-automatic-generation-of-prerequisites-82">automatic generation of prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-automatic-variables-958">automatic variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-automatic-variables-in-prerequisites-961">automatic variables in prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backquotes-677">backquotes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">Shell Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-for-continuation-lines-21">backslash (<CODE>\</CODE>), for continuation lines</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-in-recipes-301">backslash (<CODE>\</CODE>), in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-577">backslash (<CODE>\</CODE>), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-270">backslash (<CODE>\</CODE>), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-181">backslash (<CODE>\</CODE>), to quote <CODE>%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-newlines-59">backslash (<CODE>\</CODE>), to quote newlines</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">Splitting Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-backslashes-in-pathnames-and-wildcard-expansion-169">backslashes in pathnames and wildcard expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-basename-622">basename</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-binary-packages-1100">binary packages</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories">Install Command Categories</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-broken-pipe-362">broken pipe</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-bugs_002c-reporting-5">bugs, reporting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-built_002din-special-targets-222">built-in special targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-C_002b_002b_002c-rule-to-compile-821">C++, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-C_002c-rule-to-compile-816">C, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-canned-recipes-459">canned recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-cc-890"><CODE>cc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-cc-817"><CODE>cc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bcd_007d-_0028shell-command_0029-392"><CODE>cd</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bcd_007d-_0028shell-command_0029-323"><CODE>cd</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-chains-of-rules-942">chains of rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bcheck_007d-_0040r_007b_0028standard-target_0029_007d-699"><CODE>check</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bclean_007d-_0040r_007b_0028standard-target_0029_007d-688"><CODE>clean</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bclean_007d-target-47"><CODE>clean</CODE> target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanup</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bclean_007d-target-25"><CODE>clean</CODE> target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-cleaning-up-45">cleaning up</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanup</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bclobber_007d-_0040r_007b_0028standard-target_0029_007d-692"><CODE>clobber</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-co-901"><CODE>co</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-co-877"><CODE>co</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-combining-rules-by-prerequisite-44">combining rules by prerequisite</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Combine-By-Prerequisite">Combine By Prerequisite</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-command-expansion-676">command expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">Shell Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-command-line-variable-definitions_002c-and-recursion-415">command line variable definitions, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-command-line-variables-730">command line variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-commands_002c-sequences-of-462">commands, sequences of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-comments_002c-in-makefile-55">comments, in makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-comments_002c-in-recipes-294">comments, in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-compatibility-1080">compatibility</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Features">Features</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-compatibility-in-exporting-408">compatibility in exporting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-compilation_002c-testing-733">compilation, testing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-computed-variable-name-508">computed variable name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-conditional-expansion-642">conditional expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Conditional Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-conditional-variable-assignment-496">conditional variable assignment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-conditionals-559">conditionals</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditionals">Conditionals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-continuation-lines-19">continuation lines</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-controlling-make-666">controlling make</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-conventions-for-makefiles-1086">conventions for makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions">Makefile Conventions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-convert-guile-types-1046">convert guile types</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Types">Guile Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ctangle-923"><CODE>ctangle</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ctangle-862"><CODE>ctangle</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-cweave-919"><CODE>cweave</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-cweave-859"><CODE>cweave</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-data-base-of-_0040code_007bmake_007d-rules-781">data base of <CODE>make</CODE> rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-deducing-recipes-_0028implicit-rules_0029-41">deducing recipes (implicit rules)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">make Deduces</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-default-directories-for-included-makefiles-87">default directories for included makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-default-goal-131">default goal</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-default-goal-29">default goal</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-default-makefile-name-62">default makefile name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-default-rules_002c-last_002dresort-1019">default rules, last-resort</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort">Last Resort</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-define_002c-expansion-108">define, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-defining-variables-verbatim-534">defining variables verbatim</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-deletion-of-target-files-380">deletion of target files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-deletion-of-target-files-375">deletion of target files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directive-54">directive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directories_002c-creating-installation-1091">directories, creating installation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directories_002c-printing-them-446">directories, printing them</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directories_002c-updating-archive-symbol-1034">directories, updating archive symbol</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-part-613">directory part</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search-_0028_0040code_007bVPATH_007d_0029-175">directory search (<CODE>VPATH</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-191">directory search (<CODE>VPATH</CODE>), and implicit rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-199">directory search (<CODE>VPATH</CODE>), and link libraries</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-recipes-189">directory search (<CODE>VPATH</CODE>), and recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch">Recipes/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search-algorithm-184">directory search algorithm</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-directory-search_002c-traditional-_0028GPATH_0029-186">directory search, traditional (GPATH)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bdist_007d-_0040r_007b_0028standard-target_0029_007d-697"><CODE>dist</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bdistclean_007d-_0040r_007b_0028standard-target_0029_007d-690"><CODE>distclean</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-function-call-568">dollar sign (<CODE>$</CODE>), in function call</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">Syntax of Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-rules-139">dollar sign (<CODE>$</CODE>), in rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-name-513">dollar sign (<CODE>$</CODE>), in variable name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-reference-478">dollar sign (<CODE>$</CODE>), in variable reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-DOS_002c-choosing-a-shell-in-337">DOS, choosing a shell in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-double_002dcolon-rules-275">double-colon rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">Double-Colon</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-duplicate-words_002c-removing-596">duplicate words, removing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-E2BIG-438">E2BIG</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-echoing-of-recipes-307">echoing of recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-editor-9">editor</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Introduction">Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Emacs-_0028_0040code_007bM_002dx-compile_007d_0029-373">Emacs (<CODE>M-x compile</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-empty-recipes-467">empty recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes">Empty Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-empty-targets-215">empty targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-environment-539">environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Environment">Environment</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-environment_002c-and-recursion-398">environment, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-environment_002c-_0040code_007bSHELL_007d-in-334">environment, <CODE>SHELL</CODE> in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-error_002c-stopping-on-668">error, stopping on</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-errors-_0028in-recipes_0029-363">errors (in recipes)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-errors-with-wildcards-166">errors with wildcards</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-evaluating-makefile-syntax-657">evaluating makefile syntax</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">Eval Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-example-of-loaded-objects-1077">example of loaded objects</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example">Loaded Object Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-example-using-Guile-1054">example using Guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Example">Guile Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-execution_002c-in-parallel-345">execution, in parallel</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-execution_002c-instead-of-701">execution, instead of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-execution_002c-of-recipes-321">execution, of recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-exit-status-_0028errors_0029-365">exit status (errors)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-exit-status-of-make-681">exit status of make</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Running">Running</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-expansion_002c-secondary-119">expansion, secondary</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-explicit-rule_002c-definition-of-50">explicit rule, definition of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-explicit-rule_002c-expansion-117">explicit rule, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-explicit-rules_002c-secondary-expansion-of-122">explicit rules, secondary expansion of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-exporting-variables-399">exporting variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-extensions_002c-Guile-1045">extensions, Guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration">Guile Integration</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-extensions_002c-load-directive-1059">extensions, load directive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-extensions_002c-loading-1057">extensions, loading</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">Loading Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-f77-895"><CODE>f77</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-f77-831"><CODE>f77</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-FDL_002c-GNU-Free-Documentation-License-1103">FDL, GNU Free Documentation License</A>: <A href="https://www.gnu.org/software/make/manual/make.html#GNU-Free-Documentation-License">GNU Free Documentation License</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-features-of-GNU-_0040code_007bmake_007d-1078">features of GNU <CODE>make</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Features">Features</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-features_002c-missing-1083">features, missing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-functions-611">file name functions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-of-makefile-63">file name of makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-of-makefile_002c-how-to-specify-74">file name of makefile, how to specify</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-prefix_002c-adding-629">file name prefix, adding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-suffix-620">file name suffix</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-suffix_002c-adding-626">file name suffix, adding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name-with-wildcards-151">file name with wildcards</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name_002c-abspath-of-640">file name, abspath of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name_002c-basename-of-623">file name, basename of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name_002c-directory-part-614">file name, directory part</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name_002c-nondirectory-part-616">file name, nondirectory part</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-name_002c-realpath-of-637">file name, realpath of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file_002c-writing-to-650">file, writing to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Function">File Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-files_002c-assuming-new-719">files, assuming new</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-files_002c-assuming-old-725">files, assuming old</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-files_002c-avoiding-recompilation-of-726">files, avoiding recompilation of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-files_002c-intermediate-945">files, intermediate</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-filtering-out-words-591">filtering out words</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-filtering-words-588">filtering words</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-finding-strings-585">finding strings</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-flags-737">flags</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-flags-for-compilers-884">flags for compilers</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-flavor-of-variable-664">flavor of variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">Flavor Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-flavors-of-variables-479">flavors of variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bFORCE_007d-213"><CODE>FORCE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">Force Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-force-targets-211">force targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">Force Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Fortran_002c-rule-to-compile-829">Fortran, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions-566">functions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Functions">Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions_002c-for-controlling-make-665">functions, for controlling make</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions_002c-for-file-names-610">functions, for file names</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions_002c-for-text-571">functions, for text</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions_002c-syntax-of-570">functions, syntax of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions">Syntax of Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-functions_002c-user-defined-652">functions, user defined</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">Call Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_002b_002b-892"><CODE>g++</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_002b_002b-822"><CODE>g++</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gcc-818"><CODE>gcc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-generating-prerequisites-automatically-281">generating prerequisites automatically</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-generating-prerequisites-automatically-83">generating prerequisites automatically</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-get-903"><CODE>get</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-get-880"><CODE>get</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-globbing-_0028wildcards_0029-152">globbing (wildcards)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-goal-31">goal</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-goal_002c-default-132">goal, default</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-goal_002c-default-30">goal, default</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-goal_002c-how-to-specify-685">goal, how to specify</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Guile-1044">Guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Integration">Guile Integration</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Guile-680">Guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function">Guile Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Guile-example-1053">Guile example</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Example">Guile Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-guile_002c-conversion-of-types-1047">guile, conversion of types</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Types">Guile Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-home-directory-158">home directory</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-IEEE-Standard-1003_002e2-2">IEEE Standard 1003.2</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overview">Overview</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifdef_002c-expansion-109">ifdef, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifeq_002c-expansion-110">ifeq, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifndef_002c-expansion-111">ifndef, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifneq_002c-expansion-112">ifneq, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule-810">implicit rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules">Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-and-directory-search-193">implicit rule, and directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-and-_0040code_007bVPATH_007d-194">implicit rule, and <CODE>VPATH</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-definition-of-52">implicit rule, definition of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-expansion-115">implicit rule, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-how-to-use-812">implicit rule, how to use</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit">Using Implicit</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-introduction-to-42">implicit rule, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">make Deduces</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-predefined-814">implicit rule, predefined</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rule_002c-search-algorithm-1025">implicit rule, search algorithm</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search">Implicit Rule Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-implicit-rules_002c-secondary-expansion-of-126">implicit rules, secondary expansion of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-included-makefiles_002c-default-directories-86">included makefiles, default directories</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-including-_0028_0040code_007bMAKEFILE_005fLIST_007d-variable_0029-552">including (<CODE>MAKEFILE_LIST</CODE> variable)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-including-_0028_0040code_007bMAKEFILES_007d-variable_0029-92">including (<CODE>MAKEFILES</CODE> variable)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">MAKEFILES Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-including-other-makefiles-75">including other makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-incompatibilities-1081">incompatibilities</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Info_002c-rule-to-format-869">Info, rule to format</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-inheritance_002c-suppressing-547">inheritance, suppressing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">Suppressing Inheritance</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-input-during-parallel-execution-359">input during parallel execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007binstall_007d-_0040r_007b_0028standard-target_0029_007d-693"><CODE>install</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-installation-directories_002c-creating-1092">installation directories, creating</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-installations_002c-staged-1090">installations, staged</A>: <A href="https://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDIR</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-interface-for-loaded-objects-1067">interface for loaded objects</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-intermediate-files-944">intermediate files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-intermediate-files_002c-preserving-946">intermediate files, preserving</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-intermediate-targets_002c-explicit-231">intermediate targets, explicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-interrupt-378">interrupt</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-job-slots-346">job slots</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-job-slots_002c-and-recursion-435">job slots, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-jobs_002c-limiting-based-on-load-351">jobs, limiting based on load</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-joining-lists-of-words-631">joining lists of words</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-killing-_0028interruption_0029-383">killing (interruption)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-last_002dresort-default-rules-1018">last-resort default rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort">Last Resort</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ld-845"><CODE>ld</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-lex-905"><CODE>lex</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-lex-850"><CODE>lex</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Lex_002c-rule-to-run-851">Lex, rule to run</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-libraries-for-linking_002c-directory-search-198">libraries for linking, directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-library-archive_002c-suffix-rule-for-1041">library archive, suffix rule for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-limiting-jobs-based-on-load-350">limiting jobs based on load</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-link-libraries_002c-and-directory-search-197">link libraries, and directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-link-libraries_002c-patterns-matching-203">link libraries, patterns matching</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-linking_002c-predefined-rule-for-844">linking, predefined rule for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-lint-909"><CODE>lint</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-lint-853"><CODE>lint</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007blint_007d_002c-rule-to-run-854"><CODE>lint</CODE>, rule to run</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-list-of-all-prerequisites-976">list of all prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-list-of-changed-prerequisites-972">list of changed prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-load-average-349">load average</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-load-directive-1058">load directive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loaded-object-API-1066">loaded object API</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loaded-object-example-1076">loaded object example</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-Example">Loaded Object Example</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loaded-object-licensing-1068">loaded object licensing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loaded-objects-1055">loaded objects</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">Loading Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loaded-objects_002c-remaking-of-1065">loaded objects, remaking of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects">Remaking Loaded Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-long-lines_002c-splitting-58">long lines, splitting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">Splitting Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-loops-in-variable-expansion-485">loops in variable expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007blpr_007d-_0028shell-command_0029-219"><CODE>lpr</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007blpr_007d-_0028shell-command_0029-161"><CODE>lpr</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">Wildcard Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-m2c-897"><CODE>m2c</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-m2c-836"><CODE>m2c</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-macro-474">macro</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bmake-depend_007d-284"><CODE>make depend</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-make-extensions-1043">make extensions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Extending-make">Extending make</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-make-interface-to-guile-1049">make interface to guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">Guile Interface</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-make-procedures-in-guile-1050">make procedures in guile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">Guile Interface</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-7">makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Introduction">Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-name-60">makefile name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-name_002c-how-to-specify-72">makefile name, how to specify</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-rule-parts-11">makefile rule parts</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-syntax_002c-evaluating-658">makefile syntax, evaluating</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">Eval Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-and-_0040code_007bMAKEFILES_007d-variable-91">makefile, and <CODE>MAKEFILES</CODE> variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">MAKEFILES Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-conventions-for-1085">makefile, conventions for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions">Makefile Conventions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-how-_0040code_007bmake_007d-processes-28">makefile, how <CODE>make</CODE> processes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-how-to-write-48">makefile, how to write</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefiles">Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-including-76">makefile, including</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-overriding-99">makefile, overriding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles">Overriding Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-parsing-102">makefile, parsing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-remaking-of-97">makefile, remaking of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile_002c-simple-18">makefile, simple</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefiles_002c-and-_0040code_007bMAKEFILE_005fLIST_007d-variable-551">makefiles, and <CODE>MAKEFILE_LIST</CODE> variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefiles_002c-and-special-variables-548">makefiles, and special variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makeinfo-911"><CODE>makeinfo</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makeinfo-871"><CODE>makeinfo</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-match_002danything-rule-1016">match-anything rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules">Match-Anything Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-match_002danything-rule_002c-used-to-override-100">match-anything rule, used to override</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles">Overriding Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-missing-features-1082">missing features</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-mistakes-with-wildcards-165">mistakes with wildcards</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-modified-variable-reference-500">modified variable reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Modula_002d2_002c-rule-to-compile-835">Modula-2, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bmostlyclean_007d-_0040r_007b_0028standard-target_0029_007d-689"><CODE>mostlyclean</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-multi_002dline-variable-definition-531">multi-line variable definition</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-multiple-rules-for-one-target-253">multiple rules for one target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">Multiple Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-multiple-rules-for-one-target-_0028_0040code_007b_003a_003a_007d_0029-277">multiple rules for one target (<CODE>::</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">Double-Colon</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-multiple-targets-248">multiple targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-multiple-targets_002c-in-pattern-rule-956">multiple targets, in pattern rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-name-of-makefile-61">name of makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-name-of-makefile_002c-how-to-specify-73">name of makefile, how to specify</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-nested-variable-reference-507">nested variable reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-newline_002c-quoting_002c-in-makefile-23">newline, quoting, in makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-newline_002c-quoting_002c-in-recipes-304">newline, quoting, in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-nondirectory-part-617">nondirectory part</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-normal-prerequisites-147">normal prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bOBJ_007d-40"><CODE>OBJ</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bobj_007d-39"><CODE>obj</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bOBJECTS_007d-36"><CODE>OBJECTS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bobjects_007d-35"><CODE>objects</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-objects_002c-loaded-1056">objects, loaded</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">Loading Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bOBJS_007d-38"><CODE>OBJS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bobjs_007d-37"><CODE>objs</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-old_002dfashioned-suffix-rules-1021">old-fashioned suffix rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-options-736">options</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-options_002c-and-recursion-412">options, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-options_002c-setting-from-environment-443">options, setting from environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-options_002c-setting-in-makefiles-445">options, setting in makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-order-of-pattern-rules-1014">order of pattern rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">Pattern Match</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-order_002donly-prerequisites-149">order-only prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-origin-of-variable-661">origin of variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">Origin Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-output-during-parallel-execution-777">output during parallel execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-output-during-parallel-execution-355">output during parallel execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-overriding-makefiles-98">overriding makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles">Overriding Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-overriding-variables-with-arguments-728">overriding variables with arguments</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-overriding-with-_0040code_007boverride_007d-527">overriding with <CODE>override</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">Override Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution-344">parallel execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution_002c-and-archive-update-1036">parallel execution, and archive update</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls">Archive Pitfalls</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution_002c-input-during-360">parallel execution, input during</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution_002c-output-during-778">parallel execution, output during</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution_002c-output-during-356">parallel execution, output during</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parallel-execution_002c-overriding-243">parallel execution, overriding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-parts-of-makefile-rule-12">parts of makefile rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Pascal_002c-rule-to-compile-826">Pascal, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern-rule-951">pattern rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern-rule_002c-expansion-116">pattern rule, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern-rules_002c-order-of-1013">pattern rules, order of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">Pattern Match</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern-rules_002c-static-_0028not-implicit_0029-259">pattern rules, static (not implicit)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern-rules_002c-static_002c-syntax-of-263">pattern rules, static, syntax of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pattern_002dspecific-variables-543">pattern-specific variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific">Pattern-specific</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pc-899"><CODE>pc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pc-827"><CODE>pc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-phony-targets-206">phony targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-phony-targets-and-recipe-execution-721">phony targets and recipe execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pitfalls-of-wildcards-164">pitfalls of wildcards</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-plugin_005fis_005fGPL_005fcompatible-1069">plugin_is_GPL_compatible</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-portability-1079">portability</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Features">Features</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-POSIX-440">POSIX</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-POSIX-1">POSIX</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overview">Overview</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-POSIX_002dconforming-mode_002c-setting-247">POSIX-conforming mode, setting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-post_002dinstallation-commands-1099">post-installation commands</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories">Install Command Categories</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-pre_002dinstallation-commands-1098">pre-installation commands</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Install-Command-Categories">Install Command Categories</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-precious-targets-228">precious targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-predefined-rules-and-variables_002c-printing-782">predefined rules and variables, printing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prefix_002c-adding-628">prefix, adding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisite-130">prerequisite</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisite-pattern_002c-implicit-955">prerequisite pattern, implicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisite-pattern_002c-static-_0028not-implicit_0029-266">prerequisite pattern, static (not implicit)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisite-types-144">prerequisite types</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisite_002c-expansion-114">prerequisite, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites-142">prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-and-automatic-variables-962">prerequisites, and automatic variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-automatic-generation-279">prerequisites, automatic generation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-automatic-generation-81">prerequisites, automatic generation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-introduction-to-14">prerequisites, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-list-of-all-975">prerequisites, list of all</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-list-of-changed-971">prerequisites, list of changed</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-normal-146">prerequisites, normal</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-order_002donly-148">prerequisites, order-only</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prerequisites_002c-varying-_0028static-pattern_0029-261">prerequisites, varying (static pattern)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-preserving-intermediate-files-947">preserving intermediate files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-preserving-with-_0040code_007b_002ePRECIOUS_007d-949">preserving with <CODE>.PRECIOUS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-preserving-with-_0040code_007b_002ePRECIOUS_007d-229">preserving with <CODE>.PRECIOUS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-preserving-with-_0040code_007b_002eSECONDARY_007d-234">preserving with <CODE>.SECONDARY</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bprint_007d-_0040r_007b_0028standard-target_0029_007d-694"><CODE>print</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bprint_007d-target-218"><CODE>print</CODE> target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bprint_007d-target-160"><CODE>print</CODE> target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">Wildcard Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-printing-directories-447">printing directories</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-printing-messages-674">printing messages</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-printing-of-recipes-311">printing of recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-printing-user-warnings-672">printing user warnings</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-problems-and-bugs_002c-reporting-6">problems and bugs, reporting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-problems-with-wildcards-167">problems with wildcards</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-processing-a-makefile-27">processing a makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-question-mode-713">question mode</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bpatsubst_007d-578">quoting <CODE>%</CODE>, in <CODE>patsubst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-quoting-_0040code_007b_0025_007d_002c-in-static-pattern-271">quoting <CODE>%</CODE>, in static pattern</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bvpath_007d-182">quoting <CODE>%</CODE>, in <CODE>vpath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-quoting-newline_002c-in-makefile-22">quoting newline, in makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-quoting-newline_002c-in-recipes-303">quoting newline, in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Ratfor_002c-rule-to-compile-830">Ratfor, rule to compile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-RCS_002c-rule-to-extract-from-876">RCS, rule to extract from</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-reading-makefiles-101">reading makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bREADME_007d-67"><CODE>README</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007brealclean_007d-_0040r_007b_0028standard-target_0029_007d-691"><CODE>realclean</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-realpath-636">realpath</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipe-24">recipe</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipe-execution_002c-single-invocation-245">recipe execution, single invocation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipe-lines_002c-single-shell-326">recipe lines, single shell</A>: <A href="https://www.gnu.org/software/make/manual/make.html#One-Shell">One Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipe-syntax-292">recipe syntax</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipe_002c-execution-320">recipe, execution</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes-289">recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipes">Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes-137">recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes-setting-shell-variables-325">recipes setting shell variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-and-directory-search-188">recipes, and directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipes_002fSearch">Recipes/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-backslash-_0028_0040code_007b_005c_007d_0029-in-299">recipes, backslash (<CODE>\</CODE>) in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-canned-460">recipes, canned</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-comments-in-295">recipes, comments in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-echoing-310">recipes, echoing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-empty-468">recipes, empty</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes">Empty Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-errors-in-364">recipes, errors in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-execution-in-parallel-343">recipes, execution in parallel</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel">Parallel</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-how-to-write-290">recipes, how to write</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipes">Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-instead-of-executing-702">recipes, instead of executing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-introduction-to-15">recipes, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-quoting-newlines-in-300">recipes, quoting newlines in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-splitting-297">recipes, splitting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recipes_002c-using-variables-in-306">recipes, using variables in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes">Variables in Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recompilation-8">recompilation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Introduction">Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recompilation_002c-avoiding-727">recompilation, avoiding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recording-events-with-empty-targets-217">recording events with empty targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion-385">recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002dC_007d-428">recursion, and <CODE>-C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002df_007d-429">recursion, and <CODE>-f</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002dj_007d-434">recursion, and <CODE>-j</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002do_007d-430">recursion, and <CODE>-o</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002dt_007d-395">recursion, and <CODE>-t</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002dw_007d-451">recursion, and <CODE>-w</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007b_002dW_007d-431">recursion, and <CODE>-W</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-command-line-variable-definitions-417">recursion, and command line variable definitions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-environment-402">recursion, and environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007bMAKE_007d-variable-391">recursion, and <CODE>MAKE</CODE> variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-_0040code_007bMAKEFILES_007d-variable-94">recursion, and <CODE>MAKEFILES</CODE> variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">MAKEFILES Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-options-413">recursion, and options</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-printing-directories-448">recursion, and printing directories</A>: <A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option">-w Option</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-and-variables-403">recursion, and variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursion_002c-level-of-410">recursion, level of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursive-variable-expansion-480">recursive variable expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursive-variable-expansion-472">recursive variable expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-recursively-expanded-variables-482">recursively expanded variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-reference-to-variables-499">reference to variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Advanced">Advanced</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-reference-to-variables-476">reference to variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-relinking-32">relinking</A>: <A href="https://www.gnu.org/software/make/manual/make.html#How-Make-Works">How Make Works</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-remaking-loaded-objects-1064">remaking loaded objects</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects">Remaking Loaded Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-remaking-makefiles-96">remaking makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-removal-of-target-files-381">removal of target files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-removal-of-target-files-376">removal of target files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-removing-duplicate-words-595">removing duplicate words</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-removing-targets-on-failure-237">removing targets on failure</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-removing_002c-to-clean-up-46">removing, to clean up</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanup</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-reporting-bugs-4">reporting bugs</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rm-925"><CODE>rm</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007brm_007d-_0028shell-command_0029-367"><CODE>rm</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007brm_007d-_0028shell-command_0029-209"><CODE>rm</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007brm_007d-_0028shell-command_0029-159"><CODE>rm</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">Wildcard Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007brm_007d-_0028shell-command_0029-26"><CODE>rm</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule-prerequisites-143">rule prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule-syntax-133">rule syntax</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule-targets-136">rule targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-double_002dcolon-_0028_0040code_007b_003a_003a_007d_0029-276">rule, double-colon (<CODE>::</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Double_002dColon">Double-Colon</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-explicit_002c-definition-of-49">rule, explicit, definition of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-how-to-write-128">rule, how to write</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit-811">rule, implicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules">Implicit Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-and-directory-search-195">rule, implicit, and directory search</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-and-_0040code_007bVPATH_007d-196">rule, implicit, and <CODE>VPATH</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-chains-of-943">rule, implicit, chains of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-definition-of-51">rule, implicit, definition of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-how-to-use-813">rule, implicit, how to use</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Implicit">Using Implicit</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-introduction-to-43">rule, implicit, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#make-Deduces">make Deduces</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-implicit_002c-predefined-815">rule, implicit, predefined</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-introduction-to-10">rule, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-multiple-for-one-target-255">rule, multiple for one target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">Multiple Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-no-recipe-or-prerequisites-214">rule, no recipe or prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">Force Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-pattern-952">rule, pattern</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-static-pattern-258">rule, static pattern</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-static-pattern-versus-implicit-273">rule, static pattern versus implicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit">Static versus Implicit</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rule_002c-with-multiple-targets-251">rule, with multiple targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-rules_002c-and-_0040code_007b_0024_007d-141">rules, and <CODE>$</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-s_002e-_0040r_007b_0028SCCS-file-prefix_0029_007d-881"><CODE>s. </CODE><SPAN class=roman>(SCCS file prefix)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-SCCS_002c-rule-to-extract-from-879">SCCS, rule to extract from</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-search-algorithm_002c-implicit-rule-1026">search algorithm, implicit rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search">Implicit Rule Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029-174">search path for prerequisites (<CODE>VPATH</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-implicit-rules-192">search path for prerequisites (<CODE>VPATH</CODE>), and implicit rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-201">search path for prerequisites (<CODE>VPATH</CODE>), and link libraries</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-searching-for-strings-584">searching for strings</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-expansion-118">secondary expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-expansion-and-explicit-rules-121">secondary expansion and explicit rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-expansion-and-implicit-rules-125">secondary expansion and implicit rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-expansion-and-static-pattern-rules-123">secondary expansion and static pattern rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-files-948">secondary files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chained Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-secondary-targets-233">secondary targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bsed_007d-_0028shell-command_0029-287"><CODE>sed</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-selecting-a-word-600">selecting a word</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-selecting-word-lists-603">selecting word lists</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-sequences-of-commands-461">sequences of commands</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-setting-options-from-environment-442">setting options from environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-setting-options-in-makefiles-444">setting options in makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-setting-variables-516">setting variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-several-rules-for-one-target-254">several rules for one target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">Multiple Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-several-targets-in-a-rule-249">several targets in a rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bshar_007d-_0040r_007b_0028standard-target_0029_007d-696"><CODE>shar</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell-command_002c-function-for-678">shell command, function for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">Shell Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell-file-name-pattern-_0028in-_0040code_007binclude_007d_0029-78">shell file name pattern (in <CODE>include</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell-variables_002c-setting-in-recipes-324">shell variables, setting in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell-wildcards-_0028in-_0040code_007binclude_007d_0029-79">shell wildcards (in <CODE>include</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell_002c-choosing-the-329">shell, choosing the</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-SHELL_002c-exported-value-404">SHELL, exported value</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-SHELL_002c-import-from-environment-540">SHELL, import from environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Environment">Environment</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell_002c-in-DOS-and-Windows-336">shell, in DOS and Windows</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bSHELL_007d_002c-MS_002dDOS-specifics-340"><CODE>SHELL</CODE>, MS-DOS specifics</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bSHELL_007d_002c-value-of-330"><CODE>SHELL</CODE>, value of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-signal-379">signal</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-silent-operation-308">silent operation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-simple-makefile-17">simple makefile</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Simple-Makefile">Simple Makefile</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-simple-variable-expansion-473">simple variable expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-simplifying-with-variables-34">simplifying with variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-simply-expanded-variables-487">simply expanded variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-sorting-words-594">sorting words</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-spaces_002c-in-variable-values-493">spaces, in variable values</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-spaces_002c-stripping-581">spaces, stripping</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-special-targets-221">special targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-special-variables-549">special variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-specifying-makefile-name-71">specifying makefile name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-splitting-long-lines-57">splitting long lines</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Lines">Splitting Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-splitting-recipes-298">splitting recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-staged-installs-1089">staged installs</A>: <A href="https://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDIR</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-standard-input-361">standard input</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-standards-conformance-3">standards conformance</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overview">Overview</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-standards-for-makefiles-1087">standards for makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Conventions">Makefile Conventions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-static-pattern-rule-257">static pattern rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-static-pattern-rule_002c-syntax-of-262">static pattern rule, syntax of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-static-pattern-rule_002c-versus-implicit-274">static pattern rule, versus implicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-versus-Implicit">Static versus Implicit</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-static-pattern-rules_002c-secondary-expansion-of-124">static pattern rules, secondary expansion of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stem-1012">stem</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">Pattern Match</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stem-265">stem</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stem_002c-shortest-1015">stem, shortest</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">Pattern Match</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stem_002c-variable-for-983">stem, variable for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stopping-make-669">stopping make</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-strings_002c-searching-for-586">strings, searching for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-stripping-whitespace-579">stripping whitespace</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-sub_002d_0040code_007bmake_007d-397">sub-<CODE>make</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-subdirectories_002c-recursion-for-386">subdirectories, recursion for</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-substitution-variable-reference-501">substitution variable reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix-rule-1022">suffix rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix-rule_002c-for-archive-1039">suffix rule, for archive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix_002c-adding-625">suffix, adding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix_002c-function-to-find-619">suffix, function to find</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix_002c-substituting-in-variables-505">suffix, substituting in variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suppressing-inheritance-546">suppressing inheritance</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">Suppressing Inheritance</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-switches-738">switches</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-symbol-directories_002c-updating-archive-1033">symbol directories, updating archive</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-syntax-of-recipe-293">syntax of recipe</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">Recipe Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-syntax-of-rules-134">syntax of rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tab-character-_0028in-commands_0029-138">tab character (in commands)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tabs-in-rules-16">tabs in rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bTAGS_007d-_0040r_007b_0028standard-target_0029_007d-698"><CODE>TAGS</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tangle-921"><CODE>tangle</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tangle-861"><CODE>tangle</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007btar_007d-_0040r_007b_0028standard-target_0029_007d-695"><CODE>tar</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target-129">target</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target-pattern_002c-implicit-953">target pattern, implicit</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target-pattern_002c-static-_0028not-implicit_0029-264">target pattern, static (not implicit)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-deleting-on-error-377">target, deleting on error</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-deleting-on-interrupt-382">target, deleting on interrupt</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-expansion-113">target, expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">Reading Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-multiple-in-pattern-rule-957">target, multiple in pattern rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro">Pattern Intro</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-multiple-rules-for-one-256">target, multiple rules for one</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules">Multiple Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002c-touching-709">target, touching</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-target_002dspecific-variables-541">target-specific variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific">Target-specific</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets-135">targets</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Rule Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets-without-a-file-208">targets without a file</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-built_002din-special-223">targets, built-in special</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-empty-216">targets, empty</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-force-212">targets, force</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Force-Targets">Force Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-introduction-to-13">targets, introduction to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rule-Introduction">Rule Introduction</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-multiple-250">targets, multiple</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-targets_002c-phony-207">targets, phony</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-terminal-rule-1017">terminal rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules">Match-Anything Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007btest_007d-_0040r_007b_0028standard-target_0029_007d-700"><CODE>test</CODE> <SPAN class=roman>(standard target)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-testing-compilation-732">testing compilation</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tex-913"><CODE>tex</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tex-858"><CODE>tex</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040TeX_007b_007d_002c-rule-to-run-856">TeX, rule to run</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-texi2dvi-915"><CODE>texi2dvi</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-texi2dvi-870"><CODE>texi2dvi</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Texinfo_002c-rule-to-format-868">Texinfo, rule to format</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-tilde-_0028_0040code_007b_007e_007d_0029-157">tilde (<CODE>~</CODE>)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007btouch_007d-_0028shell-command_0029-220"><CODE>touch</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets">Empty Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007btouch_007d-_0028shell-command_0029-162"><CODE>touch</CODE> (shell command)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Examples">Wildcard Examples</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-touching-files-708">touching files</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-traditional-directory-search-_0028GPATH_0029-185">traditional directory search (GPATH)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-types-of-prerequisites-145">types of prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Prerequisite-Types">Prerequisite Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-types_002c-conversion-of-1048">types, conversion of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Types">Guile Types</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-undefined-variables_002c-warning-message-809">undefined variables, warning message</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-undefining-variable-537">undefining variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive">Undefine Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-updating-archive-symbol-directories-1031">updating archive symbol directories</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Symbols">Archive Symbols</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-updating-loaded-objects-1063">updating loaded objects</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Loaded-Objects">Remaking Loaded Objects</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-updating-makefiles-95">updating makefiles</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">Remaking Makefiles</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-user-defined-functions-653">user defined functions</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">Call Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-value-471">value</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-value_002c-how-a-variable-gets-it-515">value, how a variable gets it</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Values">Values</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variable-470">variable</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">Using Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variable-definition-53">variable definition</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Contents">Makefile Contents</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variable-references-in-recipes-305">variable references in recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes">Variables in Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables-33">variables</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables-Simplify">Variables Simplify</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-_0040samp_007b_0024_007d-in-name-511">variables, &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; in name</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-and-implicit-rule-960">variables, and implicit rule</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-appending-to-525">variables, appending to</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Appending">Appending</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-automatic-959">variables, automatic</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-command-line-731">variables, command line</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-command-line_002c-and-recursion-416">variables, command line, and recursion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-computed-names-509">variables, computed names</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-conditional-assignment-497">variables, conditional assignment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-defining-verbatim-535">variables, defining verbatim</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-environment-538">variables, environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Environment">Environment</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-environment-400">variables, environment</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-exporting-401">variables, exporting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-flavor-of-663">variables, flavor of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">Flavor Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-flavors-481">variables, flavors</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-how-they-get-their-values-514">variables, how they get their values</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Values">Values</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-how-to-reference-475">variables, how to reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-loops-in-expansion-486">variables, loops in expansion</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-modified-reference-502">variables, modified reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-multi_002dline-532">variables, multi-line</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-nested-references-510">variables, nested references</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-origin-of-660">variables, origin of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">Origin Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-overriding-528">variables, overriding</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">Override Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-overriding-with-arguments-729">variables, overriding with arguments</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-pattern_002dspecific-544">variables, pattern-specific</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Pattern_002dspecific">Pattern-specific</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-recursively-expanded-483">variables, recursively expanded</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-setting-517">variables, setting</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-simply-expanded-488">variables, simply expanded</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-spaces-in-values-495">variables, spaces in values</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-substituting-suffix-in-504">variables, substituting suffix in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-substitution-reference-503">variables, substitution reference</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-target_002dspecific-542">variables, target-specific</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific">Target-specific</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-unexpanded-value-655">variables, unexpanded value</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Value-Function">Value Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-variables_002c-warning-for-undefined-808">variables, warning for undefined</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-varying-prerequisites-260">varying prerequisites</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-verbatim-variable-definition-533">verbatim variable definition</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-vpath-173">vpath</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bVPATH_007d_002c-and-implicit-rules-190"><CODE>VPATH</CODE>, and implicit rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit_002fSearch">Implicit/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bVPATH_007d_002c-and-link-libraries-200"><CODE>VPATH</CODE>, and link libraries</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-warnings_002c-printing-671">warnings, printing</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-weave-917"><CODE>weave</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-weave-860"><CODE>weave</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Web_002c-rule-to-run-857">Web, rule to run</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-what-if-718">what if</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-whitespace_002c-in-variable-values-494">whitespace, in variable values</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-whitespace_002c-stripping-580">whitespace, stripping</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard-150">wildcard</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard-pitfalls-163">wildcard pitfalls</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard_002c-function-634">wildcard, function</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard_002c-in-archive-member-1029">wildcard, in archive member</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members">Archive Members</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard_002c-in-_0040code_007binclude_007d-80">wildcard, in <CODE>include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes-168">wildcards and MS-DOS/MS-Windows backslashes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall">Wildcard Pitfall</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Windows_002c-choosing-a-shell-in-338">Windows, choosing a shell in</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-word_002c-selecting-a-599">word, selecting a</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-extracting-first-607">words, extracting first</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-extracting-last-609">words, extracting last</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-filtering-589">words, filtering</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-filtering-out-592">words, filtering out</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-finding-number-605">words, finding number</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-iterating-over-647">words, iterating over</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function">Foreach Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-joining-lists-632">words, joining lists</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-removing-duplicates-597">words, removing duplicates</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words_002c-selecting-lists-of-602">words, selecting lists of</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-writing-recipes-291">writing recipes</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recipes">Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-writing-rules-127">writing rules</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Rules">Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-writing-to-a-file-649">writing to a file</A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Function">File Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-yacc-907"><CODE>yacc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-yacc-847"><CODE>yacc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007byacc_007d-463"><CODE>yacc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes">Canned Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Yacc_002c-rule-to-run-848">Yacc, rule to run</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007b_007e_007d-_0028tilde_0029-156"><CODE>~</CODE> (tilde)</A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Wildcards</A> </LI></UL>
<DIV class=node><A name=Name-Index></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Concept-Index" rel=previous>Concept Index</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Top" rel=up>Top</A> </DIV>
<H2 class=unnumbered>Index of Functions, Variables, &amp; Directives</H2>
<UL class=index-fn compact>
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0025-965"><CODE>$%</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_0025D_0029-992"><CODE>$(%D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_0025F_0029-994"><CODE>$(%F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_002aD_0029-988"><CODE>$(*D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_002aF_0029-990"><CODE>$(*F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_002bD_0029-1004"><CODE>$(+D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_002bF_0029-1006"><CODE>$(+F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_003cD_0029-996"><CODE>$(&lt;D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_003cF_0029-998"><CODE>$(&lt;F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_003fD_0029-1008"><CODE>$(?D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_003fF_0029-1010"><CODE>$(?F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_0040_0040D_0029-984"><CODE>$(@D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_0040_0040F_0029-986"><CODE>$(@F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_005eD_0029-1000"><CODE>$(^D)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0028_005eF_0029-1002"><CODE>$(^F)</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_002a-981"><CODE>$*</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_002a_0040r_007b_002c-and-static-pattern_007d-272"><CODE>$*</CODE><SPAN class=roman>, and static pattern</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage">Static Usage</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_002b-977"><CODE>$+</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_003c-967"><CODE>$&lt;</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_003f-969"><CODE>$?</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_0040_0040-963"><CODE>$@</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_005e-973"><CODE>$^</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0024_007c-979"><CODE>$|</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0025-_0040r_007b_0028automatic-variable_0029_007d-966"><CODE>% </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0025D-_0040r_007b_0028automatic-variable_0029_007d-993"><CODE>%D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0025F-_0040r_007b_0028automatic-variable_0029_007d-995"><CODE>%F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002a-_0040r_007b_0028automatic-variable_0029_007d-982"><CODE>* </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002a-_0040r_007b_0028automatic-variable_0029_002c-unsupported-bizarre-usage_007d-1084"><CODE>* </CODE><SPAN class=roman>(automatic variable), unsupported bizarre usage</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002aD-_0040r_007b_0028automatic-variable_0029_007d-989"><CODE>*D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002aF-_0040r_007b_0028automatic-variable_0029_007d-991"><CODE>*F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002b-_0040r_007b_0028automatic-variable_0029_007d-978"><CODE>+ </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002bD-_0040r_007b_0028automatic-variable_0029_007d-1005"><CODE>+D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002bF-_0040r_007b_0028automatic-variable_0029_007d-1007"><CODE>+F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002dload-1062"><CODE>-load</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDEFAULT-1020"><CODE>.DEFAULT</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Last-Resort">Last Resort</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDEFAULT-226"><CODE>.DEFAULT</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDEFAULT_0040r_007b_002c-and-empty-recipes_007d-469"><CODE>.DEFAULT</CODE><SPAN class=roman>, and empty recipes</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes">Empty Recipes</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDEFAULT_005fGOAL-_0040r_007b_0028define-default-goal_0029_007d-553"><CODE>.DEFAULT_GOAL </CODE><SPAN class=roman>(define default goal)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDELETE_005fON_005fERROR-374"><CODE>.DELETE_ON_ERROR</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eDELETE_005fON_005fERROR-236"><CODE>.DELETE_ON_ERROR</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eEXPORT_005fALL_005fVARIABLES-407"><CODE>.EXPORT_ALL_VARIABLES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eEXPORT_005fALL_005fVARIABLES-241"><CODE>.EXPORT_ALL_VARIABLES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eFEATURES-_0040r_007b_0028list-of-supported-features_0029_007d-557"><CODE>.FEATURES </CODE><SPAN class=roman>(list of supported features)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eIGNORE-370"><CODE>.IGNORE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eIGNORE-238"><CODE>.IGNORE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eINCLUDE_005fDIRS-_0040r_007b_0028list-of-include-directories_0029_007d-558"><CODE>.INCLUDE_DIRS </CODE><SPAN class=roman>(list of include directories)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eINTERMEDIATE-230"><CODE>.INTERMEDIATE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eLIBPATTERNS-205"><CODE>.LIBPATTERNS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Libraries/Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eLOADED-1061"><CODE>.LOADED</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eLOW_005fRESOLUTION_005fTIME-239"><CODE>.LOW_RESOLUTION_TIME</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eNOTPARALLEL-242"><CODE>.NOTPARALLEL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eONESHELL-328"><CODE>.ONESHELL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#One-Shell">One Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eONESHELL-244"><CODE>.ONESHELL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePHONY-224"><CODE>.PHONY</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePHONY-210"><CODE>.PHONY</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePOSIX-439"><CODE>.POSIX</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePOSIX-246"><CODE>.POSIX</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePRECIOUS-384"><CODE>.PRECIOUS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002ePRECIOUS-227"><CODE>.PRECIOUS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eRECIPEPREFIX-_0040r_007b_0028change-the-recipe-prefix-character_0029_007d-555"><CODE>.RECIPEPREFIX </CODE><SPAN class=roman>(change the recipe prefix character)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSECONDARY-232"><CODE>.SECONDARY</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSECONDEXPANSION-235"><CODE>.SECONDEXPANSION</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSECONDEXPANSION-120"><CODE>.SECONDEXPANSION</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion">Secondary Expansion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSHELLFLAGS-333"><CODE>.SHELLFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSILENT-319"><CODE>.SILENT</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Echoing">Echoing</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSILENT-240"><CODE>.SILENT</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSUFFIXES-1023"><CODE>.SUFFIXES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eSUFFIXES-225"><CODE>.SUFFIXES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002eVARIABLES-_0040r_007b_0028list-of-variables_0029_007d-556"><CODE>.VARIABLES </CODE><SPAN class=roman>(list of variables)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002fusr_002fgnu_002finclude-88"><CODE>/usr/gnu/include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002fusr_002finclude-90"><CODE>/usr/include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_002fusr_002flocal_002finclude-89"><CODE>/usr/local/include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003c-_0040r_007b_0028automatic-variable_0029_007d-968"><CODE>&lt; </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003cD-_0040r_007b_0028automatic-variable_0029_007d-997"><CODE>&lt;D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003cF-_0040r_007b_0028automatic-variable_0029_007d-999"><CODE>&lt;F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003f-_0040r_007b_0028automatic-variable_0029_007d-970"><CODE>? </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003fD-_0040r_007b_0028automatic-variable_0029_007d-1009"><CODE>?D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_003fF-_0040r_007b_0028automatic-variable_0029_007d-1011"><CODE>?F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040_0040-_0040r_007b_0028automatic-variable_0029_007d-964"><CODE>@ </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040_0040D-_0040r_007b_0028automatic-variable_0029_007d-985"><CODE>@D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040_0040F-_0040r_007b_0028automatic-variable_0029_007d-987"><CODE>@F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_005e-_0040r_007b_0028automatic-variable_0029_007d-974"><CODE>^ </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_005eD-_0040r_007b_0028automatic-variable_0029_007d-1001"><CODE>^D </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_005eF-_0040r_007b_0028automatic-variable_0029_007d-1003"><CODE>^F </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-abspath-638"><CODE>abspath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-addprefix-627"><CODE>addprefix</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-addsuffix-624"><CODE>addsuffix</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-and-645"><CODE>and</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Conditional Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-AR-885"><CODE>AR</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ARFLAGS-926"><CODE>ARFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-AS-887"><CODE>AS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ASFLAGS-927"><CODE>ASFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-basename-621"><CODE>basename</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-bindir-1095"><CODE>bindir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-call-651"><CODE>call</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">Call Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CC-889"><CODE>CC</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CFLAGS-928"><CODE>CFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CO-900"><CODE>CO</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-COFLAGS-930"><CODE>COFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-COMSPEC-339"><CODE>COMSPEC</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CPP-893"><CODE>CPP</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CPPFLAGS-931"><CODE>CPPFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CTANGLE-922"><CODE>CTANGLE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bCURDIR_007d-389"><CODE>CURDIR</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CWEAVE-918"><CODE>CWEAVE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CXX-891"><CODE>CXX</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-CXXFLAGS-929"><CODE>CXXFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-define-529"><CODE>define</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-DESTDIR-1088"><CODE>DESTDIR</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDIR</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-dir-612"><CODE>dir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-else-564"><CODE>else</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-endef-530"><CODE>endef</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-endif-565"><CODE>endif</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-error-667"><CODE>error</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-eval-656"><CODE>eval</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">Eval Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-exec_005fprefix-1094"><CODE>exec_prefix</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-export-405"><CODE>export</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-FC-894"><CODE>FC</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-FFLAGS-932"><CODE>FFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-file-648"><CODE>file</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Function">File Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-filter-587"><CODE>filter</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-filter_002dout-590"><CODE>filter-out</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-findstring-583"><CODE>findstring</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-firstword-606"><CODE>firstword</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-flavor-662"><CODE>flavor</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">Flavor Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-foreach-646"><CODE>foreach</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function">Foreach Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-GET-902"><CODE>GET</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-GFLAGS-933"><CODE>GFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_002deval-1052"><CODE>gmk-eval</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">Guile Interface</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_002dexpand-1051"><CODE>gmk-expand</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Interface">Guile Interface</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005fadd_005ffunction-1070"><CODE>gmk_add_function</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005falloc-1074"><CODE>gmk_alloc</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005feval-1073"><CODE>gmk_eval</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005fexpand-1072"><CODE>gmk_expand</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005ffree-1075"><CODE>gmk_free</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-gmk_005ffunc_005fptr-1071"><CODE>gmk_func_ptr</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Loaded-Object-API">Loaded Object API</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-GNUmakefile-65"><CODE>GNUmakefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-GPATH-187"><CODE>GPATH</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Search-Algorithm">Search Algorithm</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-guile-679"><CODE>guile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Guile-Function">Guile Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-if-641"><CODE>if</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Conditional Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifdef-560"><CODE>ifdef</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifeq-561"><CODE>ifeq</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifndef-562"><CODE>ifndef</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-ifneq-563"><CODE>ifneq</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax">Conditional Syntax</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-include-77"><CODE>include</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Include">Include</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-info-673"><CODE>info</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-join-630"><CODE>join</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-lastword-608"><CODE>lastword</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LDFLAGS-934"><CODE>LDFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LDLIBS-935"><CODE>LDLIBS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LEX-904"><CODE>LEX</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LFLAGS-937"><CODE>LFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-libexecdir-1097"><CODE>libexecdir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LINT-908"><CODE>LINT</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LINTFLAGS-941"><CODE>LINTFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-load-1060"><CODE>load</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#load-Directive">load Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-LOADLIBES-936"><CODE>LOADLIBES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-M2C-896"><CODE>M2C</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKE-492"><CODE>MAKE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKE-390"><CODE>MAKE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">MAKE Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKE_005fHOST-1102"><CODE>MAKE_HOST</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference">Quick Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKE_005fRESTARTS-_0040r_007b_0028number-of-times-_0040code_007bmake_007d-has-restarted_0029_007d-554"><CODE>MAKE_RESTARTS </CODE><SPAN class=roman>(number of times </SPAN><CODE>make</CODE><SPAN class=roman> has restarted)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKE_005fVERSION-1101"><CODE>MAKE_VERSION</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Quick-Reference">Quick Reference</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKECMDGOALS-686"><CODE>MAKECMDGOALS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-makefile-66"><CODE>makefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-Makefile-64"><CODE>Makefile</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Names">Makefile Names</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEFILE_005fLIST-_0040r_007b_0028list-of-parsed-makefiles_0029_007d-550"><CODE>MAKEFILE_LIST </CODE><SPAN class=roman>(list of parsed makefiles)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEFILES-411"><CODE>MAKEFILES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEFILES-93"><CODE>MAKEFILES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">MAKEFILES Variable</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEFLAGS-414"><CODE>MAKEFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEINFO-910"><CODE>MAKEINFO</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKELEVEL-491"><CODE>MAKELEVEL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">Flavors</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKELEVEL-409"><CODE>MAKELEVEL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MAKEOVERRIDES-436"><CODE>MAKEOVERRIDES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bMAKESHELL_007d-_0040r_007b_0028MS_002dDOS-alternative-to-_0040code_007bSHELL_007d_0029_007d-335"><CODE>MAKESHELL </CODE><SPAN class=roman>(MS-DOS alternative to </SPAN><CODE>SHELL</CODE><SPAN class=roman>)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-MFLAGS-441"><CODE>MFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Options/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-notdir-615"><CODE>notdir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-or-644"><CODE>or</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Conditional Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-origin-659"><CODE>origin</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">Origin Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-OUTPUT_005fOPTION-883"><CODE>OUTPUT_OPTION</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-override-526"><CODE>override</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">Override Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-patsubst-573"><CODE>patsubst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-patsubst-506"><CODE>patsubst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-PC-898"><CODE>PC</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-PFLAGS-939"><CODE>PFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-prefix-1093"><CODE>prefix</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-private-545"><CODE>private</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">Suppressing Inheritance</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-realpath-635"><CODE>realpath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-RFLAGS-940"><CODE>RFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-RM-924"><CODE>RM</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-sbindir-1096"><CODE>sbindir</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Variables">Directory Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-shell-675"><CODE>shell</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">Shell Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-SHELL-332"><CODE>SHELL</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_0040code_007bSHELL_007d-_0040r_007b_0028recipe-execution_0029_007d-322"><CODE>SHELL </CODE><SPAN class=roman>(recipe execution)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Execution</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-sort-593"><CODE>sort</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-strip-582"><CODE>strip</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-subst-572"><CODE>subst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-subst-252"><CODE>subst</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-suffix-618"><CODE>suffix</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-SUFFIXES-1024"><CODE>SUFFIXES</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Suffix Rules</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-TANGLE-920"><CODE>TANGLE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-TEX-912"><CODE>TEX</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-TEXI2DVI-914"><CODE>TEXI2DVI</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-undefine-536"><CODE>undefine</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive">Undefine Directive</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-unexport-406"><CODE>unexport</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-value-654"><CODE>value</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Value-Function">Value Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-vpath-177"><CODE>vpath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">Selective Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-VPATH-176"><CODE>VPATH</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#General-Search">General Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-vpath-172"><CODE>vpath</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-VPATH-171"><CODE>VPATH</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Directory Search</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-warning-670"><CODE>warning</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Make Control Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-WEAVE-916"><CODE>WEAVE</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard-633"><CODE>wildcard</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">File Name Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wildcard-170"><CODE>wildcard</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">Wildcard Function</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-word-598"><CODE>word</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-wordlist-601"><CODE>wordlist</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-words-604"><CODE>words</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Text Functions</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-YACC-906"><CODE>YACC</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-YFLAGS-938"><CODE>YFLAGS</CODE></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Implicit Variables</A> 
<LI><A href="https://www.gnu.org/software/make/manual/make.html#index-g_t_007c-_0040r_007b_0028automatic-variable_0029_007d-980"><CODE>| </CODE><SPAN class=roman>(automatic variable)</SPAN></A>: <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A> </LI></UL>
<DIV class=footnote>
<HR>
<A name=texinfo-footnotes-in-document></A>
<H4>Footnotes</H4>
<P class=footnote><SMALL><FONT size=2>[</FONT><A href="https://www.gnu.org/software/make/manual/make.html#fnd-1" name=fn-1><FONT size=2>1</FONT></A><FONT size=2>]</FONT></SMALL> GNU Make compiled for MS-DOS and MS-Windows behaves as if <VAR>prefix</VAR> has been defined to be the root of the DJGPP tree hierarchy.</P>
<P class=footnote><SMALL><FONT size=2>[</FONT><A href="https://www.gnu.org/software/make/manual/make.html#fnd-2" name=fn-2><FONT size=2>2</FONT></A><FONT size=2>]</FONT></SMALL> On MS-DOS, the value of current working directory is <STRONG>global</STRONG>, so changing it <EM>will</EM> affect the following recipe lines on those systems.</P>
<HR>
</DIV>