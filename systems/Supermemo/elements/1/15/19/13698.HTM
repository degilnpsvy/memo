<H3 class=section>2.3 How <CODE>make</CODE> Processes a Makefile</H3>
<P><A name=index-processing-a-makefile-27></A><A name=index-makefile_002c-how-_0040code_007bmake_007d-processes-28></A><FONT class=extract>By default, <CODE>make</CODE> starts with the first target (not targets whose names start with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;). This is called the <DFN>default goal</DFN>. (<DFN>Goals</DFN> are the targets that <CODE>make</CODE> strives ultimately to update. You can override this behavior using the command line (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Goals"><FONT class=extract>Arguments to Specify the Goals</FONT></A><FONT class=extract>) or with the <CODE>.DEFAULT_GOAL</CODE> special variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>).</FONT> <A name=index-default-goal-29></A><A name=index-goal_002c-default-30></A><A name=index-goal-31></A>In the simple example of the previous section, the default goal is to update the executable program <SAMP><SPAN class=file>edit</SPAN></SAMP>; therefore, we put that rule first. 
<P>Thus, when you give the command: <PRE class=example>     make
</PRE>
<P class=noindent><CODE>make</CODE> reads the makefile in the current directory and begins by processing the first rule. In the example, this rule is for relinking <SAMP><SPAN class=file>edit</SPAN></SAMP>; but before <CODE>make</CODE> can fully process this rule, it must process the rules for the files that <SAMP><SPAN class=file>edit</SPAN></SAMP> depends on, which in this case are the object files. Each of these files is processed according to its own rule. These rules say to update each &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file by compiling its source file. The recompilation must be done if the source file, or any of the header files named as prerequisites, is more recent than the object file, or if the object file does not exist. 
<P>The other rules are processed because their targets appear as prerequisites of the goal. If some other rule is not depended on by the goal (or anything it depends on, etc.), that rule is not processed, unless you tell <CODE>make</CODE> to do so (with a command such as <CODE>make&nbsp;clean</CODE><!-- /@w -->). 
<P>Before recompiling an object file, <CODE>make</CODE> considers updating its prerequisites, the source file and header files. This makefile does not specify anything to be done for them&#8212;the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.h</SPAN></SAMP>&#8217; files are not the targets of any rules&#8212;so <CODE>make</CODE> does nothing for these files. But <CODE>make</CODE> would update automatically generated C programs, such as those made by Bison or Yacc, by their own rules at this time. 
<P>After recompiling whichever object files need it, <CODE>make</CODE> decides whether to relink <SAMP><SPAN class=file>edit</SPAN></SAMP>. This must be done if the file <SAMP><SPAN class=file>edit</SPAN></SAMP> does not exist, or if any of the object files are newer than it. If an object file was just recompiled, it is now newer than <SAMP><SPAN class=file>edit</SPAN></SAMP>, so <SAMP><SPAN class=file>edit</SPAN></SAMP> is relinked. <A name=index-relinking-32></A>Thus, if we change the file <SAMP><SPAN class=file>insert.c</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will compile that file to update <SAMP><SPAN class=file>insert.o</SPAN></SAMP>, and then link <SAMP><SPAN class=file>edit</SPAN></SAMP>. If we change the file <SAMP><SPAN class=file>command.h</SPAN></SAMP> and run <CODE>make</CODE>, <CODE>make</CODE> will recompile the object files <SAMP><SPAN class=file>kbd.o</SPAN></SAMP>, <SAMP><SPAN class=file>command.o</SPAN></SAMP> and <SAMP><SPAN class=file>files.o</SPAN></SAMP> and then link the file <SAMP><SPAN class=file>edit</SPAN></SAMP>.