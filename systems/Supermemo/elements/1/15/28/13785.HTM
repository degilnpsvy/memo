<H4 class=subsection>4.5.4 Writing Recipes with Directory Search</H4>
<P><A name=index-recipes_002c-and-directory-search-188></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-recipes-189></A><FONT class=extract>When a prerequisite is found in another directory through directory search, this cannot change the recipe of the rule; they will execute as written. Therefore, you must write the recipe with care so that it will look for the prerequisite in the directory where <CODE>make</CODE> finds it. </FONT>
<P><FONT class=extract>This is done with the <DFN>automatic variables</DFN> such as &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>).</FONT> For instance, the value of &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217; is a list of all the prerequisites of the rule, including the names of the directories in which they were found, and the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the target. Thus: <PRE class=example>     foo.o : foo.c
             cc -c $(CFLAGS) $^ -o $@
</PRE>
<P class=noindent>(The variable <CODE>CFLAGS</CODE> exists so you can specify flags for C compilation by implicit rules; we use it here for consistency so it will affect all C compilations uniformly; see <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables">Variables Used by Implicit Rules</A>.) 
<P>Often the prerequisites include header files as well, which you do not want to mention in the recipe. <FONT class=extract>The automatic variable &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; is just the first prerequisite</FONT>: <PRE class=example>     VPATH = src:../headers
     foo.o : foo.c defs.h hack.h
             cc -c $(CFLAGS) $&lt; -o $@
</PRE>