<H4 class=subsection>4.5.6 Directory Search for Link Libraries</H4>
<P><A name=index-link-libraries_002c-and-directory-search-197></A><A name=index-libraries-for-linking_002c-directory-search-198></A><A name=index-directory-search-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-199></A><A name=index-g_t_0040code_007bVPATH_007d_002c-and-link-libraries-200></A><A name=index-search-path-for-prerequisites-_0028_0040code_007bVPATH_007d_0029_002c-and-link-libraries-201></A><A name=index-g_t_0040code_007b_002dl_007d-_0028library-search_0029-202></A><A name=index-link-libraries_002c-patterns-matching-203></A><A name=index-g_t_0040code_007b_002eLIBPATTERNS_007d_002c-and-link-libraries-204></A><A name=index-g_t_002eLIBPATTERNS-205></A>Directory search applies in a special way to libraries used with the linker. This special feature comes into play when you write a prerequisite whose name is of the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;. (You can tell something strange is going on here because the prerequisite is normally the name of a file, and the <EM>file name</EM> of a library generally looks like <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, not like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;.) 
<P><FONT class=extract>When a prerequisite's name has the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;, <CODE>make</CODE> handles it specially by searching for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP>, and, if it is not found, for the file <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP> in the current directory, in directories specified by matching <CODE>vpath</CODE> search paths and the <CODE>VPATH</CODE> search path, and then in the directories <SAMP><SPAN class=file>/lib</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/lib</SPAN></SAMP>, and <SAMP><VAR>prefix</VAR><SPAN class=file>/lib</SPAN></SAMP> (normally <SAMP><SPAN class=file>/usr/local/lib</SPAN></SAMP>, but MS-DOS/MS-Windows versions of <CODE>make</CODE> behave as if <VAR>prefix</VAR> is defined to be the root of the DJGPP installation tree).</FONT> 
<P><FONT class=extract>For example, if there is a <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP> library on your system (and no <SAMP><SPAN class=file>/usr/lib/libcurses.so</SPAN></SAMP> file), then </FONT><PRE class=example><FONT class=extract>     foo : foo.c -lcurses
             cc $^ -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>would cause the command &#8216;<SAMP><SPAN class=samp>cc foo.c /usr/lib/libcurses.a -o foo</SPAN></SAMP>&#8217; to be executed when <SAMP><SPAN class=file>foo</SPAN></SAMP> is older than <SAMP><SPAN class=file>foo.c</SPAN></SAMP> or than <SAMP><SPAN class=file>/usr/lib/libcurses.a</SPAN></SAMP>.</FONT> 
<P><FONT class=extract>Although the default set of files to be searched for is <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.so</SPAN></SAMP> and <SAMP><SPAN class=file>lib</SPAN><VAR>name</VAR><SPAN class=file>.a</SPAN></SAMP>, this is customizable via the <CODE>.LIBPATTERNS</CODE> variable. Each word in the value of this variable is a pattern string. When a prerequisite like &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217; is seen, <CODE>make</CODE> will replace the percent in each pattern in the list with <VAR>name</VAR> and perform the above directory searches using each library file name. </FONT>
<P><FONT class=extract>The default value for <CODE>.LIBPATTERNS</CODE> is &#8216;<SAMP><SPAN class=samp>lib%.so lib%.a</SPAN></SAMP>&#8217;, which provides the default behavior described above. </FONT>
<P><FONT class=extract>You can turn off link library expansion completely by setting this variable to an empty value.</FONT>