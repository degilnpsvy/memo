<H3 class=section>4.2 Rule Syntax</H3>
<P><A name=index-rule-syntax-133></A><A name=index-syntax-of-rules-134></A><FONT class=extract>In general, a rule looks like this: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>prerequisites</VAR>
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P class=noindent><FONT class=extract>or like this: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>prerequisites</VAR> ; <VAR>recipe</VAR>
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P><A name=index-targets-135></A><A name=index-rule-targets-136></A>The <VAR>targets</VAR> are file names, separated by spaces. Wildcard characters may be used (see <A href="https://www.gnu.org/software/make/manual/make.html#Wildcards">Using Wildcard Characters in File Names</A>) and <FONT class=extract>a name of the form <SAMP><VAR>a</VAR><SPAN class=file>(</SPAN><VAR>m</VAR><SPAN class=file>)</SPAN></SAMP> represents member <VAR>m</VAR> in archive file <VAR>a</VAR> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members as Targets</FONT></A><FONT class=extract>)</FONT>. Usually there is only one target per rule, but occasionally there is a reason to have more (see <A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Targets">Multiple Targets in a Rule</A>). 
<P><A name=index-recipes-137></A><A name=index-tab-character-_0028in-commands_0029-138></A>The <VAR>recipe</VAR> lines start with a tab character (or the first character in the value of the <CODE>.RECIPEPREFIX</CODE> variable; see <A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables">Special Variables</A>). The first recipe line may appear on the line after the prerequisites, with a tab character, or may appear on the same line, with a semicolon. Either way, the effect is the same. There are other differences in the syntax of recipes. See <A href="https://www.gnu.org/software/make/manual/make.html#Recipes">Writing Recipes in Rules</A>. 
<P><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-rules-139></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-rules-140></A><A name=index-rules_002c-and-_0040code_007b_0024_007d-141></A><FONT class=extract>Because dollar signs are used to start <CODE>make</CODE> variable references, if you really want a dollar sign in a target or prerequisite you must write two of them, &#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>).</FONT> <FONT class=extract>If you have enabled secondary expansion (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>) and you want a literal dollar sign in the prerequisites list, you must actually write <EM>four</EM> dollar signs (&#8216;<SAMP><SPAN class=samp>$$$$</SPAN></SAMP>&#8217;).</FONT> 
<P>You may split a long line by inserting a backslash followed by a newline, but this is not required, as <CODE>make</CODE> places no limit on the length of a line in a makefile. 
<P>A rule tells <CODE>make</CODE> two things: when the targets are out of date, and how to update them when necessary. 
<P><A name=index-prerequisites-142></A><A name=index-rule-prerequisites-143></A>The criterion for being out of date is specified in terms of the <VAR>prerequisites</VAR>, which consist of file names separated by spaces. (Wildcards and archive members (see <A href="https://www.gnu.org/software/make/manual/make.html#Archives">Archives</A>) are allowed here too.) A target is out of date if it does not exist or if it is older than any of the prerequisites (by comparison of last-modification times). The idea is that the contents of the target file are computed based on information in the prerequisites, so if any of the prerequisites changes, the contents of the existing target file are no longer necessarily valid. 
<P>How to update is specified by a <VAR>recipe</VAR>. This is one or more lines to be executed by the shell (normally &#8216;<SAMP><SPAN class=samp>sh</SPAN></SAMP>&#8217;), but with some extra features (see <A href="https://www.gnu.org/software/make/manual/make.html#Recipes">Writing Recipes in Rules</A>).