<H3 class=section>4.3 Types of Prerequisites</H3>
<P><A name=index-prerequisite-types-144></A><A name=index-types-of-prerequisites-145></A><A name=index-prerequisites_002c-normal-146></A><A name=index-normal-prerequisites-147></A><A name=index-prerequisites_002c-order_002donly-148></A><A name=index-order_002donly-prerequisites-149></A><FONT class=extract>There are actually two different types of prerequisites understood by GNU <CODE>make</CODE>: normal prerequisites such as described in the previous section, and <DFN>order-only</DFN> prerequisites.</FONT> A normal prerequisite makes two statements: first, it imposes an order in which recipes will be invoked: the recipes for all prerequisites of a target will be completed before the recipe for the target is run. Second, it imposes a dependency relationship: if any prerequisite is newer than the target, then the target is considered out-of-date and must be rebuilt. 
<P>Normally, this is exactly what you want: if a target's prerequisite is updated, then the target should also be updated. 
<P><FONT class=extract>Occasionally, however, you have a situation where you want to impose a specific ordering on the rules to be invoked <EM>without</EM> forcing the target to be updated if one of those rules is executed. In that case, you want to define <DFN>order-only</DFN> prerequisites. Order-only prerequisites can be specified by placing a pipe symbol (<CODE>|</CODE>) in the prerequisites list: any prerequisites to the left of the pipe symbol are normal; any prerequisites to the right are order-only: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> : <VAR>normal-prerequisites</VAR> | <VAR>order-only-prerequisites</VAR></FONT>
</PRE>
<P>The normal prerequisites section may of course be empty. Also, you may still declare multiple lines of prerequisites for the same target: they are appended appropriately (normal prerequisites are appended to the list of normal prerequisites; order-only prerequisites are appended to the list of order-only prerequisites). <FONT class=extract>Note that if you declare the same file to be both a normal and an order-only prerequisite, the normal prerequisite takes precedence (since they have a strict superset of the behavior of an order-only prerequisite</FONT>). 
<P><FONT class=extract>Consider an example where your targets are to be placed in a separate directory, and that directory might not exist before <CODE>make</CODE> is run. In this situation, you want the directory to be created before any targets are placed into it but, because the timestamps on directories change whenever a file is added, removed, or renamed, we certainly don't want to rebuild all the targets whenever the directory's timestamp changes. One way to manage this is with order-only prerequisites: make the directory an order-only prerequisite on all the targets: </FONT><PRE class=example><FONT class=extract>     OBJDIR := objdir
     OBJS := $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)
     
     $(OBJDIR)/%.o : %.c
             $(COMPILE.c) $(OUTPUT_OPTION) $&lt;
     
     all: $(OBJS)
     
     $(OBJS): | $(OBJDIR)
     
     $(OBJDIR):
             mkdir $(OBJDIR)
</FONT></PRE>
<P><FONT class=extract>Now the rule to create the <SAMP><SPAN class=file>objdir</SPAN></SAMP> directory will be run, if needed, before any &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; is built, but no &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; will be built because the <SAMP><SPAN class=file>objdir</SPAN></SAMP> directory timestamp changed.</FONT>