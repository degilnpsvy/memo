<H4 class=subsection>4.4.2 Pitfalls of Using Wildcards</H4>
<P><A name=index-wildcard-pitfalls-163></A><A name=index-pitfalls-of-wildcards-164></A><A name=index-mistakes-with-wildcards-165></A><A name=index-errors-with-wildcards-166></A><A name=index-problems-with-wildcards-167></A>Now here is an example of a naive way of using wildcard expansion, that does not do what you would intend. Suppose you would like to say that the executable file <SAMP><SPAN class=file>foo</SPAN></SAMP> is made from all the object files in the directory, and you write this: <PRE class=example>     objects = *.o
     
     foo : $(objects)
             cc -o foo $(CFLAGS) $(objects)
</PRE>
<P class=noindent>The value of <CODE>objects</CODE> is the actual string &#8216;<SAMP><SPAN class=samp>*.o</SPAN></SAMP>&#8217;. Wildcard expansion happens in the rule for <SAMP><SPAN class=file>foo</SPAN></SAMP>, so that each <EM>existing</EM> &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file becomes a prerequisite of <SAMP><SPAN class=file>foo</SPAN></SAMP> and will be recompiled if necessary. 
<P><FONT class=extract>But what if you delete all the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files? When a wildcard matches no files, it is left as it is, so then <SAMP><SPAN class=file>foo</SPAN></SAMP> will depend on the oddly-named file <SAMP><SPAN class=file>*.o</SPAN></SAMP>. Since no such file is likely to exist, <CODE>make</CODE> will give you an error saying it cannot figure out how to make <SAMP><SPAN class=file>*.o</SPAN></SAMP>. This is not what you want!</FONT> 
<P>Actually it is possible to obtain the desired result with wildcard expansion, but you need more sophisticated techniques, including the <CODE>wildcard</CODE> function and string substitution. See <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">The Function <CODE>wildcard</CODE></A>. 
<P><A name=index-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes-168></A><A name=index-backslashes-in-pathnames-and-wildcard-expansion-169></A>Microsoft operating systems (MS-DOS and MS-Windows) use backslashes to separate directories in pathnames, like so: <PRE class=example>       c:\foo\bar\baz.c
</PRE>
<P>This is equivalent to the Unix-style <SAMP><SPAN class=file>c:/foo/bar/baz.c</SPAN></SAMP> (the <SAMP><SPAN class=file>c:</SPAN></SAMP> part is the so-called drive letter). When <CODE>make</CODE> runs on these systems, it supports backslashes as well as the Unix-style forward slashes in pathnames. However, this support does <EM>not</EM> include the wildcard expansion, where backslash is a quote character. Therefore, you <EM>must</EM> use Unix-style slashes in these cases.