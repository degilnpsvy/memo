<H4 class=subsection>4.4.3 The Function <CODE>wildcard</CODE></H4>
<P><A name=index-wildcard-170></A>Wildcard expansion happens automatically in rules. <FONT class=extract>But wildcard expansion does not normally take place when a variable is set, or inside the arguments of a function.</FONT> If you want to do wildcard expansion in such places, you need to use the <FONT class=extract><CODE>wildcard</CODE> function, like this: </FONT><PRE class=example><FONT class=extract><FONT class=extract>     $(wildcard <VAR>pattern</VAR>...)</FONT>
</FONT></PRE>
<P class=noindent><FONT class=extract>This string, used anywhere in a makefile, is replaced by a space-separated list of names of existing files that match one of the given file name patterns. If no existing file name matches a pattern, then that pattern is omitted from the output of the <CODE>wildcard</CODE> function. Note that this is different from how unmatched wildcards behave in rules, where they are used verbatim rather than ignored (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfall"><FONT class=extract>Wildcard Pitfall</FONT></A><FONT class=extract>).</FONT> 
<P>One use of the <CODE>wildcard</CODE> function is to get a list of all the C source files in a directory, like this: <PRE class=example>     $(wildcard *.c)
</PRE>
<P>We can change the list of C source files into a list of object files by replacing the &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; suffix with &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; in the result, like this: <PRE class=example>     $(patsubst %.c,%.o,$(wildcard *.c))
</PRE>
<P class=noindent>(Here we have used another function, <CODE>patsubst</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>.) 
<P><FONT class=extract>Thus, a makefile to compile all C source files in the directory and then link them together could be written as follows: </FONT><PRE class=example><FONT class=extract>     objects := $(patsubst %.c,%.o,$(wildcard *.c))
     
     foo : $(objects)
             cc -o foo $(objects)
</FONT></PRE>
<P class=noindent>(This takes advantage of the implicit rule for compiling C programs, so there is no need to write explicit rules for compiling the files. See <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">The Two Flavors of Variables</A>, for an explanation of &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217;, which is a variant of &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;.)