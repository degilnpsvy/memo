<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">9.1.2.4 Rules </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) Each constructor shall call the constructor of the corresponding base class passing through the <B>char* </B>argument, if there is one. In the case of the default constructors, the <B>char* </B>argument of the base class constructor shall be set to sc_gen_unique_name ( "simple_initiator_socket" ), sc_gen_unique_name ( "simple_target_socket" ), or sc_gen_unique_name ( "passthrough_target_socket" ) respectively. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) A <B>simple_initiator_socket </B>can be bound to a <B>simple_target_socket </B>or a <B>passthrough_target_socket </B>by calling the <B>bind </B>method or <B>operator() </B>of either socket, with precisely the same effect. In either case, the forward path lies in the direction from the initiator socket to the target socket. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 17pt; COLOR: black; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) A <B>simple_initiator_socket </B>can be bound to a <B>tlm_target_socket</B>, and a <B>tlm_initiator_socket </B>can be bound to a <B>simple_target_socket </B>or to a <B>passthrough_target_socket</B>. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) A <B>simple_initiator_socket</B>, <B>simple_target_socket </B>or <B>passthrough_target_socket </B>can only implement incoming interface method calls by registering callbacks, not by being bound hierarchically to another socket on a child module. On the other hand, a <B>simple_initiator_socket </B>of a child module can be bound hierarchically to a <B>tlm_initiator_socket </B>of a parent module, and a <B>tlm_target_socket </B>of a parent module can be bound hierarchically to a <B>simple_target_socket </B>or <B>passthrough_target_socket </B>of a child module. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) A target is not obliged to register a <B>b_transport </B>callback with a simple target socket provided it has registered an <B>nb_transport_fw </B>callback, in which case an incoming <B>b_transport </B>call will automatically cause the target to call the method registered for <B>nb_transport_fw</B>. In this case, the method registered for <B>nb_transport_fw </B>shall implement with the rules of the base protocol. See 9.1.2.5 Simple target socket b/nb conversion </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) A target is not obliged to register an <B>nb_transport_fw </B>callback with a simple target socket provided it has registered a <B>b_transport </B>callback, in which case an incoming <B>nb_transport_fw </B>call will automatically cause the target to call the method registered for <B>b_transport </B>and subsequently to call <B>nb_transport_bw </B>on the backward path. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) If a target does not register either a <B>b_transport </B>or an <B>nb_transport_fw </B>callback with a simple target socket, this will result in a run-time error if and only if the corresponding method is called </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) A target should register <B>b_transport </B>and <B>nb_transport_fw </B>callbacks with a passthrough target socket. Not doing so will result in a run-time error if and only if the corresponding method is called. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) A target is not obliged to register a <B>transport_dbg </B>callback with a simple target socket or a passthrough target socket, in which case an incoming <B>transport_dbg </B>call shall return with a value of 0. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) A target is not obliged to register a <B>get_direct_mem_ptr </B>callback with a simple target socket or a passthrough target socket, in which case an incoming <B>get_direct_mem_ptr </B>call shall return with a value of false. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) An initiator should register an <B>nb_transport_bw </B>callback with a simple initiator socket. Not doing so will result in a run-time error if and only if the <B>nb_transport_bw </B>method is called. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">l) An initiator is not obliged to register an <B>invalidate_direct_mem_ptr </B>callback with a simple initiator socket, in which case an incoming <B>invalidate_direct_mem_ptr </B>call shall be ignored. </SPAN>