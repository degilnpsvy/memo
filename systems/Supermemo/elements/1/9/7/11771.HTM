<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 11.0pt; mso-font-kerning: 0pt">10.4 Analysis interface and analysis ports </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 11.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">Analysis ports are intended to support the distribution of transactions to multiple components for analysis, meaning tasks such as checking for functional correctness or collecting functional coverage statistics. The key feature of analysis ports is that a single port can be bound to multiple channels or <I>subscribers </I>such that the port itself replicates each call to the interface method <B>write </B>with each subscriber. An analysis port can be bound to zero or more subscribers or other analysis ports, and can be unbound. Each subscriber implements the <B>write </B>method of the <B>tlm_analysis_if</B>. The method is passed a <B>const </B>reference to a transaction, which a subscriber may process immediately. Otherwise, if the subscriber wishes to extend the lifetime of the transaction, it is obliged to take a deep copy of the transaction object, at which point the subscriber effectively becomes the initiator of a new transaction and is thus responsible for the memory management of the copy. </SPAN></P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: 'Times New Roman'; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: &#23435;&#20307;; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA">Analysis ports should not be used in the main operational pathways of a model, but only where data is tapped off and passed to the side for analysis. Interface <B>tlm_analysis_if </B>is derived from <B>tlm_write_if</B>. The latter interface is not specific to analysis, and may be used for other purposes. For example, see 9.3 Payload event queue. The <B>tlm_analysis_fifo </B>is simply an infinite <B>tlm_fifo </B>that implements the <B>tlm_analysis_if </B>to write a transaction to the fifo. The <B>tlm_fifo </B>also supports the <B>tlm_analysis_triple</B>, which consists of a transaction together with explicit start and end times.</SPAN>