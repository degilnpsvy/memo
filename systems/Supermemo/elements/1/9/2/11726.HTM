<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">8.2.13.5 Guidelines for creating a base protocol interconnect component </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) Instantiate one initiator or target socket of class <B>tlm_initiator_socket </B>or <B>tlm_target_socket </B>(or derived classes) for each connection to a memory-mapped bus. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) Allow each socket to take the default value <B>tlm_base_protocol_types </B>for the template TYPES argument. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) Implement the methods <B>nb_transport_bw </B>and <B>invalidate_direct_mem_ptr </B>for each initiator socket, and the methods <B>b_transport</B>, <B>nb_transport_fw</B>, <B>get_direct_mem_ptr</B>, and <B>transport_dbg </B>for each target socket. (The need to implement every method explicitly can be avoided by using the convenience sockets.) </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) Pass on incoming interface method calls as appropriate on both the forward and backward paths, honoring the request and response exclusion rules, the transaction ordering rules, and the rule that no further calls are allowed following TLM_COMPLETED. Do not pass on ignorable phases. The implementations of the <B>get_direct_mem_ptr </B>and <B>transport_dbg </B>methods may return the values <B>false </B>and 0 respectively without forwarding the transaction object. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) In the implementation of the transport interfaces, the only generic payload attributes modifiable by an interconnect component are the address, DMI hint, and extensions. Do not modify any other attributes. A component needing to modify any other attributes should construct a new transaction object, and thereby become an initiator in its own right. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) Decode the generic payload address attribute on the forward path and modify the address attribute if necessary according to the location of the target in the system memory map. This applies to the transport, direct memory, and debug transport interfaces. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) In the implementation of the transport interfaces, obey the base protocol rules concerning phase sequencing, flow control, timing annotation, and transaction ordering. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) In the implementation of <B>get_direct_mem_ptr</B>, do not modify the DMI descriptor attributes on the forward path. Do modify the DMI pointer, DMI start address and end address, and DMI access attributes appropriately on the return path. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) In the implementation of <B>invalidate_direct_mem_ptr</B>, modify the address range arguments before passing the call along the backward path. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) In the implementation of <B>nb_transport_fw</B>, when needing to keep a pointer or reference to a transaction object beyond the return from the function, call the <B>acquire </B>method of the transaction. Call the <B>release </B>method when the transaction object is finished with. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) For each interface, the interconnect component may inspect and act upon any ignorable extensions in the generic payload, but is not obliged to do so. If the transaction needs to be extended further, make sure any extensions are ignorable by the other components. Honor the generic payload memory management rules for extensions. </SPAN>