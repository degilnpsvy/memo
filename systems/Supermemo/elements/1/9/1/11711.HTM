<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">8.2.6 Base protocol timing parameters and flow control </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) With four phases, it is possible to model the request accept delay (or minimum initiation interval between sending successive transactions), the latency of the target, and the response accept delay. This kind of timing granularity is appropriate for the approximately-timed coding style. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 572.25pt; HEIGHT: 387.75pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 17pt; COLOR: black; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) For a write command, the BEGIN_REQ phase marks the time when the data becomes available for transfer from initiator through interconnect component to target. Notionally, the transition to the BEGIN_REQ phase corresponds to the start of the first beat of the data transfer. It is the responsibility of the downstream component to calculate the transfer time, and to send END_REQ back upstream when it is ready to receive the next transfer. It would be natural for the downstream component to delay the END_REQ until the end of the final beat of the data transfer, but it is not obliged to do so. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><FONT face=Arial><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt">c) For a read command, the BEGIN_RESP phase marks the time when the data becomes available for transfer from target through interconnect component to initiator. Notionally, the transition to the BEGIN_RESP phase corresponds to the start of the first beat of the data transfer. It is the responsibility of the upstream component to calculate the transfer time, and to send END_RESP back downstream </SPAN><SPAN lang=EN-US style="FONT-SIZE: 17pt; FONT-FAMILY: 'Times New Roman'; mso-bidi-font-size: 12.0pt"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">when it is ready to receive the next transfer. It would be natural for the upstream component to delay the END_RESP until the end of the final beat of the data transfer, but it is not obliged to do so. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) For a read command, if a downstream component completes a transaction early by returning TLM_COMPLETED from <B>nb_transport_fw</B>, it is the responsibility of the upstream component to account for the data transfer time in some other way, if it wishes to do so (since it is not permitted to send END_RESP). </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) For the base protocol, an initiator or interconnect component shall not send a new transaction through a given socket with phase BEGIN_REQ until it has received END_REQ or BEGIN_RESP from the downstream component for the immediately preceding transaction or until the downstream component has completed the previous transaction by returning the value TLM_COMPLETED from <B>nb_transport_fw</B>. This is known as the <I>request exclusion rule</I>. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) For the base protocol, a target or interconnect component shall not respond to a new transaction through a given socket with phase BEGIN_RESP until it has received END_RESP from the upstream component for the immediately preceding transaction or until a component has completed the previous transaction over that hop by returning TLM_COMPLETED. This is known as the <I>response exclusion rule</I>. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) All the rules governing phase transitions, including the request and response exclusion rules, shall be based on method call order alone, and shall not be affected by the value of the time argument (the timing annotation). </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) Successive transactions sent through a given socket using the non-blocking transport interface can be pipelined. By responding to each BEGIN_REQ (or BEGIN_RESP) with an END_REQ (or END_RESP), an interconnect component can permit any number of transaction objects to be <I>in flight </I>at the same time. By not responding immediately with END_REQ (or END_RESP), an interconnect component can exercise flow control over the stream of transaction objects coming from an initiator (or target). </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) This rule excluding the possibility of two outstanding requests or responses through a given socket shall only apply to the non-blocking transport interface, and shall have no direct effect on calls to <B>b_transport</B>. (The rule may have an indirect effect on a call to <B>b_transport </B>in the case that <B>b_transport </B>itself calls <B>nb_transport_fw</B>.) </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) For a given transaction, BEGIN_REQ shall always start from an initiator and be propagated through zero or more interconnect components until it is received by a target. For a given transaction, an interconnect component is not permitted to send BEGIN_REQ to a downstream component before having received BEGIN_REQ from an upstream component. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) For a given transaction, BEGIN_RESP shall always start from a target and be propagated through zero or more interconnect components until it is received by an initiator. For a given transaction, an interconnect component is not permitted to send BEGIN_RESP to an upstream component before having received BEGIN_RESP from a downstream component. This applies whether BEGIN_RESP is explicit or is implied by TLM_COMPLETED. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">l) For a given transaction, an interconnect component may send END_REQ to an upstream component before having received END_REQ from a downstream component. Similarly, an interconnect component may send END_RESP to a downstream component before having received END_RESP from an upstream component. This applies whether END_REQ and END_RESP are explicit or implicit. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">m) END_REQ and END_RESP are primarily for flow control between adjacent components. These two phases do not signal the validity of any standard generic payload attributes. Because these two phases are not propagated causally from end-to-end, they cannot reliably be used to signal the validity of extensions from initiator-to-target or target-to-initiator, but they can be used to signal the validity of extensions between two adjacent components. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">n) Whether or not an interconnect component is permitted to send an extended phase before having received the corresponding phase depends on the rules associated with the extended phase in question. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"><v:shape id=_x0000_i1026 style="WIDTH: 587.25pt; HEIGHT: 415.5pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image003.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"><v:shape id=_x0000_i1027 style="WIDTH: 587.25pt; HEIGHT: 414pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image005.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt">Example </SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt">The following pseudo-code illustrates the interaction between timing annotation and the request and response exclusion rules:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">1void</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"> <SPAN style="COLOR: #6060ff">initiator_1_thread_process</SPAN>()</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">{</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator sends a request to be executed at +1000ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(1000, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T1, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(1010, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// END_REQ is returned immediately to be executed at +1010ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">10</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// Note that this is not a recommended coding style</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">11</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// With loosely-timed, the initiator would have called b_transport</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">12</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// With approximately-timed, the downstream component would have returned TLM_ACCEPTED</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">13</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// in order to synchronize, and the initiator would have been forced to wait for END_REQ</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">14</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">15</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator is allowed to send the next request immediately, to be executed at +1050ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">16</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">17</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(1050, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">18</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T2, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">19</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">20</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(1060, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">21</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">22</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator is technically allowed to send the next request at an earlier local time of +500ns,</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">23</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// although the decreased timing annotation is not a recommended coding style</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">24</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">25</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(500, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">26</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T3, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">27</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">28</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(510, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">29</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator now yields control, allowing other initiators to resume and simulation time to advance</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">30</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(...);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">31</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">32void</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"> <SPAN style="COLOR: #6060ff">initiator_2_thread_process</SPAN>()</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">33</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">{</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">34</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// Assume the calls below are appended to the transaction stream sent from the first initiator above</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">35</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The second initiator sends a request to be executed at +10ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">36</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The timing annotation as seen downstream has decreased from +510ns to +10ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">37</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// This is typical behavior for loosely-timed initiators</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">38</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">39</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(10, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">40</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T4, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">41</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">42</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(30, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">43</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// END_REQ is returned immediately to be executed at +30ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">44</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator sends the next request to be executed at +20ns, which overlaps with the previous request</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">45</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// This is technically allowed because the current phase of the hop is END_REQ, but is not recommended</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">46</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">47</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(20, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">48</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T5, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">49</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">50</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(40, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">51</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// END_REQ is returned immediately to be executed at +40ns</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">52</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">53</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// The initiator sends the next request to be executed at +0ns, which is before the previous two requests</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">54</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// This is technically allowed because the current phase of the hop is END_REQ, but is not recommended</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">55</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>phase = BEGIN_REQ;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">56</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>delay = sc_time(0, SC_NS);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">57</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>status = socket-&gt;nb_transport_fw(T6, phase, delay);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">58</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>assert(status == TLM_UPDATED &amp;&amp; phase == END_REQ</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">59</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&amp;&amp; delay == sc_time(60, SC_NS));</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">60</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// END_REQ is returned immediately to be executed at +60ns, overlapping the two previous requests</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">61</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><SPAN style="COLOR: #bf0000">// This is technically allowed, but is not recommended</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">62</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(...);</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; COLOR: #00bf00; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">63</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Lucida Console'; mso-bidi-font-size: 9.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: 'Lucida Console'">}</SPAN></P></BODY>