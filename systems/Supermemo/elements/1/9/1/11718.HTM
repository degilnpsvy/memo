<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">8.2.10 Base protocol rules for switching between b_transport and nb_transport </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) Each thread within an initiator or an interconnect component is permitted to switch between calling <B>b_transport </B>and <B>nb_transport_fw </B>for different transaction objects. The intent is to permit an initiator to make occasional switches between the loosely-timed and approximately-timed coding styles. An initiator that interleaves calls to <B>b_transport </B>and <B>nb_transport_fw </B>should have low expectations with regard to timing accuracy. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) Every interconnect component and target is obliged to support both the blocking and non-blocking transport interfaces, and to maintain any internal state information such that it is accessible from both interfaces. This applies to incoming interface method calls received through the same socket or through different sockets. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) A thread within an initiator or an interconnect component shall not call both <B>b_transport </B>and <B>nb_transport_fw </B>for the same transaction instance. Note that a thread may call both <B>b_transport </B>and <B>nb_transport_fw </B>for the same transaction object provided that object represents a different transaction instance on each occasion. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) It is recommended that a thread within an initiator or interconnect component should not call <B>b_transport </B>if there is still a transaction in progress from a previous <B>nb_transport_fw </B>call from that same thread, that is, when there is a previous transaction with a non-zero reference count. Otherwise, a downstream component could wrongly deduce that the two transactions had come from separate initiators. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) The convenience socket <B>simple_target_socket </B>provides an example of how a base protocol target can support both the blocking and the non-blocking transport interfaces while only being required to implement one of <B>b_transport </B>and <B>nb_transport_fw</B>. See 9.1.2 Simple sockets. </SPAN>