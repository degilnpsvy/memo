<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">8.2.9 Base protocol rules concerning request and response ordering </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">The intent of the following rules is to ensure that when an initiator sends a series of pipelined requests to a particular target, those requests will be executed at the target in the same order as they were sent from the initiator. Because the generic payload transaction stores neither the identity of the initiator nor the identity of the target, the initiator can only be inferred from the identity of the incoming socket, and the target can only be inferred from the values of the address and command attributes. The execution order of requests sent to non-overlapping addresses is not guaranteed. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) The base protocol permits incoming requests or responses arriving through different sockets to be mutually delayed, interleaved, or executed in any order. For example, an interconnect component may assign a higher priority to requests arriving through a particular target socket or having a particular data length, allowing them to overtake lower priority requests. As another example, an interconnect component may re-order responses arriving back through different initiator sockets to match the order in which the corresponding requests were originally received. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) Request routing shall be deterministic and shall depend only on the address and command attributes of the transaction object. (These are the only attributes common to the transport, DMI and debug transport interfaces.) The address map shall not be modified while there are transactions in progress. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) If an initiator or interconnect component sends multiple concurrent requests with overlapping addresses on the forward path, those requests shall be routed through the same initiator socket. <I>Multiple concurrent requests </I>means requests for which the corresponding responses have not yet been received from the target. <I>Overlapping addresses </I>means that at least one byte in the data arrays of the transaction objects shares the same address. Read and write requests to the same address may be routed through different sockets provided they are not concurrent. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) If an interconnect component (or a target) receives multiple concurrent requests with overlapping addresses through the same target socket by means of incoming calls to <B>nb_transport_fw</B>, those requests shall be sent forward (or executed, respectively) in the same order as they were received. <I>The same order </I>means the same interface method call order. (Note that if the interface method call order and the effective local time order of a set of transactions were to differ, any component receiving those transactions would be permitted to execute them in any order, regardless of the address. Also note that this rule holds even if the requests in question originate from different initiators.) </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) Note that the preceding rule does not apply for incoming <B>b_transport </B>calls, for which there are no constraints on the order of multiple concurrent requests. On the other hand, if incoming <B>nb_transport_fw </B>calls are converted to outgoing <B>b_transport </B>calls, the <B>b_transport </B>calls must be serialized to enforce the ordering rules of the <I>nb_transport </I>calls. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) On the other hand, an interconnect component or target is permitted to re-order multiple concurrent requests that were received through different target sockets, or are sent through different initiator sockets, or whose addresses do not overlap, or for incoming <B>b_transport </B>calls. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) Responses may be re-ordered. There is no guarantee that responses will arrive back at an initiator in the same order as the corresponding requests were sent. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) Note that it would be technically possible with the base protocol to use an ignorable extension that allowed an interconnect component to re-order multiple concurrent requests, in which case the initiator that added the extension must be able to tolerate out-of-order execution at the target. On the other hand, an extension that forced responses to arrive back in the same order as requests were sent would not be an ignorable extension, and hence would not be permitted by the base protocol. </SPAN>