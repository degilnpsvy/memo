<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">9.3.4 Rules </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) The <B>notify </B>method shall insert a transaction into the PEQ. The transaction shall emerge from the PEQ at time <B>t1 + t2</B>, where <B>t1 </B>is the value returned from <B>sc_time_stamp() </B>at the time <B>notify </B>is called, and <B>t2 </B>is the value of the <B>sc_time </B>argument to <B>notify</B>. In the case of immediate notification, the transaction shall emerge in the current evaluation phase of the SystemC scheduler. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) Transactions may be queued in any order and emerge in the order given by the previous rule. Transactions do not necessarily emerge in the order in which they were inserted. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) There is no limit to the number of transactions that may be in the PEQ at any given time. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 17pt; COLOR: black; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) If several transactions are queued to emerge at the same time, they shall all emerge in the same evaluation phase (that is, the same delta cycle) in the order in which they were inserted. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) The <B>cancel_all </B>method shall immediately remove all queued transactions from the PEQ, effectively restoring the PEQ to the state it had immediately after construction. This is the only way to remove transactions from a PEQ. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) The <B>PAYLOAD </B>template argument to class <B>peq_with_get </B>shall be the name of the transaction type used by the PEQ. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) The <B>get_event </B>method shall return a reference to an event that is notified when the next transaction is ready to emerge from the PEQ. If more than one transaction is ready to emerge in the same evaluation phase (that is, in the same delta cycle), the event is notified once only. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) The <B>get_next_transaction </B>method shall return a pointer to a transaction object that is ready to emerge from the PEQ, and shall remove the transaction object from the PEQ. If a transaction is not retrieved from the PEQ in the evaluation phase in which the corresponding event notification occurs, it will still be available for retrieval on a subsequent call to <B>get_next_transaction </B>at the current time or at a later time. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) If there are no more transactions to be retrieved in the current evaluation phase, <B>get_next_transaction </B>shall return a null pointer. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) The <B>TYPES </B>template argument to class <B>peq_with_cb_and_phase </B>shall be the name of the protocol traits class containing the transaction and phase types used by the PEQ. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) The <B>OWNER </B>template argument to class <B>peq_with_cb_and_phase </B>shall be the type of the class of which the PEQ callback method is a member. This will usually be the parent module of the PEQ instance. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">l) The <B>OWNER* </B>argument to the constructor <B>peq_with_cb_and_phase </B>shall be a pointer to the object of which the PEQ callback method is a member. This will usually be the parent module of the PEQ instance. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">m) The <B>cb </B>argument to the constructor <B>peq_with_cb_and_phase </B>shall be the name of the PEQ callback method, which shall be a member function. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">n) The implementation of class <B>peq_with_cb_and_phase </B>shall call the PEQ callback method whenever a transaction object is ready to emerge from the PEQ. The first argument of the callback is a reference to the transaction object and the second argument a reference to the phase object, as passed to the corresponding <B>notify </B>method. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">o) The implementation shall call the PEQ callback method from a SystemC method process, so the callback method shall be non-blocking. </SPAN></P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: 'Times New Roman'; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: &#23435;&#20307;; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA">p) The implementation shall only call the PEQ callback method once for each transaction. After calling the PEQ callback method, the implementation shall remove the transaction object from the PEQ. The PEQ callback method may be called multiple times in the same evaluation phase.</SPAN>