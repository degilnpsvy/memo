<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=appendixsubsec>C.5.3 Other Design Decisions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an arbitrary design decision, extensions can read the values of built-in variables and arrays (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ARGV</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FS</CODE>), but cannot change them, with the exception of<CODE>PROCINFO</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The reason for this is to prevent an extension function from affecting the flow of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program outside its control. While a real<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function can do what it likes, that is at the discretion of the programmer. An extension function should provide a service or make a C API available for use within<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE>, and not mess with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ARGC</CODE>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ARGV</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, it becomes easy to start down a slippery slope. How much access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>facilities do extensions need? Do they need<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getline</CODE>? What about calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gsub()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or compiling regular expressions? What about calling into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions? (<EM>That</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be messy.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to avoid these issues, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>developers chose to start with the simplest, most basic features that are still truly useful.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another decision is that although<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides nice things like MPFR, and arrays indexed internally by integers, these features are not being brought out to the API in order to keep things simple and close to traditional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>semantics. (In fact, arrays indexed internally by integers are so transparent that they aren&#8217;t even documented!)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Additionally, all functions in the API check that their pointer input parameters are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. If they are, they return an error. (It is a good idea for extension code to verify that pointers received from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. Such a thing should not happen, but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>developers are only human, and they have been known to occasionally make mistakes.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With time, the API will undoubtedly evolve; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>developers expect this to be driven by user needs. For now, the current API seems to provide a minimal yet powerful set of features for creating extensions.