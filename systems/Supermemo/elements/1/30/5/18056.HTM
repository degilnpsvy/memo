<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=appendixsubsec>C.5.2 Goals For A New Mechanism</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some goals for the new API were:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The API should be independent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>internals. Changes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>internals should not be visible to the writer of an extension function.</LI>
<LI>The API should provide<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>binary</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>compatibility across<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>releases as long as the API itself does not change.</LI>
<LI>The API should enable extensions written in C or C++ to have roughly the same &#8220;appearance&#8221; to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE>-level code as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions do. This means that extensions should have:
<UL style="LIST-STYLE-TYPE: none" class=no-bullet>
<LI>- The ability to access function parameters.</LI>
<LI>- The ability to turn an undefined parameter into an array (call by reference).</LI>
<LI>- The ability to create, access and update global variables.</LI>
<LI>- Easy access to all the elements of an array at once (&#8220;array flattening&#8221;) in order to loop over all the element in an easy fashion for C code.</LI>
<LI>- The ability to create arrays (including<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s true multidimensional arrays).</LI></UL></LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some additional important goals were:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The API should use only features in ISO C 90, so that extensions can be written using the widest range of C and C++ compilers. The header should include the appropriate &#8216;<SAMP>#ifdef __cplusplus</SAMP>&#8217; and &#8216;<SAMP>extern "C"</SAMP>&#8217; magic so that a C++ compiler could be used. (If using C++, the runtime system has to be smart enough to call any constructors and destructors, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C program. As of this writing, this has not been tested.)</LI>
<LI>The API mechanism should not require access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbols<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT114" name=DOCF114><SUP>114</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the compile-time or dynamic linker, in order to enable creation of extensions that also work on Windows.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">During development, it became clear that there were other features that should be available to extensions, which were also subsequently provided:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Extensions should have the ability to hook into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s I/O redirection mechanism. In particular, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xgawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>developers provided a so-called &#8220;open hook&#8221; to take over reading records. During development, this was generalized to allow extensions to hook into input processing, output processing, and two-way I/O.</LI>
<LI>An extension should be able to provide a &#8220;call back&#8221; function to perform clean up actions when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exits.</LI>
<LI>An extension should be able to provide a version string so that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--version</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option can provide information about extensions as well.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The requirement to avoid access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbols is, at first glance, a difficult one to meet.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One design, apparently used by Perl and Ruby and maybe others, would be to make the mainline<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code into a library, with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utility a small C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function linked against the library.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This seemed like the tail wagging the dog, complicating build and installation and making a simple copy of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>executable from one system to another (or one place to another on the same system!) into a chancy operation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pat Rankin suggested the solution that was adopted. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Extension-Mechanism-Outline">Extension Mechanism Outline</A>, for the details.