<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=appendixsec>A.8 Regexp Ranges and Locales: A Long Sad Story</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes the confusing history of ranges within regular expressions and their interactions with locales, and how this affected different versions of<CODE>gawk</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The original Unix tools that worked with regular expressions defined character ranges (such as &#8216;<SAMP>[a-z]</SAMP>&#8217;) to match any character between the first character in the range and the last character in the range, inclusive. Ordering was based on the numeric value of each character in the machine&#8217;s native character set. Thus, on ASCII-based systems, &#8216;<SAMP>[a-z]</SAMP>&#8217; matched all the lowercase letters, and only the lowercase letters, since the numeric values for the letters from &#8216;<SAMP>a</SAMP>&#8217; through &#8216;<SAMP>z</SAMP>&#8217; were contiguous. (On an EBCDIC system, the range &#8216;<SAMP>[a-z]</SAMP>&#8217; includes additional, non-alphabetic characters as well.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Almost all introductory Unix literature explained range expressions as working in this fashion, and in particular, would teach that the &#8220;correct&#8221; way to match lowercase letters was with &#8216;<SAMP>[a-z]</SAMP>&#8217;, and that &#8216;<SAMP>[A-Z]</SAMP>&#8217; was the &#8220;correct&#8221; way to match uppercase letters. And indeed, this was true.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT106" name=DOCF106><SUP>106</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The 1992 POSIX standard introduced the idea of locales (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Locales">Locales</A>). Since many locales include other letters besides the plain twenty-six letters of the American English alphabet, the POSIX standard added character classes (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Bracket-Expressions">Bracket Expressions</A>) as a way to match different kinds of characters besides the traditional ones in the ASCII character set.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>changed</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the interpretation of range expressions. In the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"POSIX"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>locales, a range expression like &#8216;<SAMP>[a-dx-z]</SAMP>&#8217; is still equivalent to &#8216;<SAMP>[abcdxyz]</SAMP>&#8217;, as in ASCII. But outside those locales, the ordering was defined to be based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>collation order</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In many locales, &#8216;<SAMP>A</SAMP>&#8217; and &#8216;<SAMP>a</SAMP>&#8217; are both less than &#8216;<SAMP>B</SAMP>&#8217;. In other words, these locales sort characters in dictionary order, and &#8216;<SAMP>[a-dx-z]</SAMP>&#8217; is typically not equivalent to &#8216;<SAMP>[abcdxyz]</SAMP>&#8217;; instead it might be equivalent to &#8216;<SAMP>[ABCXYabcdxyz]</SAMP>&#8217;, for example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This point needs to be emphasized: Much literature teaches that you should use &#8216;<SAMP>[a-z]</SAMP>&#8217; to match a lowercase character. But on systems with non-ASCII locales, this also matched all of the uppercase characters except &#8216;<SAMP>A</SAMP>&#8217; or &#8216;<SAMP>Z</SAMP>&#8217;! This was a continuous cause of confusion, even well into the twenty-first century.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To demonstrate these issues, the following example uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sub()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, which does text replacement (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>). Here, the intent is to remove trailing uppercase characters:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">echo something1234abc | gawk-3.1.8 '{ sub("[A-Z]*$", ""); print }'</KBD>
-| something1234a
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This output is unexpected, since the &#8216;<SAMP>bc</SAMP>&#8217; at the end of &#8216;<SAMP>something1234abc</SAMP>&#8217; should not normally match &#8216;<SAMP>[A-Z]*</SAMP>&#8217;. This result is due to the locale setting (and thus you may not see it on your system).</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Unicode-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similar considerations apply to other ranges. For example, &#8216;<SAMP>["-/]</SAMP>&#8217; is perfectly valid in ASCII, but is not valid in many Unicode locales, such as &#8216;<SAMP>en_US.UTF-8</SAMP>&#8217;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Early versions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used regexp matching code that was not locale aware, so ranges had their traditional interpretation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switched to using locale-aware regexp matchers, the problems began; especially as both GNU/Linux and commercial Unix vendors started implementing non-ASCII locales,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>and making them the default</EM>. Perhaps the most frequently asked question became something like &#8220;why does &#8216;<SAMP>[A-Z]</SAMP>&#8217; match lowercase letters?!?&#8221;</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Berry_002c-Karl-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This situation existed for close to 10 years, if not more, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintainer grew weary of trying to explain that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was being nicely standards-compliant, and that the issue was in the user&#8217;s locale. During the development of version 4.0, he modified<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to always treat ranges in the original, pre-POSIX fashion, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--posix</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was used (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>).<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT107" name=DOCF107><SUP>107</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Fortunately, shortly before the final release of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>4.0, the maintainer learned that the 2008 standard had changed the definition of ranges, such that outside the<CODE>"C"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"POSIX"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>locales, the meaning of range expressions was<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>undefined</EM>.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT108" name=DOCF108><SUP>108</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By using this lovely technical term, the standard gives license to implementors to implement ranges in whatever way they choose. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintainer chose to apply the pre-POSIX meaning in all cases: the default regexp matching; with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--traditional</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--posix</SAMP>; in all cases,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>remains POSIX compliant.