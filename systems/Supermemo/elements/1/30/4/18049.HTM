<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=appendixsubsec>C.2.2 Adding New Features</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-adding_002c-features-to-gawk></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-features_002c-adding-to-gawk></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-gawk_002c-features_002c-adding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You are free to add any new features you like to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. However, if you want your changes to be incorporated into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>distribution, there are several steps that you need to take in order to make it possible to include your changes:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Before building the new feature into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself, consider writing it as an extension module (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Dynamic-Extensions">Dynamic Extensions</A>). If that&#8217;s not possible, continue with the rest of the steps in this list.</LI>
<LI>Be prepared to sign the appropriate paperwork. In order for the FSF to distribute your changes, you must either place those changes in the public domain and submit a signed statement to that effect, or assign the copyright in your changes to the FSF. Both of these actions are easy to do and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>many</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>people have done so already. If you have questions, please contact me (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Bugs">Bugs</A>), or &#8220;assign at gnu dot org&#8221;.</LI>
<LI>Get the latest version. It is much easier for me to integrate changes if they are relative to the most recent distributed version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. If your version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>is very old, I may not be able to integrate them at all. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getting">Getting</A>, for information on getting the latest version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.)</LI>
<LI>Follow the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/prep/standards/"><CITE>GNU Coding Standards</CITE></A>. This document describes how GNU software should be written. If you haven&#8217;t read it, please do so, preferably<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>before</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting to modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. (The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Coding Standards</CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are available from the GNU Project&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/prep/standards_toc.html">web site</A>. Texinfo, Info, and DVI versions are also available.)</LI>
<LI><A name=index-gawk_002c-coding-style-in></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>coding style. The C code for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>follows the instructions in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Coding Standards</CITE>, with minor exceptions. The code is formatted using the traditional &#8220;K&amp;R&#8221; style, particularly as regards to the placement of braces and the use of TABs. In brief, the coding rules for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are as follows:
<UL>
<LI>Use ANSI/ISO style (prototype) function headers when defining functions.</LI>
<LI>Put the name of the function at the beginning of its own line.</LI>
<LI>Put the return type of the function, even if it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>, on the line above the line with the name and arguments of the function.</LI>
<LI>Put spaces around parentheses used in control structures (<CODE>if</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return</CODE>).</LI>
<LI>Do not put spaces in front of parentheses used in function calls.</LI>
<LI>Put spaces around all C operators and after commas in function calls.</LI>
<LI>Do not use the comma operator to produce multiple side effects, except in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop initialization and increment parts, and in macro bodies.</LI>
<LI>Use real TABs for indenting, not spaces.</LI>
<LI>Use the &#8220;K&amp;R&#8221; brace layout style.</LI>
<LI>Use comparisons against<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'\0'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the conditions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements, as well as in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE>s of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements, instead of just the plain pointer or character value.</LI>
<LI>Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>true</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>false</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bool</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbolic constant for pointer values, and the character constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'\0'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where appropriate, instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>.</LI>
<LI>Provide one-line descriptive comments for each function.</LI>
<LI>Do not use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function for allocating memory off the stack. Its use causes more portability trouble than is worth the minor benefit of not having to free the storage. Instead, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free()</CODE>.</LI>
<LI>Do not use comparisons of the form &#8216;<SAMP>! strcmp(a, b)</SAMP>&#8217; or similar. As Henry Spencer once said, &#8220;<CODE>strcmp()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a boolean!&#8221; Instead, use &#8216;<SAMP>strcmp(a, b) == 0</SAMP>&#8217;.</LI>
<LI>If adding new bit flag values, use explicit hexadecimal constants (<CODE>0x001</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0x002</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0x004</CODE>, and son on) instead of shifting one left by successive amounts (&#8216;<SAMP>(1&lt;&lt;0)</SAMP>&#8217;, &#8216;<SAMP>(1&lt;&lt;1)</SAMP>&#8217;, and so on).</LI></UL>
<BLOCKQUOTE>
<P><B>NOTE:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>If I have to reformat your code to follow the coding style used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>, I may not bother to integrate your changes at all.</P></BLOCKQUOTE></LI>
<LI><A name=index-Texinfo-5></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Update the documentation. Along with your new code, please supply new sections and/or chapters for this Web page. If at all possible, please use real Texinfo, instead of just supplying unformatted ASCII text (although even that is better than no documentation at all). Conventions to be followed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GAWK: Effective AWK Programming</CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are provided after the &#8216;<SAMP>@bye</SAMP>&#8217; at the end of the Texinfo source file. If possible, please update the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>man</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>page as well.
<P>You will also have to sign paperwork for your documentation changes.</P></LI>
<LI><A name=index-git-utility-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Submit changes as unified diffs. Use &#8216;<SAMP>diff -u -r -N</SAMP>&#8217; to compare the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>source tree with your version. I recommend using the GNU version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>diff</CODE>, or best of all, &#8216;<SAMP>git diff</SAMP>&#8217; or &#8216;<SAMP>git format-patch</SAMP>&#8217;. Send the output produced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>diff</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to me when you submit your changes. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Bugs">Bugs</A>, for the electronic mail information.)
<P>Using this format makes it easy for me to apply your changes to the master version of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>source code (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>patch</CODE>). If I have to apply the changes manually, using a text editor, I may not do so, particularly if there are lots of changes.</P></LI>
<LI>Include an entry for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>ChangeLog</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file with your submission. This helps further minimize the amount of work I have to do, making it easier for me to accept patches.</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although this sounds like a lot of work, please remember that while you may write the new code, I have to maintain it and support it. If it isn&#8217;t possible for me to do that with a minimum of extra work, then I probably will not.