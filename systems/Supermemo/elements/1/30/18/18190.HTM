<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>6. GOALS</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>I think the ability to use a VGA/SVGA graphics resolution in one virtual&nbsp;console, and being able to switch to any other virtual console<BR>and back makes a fairly useful implementation of graphics modes in the Linux console.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>Programs that use&nbsp;<B>svgalib</B>&nbsp;must be setuid root. I don't know how desirable it is to have this changed; direct port access can hardly be done without. Root privileges can now be given up right after initialization. I noticed some unimplemented stuff in the kernel header files that may be useful, although doing all register I/O via the kernel would incur a significant context-switching overhead. An alternative might be to have a pseudo&nbsp;<I>/dev/vga</I>&nbsp;device that yields the required permissions when opened, the device being readable by programs in group vga.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>It is important that textmode is restored properly and reliably; it is fairly reliable at the moment, but fast console switching back and forth between two consoles running graphics can give problems. Wild virtual console switching also sometimes corrupts the contents of the textmode screen buffer (not the textmode registers or font). Also if a program crashes it may write into the area where the saved textmode registers are stored, causing textmode not be restored correctly. It would be a good idea to somehow store this information in a 'safe' area (say a kernel buffer). Note that the&nbsp;<B><A href="http://www.fifi.org/cgi-bin/man2html?vga_safety_fork+3"><FONT color=#0000ff>vga_safety_fork</FONT></A></B>(3) thing has the same idea.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>Currently, programs that are in graphics mode are suspended while not in the current virtual console. Would it be a good idea to let them run in the background, virtualizing framebuffer actions (this should not be too hard for linear banked SVGA modes)? It would be nice to have, say, a raytracer with a real-time display run in the background (although just using a separate real-time viewing program is much more elegant).</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>Anyone wanting to rewrite it all in a cleaner way (something with loadable kernel modules shouldn't hurt performance with linear framebuffer/vgagl type applications) is encouraged.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>Also, if anyone feels really strongly about a low-resource and truecolor supporting graphical window environment with cut-and-paste, I believe it would be surprisingly little work to come up with a simple but very useful client-server system with shmem, the most useful applications being fairly trivial to write (e.g. shell window,&nbsp;bitmap viewer).&nbsp;And many X apps would port trivially.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 17.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US><FONT face=Calibri>This is old information, please be sure to read&nbsp;<B><A href="http://www.fifi.org/cgi-bin/man2html?svgalib.faq+7"><FONT color=#0000ff>svgalib.faq</FONT></A></B>(7) if you are interested in further goals.</FONT></SPAN>