<H4 style="MARGIN: 12pt 0cm 6pt 43.2pt"><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><EM><FONT face=&#23435;&#20307;>1.3.3.5 # Functional and Architectural Verification </FONT></EM></SPAN></H4>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Traditional functional verification of hardware involves verifying the hardware to a functional specification. Unfortunately, as systems become more complex, the functional specs can be measured in feet (not inches) of paper. Obviously, any process requiring a natural language like English (or German, Chinese, French, etc.) is very susceptible to error (just check out the errata list for the first edition of this book). </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>We have added a new term (at least for us): architectural verification. The goal of this activity is to answer a few big questions:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>Does this system architecture meet the customer requirements? </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>Does this system architecture work for all customer use cases? </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>We have purposely used the term, system architecture, because this involves integrating at least the lowest level software and a hardware model. The authors have a background in computer system design and have previously lived by the maxim &#8220;it isn&#8217;t verified until the software runs.&#8221; Since almost all of today&#8217;s complex electronic systems have a significant component of &#8220;computer system,&#8221; we have reverted to this maxim from our &#8220;youth&#8221; by emphasizing architectural verification. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>Functional verification is also enhanced through the early availability of a target for testbench development and a &#8220;reference model&#8221; for newer functional verification methodologies such the Open Verification Methodology (OVM) and the methodology originally defined in the Verification Methodology Manual for SystemVerilog (VMM).</FONT> </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Verification teams are always complaining that they are not allowed to start until too late. Some of the reason for this trend is that management is reluctant to assign resources to project activities that will not show results or progress until much later in the project. The TLM modeling activity allows a target for early development. TLM has the added benefit of reuse of some portions of the &#8220;test</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;">-b</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">ench&#8221; for the system-level TLM model and for later functional verification with the RTL. </SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Many of the newer verification methodologies such as OVM and VMM make heavy use of constrained-random test stimulus generation. These methodologies require the development of a &#8220;reference model&#8221; to check the results of the &#8220;randomized inputs.&#8221; Given a well thought out methodology, the TLM model or a portion of the TLM model can be used by the functional testbench to check the RTL results. </FONT></SPAN>