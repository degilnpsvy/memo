<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The string at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character sequence composed of zero or more directives. Directives are composed of one or more whitespace characters, non-whitespace characters, and format specifications.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Whitespace characters are blank ( ), tab (<CODE>\t</CODE>), or newline (<CODE>\n</CODE>). When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>encounters a whitespace character in the format string it will read (but not store) all consecutive whitespace characters up to the next non-whitespace character in the input.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Non-whitespace characters are all other ASCII characters except the percent sign (<CODE>%</CODE>). When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>encounters a non-whitespace character in the format string it will read, but not store a matching non-whitespace character.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Format specifications tell<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to read and convert characters from the input field into specific types of values, and store then in the locations specified by the address arguments.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Trailing whitespace is left unread unless explicitly matched in the format string.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The format specifiers must begin with a percent sign (<CODE>%</CODE>) and have the following form:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            %[*][<VAR>width</VAR>][<VAR>size</VAR>]<VAR>type</VAR>
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Each format specification begins with the percent character (<CODE>%</CODE>). The other fields are:</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DT><CODE>*</CODE> 
<DD>an optional marker; if present, it suppresses interpretation and assignment of this input field.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><VAR>width</VAR> 
<DD>an optional maximum field width: a decimal integer, which controls the maximum number of characters that will be read before converting the current input field. If the input field has fewer than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reads all the characters in the field, and then proceeds with the next field and its format specification. 
<P>If a whitespace or a non-convertable character occurs before<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>character are read, the characters up to that character are read, converted, and stored. Then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>proceeds to the next format specification.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>size</CODE> 
<DD><CODE>h</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>t</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are optional size characters which override the default way that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interprets the data type of the corresponding argument.<PRE class=smallexample style="FONT-SIZE: smaller">          Modifier   Type(s)
             hh      d, i, o, u, x, n  convert input to char,
                                       store in char object
          
             h       d, i, o, u, x, n  convert input to short,
                                       store in short object
          
             h       D, I, O, U, X     no effect
                     e, f, c, s, p
          
             j       d, i, o, u, x, n  convert input to intmax_t,
                                       store in intmax_t object
          
             j       all others        no effect
          
             l       d, i, o, u, x, n  convert input to long,
                                       store in long object
          
             l       e, f, g           convert input to double
                                       store in a double object
          
             l       D, I, O, U, X     no effect
                     c, s, p
          
             ll      d, i, o, u, x, n  convert to long long,
                                       store in long long
          
             L       d, i, o, u, x, n  convert to long long,
                                       store in long long
          
             L       e, f, g, E, G     convert to long double,
                                       store in long double
          
             L       all others        no effect
          
             t       d, i, o, u, x, n  convert input to ptrdiff_t,
                                       store in ptrdiff_t object
          
             t       all others        no effect
          
             z       d, i, o, u, x, n  convert input to size_t,
                                       store in size_t object
          
             z       all others        no effect
          
</PRE><BR>
<DT><VAR>type</VAR> 
<DD>A character to specify what kind of conversion<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>performs. Here is a table of the conversion characters: 
<DL>
<DT><CODE>%</CODE> 
<DD>No conversion is done; the percent character (<CODE>%</CODE>) is stored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>c</CODE> 
<DD>Scans one character. Corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(char *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>s</CODE> 
<DD>Reads a character string into the array supplied. Corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(char arg[])</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>[</CODE><VAR>pattern</VAR><CODE>]</CODE> 
<DD>Reads a non-empty character string into memory starting at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>. This area must be large enough to accept the sequence and a terminating null character which will be added automatically. (<VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is discussed in the paragraph following this table). Corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(char *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>d</CODE> 
<DD>Reads a decimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>D</CODE> 
<DD>Reads a decimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(long *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>o</CODE> 
<DD>Reads an octal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>O</CODE> 
<DD>Reads an octal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(long *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>u</CODE> 
<DD>Reads an unsigned decimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(unsigned int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>U</CODE> 
<DD>Reads an unsigned decimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(unsigned long *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>x,X</CODE> 
<DD>Read a hexadecimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>e, f, g</CODE> 
<DD>Read a floating-point number into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(float *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>E, F, G</CODE> 
<DD>Read a floating-point number into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(double *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>i</CODE> 
<DD>Reads a decimal, octal or hexadecimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>I</CODE> 
<DD>Reads a decimal, octal or hexadecimal integer into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(long *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>n</CODE> 
<DD>Stores the number of characters read in the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(int *arg)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>p</CODE> 
<DD>Stores a scanned pointer. ANSI C leaves the details to each implementation; this implementation treats<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exactly the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%U</CODE>. Corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>:<CODE>(void **arg)</CODE>.</DD></DL>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of characters surrounded by square brackets can be used instead of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type character.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a set of characters which define a search set of possible characters making up the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>input field. If the first character in the brackets is a caret (<CODE>^</CODE>), the search set is inverted to include all ASCII characters except those between the brackets. There is also a range facility which you can use as a shortcut.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%[0-9]<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE>matches all decimal digits. The hyphen must not be the first or last character in the set. The character prior to the hyphen must be lexically less than the character after it.</P>
<P>Here are some<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>examples:</P>
<DL>
<DT><CODE>%[abcd]</CODE> 
<DD>matches strings containing only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>%[^abcd]</CODE> 
<DD>matches strings containing any characters except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>%[A-DW-Z]</CODE> 
<DD>matches strings containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>D</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>W</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Y</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>%[z-a]</CODE> 
<DD>matches the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>z</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE></DD></DL>
<P>Floating point numbers (for field types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>) must correspond to the following general form:</P><PRE class=smallexample style="FONT-SIZE: smaller">          		[+/-] ddddd[.]ddd [E|e[+|-]ddd]
</PRE>
<P>where objects inclosed in square brackets are optional, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ddd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents decimal, octal, or hexadecimal digits.</P></DD></DL>