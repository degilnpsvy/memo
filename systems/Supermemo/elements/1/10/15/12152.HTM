<B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">A trip through the Graphics Pipeline 2011, part&nbsp;12</SPAN></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">September 6, 2011</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">This post is part of the series&nbsp;<A href="http://www.daili987.com/weibo.com.php?u=uWbqt1PNYS2wXo0waqqb2SlkindZTHc4wKCFoG8Yfj822wOTd2lBJEwpvCwthIkBRQbLemoF5au3VYCTVF6wZE9aHNtePsb%2BmYFlpwVOTbU%2BnU5g&amp;b=3"><B>&#8220;A trip through the Graphics Pipeline 2011&#8243;</B></A>.</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Welcome back! This time, we&#8217;ll look into what is perhaps the &#8220;poster boy&#8221; feature introduced with the D3D11 / Shader 5.x hardware generation: Tessellation. This one is interesting both because it&#8217;s a fun topic, and because it marks the first time in a long while that a significant user-visible component has been added to the graphics pipeline that&#8217;s not programmable.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Unlike Geometry Shaders, which are conceptually quite easy (it&#8217;s just a shader that sees whole primitives as opposed to individual vertices), the topic of &#8220;Tessellation&#8221; requires some more explanation. There&#8217;s tons of ways to tessellate geometry &#8211; to name just the most popular ones, there&#8217;s Spline Patches in dozens of flavors, various types of Subdivision Surfaces, and Displacement Mapping &#8211; so from the bullet point &#8220;Tessellation&#8221; alone it&#8217;s not at all obvious what services the GPU provides us with, and how they are implemented.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">To describe how hardware tessellation works, it&#8217;s probably easiest to start in the middle &#8211; with the actual primitive tessellation step, and the various requirements that apply to it. I&#8217;ll get to the new shader types (Hull Shaders and Domain Shaders in D3D11 parlance, Tessellation Control Shader and Tessellation Evaluation Shader in OpenGL 4.0 lingo) later.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Tessellation &#8211; not quite like you&#8217;d expect</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Tessellation as implemented by Shader 5.x class HW is of the &#8220;patch-based&#8221; variety. Patch types in the CG literature are mostly named by what kind of function is used to construct the tessellated points from the control points (B-spline patches, B&#233;zier triangles, etc.). But we&#8217;ll ignore that part for now, since it&#8217;s handled in the new shader types. The actual fixed-function tessellation unit deals only with the&nbsp;<I>topology</I>&nbsp;of the output mesh (i.e. how many vertices there are and how they&#8217;re connected to each other); and it turns out that from this perspective, there&#8217;s basically only two different types of patches: quad-based patches, which are defined on a parameter domain with two orthogonal coordinate axes (which I&#8217;ll call u and v here, both are in [0,1]) and usually constructed as a tensor product of two one-parameter basis functions, and triangle-based patches, which use a redundant representation with three coordinates (u, v, w) based on barycentric coordinates (i.e.&nbsp;u, v, w &gt;= 0, u + v + w = 1). In D3D11 parlance, these are the &#8220;quad&#8221; and &#8220;tri&#8221; domains, respectively. There&#8217;s also an &#8220;isoline&#8221; domain which instead of a 2D surface produces one or multiple 1D curves; I&#8217;ll treat it the same way as I did lines and point primitives throughout this series: I acknowledge its existence but won&#8217;t go into further detail.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Tessellated primitives can be drawn naturally in their respective domain coordinate systems. For quads, the obvious choice of drawing the domain is as a unit square, so that&#8217;s what I&#8217;ll use; for triangles, I&#8217;ll use an equilateral triangle to visualize things. Here&#8217;s the coordinate systems I&#8217;ll be using in this post with both the vertices and edges labeled:</SPAN>