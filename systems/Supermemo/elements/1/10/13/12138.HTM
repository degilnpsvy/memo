<B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">A trip through the Graphics Pipeline 2011, part&nbsp;1</SPAN></B> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">July 1, 2011</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">This post is part of the series&nbsp;<A href="http://www.daili987.com/weibo.com.php?u=uWbqt1PNYS2wXo0waqqb2SlkindZTHc4wKCFoG8Yfj822wOTd2lBJEwpvCwthIkBRQbLemoF5au3VYCTVF6wZE9aHNtePsb%2BmYFlpwVOTbU%2BnU5g&amp;b=3"><B>&#8220;A trip through the Graphics Pipeline 2011&#8243;</B></A>.</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">It&#8217;s been awhile since I posted something here, and I figured I might use this spot to explain some general points about graphics hardware and software as of 2011; you can find functional descriptions of what the graphics stack in your PC does, but usually not the &#8220;how&#8221; or &#8220;why&#8221;; I&#8217;ll try to fill in the blanks without getting too specific about any particular piece of hardware. I&#8217;m going to be mostly talking about DX11-class hardware running D3D9/10/11 on Windows, because that happens to be the (PC) stack I&#8217;m most familiar with &#8211; not that the API details etc. will matter much past this first part; once we&#8217;re actually on the GPU it&#8217;s all native commands.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">The application</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">This is your code. These are also your bugs. Really. Yes, the API runtime and the driver have bugs, but this is not one of them. Now go fix it already.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">The API runtime</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">You make your resource creation / state setting / draw calls to the API. The API runtime keeps track of the current state your app has set, validates parameters and does other error and consistency checking, manages user-visible resources, may or may not validate shader code and shader linkage (or at least D3D does, in OpenGL this is handled at the driver level) maybe batches work some more, and then hands it all over to the graphics driver &#8211; more precisely, the user-mode driver.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The user-mode graphics driver (or UMD)</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><FONT class=extract>This is where most of the &#8220;magic&#8221; on the CPU side happens. If your app crashes because of some API call you did, it will usually be in here :).</FONT> <FONT class=extract>It&#8217;s called &#8220;nvd3dum.dll&#8221; (NVidia) or &#8220;atiumd*.dll&#8221; (AMD).</FONT> As the name suggests, this is user-mode code; it&#8217;s running in the same context and address space as your app (and the API runtime) and has no elevated privileges whatsoever. It implements a lower-level API (the DDI) that is called by D3D; this API is fairly similar to the one you&#8217;re seeing on the surface, but a bit more explicit about things like memory management and such.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This module is where things like shader compilation happen. D3D passes a pre-validated shader token stream to the UMD &#8211; i.e. it&#8217;s already checked that the code is valid in the sense of being syntactically correct and obeying D3D constraints (using the right types, not using more textures/samplers than available, not exceeding the number of available constant buffers, stuff like that). This is compiled from HLSL code and usually has quite a number of high-level optimizations (various loop optimizations, dead-code elimination, constant propagation, predicating ifs etc.) applied to it &#8211; this is good news since it means the driver benefits from all these relatively costly optimizations that have been performed at compile time. However, it also has a bunch of lower-level optimizations (such as register allocation and loop unrolling) applied that drivers would rather do themselves; long story short, this usually just gets immediately turned into a intermediate representation (IR) and then compiled some more; shader hardware is close enough to D3D bytecode that compilation doesn&#8217;t need to work wonders to give good results (and the HLSL compiler having done some of the high-yield and high-cost optimizations already definitely helps), but there&#8217;s still lots of low-level details (such as HW resource limits and scheduling constraints) that D3D neither knows nor cares about, so this is not a trivial process.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>And of course, if your app is a well-known game, programmers at NV/AMD have probably looked at your shaders and wrote hand-optimized replacements for their hardware &#8211; though they better produce the same results lest there be a scandal :). These shaders get detected and substituted by the UMD too. You&#8217;re welcome.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>More fun: Some of the API state may actually end up being compiled into the shader &#8211; to give an example, relatively exotic (or at least infrequently used) features such as texture borders are probably not implemented in the texture sampler, but emulated with extra code in the shader (or just not supported at all). This means that there&#8217;s sometimes multiple versions of the same shader floating around, for different combinations of API states.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Incidentally, this is also the reason why you&#8217;ll often see a delay the first time you use a new shader or resource; a lot of the creation/compilation work is deferred by the driver and only executed when it&#8217;s actually necessary (you wouldn&#8217;t believe how much unused crap some apps create!). Graphics programmers know the other side of the story &#8211; if you want to make sure something is actually created (as opposed to just having memory reserved), you need to issue a dummy draw call that uses it to &#8220;warm it up&#8221;. Ugly and annoying, but this has been the case since I first started using 3D hardware in 1999 &#8211; meaning, it&#8217;s pretty much a fact of life by this point, so get used to it. :)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Anyway, moving on. The UMD also gets to deal with fun stuff like all the D3D9 &#8220;legacy&#8221; shader versions and the fixed function pipeline &#8211; yes, all of that will get faithfully passed through by D3D. The 3.0 shader profile ain&#8217;t that bad (it&#8217;s quite reasonable in fact), but 2.0 is crufty and the various 1.x shader versions are seriously whack &#8211; remember 1.3 pixel shaders? Or, for that matter, the fixed-function vertex pipeline with vertex lighting and such? Yeah, support for all that&#8217;s still there in D3D and the guts of every modern graphics driver, though of course they just translate it to newer shader versions by now (and have been doing so for quite some time).</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Then there&#8217;s things like memory management. The UMD will get things like texture creation commands and need to provide space for them. Actually, the UMD just suballocates some larger memory blocks it gets from the KMD (kernel-mode driver); actually mapping and unmapping pages (and managing which part of video memory the UMD can see, and conversely which parts of system memory the GPU may access) is a kernel-mode privilege and can&#8217;t be done by the UMD.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>But the UMD can do things like&nbsp;</FONT><A href="http://www.daili987.com/weibo.com.php?u=uWbqt1PNYS2wXo0waqqb2SlkindZTHc4wKCFoG8Yfjk22g2TYiFNIlAr9HUxn4odTAnLb2wE5b%2ByXYqBUVStLhA%3D&amp;b=3"><B><FONT class=extract>swizzling textures</FONT></B></A><FONT class=extract>&nbsp;(unless the GPU can do this in hardware, usually using 2D blitting units not the real 3D pipeline) and schedule transfers between system memory and (mapped) video memory and the like. Most importantly, it can also write command buffers (or &#8220;DMA buffers&#8221; &#8211; I&#8217;ll be using these two names interchangeably) once the KMD has allocated them and handed them over. A command buffer contains, well, commands :). All your state-changing and drawing operations will be converted by the UMD into commands that the hardware understands. As will a lot of things you don&#8217;t trigger manually &#8211; such as uploading textures and shaders to video memory.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>In general, drivers will try to put as much of the actual processing into the UMD as possible; the UMD is user-mode code, so anything that runs in it doesn&#8217;t need any costly kernel-mode transitions, it can freely allocate memory, farm work out to multiple threads, and so on &#8211; it&#8217;s just a regular DLL (even though it&#8217;s loaded by the API, not directly by your app). This has advantages for driver development too &#8211; if the UMD crashes, the app crashes with it, but not the whole system; it can just be replaced while the system is running (it&#8217;s just a DLL!); it can be debugged with a regular debugger; and so on. So it&#8217;s not only efficient, it&#8217;s also convenient.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>But there&#8217;s a big elephant in the room that I haven&#8217;t mentioned yet.</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Did I say &#8220;user-mode driver&#8221;? I meant &#8220;user-mode drivers&#8221;.</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>As said, the UMD is just a DLL. Okay, one that happens to have the blessing of D3D and a direct pipe to the KMD, but it&#8217;s still a regular DLL, and in runs in the address space of its calling process.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>But we&#8217;re using multi-tasking OSes nowadays. In fact, we have been for some time.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This &#8220;GPU&#8221; thing I keep talking about? That&#8217;s a shared resource. There&#8217;s only one that drives your main display (even if you use SLI/Crossfire). Yet we have multiple apps that try to access it (and pretend they&#8217;re the only ones doing it). This doesn&#8217;t just work automatically; back in The Olden Days, the solution was to only give 3D to one app at a time, and while that app was active, all others wouldn&#8217;t have access. But that doesn&#8217;t really cut it if you&#8217;re trying to have your windowing system use the GPU for rendering. Which is why you need some component that arbitrates access to the GPU and allocates time-slices and such.</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Enter the scheduler.</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This is a system component &#8211; note the &#8220;the&#8221; is somewhat misleading; I&#8217;m talking about the graphics scheduler here, not the CPU or IO schedulers. This does exactly what you think it does &#8211; it arbitrates access to the 3D pipeline by time-slicing it between different apps that want to use it. A context switch incurs, at the very least, some state switching on the GPU (which generates extra commands for the command buffer) and possibly also swapping some resources in and out of video memory. And of course only one process gets to actually submit commands to the 3D pipe at any given time.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>You&#8217;ll often find console programmers complaining about the fairly high-level, hands-off nature of PC 3D APIs, and the performance cost this incurs. But the thing is that 3D APIs/drivers on PC really have a more complex problem to solve than console games &#8211; they really do need to keep track of the full current state for example, since someone may pull the metaphorical rug from under them at any moment! They also work around broken apps and try to fix performance problems behind their backs; this is a rather annoying practice that no-one&#8217;s happy with, certainly including the driver authors themselves, but the fact is that the business perspective wins here; people expect stuff that runs to continue running (and doing so smoothly). You just won&#8217;t win any friends by yelling &#8220;BUT IT&#8217;S WRONG!&#8221; at the app and then sulking and going through an ultra-slow path.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Anyway, on with the pipeline. Next stop: Kernel mode!</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The kernel-mode driver (KMD)</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This is the part that actually deals with the hardware. There may be multiple UMD instances running at any one time, but there&#8217;s only ever one KMD, and if that crashes, then boom you&#8217;re dead &#8211; used to be &#8220;blue screen&#8221; dead, but by now Windows actually knows how to kill a crashed driver and reload it (progress!). As long as it happens to be just a crash and not some kernel memory corruption at least &#8211; if that happens, all bets are off.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The KMD deals with all the things that are just there once. There&#8217;s only one GPU memory, even though there&#8217;s multiple apps fighting over it. Someone needs to call the shots and actually allocate (and map) physical memory. Similarly, someone must initialize the GPU at startup, set display modes (and get mode information from displays), manage the hardware mouse cursor (yes, there&#8217;s HW handling for this, and yes, you really only get one! :), program the HW watchdog timer so the GPU gets reset if it stays unresponsive for a certain time, respond to interrupts, and so on. This is what the KMD does.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>There&#8217;s also this whole content protection/DRM bit about setting up a protected/DRM&#8217;ed path between a video player and the GPU so no the actual precious decoded video pixels aren&#8217;t visible to any dirty user-mode code that might do awful forbidden things like dump them to disk (&#8230;whatever). The KMD has some involvement in that too.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Most importantly for us, the KMD manages the&nbsp;<I>actual</I>&nbsp;command buffer. You know, the one that the hardware actually consumes. The command buffers that the UMD produces aren&#8217;t the real deal &#8211; as a matter of fact, they&#8217;re just random slices of GPU-addressable memory. What actually happens with them is that the UMD finishes them, submits them to the scheduler, which then waits until that process is up and then passes the UMD command buffer on to the KMD. The KMD then writes a call to command buffer into the main command buffer, and depending on whether the GPU command processor can read from main memory or not, it may also need to DMA it to video memory first. The main command buffer is usually a (quite small)&nbsp;</FONT><A href="http://www.daili987.com/weibo.com.php?u=uWbqt1PNYS2wXo0waqqb2SlkindZTHc4wKCFoG4Yfzo22g6TZC1bMQg75D4jk5QHDw%2BIai8RvamwUYPU&amp;b=3"><B><FONT class=extract>ring buffer</FONT></B></A><FONT class=extract>&#8211; the only thing that ever gets written there is system/initialization commands and calls to the &#8220;real&#8221;, meaty 3D command buffers.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>But this is still just a buffer in memory right now. Its position is known to the graphics card &#8211; there&#8217;s usually a read pointer, which is where the GPU is in the main command buffer, and a write pointer, which is how far the KMD has written the buffer yet (or more precisely, how far it has&nbsp;<I>told</I>&nbsp;the GPU it has written yet). These are hardware registers, and they are memory-mapped &#8211; the KMD updates them periodically (usually whenever it submits a new chunk of work)&#8230;</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The bus</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>&#8230;but of course that write doesn&#8217;t go directly to the graphics card (at least unless it&#8217;s integrated on the CPU die!), since it needs to go through the bus first &#8211; usually PCI Express these days. DMA transfers etc. take the same route. This doesn&#8217;t take very long, but it&#8217;s yet another stage in our journey. Until finally&#8230;</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">The command processor!</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">This is the frontend of the GPU &#8211; the part that actually reads the commands the KMD writes. I&#8217;ll continue from here in the next installment, since this post is long enough already :)</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Small aside: OpenGL</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>OpenGL is fairly similar to what I just described, except there&#8217;s not as sharp a distinction between the API and UMD layer. And unlike D3D, the (GLSL) shader compilation is not handled by the API at all, it&#8217;s all done by the driver. An unfortunate side effect is that there are as many GLSL frontends as there are 3D hardware vendors, all of them basically implementing the same spec, but with their own bugs and idiosyncrasies. Not fun. And it also means that the drivers have to do all the optimizations themselves whenever they get to see the shaders &#8211; including expensive optimizations. The D3D bytecode format is really a cleaner solution for this problem &#8211; there&#8217;s only one compiler (so no slightly incompatible dialects between different vendors!) and it allows for some costlier data-flow analysis than you would normally do.</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">Omissions and simplifcations</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt">This is just an overview; there&#8217;s tons of subtleties that I glossed over. For example, there&#8217;s not just one scheduler, there&#8217;s multiple implementations (the driver can choose); there&#8217;s the whole issue of how synchronization between CPU and GPU is handled that I didn&#8217;t explain at all so far. And so on. And I might have forgotten something important &#8211; if so, please tell me and I&#8217;ll fix it! But now, bye and hopefully see you next time.</SPAN>