<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Error-Reporting.top_of_page></A>Error Reporting</SPAN></H2>
<P>Error Reporting &#8212; a system for reporting errors</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Error-Reporting.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_error_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-new">g_error_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_error_new_literal&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-new-literal">g_error_new_literal</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_error_new_valist&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-new-valist">g_error_new_valist</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_error_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-free">g_error_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_error_copy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-copy">g_error_copy</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_error_matches&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-matches">g_error_matches</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_set_error_literal&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error-literal">g_set_error_literal</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_propagate_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error">g_propagate_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_clear_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-clear-error">g_clear_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_prefix_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-prefix-error">g_prefix_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_propagate_prefixed_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-prefixed-error">g_propagate_prefixed_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Error-Reporting.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError">GError</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Error-Reporting.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Error-Reporting.description></A>
<H2>Description</H2>
<P>GLib provides a standard method of reporting errors from a called function to the calling code. (This is the same problem solved by exceptions in other languages.) It's important to understand that this method is both a data type (the <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> struct) and a set of rules. If you use <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> incorrectly, then your code will not properly interoperate with other code that uses <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, and users of your API will probably get confused.</P>
<P>First and foremost: <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> should only be used to report recoverable runtime errors, never to report programming errors. If the programmer has screwed up, then you should use <A class=link title=g_warning() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning"><CODE class=function>g_warning()</CODE></A>, <A class=link title=g_return_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function>g_return_if_fail()</CODE></A>, <A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert"><CODE class=function>g_assert()</CODE></A>, <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A>, or some similar facility. (Incidentally, remember that the <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A> function should only be used for programming errors, it should not be used to print any error reportable via <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>.)</P>
<P>Examples of recoverable runtime errors are "file not found" or "failed to parse input." Examples of programming errors are "NULL passed to <CODE class=function>strcmp()</CODE>" or "attempted to free the same pointer twice." These two kinds of errors are fundamentally different: runtime errors should be handled or reported to the user, programming errors should be eliminated by fixing the bug in the program. This is why most functions in GLib and GTK+ do not use the <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> facility.</P>
<P>Functions that can fail take a return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> as their last argument. For example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gboolean <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents">g_file_get_contents</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const</SPAN> gchar  <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN>
                              gchar       <SPAN class="gtkdoc opt">**</SPAN>contents<SPAN class="gtkdoc opt">,</SPAN>
                              gsize        <SPAN class="gtkdoc opt">*</SPAN>length<SPAN class="gtkdoc opt">,</SPAN>
                              GError      <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>If you pass a non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> value for the <CODE class=literal>error</CODE> argument, it should point to a location where an error can be placed. For example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gchar <SPAN class="gtkdoc opt">*</SPAN>contents<SPAN class="gtkdoc opt">;</SPAN>
GError <SPAN class="gtkdoc opt">*</SPAN>err <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents">g_file_get_contents</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"foo.txt"</SPAN><SPAN class="gtkdoc opt">, &amp;</SPAN>contents<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">, &amp;</SPAN>err<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A></SPAN> <SPAN class="gtkdoc opt">((</SPAN>contents <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">&amp;&amp;</SPAN> err <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">) || (</SPAN>contents <SPAN class="gtkdoc opt">!=</SPAN> NULL <SPAN class="gtkdoc opt">&amp;&amp;</SPAN> err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">));</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
  <SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class="gtkdoc slc">// Report error to user, and free error</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>contents <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
    <SPAN class=function>fprintf</SPAN> <SPAN class="gtkdoc opt">(</SPAN>stderr<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"Unable to read file: %s</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN> err<SPAN class="gtkdoc opt">-&gt;</SPAN>message<SPAN class="gtkdoc opt">);</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-free">g_error_free</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class=keyword>else</SPAN>
  <SPAN class="gtkdoc opt">{</SPAN>
    <SPAN class="gtkdoc slc">// Use file contents</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>contents <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>Note that <CODE class=literal>err != NULL</CODE> in this example is a reliable indicator of whether <A class=link title=g_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents"><CODE class=function>g_file_get_contents()</CODE></A> failed. Additionally, <A class=link title=g_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents"><CODE class=function>g_file_get_contents()</CODE></A> returns a boolean which indicates whether it was successful.</P>
<P>Because <A class=link title=g_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents"><CODE class=function>g_file_get_contents()</CODE></A> returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> on failure, if you are only interested in whether it failed and don't need to display an error message, you can pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for the <EM class=parameter><CODE>error</CODE></EM> argument:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents">g_file_get_contents</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"foo.txt"</SPAN><SPAN class="gtkdoc opt">, &amp;</SPAN>contents<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">))</SPAN> <SPAN class="gtkdoc slc">// ignore errors</SPAN>
  <SPAN class="gtkdoc slc">// no error occurred </SPAN>
  <SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>else</SPAN>
  <SPAN class="gtkdoc slc">// error</SPAN>
  <SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>The <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> object contains three fields: <EM class=parameter><CODE>domain</CODE></EM> indicates the module the error-reporting function is located in, <EM class=parameter><CODE>code</CODE></EM> indicates the specific error that occurred, and <EM class=parameter><CODE>message</CODE></EM> is a user-readable error message with as many details as possible. Several functions are provided to deal with an error received from a called function: <A class=link title=g_error_matches&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-matches"><CODE class=function>g_error_matches()</CODE></A> returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the error matches a given domain and code, <A class=link title=g_propagate_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error"><CODE class=function>g_propagate_error()</CODE></A> copies an error into an error location (so the calling function will receive it), and <A class=link title=g_clear_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-clear-error"><CODE class=function>g_clear_error()</CODE></A> clears an error location by freeing the error and resetting the location to <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. To display an error to the user, simply display the <EM class=parameter><CODE>message</CODE></EM> , perhaps along with additional context known only to the calling function (the file being opened, or whatever - though in the <A class=link title=g_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents"><CODE class=function>g_file_get_contents()</CODE></A> case, the <EM class=parameter><CODE>message</CODE></EM> already contains a filename).</P>
<P>When implementing a function that can report errors, the basic tool is <A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error"><CODE class=function>g_set_error()</CODE></A>. Typically, if a fatal error occurs you want to <A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error"><CODE class=function>g_set_error()</CODE></A>, then return immediately. <A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error"><CODE class=function>g_set_error()</CODE></A> does nothing if the error location passed to it is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. Here's an example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gint
<SPAN class=function>foo_open_file</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GError <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  gint fd<SPAN class="gtkdoc opt">;</SPAN>

  fd <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>open</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"file.txt"</SPAN><SPAN class="gtkdoc opt">,</SPAN> O_RDONLY<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>fd <SPAN class="gtkdoc opt">&lt;</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN>
                   FOO_ERROR<SPAN class="gtkdoc opt">,</SPAN>                 <SPAN class="gtkdoc slc">// error domain</SPAN>
                   FOO_ERROR_BLAH<SPAN class="gtkdoc opt">,</SPAN>            <SPAN class="gtkdoc slc">// error code</SPAN>
                   <SPAN class=string>"Failed to open file: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc slc">// error message format string</SPAN>
                   <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strerror">g_strerror</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>errno<SPAN class="gtkdoc opt">));</SPAN>
      <SPAN class=keyword>return</SPAN> <SPAN class="gtkdoc opt">-</SPAN><SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
  <SPAN class=keyword>else</SPAN>
    <SPAN class=keyword>return</SPAN> fd<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Things are somewhat more complicated if you yourself call another function that can report a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>. If the sub-function indicates fatal errors in some way other than reporting a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, such as by returning <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, you can simply do the following:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gboolean
<SPAN class=function>my_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GError <SPAN class="gtkdoc opt">**</SPAN>err<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN> FALSE<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function>sub_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>err<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class="gtkdoc slc">// assert that error was set by the sub-function</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc slc">// otherwise continue, no error occurred</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>If the sub-function does not indicate errors other than by reporting a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, you need to create a temporary <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> since the passed-in one may be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. <A class=link title=g_propagate_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error"><CODE class=function>g_propagate_error()</CODE></A> is intended for use in this case.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gboolean
<SPAN class=function>my_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GError <SPAN class="gtkdoc opt">**</SPAN>err<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GError <SPAN class="gtkdoc opt">*</SPAN>tmp_error<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN> FALSE<SPAN class="gtkdoc opt">);</SPAN>

  tmp_error <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=function>sub_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>tmp_error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>tmp_error <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class="gtkdoc slc">// store tmp_error in err, if err != NULL,</SPAN>
      <SPAN class="gtkdoc slc">// otherwise call g_error_free() on tmp_error</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error">g_propagate_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err<SPAN class="gtkdoc opt">,</SPAN> tmp_error<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc slc">// otherwise continue, no error occurred</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Error pileups are always a bug. For example, this code is incorrect:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gboolean
<SPAN class=function>my_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GError <SPAN class="gtkdoc opt">**</SPAN>err<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GError <SPAN class="gtkdoc opt">*</SPAN>tmp_error<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN> FALSE<SPAN class="gtkdoc opt">);</SPAN>

  tmp_error <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=function>sub_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>tmp_error<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function>other_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>tmp_error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>tmp_error <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error">g_propagate_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err<SPAN class="gtkdoc opt">,</SPAN> tmp_error<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P><EM class=parameter><CODE>tmp_error</CODE></EM> should be checked immediately after <CODE class=function>sub_function_that_can_fail()</CODE>, and either cleared or propagated upward. The rule is: after each error, you must either handle the error, or return it to the calling function.</P>
<P>Note that passing <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for the error location is the equivalent of handling an error by always doing nothing about it. So the following code is fine, assuming errors in <CODE class=function>sub_function_that_can_fail()</CODE> are not fatal to <CODE class=function>my_function_that_can_fail()</CODE>:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gboolean
<SPAN class=function>my_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GError <SPAN class="gtkdoc opt">**</SPAN>err<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GError <SPAN class="gtkdoc opt">*</SPAN>tmp_error<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL <SPAN class="gtkdoc opt">|| *</SPAN>err <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">,</SPAN> FALSE<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function>sub_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(</SPAN>NULL<SPAN class="gtkdoc opt">);</SPAN> <SPAN class="gtkdoc slc">// ignore errors</SPAN>

  tmp_error <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=function>other_function_that_can_fail</SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>tmp_error<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>tmp_error <SPAN class="gtkdoc opt">!=</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-propagate-error">g_propagate_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>err<SPAN class="gtkdoc opt">,</SPAN> tmp_error<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Note that passing <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for the error location ignores errors; it's equivalent to <CODE class=literal>try { <CODE class=function>sub_function_that_can_fail()</CODE>; } catch (...) {}</CODE> in C++. It does not mean to leave errors unhandled; it means to handle them by doing nothing.</P>
<P>Error domains and codes are conventionally named as follows:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>The error domain is called &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR, for example <A class=link title=G_SPAWN_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR:CAPS"><CODE class=literal>G_SPAWN_ERROR</CODE></A> or <A class=link title=G_THREAD_ERROR href="https://developer.gnome.org/glib/stable/glib-Threads.html#G-THREAD-ERROR:CAPS"><CODE class=literal>G_THREAD_ERROR</CODE></A>:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#define G_SPAWN_ERROR g_spawn_error_quark ()</SPAN>

GQuark
<SPAN class=function>g_spawn_error_quark</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=keyword>return</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Quarks.html#g-quark-from-static-string">g_quark_from_static_string</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"g-spawn-error-quark"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></LI>
<LI class=listitem>
<P>The quark function for the error domain is called &lt;namespace&gt;_&lt;module&gt;_error_quark, for example <CODE class=function>g_spawn_error_quark()</CODE> or <CODE class=function>g_thread_error_quark()</CODE>.</P></LI>
<LI class=listitem>
<P>The error codes are in an enumeration called &lt;Namespace&gt;&lt;Module&gt;Error; for example, <A class=link title="enum GThreadError" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThreadError"><SPAN class=type>GThreadError</SPAN></A> or <A class=link title="enum GSpawnError" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnError"><SPAN class=type>GSpawnError</SPAN></A>.</P></LI>
<LI class=listitem>
<P>Members of the error code enumeration are called &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR_&lt;CODE&gt;, for example <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR-FORK:CAPS"><CODE class=literal>G_SPAWN_ERROR_FORK</CODE></A> or <A class=link href="https://developer.gnome.org/glib/stable/glib-Threads.html#G-THREAD-ERROR-AGAIN:CAPS"><CODE class=literal>G_THREAD_ERROR_AGAIN</CODE></A>.</P></LI>
<LI class=listitem>
<P>If there's a "generic" or "unknown" error code for unrecoverable errors it doesn't make sense to distinguish with specific codes, it should be called &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR_FAILED, for example <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR-FAILED:CAPS"><CODE class=literal>G_SPAWN_ERROR_FAILED</CODE></A>. In the case of error code enumerations that may be extended in future releases, you should generally not handle this error code explicitly, but should instead treat any unrecognized error code as equivalent to FAILED.</P></LI></UL></DIV>
<P>Summary of rules for use of <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>Do not report programming errors via <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>.</P></LI>
<LI class=listitem>
<P>The last argument of a function that returns an error should be a location where a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> can be placed (i.e. "<A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>** error"). If <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is used with varargs, the <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>** should be the last argument before the "...".</P></LI>
<LI class=listitem>
<P>The caller may pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for the <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>** if they are not interested in details of the exact error that occurred.</P></LI>
<LI class=listitem>
<P>If <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is passed for the <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>** argument, then errors should not be returned to the caller, but your function should still abort and return if an error occurs. That is, control flow should not be affected by whether the caller wants to get a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>.</P></LI>
<LI class=listitem>
<P>If a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is reported, then your function by definition had a fatal failure and did not complete whatever it was supposed to do. If the failure was not fatal, then you handled it and you should not report it. If it was fatal, then you must report it and discontinue whatever you were doing immediately.</P></LI>
<LI class=listitem>
<P>If a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is reported, out parameters are not guaranteed to be set to any defined value.</P></LI>
<LI class=listitem>
<P>A <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>* must be initialized to <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> before passing its address to a function that can report errors.</P></LI>
<LI class=listitem>
<P>"Piling up" errors is always a bug. That is, if you assign a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> to a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>* that is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, thus overwriting the previous error, it indicates that you should have aborted the operation instead of continuing. If you were able to continue, you should have cleared the previous error with <A class=link title=g_clear_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-clear-error"><CODE class=function>g_clear_error()</CODE></A>. <A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error"><CODE class=function>g_set_error()</CODE></A> will complain if you pile up errors.</P></LI>
<LI class=listitem>
<P>By convention, if you return a boolean value indicating success then <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> means success and <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> means failure. &lt;footnote&gt;&lt;para&gt;Avoid creating functions which have a boolean return value and a GError parameter, but where the boolean does something other than signal whether the GError is set. Among other problems, it requires C callers to allocate a temporary error. Instead, provide a "gboolean *" out parameter. There are functions in GLib itself such as <A class=link title=g_key_file_has_key&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Key-value-file-parser.html#g-key-file-has-key"><CODE class=function>g_key_file_has_key()</CODE></A> that are deprecated because of this. &lt;/para&gt;&lt;/footnote&gt; If <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> is returned, the error must be set to a non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> value. &lt;footnote&gt;&lt;para&gt;One exception to this is that in situations that are already considered to be undefined behaviour (such as when a <A class=link title=g_return_val_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail"><CODE class=function>g_return_val_if_fail()</CODE></A> check fails), the error need not be set. Instead of checking separately whether the error is set, callers should ensure that they do not provoke undefined behaviour, then assume that the error will be set on failure.&lt;/para&gt;&lt;/footnote&gt;</P></LI>
<LI class=listitem>
<P>A <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> return value is also frequently used to mean that an error occurred. You should make clear in your documentation whether <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is a valid return value in non-error cases; if <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is a valid value, then users must check whether an error was returned to see if the function succeeded.</P></LI>
<LI class=listitem>
<P>When implementing a function that can report errors, you may want to add a check at the top of your function that the error return location is either <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> or contains a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> error (e.g. <CODE class=literal>g_return_if_fail (error == NULL || *error == NULL);</CODE>).</P></LI></UL></DIV></DIV>
<DIV class=refsect1><A name=glib-Error-Reporting.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-error-new></A>
<H3>g_error_new&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;*
g_error_new (<EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>,
             <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
             <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Creates a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> with the given <EM class=parameter><CODE>domain</CODE></EM> and <EM class=parameter><CODE>code</CODE></EM> , and a message formatted with <EM class=parameter><CODE>format</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.10.7.2.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>printf()-style format for error message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>parameters for message format</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.10.7.2.6></A>
<H4>Returns</H4>
<P>a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-error-new-literal></A>
<H3>g_error_new_literal&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;*
g_error_new_literal (<EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *message</CODE></EM>);</PRE>
<P>Creates a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>; unlike <A class=link title=g_error_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-new"><CODE class=function>g_error_new()</CODE></A>, <EM class=parameter><CODE>message</CODE></EM> is not a <CODE class=function>printf()</CODE>-style format string. Use this function if <EM class=parameter><CODE>message</CODE></EM> contains text you don't have control over, that could include <CODE class=function>printf()</CODE> escape sequences.</P>
<DIV class=refsect3><A name=id-1.4.10.7.3.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>message</P></TD>
<TD class=parameter_description>
<P>error message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.10.7.3.6></A>
<H4>Returns</H4>
<P>a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-error-new-valist></A>
<H3>g_error_new_valist&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;*
g_error_new_valist (<EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>,
                    <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                    <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>Creates a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> with the given <EM class=parameter><CODE>domain</CODE></EM> and <EM class=parameter><CODE>code</CODE></EM> , and a message formatted with <EM class=parameter><CODE>format</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.10.7.4.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>printf()-style format for error message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P><SPAN class=type>va_list</SPAN> of parameters for the message format</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.10.7.4.6></A>
<H4>Returns</H4>
<P>a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P>
<P></P></DIV>
<P class=since>Since 2.22</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-error-free></A>
<H3>g_error_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_error_free (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> *error</CODE></EM>);</PRE>
<P>Frees a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> and associated resources.</P>
<DIV class=refsect3><A name=id-1.4.10.7.5.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-error-copy></A>
<H3>g_error_copy&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=returnvalue>GError</SPAN></A>&nbsp;*
g_error_copy (<EM class=parameter><CODE>const <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> *error</CODE></EM>);</PRE>
<P>Makes a copy of <EM class=parameter><CODE>error</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.10.7.6.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.10.7.6.6></A>
<H4>Returns</H4>
<P>a new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-error-matches></A>
<H3>g_error_matches&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_error_matches (<EM class=parameter><CODE>const <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> *error</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>);</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>error</CODE></EM> matches <EM class=parameter><CODE>domain</CODE></EM> and <EM class=parameter><CODE>code</CODE></EM> , <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> otherwise. In particular, when <EM class=parameter><CODE>error</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> will be returned.</P>
<P>If <EM class=parameter><CODE>domain</CODE></EM> contains a <CODE class=literal>FAILED</CODE> (or otherwise generic) error code, you should generally not check for it explicitly, but should instead treat any not-explicitly-recognized error code as being equilalent to the <CODE class=literal>FAILED</CODE> code. This way, if the domain is extended in the future to provide a more specific error code for a certain case, your code will still work.</P>
<DIV class=refsect3><A name=id-1.4.10.7.7.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>an error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>an error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.10.7.7.7></A>
<H4>Returns</H4>
<P>whether <EM class=parameter><CODE>error</CODE></EM> has <EM class=parameter><CODE>domain</CODE></EM> and <EM class=parameter><CODE>code</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-error></A>
<H3>g_set_error&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_set_error (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **err</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>,
             <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
             <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Does nothing if <EM class=parameter><CODE>err</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>; if <EM class=parameter><CODE>err</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, then *<EM class=parameter><CODE>err</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. A new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is created and assigned to *<EM class=parameter><CODE>err</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.10.7.8.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>printf()-style format</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>args for <EM class=parameter><CODE>format</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-error-literal></A>
<H3>g_set_error_literal&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_set_error_literal (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **err</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> domain</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> code</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *message</CODE></EM>);</PRE>
<P>Does nothing if <EM class=parameter><CODE>err</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>; if <EM class=parameter><CODE>err</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, then *<EM class=parameter><CODE>err</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. A new <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is created and assigned to *<EM class=parameter><CODE>err</CODE></EM> . Unlike <A class=link title=g_set_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error"><CODE class=function>g_set_error()</CODE></A>, <EM class=parameter><CODE>message</CODE></EM> is not a <CODE class=function>printf()</CODE>-style format string. Use this function if <EM class=parameter><CODE>message</CODE></EM> contains text you don't have control over, that could include <CODE class=function>printf()</CODE> escape sequences.</P>
<DIV class=refsect3><A name=id-1.4.10.7.9.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>domain</P></TD>
<TD class=parameter_description>
<P>error domain</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>code</P></TD>
<TD class=parameter_description>
<P>error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>message</P></TD>
<TD class=parameter_description>
<P>error message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.18</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-propagate-error></A>
<H3>g_propagate_error&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_propagate_error (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **dest</CODE></EM>,
                   <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> *src</CODE></EM>);</PRE>
<P>If <EM class=parameter><CODE>dest</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, free <EM class=parameter><CODE>src</CODE></EM> ; otherwise, moves <EM class=parameter><CODE>src</CODE></EM> into *<EM class=parameter><CODE>dest</CODE></EM> . The error variable <EM class=parameter><CODE>dest</CODE></EM> points to must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.10.7.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>error return location</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>error to move into the return location</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-clear-error></A>
<H3>g_clear_error&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_clear_error (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **err</CODE></EM>);</PRE>
<P>If <EM class=parameter><CODE>err</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, does nothing. If <EM class=parameter><CODE>err</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, calls <A class=link title=g_error_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-error-free"><CODE class=function>g_error_free()</CODE></A> on *<EM class=parameter><CODE>err</CODE></EM> and sets *<EM class=parameter><CODE>err</CODE></EM> to <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.10.7.11.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> return location</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-prefix-error></A>
<H3>g_prefix_error&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_prefix_error (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **err</CODE></EM>,
                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Formats a string according to <EM class=parameter><CODE>format</CODE></EM> and prefix it to an existing error message. If <EM class=parameter><CODE>err</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> (ie: no error variable) then do nothing.</P>
<P>If *<EM class=parameter><CODE>err</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> (ie: an error variable is present but there is no error condition) then also do nothing. Whether or not it makes sense to take advantage of this feature is up to you.</P>
<DIV class=refsect3><A name=id-1.4.10.7.12.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>printf()-style format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>arguments to <EM class=parameter><CODE>format</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-propagate-prefixed-error></A>
<H3>g_propagate_prefixed_error&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_propagate_prefixed_error (<EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **dest</CODE></EM>,
                            <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> *src</CODE></EM>,
                            <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                            <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>If <EM class=parameter><CODE>dest</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, free <EM class=parameter><CODE>src</CODE></EM> ; otherwise, moves <EM class=parameter><CODE>src</CODE></EM> into *<EM class=parameter><CODE>dest</CODE></EM> . *<EM class=parameter><CODE>dest</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. After the move, add a prefix as with <A class=link title=g_prefix_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-prefix-error"><CODE class=function>g_prefix_error()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.10.7.13.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>error return location</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>error to move into the return location</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>printf()-style format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>arguments to <EM class=parameter><CODE>format</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Error-Reporting.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GError></A>
<H3>struct GError</H3><PRE class=programlisting>struct GError {
  GQuark       domain;
  gint         code;
  gchar       *message;
};
</PRE>
<P>The <CODE class=literal>GError</CODE> structure contains information about an error that has occurred.</P>
<DIV class=refsect3><A name=id-1.4.10.8.2.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=struct_members_name width=300></COL>
<COL class=struct_members_description></COL>
<COL class=struct_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GError.domain></A>domain</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>error domain, e.g. <A class=link title=G_FILE_ERROR href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR:CAPS"><SPAN class=type>G_FILE_ERROR</SPAN></A></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GError.code></A>code</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>error code, e.g. <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR-NOENT:CAPS"><CODE class=literal>G_FILE_ERROR_NOENT</CODE></A></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GError.message></A>message</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>human-readable informative error message</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>