<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Dynamic-Loading-of-Modules.top_of_page></A>Dynamic Loading of Modules</SPAN></H2>
<P>Dynamic Loading of Modules &#8212; portable method for dynamically loading 'plug-ins'</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_module_supported&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-supported">g_module_supported</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_module_build_path&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-build-path">g_module_build_path</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=returnvalue>GModule</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_module_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open">g_module_open</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_module_symbol&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol">g_module_symbol</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_module_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-name">g_module_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_module_make_resident&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-make-resident">g_module_make_resident</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_module_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_module_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GModuleCheckInit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleCheckInit">*GModuleCheckInit</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GModuleUnload&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleUnload">*GModuleUnload</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule">GModule</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GModuleFlags" href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags">GModuleFlags</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_MODULE_SUFFIX href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-SUFFIX:CAPS">G_MODULE_SUFFIX</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_MODULE_EXPORT href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-EXPORT:CAPS">G_MODULE_EXPORT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_MODULE_IMPORT href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-IMPORT:CAPS">G_MODULE_IMPORT</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;gmodule.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.description></A>
<H2>Description</H2>
<P>These functions provide a portable way to dynamically load object files (commonly known as 'plug-ins'). The current implementation supports all systems that provide an implementation of <CODE class=function>dlopen()</CODE> (e.g. Linux/Sun), as well as Windows platforms via DLLs.</P>
<P>A program which wants to use these functions must be linked to the libraries output by the command <CODE class=literal>pkg-config --libs gmodule-2.0</CODE>.</P>
<P>To use them you must first determine whether dynamic loading is supported on the platform by calling <A class=link title=g_module_supported&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-supported"><CODE class=function>g_module_supported()</CODE></A>. If it is, you can open a module with <A class=link title=g_module_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function>g_module_open()</CODE></A>, find the module's symbols (e.g. function names) with <A class=link title=g_module_symbol&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol"><CODE class=function>g_module_symbol()</CODE></A>, and later close the module with <A class=link title=g_module_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close"><CODE class=function>g_module_close()</CODE></A>. <A class=link title=g_module_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-name"><CODE class=function>g_module_name()</CODE></A> will return the file name of a currently opened module.</P>
<P>If any of the above functions fail, the error status can be found with <A class=link title=g_module_error&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error"><CODE class=function>g_module_error()</CODE></A>.</P>
<P>The <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> implementation features reference counting for opened modules, and supports hook functions within a module which are called when the module is loaded and unloaded (see <A class=link title=GModuleCheckInit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleCheckInit"><SPAN class=type>GModuleCheckInit</SPAN></A> and <A class=link title=GModuleUnload&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleUnload"><SPAN class=type>GModuleUnload</SPAN></A>).</P>
<P>If your module introduces static data to common subsystems in the running program, e.g. through calling <CODE class=literal>g_quark_from_static_string ("my-module-stuff")</CODE>, it must ensure that it is never unloaded, by calling <A class=link title=g_module_make_resident&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-make-resident"><CODE class=function>g_module_make_resident()</CODE></A>.</P>
<P>Example: Calling a function defined in a GModule</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc slc">// the function signature for 'say_hello'</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN> SayHelloFunc<SPAN class="gtkdoc opt">) (</SPAN><SPAN class="gtkdoc kwb">const char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>message<SPAN class="gtkdoc opt">);</SPAN>

gboolean
<SPAN class=function>just_say_hello</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> GError <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  SayHelloFunc  say_hello<SPAN class="gtkdoc opt">;</SPAN>
  GModule      <SPAN class="gtkdoc opt">*</SPAN>module<SPAN class="gtkdoc opt">;</SPAN>

  module <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open">g_module_open</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> G_MODULE_BIND_LAZY<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>module<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> FOO_ERROR<SPAN class="gtkdoc opt">,</SPAN> FOO_ERROR_BLAH<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"%s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol">g_module_symbol</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"say_hello"</SPAN><SPAN class="gtkdoc opt">, (</SPAN>gpointer <SPAN class="gtkdoc opt">*)&amp;</SPAN>say_hello<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR_OPEN<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>say_hello <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR_OPEN<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"symbol say_hello is NULL"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc slc">// call our function in the module</SPAN>
  <SPAN class=function>say_hello</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"Hello world!"</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
  <SPAN class=keyword>return</SPAN> TRUE<SPAN class="gtkdoc opt">;</SPAN>
 <SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-module-supported></A>
<H3>g_module_supported&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_module_supported (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Checks if modules are supported on the current platform.</P>
<DIV class=refsect3><A name=id-1.4.6.7.2.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if modules are supported</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-build-path></A>
<H3>g_module_build_path&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_module_build_path (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *directory</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *module_name</CODE></EM>);</PRE>
<P>A portable way to build the filename of a module. The platform-specific prefix and suffix are added to the filename, if needed, and the result is added to the directory, using the correct separator character.</P>
<P>The directory should specify the directory where the module can be found. It can be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> or an empty string to indicate that the module is in a standard platform-specific directory, though this is not recommended since the wrong module may be found.</P>
<P>For example, calling <A class=link title=g_module_build_path&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-build-path"><CODE class=function>g_module_build_path()</CODE></A> on a Linux system with a <EM class=parameter><CODE>directory</CODE></EM> of <CODE class=literal>/lib</CODE> and a <EM class=parameter><CODE>module_name</CODE></EM> of "mylibrary" will return <CODE class=literal>/lib/libmylibrary.so</CODE>. On a Windows system, using <CODE class=literal>\Windows</CODE> as the directory it will return <CODE class=literal>\Windows\mylibrary.dll</CODE>.</P>
<DIV class=refsect3><A name=id-1.4.6.7.3.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>directory</P></TD>
<TD class=parameter_description>
<P>the directory where the module is. This can be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> or the empty string to indicate that the standard platform-specific directories will be used, though that is not recommended. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>module_name</P></TD>
<TD class=parameter_description>
<P>the name of the module</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.3.8></A>
<H4>Returns</H4>
<P>the complete path of the module, including the standard library prefix and suffix. This should be freed when no longer needed</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-open></A>
<H3>g_module_open&nbsp;()</H3><PRE class=programlisting><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=returnvalue>GModule</SPAN></A>&nbsp;*
g_module_open (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *file_name</CODE></EM>,
               <EM class=parameter><CODE><A class=link title="enum GModuleFlags" href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags"><SPAN class=type>GModuleFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Opens a module. If the module has already been opened, its reference count is incremented.</P>
<P>First of all <A class=link title=g_module_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function>g_module_open()</CODE></A> tries to open <EM class=parameter><CODE>file_name</CODE></EM> as a module. If that fails and <EM class=parameter><CODE>file_name</CODE></EM> has the ".la"-suffix (and is a libtool archive) it tries to open the corresponding module. If that fails and it doesn't have the proper module suffix for the platform (<A class=link title=G_MODULE_SUFFIX href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-SUFFIX:CAPS"><SPAN class=type>G_MODULE_SUFFIX</SPAN></A>), this suffix will be appended and the corresponding module will be opended. If that fails and <EM class=parameter><CODE>file_name</CODE></EM> doesn't have the ".la"-suffix, this suffix is appended and <A class=link title=g_module_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function>g_module_open()</CODE></A> tries to open the corresponding module. If eventually that fails as well, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<DIV class=refsect3><A name=id-1.4.6.7.4.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file_name</P></TD>
<TD class=parameter_description>
<P>the name of the file containing the module, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to obtain a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> representing the main program itself. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>the flags used for opening the module. This can be the logical OR of any of the <A class=link title="enum GModuleFlags" href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags"><SPAN class=type>GModuleFlags</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.4.7></A>
<H4>Returns</H4>
<P>a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> on success, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-symbol></A>
<H3>g_module_symbol&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_module_symbol (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>,
                 <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *symbol_name</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> *symbol</CODE></EM>);</PRE>
<P>Gets a symbol pointer from a module, such as one exported by <A class=link title=G_MODULE_EXPORT href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-EXPORT:CAPS"><SPAN class=type>G_MODULE_EXPORT</SPAN></A>. Note that a valid symbol can be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.6.7.5.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>symbol_name</P></TD>
<TD class=parameter_description>
<P>the name of the symbol to find</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>symbol</P></TD>
<TD class=parameter_description>
<P>returns the pointer to the symbol value. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.5.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-name></A>
<H3>g_module_name&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_module_name (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Returns the filename that the module was opened with.</P>
<P>If <EM class=parameter><CODE>module</CODE></EM> refers to the application itself, "main" is returned.</P>
<DIV class=refsect3><A name=id-1.4.6.7.6.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.6.7></A>
<H4>Returns</H4>
<P>the filename of the module. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-make-resident></A>
<H3>g_module_make_resident&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_module_make_resident (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Ensures that a module will never be unloaded. Any future <A class=link title=g_module_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close"><CODE class=function>g_module_close()</CODE></A> calls on the module will be ignored.</P>
<DIV class=refsect3><A name=id-1.4.6.7.7.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> to make permanently resident</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-close></A>
<H3>g_module_close&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_module_close (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Closes a module.</P>
<DIV class=refsect3><A name=id-1.4.6.7.8.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> to close</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.8.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-error></A>
<H3>g_module_error&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_module_error (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Gets a string describing the last module error.</P>
<DIV class=refsect3><A name=id-1.4.6.7.9.5></A>
<H4>Returns</H4>
<P>a string describing the last module error</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleCheckInit></A>
<H3>GModuleCheckInit&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
<SPAN class=c_punctuation>(</SPAN>*GModuleCheckInit<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Specifies the type of the module initialization function. If a module contains a function named <CODE class=function>g_module_check_init()</CODE> it is called automatically when the module is loaded. It is passed the <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> structure and should return <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on success or a string describing the initialization error.</P>
<DIV class=refsect3><A name=id-1.4.6.7.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>the <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> corresponding to the module which has just been loaded</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.10.6></A>
<H4>Returns</H4>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on success, or a string describing the initialization error</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleUnload></A>
<H3>GModuleUnload&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GModuleUnload<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</PRE>
<P>Specifies the type of the module function called when it is unloaded. If a module contains a function named <CODE class=function>g_module_unload()</CODE> it is called automatically when the module is unloaded. It is passed the <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> structure.</P>
<DIV class=refsect3><A name=id-1.4.6.7.11.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>module</P></TD>
<TD class=parameter_description>
<P>the <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> about to be unloaded</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GModule></A>
<H3>GModule</H3><PRE class=programlisting>typedef struct _GModule GModule;</PRE>
<P>The <A class=link title=GModule href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> struct is an opaque data structure to represent a <A class=link title="Dynamic Loading of Modules" href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html">dynamically-loaded module</A>. It should only be accessed via the following functions.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleFlags></A>
<H3>enum GModuleFlags</H3>
<P>Flags passed to <A class=link title=g_module_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function>g_module_open()</CODE></A>. Note that these flags are not supported on all platforms.</P>
<DIV class=refsect3><A name=id-1.4.6.8.3.4></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-LAZY:CAPS></A>G_MODULE_BIND_LAZY</P></TD>
<TD class=enum_member_description>
<P>specifies that symbols are only resolved when needed. The default action is to bind all symbols when the module is loaded.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-LOCAL:CAPS></A>G_MODULE_BIND_LOCAL</P></TD>
<TD class=enum_member_description>
<P>specifies that symbols in the module should not be added to the global name space. The default action on most platforms is to place symbols in the module in the global name space, which may cause conflicts with existing symbols.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-MASK:CAPS></A>G_MODULE_BIND_MASK</P></TD>
<TD class=enum_member_description>
<P>mask for all flags.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-SUFFIX:CAPS></A>
<H3>G_MODULE_SUFFIX</H3><PRE class=programlisting>#define G_MODULE_SUFFIX "so"
</PRE>
<P>Expands to the proper shared library suffix for the current platform without the leading dot. For most Unices and Linux this is "so", and for Windows this is "dll".</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-EXPORT:CAPS></A>
<H3>G_MODULE_EXPORT</H3><PRE class=programlisting>#  define&nbsp;G_MODULE_EXPORT		__declspec(dllexport)
</PRE>
<P>Used to declare functions exported by modules. This is a no-op on Linux and Unices, but when compiling for Windows, it marks a symbol to be exported from the library or executable being built.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-IMPORT:CAPS></A>
<H3>G_MODULE_IMPORT</H3><PRE class=programlisting>#define&nbsp;G_MODULE_IMPORT		extern
</PRE>
<P>Used to declare functions imported from modules.</P></DIV></DIV>