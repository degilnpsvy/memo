<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Dynamic-Loading-of-Modules.top_of_page></A>Dynamic Loading of Modules</SPAN></H2>
<P>Dynamic Loading of Modules &#8212; portable method for dynamically loading 'plug-ins'</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_module_supported&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-supported">g_module_supported</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_module_build_path&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-build-path">g_module_build_path</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=returnvalue>GModule</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_module_open&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open">g_module_open</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_module_symbol&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol">g_module_symbol</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_module_name&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-name">g_module_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_module_make_resident&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-make-resident">g_module_make_resident</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_module_close&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_module_error&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GModuleCheckInit&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleCheckInit">*GModuleCheckInit</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GModuleUnload&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleUnload">*GModuleUnload</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule">GModule</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A title="enum GModuleFlags" class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags">GModuleFlags</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_MODULE_SUFFIX class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-SUFFIX:CAPS">G_MODULE_SUFFIX</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_MODULE_EXPORT class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-EXPORT:CAPS">G_MODULE_EXPORT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_MODULE_IMPORT class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-IMPORT:CAPS">G_MODULE_IMPORT</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;gmodule.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.description></A>
<H2>Description</H2>
<P><FONT class=extract>These functions provide a portable way to dynamically load object files (commonly known as 'plug-ins'). The current implementation supports all systems that provide an implementation of <CODE class=function>dlopen()</CODE> (e.g. Linux/Sun), as well as Windows platforms via DLLs.</FONT></P>
<P><FONT class=extract>A program which wants to use these functions must be linked to the libraries output by the command <CODE class=literal>pkg-config --libs gmodule-2.0</CODE>.</FONT></P>
<P><FONT class=extract>To use them you must first determine whether dynamic loading is supported on the platform by calling </FONT><A title=g_module_supported&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-supported"><CODE class=function><FONT class=extract>g_module_supported()</FONT></CODE></A><FONT class=extract>. If it is, you can open a module with </FONT><A title=g_module_open&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function><FONT class=extract>g_module_open()</FONT></CODE></A><FONT class=extract>, find the module's symbols (e.g. function names) with </FONT><A title=g_module_symbol&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol"><CODE class=function><FONT class=extract>g_module_symbol()</FONT></CODE></A><FONT class=extract>, and later close the module with </FONT><A title=g_module_close&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close"><CODE class=function><FONT class=extract>g_module_close()</FONT></CODE></A><FONT class=extract>. </FONT><A title=g_module_name&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-name"><CODE class=function><FONT class=extract>g_module_name()</FONT></CODE></A><FONT class=extract> will return the file name of a currently opened module.</FONT></P>
<P><FONT class=extract>If any of the above functions fail, the error status can be found with </FONT><A title=g_module_error&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error"><CODE class=function><FONT class=extract>g_module_error()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract>The </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> implementation features reference counting for opened modules, and supports hook functions within a module which are called when the module is loaded and unloaded (see </FONT><A title=GModuleCheckInit&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleCheckInit"><SPAN class=type><FONT class=extract>GModuleCheckInit</FONT></SPAN></A><FONT class=extract> and </FONT><A title=GModuleUnload&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleUnload"><SPAN class=type><FONT class=extract>GModuleUnload</FONT></SPAN></A><FONT class=extract>).</FONT></P>
<P><FONT class=extract>If your module introduces static data to common subsystems in the running program, e.g. through calling <CODE class=literal>g_quark_from_static_string ("my-module-stuff")</CODE>, it must ensure that it is never unloaded, by calling </FONT><A title=g_module_make_resident&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-make-resident"><CODE class=function><FONT class=extract>g_module_make_resident()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract>Example: Calling a function defined in a GModule</FONT></P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE><FONT class=extract>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</FONT></PRE></TD>
<TD class=listing_code><PRE class=programlisting><FONT class=extract><SPAN class="gtkdoc slc">// the function signature for 'say_hello'</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN> SayHelloFunc<SPAN class="gtkdoc opt">) (</SPAN><SPAN class="gtkdoc kwb">const char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>message<SPAN class="gtkdoc opt">);</SPAN>

gboolean
<SPAN class=function>just_say_hello</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> GError <SPAN class="gtkdoc opt">**</SPAN>error<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  SayHelloFunc  say_hello<SPAN class="gtkdoc opt">;</SPAN>
  GModule      <SPAN class="gtkdoc opt">*</SPAN>module<SPAN class="gtkdoc opt">;</SPAN>

  module <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open">g_module_open</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> G_MODULE_BIND_LAZY<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>module<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> FOO_ERROR<SPAN class="gtkdoc opt">,</SPAN> FOO_ERROR_BLAH<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"%s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-symbol">g_module_symbol</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"say_hello"</SPAN><SPAN class="gtkdoc opt">, (</SPAN>gpointer <SPAN class="gtkdoc opt">*)&amp;</SPAN>say_hello<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR_OPEN<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>say_hello <SPAN class="gtkdoc opt">==</SPAN> NULL<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#g-set-error">g_set_error</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>error<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR<SPAN class="gtkdoc opt">,</SPAN> SAY_ERROR_OPEN<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class=string>"symbol say_hello is NULL"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
      <SPAN class=keyword>return</SPAN> FALSE<SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc slc">// call our function in the module</SPAN>
  <SPAN class=function>say_hello</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"Hello world!"</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close">g_module_close</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>module<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning">g_warning</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"%s: %s"</SPAN><SPAN class="gtkdoc opt">,</SPAN> filename<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-error">g_module_error</A></SPAN> <SPAN class="gtkdoc opt">());</SPAN>
  <SPAN class=keyword>return</SPAN> TRUE<SPAN class="gtkdoc opt">;</SPAN>
 <SPAN class="gtkdoc opt">}</SPAN></FONT></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-module-supported></A>
<H3><FONT class=extract>g_module_supported&nbsp;()</FONT></H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue><FONT class=extract>gboolean</FONT></SPAN></A>
<FONT class=extract>g_module_supported (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Checks if modules are supported on the current platform.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.2.5></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract> if modules are supported</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-build-path></A>
<H3><FONT class=extract>g_module_build_path&nbsp;()</FONT></H3><PRE class=programlisting><A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue><FONT class=extract>gchar</FONT></SPAN></A><FONT class=extract>&nbsp;*
g_module_build_path (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *directory</CODE></EM>,
                     <EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *module_name</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>A portable way to build the filename of a module. The platform-specific prefix and suffix are added to the filename, if needed, and the result is added to the directory, using the correct separator character.</FONT></P>
<P><FONT class=extract>The directory should specify the directory where the module can be found. It can be </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> or an empty string to indicate that the module is in a standard platform-specific directory, though this is not recommended since the wrong module may be found.</FONT></P>
<P><FONT class=extract>For example, calling </FONT><A title=g_module_build_path&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-build-path"><CODE class=function><FONT class=extract>g_module_build_path()</FONT></CODE></A><FONT class=extract> on a Linux system with a <EM class=parameter><CODE>directory</CODE></EM> of <CODE class=literal>/lib</CODE> and a <EM class=parameter><CODE>module_name</CODE></EM> of "mylibrary" will return <CODE class=literal>/lib/libmylibrary.so</CODE>. On a Windows system, using <CODE class=literal>\Windows</CODE> as the directory it will return <CODE class=literal>\Windows\mylibrary.dll</CODE>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.3.7></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>directory</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the directory where the module is. This can be </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> or the empty string to indicate that the standard platform-specific directories will be used, though that is not recommended. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module_name</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the name of the module</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.3.8></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the complete path of the module, including the standard library prefix and suffix. This should be freed when no longer needed</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-open></A>
<H3><FONT class=extract>g_module_open&nbsp;()</FONT></H3><PRE class=programlisting><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=returnvalue><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract>&nbsp;*
g_module_open (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *file_name</CODE></EM>,
               <EM class=parameter><CODE><A title="enum GModuleFlags" class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags"><SPAN class=type>GModuleFlags</SPAN></A> flags</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Opens a module. If the module has already been opened, its reference count is incremented.</FONT></P>
<P><FONT class=extract>First of all </FONT><A title=g_module_open&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function><FONT class=extract>g_module_open()</FONT></CODE></A><FONT class=extract> tries to open <EM class=parameter><CODE>file_name</CODE></EM> as a module. If that fails and <EM class=parameter><CODE>file_name</CODE></EM> has the ".la"-suffix (and is a libtool archive) it tries to open the corresponding module. If that fails and it doesn't have the proper module suffix for the platform (</FONT><A title=G_MODULE_SUFFIX class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-SUFFIX:CAPS"><SPAN class=type><FONT class=extract>G_MODULE_SUFFIX</FONT></SPAN></A><FONT class=extract>), this suffix will be appended and the corresponding module will be opended. If that fails and <EM class=parameter><CODE>file_name</CODE></EM> doesn't have the ".la"-suffix, this suffix is appended and </FONT><A title=g_module_open&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function><FONT class=extract>g_module_open()</FONT></CODE></A><FONT class=extract> tries to open the corresponding module. If eventually that fails as well, </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> is returned.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.4.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>file_name</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the name of the file containing the module, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> to obtain a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> representing the main program itself. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>flags</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the flags used for opening the module. This can be the logical OR of any of the </FONT><A title="enum GModuleFlags" class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModuleFlags"><SPAN class=type><FONT class=extract>GModuleFlags</FONT></SPAN></A></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.4.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> on success, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-symbol></A>
<H3><FONT class=extract>g_module_symbol&nbsp;()</FONT></H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue><FONT class=extract>gboolean</FONT></SPAN></A>
<FONT class=extract>g_module_symbol (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>,
                 <EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *symbol_name</CODE></EM>,
                 <EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> *symbol</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Gets a symbol pointer from a module, such as one exported by </FONT><A title=G_MODULE_EXPORT class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#G-MODULE-EXPORT:CAPS"><SPAN class=type><FONT class=extract>G_MODULE_EXPORT</FONT></SPAN></A><FONT class=extract>. Note that a valid symbol can be </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.5.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>symbol_name</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the name of the symbol to find</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>symbol</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>returns the pointer to the symbol value. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>]</FONT></SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.5.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract> on success</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-name></A>
<H3><FONT class=extract>g_module_name&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract>const </FONT><A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue><FONT class=extract>gchar</FONT></SPAN></A><FONT class=extract>&nbsp;*
g_module_name (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Returns the filename that the module was opened with.</FONT></P>
<P><FONT class=extract>If <EM class=parameter><CODE>module</CODE></EM> refers to the application itself, "main" is returned.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.6.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.6.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the filename of the module. </FONT></P>
<P><SPAN class=annotation><FONT class=extract>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</FONT></SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-make-resident></A>
<H3><FONT class=extract>g_module_make_resident&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_module_make_resident (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Ensures that a module will never be unloaded. Any future </FONT><A title=g_module_close&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-close"><CODE class=function><FONT class=extract>g_module_close()</FONT></CODE></A><FONT class=extract> calls on the module will be ignored.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.7.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> to make permanently resident</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-close></A>
<H3><FONT class=extract>g_module_close&nbsp;()</FONT></H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue><FONT class=extract>gboolean</FONT></SPAN></A>
<FONT class=extract>g_module_close (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Closes a module.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.8.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> to close</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.8.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract> on success</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-module-error></A>
<H3><FONT class=extract>g_module_error&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract>const </FONT><A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue><FONT class=extract>gchar</FONT></SPAN></A><FONT class=extract>&nbsp;*
g_module_error (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Gets a string describing the last module error.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.9.5></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a string describing the last module error</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleCheckInit></A>
<H3><FONT class=extract>GModuleCheckInit&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract>const </FONT><A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue><FONT class=extract>gchar</FONT></SPAN></A><FONT class=extract>&nbsp;*
<SPAN class=c_punctuation>(</SPAN>*GModuleCheckInit<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Specifies the type of the module initialization function. If a module contains a function named <CODE class=function>g_module_check_init()</CODE> it is called automatically when the module is loaded. It is passed the </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> structure and should return </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on success or a string describing the initialization error.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.10.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> corresponding to the module which has just been loaded</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.6.7.10.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on success, or a string describing the initialization error</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleUnload></A>
<H3><FONT class=extract>GModuleUnload&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GModuleUnload<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type>GModule</SPAN></A> *module</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Specifies the type of the module function called when it is unloaded. If a module contains a function named <CODE class=function>g_module_unload()</CODE> it is called automatically when the module is unloaded. It is passed the </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> structure.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.7.11.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>module</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> about to be unloaded</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-Dynamic-Loading-of-Modules.other_details></A>
<H2><FONT class=extract>Types and Values</FONT></H2>
<DIV class=refsect2><A name=GModule></A>
<H3><FONT class=extract>GModule</FONT></H3><PRE class=programlisting><FONT class=extract>typedef struct _GModule GModule;</FONT></PRE>
<P><FONT class=extract>The </FONT><A title=GModule class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#GModule"><SPAN class=type><FONT class=extract>GModule</FONT></SPAN></A><FONT class=extract> struct is an opaque data structure to represent a </FONT><A title="Dynamic Loading of Modules" class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html"><FONT class=extract>dynamically-loaded module</FONT></A><FONT class=extract>. It should only be accessed via the following functions.</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GModuleFlags></A>
<H3><FONT class=extract>enum GModuleFlags</FONT></H3>
<P><FONT class=extract>Flags passed to </FONT><A title=g_module_open&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Dynamic-Loading-of-Modules.html#g-module-open"><CODE class=function><FONT class=extract>g_module_open()</FONT></CODE></A><FONT class=extract>. Note that these flags are not supported on all platforms.</FONT></P>
<DIV class=refsect3><A name=id-1.4.6.8.3.4></A>
<H4><FONT class=extract>Members</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-LAZY:CAPS></A><FONT class=extract>G_MODULE_BIND_LAZY</FONT></P></TD>
<TD class=enum_member_description>
<P><FONT class=extract>specifies that symbols are only resolved when needed. The default action is to bind all symbols when the module is loaded.</FONT></P></TD>
<TD class=enum_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-LOCAL:CAPS></A><FONT class=extract>G_MODULE_BIND_LOCAL</FONT></P></TD>
<TD class=enum_member_description>
<P><FONT class=extract>specifies that symbols in the module should not be added to the global name space. The default action on most platforms is to place symbols in the module in the global name space, which may cause conflicts with existing symbols.</FONT></P></TD>
<TD class=enum_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-MODULE-BIND-MASK:CAPS></A><FONT class=extract>G_MODULE_BIND_MASK</FONT></P></TD>
<TD class=enum_member_description>
<P><FONT class=extract>mask for all flags.</FONT></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-SUFFIX:CAPS></A>
<H3><FONT class=extract>G_MODULE_SUFFIX</FONT></H3><PRE class=programlisting><FONT class=extract>#define G_MODULE_SUFFIX "so"
</FONT></PRE>
<P><FONT class=extract>Expands to the proper shared library suffix for the current platform without the leading dot. For most Unices and Linux this is "so", and for Windows this is "dll".</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-EXPORT:CAPS></A>
<H3><FONT class=extract>G_MODULE_EXPORT</FONT></H3><PRE class=programlisting><FONT class=extract>#  define&nbsp;G_MODULE_EXPORT		__declspec(dllexport)
</FONT></PRE>
<P><FONT class=extract>Used to declare functions exported by modules. This is a no-op on Linux and Unices, but when compiling for Windows, it marks a symbol to be exported from the library or executable being built.</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-MODULE-IMPORT:CAPS></A>
<H3><FONT class=extract>G_MODULE_IMPORT</FONT></H3><PRE class=programlisting><FONT class=extract>#define&nbsp;G_MODULE_IMPORT		extern
</FONT></PRE>
<P><FONT class=extract>Used to declare functions imported from modules.</FONT></P></DIV></DIV>