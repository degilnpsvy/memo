<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Memory-Allocation.top_of_page></A>Memory Allocation</SPAN></H2>
<P>Memory Allocation &#8212; general memory-handling</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Memory-Allocation.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_new() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new">g_new</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_new0() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new0">g_new0</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_renew() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-renew">g_renew</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_try_new() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-new">g_try_new</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_try_new0() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-new0">g_try_new0</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_try_renew() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-renew">g_try_renew</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc">g_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_malloc0&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0">g_malloc0</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_realloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc">g_realloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc">g_try_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_malloc0&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0">g_try_malloc0</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_realloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc">g_try_realloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_malloc_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc-n">g_malloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_malloc0_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0-n">g_malloc0_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_realloc_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc-n">g_realloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_malloc_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc-n">g_try_malloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_malloc0_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0-n">g_try_malloc0_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_try_realloc_n&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc-n">g_try_realloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_free&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free">g_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_clear_pointer&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-clear-pointer">g_clear_pointer</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_alloca() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-alloca">g_alloca</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_newa() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-newa">g_newa</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_memmove() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-memmove">g_memmove</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_memdup&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-memdup">g_memdup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_mem_set_vtable&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable">g_mem_set_vtable</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_mem_is_system_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-is-system-malloc">g_mem_is_system_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_mem_profile&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-profile">g_mem_profile</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=variable_type>extern gboolean </TD>
<TD class=function_name><A title=g_mem_gc_friendly class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-gc-friendly">g_mem_gc_friendly</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GMemVTable" class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable">GMemVTable</A></TD></TR>
<TR>
<TD class=variable_type>extern GMemVTable *</TD>
<TD class=function_name><A title=glib_mem_profiler_table class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#glib-mem-profiler-table">glib_mem_profiler_table</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.description></A>
<H2>Description</H2>
<P><FONT class=extract>These functions provide support for allocating and freeing memory.</FONT></P>
<P><FONT class=extract>If any call to allocate memory fails, the application is terminated. This also means that there is no need to check if the call succeeded.</FONT></P>
<P><FONT class=extract>It's important to match </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract> (and wrappers such as </FONT><A title=g_new() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new"><CODE class=function><FONT class=extract>g_new()</FONT></CODE></A><FONT class=extract>) with </FONT><A title=g_free&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function><FONT class=extract>g_free()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_slice_alloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-alloc"><CODE class=function><FONT class=extract>g_slice_alloc()</FONT></CODE></A><FONT class=extract> and wrappers such as </FONT><A title=g_slice_new() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-new"><CODE class=function><FONT class=extract>g_slice_new()</FONT></CODE></A><FONT class=extract>) with </FONT><A title=g_slice_free() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-free"><CODE class=function><FONT class=extract>g_slice_free()</FONT></CODE></A><FONT class=extract>, plain <CODE class=function>malloc()</CODE> with <CODE class=function>free()</CODE>, and (if you're using C++) new with delete and new[] with delete[]. Otherwise bad things can happen, since these allocators may use different memory pools (and new/delete call constructors and destructors). See also </FONT><A title=g_mem_set_vtable&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function><FONT class=extract>g_mem_set_vtable()</FONT></CODE></A><FONT class=extract>.</FONT></P></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-new></A>
<H3><FONT class=extract>g_new()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_new(struct_type, n_structs)</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> . The returned pointer is cast to a pointer to the given type. If <EM class=parameter><CODE>n_structs</CODE></EM> is 0 it returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>. Care is taken to avoid overflow when calculating the size of the allocated block.</FONT></P>
<P><FONT class=extract>Since the returned pointer is already casted to the right type, it is normally unnecessary to cast it explicitly, and doing so might hide memory allocation errors.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.2.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.2.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM></FONT> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-new0></A>
<H3><FONT class=extract>g_new0()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_new0(struct_type, n_structs)</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , initialized to 0's. The returned pointer is cast to a pointer to the given type. If <EM class=parameter><CODE>n_structs</CODE></EM> is 0 it returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>. Care is taken to avoid overflow when calculating the size of the allocated block.</FONT></P>
<P><FONT class=extract>Since the returned pointer is already casted to the right type, it is normally unnecessary to cast it explicitly, and doing so might hide memory allocation errors.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.3.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.3.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> .</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-renew></A>
<H3><FONT class=extract>g_renew()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_renew(struct_type, mem, n_structs)</FONT></PRE>
<P><FONT class=extract>Reallocates the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> . It returns the new address of the memory, which may have been moved. Care is taken to avoid overflow when calculating the size of the allocated block.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.4.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the currently allocated memory</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.4.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the new allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM></FONT> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-new></A>
<H3><FONT class=extract>g_try_new()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_try_new(struct_type, n_structs)</FONT></PRE>
<P><FONT class=extract>Attempts to allocate <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_new() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new"><CODE class=function><FONT class=extract>g_new()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure. The returned pointer is cast to a pointer to the given type. The function returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> when <EM class=parameter><CODE>n_structs</CODE></EM> is 0 of if an overflow occurs.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.5.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.5.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.8</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-new0></A>
<H3><FONT class=extract>g_try_new0()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_try_new0(struct_type, n_structs)</FONT></PRE>
<P><FONT class=extract>Attempts to allocate <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , initialized to 0's, and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_new0() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new0"><CODE class=function><FONT class=extract>g_new0()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure. The returned pointer is cast to a pointer to the given type. The function returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> when <EM class=parameter><CODE>n_structs</CODE></EM> is 0 of if an overflow occurs.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.6.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.6.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.8</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-renew></A>
<H3><FONT class=extract>g_try_renew()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_try_renew(struct_type, mem, n_structs)</FONT></PRE>
<P><FONT class=extract>Attempts to reallocate the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_renew() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-renew"><CODE class=function><FONT class=extract>g_renew()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure. It returns the new address of the memory, which may have been moved. The function returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> if an overflow occurs.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.7.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the type of the elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the currently allocated memory</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of elements to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.7.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the new allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.8</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc></A>
<H3><FONT class=extract>g_malloc&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_malloc (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory. If <EM class=parameter><CODE>n_bytes</CODE></EM> is 0 it returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.8.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of bytes to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.8.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc0></A>
<H3><FONT class=extract>g_malloc0&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_malloc0 (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory, initialized to 0's. If <EM class=parameter><CODE>n_bytes</CODE></EM> is 0 it returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.9.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of bytes to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.9.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-realloc></A>
<H3><FONT class=extract>g_realloc&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_realloc (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
           <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Reallocates the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory. It returns the new address of the memory, which may have been moved. <EM class=parameter><CODE>mem</CODE></EM> may be </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>, in which case it's considered to have zero-length. <EM class=parameter><CODE>n_bytes</CODE></EM> may be 0, in which case </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> will be returned and <EM class=parameter><CODE>mem</CODE></EM> will be freed unless it is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.10.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the memory to reallocate. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>new size of the memory in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.10.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the new address of the allocated memory</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc></A>
<H3><FONT class=extract>g_try_malloc&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_malloc (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Attempts to allocate <EM class=parameter><CODE>n_bytes</CODE></EM> , and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.11.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>number of bytes to allocate.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.11.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc0></A>
<H3><FONT class=extract>g_try_malloc0&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_malloc0 (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Attempts to allocate <EM class=parameter><CODE>n_bytes</CODE></EM> , initialized to 0's, and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_malloc0&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0"><CODE class=function><FONT class=extract>g_malloc0()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.12.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>number of bytes to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.12.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.8</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-realloc></A>
<H3><FONT class=extract>g_try_realloc&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_realloc (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
               <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Attempts to realloc <EM class=parameter><CODE>mem</CODE></EM> to a new size, <EM class=parameter><CODE>n_bytes</CODE></EM> , and returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure. Contrast with </FONT><A title=g_realloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc"><CODE class=function><FONT class=extract>g_realloc()</FONT></CODE></A><FONT class=extract>, which aborts the program on failure. If <EM class=parameter><CODE>mem</CODE></EM> is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>, behaves the same as </FONT><A title=g_try_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc"><CODE class=function><FONT class=extract>g_try_malloc()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.13.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>previously-allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>number of bytes to allocate.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.13.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc-n></A>
<H3><FONT class=extract>g_malloc_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_malloc_n (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
            <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.14.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.14.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory</FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc0-n></A>
<H3><FONT class=extract>g_malloc0_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_malloc0_n (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
             <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_malloc0&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0"><CODE class=function><FONT class=extract>g_malloc0()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.15.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.15.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the allocated memory</FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-realloc-n></A>
<H3><FONT class=extract>g_realloc_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_realloc_n (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
             <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
             <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_realloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc"><CODE class=function><FONT class=extract>g_realloc()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.16.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the memory to reallocate. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.16.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the new address of the allocated memory</FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc-n></A>
<H3><FONT class=extract>g_try_malloc_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_malloc_n (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_try_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc"><CODE class=function><FONT class=extract>g_try_malloc()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.17.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.17.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc0-n></A>
<H3><FONT class=extract>g_try_malloc0_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_malloc0_n (<EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                 <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_try_malloc0&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0"><CODE class=function><FONT class=extract>g_try_malloc0()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.18.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.18.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-realloc-n></A>
<H3><FONT class=extract>g_try_realloc_n&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_try_realloc_n (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
                 <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                 <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>This function is similar to </FONT><A title=g_try_realloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc"><CODE class=function><FONT class=extract>g_try_realloc()</FONT></CODE></A><FONT class=extract>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.19.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>previously-allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_blocks</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of blocks to allocate</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_block_bytes</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the size of each block in bytes</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.19.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the allocated memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract></FONT></P></DIV>
<P class=since><FONT class=extract>Since 2.24</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-free></A>
<H3><FONT class=extract>g_free&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_free (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Frees the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> . If <EM class=parameter><CODE>mem</CODE></EM> is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> it simply returns.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.20.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the memory to free. </FONT></P></TD>
<TD class=parameter_annotations><SPAN class=annotation><FONT class=extract>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</FONT></SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-clear-pointer></A>
<H3><FONT class=extract>g_clear_pointer&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_clear_pointer (<EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> *pp</CODE></EM>,
                 <EM class=parameter><CODE><A title=GDestroyNotify&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> destroy</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Clears a reference to a variable.</FONT></P>
<P><FONT class=extract><EM class=parameter><CODE>pp</CODE></EM> must not be </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract>If the reference is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> then this function does nothing. Otherwise, the variable is destroyed using <EM class=parameter><CODE>destroy</CODE></EM> and the pointer is set to </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P><FONT class=extract>A macro is also included that allows this function to be used without pointer casts.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.21.8></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>pp</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a pointer to a variable, struct member etc. holding a pointer</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>destroy</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>a function to which a gpointer can be passed, to destroy *<EM class=parameter><CODE>pp</CODE></EM> </FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since><FONT class=extract>Since 2.34</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-alloca></A>
<H3><FONT class=extract>g_alloca()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_alloca(size)</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>size</CODE></EM> bytes on the stack; these bytes will be freed when the current stack frame is cleaned up. This macro essentially just wraps the <CODE class=function>alloca()</CODE> function present on most UNIX variants. Thus it provides the same advantages and pitfalls as <CODE class=function>alloca()</CODE>:</FONT></P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P><FONT class=extract>alloca() is very fast, as on most systems it's implemented by just adjusting the stack pointer register.</FONT></P>
<LI class=listitem>
<P><FONT class=extract>It doesn't cause any memory fragmentation, within its scope, separate <CODE class=function>alloca()</CODE> blocks just build up and are released together at function end.</FONT></P>
<LI class=listitem>
<P><FONT class=extract>Allocation sizes have to fit into the current stack frame. For instance in a threaded environment on Linux, the per-thread stack size is limited to 2 Megabytes, so be sparse with <CODE class=function>alloca()</CODE> uses.</FONT></P>
<LI class=listitem>
<P><FONT class=extract>Allocation failure due to insufficient stack space is not indicated with a </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> return like e.g. with <CODE class=function>malloc()</CODE>. Instead, most systems probably handle it the same way as out of stack space situations from infinite function recursion, i.e. with a segmentation fault.</FONT></P>
<LI class=listitem>
<P><FONT class=extract>Special care has to be taken when mixing <CODE class=function>alloca()</CODE> with GNU C variable sized arrays. Stack space allocated with <CODE class=function>alloca()</CODE> in the same scope as a variable sized array will be freed together with the variable sized array upon exit of that scope, and not upon exit of the enclosing function scope.</FONT></P></LI></UL></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>size</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>number of bytes to allocate.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>space for <EM class=parameter><CODE>size</CODE></EM> bytes, allocated on the stack</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-newa></A>
<H3><FONT class=extract>g_newa()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_newa(struct_type, n_structs)</FONT></PRE>
<P><FONT class=extract>Wraps </FONT><A title=g_alloca() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-alloca"><CODE class=function><FONT class=extract>g_alloca()</FONT></CODE></A><FONT class=extract> in a more typesafe manner.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.23.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>struct_type</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>Type of memory chunks to be allocated</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>n_structs</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>Number of chunks to be allocated</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.23.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>Pointer to stack space for <EM class=parameter><CODE>n_structs</CODE></EM> chunks of type <EM class=parameter><CODE>struct_type</CODE></EM></FONT> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-memmove></A>
<H3><FONT class=extract>g_memmove()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_memmove(dest,src,len)</FONT></PRE>
<DIV class=warning>
<P><FONT class=extract><CODE class=literal>g_memmove</CODE> has been deprecated since version 2.40 and should not be used in newly-written code.</FONT></P>
<P><FONT class=extract>Just use <CODE class=function>memmove()</CODE>.</FONT></P></DIV>
<P><FONT class=extract>Copies a block of memory <EM class=parameter><CODE>len</CODE></EM> bytes long, from <EM class=parameter><CODE>src</CODE></EM> to <EM class=parameter><CODE>dest</CODE></EM> . The source and destination areas may overlap.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.24.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>dest</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the destination address to copy the bytes to.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>src</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the source address to copy the bytes from.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>len</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of bytes to copy.</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-memdup></A>
<H3><FONT class=extract>g_memdup&nbsp;()</FONT></H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue><FONT class=extract>gpointer</FONT></SPAN></A>
<FONT class=extract>g_memdup (<EM class=parameter><CODE><A title=gconstpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> mem</CODE></EM>,
          <EM class=parameter><CODE><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> byte_size</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Allocates <EM class=parameter><CODE>byte_size</CODE></EM> bytes of memory, and copies <EM class=parameter><CODE>byte_size</CODE></EM> bytes into it from <EM class=parameter><CODE>mem</CODE></EM> . If <EM class=parameter><CODE>mem</CODE></EM> is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> it returns </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.25.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>mem</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the memory to copy.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>byte_size</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the number of bytes to copy.</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.25.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>a pointer to the newly-allocated copy of the memory, or </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> if <EM class=parameter><CODE>mem</CODE></EM> is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>.</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-set-vtable></A>
<H3><FONT class=extract>g_mem_set_vtable&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_mem_set_vtable (<EM class=parameter><CODE><A title="struct GMemVTable" class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type>GMemVTable</SPAN></A> *vtable</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Sets the </FONT><A title="struct GMemVTable" class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type><FONT class=extract>GMemVTable</FONT></SPAN></A><FONT class=extract> to use for memory allocation. You can use this to provide custom memory allocation routines.</FONT></P>
<P><FONT class=extract>The <EM class=parameter><CODE>vtable</CODE></EM> only needs to provide <CODE class=function>malloc()</CODE>, <CODE class=function>realloc()</CODE>, and <CODE class=function>free()</CODE> functions; GLib can provide default implementations of the others. The <CODE class=function>malloc()</CODE> and <CODE class=function>realloc()</CODE> implementations should return </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract> on failure, GLib will handle error-checking for you. <EM class=parameter><CODE>vtable</CODE></EM> is copied, so need not persist after this function has been called.</FONT></P>
<P><FONT class=extract>Note that this function must be called before using any other GLib functions.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.26.7></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>vtable</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>table of memory allocation routines.</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-is-system-malloc></A>
<H3><FONT class=extract>g_mem_is_system_malloc&nbsp;()</FONT></H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue><FONT class=extract>gboolean</FONT></SPAN></A>
<FONT class=extract>g_mem_is_system_malloc (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Checks whether the allocator used by </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract> is the system's malloc implementation. If it returns </FONT><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract> memory allocated with <CODE class=function>malloc()</CODE> can be used interchangeable with memory allocated using </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract>. This function is useful for avoiding an extra copy of allocated memory returned by a non-GLib-based API.</FONT></P>
<P><FONT class=extract>A different allocator can be set using </FONT><A title=g_mem_set_vtable&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function><FONT class=extract>g_mem_set_vtable()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.7.27.6></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>if </FONT><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract>, <CODE class=function>malloc()</CODE> and </FONT><A title=g_malloc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function><FONT class=extract>g_malloc()</FONT></CODE></A><FONT class=extract> can be mixed.</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-profile></A>
<H3><FONT class=extract>g_mem_profile&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_mem_profile (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Outputs a summary of memory usage.</FONT></P>
<P><FONT class=extract>It outputs the frequency of allocations of different sizes, the total number of bytes which have been allocated, the total number of bytes which have been freed, and the difference between the previous two values, i.e. the number of bytes still in use.</FONT></P>
<P><FONT class=extract>Note that this function will not output anything unless you have previously installed the </FONT><A title=glib_mem_profiler_table class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#glib-mem-profiler-table"><SPAN class=type><FONT class=extract>glib_mem_profiler_table</FONT></SPAN></A><FONT class=extract> with </FONT><A title=g_mem_set_vtable&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function><FONT class=extract>g_mem_set_vtable()</FONT></CODE></A><FONT class=extract>.</FONT></P></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=g-mem-gc-friendly></A>
<H3><FONT class=extract>g_mem_gc_friendly</FONT></H3><PRE class=programlisting><FONT class=extract>extern gboolean g_mem_gc_friendly;
</FONT></PRE>
<P><FONT class=extract>This variable is </FONT><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract> if the <CODE class=literal>G_DEBUG</CODE> environment variable includes the key <CODE class=literal>gc-friendly</CODE>.</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GMemVTable></A>
<H3><FONT class=extract>struct GMemVTable</FONT></H3><PRE class=programlisting><FONT class=extract>struct GMemVTable {
  gpointer (*malloc)      (gsize    n_bytes);
  gpointer (*realloc)     (gpointer mem,
			   gsize    n_bytes);
  void     (*free)        (gpointer mem);
  /* optional; set to NULL if not used ! */
  gpointer (*calloc)      (gsize    n_blocks,
			   gsize    n_block_bytes);
  gpointer (*try_malloc)  (gsize    n_bytes);
  gpointer (*try_realloc) (gpointer mem,
			   gsize    n_bytes);
};
</FONT></PRE>
<P><FONT class=extract>A set of functions used to perform memory allocation. The same </FONT><A title="struct GMemVTable" class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type><FONT class=extract>GMemVTable</FONT></SPAN></A><FONT class=extract> must be used for all allocations in the same program; a call to </FONT><A title=g_mem_set_vtable&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function><FONT class=extract>g_mem_set_vtable()</FONT></CODE></A><FONT class=extract>, if it exists, should be prior to any use of GLib.</FONT></P>
<DIV class=refsect3><A name=id-1.4.7.8.3.5></A>
<H4><FONT class=extract>Members</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=struct_members_name width=300></COL>
<COL class=struct_members_description></COL>
<COL class=struct_members_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.malloc></A><FONT class=extract>malloc</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use for allocating memory.</FONT></P></TD>
<TD class=struct_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.realloc></A><FONT class=extract>realloc</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use for reallocating memory.</FONT></P></TD>
<TD class=struct_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.free></A><FONT class=extract>free</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use to free memory.</FONT></P></TD>
<TD class=struct_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.calloc></A><FONT class=extract>calloc</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use for allocating zero-filled memory.</FONT></P></TD>
<TD class=struct_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.try-malloc></A><FONT class=extract>try_malloc</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use for allocating memory without a default error handler.</FONT></P></TD>
<TD class=struct_member_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.try-realloc></A><FONT class=extract>try_realloc</FONT></CODE></EM><FONT class=extract>&nbsp;()</FONT></P></TD>
<TD class=struct_member_description>
<P><FONT class=extract>function to use for reallocating memory without a default error handler.</FONT></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=glib-mem-profiler-table></A>
<H3><FONT class=extract>glib_mem_profiler_table</FONT></H3><PRE class=programlisting><FONT class=extract>extern GMemVTable&nbsp;*glib_mem_profiler_table;
</FONT></PRE>
<P><FONT class=extract>A </FONT><A title="struct GMemVTable" class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type><FONT class=extract>GMemVTable</FONT></SPAN></A><FONT class=extract> containing profiling variants of the memory allocation functions. Use them together with </FONT><A title=g_mem_profile&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-profile"><CODE class=function><FONT class=extract>g_mem_profile()</FONT></CODE></A><FONT class=extract> in order to get information about the memory allocation pattern of your program.</FONT></P></DIV></DIV>