<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Memory-Allocation.top_of_page></A>Memory Allocation</SPAN></H2>
<P>Memory Allocation &#8212; general memory-handling</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Memory-Allocation.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_new() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new">g_new</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_new0() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new0">g_new0</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_renew() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-renew">g_renew</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_try_new() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-new">g_try_new</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_try_new0() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-new0">g_try_new0</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_try_renew() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-renew">g_try_renew</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc">g_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_malloc0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0">g_malloc0</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_realloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc">g_realloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc">g_try_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_malloc0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0">g_try_malloc0</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_realloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc">g_try_realloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_malloc_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc-n">g_malloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_malloc0_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0-n">g_malloc0_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_realloc_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc-n">g_realloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_malloc_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc-n">g_try_malloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_malloc0_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0-n">g_try_malloc0_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_try_realloc_n&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc-n">g_try_realloc_n</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free">g_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_clear_pointer&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-clear-pointer">g_clear_pointer</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_alloca() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-alloca">g_alloca</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_newa() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-newa">g_newa</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_memmove() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-memmove">g_memmove</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_memdup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-memdup">g_memdup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_mem_set_vtable&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable">g_mem_set_vtable</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_mem_is_system_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-is-system-malloc">g_mem_is_system_malloc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_mem_profile&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-profile">g_mem_profile</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=variable_type>extern gboolean </TD>
<TD class=function_name><A class=link title=g_mem_gc_friendly href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-gc-friendly">g_mem_gc_friendly</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A class=link title="struct GMemVTable" href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable">GMemVTable</A></TD></TR>
<TR>
<TD class=variable_type>extern GMemVTable *</TD>
<TD class=function_name><A class=link title=glib_mem_profiler_table href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#glib-mem-profiler-table">glib_mem_profiler_table</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.description></A>
<H2>Description</H2>
<P>These functions provide support for allocating and freeing memory.</P>
<P>If any call to allocate memory fails, the application is terminated. This also means that there is no need to check if the call succeeded.</P>
<P>It's important to match <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A> (and wrappers such as <A class=link title=g_new() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new"><CODE class=function>g_new()</CODE></A>) with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>, <A class=link title=g_slice_alloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-alloc"><CODE class=function>g_slice_alloc()</CODE></A> and wrappers such as <A class=link title=g_slice_new() href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-new"><CODE class=function>g_slice_new()</CODE></A>) with <A class=link title=g_slice_free() href="https://developer.gnome.org/glib/stable/glib-Memory-Slices.html#g-slice-free"><CODE class=function>g_slice_free()</CODE></A>, plain <CODE class=function>malloc()</CODE> with <CODE class=function>free()</CODE>, and (if you're using C++) new with delete and new[] with delete[]. Otherwise bad things can happen, since these allocators may use different memory pools (and new/delete call constructors and destructors). See also <A class=link title=g_mem_set_vtable&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function>g_mem_set_vtable()</CODE></A>.</P></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-new></A>
<H3>g_new()</H3><PRE class=programlisting>#define             g_new(struct_type, n_structs)</PRE>
<P>Allocates <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> . The returned pointer is cast to a pointer to the given type. If <EM class=parameter><CODE>n_structs</CODE></EM> is 0 it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. Care is taken to avoid overflow when calculating the size of the allocated block.</P>
<P>Since the returned pointer is already casted to the right type, it is normally unnecessary to cast it explicitly, and doing so might hide memory allocation errors.</P>
<DIV class=refsect3><A name=id-1.4.7.7.2.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.2.7></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-new0></A>
<H3>g_new0()</H3><PRE class=programlisting>#define             g_new0(struct_type, n_structs)</PRE>
<P>Allocates <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , initialized to 0's. The returned pointer is cast to a pointer to the given type. If <EM class=parameter><CODE>n_structs</CODE></EM> is 0 it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. Care is taken to avoid overflow when calculating the size of the allocated block.</P>
<P>Since the returned pointer is already casted to the right type, it is normally unnecessary to cast it explicitly, and doing so might hide memory allocation errors.</P>
<DIV class=refsect3><A name=id-1.4.7.7.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.3.7></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-renew></A>
<H3>g_renew()</H3><PRE class=programlisting>#define             g_renew(struct_type, mem, n_structs)</PRE>
<P>Reallocates the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> . It returns the new address of the memory, which may have been moved. Care is taken to avoid overflow when calculating the size of the allocated block.</P>
<DIV class=refsect3><A name=id-1.4.7.7.4.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the currently allocated memory</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.4.6></A>
<H4>Returns</H4>
<P>a pointer to the new allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-new></A>
<H3>g_try_new()</H3><PRE class=programlisting>#define             g_try_new(struct_type, n_structs)</PRE>
<P>Attempts to allocate <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_new() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new"><CODE class=function>g_new()</CODE></A>, which aborts the program on failure. The returned pointer is cast to a pointer to the given type. The function returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> when <EM class=parameter><CODE>n_structs</CODE></EM> is 0 of if an overflow occurs.</P>
<DIV class=refsect3><A name=id-1.4.7.7.5.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.5.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-new0></A>
<H3>g_try_new0()</H3><PRE class=programlisting>#define             g_try_new0(struct_type, n_structs)</PRE>
<P>Attempts to allocate <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , initialized to 0's, and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_new0() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new0"><CODE class=function>g_new0()</CODE></A>, which aborts the program on failure. The returned pointer is cast to a pointer to the given type. The function returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> when <EM class=parameter><CODE>n_structs</CODE></EM> is 0 of if an overflow occurs.</P>
<DIV class=refsect3><A name=id-1.4.7.7.6.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.6.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-renew></A>
<H3>g_try_renew()</H3><PRE class=programlisting>#define             g_try_renew(struct_type, mem, n_structs)</PRE>
<P>Attempts to reallocate the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_structs</CODE></EM> elements of type <EM class=parameter><CODE>struct_type</CODE></EM> , and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_renew() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-renew"><CODE class=function>g_renew()</CODE></A>, which aborts the program on failure. It returns the new address of the memory, which may have been moved. The function returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if an overflow occurs.</P>
<DIV class=refsect3><A name=id-1.4.7.7.7.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>the type of the elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the currently allocated memory</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>the number of elements to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.7.6></A>
<H4>Returns</H4>
<P>a pointer to the new allocated memory, cast to a pointer to <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc></A>
<H3>g_malloc&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_malloc (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Allocates <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory. If <EM class=parameter><CODE>n_bytes</CODE></EM> is 0 it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.8.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>the number of bytes to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.8.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc0></A>
<H3>g_malloc0&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_malloc0 (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Allocates <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory, initialized to 0's. If <EM class=parameter><CODE>n_bytes</CODE></EM> is 0 it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.9.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>the number of bytes to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.9.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-realloc></A>
<H3>g_realloc&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_realloc (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Reallocates the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> , so that it now has space for <EM class=parameter><CODE>n_bytes</CODE></EM> bytes of memory. It returns the new address of the memory, which may have been moved. <EM class=parameter><CODE>mem</CODE></EM> may be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, in which case it's considered to have zero-length. <EM class=parameter><CODE>n_bytes</CODE></EM> may be 0, in which case <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> will be returned and <EM class=parameter><CODE>mem</CODE></EM> will be freed unless it is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the memory to reallocate. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>new size of the memory in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.10.6></A>
<H4>Returns</H4>
<P>the new address of the allocated memory</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc></A>
<H3>g_try_malloc&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_malloc (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Attempts to allocate <EM class=parameter><CODE>n_bytes</CODE></EM> , and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A>, which aborts the program on failure.</P>
<DIV class=refsect3><A name=id-1.4.7.7.11.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>number of bytes to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.11.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc0></A>
<H3>g_try_malloc0&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_malloc0 (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Attempts to allocate <EM class=parameter><CODE>n_bytes</CODE></EM> , initialized to 0's, and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_malloc0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0"><CODE class=function>g_malloc0()</CODE></A>, which aborts the program on failure.</P>
<DIV class=refsect3><A name=id-1.4.7.7.12.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>number of bytes to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.12.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-realloc></A>
<H3>g_try_realloc&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_realloc (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_bytes</CODE></EM>);</PRE>
<P>Attempts to realloc <EM class=parameter><CODE>mem</CODE></EM> to a new size, <EM class=parameter><CODE>n_bytes</CODE></EM> , and returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. Contrast with <A class=link title=g_realloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc"><CODE class=function>g_realloc()</CODE></A>, which aborts the program on failure. If <EM class=parameter><CODE>mem</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, behaves the same as <A class=link title=g_try_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc"><CODE class=function>g_try_malloc()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.13.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>previously-allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>n_bytes</P></TD>
<TD class=parameter_description>
<P>number of bytes to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.13.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc-n></A>
<H3>g_malloc_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_malloc_n (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.14.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.14.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-malloc0-n></A>
<H3>g_malloc0_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_malloc0_n (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_malloc0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc0"><CODE class=function>g_malloc0()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.15.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.15.6></A>
<H4>Returns</H4>
<P>a pointer to the allocated memory</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-realloc-n></A>
<H3>g_realloc_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_realloc_n (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_realloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-realloc"><CODE class=function>g_realloc()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.16.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the memory to reallocate. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.16.6></A>
<H4>Returns</H4>
<P>the new address of the allocated memory</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc-n></A>
<H3>g_try_malloc_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_malloc_n (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_try_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc"><CODE class=function>g_try_malloc()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.17.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.17.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-malloc0-n></A>
<H3>g_try_malloc0_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_malloc0_n (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_try_malloc0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-malloc0"><CODE class=function>g_try_malloc0()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.18.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.18.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-try-realloc-n></A>
<H3>g_try_realloc_n&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_try_realloc_n (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_blocks</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n_block_bytes</CODE></EM>);</PRE>
<P>This function is similar to <A class=link title=g_try_realloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-try-realloc"><CODE class=function>g_try_realloc()</CODE></A>, allocating (<EM class=parameter><CODE>n_blocks</CODE></EM> * <EM class=parameter><CODE>n_block_bytes</CODE></EM> ) bytes, but care is taken to detect possible overflow during multiplication.</P>
<DIV class=refsect3><A name=id-1.4.7.7.19.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>previously-allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>n_blocks</P></TD>
<TD class=parameter_description>
<P>the number of blocks to allocate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_block_bytes</P></TD>
<TD class=parameter_description>
<P>the size of each block in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.19.6></A>
<H4>Returns</H4>
<P>the allocated memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-free></A>
<H3>g_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_free (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> mem</CODE></EM>);</PRE>
<P>Frees the memory pointed to by <EM class=parameter><CODE>mem</CODE></EM> . If <EM class=parameter><CODE>mem</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> it simply returns.</P>
<DIV class=refsect3><A name=id-1.4.7.7.20.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the memory to free. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-clear-pointer></A>
<H3>g_clear_pointer&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_clear_pointer (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> *pp</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> destroy</CODE></EM>);</PRE>
<P>Clears a reference to a variable.</P>
<P><EM class=parameter><CODE>pp</CODE></EM> must not be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>If the reference is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> then this function does nothing. Otherwise, the variable is destroyed using <EM class=parameter><CODE>destroy</CODE></EM> and the pointer is set to <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>A macro is also included that allows this function to be used without pointer casts.</P>
<DIV class=refsect3><A name=id-1.4.7.7.21.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>pp</P></TD>
<TD class=parameter_description>
<P>a pointer to a variable, struct member etc. holding a pointer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>destroy</P></TD>
<TD class=parameter_description>
<P>a function to which a gpointer can be passed, to destroy *<EM class=parameter><CODE>pp</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-alloca></A>
<H3>g_alloca()</H3><PRE class=programlisting>#define             g_alloca(size)</PRE>
<P>Allocates <EM class=parameter><CODE>size</CODE></EM> bytes on the stack; these bytes will be freed when the current stack frame is cleaned up. This macro essentially just wraps the <CODE class=function>alloca()</CODE> function present on most UNIX variants. Thus it provides the same advantages and pitfalls as <CODE class=function>alloca()</CODE>:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>alloca() is very fast, as on most systems it's implemented by just adjusting the stack pointer register.</P></LI>
<LI class=listitem>
<P>It doesn't cause any memory fragmentation, within its scope, separate <CODE class=function>alloca()</CODE> blocks just build up and are released together at function end.</P></LI>
<LI class=listitem>
<P>Allocation sizes have to fit into the current stack frame. For instance in a threaded environment on Linux, the per-thread stack size is limited to 2 Megabytes, so be sparse with <CODE class=function>alloca()</CODE> uses.</P></LI>
<LI class=listitem>
<P>Allocation failure due to insufficient stack space is not indicated with a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> return like e.g. with <CODE class=function>malloc()</CODE>. Instead, most systems probably handle it the same way as out of stack space situations from infinite function recursion, i.e. with a segmentation fault.</P></LI>
<LI class=listitem>
<P>Special care has to be taken when mixing <CODE class=function>alloca()</CODE> with GNU C variable sized arrays. Stack space allocated with <CODE class=function>alloca()</CODE> in the same scope as a variable sized array will be freed together with the variable sized array upon exit of that scope, and not upon exit of the enclosing function scope.</P></LI></UL></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>size</P></TD>
<TD class=parameter_description>
<P>number of bytes to allocate.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.22.7></A>
<H4>Returns</H4>
<P>space for <EM class=parameter><CODE>size</CODE></EM> bytes, allocated on the stack</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-newa></A>
<H3>g_newa()</H3><PRE class=programlisting>#define             g_newa(struct_type, n_structs)</PRE>
<P>Wraps <A class=link title=g_alloca() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-alloca"><CODE class=function>g_alloca()</CODE></A> in a more typesafe manner.</P>
<DIV class=refsect3><A name=id-1.4.7.7.23.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>struct_type</P></TD>
<TD class=parameter_description>
<P>Type of memory chunks to be allocated</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_structs</P></TD>
<TD class=parameter_description>
<P>Number of chunks to be allocated</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.23.6></A>
<H4>Returns</H4>
<P>Pointer to stack space for <EM class=parameter><CODE>n_structs</CODE></EM> chunks of type <EM class=parameter><CODE>struct_type</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-memmove></A>
<H3>g_memmove()</H3><PRE class=programlisting>#define             g_memmove(dest,src,len)</PRE>
<DIV class=warning>
<P><CODE class=literal>g_memmove</CODE> has been deprecated since version 2.40 and should not be used in newly-written code.</P>
<P>Just use <CODE class=function>memmove()</CODE>.</P></DIV>
<P>Copies a block of memory <EM class=parameter><CODE>len</CODE></EM> bytes long, from <EM class=parameter><CODE>src</CODE></EM> to <EM class=parameter><CODE>dest</CODE></EM> . The source and destination areas may overlap.</P>
<DIV class=refsect3><A name=id-1.4.7.7.24.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>the destination address to copy the bytes to.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>the source address to copy the bytes from.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>the number of bytes to copy.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-memdup></A>
<H3>g_memdup&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_memdup (<EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> mem</CODE></EM>,
          <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> byte_size</CODE></EM>);</PRE>
<P>Allocates <EM class=parameter><CODE>byte_size</CODE></EM> bytes of memory, and copies <EM class=parameter><CODE>byte_size</CODE></EM> bytes into it from <EM class=parameter><CODE>mem</CODE></EM> . If <EM class=parameter><CODE>mem</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.25.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mem</P></TD>
<TD class=parameter_description>
<P>the memory to copy.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>byte_size</P></TD>
<TD class=parameter_description>
<P>the number of bytes to copy.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.7.7.25.6></A>
<H4>Returns</H4>
<P>a pointer to the newly-allocated copy of the memory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if <EM class=parameter><CODE>mem</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-set-vtable></A>
<H3>g_mem_set_vtable&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_mem_set_vtable (<EM class=parameter><CODE><A class=link title="struct GMemVTable" href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type>GMemVTable</SPAN></A> *vtable</CODE></EM>);</PRE>
<P>Sets the <A class=link title="struct GMemVTable" href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type>GMemVTable</SPAN></A> to use for memory allocation. You can use this to provide custom memory allocation routines.</P>
<P>The <EM class=parameter><CODE>vtable</CODE></EM> only needs to provide <CODE class=function>malloc()</CODE>, <CODE class=function>realloc()</CODE>, and <CODE class=function>free()</CODE> functions; GLib can provide default implementations of the others. The <CODE class=function>malloc()</CODE> and <CODE class=function>realloc()</CODE> implementations should return <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure, GLib will handle error-checking for you. <EM class=parameter><CODE>vtable</CODE></EM> is copied, so need not persist after this function has been called.</P>
<P>Note that this function must be called before using any other GLib functions.</P>
<DIV class=refsect3><A name=id-1.4.7.7.26.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>vtable</P></TD>
<TD class=parameter_description>
<P>table of memory allocation routines.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-is-system-malloc></A>
<H3>g_mem_is_system_malloc&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_mem_is_system_malloc (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Checks whether the allocator used by <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A> is the system's malloc implementation. If it returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> memory allocated with <CODE class=function>malloc()</CODE> can be used interchangeable with memory allocated using <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A>. This function is useful for avoiding an extra copy of allocated memory returned by a non-GLib-based API.</P>
<P>A different allocator can be set using <A class=link title=g_mem_set_vtable&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function>g_mem_set_vtable()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.7.7.27.6></A>
<H4>Returns</H4>
<P>if <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, <CODE class=function>malloc()</CODE> and <A class=link title=g_malloc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-malloc"><CODE class=function>g_malloc()</CODE></A> can be mixed.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mem-profile></A>
<H3>g_mem_profile&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_mem_profile (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Outputs a summary of memory usage.</P>
<P>It outputs the frequency of allocations of different sizes, the total number of bytes which have been allocated, the total number of bytes which have been freed, and the difference between the previous two values, i.e. the number of bytes still in use.</P>
<P>Note that this function will not output anything unless you have previously installed the <A class=link title=glib_mem_profiler_table href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#glib-mem-profiler-table"><SPAN class=type>glib_mem_profiler_table</SPAN></A> with <A class=link title=g_mem_set_vtable&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function>g_mem_set_vtable()</CODE></A>.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Memory-Allocation.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=g-mem-gc-friendly></A>
<H3>g_mem_gc_friendly</H3><PRE class=programlisting>extern gboolean g_mem_gc_friendly;
</PRE>
<P>This variable is <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the <CODE class=literal>G_DEBUG</CODE> environment variable includes the key <CODE class=literal>gc-friendly</CODE>.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GMemVTable></A>
<H3>struct GMemVTable</H3><PRE class=programlisting>struct GMemVTable {
  gpointer (*malloc)      (gsize    n_bytes);
  gpointer (*realloc)     (gpointer mem,
			   gsize    n_bytes);
  void     (*free)        (gpointer mem);
  /* optional; set to NULL if not used ! */
  gpointer (*calloc)      (gsize    n_blocks,
			   gsize    n_block_bytes);
  gpointer (*try_malloc)  (gsize    n_bytes);
  gpointer (*try_realloc) (gpointer mem,
			   gsize    n_bytes);
};
</PRE>
<P>A set of functions used to perform memory allocation. The same <A class=link title="struct GMemVTable" href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type>GMemVTable</SPAN></A> must be used for all allocations in the same program; a call to <A class=link title=g_mem_set_vtable&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-set-vtable"><CODE class=function>g_mem_set_vtable()</CODE></A>, if it exists, should be prior to any use of GLib.</P>
<DIV class=refsect3><A name=id-1.4.7.8.3.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=struct_members_name width=300></COL>
<COL class=struct_members_description></COL>
<COL class=struct_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.malloc></A>malloc</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use for allocating memory.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.realloc></A>realloc</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use for reallocating memory.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.free></A>free</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use to free memory.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.calloc></A>calloc</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use for allocating zero-filled memory.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.try-malloc></A>try_malloc</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use for allocating memory without a default error handler.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GMemVTable.try-realloc></A>try_realloc</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>function to use for reallocating memory without a default error handler.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=glib-mem-profiler-table></A>
<H3>glib_mem_profiler_table</H3><PRE class=programlisting>extern GMemVTable&nbsp;*glib_mem_profiler_table;
</PRE>
<P>A <A class=link title="struct GMemVTable" href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#GMemVTable"><SPAN class=type>GMemVTable</SPAN></A> containing profiling variants of the memory allocation functions. Use them together with <A class=link title=g_mem_profile&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-mem-profile"><CODE class=function>g_mem_profile()</CODE></A> in order to get information about the memory allocation pattern of your program.</P></DIV></DIV>