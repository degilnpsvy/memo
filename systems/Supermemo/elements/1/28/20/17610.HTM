<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Warnings-and-Assertions.top_of_page></A>Message Output and Debugging Functions</SPAN></H2>
<P>Message Output and Debugging Functions &#8212; functions to output messages and help debug applications</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_print&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print">g_print</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A> </TD>
<TD class=function_name><A title=g_set_print_handler&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-set-print-handler">g_set_print_handler</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc">*GPrintFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_printerr&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-printerr">g_printerr</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A> </TD>
<TD class=function_name><A title=g_set_printerr_handler&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-set-printerr-handler">g_set_printerr_handler</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_return_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_return_val_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_return_if_reached class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-reached">g_return_if_reached</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_return_val_if_reached() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-reached">g_return_val_if_reached</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_warn_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-warn-if-fail">g_warn_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=g_warn_if_reached class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-warn-if-reached">g_warn_if_reached</A></TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_on_error_query&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query">g_on_error_query</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_on_error_stack_trace&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-stack-trace">g_on_error_stack_trace</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_BREAKPOINT class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#G-BREAKPOINT:CAPS">G_BREAKPOINT</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.description></A>
<H2>Description</H2>
<P>These functions provide support for outputting messages.</P>
<P><FONT class=extract>The g_return family of macros (</FONT><A title=g_return_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function><FONT class=extract>g_return_if_fail()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_return_val_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail"><CODE class=function><FONT class=extract>g_return_val_if_fail()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_return_if_reached class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-reached"><CODE class=function><FONT class=extract>g_return_if_reached()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_return_val_if_reached() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-reached"><CODE class=function><FONT class=extract>g_return_val_if_reached()</FONT></CODE></A><FONT class=extract>) should only be used for programming errors, a typical use case is checking for invalid parameters at the beginning of a public function. They should not be used if you just mean "if (error) return", they should only be used if you mean "if (bug in program) return". The program behavior is generally considered undefined after one of these checks fails. They are not intended for normal control flow, only to give a perhaps-helpful warning before giving up.</FONT></P></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-print></A>
<H3><FONT class=extract>g_print&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_print (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
         <EM class=parameter><CODE>...</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Outputs a formatted message via the print handler. The default print handler simply outputs the message to stdout, without appending a trailing new-line character. Typically, <EM class=parameter><CODE>format</CODE></EM> should end with its own new-line character.</FONT></P>
<P><FONT class=extract>g_print() should not be used from within libraries for debugging messages, since it may be redirected by applications to special purpose message windows or even files. Instead, libraries should use </FONT><A title=g_log&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function><FONT class=extract>g_log()</FONT></CODE></A><FONT class=extract>, or the convenience functions </FONT><A title=g_message() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-message"><CODE class=function><FONT class=extract>g_message()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_warning() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning"><CODE class=function><FONT class=extract>g_warning()</FONT></CODE></A><FONT class=extract> and </FONT><A title=g_error() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function><FONT class=extract>g_error()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.2.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>format</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the message format. See the <CODE class=function>printf()</CODE> documentation</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>...</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the parameters to insert into the format string</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-print-handler></A>
<H3><FONT class=extract>g_set_print_handler&nbsp;()</FONT></H3><PRE class=programlisting><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue><FONT class=extract>GPrintFunc</FONT></SPAN></A>
<FONT class=extract>g_set_print_handler (<EM class=parameter><CODE><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=type>GPrintFunc</SPAN></A> func</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Sets the print handler.</FONT></P>
<P><FONT class=extract>Any messages passed to </FONT><A title=g_print&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print"><CODE class=function><FONT class=extract>g_print()</FONT></CODE></A><FONT class=extract> will be output via the new handler. The default handler simply outputs the message to stdout. By providing your own handler you can redirect the output, to a GTK+ widget or a log file for example.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.3.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>func</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the new print handler</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.11.6.3.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the old print handler</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GPrintFunc></A>
<H3><FONT class=extract>GPrintFunc&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GPrintFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Specifies the type of the print handler functions. These are called with the complete formatted string to output.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.4.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>string</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the message to output</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-printerr></A>
<H3><FONT class=extract>g_printerr&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_printerr (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
            <EM class=parameter><CODE>...</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Outputs a formatted message via the error message handler. The default handler simply outputs the message to stderr, without appending a trailing new-line character. Typically, <EM class=parameter><CODE>format</CODE></EM> should end with its own new-line character.</FONT></P>
<P><FONT class=extract>g_printerr() should not be used from within libraries. Instead </FONT><A title=g_log&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function><FONT class=extract>g_log()</FONT></CODE></A><FONT class=extract> should be used, or the convenience functions </FONT><A title=g_message() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-message"><CODE class=function><FONT class=extract>g_message()</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_warning() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning"><CODE class=function><FONT class=extract>g_warning()</FONT></CODE></A><FONT class=extract> and </FONT><A title=g_error() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function><FONT class=extract>g_error()</FONT></CODE></A><FONT class=extract>.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.5.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>format</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the message format. See the <CODE class=function>printf()</CODE> documentation</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>...</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the parameters to insert into the format string</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-printerr-handler></A>
<H3><FONT class=extract>g_set_printerr_handler&nbsp;()</FONT></H3><PRE class=programlisting><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue><FONT class=extract>GPrintFunc</FONT></SPAN></A>
<FONT class=extract>g_set_printerr_handler (<EM class=parameter><CODE><A title=GPrintFunc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=type>GPrintFunc</SPAN></A> func</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Sets the handler for printing error messages.</FONT></P>
<P><FONT class=extract>Any messages passed to </FONT><A title=g_printerr&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-printerr"><CODE class=function><FONT class=extract>g_printerr()</FONT></CODE></A><FONT class=extract> will be output via the new handler. The default handler simply outputs the message to stderr. By providing your own handler you can redirect the output, to a GTK+ widget or a log file for example.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.6.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>func</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the new error message handler</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.11.6.6.7></A>
<H4><FONT class=extract>Returns</FONT></H4>
<P><FONT class=extract>the old error message handler</FONT></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-if-fail></A>
<H3><FONT class=extract>g_return_if_fail()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_return_if_fail(expr)</FONT></PRE>
<P><FONT class=extract>Verifies that the expression <EM class=parameter><CODE>expr</CODE></EM> , usually representing a precondition, evaluates to </FONT><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract>. If the function returns a value, use </FONT><A title=g_return_val_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail"><CODE class=function><FONT class=extract>g_return_val_if_fail()</FONT></CODE></A><FONT class=extract> instead.</FONT></P>
<P><FONT class=extract>If <EM class=parameter><CODE>expr</CODE></EM> evaluates to </FONT><A title=FALSE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal><FONT class=extract>FALSE</FONT></CODE></A><FONT class=extract>, the current function should be considered to have undefined behaviour (a programmer error). The only correct solution to such an error is to change the module that is calling the current function, so that it avoids this incorrect call.</FONT></P>
<P><FONT class=extract>To make this undefined behaviour visible, if <EM class=parameter><CODE>expr</CODE></EM> evaluates to </FONT><A title=FALSE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal><FONT class=extract>FALSE</FONT></CODE></A><FONT class=extract>, the result is usually that a critical message is logged and the current function returns.</FONT></P>
<P><FONT class=extract>If G_DISABLE_CHECKS is defined then the check is not performed. You should therefore not depend on any side effects of <EM class=parameter><CODE>expr</CODE></EM> .</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.7.8></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>expr</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the expression to check</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-val-if-fail></A>
<H3><FONT class=extract>g_return_val_if_fail()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_return_val_if_fail(expr,val)</FONT></PRE>
<P><FONT class=extract>Verifies that the expression <EM class=parameter><CODE>expr</CODE></EM> , usually representing a precondition, evaluates to </FONT><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal><FONT class=extract>TRUE</FONT></CODE></A><FONT class=extract>. If the function does not return a value, use </FONT><A title=g_return_if_fail() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function><FONT class=extract>g_return_if_fail()</FONT></CODE></A><FONT class=extract> instead.</FONT></P>
<P><FONT class=extract>If <EM class=parameter><CODE>expr</CODE></EM> evaluates to </FONT><A title=FALSE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal><FONT class=extract>FALSE</FONT></CODE></A><FONT class=extract>, the current function should be considered to have undefined behaviour (a programmer error). The only correct solution to such an error is to change the module that is calling the current function, so that it avoids this incorrect call.</FONT></P>
<P><FONT class=extract>To make this undefined behaviour visible, if <EM class=parameter><CODE>expr</CODE></EM> evaluates to </FONT><A title=FALSE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal><FONT class=extract>FALSE</FONT></CODE></A><FONT class=extract>, the result is usually that a critical message is logged and <EM class=parameter><CODE>val</CODE></EM> is returned from the current function.</FONT></P>
<P><FONT class=extract>If G_DISABLE_CHECKS is defined then the check is not performed. You should therefore not depend on any side effects of <EM class=parameter><CODE>expr</CODE></EM> .</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.8.8></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>expr</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the expression to check</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>val</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the value to return from the current function if the expression is not true</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-if-reached></A>
<H3><FONT class=extract>g_return_if_reached</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_return_if_reached()</FONT></PRE>
<P><FONT class=extract>Logs a critical message and returns from the current function. This can only be used in functions which do not return a value.</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-val-if-reached></A>
<H3><FONT class=extract>g_return_val_if_reached()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_return_val_if_reached(val)</FONT></PRE>
<P><FONT class=extract>Logs a critical message and returns <EM class=parameter><CODE>val</CODE></EM> .</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.10.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>val</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the value to return from the current function</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-warn-if-fail></A>
<H3><FONT class=extract>g_warn_if_fail()</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_warn_if_fail(expr)</FONT></PRE>
<P><FONT class=extract>Logs a warning if the expression is not true.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.11.5></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>expr</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the expression to check</FONT></P></TD>
<TD class=parameter_annotations><FONT class=extract>&nbsp;</FONT></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since><FONT class=extract>Since 2.16</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-warn-if-reached></A>
<H3><FONT class=extract>g_warn_if_reached</FONT></H3><PRE class=programlisting><FONT class=extract>#define             g_warn_if_reached()</FONT></PRE>
<P><FONT class=extract>Logs a critical warning.</FONT></P>
<P class=since><FONT class=extract>Since 2.16</FONT></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-on-error-query></A>
<H3><FONT class=extract>g_on_error_query&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_on_error_query (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *prg_name</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Prompts the user with <CODE class=literal>[E]xit, [H]alt, show [S]tack trace or [P]roceed</CODE>. This function is intended to be used for debugging use only. The following example shows how it can be used together with the </FONT><A title=g_log&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function><FONT class=extract>g_log()</FONT></CODE></A><FONT class=extract> functions.</FONT></P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE><FONT class=extract>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</FONT></PRE></TD>
<TD class=listing_code><PRE class=programlisting><FONT class=extract><SPAN class="gtkdoc ppc">#include &lt;glib.h&gt;</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>log_handler</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const</SPAN> gchar   <SPAN class="gtkdoc opt">*</SPAN>log_domain<SPAN class="gtkdoc opt">,</SPAN>
             GLogLevelFlags log_level<SPAN class="gtkdoc opt">,</SPAN>
             <SPAN class="gtkdoc kwb">const</SPAN> gchar   <SPAN class="gtkdoc opt">*</SPAN>message<SPAN class="gtkdoc opt">,</SPAN>
             gpointer       user_data<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log-default-handler">g_log_default_handler</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>log_domain<SPAN class="gtkdoc opt">,</SPAN> log_level<SPAN class="gtkdoc opt">,</SPAN> message<SPAN class="gtkdoc opt">,</SPAN> user_data<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query">g_on_error_query</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MY_PROGRAM_NAME<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>main</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN> argc<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>argv<SPAN class="gtkdoc opt">[])</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log-set-handler">g_log_set_handler</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MY_LOG_DOMAIN<SPAN class="gtkdoc opt">,</SPAN>
                     G_LOG_LEVEL_WARNING <SPAN class="gtkdoc opt">|</SPAN>
                     G_LOG_LEVEL_ERROR <SPAN class="gtkdoc opt">|</SPAN>
                     G_LOG_LEVEL_CRITICAL<SPAN class="gtkdoc opt">,</SPAN>
                     log_handler<SPAN class="gtkdoc opt">,</SPAN>
                     NULL<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">...</SPAN></FONT></PRE></TD></TR></TBODY></TABLE></DIV>
<P><FONT class=extract></FONT></P>
<P><FONT class=extract>If "[E]xit" is selected, the application terminates with a call to _exit(0).</FONT></P>
<P><FONT class=extract>If "[S]tack" trace is selected, </FONT><A title=g_on_error_stack_trace&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-stack-trace"><CODE class=function><FONT class=extract>g_on_error_stack_trace()</FONT></CODE></A><FONT class=extract> is called. This invokes gdb, which attaches to the current process and shows a stack trace. The prompt is then shown again.</FONT></P>
<P><FONT class=extract>If "[P]roceed" is selected, the function returns.</FONT></P>
<P><FONT class=extract>This function may cause different actions on non-UNIX platforms.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.13.11></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>prg_name</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the program name, needed by gdb for the "[S]tack trace" option. If <EM class=parameter><CODE>prg_name</CODE></EM> is </FONT><A title=NULL class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal><FONT class=extract>NULL</FONT></CODE></A><FONT class=extract>, </FONT><A title=g_get_prgname&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-prgname"><CODE class=function><FONT class=extract>g_get_prgname()</FONT></CODE></A><FONT class=extract> is called to get the program name (which will work correctly if <CODE class=function>gdk_init()</CODE> or <CODE class=function>gtk_init()</CODE> has been called)</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-on-error-stack-trace></A>
<H3><FONT class=extract>g_on_error_stack_trace&nbsp;()</FONT></H3><PRE class=programlisting><FONT class=extract><SPAN class=returnvalue>void</SPAN>
g_on_error_stack_trace (<EM class=parameter><CODE>const <A title=gchar class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *prg_name</CODE></EM>);</FONT></PRE>
<P><FONT class=extract>Invokes gdb, which attaches to the current process and shows a stack trace. Called by </FONT><A title=g_on_error_query&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query"><CODE class=function><FONT class=extract>g_on_error_query()</FONT></CODE></A><FONT class=extract> when the "[S]tack trace" option is selected. You can get the current process's program name with </FONT><A title=g_get_prgname&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-prgname"><CODE class=function><FONT class=extract>g_get_prgname()</FONT></CODE></A><FONT class=extract>, assuming that you have called <CODE class=function>gtk_init()</CODE> or <CODE class=function>gdk_init()</CODE>.</FONT></P>
<P><FONT class=extract>This function may cause different actions on non-UNIX platforms.</FONT></P>
<DIV class=refsect3><A name=id-1.4.11.6.14.6></A>
<H4><FONT class=extract>Parameters</FONT></H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP><FONT class=extract>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></FONT></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P><FONT class=extract>prg_name</FONT></P></TD>
<TD class=parameter_description>
<P><FONT class=extract>the program name, needed by gdb for the "[S]tack trace" option</FONT></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-BREAKPOINT:CAPS></A>
<H3><FONT class=extract>G_BREAKPOINT</FONT></H3><PRE class=programlisting><FONT class=extract>#  define G_BREAKPOINT()        G_STMT_START{ __asm__ __volatile__ ("int $03"); }G_STMT_END
</FONT></PRE>
<P><FONT class=extract>Inserts a breakpoint instruction into the code.</FONT></P>
<P><FONT class=extract>On x86 and alpha systems this is implemented as a soft interrupt and on other architectures it raises a <CODE class=literal>SIGTRAP</CODE> signal.</FONT></P></DIV></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.other_details></A>
<H2>Types and Values</H2></DIV>