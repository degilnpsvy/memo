<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Warnings-and-Assertions.top_of_page></A>Message Output and Debugging Functions</SPAN></H2>
<P>Message Output and Debugging Functions &#8212; functions to output messages and help debug applications</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_print&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print">g_print</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_set_print_handler&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-set-print-handler">g_set_print_handler</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc">*GPrintFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_printerr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-printerr">g_printerr</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_set_printerr_handler&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-set-printerr-handler">g_set_printerr_handler</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_return_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_return_val_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_return_if_reached href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-reached">g_return_if_reached</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_return_val_if_reached() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-reached">g_return_val_if_reached</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_warn_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-warn-if-fail">g_warn_if_fail</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_warn_if_reached href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-warn-if-reached">g_warn_if_reached</A></TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_on_error_query&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query">g_on_error_query</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_on_error_stack_trace&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-stack-trace">g_on_error_stack_trace</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_BREAKPOINT href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#G-BREAKPOINT:CAPS">G_BREAKPOINT</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.description></A>
<H2>Description</H2>
<P>These functions provide support for outputting messages.</P>
<P>The g_return family of macros (<A class=link title=g_return_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function>g_return_if_fail()</CODE></A>, <A class=link title=g_return_val_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail"><CODE class=function>g_return_val_if_fail()</CODE></A>, <A class=link title=g_return_if_reached href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-reached"><CODE class=function>g_return_if_reached()</CODE></A>, <A class=link title=g_return_val_if_reached() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-reached"><CODE class=function>g_return_val_if_reached()</CODE></A>) should only be used for programming errors, a typical use case is checking for invalid parameters at the beginning of a public function. They should not be used if you just mean "if (error) return", they should only be used if you mean "if (bug in program) return". The program behavior is generally considered undefined after one of these checks fails. They are not intended for normal control flow, only to give a perhaps-helpful warning before giving up.</P></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-print></A>
<H3>g_print&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_print (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
         <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Outputs a formatted message via the print handler. The default print handler simply outputs the message to stdout, without appending a trailing new-line character. Typically, <EM class=parameter><CODE>format</CODE></EM> should end with its own new-line character.</P>
<P>g_print() should not be used from within libraries for debugging messages, since it may be redirected by applications to special purpose message windows or even files. Instead, libraries should use <A class=link title=g_log&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function>g_log()</CODE></A>, or the convenience functions <A class=link title=g_message() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-message"><CODE class=function>g_message()</CODE></A>, <A class=link title=g_warning() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning"><CODE class=function>g_warning()</CODE></A> and <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.11.6.2.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the message format. See the <CODE class=function>printf()</CODE> documentation</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the parameters to insert into the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-print-handler></A>
<H3>g_set_print_handler&nbsp;()</H3><PRE class=programlisting><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A>
g_set_print_handler (<EM class=parameter><CODE><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=type>GPrintFunc</SPAN></A> func</CODE></EM>);</PRE>
<P>Sets the print handler.</P>
<P>Any messages passed to <A class=link title=g_print&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print"><CODE class=function>g_print()</CODE></A> will be output via the new handler. The default handler simply outputs the message to stdout. By providing your own handler you can redirect the output, to a GTK+ widget or a log file for example.</P>
<DIV class=refsect3><A name=id-1.4.11.6.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>func</P></TD>
<TD class=parameter_description>
<P>the new print handler</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.11.6.3.7></A>
<H4>Returns</H4>
<P>the old print handler</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GPrintFunc></A>
<H3>GPrintFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GPrintFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<P>Specifies the type of the print handler functions. These are called with the complete formatted string to output.</P>
<DIV class=refsect3><A name=id-1.4.11.6.4.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the message to output</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-printerr></A>
<H3>g_printerr&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_printerr (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
            <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Outputs a formatted message via the error message handler. The default handler simply outputs the message to stderr, without appending a trailing new-line character. Typically, <EM class=parameter><CODE>format</CODE></EM> should end with its own new-line character.</P>
<P>g_printerr() should not be used from within libraries. Instead <A class=link title=g_log&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function>g_log()</CODE></A> should be used, or the convenience functions <A class=link title=g_message() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-message"><CODE class=function>g_message()</CODE></A>, <A class=link title=g_warning() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-warning"><CODE class=function>g_warning()</CODE></A> and <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.4.11.6.5.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the message format. See the <CODE class=function>printf()</CODE> documentation</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the parameters to insert into the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-set-printerr-handler></A>
<H3>g_set_printerr_handler&nbsp;()</H3><PRE class=programlisting><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=returnvalue>GPrintFunc</SPAN></A>
g_set_printerr_handler (<EM class=parameter><CODE><A class=link title=GPrintFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#GPrintFunc"><SPAN class=type>GPrintFunc</SPAN></A> func</CODE></EM>);</PRE>
<P>Sets the handler for printing error messages.</P>
<P>Any messages passed to <A class=link title=g_printerr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-printerr"><CODE class=function>g_printerr()</CODE></A> will be output via the new handler. The default handler simply outputs the message to stderr. By providing your own handler you can redirect the output, to a GTK+ widget or a log file for example.</P>
<DIV class=refsect3><A name=id-1.4.11.6.6.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>func</P></TD>
<TD class=parameter_description>
<P>the new error message handler</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.4.11.6.6.7></A>
<H4>Returns</H4>
<P>the old error message handler</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-if-fail></A>
<H3>g_return_if_fail()</H3><PRE class=programlisting>#define             g_return_if_fail(expr)</PRE>
<P>Verifies that the expression <EM class=parameter><CODE>expr</CODE></EM> , usually representing a precondition, evaluates to <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. If the function returns a value, use <A class=link title=g_return_val_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-val-if-fail"><CODE class=function>g_return_val_if_fail()</CODE></A> instead.</P>
<P>If <EM class=parameter><CODE>expr</CODE></EM> evaluates to <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>, the current function should be considered to have undefined behaviour (a programmer error). The only correct solution to such an error is to change the module that is calling the current function, so that it avoids this incorrect call.</P>
<P>To make this undefined behaviour visible, if <EM class=parameter><CODE>expr</CODE></EM> evaluates to <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>, the result is usually that a critical message is logged and the current function returns.</P>
<P>If G_DISABLE_CHECKS is defined then the check is not performed. You should therefore not depend on any side effects of <EM class=parameter><CODE>expr</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.11.6.7.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-val-if-fail></A>
<H3>g_return_val_if_fail()</H3><PRE class=programlisting>#define             g_return_val_if_fail(expr,val)</PRE>
<P>Verifies that the expression <EM class=parameter><CODE>expr</CODE></EM> , usually representing a precondition, evaluates to <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. If the function does not return a value, use <A class=link title=g_return_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function>g_return_if_fail()</CODE></A> instead.</P>
<P>If <EM class=parameter><CODE>expr</CODE></EM> evaluates to <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>, the current function should be considered to have undefined behaviour (a programmer error). The only correct solution to such an error is to change the module that is calling the current function, so that it avoids this incorrect call.</P>
<P>To make this undefined behaviour visible, if <EM class=parameter><CODE>expr</CODE></EM> evaluates to <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>, the result is usually that a critical message is logged and <EM class=parameter><CODE>val</CODE></EM> is returned from the current function.</P>
<P>If G_DISABLE_CHECKS is defined then the check is not performed. You should therefore not depend on any side effects of <EM class=parameter><CODE>expr</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.11.6.8.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to return from the current function if the expression is not true</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-if-reached></A>
<H3>g_return_if_reached</H3><PRE class=programlisting>#define             g_return_if_reached()</PRE>
<P>Logs a critical message and returns from the current function. This can only be used in functions which do not return a value.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-return-val-if-reached></A>
<H3>g_return_val_if_reached()</H3><PRE class=programlisting>#define             g_return_val_if_reached(val)</PRE>
<P>Logs a critical message and returns <EM class=parameter><CODE>val</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.4.11.6.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to return from the current function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-warn-if-fail></A>
<H3>g_warn_if_fail()</H3><PRE class=programlisting>#define             g_warn_if_fail(expr)</PRE>
<P>Logs a warning if the expression is not true.</P>
<DIV class=refsect3><A name=id-1.4.11.6.11.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-warn-if-reached></A>
<H3>g_warn_if_reached</H3><PRE class=programlisting>#define             g_warn_if_reached()</PRE>
<P>Logs a critical warning.</P>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-on-error-query></A>
<H3>g_on_error_query&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_on_error_query (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *prg_name</CODE></EM>);</PRE>
<P>Prompts the user with <CODE class=literal>[E]xit, [H]alt, show [S]tack trace or [P]roceed</CODE>. This function is intended to be used for debugging use only. The following example shows how it can be used together with the <A class=link title=g_log&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log"><CODE class=function>g_log()</CODE></A> functions.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#include &lt;glib.h&gt;</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>log_handler</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const</SPAN> gchar   <SPAN class="gtkdoc opt">*</SPAN>log_domain<SPAN class="gtkdoc opt">,</SPAN>
             GLogLevelFlags log_level<SPAN class="gtkdoc opt">,</SPAN>
             <SPAN class="gtkdoc kwb">const</SPAN> gchar   <SPAN class="gtkdoc opt">*</SPAN>message<SPAN class="gtkdoc opt">,</SPAN>
             gpointer       user_data<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log-default-handler">g_log_default_handler</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>log_domain<SPAN class="gtkdoc opt">,</SPAN> log_level<SPAN class="gtkdoc opt">,</SPAN> message<SPAN class="gtkdoc opt">,</SPAN> user_data<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query">g_on_error_query</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MY_PROGRAM_NAME<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>main</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN> argc<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>argv<SPAN class="gtkdoc opt">[])</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-log-set-handler">g_log_set_handler</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MY_LOG_DOMAIN<SPAN class="gtkdoc opt">,</SPAN>
                     G_LOG_LEVEL_WARNING <SPAN class="gtkdoc opt">|</SPAN>
                     G_LOG_LEVEL_ERROR <SPAN class="gtkdoc opt">|</SPAN>
                     G_LOG_LEVEL_CRITICAL<SPAN class="gtkdoc opt">,</SPAN>
                     log_handler<SPAN class="gtkdoc opt">,</SPAN>
                     NULL<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc opt">...</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>If "[E]xit" is selected, the application terminates with a call to _exit(0).</P>
<P>If "[S]tack" trace is selected, <A class=link title=g_on_error_stack_trace&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-stack-trace"><CODE class=function>g_on_error_stack_trace()</CODE></A> is called. This invokes gdb, which attaches to the current process and shows a stack trace. The prompt is then shown again.</P>
<P>If "[P]roceed" is selected, the function returns.</P>
<P>This function may cause different actions on non-UNIX platforms.</P>
<DIV class=refsect3><A name=id-1.4.11.6.13.11></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>prg_name</P></TD>
<TD class=parameter_description>
<P>the program name, needed by gdb for the "[S]tack trace" option. If <EM class=parameter><CODE>prg_name</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A class=link title=g_get_prgname&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-prgname"><CODE class=function>g_get_prgname()</CODE></A> is called to get the program name (which will work correctly if <CODE class=function>gdk_init()</CODE> or <CODE class=function>gtk_init()</CODE> has been called)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-on-error-stack-trace></A>
<H3>g_on_error_stack_trace&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_on_error_stack_trace (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *prg_name</CODE></EM>);</PRE>
<P>Invokes gdb, which attaches to the current process and shows a stack trace. Called by <A class=link title=g_on_error_query&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-on-error-query"><CODE class=function>g_on_error_query()</CODE></A> when the "[S]tack trace" option is selected. You can get the current process's program name with <A class=link title=g_get_prgname&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-prgname"><CODE class=function>g_get_prgname()</CODE></A>, assuming that you have called <CODE class=function>gtk_init()</CODE> or <CODE class=function>gdk_init()</CODE>.</P>
<P>This function may cause different actions on non-UNIX platforms.</P>
<DIV class=refsect3><A name=id-1.4.11.6.14.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>prg_name</P></TD>
<TD class=parameter_description>
<P>the program name, needed by gdb for the "[S]tack trace" option</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-BREAKPOINT:CAPS></A>
<H3>G_BREAKPOINT</H3><PRE class=programlisting>#  define G_BREAKPOINT()        G_STMT_START{ __asm__ __volatile__ ("int $03"); }G_STMT_END
</PRE>
<P>Inserts a breakpoint instruction into the code.</P>
<P>On x86 and alpha systems this is implemented as a soft interrupt and on other architectures it raises a <CODE class=literal>SIGTRAP</CODE> signal.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Warnings-and-Assertions.other_details></A>
<H2>Types and Values</H2></DIV>