<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-File-Utilities.top_of_page></A>File Utilities</SPAN></H2>
<P>File Utilities &#8212; various file-related functions</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-File-Utilities.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=returnvalue>GFileError</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_file_error_from_errno&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-error-from-errno">g_file_error_from_errno</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-get-contents">g_file_get_contents</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_file_set_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-set-contents">g_file_set_contents</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_file_test&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test">g_file_test</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp">g_mkstemp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_mkstemp_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp-full">g_mkstemp_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_file_open_tmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-open-tmp">g_file_open_tmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_file_read_link&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-read-link">g_file_read_link</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_mkdir_with_parents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdir-with-parents">g_mkdir_with_parents</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mkdtemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp">g_mkdtemp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mkdtemp_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp-full">g_mkdtemp_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_dir_make_tmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-make-tmp">g_dir_make_tmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=returnvalue>GDir</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open">g_dir_open</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_dir_read_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-read-name">g_dir_read_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_dir_rewind&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-rewind">g_dir_rewind</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_dir_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-close">g_dir_close</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mapped_file_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-new">g_mapped_file_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mapped_file_new_from_fd&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-new-from-fd">g_mapped_file_new_from_fd</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mapped_file_ref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-ref">g_mapped_file_ref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_mapped_file_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-unref">g_mapped_file_unref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_mapped_file_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-free">g_mapped_file_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_mapped_file_get_length&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-get-length">g_mapped_file_get_length</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mapped_file_get_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-get-contents">g_mapped_file_get_contents</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GBytes href="https://developer.gnome.org/glib/stable/glib-Byte-Arrays.html#GBytes"><SPAN class=returnvalue>GBytes</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mapped_file_get_bytes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-get-bytes">g_mapped_file_get_bytes</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-open">g_open</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_rename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-rename">g_rename</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_mkdir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdir">g_mkdir</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_stat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-stat">g_stat</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_lstat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-lstat">g_lstat</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_unlink&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-unlink">g_unlink</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_remove&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-remove">g_remove</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_rmdir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-rmdir">g_rmdir</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>FILE</SPAN>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_fopen&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-fopen">g_fopen</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>FILE</SPAN>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_freopen&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-freopen">g_freopen</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_chmod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-chmod">g_chmod</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_access&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-access">g_access</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_creat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-creat">g_creat</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_chdir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-chdir">g_chdir</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_utime&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-utime">g_utime</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-close">g_close</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-File-Utilities.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError">GFileError</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_FILE_ERROR href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR:CAPS">G_FILE_ERROR</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GFileTest" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileTest">GFileTest</A></TD></TR>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir">GDir</A></TD></TR>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile">GMappedFile</A></TD></TR>
<TR>
<TD class=typedef_keyword>typedef</TD>
<TD class=function_name><A class=link title=GStatBuf href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GStatBuf">GStatBuf</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-File-Utilities.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
#include &lt;glib/gstdio.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-File-Utilities.description></A>
<H2>Description</H2>
<P>There is a group of functions which wrap the common POSIX functions dealing with filenames (<A class=link title=g_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-open"><CODE class=function>g_open()</CODE></A>, <A class=link title=g_rename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-rename"><CODE class=function>g_rename()</CODE></A>, <A class=link title=g_mkdir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdir"><CODE class=function>g_mkdir()</CODE></A>, <A class=link title=g_stat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-stat"><CODE class=function>g_stat()</CODE></A>, <A class=link title=g_unlink&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-unlink"><CODE class=function>g_unlink()</CODE></A>, <A class=link title=g_remove&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-remove"><CODE class=function>g_remove()</CODE></A>, <A class=link title=g_fopen&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-fopen"><CODE class=function>g_fopen()</CODE></A>, <A class=link title=g_freopen&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-freopen"><CODE class=function>g_freopen()</CODE></A>). The point of these wrappers is to make it possible to handle file names with any Unicode characters in them on Windows without having to use ifdefs and the wide character API in the application code.</P>
<P>The pathname argument should be in the GLib file name encoding. On POSIX this is the actual on-disk encoding which might correspond to the locale settings of the process (or the <CODE class=literal>G_FILENAME_ENCODING</CODE> environment variable), or not.</P>
<P>On Windows the GLib file name encoding is UTF-8. Note that the Microsoft C library does not use UTF-8, but has separate APIs for current system code page and wide characters (UTF-16). The GLib wrappers call the wide character API if present (on modern Windows systems), otherwise convert to/from the system code page.</P>
<P>Another group of functions allows to open and read directories in the GLib file name encoding. These are <A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open"><CODE class=function>g_dir_open()</CODE></A>, <A class=link title=g_dir_read_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-read-name"><CODE class=function>g_dir_read_name()</CODE></A>, <A class=link title=g_dir_rewind&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-rewind"><CODE class=function>g_dir_rewind()</CODE></A>, <A class=link title=g_dir_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-close"><CODE class=function>g_dir_close()</CODE></A>.</P></DIV>
<DIV class=refsect1><A name=glib-File-Utilities.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-file-error-from-errno></A>
<H3>g_file_error_from_errno&nbsp;()</H3><PRE class=programlisting><A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=returnvalue>GFileError</SPAN></A>
g_file_error_from_errno (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> err_no</CODE></EM>);</PRE>
<P>Gets a <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> constant based on the passed-in <EM class=parameter><CODE>err_no</CODE></EM> . For example, if you pass in <CODE class=literal>EEXIST</CODE> this function returns <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR-EXIST:CAPS"><SPAN class=type>G_FILE_ERROR_EXIST</SPAN></A>. Unlike <CODE class=literal>errno</CODE> values, you can portably assume that all <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> values will exist.</P>
<P>Normally a <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> value goes into a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> returned from a function that manipulates files. So you would use <A class=link title=g_file_error_from_errno&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-error-from-errno"><CODE class=function>g_file_error_from_errno()</CODE></A> when constructing a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.2.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err_no</P></TD>
<TD class=parameter_description>
<P>an "errno" value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.2.7></A>
<H4>Returns</H4>
<P><A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> corresponding to the given <EM class=parameter><CODE>errno</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-file-get-contents></A>
<H3>g_file_get_contents&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_file_get_contents (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **contents</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> *length</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Reads an entire file into allocated memory, with good error checking.</P>
<P>If the call was successful, it returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> and sets <EM class=parameter><CODE>contents</CODE></EM> to the file contents and <EM class=parameter><CODE>length</CODE></EM> to the length of the file contents in bytes. The string stored in <EM class=parameter><CODE>contents</CODE></EM> will be nul-terminated, so for text files you can pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for the <EM class=parameter><CODE>length</CODE></EM> argument. If the call was not successful, it returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> and sets <EM class=parameter><CODE>error</CODE></EM> . The error domain is <A class=link title=G_FILE_ERROR href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR:CAPS"><SPAN class=type>G_FILE_ERROR</SPAN></A>. Possible error codes are those in the <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> enumeration. In the error case, <EM class=parameter><CODE>contents</CODE></EM> is set to <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> and <EM class=parameter><CODE>length</CODE></EM> is set to zero.</P>
<DIV class=refsect3><A name=id-1.5.18.7.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>name of a file to read contents from, in the GLib file name encoding. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>contents</P></TD>
<TD class=parameter_description>
<P>location to store an allocated string, use <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> to free the returned string. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=length][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>length</P></TD>
<TD class=parameter_description>
<P>location to store length in bytes of the contents, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.3.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if an error occurred</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-file-set-contents></A>
<H3>g_file_set_contents&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_file_set_contents (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *contents</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gssize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> length</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Writes all of <EM class=parameter><CODE>contents</CODE></EM> to a file named <EM class=parameter><CODE>filename</CODE></EM> , with good error checking. If a file called <EM class=parameter><CODE>filename</CODE></EM> already exists it will be overwritten.</P>
<P>This write is atomic in the sense that it is first written to a temporary file which is then renamed to the final name. Notes:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>On UNIX, if <EM class=parameter><CODE>filename</CODE></EM> already exists hard links to <EM class=parameter><CODE>filename</CODE></EM> will break. Also since the file is recreated, existing permissions, access control lists, metadata etc. may be lost. If <EM class=parameter><CODE>filename</CODE></EM> is a symbolic link, the link itself will be replaced, not the linked file.</P></LI>
<LI class=listitem>
<P>On Windows renaming a file will not remove an existing file with the new name, so on Windows there is a race condition between the existing file being removed and the temporary file being renamed.</P></LI>
<LI class=listitem>
<P>On Windows there is no way to remove a file that is open to some process, or mapped into memory. Thus, this function will fail if <EM class=parameter><CODE>filename</CODE></EM> already exists and is open.</P></LI></UL></DIV>
<P>If the call was successful, it returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. If the call was not successful, it returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> and sets <EM class=parameter><CODE>error</CODE></EM> . The error domain is <A class=link title=G_FILE_ERROR href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR:CAPS"><SPAN class=type>G_FILE_ERROR</SPAN></A>. Possible error codes are those in the <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> enumeration.</P>
<P>Note that the name for the temporary file is constructed by appending up to 7 characters to <EM class=parameter><CODE>filename</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.18.7.4.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>name of a file to write <EM class=parameter><CODE>contents</CODE></EM> to, in the GLib file name encoding. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>contents</P></TD>
<TD class=parameter_description>
<P>string to write to the file. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=length][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>length</P></TD>
<TD class=parameter_description>
<P>length of <EM class=parameter><CODE>contents</CODE></EM> , or -1 if <EM class=parameter><CODE>contents</CODE></EM> is a nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.4.10></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-file-test></A>
<H3>g_file_test&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_file_test (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
             <EM class=parameter><CODE><A class=link title="enum GFileTest" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileTest"><SPAN class=type>GFileTest</SPAN></A> test</CODE></EM>);</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if any of the tests in the bitfield <EM class=parameter><CODE>test</CODE></EM> are <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. For example, <CODE class=literal>(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)</CODE> will return <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file exists; the check whether it's a directory doesn't matter since the existence test is <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. With the current set of available tests, there's no point passing in more than one test at a time.</P>
<P>Apart from <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><CODE class=literal>G_FILE_TEST_IS_SYMLINK</CODE></A> all tests follow symbolic links, so for a symbolic link to a regular file <A class=link title=g_file_test&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test"><CODE class=function>g_file_test()</CODE></A> will return <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for both <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><CODE class=literal>G_FILE_TEST_IS_SYMLINK</CODE></A> and <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-REGULAR:CAPS"><CODE class=literal>G_FILE_TEST_IS_REGULAR</CODE></A>.</P>
<P>Note, that for a dangling symbolic link <A class=link title=g_file_test&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test"><CODE class=function>g_file_test()</CODE></A> will return <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><CODE class=literal>G_FILE_TEST_IS_SYMLINK</CODE></A> and <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all other flags.</P>
<P>You should never use <A class=link title=g_file_test&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test"><CODE class=function>g_file_test()</CODE></A> to test whether it is safe to perform an operation, because there is always the possibility of the condition changing before you actually perform the operation. For example, you might think you could use <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><CODE class=literal>G_FILE_TEST_IS_SYMLINK</CODE></A> to know whether it is safe to write to a file without being tricked into writing into a different location. It doesn't work!</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc slc">// DON'T DO THIS</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test">g_file_test</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> G_FILE_TEST_IS_SYMLINK<SPAN class="gtkdoc opt">))</SPAN> 
  <SPAN class="gtkdoc opt">{</SPAN>
    fd <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-open">g_open</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>filename<SPAN class="gtkdoc opt">,</SPAN> O_WRONLY<SPAN class="gtkdoc opt">);</SPAN>
    <SPAN class="gtkdoc slc">// write to fd</SPAN>
  <SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Another thing to note is that <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-EXISTS:CAPS"><CODE class=literal>G_FILE_TEST_EXISTS</CODE></A> and <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-EXECUTABLE:CAPS"><CODE class=literal>G_FILE_TEST_IS_EXECUTABLE</CODE></A> are implemented using the <CODE class=function>access()</CODE> system call. This usually doesn't matter, but if your program is setuid or setgid it means that these tests will give you the answer for the real user ID and group ID, rather than the effective user ID and group ID.</P>
<P>On Windows, there are no symlinks, so testing for <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-SYMLINK:CAPS"><CODE class=literal>G_FILE_TEST_IS_SYMLINK</CODE></A> will always return <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. Testing for <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-TEST-IS-EXECUTABLE:CAPS"><CODE class=literal>G_FILE_TEST_IS_EXECUTABLE</CODE></A> will just check that the file exists and its name indicates that it is executable, checking for well-known extensions and those listed in the <CODE class=literal>PATHEXT</CODE> environment variable.</P>
<DIV class=refsect3><A name=id-1.5.18.7.5.12></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a filename to test in the GLib file name encoding</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test</P></TD>
<TD class=parameter_description>
<P>bitfield of <A class=link title="enum GFileTest" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileTest"><SPAN class=type>GFileTest</SPAN></A> flags</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.5.13></A>
<H4>Returns</H4>
<P>whether a test was <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkstemp></A>
<H3>g_mkstemp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_mkstemp (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>);</PRE>
<P>Opens a temporary file. See the <CODE class=function>mkstemp()</CODE> documentation on most UNIX-like systems.</P>
<P>The parameter is a string that should follow the rules for <CODE class=function>mkstemp()</CODE> templates, i.e. contain the string "XXXXXX". <A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp"><CODE class=function>g_mkstemp()</CODE></A> is slightly more flexible than <CODE class=function>mkstemp()</CODE> in that the sequence does not have to occur at the very end of the template. The X string will be modified to form the name of a file that didn't exist. The string should be in the GLib file name encoding. Most importantly, on Windows it should be in UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.6.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>template filename. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.6.7></A>
<H4>Returns</H4>
<P>A file handle (as from <CODE class=function>open()</CODE>) to the file opened for reading and writing. The file is opened in binary mode on platforms where there is a difference. The file handle should be closed with <CODE class=function>close()</CODE>. In case of errors, -1 is returned and <CODE class=literal>errno</CODE> will be set.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkstemp-full></A>
<H3>g_mkstemp_full&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_mkstemp_full (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> flags</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> mode</CODE></EM>);</PRE>
<P>Opens a temporary file. See the <CODE class=function>mkstemp()</CODE> documentation on most UNIX-like systems.</P>
<P>The parameter is a string that should follow the rules for <CODE class=function>mkstemp()</CODE> templates, i.e. contain the string "XXXXXX". <A class=link title=g_mkstemp_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp-full"><CODE class=function>g_mkstemp_full()</CODE></A> is slightly more flexible than <CODE class=function>mkstemp()</CODE> in that the sequence does not have to occur at the very end of the template and you can pass a <EM class=parameter><CODE>mode</CODE></EM> and additional <EM class=parameter><CODE>flags</CODE></EM> . The X string will be modified to form the name of a file that didn't exist. The string should be in the GLib file name encoding. Most importantly, on Windows it should be in UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.7.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>template filename. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>flags to pass to an <CODE class=function>open()</CODE> call in addition to O_EXCL and O_CREAT, which are passed automatically</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>permissions to create the temporary file with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.7.7></A>
<H4>Returns</H4>
<P>A file handle (as from <CODE class=function>open()</CODE>) to the file opened for reading and writing. The file handle should be closed with <CODE class=function>close()</CODE>. In case of errors, -1 is returned and <CODE class=literal>errno</CODE> will be set.</P>
<P></P></DIV>
<P class=since>Since 2.22</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-file-open-tmp></A>
<H3>g_file_open_tmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_file_open_tmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **name_used</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Opens a file for writing in the preferred directory for temporary files (as returned by <A class=link title=g_get_tmp_dir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir"><CODE class=function>g_get_tmp_dir()</CODE></A>).</P>
<P><EM class=parameter><CODE>tmpl</CODE></EM> should be a string in the GLib file name encoding containing a sequence of six 'X' characters, as the parameter to <A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp"><CODE class=function>g_mkstemp()</CODE></A>. However, unlike these functions, the template should only be a basename, no directory components are allowed. If template is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, a default template is used.</P>
<P>Note that in contrast to <A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp"><CODE class=function>g_mkstemp()</CODE></A> (and <CODE class=function>mkstemp()</CODE>) <EM class=parameter><CODE>tmpl</CODE></EM> is not modified, and might thus be a read-only literal string.</P>
<P>Upon success, and if <EM class=parameter><CODE>name_used</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the actual name used is returned in <EM class=parameter><CODE>name_used</CODE></EM> . This string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when not needed any longer. The returned name is in the GLib file name encoding.</P>
<DIV class=refsect3><A name=id-1.5.18.7.8.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>Template for file name, as in <A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp"><CODE class=function>g_mkstemp()</CODE></A>, basename only, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for a default template. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>name_used</P></TD>
<TD class=parameter_description>
<P>location to store actual name used, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.8.9></A>
<H4>Returns</H4>
<P>A file handle (as from <CODE class=function>open()</CODE>) to the file opened for reading and writing. The file is opened in binary mode on platforms where there is a difference. The file handle should be closed with <CODE class=function>close()</CODE>. In case of errors, -1 is returned and <EM class=parameter><CODE>error</CODE></EM> will be set.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-file-read-link></A>
<H3>g_file_read_link&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_file_read_link (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Reads the contents of the symbolic link <EM class=parameter><CODE>filename</CODE></EM> like the POSIX <CODE class=function>readlink()</CODE> function. The returned string is in the encoding used for filenames. Use <A class=link title=g_filename_to_utf8&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Character-Set-Conversion.html#g-filename-to-utf8"><CODE class=function>g_filename_to_utf8()</CODE></A> to convert it to UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.9.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>the symbolic link</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.9.6></A>
<H4>Returns</H4>
<P>A newly-allocated string with the contents of the symbolic link, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if an error occurred.</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkdir-with-parents></A>
<H3>g_mkdir_with_parents&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_mkdir_with_parents (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *pathname</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> mode</CODE></EM>);</PRE>
<P>Create a directory if it doesn't already exist. Create intermediate parent directories as needed, too.</P>
<DIV class=refsect3><A name=id-1.5.18.7.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>pathname</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>permissions to use for newly created directories</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.10.6></A>
<H4>Returns</H4>
<P>0 if the directory already exists, or was successfully created. Returns -1 if an error occurred, with errno set.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkdtemp></A>
<H3>g_mkdtemp&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_mkdtemp (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>);</PRE>
<P>Creates a temporary directory. See the <CODE class=function>mkdtemp()</CODE> documentation on most UNIX-like systems.</P>
<P>The parameter is a string that should follow the rules for <CODE class=function>mkdtemp()</CODE> templates, i.e. contain the string "XXXXXX". <A class=link title=g_mkdtemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp"><CODE class=function>g_mkdtemp()</CODE></A> is slightly more flexible than <CODE class=function>mkdtemp()</CODE> in that the sequence does not have to occur at the very end of the template and you can pass a <EM class=parameter><CODE>mode</CODE></EM> and additional <EM class=parameter><CODE>flags</CODE></EM> . The X string will be modified to form the name of a directory that didn't exist. The string should be in the GLib file name encoding. Most importantly, on Windows it should be in UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.11.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>template directory name. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.11.7></A>
<H4>Returns</H4>
<P>A pointer to <EM class=parameter><CODE>tmpl</CODE></EM> , which has been modified to hold the directory name. In case of errors, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned and <CODE class=literal>errno</CODE> will be set.</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkdtemp-full></A>
<H3>g_mkdtemp_full&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_mkdtemp_full (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> mode</CODE></EM>);</PRE>
<P>Creates a temporary directory. See the <CODE class=function>mkdtemp()</CODE> documentation on most UNIX-like systems.</P>
<P>The parameter is a string that should follow the rules for <CODE class=function>mkdtemp()</CODE> templates, i.e. contain the string "XXXXXX". <A class=link title=g_mkdtemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp"><CODE class=function>g_mkdtemp()</CODE></A> is slightly more flexible than <CODE class=function>mkdtemp()</CODE> in that the sequence does not have to occur at the very end of the template and you can pass a <EM class=parameter><CODE>mode</CODE></EM> . The X string will be modified to form the name of a directory that didn't exist. The string should be in the GLib file name encoding. Most importantly, on Windows it should be in UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.12.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>template directory name. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>permissions to create the temporary directory with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.12.7></A>
<H4>Returns</H4>
<P>A pointer to <EM class=parameter><CODE>tmpl</CODE></EM> , which has been modified to hold the directory name. In case of errors, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned, and <CODE class=literal>errno</CODE> will be set.</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-dir-make-tmp></A>
<H3>g_dir_make_tmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_dir_make_tmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *tmpl</CODE></EM>,
                <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Creates a subdirectory in the preferred directory for temporary files (as returned by <A class=link title=g_get_tmp_dir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir"><CODE class=function>g_get_tmp_dir()</CODE></A>).</P>
<P><EM class=parameter><CODE>tmpl</CODE></EM> should be a string in the GLib file name encoding containing a sequence of six 'X' characters, as the parameter to <A class=link title=g_mkstemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkstemp"><CODE class=function>g_mkstemp()</CODE></A>. However, unlike these functions, the template should only be a basename, no directory components are allowed. If template is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, a default template is used.</P>
<P>Note that in contrast to <A class=link title=g_mkdtemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp"><CODE class=function>g_mkdtemp()</CODE></A> (and <CODE class=function>mkdtemp()</CODE>) <EM class=parameter><CODE>tmpl</CODE></EM> is not modified, and might thus be a read-only literal string.</P>
<DIV class=refsect3><A name=id-1.5.18.7.13.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>tmpl</P></TD>
<TD class=parameter_description>
<P>Template for directory name, as in <A class=link title=g_mkdtemp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mkdtemp"><CODE class=function>g_mkdtemp()</CODE></A>, basename only, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for a default template. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.13.8></A>
<H4>Returns</H4>
<P>The actual name used. This string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when not needed any longer and is is in the GLib file name encoding. In case of errors, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned and <EM class=parameter><CODE>error</CODE></EM> will be set. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> filename]</SPAN></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-dir-open></A>
<H3>g_dir_open&nbsp;()</H3><PRE class=programlisting><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=returnvalue>GDir</SPAN></A>&nbsp;*
g_dir_open (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *path</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> flags</CODE></EM>,
            <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Opens a directory for reading. The names of the files in the directory can then be retrieved using <A class=link title=g_dir_read_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-read-name"><CODE class=function>g_dir_read_name()</CODE></A>. Note that the ordering is not defined.</P>
<DIV class=refsect3><A name=id-1.5.18.7.14.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>path</P></TD>
<TD class=parameter_description>
<P>the path to the directory you are interested in. On Unix in the on-disk encoding. On Windows in UTF-8</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>Currently must be set to 0. Reserved for future use.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. If non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, an error will be set if and only if <A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open"><CODE class=function>g_dir_open()</CODE></A> fails.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.14.6></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A> on success, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on failure. If non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, you must free the result with <A class=link title=g_dir_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-close"><CODE class=function>g_dir_close()</CODE></A> when you are finished with it.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-dir-read-name></A>
<H3>g_dir_read_name&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_dir_read_name (<EM class=parameter><CODE><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A> *dir</CODE></EM>);</PRE>
<P>Retrieves the name of another entry in the directory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. The order of entries returned from this function is not defined, and may vary by file system or other operating-system dependent factors.</P>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> may also be returned in case of errors. On Unix, you can check <CODE class=literal>errno</CODE> to find out if <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> was returned because of an error.</P>
<P>On Unix, the '.' and '..' entries are omitted, and the returned name is in the on-disk encoding.</P>
<P>On Windows, as is true of all GLib functions which operate on filenames, the returned name is in UTF-8.</P>
<DIV class=refsect3><A name=id-1.5.18.7.15.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dir</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A>* created by <A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open"><CODE class=function>g_dir_open()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.15.9></A>
<H4>Returns</H4>
<P>The entry's name or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if there are no more entries. The return value is owned by GLib and must not be modified or freed.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-dir-rewind></A>
<H3>g_dir_rewind&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_dir_rewind (<EM class=parameter><CODE><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A> *dir</CODE></EM>);</PRE>
<P>Resets the given directory. The next call to <A class=link title=g_dir_read_name&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-read-name"><CODE class=function>g_dir_read_name()</CODE></A> will return the first entry again.</P>
<DIV class=refsect3><A name=id-1.5.18.7.16.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dir</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A>* created by <A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open"><CODE class=function>g_dir_open()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-dir-close></A>
<H3>g_dir_close&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_dir_close (<EM class=parameter><CODE><A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A> *dir</CODE></EM>);</PRE>
<P>Closes the directory and deallocates all related resources.</P>
<DIV class=refsect3><A name=id-1.5.18.7.17.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dir</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GDir href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GDir"><SPAN class=type>GDir</SPAN></A>* created by <A class=link title=g_dir_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-dir-open"><CODE class=function>g_dir_open()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-new></A>
<H3>g_mapped_file_new&nbsp;()</H3><PRE class=programlisting><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;*
g_mapped_file_new (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
                   <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> writable</CODE></EM>,
                   <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Maps a file into memory. On UNIX, this is using the <CODE class=function>mmap()</CODE> function.</P>
<P>If <EM class=parameter><CODE>writable</CODE></EM> is <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, the mapped buffer may be modified, otherwise it is an error to modify the mapped buffer. Modifications to the buffer are not visible to other processes mapping the same file, and are not written back to the file.</P>
<P>Note that modifications of the underlying file might affect the contents of the <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>. Therefore, mapping should only be used if the file will not be modified, or if all modifications of the file are done atomically (e.g. using <A class=link title=g_file_set_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-set-contents"><CODE class=function>g_file_set_contents()</CODE></A>).</P>
<P>If <EM class=parameter><CODE>filename</CODE></EM> is the name of an empty, regular file, the function will successfully return an empty <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>. In other cases of size 0 (e.g. device files such as /dev/null), <EM class=parameter><CODE>error</CODE></EM> will be set to the <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> value <A class=link href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#G-FILE-ERROR-INVAL:CAPS"><SPAN class=type>G_FILE_ERROR_INVAL</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.18.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>The path of the file to load, in the GLib filename encoding</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>writable</P></TD>
<TD class=parameter_description>
<P>whether the mapping should be writable</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.18.9></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> which must be unref'd with <A class=link title=g_mapped_file_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-unref"><CODE class=function>g_mapped_file_unref()</CODE></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the mapping failed.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-new-from-fd></A>
<H3>g_mapped_file_new_from_fd&nbsp;()</H3><PRE class=programlisting><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;*
g_mapped_file_new_from_fd (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> fd</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> writable</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Maps a file into memory. On UNIX, this is using the <CODE class=function>mmap()</CODE> function.</P>
<P>If <EM class=parameter><CODE>writable</CODE></EM> is <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, the mapped buffer may be modified, otherwise it is an error to modify the mapped buffer. Modifications to the buffer are not visible to other processes mapping the same file, and are not written back to the file.</P>
<P>Note that modifications of the underlying file might affect the contents of the <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>. Therefore, mapping should only be used if the file will not be modified, or if all modifications of the file are done atomically (e.g. using <A class=link title=g_file_set_contents&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-set-contents"><CODE class=function>g_file_set_contents()</CODE></A>).</P>
<DIV class=refsect3><A name=id-1.5.18.7.19.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>fd</P></TD>
<TD class=parameter_description>
<P>The file descriptor of the file to load</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>writable</P></TD>
<TD class=parameter_description>
<P>whether the mapping should be writable</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.19.8></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> which must be unref'd with <A class=link title=g_mapped_file_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-unref"><CODE class=function>g_mapped_file_unref()</CODE></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the mapping failed.</P>
<P></P></DIV>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-ref></A>
<H3>g_mapped_file_ref&nbsp;()</H3><PRE class=programlisting><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=returnvalue>GMappedFile</SPAN></A>&nbsp;*
g_mapped_file_ref (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<P>Increments the reference count of <EM class=parameter><CODE>file</CODE></EM> by one. It is safe to call this function from any thread.</P>
<DIV class=refsect3><A name=id-1.5.18.7.20.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.20.6></A>
<H4>Returns</H4>
<P>the passed in <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>.</P>
<P></P></DIV>
<P class=since>Since 2.22</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-unref></A>
<H3>g_mapped_file_unref&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_mapped_file_unref (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<P>Decrements the reference count of <EM class=parameter><CODE>file</CODE></EM> by one. If the reference count drops to 0, unmaps the buffer of <EM class=parameter><CODE>file</CODE></EM> and frees it.</P>
<P>It is safe to call this function from any thread.</P>
<P>Since 2.22</P>
<DIV class=refsect3><A name=id-1.5.18.7.21.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-free></A>
<H3>g_mapped_file_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_mapped_file_free (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_mapped_file_free</CODE> has been deprecated since version 2.22 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mapped_file_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-unref"><CODE class=function>g_mapped_file_unref()</CODE></A> instead.</P></DIV>
<P>This call existed before <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> had refcounting and is currently exactly the same as <A class=link title=g_mapped_file_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-unref"><CODE class=function>g_mapped_file_unref()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.22.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-get-length></A>
<H3>g_mapped_file_get_length&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_mapped_file_get_length (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<P>Returns the length of the contents of a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.23.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.23.6></A>
<H4>Returns</H4>
<P>the length of the contents of <EM class=parameter><CODE>file</CODE></EM> .</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-get-contents></A>
<H3>g_mapped_file_get_contents&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_mapped_file_get_contents (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<P>Returns the contents of a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A>. </P>
<P>Note that the contents may not be zero-terminated, even if the <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> is backed by a text file.</P>
<P>If the file is empty then <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<DIV class=refsect3><A name=id-1.5.18.7.24.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.24.8></A>
<H4>Returns</H4>
<P>the contents of <EM class=parameter><CODE>file</CODE></EM> , or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mapped-file-get-bytes></A>
<H3>g_mapped_file_get_bytes&nbsp;()</H3><PRE class=programlisting><A class=link title=GBytes href="https://developer.gnome.org/glib/stable/glib-Byte-Arrays.html#GBytes"><SPAN class=returnvalue>GBytes</SPAN></A>&nbsp;*
g_mapped_file_get_bytes (<EM class=parameter><CODE><A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> *file</CODE></EM>);</PRE>
<P>Creates a new <A class=link title=GBytes href="https://developer.gnome.org/glib/stable/glib-Byte-Arrays.html#GBytes"><SPAN class=type>GBytes</SPAN></A> which references the data mapped from <EM class=parameter><CODE>file</CODE></EM> . The mapped contents of the file must not be modified after creating this bytes object, because a <A class=link title=GBytes href="https://developer.gnome.org/glib/stable/glib-Byte-Arrays.html#GBytes"><SPAN class=type>GBytes</SPAN></A> should be immutable.</P>
<DIV class=refsect3><A name=id-1.5.18.7.25.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.25.6></A>
<H4>Returns</H4>
<P>A newly allocated <A class=link title=GBytes href="https://developer.gnome.org/glib/stable/glib-Byte-Arrays.html#GBytes"><SPAN class=type>GBytes</SPAN></A> referencing data from <EM class=parameter><CODE>file</CODE></EM> . </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-open></A>
<H3>g_open&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_open (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
        <EM class=parameter><CODE><SPAN class=type>int</SPAN> flags</CODE></EM>,
        <EM class=parameter><CODE><SPAN class=type>int</SPAN> mode</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>open()</CODE> function. The <CODE class=function>open()</CODE> function is used to convert a pathname into a file descriptor.</P>
<P>On POSIX systems file descriptors are implemented by the operating system. On Windows, it's the C library that implements <CODE class=function>open()</CODE> and file descriptors. The actual Win32 API for opening files is quite different, see MSDN documentation for <CODE class=function>CreateFile()</CODE>. The Win32 API uses file handles, which are more randomish integers, not small integers like file descriptors.</P>
<P>Because file descriptors are specific to the C library on Windows, the file descriptor returned by this function makes sense only to functions in the same C library. Thus if the GLib-using code uses a different C library than GLib does, the file descriptor returned by this function cannot be passed to C library functions like <CODE class=function>write()</CODE> or <CODE class=function>read()</CODE>.</P>
<P>See your C library manual for more details about <CODE class=function>open()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.26.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>as in <CODE class=function>open()</CODE></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>as in <CODE class=function>open()</CODE></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.26.9></A>
<H4>Returns</H4>
<P>a new file descriptor, or -1 if an error occurred. The return value can be used exactly like the return value from <CODE class=function>open()</CODE>.</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-rename></A>
<H3>g_rename&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_rename (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *oldfilename</CODE></EM>,
          <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *newfilename</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>rename()</CODE> function. The <CODE class=function>rename()</CODE> function renames a file, moving it between directories if required.</P>
<P>See your C library manual for more details about how <CODE class=function>rename()</CODE> works on your system. It is not possible in general on Windows to rename a file that is open to some process.</P>
<DIV class=refsect3><A name=id-1.5.18.7.27.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>oldfilename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>newfilename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.27.7></A>
<H4>Returns</H4>
<P>0 if the renaming succeeded, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mkdir></A>
<H3>g_mkdir&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_mkdir (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE><SPAN class=type>int</SPAN> mode</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>mkdir()</CODE> function. The <CODE class=function>mkdir()</CODE> function attempts to create a directory with the given name and permissions. The mode argument is ignored on Windows.</P>
<P>See your C library manual for more details about <CODE class=function>mkdir()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.28.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>permissions to use for the newly created directory</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.28.7></A>
<H4>Returns</H4>
<P>0 if the directory was successfully created, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-stat></A>
<H3>g_stat&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_stat (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
        <EM class=parameter><CODE><A class=link title=GStatBuf href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GStatBuf"><SPAN class=type>GStatBuf</SPAN></A> *buf</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>stat()</CODE> function. The <CODE class=function>stat()</CODE> function returns information about a file. On Windows the <CODE class=function>stat()</CODE> function in the C library checks only the FAT-style READONLY attribute and does not look at the ACL at all. Thus on Windows the protection bits in the <EM class=parameter><CODE>st_mode</CODE></EM> field are a fabrication of little use.</P>
<P>On Windows the Microsoft C libraries have several variants of the stat struct and <CODE class=function>stat()</CODE> function with names like <CODE class=function>_stat()</CODE>, <CODE class=function>_stat32()</CODE>, <CODE class=function>_stat32i64()</CODE> and <CODE class=function>_stat64i32()</CODE>. The one used here is for 32-bit code the one with 32-bit size and time fields, specifically called <CODE class=function>_stat32()</CODE>.</P>
<P>In Microsoft's compiler, by default struct stat means one with 64-bit time fields while in MinGW struct stat is the legacy one with 32-bit fields. To hopefully clear up this messs, the gstdio.h header defines a type <A class=link title=GStatBuf href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GStatBuf"><SPAN class=type>GStatBuf</SPAN></A> which is the appropriate struct type depending on the platform and/or compiler being used. On POSIX it is just struct stat, but note that even on POSIX platforms, <CODE class=function>stat()</CODE> might be a macro.</P>
<P>See your C library manual for more details about <CODE class=function>stat()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.29.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>buf</P></TD>
<TD class=parameter_description>
<P>a pointer to a stat struct, which will be filled with the file information</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.29.9></A>
<H4>Returns</H4>
<P>0 if the information was successfully retrieved, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-lstat></A>
<H3>g_lstat&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_lstat (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE><A class=link title=GStatBuf href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GStatBuf"><SPAN class=type>GStatBuf</SPAN></A> *buf</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>lstat()</CODE> function. The <CODE class=function>lstat()</CODE> function is like <CODE class=function>stat()</CODE> except that in the case of symbolic links, it returns information about the symbolic link itself and not the file that it refers to. If the system does not support symbolic links <A class=link title=g_lstat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-lstat"><CODE class=function>g_lstat()</CODE></A> is identical to <A class=link title=g_stat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-stat"><CODE class=function>g_stat()</CODE></A>.</P>
<P>See your C library manual for more details about <CODE class=function>lstat()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.30.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>buf</P></TD>
<TD class=parameter_description>
<P>a pointer to a stat struct, which will be filled with the file information</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.30.7></A>
<H4>Returns</H4>
<P>0 if the information was successfully retrieved, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-unlink></A>
<H3>g_unlink&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_unlink (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>unlink()</CODE> function. The <CODE class=function>unlink()</CODE> function deletes a name from the filesystem. If this was the last link to the file and no processes have it opened, the diskspace occupied by the file is freed.</P>
<P>See your C library manual for more details about <CODE class=function>unlink()</CODE>. Note that on Windows, it is in general not possible to delete files that are open to some process, or mapped into memory.</P>
<DIV class=refsect3><A name=id-1.5.18.7.31.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.31.7></A>
<H4>Returns</H4>
<P>0 if the name was successfully deleted, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-remove></A>
<H3>g_remove&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_remove (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>remove()</CODE> function. The <CODE class=function>remove()</CODE> function deletes a name from the filesystem.</P>
<P>See your C library manual for more details about how <CODE class=function>remove()</CODE> works on your system. On Unix, <CODE class=function>remove()</CODE> removes also directories, as it calls <CODE class=function>unlink()</CODE> for files and <CODE class=function>rmdir()</CODE> for directories. On Windows, although <CODE class=function>remove()</CODE> in the C library only works for files, this function tries first <CODE class=function>remove()</CODE> and then if that fails <CODE class=function>rmdir()</CODE>, and thus works for both files and directories. Note however, that on Windows, it is in general not possible to remove a file that is open to some process, or mapped into memory.</P>
<P>If this function fails on Windows you can't infer too much from the errno value. <CODE class=function>rmdir()</CODE> is tried regardless of what caused <CODE class=function>remove()</CODE> to fail. Any errno value set by <CODE class=function>remove()</CODE> will be overwritten by that set by <CODE class=function>rmdir()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.32.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.32.8></A>
<H4>Returns</H4>
<P>0 if the file was successfully removed, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-rmdir></A>
<H3>g_rmdir&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_rmdir (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>rmdir()</CODE> function. The <CODE class=function>rmdir()</CODE> function deletes a directory from the filesystem.</P>
<P>See your C library manual for more details about how <CODE class=function>rmdir()</CODE> works on your system.</P>
<DIV class=refsect3><A name=id-1.5.18.7.33.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.33.7></A>
<H4>Returns</H4>
<P>0 if the directory was successfully removed, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-fopen></A>
<H3>g_fopen&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>FILE</SPAN>&nbsp;*
g_fopen (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *mode</CODE></EM>);</PRE>
<P>A wrapper for the stdio <CODE class=function>fopen()</CODE> function. The <CODE class=function>fopen()</CODE> function opens a file and associates a new stream with it.</P>
<P>Because file descriptors are specific to the C library on Windows, and a file descriptor is part of the FILE struct, the FILE* returned by this function makes sense only to functions in the same C library. Thus if the GLib-using code uses a different C library than GLib does, the FILE* returned by this function cannot be passed to C library functions like <CODE class=function>fprintf()</CODE> or <CODE class=function>fread()</CODE>.</P>
<P>See your C library manual for more details about <CODE class=function>fopen()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.34.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>a string describing the mode in which the file should be opened</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.34.8></A>
<H4>Returns</H4>
<P>A FILE* if the file was successfully opened, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-freopen></A>
<H3>g_freopen&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>FILE</SPAN>&nbsp;*
g_freopen (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
           <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *mode</CODE></EM>,
           <EM class=parameter><CODE><SPAN class=type>FILE</SPAN> *stream</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>freopen()</CODE> function. The <CODE class=function>freopen()</CODE> function opens a file and associates it with an existing stream.</P>
<P>See your C library manual for more details about <CODE class=function>freopen()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.35.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>a string describing the mode in which the file should be opened</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>stream</P></TD>
<TD class=parameter_description>
<P>an existing stream which will be reused, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.35.7></A>
<H4>Returns</H4>
<P>A FILE* if the file was successfully opened, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if an error occurred.</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-chmod></A>
<H3>g_chmod&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_chmod (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE><SPAN class=type>int</SPAN> mode</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>chmod()</CODE> function. The <CODE class=function>chmod()</CODE> function is used to set the permissions of a file system object.</P>
<P>On Windows the file protection mechanism is not at all POSIX-like, and the underlying <CODE class=function>chmod()</CODE> function in the C library just sets or clears the FAT-style READONLY attribute. It does not touch any ACL. Software that needs to manage file permissions on Windows exactly should use the Win32 API.</P>
<P>See your C library manual for more details about <CODE class=function>chmod()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.36.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>as in <CODE class=function>chmod()</CODE></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.36.8></A>
<H4>Returns</H4>
<P>0 if the operation succeeded, -1 on error</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-access></A>
<H3>g_access&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_access (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
          <EM class=parameter><CODE><SPAN class=type>int</SPAN> mode</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>access()</CODE> function. This function is used to test a pathname for one or several of read, write or execute permissions, or just existence.</P>
<P>On Windows, the file protection mechanism is not at all POSIX-like, and the underlying function in the C library only checks the FAT-style READONLY attribute, and does not look at the ACL of a file at all. This function is this in practise almost useless on Windows. Software that needs to handle file permissions on Windows more exactly should use the Win32 API.</P>
<P>See your C library manual for more details about <CODE class=function>access()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.37.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>as in <CODE class=function>access()</CODE></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.37.8></A>
<H4>Returns</H4>
<P>zero if the pathname refers to an existing file system object that has all the tested permissions, or -1 otherwise or on error.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-creat></A>
<H3>g_creat&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_creat (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE><SPAN class=type>int</SPAN> mode</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>creat()</CODE> function. The <CODE class=function>creat()</CODE> function is used to convert a pathname into a file descriptor, creating a file if necessary.</P>
<P>On POSIX systems file descriptors are implemented by the operating system. On Windows, it's the C library that implements <CODE class=function>creat()</CODE> and file descriptors. The actual Windows API for opening files is different, see MSDN documentation for <CODE class=function>CreateFile()</CODE>. The Win32 API uses file handles, which are more randomish integers, not small integers like file descriptors.</P>
<P>Because file descriptors are specific to the C library on Windows, the file descriptor returned by this function makes sense only to functions in the same C library. Thus if the GLib-using code uses a different C library than GLib does, the file descriptor returned by this function cannot be passed to C library functions like <CODE class=function>write()</CODE> or <CODE class=function>read()</CODE>.</P>
<P>See your C library manual for more details about <CODE class=function>creat()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.38.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>mode</P></TD>
<TD class=parameter_description>
<P>as in <CODE class=function>creat()</CODE></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.38.9></A>
<H4>Returns</H4>
<P>a new file descriptor, or -1 if an error occurred. The return value can be used exactly like the return value from <CODE class=function>creat()</CODE>.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-chdir></A>
<H3>g_chdir&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_chdir (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *path</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>chdir()</CODE> function. The function changes the current directory of the process to <EM class=parameter><CODE>path</CODE></EM> .</P>
<P>See your C library manual for more details about <CODE class=function>chdir()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.18.7.39.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>path</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.39.7></A>
<H4>Returns</H4>
<P>0 on success, -1 if an error occurred.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-utime></A>
<H3>g_utime&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_utime (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *filename</CODE></EM>,
         <EM class=parameter><CODE><SPAN class=type>struct utimbuf</SPAN> *utb</CODE></EM>);</PRE>
<P>A wrapper for the POSIX <CODE class=function>utime()</CODE> function. The <CODE class=function>utime()</CODE> function sets the access and modification timestamps of a file.</P>
<P>See your C library manual for more details about how <CODE class=function>utime()</CODE> works on your system.</P>
<DIV class=refsect3><A name=id-1.5.18.7.40.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>filename</P></TD>
<TD class=parameter_description>
<P>a pathname in the GLib file name encoding (UTF-8 on Windows)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>utb</P></TD>
<TD class=parameter_description>
<P>a pointer to a struct utimbuf.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.18.7.40.7></A>
<H4>Returns</H4>
<P>0 if the operation was successful, -1 if an error occurred</P>
<P></P></DIV>
<P class=since>Since 2.18</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-close></A>
<H3>g_close&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_close (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> fd</CODE></EM>,
         <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>This wraps the <CODE class=function>close()</CODE> call; in case of error, <CODE class=literal>errno</CODE> will be preserved, but the error will also be stored as a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> in <EM class=parameter><CODE>error</CODE></EM> .</P>
<P>Besides using <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, there is another major reason to prefer this function over the call provided by the system; on Unix, it will attempt to correctly handle <CODE class=literal>EINTR</CODE>, which has platform-specific semantics.</P>
<DIV class=refsect3><A name=id-1.5.18.7.41.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>fd</P></TD>
<TD class=parameter_description>
<P>A file descriptor</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.36</P></DIV></DIV>
<DIV class=refsect1><A name=glib-File-Utilities.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GFileError></A>
<H3>enum GFileError</H3>
<P>Values corresponding to <EM class=parameter><CODE>errno</CODE></EM> codes returned from file operations on UNIX. Unlike <EM class=parameter><CODE>errno</CODE></EM> codes, GFileError values are available on all systems, even Windows. The exact meaning of each code depends on what sort of file operation you were performing; the UNIX documentation gives more details. The following error code descriptions come from the GNU C Library manual, and are under the copyright of that manual.</P>
<P>It's not very portable to make detailed assumptions about exactly which errors will be returned from a given operation. Some errors don't occur on some systems, etc., sometimes there are subtle differences in when a system will report a given error, etc.</P>
<DIV class=refsect3><A name=id-1.5.18.8.2.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-EXIST:CAPS></A>G_FILE_ERROR_EXIST</P></TD>
<TD class=enum_member_description>
<P>Operation not permitted; only the owner of the file (or other resource) or processes with special privileges can perform the operation.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-ISDIR:CAPS></A>G_FILE_ERROR_ISDIR</P></TD>
<TD class=enum_member_description>
<P>File is a directory; you cannot open a directory for writing, or create or remove hard links to it.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-ACCES:CAPS></A>G_FILE_ERROR_ACCES</P></TD>
<TD class=enum_member_description>
<P>Permission denied; the file permissions do not allow the attempted operation.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NAMETOOLONG:CAPS></A>G_FILE_ERROR_NAMETOOLONG</P></TD>
<TD class=enum_member_description>
<P>Filename too long.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NOENT:CAPS></A>G_FILE_ERROR_NOENT</P></TD>
<TD class=enum_member_description>
<P>No such file or directory. This is a "file doesn't exist" error for ordinary files that are referenced in contexts where they are expected to already exist.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NOTDIR:CAPS></A>G_FILE_ERROR_NOTDIR</P></TD>
<TD class=enum_member_description>
<P>A file that isn't a directory was specified when a directory is required.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NXIO:CAPS></A>G_FILE_ERROR_NXIO</P></TD>
<TD class=enum_member_description>
<P>No such device or address. The system tried to use the device represented by a file you specified, and it couldn't find the device. This can mean that the device file was installed incorrectly, or that the physical device is missing or not correctly attached to the computer.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NODEV:CAPS></A>G_FILE_ERROR_NODEV</P></TD>
<TD class=enum_member_description>
<P>The underlying file system of the specified file does not support memory mapping.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-ROFS:CAPS></A>G_FILE_ERROR_ROFS</P></TD>
<TD class=enum_member_description>
<P>The directory containing the new link can't be modified because it's on a read-only file system.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-TXTBSY:CAPS></A>G_FILE_ERROR_TXTBSY</P></TD>
<TD class=enum_member_description>
<P>Text file busy.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-FAULT:CAPS></A>G_FILE_ERROR_FAULT</P></TD>
<TD class=enum_member_description>
<P>You passed in a pointer to bad memory. (GLib won't reliably return this, don't pass in pointers to bad memory.)</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-LOOP:CAPS></A>G_FILE_ERROR_LOOP</P></TD>
<TD class=enum_member_description>
<P>Too many levels of symbolic links were encountered in looking up a file name. This often indicates a cycle of symbolic links.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NOSPC:CAPS></A>G_FILE_ERROR_NOSPC</P></TD>
<TD class=enum_member_description>
<P>No space left on device; write operation on a file failed because the disk is full.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NOMEM:CAPS></A>G_FILE_ERROR_NOMEM</P></TD>
<TD class=enum_member_description>
<P>No memory available. The system cannot allocate more virtual memory because its capacity is full.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-MFILE:CAPS></A>G_FILE_ERROR_MFILE</P></TD>
<TD class=enum_member_description>
<P>The current process has too many files open and can't open any more. Duplicate descriptors do count toward this limit.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NFILE:CAPS></A>G_FILE_ERROR_NFILE</P></TD>
<TD class=enum_member_description>
<P>There are too many distinct file openings in the entire system.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-BADF:CAPS></A>G_FILE_ERROR_BADF</P></TD>
<TD class=enum_member_description>
<P>Bad file descriptor; for example, I/O on a descriptor that has been closed or reading from a descriptor open only for writing (or vice versa).</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-INVAL:CAPS></A>G_FILE_ERROR_INVAL</P></TD>
<TD class=enum_member_description>
<P>Invalid argument. This is used to indicate various kinds of problems with passing the wrong argument to a library function.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-PIPE:CAPS></A>G_FILE_ERROR_PIPE</P></TD>
<TD class=enum_member_description>
<P>Broken pipe; there is no process reading from the other end of a pipe. Every library function that returns this error code also generates a 'SIGPIPE' signal; this signal terminates the program if not handled or blocked. Thus, your program will never actually see this code unless it has handled or blocked 'SIGPIPE'.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-AGAIN:CAPS></A>G_FILE_ERROR_AGAIN</P></TD>
<TD class=enum_member_description>
<P>Resource temporarily unavailable; the call might work if you try again later.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-INTR:CAPS></A>G_FILE_ERROR_INTR</P></TD>
<TD class=enum_member_description>
<P>Interrupted function call; an asynchronous signal occurred and prevented completion of the call. When this happens, you should try the call again.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-IO:CAPS></A>G_FILE_ERROR_IO</P></TD>
<TD class=enum_member_description>
<P>Input/output error; usually used for physical read or write errors. i.e. the disk or other physical device hardware is returning errors.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-PERM:CAPS></A>G_FILE_ERROR_PERM</P></TD>
<TD class=enum_member_description>
<P>Operation not permitted; only the owner of the file (or other resource) or processes with special privileges can perform the operation.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-NOSYS:CAPS></A>G_FILE_ERROR_NOSYS</P></TD>
<TD class=enum_member_description>
<P>Function not implemented; this indicates that the system is missing some functionality.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-ERROR-FAILED:CAPS></A>G_FILE_ERROR_FAILED</P></TD>
<TD class=enum_member_description>
<P>Does not correspond to a UNIX error code; this is the standard "failed for unspecified reason" error code present in all <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> error code enumerations. Returned if no specific code applies.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-FILE-ERROR:CAPS></A>
<H3>G_FILE_ERROR</H3><PRE class=programlisting>#define G_FILE_ERROR g_file_error_quark ()
</PRE>
<P>Error domain for file operations. Errors in this domain will be from the <A class=link title="enum GFileError" href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GFileError"><SPAN class=type>GFileError</SPAN></A> enumeration. See <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> for information on error domains.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GFileTest></A>
<H3>enum GFileTest</H3>
<P>A test to perform on a file using <A class=link title=g_file_test&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-test"><CODE class=function>g_file_test()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.18.8.4.4></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-TEST-IS-REGULAR:CAPS></A>G_FILE_TEST_IS_REGULAR</P></TD>
<TD class=enum_member_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file is a regular file (not a directory). Note that this test will also return <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the tested file is a symlink to a regular file.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-TEST-IS-SYMLINK:CAPS></A>G_FILE_TEST_IS_SYMLINK</P></TD>
<TD class=enum_member_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file is a symlink.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-TEST-IS-DIR:CAPS></A>G_FILE_TEST_IS_DIR</P></TD>
<TD class=enum_member_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file is a directory.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-TEST-IS-EXECUTABLE:CAPS></A>G_FILE_TEST_IS_EXECUTABLE</P></TD>
<TD class=enum_member_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file is executable.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-FILE-TEST-EXISTS:CAPS></A>G_FILE_TEST_EXISTS</P></TD>
<TD class=enum_member_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the file exists. It may or may not be a regular file.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GDir></A>
<H3>GDir</H3><PRE class=programlisting>typedef struct _GDir GDir;</PRE>
<P>An opaque structure representing an opened directory.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GMappedFile></A>
<H3>GMappedFile</H3><PRE class=programlisting>typedef struct _GMappedFile GMappedFile;</PRE>
<P>The <A class=link title=GMappedFile href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#GMappedFile"><SPAN class=type>GMappedFile</SPAN></A> represents a file mapping created with <A class=link title=g_mapped_file_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-mapped-file-new"><CODE class=function>g_mapped_file_new()</CODE></A>. It has only private members and should not be accessed directly.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GStatBuf></A>
<H3>GStatBuf</H3><PRE class=programlisting>typedef struct _stat32 GStatBuf;
</PRE>
<P>A type corresponding to the appropriate struct type for the <CODE class=function>stat()</CODE> system call, depending on the platform and/or compiler being used.</P>
<P>See <A class=link title=g_stat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-stat"><CODE class=function>g_stat()</CODE></A> for more information.</P></DIV></DIV>