<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Spawning-Processes.top_of_page></A>Spawning Processes</SPAN></H2>
<P>Spawning Processes &#8212; process launching</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Spawning-Processes.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GSpawnChildSetupFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnChildSetupFunc">*GSpawnChildSetupFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes">g_spawn_async_with_pipes</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async">g_spawn_async</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync">g_spawn_sync</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_check_exit_status&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-check-exit-status">g_spawn_check_exit_status</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_command_line_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-command-line-async">g_spawn_command_line_async</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_spawn_command_line_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-command-line-sync">g_spawn_command_line_sync</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid">g_spawn_close_pid</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Spawning-Processes.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GSpawnError" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnError">GSpawnError</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_SPAWN_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR:CAPS">G_SPAWN_ERROR</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags">GSpawnFlags</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_SPAWN_EXIT_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-EXIT-ERROR:CAPS">G_SPAWN_EXIT_ERROR</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Spawning-Processes.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Spawning-Processes.description></A>
<H2>Description</H2>
<P>GLib supports spawning of processes with an API that is more convenient than the bare UNIX <CODE class=function>fork()</CODE> and <CODE class=function>exec()</CODE>.</P>
<P>The g_spawn family of functions has synchronous (<A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A>) and asynchronous variants (<A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A>, <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A>), as well as convenience variants that take a complete shell-like commandline (<A class=link title=g_spawn_command_line_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-command-line-sync"><CODE class=function>g_spawn_command_line_sync()</CODE></A>, <A class=link title=g_spawn_command_line_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-command-line-async"><CODE class=function>g_spawn_command_line_async()</CODE></A>).</P>
<P>See <A href="https://developer.gnome.org/gio/stable/GSubprocess.html"><SPAN class=type>GSubprocess</SPAN></A> in GIO for a higher-level API that provides stream interfaces for communication with child processes.</P></DIV>
<DIV class=refsect1><A name=glib-Spawning-Processes.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=GSpawnChildSetupFunc></A>
<H3>GSpawnChildSetupFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GSpawnChildSetupFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<P>Specifies the type of the setup function passed to <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A>, <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> and <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A>, which can, in very limited ways, be used to affect the child's execution.</P>
<P>On POSIX platforms, the function is called in the child after GLib has performed all the setup it plans to perform, but before calling <CODE class=function>exec()</CODE>. Actions taken in this function will only affect the child, not the parent.</P>
<P>On Windows, the function is called in the parent. Its usefulness on Windows is thus questionable. In many cases executing the child setup function in the parent can have ill effects, and you should be very careful when porting software to Windows that uses child setup functions.</P>
<P>However, even on POSIX, you are extremely limited in what you can safely do from a <A class=link title=GSpawnChildSetupFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnChildSetupFunc"><SPAN class=type>GSpawnChildSetupFunc</SPAN></A>, because any mutexes that were held by other threads in the parent process at the time of the <CODE class=function>fork()</CODE> will still be locked in the child process, and they will never be unlocked (since the threads that held them don't exist in the child). POSIX allows only async-signal-safe functions (see signal(7)) to be called in the child between <CODE class=function>fork()</CODE> and <CODE class=function>exec()</CODE>, which drastically limits the usefulness of child setup functions.</P>
<P>In particular, it is not safe to call any function which may call <CODE class=function>malloc()</CODE>, which includes POSIX functions such as <CODE class=function>setenv()</CODE>. If you need to set up the child environment differently from the parent, you should use <A class=link title=g_get_environ&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-environ"><CODE class=function>g_get_environ()</CODE></A>, <A class=link title=g_environ_setenv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-environ-setenv"><CODE class=function>g_environ_setenv()</CODE></A>, and <A class=link title=g_environ_unsetenv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-environ-unsetenv"><CODE class=function>g_environ_unsetenv()</CODE></A>, and then pass the complete environment list to the <CODE class=literal>g_spawn...</CODE> function.</P>
<DIV class=refsect3><A name=id-1.5.17.7.2.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>user data to pass to the function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-async-with-pipes></A>
<H3>g_spawn_async_with_pipes&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_async_with_pipes (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *working_directory</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **argv</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **envp</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A> flags</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=GSpawnChildSetupFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnChildSetupFunc"><SPAN class=type>GSpawnChildSetupFunc</SPAN></A> child_setup</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=GPid href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#GPid"><SPAN class=type>GPid</SPAN></A> *child_pid</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *standard_input</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *standard_output</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *standard_error</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Executes a child program asynchronously (your program will not block waiting for the child to exit). The child program is specified by the only argument that must be provided, <EM class=parameter><CODE>argv</CODE></EM> . <EM class=parameter><CODE>argv</CODE></EM> should be a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings, to be passed as the argument vector for the child. The first string in <EM class=parameter><CODE>argv</CODE></EM> is of course the name of the program to execute. By default, the name of the program must be a full path. If <EM class=parameter><CODE>flags</CODE></EM> contains the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> flag, the <CODE class=literal>PATH</CODE> environment variable is used to search for the executable. If <EM class=parameter><CODE>flags</CODE></EM> contains the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH-FROM-ENVP:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH_FROM_ENVP</CODE></A> flag, the <CODE class=literal>PATH</CODE> variable from <EM class=parameter><CODE>envp</CODE></EM> is used to search for the executable. If both the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> and <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH-FROM-ENVP:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH_FROM_ENVP</CODE></A> flags are set, the <CODE class=literal>PATH</CODE> variable from <EM class=parameter><CODE>envp</CODE></EM> takes precedence over the environment variable.</P>
<P>If the program name is not a full path and <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> flag is not used, then the program will be run from the current directory (or <EM class=parameter><CODE>working_directory</CODE></EM> , if specified); this might be unexpected or even dangerous in some cases when the current directory is world-writable.</P>
<P>On Windows, note that all the string or string vector arguments to this function and the other g_spawn*() functions are in UTF-8, the GLib file name encoding. Unicode characters that are not part of the system codepage passed in these arguments will be correctly available in the spawned program only if it uses wide character API to retrieve its command line. For C programs built with Microsoft's tools it is enough to make the program have a <CODE class=function>wmain()</CODE> instead of <CODE class=function>main()</CODE>. <CODE class=function>wmain()</CODE> has a wide character argument vector as parameter.</P>
<P>At least currently, mingw doesn't support <CODE class=function>wmain()</CODE>, so if you use mingw to develop the spawned program, it will have to call the undocumented function <CODE class=function>__wgetmainargs()</CODE> to get the wide character argument vector and environment. See gspawn-win32-helper.c in the GLib sources or init.c in the mingw runtime sources for a prototype for that function. Alternatively, you can retrieve the Win32 system level wide character command line passed to the spawned program using the <CODE class=function>GetCommandLineW()</CODE> function.</P>
<P>On Windows the low-level child process creation API <CODE class=function>CreateProcess()</CODE> doesn't use argument vectors, but a command line. The C runtime library's spawn*() family of functions (which <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> eventually calls) paste the argument vector elements together into a command line, and the C runtime startup code does a corresponding reconstruction of an argument vector from the command line, to be passed to <CODE class=function>main()</CODE>. Complications arise when you have argument vector elements that contain spaces of double quotes. The spawn*() functions don't do any quoting or escaping, but on the other hand the startup code does do unquoting and unescaping in order to enable receiving arguments with embedded spaces or double quotes. To work around this asymmetry, <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> will do quoting and escaping on argument vector elements that need it before calling the C runtime <CODE class=function>spawn()</CODE> function.</P>
<P>The returned <EM class=parameter><CODE>child_pid</CODE></EM> on Windows is a handle to the child process, not its identifier. Process handles and process identifiers are different concepts on Windows.</P>
<P><EM class=parameter><CODE>envp</CODE></EM> is a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings, where each string has the form <CODE class=literal>KEY=VALUE</CODE>. This will become the child's environment. If <EM class=parameter><CODE>envp</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the child inherits its parent's environment.</P>
<P><EM class=parameter><CODE>flags</CODE></EM> should be the bitwise OR of any flags you want to affect the function's behaviour. The <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-DO-NOT-REAP-CHILD:CAPS"><CODE class=literal>G_SPAWN_DO_NOT_REAP_CHILD</CODE></A> means that the child will not automatically be reaped; you must use a child watch to be notified about the death of the child process. Eventually you must call <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A> on the <EM class=parameter><CODE>child_pid</CODE></EM> , in order to free resources which may be associated with the child process. (On Unix, using a child watch is equivalent to calling <CODE class=function>waitpid()</CODE> or handling the <CODE class=literal>SIGCHLD</CODE> signal manually. On Windows, calling <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A> is equivalent to calling <CODE class=function>CloseHandle()</CODE> on the process handle returned in <EM class=parameter><CODE>child_pid</CODE></EM> ). See <A class=link title=g_child_watch_add&nbsp;() href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-child-watch-add"><CODE class=function>g_child_watch_add()</CODE></A>.</P>
<P><A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-LEAVE-DESCRIPTORS-OPEN:CAPS"><CODE class=literal>G_SPAWN_LEAVE_DESCRIPTORS_OPEN</CODE></A> means that the parent's open file descriptors will be inherited by the child; otherwise all descriptors except stdin/stdout/stderr will be closed before calling <CODE class=function>exec()</CODE> in the child. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> means that <EM class=parameter><CODE>argv</CODE></EM> [0] need not be an absolute path, it will be looked for in the <CODE class=literal>PATH</CODE> environment variable. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH-FROM-ENVP:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH_FROM_ENVP</CODE></A> means need not be an absolute path, it will be looked for in the <CODE class=literal>PATH</CODE> variable from <EM class=parameter><CODE>envp</CODE></EM> . If both <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> and <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH-FROM-ENVP:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH_FROM_ENVP</CODE></A> are used, the value from <EM class=parameter><CODE>envp</CODE></EM> takes precedence over the environment. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDOUT-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDOUT_TO_DEV_NULL</CODE></A> means that the child's standard output will be discarded, instead of going to the same location as the parent's standard output. If you use this flag, <EM class=parameter><CODE>standard_output</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDERR-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDERR_TO_DEV_NULL</CODE></A> means that the child's standard error will be discarded, instead of going to the same location as the parent's standard error. If you use this flag, <EM class=parameter><CODE>standard_error</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-CHILD-INHERITS-STDIN:CAPS"><CODE class=literal>G_SPAWN_CHILD_INHERITS_STDIN</CODE></A> means that the child will inherit the parent's standard input (by default, the child's standard input is attached to /dev/null). If you use this flag, <EM class=parameter><CODE>standard_input</CODE></EM> must be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-FILE-AND-ARGV-ZERO:CAPS"><CODE class=literal>G_SPAWN_FILE_AND_ARGV_ZERO</CODE></A> means that the first element of <EM class=parameter><CODE>argv</CODE></EM> is the file to execute, while the remaining elements are the actual argument vector to pass to the file. Normally <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> uses <EM class=parameter><CODE>argv</CODE></EM> [0] as the file to execute, and passes all of <EM class=parameter><CODE>argv</CODE></EM> to the child.</P>
<P><EM class=parameter><CODE>child_setup</CODE></EM> and <EM class=parameter><CODE>user_data</CODE></EM> are a function and user data. On POSIX platforms, the function is called in the child after GLib has performed all the setup it plans to perform (including creating pipes, closing file descriptors, etc.) but before calling <CODE class=function>exec()</CODE>. That is, <EM class=parameter><CODE>child_setup</CODE></EM> is called just before calling <CODE class=function>exec()</CODE> in the child. Obviously actions taken in this function will only affect the child, not the parent.</P>
<P>On Windows, there is no separate <CODE class=function>fork()</CODE> and <CODE class=function>exec()</CODE> functionality. Child processes are created and run with a single API call, <CODE class=function>CreateProcess()</CODE>. There is no sensible thing <EM class=parameter><CODE>child_setup</CODE></EM> could be used for on Windows so it is ignored and not called.</P>
<P>If non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <EM class=parameter><CODE>child_pid</CODE></EM> will on Unix be filled with the child's process ID. You can use the process ID to send signals to the child, or to use <A class=link title=g_child_watch_add&nbsp;() href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-child-watch-add"><CODE class=function>g_child_watch_add()</CODE></A> (or <CODE class=function>waitpid()</CODE>) if you specified the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-DO-NOT-REAP-CHILD:CAPS"><CODE class=literal>G_SPAWN_DO_NOT_REAP_CHILD</CODE></A> flag. On Windows, <EM class=parameter><CODE>child_pid</CODE></EM> will be filled with a handle to the child process only if you specified the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-DO-NOT-REAP-CHILD:CAPS"><CODE class=literal>G_SPAWN_DO_NOT_REAP_CHILD</CODE></A> flag. You can then access the child process using the Win32 API, for example wait for its termination with the WaitFor*() functions, or examine its exit code with <CODE class=function>GetExitCodeProcess()</CODE>. You should close the handle with <CODE class=function>CloseHandle()</CODE> or <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A> when you no longer need it.</P>
<P>If non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the <EM class=parameter><CODE>standard_input</CODE></EM> , <EM class=parameter><CODE>standard_output</CODE></EM> , <EM class=parameter><CODE>standard_error</CODE></EM> locations will be filled with file descriptors for writing to the child's standard input or reading from its standard output or standard error. The caller of <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> must close these file descriptors when they are no longer in use. If these parameters are <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the corresponding pipe won't be created.</P>
<P>If <EM class=parameter><CODE>standard_input</CODE></EM> is NULL, the child's standard input is attached to /dev/null unless <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-CHILD-INHERITS-STDIN:CAPS"><CODE class=literal>G_SPAWN_CHILD_INHERITS_STDIN</CODE></A> is set.</P>
<P>If <EM class=parameter><CODE>standard_error</CODE></EM> is NULL, the child's standard error goes to the same location as the parent's standard error unless <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDERR-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDERR_TO_DEV_NULL</CODE></A> is set.</P>
<P>If <EM class=parameter><CODE>standard_output</CODE></EM> is NULL, the child's standard output goes to the same location as the parent's standard output unless <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDOUT-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDOUT_TO_DEV_NULL</CODE></A> is set.</P>
<P><EM class=parameter><CODE>error</CODE></EM> can be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to ignore errors, or non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to report errors. If an error is set, the function returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. Errors are reported even if they occur in the child (for example if the executable in <EM class=parameter><CODE>argv</CODE></EM> [0] is not found). Typically the <CODE class=literal>message</CODE> field of returned errors should be displayed to users. Possible errors are those from the <A class=link title=G_SPAWN_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR:CAPS"><SPAN class=type>G_SPAWN_ERROR</SPAN></A> domain.</P>
<P>If an error occurs, <EM class=parameter><CODE>child_pid</CODE></EM> , <EM class=parameter><CODE>standard_input</CODE></EM> , <EM class=parameter><CODE>standard_output</CODE></EM> , and <EM class=parameter><CODE>standard_error</CODE></EM> will not be filled with valid values.</P>
<P>If <EM class=parameter><CODE>child_pid</CODE></EM> is not <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> and an error does not occur then the returned process reference must be closed using <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A>.</P>
<P>If you are writing a GTK+ application, and the program you are spawning is a graphical application, too, then you may want to use <CODE class=function>gdk_spawn_on_screen_with_pipes()</CODE> instead to ensure that the spawned program opens its windows on the right screen.</P>
<DIV class=refsect3><A name=id-1.5.17.7.3.24></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>working_directory</P></TD>
<TD class=parameter_description>
<P>child's current working directory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's, in the GLib file name encoding. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>argv</P></TD>
<TD class=parameter_description>
<P>child's argument vector, in the GLib file name encoding. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>envp</P></TD>
<TD class=parameter_description>
<P>child's environment, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's, in the GLib file name encoding. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>flags from <A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>child_setup</P></TD>
<TD class=parameter_description>
<P>function to run in the child just before <CODE class=function>exec()</CODE>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="The callback is valid until first called."><SPAN class=acronym>scope async</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>user data for <EM class=parameter><CODE>child_setup</CODE></EM> . </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><SPAN class=acronym>closure</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>child_pid</P></TD>
<TD class=parameter_description>
<P>return location for child process ID, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_input</P></TD>
<TD class=parameter_description>
<P>return location for file descriptor to write to child's stdin, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_output</P></TD>
<TD class=parameter_description>
<P>return location for file descriptor to read child's stdout, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_error</P></TD>
<TD class=parameter_description>
<P>return location for file descriptor to read child's stderr, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.3.25></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if an error was set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-async></A>
<H3>g_spawn_async&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_async (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *working_directory</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **argv</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **envp</CODE></EM>,
               <EM class=parameter><CODE><A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A> flags</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=GSpawnChildSetupFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnChildSetupFunc"><SPAN class=type>GSpawnChildSetupFunc</SPAN></A> child_setup</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=GPid href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#GPid"><SPAN class=type>GPid</SPAN></A> *child_pid</CODE></EM>,
               <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>See <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> for a full description; this function simply calls the <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> without any pipes.</P>
<P>You should call <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A> on the returned child process reference when you don't need it any more.</P>
<P>If you are writing a GTK+ application, and the program you are spawning is a graphical application, too, then you may want to use <CODE class=function>gdk_spawn_on_screen()</CODE> instead to ensure that the spawned program opens its windows on the right screen.</P>
<P>Note that the returned <EM class=parameter><CODE>child_pid</CODE></EM> on Windows is a handle to the child process and not its identifier. Process handles and process identifiers are different concepts on Windows.</P>
<DIV class=refsect3><A name=id-1.5.17.7.4.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>working_directory</P></TD>
<TD class=parameter_description>
<P>child's current working directory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>argv</P></TD>
<TD class=parameter_description>
<P>child's argument vector. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>envp</P></TD>
<TD class=parameter_description>
<P>child's environment, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>flags from <A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>child_setup</P></TD>
<TD class=parameter_description>
<P>function to run in the child just before <CODE class=function>exec()</CODE>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="The callback is valid until first called."><SPAN class=acronym>scope async</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>user data for <EM class=parameter><CODE>child_setup</CODE></EM> . </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><SPAN class=acronym>closure</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>child_pid</P></TD>
<TD class=parameter_description>
<P>return location for child process reference, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.4.9></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if error is set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-sync></A>
<H3>g_spawn_sync&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_sync (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *working_directory</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **argv</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **envp</CODE></EM>,
              <EM class=parameter><CODE><A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A> flags</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=GSpawnChildSetupFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnChildSetupFunc"><SPAN class=type>GSpawnChildSetupFunc</SPAN></A> child_setup</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **standard_output</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **standard_error</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *exit_status</CODE></EM>,
              <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Executes a child synchronously (waits for the child to exit before returning). All output from the child is stored in <EM class=parameter><CODE>standard_output</CODE></EM> and <EM class=parameter><CODE>standard_error</CODE></EM> , if those parameters are non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. Note that you must set the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDOUT-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDOUT_TO_DEV_NULL</CODE></A> and <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-STDERR-TO-DEV-NULL:CAPS"><CODE class=literal>G_SPAWN_STDERR_TO_DEV_NULL</CODE></A> flags when passing <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for <EM class=parameter><CODE>standard_output</CODE></EM> and <EM class=parameter><CODE>standard_error</CODE></EM> .</P>
<P>If <EM class=parameter><CODE>exit_status</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the platform-specific exit status of the child is stored there; see the documentation of <A class=link title=g_spawn_check_exit_status&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-check-exit-status"><CODE class=function>g_spawn_check_exit_status()</CODE></A> for how to use and interpret this. Note that it is invalid to pass <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-DO-NOT-REAP-CHILD:CAPS"><CODE class=literal>G_SPAWN_DO_NOT_REAP_CHILD</CODE></A> in <EM class=parameter><CODE>flags</CODE></EM> .</P>
<P>If an error occurs, no data is returned in <EM class=parameter><CODE>standard_output</CODE></EM> , <EM class=parameter><CODE>standard_error</CODE></EM> , or <EM class=parameter><CODE>exit_status</CODE></EM> .</P>
<P>This function calls <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> internally; see that function for full details on the other parameters and details on how these functions work on Windows.</P>
<DIV class=refsect3><A name=id-1.5.17.7.5.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>working_directory</P></TD>
<TD class=parameter_description>
<P>child's current working directory, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>argv</P></TD>
<TD class=parameter_description>
<P>child's argument vector. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>envp</P></TD>
<TD class=parameter_description>
<P>child's environment, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to inherit parent's. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>flags from <A class=link title="enum GSpawnFlags" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnFlags"><SPAN class=type>GSpawnFlags</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>child_setup</P></TD>
<TD class=parameter_description>
<P>function to run in the child just before <CODE class=function>exec()</CODE>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="The callback is valid until first called."><SPAN class=acronym>scope async</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>user data for <EM class=parameter><CODE>child_setup</CODE></EM> . </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="This parameter is a 'user_data', for callbacks; many bindings can pass NULL here."><SPAN class=acronym>closure</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_output</P></TD>
<TD class=parameter_description>
<P>return location for child output, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_error</P></TD>
<TD class=parameter_description>
<P>return location for child error messages, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>exit_status</P></TD>
<TD class=parameter_description>
<P>return location for child exit status, as returned by <CODE class=function>waitpid()</CODE>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.5.9></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if an error was set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-check-exit-status></A>
<H3>g_spawn_check_exit_status&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_check_exit_status (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> exit_status</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Set <EM class=parameter><CODE>error</CODE></EM> if <EM class=parameter><CODE>exit_status</CODE></EM> indicates the child exited abnormally (e.g. with a nonzero exit code, or via a fatal signal).</P>
<P>The <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> and <A class=link title=g_child_watch_add&nbsp;() href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-child-watch-add"><CODE class=function>g_child_watch_add()</CODE></A> family of APIs return an exit status for subprocesses encoded in a platform-specific way. On Unix, this is guaranteed to be in the same format <CODE class=function>waitpid()</CODE> returns, and on Windows it is guaranteed to be the result of <CODE class=function>GetExitCodeProcess()</CODE>.</P>
<P>Prior to the introduction of this function in GLib 2.34, interpreting <EM class=parameter><CODE>exit_status</CODE></EM> required use of platform-specific APIs, which is problematic for software using GLib as a cross-platform layer.</P>
<P>Additionally, many programs simply want to determine whether or not the child exited successfully, and either propagate a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> or print a message to standard error. In that common case, this function can be used. Note that the error message in <EM class=parameter><CODE>error</CODE></EM> will contain human-readable information about the exit status.</P>
<P>The <EM class=parameter><CODE>domain</CODE></EM> and <EM class=parameter><CODE>code</CODE></EM> of <EM class=parameter><CODE>error</CODE></EM> have special semantics in the case where the process has an "exit code", as opposed to being killed by a signal. On Unix, this happens if <CODE class=function>WIFEXITED()</CODE> would be true of <EM class=parameter><CODE>exit_status</CODE></EM> . On Windows, it is always the case.</P>
<P>The special semantics are that the actual exit code will be the code set in <EM class=parameter><CODE>error</CODE></EM> , and the domain will be <A class=link title=G_SPAWN_EXIT_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-EXIT-ERROR:CAPS"><CODE class=literal>G_SPAWN_EXIT_ERROR</CODE></A>. This allows you to differentiate between different exit codes.</P>
<P>If the process was terminated by some means other than an exit status, the domain will be <A class=link title=G_SPAWN_ERROR href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR:CAPS"><CODE class=literal>G_SPAWN_ERROR</CODE></A>, and the code will be <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR-FAILED:CAPS"><CODE class=literal>G_SPAWN_ERROR_FAILED</CODE></A>.</P>
<P>This function just offers convenience; you can of course also check the available platform via a macro such as <A class=link title=G_OS_UNIX href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#G-OS-UNIX:CAPS"><CODE class=literal>G_OS_UNIX</CODE></A>, and use <CODE class=function>WIFEXITED()</CODE> and <CODE class=function>WEXITSTATUS()</CODE> on <EM class=parameter><CODE>exit_status</CODE></EM> directly. Do not attempt to scan or parse the error message string; it may be translated and/or change in future versions of GLib.</P>
<DIV class=refsect3><A name=id-1.5.17.7.6.12></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>exit_status</P></TD>
<TD class=parameter_description>
<P>An exit code as returned from <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.6.13></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if child exited successfully, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> otherwise (and <EM class=parameter><CODE>error</CODE></EM> will be set)</P>
<P></P></DIV>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-command-line-async></A>
<H3>g_spawn_command_line_async&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_command_line_async (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *command_line</CODE></EM>,
                            <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>A simple version of <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A> that parses a command line with <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A> and passes it to <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A>. Runs a command line in the background. Unlike <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A>, the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> flag is enabled, other flags are not. Note that <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> can have security implications, so consider using <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A> directly if appropriate. Possible errors are those from <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A> and <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A>.</P>
<P>The same concerns on Windows apply as for <A class=link title=g_spawn_command_line_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-command-line-sync"><CODE class=function>g_spawn_command_line_sync()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.17.7.7.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>command_line</P></TD>
<TD class=parameter_description>
<P>a command line</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for errors</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.7.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if error is set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-command-line-sync></A>
<H3>g_spawn_command_line_sync&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_spawn_command_line_sync (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *command_line</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **standard_output</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **standard_error</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *exit_status</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>A simple version of <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> with little-used parameters removed, taking a command line instead of an argument vector. See <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> for full details. <EM class=parameter><CODE>command_line</CODE></EM> will be parsed by <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A>. Unlike <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A>, the <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> flag is enabled. Note that <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS"><CODE class=literal>G_SPAWN_SEARCH_PATH</CODE></A> can have security implications, so consider using <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> directly if appropriate. Possible errors are those from <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A> and those from <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A>.</P>
<P>If <EM class=parameter><CODE>exit_status</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the platform-specific exit status of the child is stored there; see the documentation of <A class=link title=g_spawn_check_exit_status&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-check-exit-status"><CODE class=function>g_spawn_check_exit_status()</CODE></A> for how to use and interpret this.</P>
<P>On Windows, please note the implications of <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A> parsing <EM class=parameter><CODE>command_line</CODE></EM> . Parsing is done according to Unix shell rules, not Windows command interpreter rules. Space is a separator, and backslashes are special. Thus you cannot simply pass a <EM class=parameter><CODE>command_line</CODE></EM> containing canonical Windows paths, like "c:\program files\app\app.exe", as the backslashes will be eaten, and the space will act as a separator. You need to enclose such paths with single quotes, like "'c:\program files\app\app.exe' 'e:\folder\argument.txt'".</P>
<DIV class=refsect3><A name=id-1.5.17.7.8.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>command_line</P></TD>
<TD class=parameter_description>
<P>a command line </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_output</P></TD>
<TD class=parameter_description>
<P>return location for child output. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>standard_error</P></TD>
<TD class=parameter_description>
<P>return location for child errors. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>exit_status</P></TD>
<TD class=parameter_description>
<P>return location for child exit status, as returned by <CODE class=function>waitpid()</CODE>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for errors</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.17.7.8.8></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if an error was set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-spawn-close-pid></A>
<H3>g_spawn_close_pid&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_spawn_close_pid (<EM class=parameter><CODE><A class=link title=GPid href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#GPid"><SPAN class=type>GPid</SPAN></A> pid</CODE></EM>);</PRE>
<P>On some platforms, notably Windows, the <A class=link title=GPid href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#GPid"><SPAN class=type>GPid</SPAN></A> type represents a resource which must be closed to prevent resource leaking. <A class=link title=g_spawn_close_pid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-close-pid"><CODE class=function>g_spawn_close_pid()</CODE></A> is provided for this purpose. It should be used on all platforms, even though it doesn't do anything under UNIX.</P>
<DIV class=refsect3><A name=id-1.5.17.7.9.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>pid</P></TD>
<TD class=parameter_description>
<P>The process reference to close</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-Spawning-Processes.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GSpawnError></A>
<H3>enum GSpawnError</H3>
<P>Error codes returned by spawning processes.</P>
<DIV class=refsect3><A name=id-1.5.17.8.2.4></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-FORK:CAPS></A>G_SPAWN_ERROR_FORK</P></TD>
<TD class=enum_member_description>
<P>Fork failed due to lack of memory.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-READ:CAPS></A>G_SPAWN_ERROR_READ</P></TD>
<TD class=enum_member_description>
<P>Read or select on pipes failed.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-CHDIR:CAPS></A>G_SPAWN_ERROR_CHDIR</P></TD>
<TD class=enum_member_description>
<P>Changing to working directory failed.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-ACCES:CAPS></A>G_SPAWN_ERROR_ACCES</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EACCES</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-PERM:CAPS></A>G_SPAWN_ERROR_PERM</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EPERM</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-TOO-BIG:CAPS></A>G_SPAWN_ERROR_TOO_BIG</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>E2BIG</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-2BIG:CAPS></A>G_SPAWN_ERROR_2BIG</P></TD>
<TD class=enum_member_description>
<P>deprecated alias for <A class=link href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#G-SPAWN-ERROR-TOO-BIG:CAPS"><CODE class=literal>G_SPAWN_ERROR_TOO_BIG</CODE></A></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NOEXEC:CAPS></A>G_SPAWN_ERROR_NOEXEC</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENOEXEC</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NAMETOOLONG:CAPS></A>G_SPAWN_ERROR_NAMETOOLONG</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENAMETOOLONG</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NOENT:CAPS></A>G_SPAWN_ERROR_NOENT</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENOENT</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NOMEM:CAPS></A>G_SPAWN_ERROR_NOMEM</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENOMEM</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NOTDIR:CAPS></A>G_SPAWN_ERROR_NOTDIR</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENOTDIR</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-LOOP:CAPS></A>G_SPAWN_ERROR_LOOP</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ELOOP</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-TXTBUSY:CAPS></A>G_SPAWN_ERROR_TXTBUSY</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ETXTBUSY</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-IO:CAPS></A>G_SPAWN_ERROR_IO</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EIO</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-NFILE:CAPS></A>G_SPAWN_ERROR_NFILE</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ENFILE</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-MFILE:CAPS></A>G_SPAWN_ERROR_MFILE</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EMFILE</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-INVAL:CAPS></A>G_SPAWN_ERROR_INVAL</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EINVAL</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-ISDIR:CAPS></A>G_SPAWN_ERROR_ISDIR</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>EISDIR</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-LIBBAD:CAPS></A>G_SPAWN_ERROR_LIBBAD</P></TD>
<TD class=enum_member_description>
<P>execv() returned <CODE class=literal>ELIBBAD</CODE></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-ERROR-FAILED:CAPS></A>G_SPAWN_ERROR_FAILED</P></TD>
<TD class=enum_member_description>
<P>Some other fatal failure, <CODE class=literal>error-&gt;message</CODE> should explain.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-SPAWN-ERROR:CAPS></A>
<H3>G_SPAWN_ERROR</H3><PRE class=programlisting>#define G_SPAWN_ERROR g_spawn_error_quark ()
</PRE>
<P>Error domain for spawning processes. Errors in this domain will be from the <A class=link title="enum GSpawnError" href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#GSpawnError"><SPAN class=type>GSpawnError</SPAN></A> enumeration. See <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> for information on error domains.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GSpawnFlags></A>
<H3>enum GSpawnFlags</H3>
<P>Flags passed to <A class=link title=g_spawn_sync&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-sync"><CODE class=function>g_spawn_sync()</CODE></A>, <A class=link title=g_spawn_async&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async"><CODE class=function>g_spawn_async()</CODE></A> and <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.17.8.4.4></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-DEFAULT:CAPS></A>G_SPAWN_DEFAULT</P></TD>
<TD class=enum_member_description>
<P>no flags, default behaviour</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-LEAVE-DESCRIPTORS-OPEN:CAPS></A>G_SPAWN_LEAVE_DESCRIPTORS_OPEN</P></TD>
<TD class=enum_member_description>
<P>the parent's open file descriptors will be inherited by the child; otherwise all descriptors except stdin, stdout and stderr will be closed before calling <CODE class=function>exec()</CODE> in the child.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-DO-NOT-REAP-CHILD:CAPS></A>G_SPAWN_DO_NOT_REAP_CHILD</P></TD>
<TD class=enum_member_description>
<P>the child will not be automatically reaped; you must use <A class=link title=g_child_watch_add&nbsp;() href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-child-watch-add"><CODE class=function>g_child_watch_add()</CODE></A> yourself (or call <CODE class=function>waitpid()</CODE> or handle <CODE class=literal>SIGCHLD</CODE> yourself), or the child will become a zombie.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-SEARCH-PATH:CAPS></A>G_SPAWN_SEARCH_PATH</P></TD>
<TD class=enum_member_description>
<P><CODE class=literal>argv[0]</CODE> need not be an absolute path, it will be looked for in the user's <CODE class=literal>PATH</CODE>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-STDOUT-TO-DEV-NULL:CAPS></A>G_SPAWN_STDOUT_TO_DEV_NULL</P></TD>
<TD class=enum_member_description>
<P>the child's standard output will be discarded, instead of going to the same location as the parent's standard output.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-STDERR-TO-DEV-NULL:CAPS></A>G_SPAWN_STDERR_TO_DEV_NULL</P></TD>
<TD class=enum_member_description>
<P>the child's standard error will be discarded.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-CHILD-INHERITS-STDIN:CAPS></A>G_SPAWN_CHILD_INHERITS_STDIN</P></TD>
<TD class=enum_member_description>
<P>the child will inherit the parent's standard input (by default, the child's standard input is attached to <CODE class=literal>/dev/null</CODE>).</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-FILE-AND-ARGV-ZERO:CAPS></A>G_SPAWN_FILE_AND_ARGV_ZERO</P></TD>
<TD class=enum_member_description>
<P>the first element of <CODE class=literal>argv</CODE> is the file to execute, while the remaining elements are the actual argument vector to pass to the file. Normally <A class=link title=g_spawn_async_with_pipes&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-async-with-pipes"><CODE class=function>g_spawn_async_with_pipes()</CODE></A> uses <CODE class=literal>argv[0]</CODE> as the file to execute, and passes all of <CODE class=literal>argv</CODE> to the child.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-SEARCH-PATH-FROM-ENVP:CAPS></A>G_SPAWN_SEARCH_PATH_FROM_ENVP</P></TD>
<TD class=enum_member_description>
<P>if <CODE class=literal>argv[0]</CODE> is not an abolute path, it will be looked for in the <CODE class=literal>PATH</CODE> from the passed child environment. Since: 2.34</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SPAWN-CLOEXEC-PIPES:CAPS></A>G_SPAWN_CLOEXEC_PIPES</P></TD>
<TD class=enum_member_description>
<P>create all pipes with the <CODE class=literal>O_CLOEXEC</CODE> flag set. Since: 2.40</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-SPAWN-EXIT-ERROR:CAPS></A>
<H3>G_SPAWN_EXIT_ERROR</H3><PRE class=programlisting>#define G_SPAWN_EXIT_ERROR g_spawn_exit_error_quark ()
</PRE>
<P>Error domain used by <A class=link title=g_spawn_check_exit_status&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html#g-spawn-check-exit-status"><CODE class=function>g_spawn_check_exit_status()</CODE></A>. The code will be the program exit code.</P></DIV></DIV>