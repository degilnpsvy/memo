<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 36px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style2>Introduction to x86 assembly</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 36px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style2>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this article I'm goin' to provide you with basics how, x86 architecture assembly works, as well a a bit of Intels processor history. So you will better understand how everything works.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>History</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=left>
<TABLE border=0 cellSpacing=0 cellPadding=0 width=100 align=left>
<TBODY>
<TR>
<TD height=183><IMG src="http://asm.inightmare.org/386ses.jpg" width=255 height=165></TD></TR>
<TR>
<TD><STRONG><EM>Intel386&#8482; Processor Family</EM></STRONG></TD></TR></TBODY></TABLE>&nbsp; Some time passed after making the ENIAC (the first computer) in 1946. In 1971 Intels first microprocessor 4004 (<A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/4004.jpg" target=_blank>pic</A>,<A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/4004.jpg" target=_blank>pic2</A>) was introduced by Intel (designed by Federico Faggin) wich used transistors as the main part, not electric lamps like ENIAC. It wasn't much better than todays calculators. Then in 1972 Intel made 8008 (<A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/C8008.jpg" target=_blank>pic</A>)wich was used in one of first home microcomputers, the Mark-8. It was the first 8bit microprocessor and it ran at 800kHz (compared to todays 3GHz...). In 1974 the 8080 was created, the first popular microprocessor wich was used in Altairs PCs. In 1978 faster and more advanced chip was introduced by Intel, the 8086 chip It's the starter of x86 processor family.. The same year faster modification was released - the 8088 (<A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/8088.jpg" target=_blank>pic</A>). It had most of todays main x86 instructions. 8086 was a 16bit processor! It ran at ~5Mhz. In 1982 the 80286 was introduced by Intel. New opcodes were added, but teh comptability with 8086 software was left. It's one of the reasons, why 286 became so popular. It was capable of addressing 16MB RAM (older chips supported up to 640KB of memory) and frequencies were 6 - 16Mhz. AMD stepped in with 20Mhz version of 80286. Then in 1985 Intel386&#8482;, the first 32bit MultiTasking Intel processor was out. It introduced ProtectedMode in order to leave the comptability for Softwere written for 286 and earlier. It introduced many new opcodes, registers and features. It ran at 20-33Mhz frequencies and had several modifications like 386SL and 386DX. In 1989 Intel486&#8482; came out, filled with new features, like FPU, pipelining and more. Graphical Operating Systems started their history then. Linux had graphical support, and you could run early windows on 486. The frequencies for 486 were from 33Mhz to 100Mhz. You could run graphical OSes on 386, but it was still too slow. The 1993 was the year of even more advanced microprocessors, the Pentium&#174; family was started, improving x86 technology. Then Pentium Pro was introduced, with MMX (MiltiMedia eXtension) technology support, allowing real time movies to be displayed faster than ever. MMX allowed faster maths processing on 64bit data. The Pentium II fully supported MMX. Later processors only become faster and new technologies and extensions were introduced, like SSE, SSE2, SSE3, SIMD extensions and so on.
<P><A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://www.amd.com/athlon/athlon64" target=_blank><IMG border=0 alt="AMD AThlon 64" align=left src="http://asm.inightmare.org/athlon64.gif" width=64 height=71></A>AMD was the only company that was real<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=HW>competitioner</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to Intel. After Intel released it's 486, 100MHz, AMD released Am486&#174; wich ran at 120Mhz. Now AMD has fully working 64bit CPU and Windows XP 64Bit Edition is based on AMD Athlon 64 architecture. So it's a myth that AMD is making low class CPU's, just look at benchmarks in Hardware sites.</P>
<P>&nbsp;</P></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>Assembly</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">OK. Now lets see how Assembly language and x86 architecture looks like. Lets start with the main registers</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">AX - Accumulator Register<BR>BX - Base Register<BR>CX - Counter Register<BR>DX - Data Register<BR>SI - Source Index<BR>DI - Destination Index<BR>BP - Base Pointer<BR>SP - Stack Pointer</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These are 16bit registers. To get 32bit registers just add letter 'E ' to register name - EAX, EDI... Using AL, BL, CL and DL, you can access low byto of register and using AH, BH, CH, DH - high byte. There are Segment Registers wich are used to access data in another memory segments, they are:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">CS - Code Segment<BR>DS - Data Segment<BR>ES - Extra Segment<BR>SS - Stack Segment</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">They are used to access memory segments, each segment is 64KB. 386 and later processors have control registers CR0, CR1, CR2, CR3. They are used to set special processors propierties.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>Instructions</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Well you have registers... What do you do with them? Good question. To operate values in registers there are special instructions. Today's processors have a lot of them, I'll explain only the main ones here.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>MOV dest, src - moves value form<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>des</EM>t.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Examples:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4><EM>mov ax, 15</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- put 15 to ax<BR><EM>mov ax, bx</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- moves value of bx to ax.<BR><EM>mov dx,[bx]</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- moves value from memory location addressed by bx.<BR><EM>mov dx,[es:bx]</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- moves memory value, located in es segment at bx offset.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>ADD dest, src - Add src to dest</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Examples:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4><EM>add ax, 5</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- incrase ax by 5<BR><EM>add bx, ax</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- add ax to bx</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>SUB dest, src - Substract src from dest</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Examples:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4><EM>sub cx, 7</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- substract 7 from cx<BR><EM>sub bx, dx</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- substract value of dx from bx</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>MUL val - Multiply AX register by val</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Examples:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: italic 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style6>mul bx - multiplies AX by BX</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: italic 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style6><BR>This is how instructions look like. Bigger table of instructions can be downloaded<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/IntelCodeTable.pdf">here</A>. But there are lots more of instructions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>Using DOS and BIOS functions</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>DOS and BIOS provides simple functions that ease programmers life. Using BIOS and DOS functions programmer can easily write text on the screen, set video modes, get keyboard data, read disks and floppies and a lot more, and doesn't requere hardware coding experiance. For example seting video mode in BIOS:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4><EM>mov ah, 0</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- Video BIOS 'Set Display Mode' function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><EM>mov al, 13h</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- Video Mode (you can set al &amp; ah bu hust setting ax 'mov ax,13h')<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><EM>int 10h</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>- Video BIOS interrupt</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>And setting Video Mode without BIOS needs setting video cards registers (writting about 9 values). That would take ~20 lines in assembly. DOS uses interrupt 21h. printing text on the screen using DOS (for NASM compiler):</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: italic 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style6>jmp start ; jumps to start</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: italic 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style6>db text "Hello, world!",$ ; text needs to finish with $</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: italic 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style6>start:<BR>mov dx, text ; movs text pointer to dx<BR>mov ah, 9 ; DOS print function<BR>int 21h ; we call it ;)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>Conclusion</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: bold 18px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style5>&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: 14px Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=style4>Assembly is a lot to learn, especially if you want to be good assembler programmer. Read books, tutorials, articles on assembly, read forums wich usually contains a lot of usefull information, try to code, do some research and you will definatly make it. ;)<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>Good luck!</STRONG>