<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Deprecated-Thread-APIs.top_of_page></A>Deprecated thread API</SPAN></H2>
<P>Deprecated thread API &#8212; old thread APIs (for reference only)</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init">g_thread_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_thread_supported&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-supported">g_thread_supported</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_thread_get_initialized&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-get-initialized">g_thread_get_initialized</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=returnvalue>GThread</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_thread_create&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-create">g_thread_create</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=returnvalue>GThread</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_thread_create_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-create-full">g_thread_create_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_thread_set_priority&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-set-priority">g_thread_set_priority</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_thread_foreach&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-foreach">g_thread_foreach</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=returnvalue>GMutex</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_mutex_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-new">g_mutex_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-free">g_mutex_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=returnvalue>GCond</SPAN></A>* </TD>
<TD class=function_name><A class=link title=g_cond_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-cond-new">g_cond_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_cond_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-cond-free">g_cond_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=returnvalue>GPrivate</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_private_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-private-new">g_private_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-init">g_static_mutex_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-lock">g_static_mutex_lock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-trylock">g_static_mutex_trylock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-unlock">g_static_mutex_unlock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=returnvalue>GMutex</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_static_mutex_get_mutex&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-get-mutex">g_static_mutex_get_mutex</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-free">g_static_mutex_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-init">g_static_rec_mutex_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock">g_static_rec_mutex_lock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-trylock">g_static_rec_mutex_trylock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-unlock">g_static_rec_mutex_unlock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_lock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock-full">g_static_rec_mutex_lock_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_unlock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-unlock-full">g_static_rec_mutex_unlock_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rec_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-free">g_static_rec_mutex_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-init">g_static_rw_lock_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_reader_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-lock">g_static_rw_lock_reader_lock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_reader_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-trylock">g_static_rw_lock_reader_trylock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_reader_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-unlock">g_static_rw_lock_reader_unlock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_writer_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-lock">g_static_rw_lock_writer_lock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_writer_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-trylock">g_static_rw_lock_writer_trylock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_writer_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-unlock">g_static_rw_lock_writer_unlock</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_rw_lock_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-free">g_static_rw_lock_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_private_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-init">g_static_private_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_static_private_get&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-get">g_static_private_get</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_private_set&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-set">g_static_private_set</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_static_private_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-free">g_static_private_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_THREADS_IMPL_POSIX href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-THREADS-IMPL-POSIX:CAPS">G_THREADS_IMPL_POSIX</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_THREADS_IMPL_WIN32 href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-THREADS-IMPL-WIN32:CAPS">G_THREADS_IMPL_WIN32</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GThreadPriority" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GThreadPriority">GThreadPriority</A></TD></TR>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex">GStaticMutex</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_MUTEX_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-MUTEX-INIT:CAPS">G_STATIC_MUTEX_INIT</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex">GStaticRecMutex</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_REC_MUTEX_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-REC-MUTEX-INIT:CAPS">G_STATIC_REC_MUTEX_INIT</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock">GStaticRWLock</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_RW_LOCK_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-RW-LOCK-INIT:CAPS">G_STATIC_RW_LOCK_INIT</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate">GStaticPrivate</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_PRIVATE_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-PRIVATE-INIT:CAPS">G_STATIC_PRIVATE_INIT</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.description></A>
<H2>Description</H2>
<P>These APIs are deprecated. You should not use them in new code. This section remains only to assist with understanding code that was written to use these APIs at some point in the past.</P></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-thread-init></A>
<H3>g_thread_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_thread_init (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> vtable</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_init</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>This function is no longer necessary. The GLib threading system is automatically initialized at the start of your program.</P></DIV>
<P>If you use GLib from more than one thread, you must initialize the thread system by calling <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A>.</P>
<P>Since version 2.24, calling <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> multiple times is allowed, but nothing happens except for the first call.</P>
<P>Since version 2.32, GLib does not support custom thread implementations anymore and the <EM class=parameter><CODE>vtable</CODE></EM> parameter is ignored and you should pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>&lt;note&gt;&lt;para&gt;<A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> must not be called directly or indirectly in a callback from GLib. Also no mutexes may be currently locked while calling <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A>.&lt;/para&gt;&lt;/note&gt;</P>
<P>&lt;note&gt;&lt;para&gt;To use <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> in your program, you have to link with the libraries that the command &lt;command&gt;pkg-config --libs gthread-2.0&lt;/command&gt; outputs. This is not the case for all the other thread-related functions of GLib. Those can be used without having to link with the thread libraries.&lt;/para&gt;&lt;/note&gt;</P>
<DIV class=refsect3><A name=id-1.7.2.7.2.10></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>vtable</P></TD>
<TD class=parameter_description>
<P>a function table of type <SPAN class=type>GThreadFunctions</SPAN>, that provides the entry points to the thread system to be used. Since 2.32, this parameter is ignored and should always be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-supported></A>
<H3>g_thread_supported&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_thread_supported ();</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_supported</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>This macro returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the thread system is initialized, and <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if it is not.</P>
<P>For language bindings, <A class=link title=g_thread_get_initialized&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-get-initialized"><CODE class=function>g_thread_get_initialized()</CODE></A> provides the same functionality as a function.</P>
<DIV class=refsect3><A name=id-1.7.2.7.3.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, if the thread system is initialized</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-get-initialized></A>
<H3>g_thread_get_initialized&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_thread_get_initialized (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_get_initialized</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Indicates if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has been called.</P>
<DIV class=refsect3><A name=id-1.7.2.7.4.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if threads have been initialized.</P>
<P></P></DIV>
<P class=since>Since 2.20</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-create></A>
<H3>g_thread_create&nbsp;()</H3><PRE class=programlisting><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=returnvalue>GThread</SPAN></A>&nbsp;*
g_thread_create (<EM class=parameter><CODE><A class=link title=GThreadFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThreadFunc"><SPAN class=type>GThreadFunc</SPAN></A> func</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> data</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> joinable</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_create</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_thread_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-thread-new"><CODE class=function>g_thread_new()</CODE></A> instead</P></DIV>
<P>This function creates a new thread.</P>
<P>The new thread executes the function <EM class=parameter><CODE>func</CODE></EM> with the argument <EM class=parameter><CODE>data</CODE></EM> . If the thread was created successfully, it is returned.</P>
<P><EM class=parameter><CODE>error</CODE></EM> can be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to ignore errors, or non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to report errors. The error is set, if and only if the function returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>This function returns a reference to the created thread only if <EM class=parameter><CODE>joinable</CODE></EM> is <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. In that case, you must free this reference by calling <A class=link title=g_thread_unref&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-thread-unref"><CODE class=function>g_thread_unref()</CODE></A> or <A class=link title=g_thread_join&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-thread-join"><CODE class=function>g_thread_join()</CODE></A>. If <EM class=parameter><CODE>joinable</CODE></EM> is <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> then you should probably not touch the return value.</P>
<DIV class=refsect3><A name=id-1.7.2.7.5.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>func</P></TD>
<TD class=parameter_description>
<P>a function to execute in the new thread</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data</P></TD>
<TD class=parameter_description>
<P>an argument to supply to the new thread</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>joinable</P></TD>
<TD class=parameter_description>
<P>should this thread be joinable?</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.5.10></A>
<H4>Returns</H4>
<P>the new <A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A> on success</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-create-full></A>
<H3>g_thread_create_full&nbsp;()</H3><PRE class=programlisting><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=returnvalue>GThread</SPAN></A>&nbsp;*
g_thread_create_full (<EM class=parameter><CODE><A class=link title=GThreadFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThreadFunc"><SPAN class=type>GThreadFunc</SPAN></A> func</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> data</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gulong href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gulong"><SPAN class=type>gulong</SPAN></A> stack_size</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> joinable</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> bound</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title="enum GThreadPriority" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GThreadPriority"><SPAN class=type>GThreadPriority</SPAN></A> priority</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_create_full</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>The <EM class=parameter><CODE>bound</CODE></EM> and <EM class=parameter><CODE>priority</CODE></EM> arguments are now ignored. Use <A class=link title=g_thread_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-thread-new"><CODE class=function>g_thread_new()</CODE></A>.</P></DIV>
<P>This function creates a new thread.</P>
<DIV class=refsect3><A name=id-1.7.2.7.6.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>func</P></TD>
<TD class=parameter_description>
<P>a function to execute in the new thread.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data</P></TD>
<TD class=parameter_description>
<P>an argument to supply to the new thread.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>stack_size</P></TD>
<TD class=parameter_description>
<P>a stack size for the new thread.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>joinable</P></TD>
<TD class=parameter_description>
<P>should this thread be joinable?</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>bound</P></TD>
<TD class=parameter_description>
<P>ignored</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>priority</P></TD>
<TD class=parameter_description>
<P>ignored</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.6.7></A>
<H4>Returns</H4>
<P>the new <A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A> on success.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-set-priority></A>
<H3>g_thread_set_priority&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_thread_set_priority (<EM class=parameter><CODE><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A> *thread</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title="enum GThreadPriority" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GThreadPriority"><SPAN class=type>GThreadPriority</SPAN></A> priority</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_set_priority</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Thread priorities no longer have any effect.</P></DIV>
<P>This function does nothing.</P>
<DIV class=refsect3><A name=id-1.7.2.7.7.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>thread</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>priority</P></TD>
<TD class=parameter_description>
<P>ignored</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-thread-foreach></A>
<H3>g_thread_foreach&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_thread_foreach (<EM class=parameter><CODE><A class=link title=GFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Doubly-Linked-Lists.html#GFunc"><SPAN class=type>GFunc</SPAN></A> thread_func</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_thread_foreach</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>There aren't many things you can do with a <A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A>, except comparing it with one that was returned from <A class=link title=g_thread_create&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-create"><CODE class=function>g_thread_create()</CODE></A>. There are better ways to find out if your thread is still alive.</P></DIV>
<P>Call <EM class=parameter><CODE>thread_func</CODE></EM> on all <A href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThreads</SPAN></A> that have been created with <A class=link title=g_thread_create&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-create"><CODE class=function>g_thread_create()</CODE></A>.</P>
<P>Note that threads may decide to exit while <EM class=parameter><CODE>thread_func</CODE></EM> is running, so without intimate knowledge about the lifetime of foreign threads, <EM class=parameter><CODE>thread_func</CODE></EM> shouldn't access the GThread* pointer passed in as first argument. However, <EM class=parameter><CODE>thread_func</CODE></EM> will not be called for threads which are known to have exited already.</P>
<P>Due to thread lifetime checks, this function has an execution complexity which is quadratic in the number of existing threads.</P>
<DIV class=refsect3><A name=id-1.7.2.7.8.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>thread_func</P></TD>
<TD class=parameter_description>
<P>function to call for all <A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A> structures</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>second argument to <EM class=parameter><CODE>thread_func</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.10</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mutex-new></A>
<H3>g_mutex_new&nbsp;()</H3><PRE class=programlisting><A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=returnvalue>GMutex</SPAN></A>&nbsp;*
g_mutex_new ();</PRE>
<DIV class=warning>
<P><CODE class=literal>g_mutex_new</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>GMutex can now be statically allocated, or embedded in structures and initialised with <A class=link title=g_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-init"><CODE class=function>g_mutex_init()</CODE></A>.</P></DIV>
<P>Allocates and initializes a new <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.9.6></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A>. Use <A class=link title=g_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-free"><CODE class=function>g_mutex_free()</CODE></A> to free</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-mutex-free></A>
<H3>g_mutex_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_mutex_free (<EM class=parameter><CODE><A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_mutex_free</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>GMutex can now be statically allocated, or embedded in structures and initialised with <A class=link title=g_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-init"><CODE class=function>g_mutex_init()</CODE></A>.</P></DIV>
<P>Destroys a <EM class=parameter><CODE>mutex</CODE></EM> that has been created with <A class=link title=g_mutex_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-new"><CODE class=function>g_mutex_new()</CODE></A>.</P>
<P>Calling <A class=link title=g_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-free"><CODE class=function>g_mutex_free()</CODE></A> on a locked mutex may result in undefined behaviour.</P>
<DIV class=refsect3><A name=id-1.7.2.7.10.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-cond-new></A>
<H3>g_cond_new&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=returnvalue>GCond</SPAN></A>*
g_cond_new ();</PRE>
<DIV class=warning>
<P><CODE class=literal>g_cond_new</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>GCond can now be statically allocated, or embedded in structures and initialised with <A class=link title=g_cond_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-cond-init"><CODE class=function>g_cond_init()</CODE></A>.</P></DIV>
<P>Allocates and initializes a new <A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.11.6></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A>. Free with <A class=link title=g_cond_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-cond-free"><CODE class=function>g_cond_free()</CODE></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-cond-free></A>
<H3>g_cond_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_cond_free (<EM class=parameter><CODE><A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A> *cond</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_cond_free</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>GCond can now be statically allocated, or embedded in structures and initialised with <A class=link title=g_cond_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-cond-init"><CODE class=function>g_cond_init()</CODE></A>.</P></DIV>
<P>Destroys a <A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A> that has been created with <A class=link title=g_cond_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-cond-new"><CODE class=function>g_cond_new()</CODE></A>.</P>
<P>Calling <A class=link title=g_cond_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-cond-free"><CODE class=function>g_cond_free()</CODE></A> for a <A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A> on which threads are blocking leads to undefined behaviour.</P>
<DIV class=refsect3><A name=id-1.7.2.7.12.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>cond</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GCond" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GCond"><SPAN class=type>GCond</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-private-new></A>
<H3>g_private_new&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=returnvalue>GPrivate</SPAN></A>&nbsp;*
g_private_new (<EM class=parameter><CODE><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> notify</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_private_new</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>dynamic allocation of <A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=type>GPrivate</SPAN></A> is a bad idea. Use static storage and <A class=link title=G_PRIVATE_INIT() href="https://developer.gnome.org/glib/stable/glib-Threads.html#G-PRIVATE-INIT:CAPS"><CODE class=function>G_PRIVATE_INIT()</CODE></A> instead.</P></DIV>
<P>Creates a new <A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=type>GPrivate</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.13.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>notify</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.13.7></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=type>GPrivate</SPAN></A> (which can never be destroyed)</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-init></A>
<H3>g_static_mutex_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_mutex_init (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_init</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-init"><CODE class=function>g_mutex_init()</CODE></A></P></DIV>
<P>Initializes <EM class=parameter><CODE>mutex</CODE></EM> . Alternatively you can initialize it with <A class=link title=G_STATIC_MUTEX_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-MUTEX-INIT:CAPS"><SPAN class=type>G_STATIC_MUTEX_INIT</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.14.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> to be initialized.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-lock></A>
<H3>g_static_mutex_lock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_mutex_lock (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_lock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-lock"><CODE class=function>g_mutex_lock()</CODE></A></P></DIV>
<P>Works like <A class=link title=g_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-lock"><CODE class=function>g_mutex_lock()</CODE></A>, but for a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.15.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-trylock></A>
<H3>g_static_mutex_trylock&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_static_mutex_trylock (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_trylock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-trylock"><CODE class=function>g_mutex_trylock()</CODE></A></P></DIV>
<P>Works like <A class=link title=g_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-trylock"><CODE class=function>g_mutex_trylock()</CODE></A>, but for a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.16.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.16.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, if the <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> could be locked.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-unlock></A>
<H3>g_static_mutex_unlock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_mutex_unlock (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_unlock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-unlock"><CODE class=function>g_mutex_unlock()</CODE></A></P></DIV>
<P>Works like <A class=link title=g_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-unlock"><CODE class=function>g_mutex_unlock()</CODE></A>, but for a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.17.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-get-mutex></A>
<H3>g_static_mutex_get_mutex&nbsp;()</H3><PRE class=programlisting><A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=returnvalue>GMutex</SPAN></A>&nbsp;*
g_static_mutex_get_mutex (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_get_mutex</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Just use a <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A></P></DIV>
<P>For some operations (like <A class=link title=g_cond_wait&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-cond-wait"><CODE class=function>g_cond_wait()</CODE></A>) you must have a <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> instead of a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>. This function will return the corresponding <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> for <EM class=parameter><CODE>mutex</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.7.2.7.18.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.18.7></A>
<H4>Returns</H4>
<P>the <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> corresponding to <EM class=parameter><CODE>mutex</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-mutex-free></A>
<H3>g_static_mutex_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_mutex_free (<EM class=parameter><CODE><A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_mutex_free</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_mutex_clear&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-mutex-clear"><CODE class=function>g_mutex_clear()</CODE></A></P></DIV>
<P>Releases all resources allocated to <EM class=parameter><CODE>mutex</CODE></EM> .</P>
<P>You don't have to call this functions for a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> with an unbounded lifetime, i.e. objects declared 'static', but if you have a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> as a member of a structure and the structure is freed, you should also free the <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P>
<P>Calling <A class=link title=g_static_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-free"><CODE class=function>g_static_mutex_free()</CODE></A> on a locked mutex may result in undefined behaviour.</P>
<DIV class=refsect3><A name=id-1.7.2.7.19.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> to be freed.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-init></A>
<H3>g_static_rec_mutex_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rec_mutex_init (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_init</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-init"><CODE class=function>g_rec_mutex_init()</CODE></A></P></DIV>
<P>A <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> must be initialized with this function before it can be used. Alternatively you can initialize it with <A class=link title=G_STATIC_REC_MUTEX_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-REC-MUTEX-INIT:CAPS"><SPAN class=type>G_STATIC_REC_MUTEX_INIT</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.20.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to be initialized.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-lock></A>
<H3>g_static_rec_mutex_lock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rec_mutex_lock (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_lock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-lock"><CODE class=function>g_rec_mutex_lock()</CODE></A></P></DIV>
<P>Locks <EM class=parameter><CODE>mutex</CODE></EM> . If <EM class=parameter><CODE>mutex</CODE></EM> is already locked by another thread, the current thread will block until <EM class=parameter><CODE>mutex</CODE></EM> is unlocked by the other thread. If <EM class=parameter><CODE>mutex</CODE></EM> is already locked by the calling thread, this functions increases the depth of <EM class=parameter><CODE>mutex</CODE></EM> and returns immediately.</P>
<DIV class=refsect3><A name=id-1.7.2.7.21.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to lock.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-trylock></A>
<H3>g_static_rec_mutex_trylock&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_static_rec_mutex_trylock (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_trylock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-trylock"><CODE class=function>g_rec_mutex_trylock()</CODE></A></P></DIV>
<P>Tries to lock <EM class=parameter><CODE>mutex</CODE></EM> . If <EM class=parameter><CODE>mutex</CODE></EM> is already locked by another thread, it immediately returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. Otherwise it locks <EM class=parameter><CODE>mutex</CODE></EM> and returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. If <EM class=parameter><CODE>mutex</CODE></EM> is already locked by the calling thread, this functions increases the depth of <EM class=parameter><CODE>mutex</CODE></EM> and immediately returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.22.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to lock.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.22.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, if <EM class=parameter><CODE>mutex</CODE></EM> could be locked.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-unlock></A>
<H3>g_static_rec_mutex_unlock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rec_mutex_unlock (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_unlock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-unlock"><CODE class=function>g_rec_mutex_unlock()</CODE></A></P></DIV>
<P>Unlocks <EM class=parameter><CODE>mutex</CODE></EM> . Another thread will be allowed to lock <EM class=parameter><CODE>mutex</CODE></EM> only when it has been unlocked as many times as it had been locked before. If <EM class=parameter><CODE>mutex</CODE></EM> is completely unlocked and another thread is blocked in a <A class=link title=g_static_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock"><CODE class=function>g_static_rec_mutex_lock()</CODE></A> call for <EM class=parameter><CODE>mutex</CODE></EM> , it will be woken and can lock <EM class=parameter><CODE>mutex</CODE></EM> itself.</P>
<DIV class=refsect3><A name=id-1.7.2.7.23.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to unlock.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-lock-full></A>
<H3>g_static_rec_mutex_lock_full&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rec_mutex_lock_full (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>,
                              <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> depth</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_lock_full</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-lock"><CODE class=function>g_rec_mutex_lock()</CODE></A></P></DIV>
<P>Works like calling <A class=link title=g_static_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock"><CODE class=function>g_static_rec_mutex_lock()</CODE></A> for <EM class=parameter><CODE>mutex</CODE></EM> <EM class=parameter><CODE>depth</CODE></EM> times.</P>
<DIV class=refsect3><A name=id-1.7.2.7.24.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to lock.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>depth</P></TD>
<TD class=parameter_description>
<P>number of times this mutex has to be unlocked to be completely unlocked.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-unlock-full></A>
<H3>g_static_rec_mutex_unlock_full&nbsp;()</H3><PRE class=programlisting><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_static_rec_mutex_unlock_full (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_unlock_full</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-unlock"><CODE class=function>g_rec_mutex_unlock()</CODE></A></P></DIV>
<P>Completely unlocks <EM class=parameter><CODE>mutex</CODE></EM> . If another thread is blocked in a <A class=link title=g_static_rec_mutex_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock"><CODE class=function>g_static_rec_mutex_lock()</CODE></A> call for <EM class=parameter><CODE>mutex</CODE></EM> , it will be woken and can lock <EM class=parameter><CODE>mutex</CODE></EM> itself. This function returns the number of times that <EM class=parameter><CODE>mutex</CODE></EM> has been locked by the current thread. To restore the state before the call to <A class=link title=g_static_rec_mutex_unlock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-unlock-full"><CODE class=function>g_static_rec_mutex_unlock_full()</CODE></A> you can call <A class=link title=g_static_rec_mutex_lock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock-full"><CODE class=function>g_static_rec_mutex_lock_full()</CODE></A> with the depth returned by this function.</P>
<DIV class=refsect3><A name=id-1.7.2.7.25.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to completely unlock.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.25.7></A>
<H4>Returns</H4>
<P>number of times <EM class=parameter><CODE>mutex</CODE></EM> has been locked by the current thread.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rec-mutex-free></A>
<H3>g_static_rec_mutex_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rec_mutex_free (<EM class=parameter><CODE><A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> *mutex</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rec_mutex_free</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rec_mutex_clear&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rec-mutex-clear"><CODE class=function>g_rec_mutex_clear()</CODE></A></P></DIV>
<P>Releases all resources allocated to a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A>.</P>
<P>You don't have to call this functions for a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> with an unbounded lifetime, i.e. objects declared 'static', but if you have a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> as a member of a structure and the structure is freed, you should also free the <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.26.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>mutex</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> to be freed.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-init></A>
<H3>g_static_rw_lock_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_init (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_init</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rw_lock_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-init"><CODE class=function>g_rw_lock_init()</CODE></A> instead</P></DIV>
<P>A <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> must be initialized with this function before it can be used. Alternatively you can initialize it with <A class=link title=G_STATIC_RW_LOCK_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-RW-LOCK-INIT:CAPS"><SPAN class=type>G_STATIC_RW_LOCK_INIT</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.27.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to be initialized.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-reader-lock></A>
<H3>g_static_rw_lock_reader_lock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_reader_lock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_reader_lock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use <A class=link title=g_rw_lock_reader_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-reader-lock"><CODE class=function>g_rw_lock_reader_lock()</CODE></A> instead</P></DIV>
<P>Locks <EM class=parameter><CODE>lock</CODE></EM> for reading. There may be unlimited concurrent locks for reading of a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> at the same time. If <EM class=parameter><CODE>lock</CODE></EM> is already locked for writing by another thread or if another thread is already waiting to lock <EM class=parameter><CODE>lock</CODE></EM> for writing, this function will block until <EM class=parameter><CODE>lock</CODE></EM> is unlocked by the other writing thread and no other writing threads want to lock <EM class=parameter><CODE>lock</CODE></EM> . This lock has to be unlocked by <A class=link title=g_static_rw_lock_reader_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-unlock"><CODE class=function>g_static_rw_lock_reader_unlock()</CODE></A>.</P>
<P><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> is not recursive. It might seem to be possible to recursively lock for reading, but that can result in a deadlock, due to writer preference.</P>
<DIV class=refsect3><A name=id-1.7.2.7.28.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to lock for reading.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-reader-trylock></A>
<H3>g_static_rw_lock_reader_trylock&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_static_rw_lock_reader_trylock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_reader_trylock</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Tries to lock <EM class=parameter><CODE>lock</CODE></EM> for reading. If <EM class=parameter><CODE>lock</CODE></EM> is already locked for writing by another thread or if another thread is already waiting to lock <EM class=parameter><CODE>lock</CODE></EM> for writing, immediately returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. Otherwise locks <EM class=parameter><CODE>lock</CODE></EM> for reading and returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. This lock has to be unlocked by <A class=link title=g_static_rw_lock_reader_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-unlock"><CODE class=function>g_static_rw_lock_reader_unlock()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.29.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to lock for reading</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.29.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, if <EM class=parameter><CODE>lock</CODE></EM> could be locked for reading</P>
<P>Deprectated: 2.32: Use <A class=link title=g_rw_lock_reader_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-reader-trylock"><CODE class=function>g_rw_lock_reader_trylock()</CODE></A> instead</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-reader-unlock></A>
<H3>g_static_rw_lock_reader_unlock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_reader_unlock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_reader_unlock</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Unlocks <EM class=parameter><CODE>lock</CODE></EM> . If a thread waits to lock <EM class=parameter><CODE>lock</CODE></EM> for writing and all locks for reading have been unlocked, the waiting thread is woken up and can lock <EM class=parameter><CODE>lock</CODE></EM> for writing.</P>
<P>Deprectated: 2.32: Use <A class=link title=g_rw_lock_reader_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-reader-unlock"><CODE class=function>g_rw_lock_reader_unlock()</CODE></A> instead</P>
<DIV class=refsect3><A name=id-1.7.2.7.30.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to unlock after reading</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-writer-lock></A>
<H3>g_static_rw_lock_writer_lock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_writer_lock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_writer_lock</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Locks <EM class=parameter><CODE>lock</CODE></EM> for writing. If <EM class=parameter><CODE>lock</CODE></EM> is already locked for writing or reading by other threads, this function will block until <EM class=parameter><CODE>lock</CODE></EM> is completely unlocked and then lock <EM class=parameter><CODE>lock</CODE></EM> for writing. While this functions waits to lock <EM class=parameter><CODE>lock</CODE></EM> , no other thread can lock <EM class=parameter><CODE>lock</CODE></EM> for reading. When <EM class=parameter><CODE>lock</CODE></EM> is locked for writing, no other thread can lock <EM class=parameter><CODE>lock</CODE></EM> (neither for reading nor writing). This lock has to be unlocked by <A class=link title=g_static_rw_lock_writer_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-unlock"><CODE class=function>g_static_rw_lock_writer_unlock()</CODE></A>.</P>
<P>Deprectated: 2.32: Use <A class=link title=g_rw_lock_writer_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-writer-lock"><CODE class=function>g_rw_lock_writer_lock()</CODE></A> instead</P>
<DIV class=refsect3><A name=id-1.7.2.7.31.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to lock for writing</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-writer-trylock></A>
<H3>g_static_rw_lock_writer_trylock&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_static_rw_lock_writer_trylock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_writer_trylock</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Tries to lock <EM class=parameter><CODE>lock</CODE></EM> for writing. If <EM class=parameter><CODE>lock</CODE></EM> is already locked (for either reading or writing) by another thread, it immediately returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. Otherwise it locks <EM class=parameter><CODE>lock</CODE></EM> for writing and returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. This lock has to be unlocked by <A class=link title=g_static_rw_lock_writer_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-unlock"><CODE class=function>g_static_rw_lock_writer_unlock()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.32.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to lock for writing</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.32.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>, if <EM class=parameter><CODE>lock</CODE></EM> could be locked for writing</P>
<P>Deprectated: 2.32: Use <A class=link title=g_rw_lock_writer_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-writer-trylock"><CODE class=function>g_rw_lock_writer_trylock()</CODE></A> instead</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-writer-unlock></A>
<H3>g_static_rw_lock_writer_unlock&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_writer_unlock (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_writer_unlock</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Unlocks <EM class=parameter><CODE>lock</CODE></EM> . If a thread is waiting to lock <EM class=parameter><CODE>lock</CODE></EM> for writing and all locks for reading have been unlocked, the waiting thread is woken up and can lock <EM class=parameter><CODE>lock</CODE></EM> for writing. If no thread is waiting to lock <EM class=parameter><CODE>lock</CODE></EM> for writing, and some thread or threads are waiting to lock <EM class=parameter><CODE>lock</CODE></EM> for reading, the waiting threads are woken up and can lock <EM class=parameter><CODE>lock</CODE></EM> for reading.</P>
<P>Deprectated: 2.32: Use <A class=link title=g_rw_lock_writer_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-rw-lock-writer-unlock"><CODE class=function>g_rw_lock_writer_unlock()</CODE></A> instead</P>
<DIV class=refsect3><A name=id-1.7.2.7.33.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to unlock after writing.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-rw-lock-free></A>
<H3>g_static_rw_lock_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_rw_lock_free (<EM class=parameter><CODE><A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> *lock</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_rw_lock_free</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use a <A class=link title="struct GRWLock" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GRWLock"><SPAN class=type>GRWLock</SPAN></A> instead</P></DIV>
<P>Releases all resources allocated to <EM class=parameter><CODE>lock</CODE></EM> .</P>
<P>You don't have to call this functions for a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> with an unbounded lifetime, i.e. objects declared 'static', but if you have a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> as a member of a structure, and the structure is freed, you should also free the <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.34.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>lock</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> to be freed.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-private-init></A>
<H3>g_static_private_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_private_init (<EM class=parameter><CODE><A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> *private_key</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_private_init</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Initializes <EM class=parameter><CODE>private_key</CODE></EM> . Alternatively you can initialize it with <A class=link title=G_STATIC_PRIVATE_INIT href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#G-STATIC-PRIVATE-INIT:CAPS"><SPAN class=type>G_STATIC_PRIVATE_INIT</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.35.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>private_key</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> to be initialized</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-private-get></A>
<H3>g_static_private_get&nbsp;()</H3><PRE class=programlisting><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_static_private_get (<EM class=parameter><CODE><A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> *private_key</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_private_get</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Works like <A class=link title=g_private_get&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Threads.html#g-private-get"><CODE class=function>g_private_get()</CODE></A> only for a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A>.</P>
<P>This function works even if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has not yet been called.</P>
<DIV class=refsect3><A name=id-1.7.2.7.36.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>private_key</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.7.2.7.36.8></A>
<H4>Returns</H4>
<P>the corresponding pointer</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-private-set></A>
<H3>g_static_private_set&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_private_set (<EM class=parameter><CODE><A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> *private_key</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> data</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> notify</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_private_set</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Sets the pointer keyed to <EM class=parameter><CODE>private_key</CODE></EM> for the current thread and the function <EM class=parameter><CODE>notify</CODE></EM> to be called with that pointer (<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> or non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>), whenever the pointer is set again or whenever the current thread ends.</P>
<P>This function works even if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has not yet been called. If <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> is called later, the <EM class=parameter><CODE>data</CODE></EM> keyed to <EM class=parameter><CODE>private_key</CODE></EM> will be inherited only by the main thread, i.e. the one that called <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A>.</P>
<P><EM class=parameter><CODE>notify</CODE></EM> is used quite differently from <EM class=parameter><CODE>destructor</CODE></EM> in <A class=link title=g_private_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-private-new"><CODE class=function>g_private_new()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.37.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>private_key</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data</P></TD>
<TD class=parameter_description>
<P>the new pointer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>notify</P></TD>
<TD class=parameter_description>
<P>a function to be called with the pointer whenever the current thread ends or sets this pointer again</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-static-private-free></A>
<H3>g_static_private_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_static_private_free (<EM class=parameter><CODE><A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> *private_key</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_static_private_free</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Releases all resources allocated to <EM class=parameter><CODE>private_key</CODE></EM> .</P>
<P>You don't have to call this functions for a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> with an unbounded lifetime, i.e. objects declared 'static', but if you have a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> as a member of a structure and the structure is freed, you should also free the <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A>.</P>
<DIV class=refsect3><A name=id-1.7.2.7.38.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>private_key</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> to be freed</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=G-THREADS-IMPL-POSIX:CAPS></A>
<H3>G_THREADS_IMPL_POSIX</H3><PRE class=programlisting>#define G_THREADS_IMPL_POSIX
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_THREADS_IMPL_POSIX</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>POSIX threads are in use on all non-Windows systems. Use G_OS_WIN32 to detect Windows.</P></DIV>
<P>This macro is defined if POSIX style threads are used.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-THREADS-IMPL-WIN32:CAPS></A>
<H3>G_THREADS_IMPL_WIN32</H3><PRE class=programlisting>#define G_THREADS_IMPL_NONE
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_THREADS_IMPL_WIN32</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use G_OS_WIN32 to detect Windows.</P></DIV>
<P>This macro is defined if Windows style threads are used.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GThreadPriority></A>
<H3>enum GThreadPriority</H3>
<DIV class=warning>
<P><CODE class=literal>GThreadPriority</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Thread priorities no longer have any effect.</P></DIV>
<P>Thread priorities.</P>
<DIV class=refsect3><A name=id-1.7.2.8.4.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-THREAD-PRIORITY-LOW:CAPS></A>G_THREAD_PRIORITY_LOW</P></TD>
<TD class=enum_member_description>
<P>a priority lower than normal</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-THREAD-PRIORITY-NORMAL:CAPS></A>G_THREAD_PRIORITY_NORMAL</P></TD>
<TD class=enum_member_description>
<P>the default priority</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-THREAD-PRIORITY-HIGH:CAPS></A>G_THREAD_PRIORITY_HIGH</P></TD>
<TD class=enum_member_description>
<P>a priority higher than normal</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-THREAD-PRIORITY-URGENT:CAPS></A>G_THREAD_PRIORITY_URGENT</P></TD>
<TD class=enum_member_description>
<P>the highest priority</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GStaticMutex></A>
<H3>GStaticMutex</H3><PRE class=programlisting>typedef struct _GStaticMutex GStaticMutex;</PRE>
<P>A <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> works like a <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A>.</P>
<P>Prior to GLib 2.32, GStaticMutex had the significant advantage that it doesn't need to be created at run-time, but can be defined at compile-time. Since 2.32, <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> can be statically allocated as well, and GStaticMutex has been deprecated.</P>
<P>Here is a version of our <CODE class=function>give_me_next_number()</CODE> example using a GStaticMutex:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>give_me_next_number</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwb">static int</SPAN> current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class="gtkdoc kwb">int</SPAN> ret_val<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class="gtkdoc kwb">static</SPAN> GStaticMutex mutex <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_MUTEX_INIT<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-lock">g_static_mutex_lock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>mutex<SPAN class="gtkdoc opt">);</SPAN>
  ret_val <SPAN class="gtkdoc opt">=</SPAN> current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>calc_next_number</SPAN> <SPAN class="gtkdoc opt">(</SPAN>current_number<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-unlock">g_static_mutex_unlock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>mutex<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>return</SPAN> ret_val<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Sometimes you would like to dynamically create a mutex. If you don't want to require prior calling to <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A>, because your code should also be usable in non-threaded programs, you are not able to use <A class=link title=g_mutex_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-mutex-new"><CODE class=function>g_mutex_new()</CODE></A> and thus <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A>, as that requires a prior call to <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A>. In theses cases you can also use a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>. It must be initialized with <A class=link title=g_static_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-init"><CODE class=function>g_static_mutex_init()</CODE></A> before using it and freed with with <A class=link title=g_static_mutex_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-free"><CODE class=function>g_static_mutex_free()</CODE></A> when not needed anymore to free up any allocated resources.</P>
<P>Even though <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> is not opaque, it should only be used with the following functions, as it is defined differently on different platforms.</P>
<P>All of the g_static_mutex_* functions apart from <A class=link title=g_static_mutex_get_mutex&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-get-mutex"><CODE class=function>g_static_mutex_get_mutex()</CODE></A> can also be used even if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has not yet been called. Then they do nothing, apart from <A class=link title=g_static_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-trylock"><CODE class=function>g_static_mutex_trylock()</CODE></A> which does nothing but returning <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>.</P>
<P>All of the g_static_mutex_* functions are actually macros. Apart from taking their addresses, you can however use them as if they were functions.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-MUTEX-INIT:CAPS></A>
<H3>G_STATIC_MUTEX_INIT</H3><PRE class=programlisting>#define G_STATIC_MUTEX_INIT
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_STATIC_MUTEX_INIT</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>A <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A> must be initialized with this macro, before it can be used. This macro can used be to initialize a variable, but it cannot be assigned to a variable. In that case you have to use <A class=link title=g_static_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-mutex-init"><CODE class=function>g_static_mutex_init()</CODE></A>.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting>GStaticMutex my_mutex <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_MUTEX_INIT<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GStaticRecMutex></A>
<H3>struct GStaticRecMutex</H3><PRE class=programlisting>struct GStaticRecMutex {
};
</PRE>
<DIV class=warning>
<P><CODE class=literal>GStaticRecMutex</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>A <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> works like a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>, but it can be locked multiple times by one thread. If you enter it n times, you have to unlock it n times again to let other threads lock it. An exception is the function <A class=link title=g_static_rec_mutex_unlock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-unlock-full"><CODE class=function>g_static_rec_mutex_unlock_full()</CODE></A>: that allows you to unlock a <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> completely returning the depth, (i.e. the number of times this mutex was locked). The depth can later be used to restore the state of the <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> by calling <A class=link title=g_static_rec_mutex_lock_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-lock-full"><CODE class=function>g_static_rec_mutex_lock_full()</CODE></A>. In GLib 2.32, <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> has been deprecated in favor of <A class=link title="struct GRecMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GRecMutex"><SPAN class=type>GRecMutex</SPAN></A>.</P>
<P>Even though <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> is not opaque, it should only be used with the following functions.</P>
<P>All of the g_static_rec_mutex_* functions can be used even if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has not been called. Then they do nothing, apart from <A class=link title=g_static_rec_mutex_trylock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-trylock"><CODE class=function>g_static_rec_mutex_trylock()</CODE></A>, which does nothing but returning <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-REC-MUTEX-INIT:CAPS></A>
<H3>G_STATIC_REC_MUTEX_INIT</H3><PRE class=programlisting>#define G_STATIC_REC_MUTEX_INIT { G_STATIC_MUTEX_INIT }
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_STATIC_REC_MUTEX_INIT</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>A <A class=link title="struct GStaticRecMutex" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRecMutex"><SPAN class=type>GStaticRecMutex</SPAN></A> must be initialized with this macro before it can be used. This macro can used be to initialize a variable, but it cannot be assigned to a variable. In that case you have to use <A class=link title=g_static_rec_mutex_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rec-mutex-init"><CODE class=function>g_static_rec_mutex_init()</CODE></A>.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting>GStaticRecMutex my_mutex <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_REC_MUTEX_INIT<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GStaticRWLock></A>
<H3>struct GStaticRWLock</H3><PRE class=programlisting>struct GStaticRWLock {
};
</PRE>
<DIV class=warning>
<P><CODE class=literal>GStaticRWLock</CODE> has been deprecated since version 2.32 and should not be used in newly-written code.</P>
<P>Use a <A class=link title="struct GRWLock" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GRWLock"><SPAN class=type>GRWLock</SPAN></A> instead</P></DIV>
<P>The <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> struct represents a read-write lock. A read-write lock can be used for protecting data that some portions of code only read from, while others also write. In such situations it is desirable that several readers can read at once, whereas of course only one writer may write at a time.</P>
<P>Take a look at the following example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</PRE></TD>
<TD class=listing_code><PRE class=programlisting>GStaticRWLock rwlock <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_RW_LOCK_INIT<SPAN class="gtkdoc opt">;</SPAN>
GPtrArray <SPAN class="gtkdoc opt">*</SPAN>array<SPAN class="gtkdoc opt">;</SPAN>

gpointer
<SPAN class=function>my_array_get</SPAN> <SPAN class="gtkdoc opt">(</SPAN>guint index<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  gpointer retval <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>array<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class=keyword>return</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-lock">g_static_rw_lock_reader_lock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>rwlock<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>index <SPAN class="gtkdoc opt">&lt;</SPAN> array<SPAN class="gtkdoc opt">-&gt;</SPAN>len<SPAN class="gtkdoc opt">)</SPAN>
    retval <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Pointer-Arrays.html#g-ptr-array-index">g_ptr_array_index</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>array<SPAN class="gtkdoc opt">,</SPAN> index<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-unlock">g_static_rw_lock_reader_unlock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>rwlock<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>return</SPAN> retval<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>my_array_set</SPAN> <SPAN class="gtkdoc opt">(</SPAN>guint index<SPAN class="gtkdoc opt">,</SPAN> gpointer data<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-lock">g_static_rw_lock_writer_lock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>rwlock<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>array<SPAN class="gtkdoc opt">)</SPAN>
    array <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Pointer-Arrays.html#g-ptr-array-new">g_ptr_array_new</A></SPAN> <SPAN class="gtkdoc opt">();</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>index <SPAN class="gtkdoc opt">&gt;=</SPAN> array<SPAN class="gtkdoc opt">-&gt;</SPAN>len<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Pointer-Arrays.html#g-ptr-array-set-size">g_ptr_array_set_size</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>array<SPAN class="gtkdoc opt">,</SPAN> index <SPAN class="gtkdoc opt">+</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Pointer-Arrays.html#g-ptr-array-index">g_ptr_array_index</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>array<SPAN class="gtkdoc opt">,</SPAN> index<SPAN class="gtkdoc opt">) =</SPAN> data<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-writer-unlock">g_static_rw_lock_writer_unlock</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>rwlock<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>This example shows an array which can be accessed by many readers (the <CODE class=function>my_array_get()</CODE> function) simultaneously, whereas the writers (the <CODE class=function>my_array_set()</CODE> function) will only be allowed once at a time and only if no readers currently access the array. This is because of the potentially dangerous resizing of the array. Using these functions is fully multi-thread safe now.</P>
<P>Most of the time, writers should have precedence over readers. That means, for this implementation, that as soon as a writer wants to lock the data, no other reader is allowed to lock the data, whereas, of course, the readers that already have locked the data are allowed to finish their operation. As soon as the last reader unlocks the data, the writer will lock it.</P>
<P>Even though <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> is not opaque, it should only be used with the following functions.</P>
<P>All of the g_static_rw_lock_* functions can be used even if <A class=link title=g_thread_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-thread-init"><CODE class=function>g_thread_init()</CODE></A> has not been called. Then they do nothing, apart from g_static_rw_lock_*_trylock, which does nothing but returning <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>.</P>
<P>A read-write lock has a higher overhead than a mutex. For example, both <A class=link title=g_static_rw_lock_reader_lock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-lock"><CODE class=function>g_static_rw_lock_reader_lock()</CODE></A> and <A class=link title=g_static_rw_lock_reader_unlock&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-reader-unlock"><CODE class=function>g_static_rw_lock_reader_unlock()</CODE></A> have to lock and unlock a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>, so it takes at least twice the time to lock and unlock a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> that it does to lock and unlock a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>. So only data structures that are accessed by multiple readers, and which keep the lock for a considerable time justify a <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A>. The above example most probably would fare better with a <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-RW-LOCK-INIT:CAPS></A>
<H3>G_STATIC_RW_LOCK_INIT</H3><PRE class=programlisting>#define G_STATIC_RW_LOCK_INIT { G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 }
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_STATIC_RW_LOCK_INIT</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>A <A class=link title="struct GStaticRWLock" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticRWLock"><SPAN class=type>GStaticRWLock</SPAN></A> must be initialized with this macro before it can be used. This macro can used be to initialize a variable, but it cannot be assigned to a variable. In that case you have to use <A class=link title=g_static_rw_lock_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-rw-lock-init"><CODE class=function>g_static_rw_lock_init()</CODE></A>.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting>GStaticRWLock my_lock <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_RW_LOCK_INIT<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GStaticPrivate></A>
<H3>struct GStaticPrivate</H3><PRE class=programlisting>struct GStaticPrivate {
};
</PRE>
<DIV class=warning>
<P><CODE class=literal>GStaticPrivate</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>A <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> works almost like a <A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=type>GPrivate</SPAN></A>, but it has one significant advantage. It doesn't need to be created at run-time like a <A class=link title="struct GPrivate" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GPrivate"><SPAN class=type>GPrivate</SPAN></A>, but can be defined at compile-time. This is similar to the difference between <A class=link title="union GMutex" href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A> and <A class=link title=GStaticMutex href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticMutex"><SPAN class=type>GStaticMutex</SPAN></A>.</P>
<P>Now look at our <CODE class=function>give_me_next_number()</CODE> example with <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A>:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>give_me_next_number</SPAN> <SPAN class="gtkdoc opt">()</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwb">static</SPAN> GStaticPrivate current_number_key <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_PRIVATE_INIT<SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class="gtkdoc kwb">int</SPAN> <SPAN class="gtkdoc opt">*</SPAN>current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-get">g_static_private_get</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>current_number_key<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>current_number<SPAN class="gtkdoc opt">)</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-new">g_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class="gtkdoc opt">*</SPAN>current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">;</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#g-static-private-set">g_static_private_set</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>current_number_key<SPAN class="gtkdoc opt">,</SPAN> current_number<SPAN class="gtkdoc opt">,</SPAN> g_free<SPAN class="gtkdoc opt">);</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc opt">*</SPAN>current_number <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>calc_next_number</SPAN> <SPAN class="gtkdoc opt">(*</SPAN>current_number<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>return</SPAN> <SPAN class="gtkdoc opt">*</SPAN>current_number<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-PRIVATE-INIT:CAPS></A>
<H3>G_STATIC_PRIVATE_INIT</H3><PRE class=programlisting>#define G_STATIC_PRIVATE_INIT 
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_STATIC_PRIVATE_INIT</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>Every <A class=link title="struct GStaticPrivate" href="https://developer.gnome.org/glib/stable/glib-Deprecated-Thread-APIs.html#GStaticPrivate"><SPAN class=type>GStaticPrivate</SPAN></A> must be initialized with this macro, before it can be used.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting>GStaticPrivate my_private <SPAN class="gtkdoc opt">=</SPAN> G_STATIC_PRIVATE_INIT<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV></DIV>
<DIV class=refsect1><A name=glib-Deprecated-Thread-APIs.see-also></A>
<H2>See Also</H2>
<P><A class=link title=GThread href="https://developer.gnome.org/glib/stable/glib-Threads.html#GThread"><SPAN class=type>GThread</SPAN></A></P></DIV>