<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><STRONG><SPAN style="FONT-SIZE: 18px" class=style5>Changing Interrupt Vector Table (Create your own interrupt!)<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><BR></STRONG><STRONG>&nbsp;</STRONG><STRONG>Author:<SPAN class=Apple-converted-space>&nbsp;</SPAN></STRONG>InternetNightmare</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another thing I want to write tutorial is about changing interrupts. There are two ways you can do that using DOS interrupts and modifying interrupt vector table directly. Both ways are pretty simple, you need to know these DOS interrupts:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=1 cellSpacing=0 borderColor=#000000 cellPadding=0>
<TBODY>
<TR borderColor=#000000>
<TD vAlign=top width=108>
<P><STRONG>Function</STRONG></P></TD>
<TD vAlign=top width=240>
<P><STRONG>What does it do?</STRONG></P></TD>
<TD vAlign=top width=276>
<P><STRONG>Parameters</STRONG></P></TD></TR>
<TR borderColor=#000000>
<TD vAlign=top width=108>
<P>AH = 25h</P></TD>
<TD vAlign=top width=240>
<P>Set interrupt vector</P></TD>
<TD vAlign=top width=276>
<P>AL &#8211; interrupt number to change</P>
<P>DS:DX &#8211; pointer to interrupt function</P></TD></TR>
<TR borderColor=#000000>
<TD vAlign=top width=108>
<P>AH = 35h</P></TD>
<TD vAlign=top width=240>
<P>Get interrupt vector. Gets address of currently set interrupt.</P></TD>
<TD vAlign=top width=276>
<P>AL &#8211; interrupt number</P>
<P>Returns:</P>
<P>ES:BX &#8211; pointer to interrupt</P></TD></TR>
<TR borderColor=#000000>
<TD vAlign=top width=108>
<P>AH = 4Ch</P></TD>
<TD vAlign=top width=240>
<P>Exits DOS program ;)</P></TD>
<TD vAlign=top width=276>
<P>AL &#8211; exit code (not sure what it does)</P></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s pretty simple, just take a look at the sample code<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/ints.asm">here</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The other way to make your own interrupt is to modify interrupt vector table directly. It&#8217;s mapped from 0000:0000 to 0000:0400h in memory. The structure is very simple:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" cellSpacing=0 cellPadding=0>
<TBODY>
<TR borderColor=#000000>
<TD vAlign=top width=213>
<P align=center>&nbsp;</P></TD>
<TD vAlign=top width=213>
<P align=center><STRONG>Offset</STRONG></P></TD>
<TD vAlign=top width=213>
<P align=center><STRONG>Segment</STRONG></P></TD></TR>
<TR>
<TD vAlign=top width=213>
<P align=center>Int 0</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213 border="1">
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0000)</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0002)</P></TD></TR>
<TR>
<TD vAlign=top width=213>
<P align=center>Int 1</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0004)</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0006)</P></TD></TR>
<TR>
<TD vAlign=top width=213>
<P align=center>Int 2</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0008)</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>(Offset 0010)</P></TD></TR>
<TR>
<TD vAlign=top width=213>
<P align=center>&nbsp;</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>&#8230;</P></TD>
<TD bgColor=#cccccc vAlign=top borderColor=#000000 width=213>
<P style="COLOR: rgb(0,0,0)" class=style2 align=center>&#8230;</P></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So getting interrupt offset is:<BR><EM>mov ax, [intnum*4]</EM></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>&nbsp;</EM>And segment:<BR><EM>mov ax [intnum*4+2]</EM></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Setting:<BR><EM>mov ax, [intnum*4] ; offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></EM><EM>mov ax [intnum*4+2] ; segment</EM></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Well and how to call the interrupt, I think we all know:<BR><EM>int intnum</EM></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Everything is pretty simple. NASM soruce code:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">DOS interrupt version &#8211;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/ints.asm">here</A><BR>Direct modifiying of intvec table -<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(0,0,0); TEXT-DECORATION: underline" href="http://asm.inightmare.org/ints_vec.asm">here</A>