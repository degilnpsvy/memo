<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-GVariantType.top_of_page></A>GVariantType</SPAN></H2>
<P>GVariantType &#8212; introduction to the GVariant type system</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-GVariantType.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_BOOLEAN href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BOOLEAN:CAPS">G_VARIANT_TYPE_BOOLEAN</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_BYTE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BYTE:CAPS">G_VARIANT_TYPE_BYTE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_INT16 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT16:CAPS">G_VARIANT_TYPE_INT16</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_UINT16 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT16:CAPS">G_VARIANT_TYPE_UINT16</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_INT32 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT32:CAPS">G_VARIANT_TYPE_INT32</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_UINT32 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT32:CAPS">G_VARIANT_TYPE_UINT32</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_INT64 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT64:CAPS">G_VARIANT_TYPE_INT64</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_UINT64 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT64:CAPS">G_VARIANT_TYPE_UINT64</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_HANDLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-HANDLE:CAPS">G_VARIANT_TYPE_HANDLE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_DOUBLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DOUBLE:CAPS">G_VARIANT_TYPE_DOUBLE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_STRING href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-STRING:CAPS">G_VARIANT_TYPE_STRING</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_OBJECT_PATH href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-OBJECT-PATH:CAPS">G_VARIANT_TYPE_OBJECT_PATH</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_SIGNATURE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-SIGNATURE:CAPS">G_VARIANT_TYPE_SIGNATURE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_VARIANT href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-VARIANT:CAPS">G_VARIANT_TYPE_VARIANT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_ANY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ANY:CAPS">G_VARIANT_TYPE_ANY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_BASIC href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BASIC:CAPS">G_VARIANT_TYPE_BASIC</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_MAYBE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-MAYBE:CAPS">G_VARIANT_TYPE_MAYBE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ARRAY:CAPS">G_VARIANT_TYPE_ARRAY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS">G_VARIANT_TYPE_TUPLE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_UNIT href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UNIT:CAPS">G_VARIANT_TYPE_UNIT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_DICT_ENTRY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DICT-ENTRY:CAPS">G_VARIANT_TYPE_DICT_ENTRY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_DICTIONARY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DICTIONARY:CAPS">G_VARIANT_TYPE_DICTIONARY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_STRING_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-STRING-ARRAY:CAPS">G_VARIANT_TYPE_STRING_ARRAY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_OBJECT_PATH_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-OBJECT-PATH-ARRAY:CAPS">G_VARIANT_TYPE_OBJECT_PATH_ARRAY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_BYTESTRING href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BYTESTRING:CAPS">G_VARIANT_TYPE_BYTESTRING</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_BYTESTRING_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BYTESTRING-ARRAY:CAPS">G_VARIANT_TYPE_BYTESTRING_ARRAY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE_VARDICT href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-VARDICT:CAPS">G_VARIANT_TYPE_VARDICT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VARIANT_TYPE() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE:CAPS">G_VARIANT_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free">g_variant_type_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_copy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-copy">g_variant_type_copy</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new">g_variant_type_new</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_string_is_valid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-is-valid">g_variant_type_string_is_valid</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_string_scan&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-scan">g_variant_type_string_scan</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_get_string_length&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-get-string-length">g_variant_type_get_string_length</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_peek_string&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-peek-string">g_variant_type_peek_string</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_dup_string&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-dup-string">g_variant_type_dup_string</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_definite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-definite">g_variant_type_is_definite</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_container&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-container">g_variant_type_is_container</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_basic&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-basic">g_variant_type_is_basic</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_maybe&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-maybe">g_variant_type_is_maybe</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_array&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-array">g_variant_type_is_array</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_tuple&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-tuple">g_variant_type_is_tuple</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_dict_entry&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-dict-entry">g_variant_type_is_dict_entry</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_variant&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-variant">g_variant_type_is_variant</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_hash&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-hash">g_variant_type_hash</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_equal&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-equal">g_variant_type_equal</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_is_subtype_of&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-subtype-of">g_variant_type_is_subtype_of</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_new_maybe&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new-maybe">g_variant_type_new_maybe</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_new_array&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new-array">g_variant_type_new_array</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_new_tuple&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new-tuple">g_variant_type_new_tuple</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_new_dict_entry&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new-dict-entry">g_variant_type_new_dict_entry</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_element&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-element">g_variant_type_element</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_variant_type_n_items&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-n-items">g_variant_type_n_items</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_first&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-first">g_variant_type_first</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_next&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-next">g_variant_type_next</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_key&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-key">g_variant_type_key</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_variant_type_value&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-value">g_variant_type_value</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-GVariantType.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>&nbsp;</TD>
<TD class=function_name><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType">GVariantType</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-GVariantType.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-GVariantType.description></A>
<H2>Description</H2>
<P>This section introduces the GVariant type system. It is based, in large part, on the D-Bus type system, with two major changes and some minor lifting of restrictions. The <A class=ulink href="http://dbus.freedesktop.org/doc/dbus-specification.html" target=_top>D-Bus specification</A>, therefore, provides a significant amount of information that is useful when working with GVariant.</P>
<P>The first major change with respect to the D-Bus type system is the introduction of maybe (or "nullable") types. Any type in GVariant can be converted to a maybe type, in which case, "nothing" (or "null") becomes a valid value. Maybe types have been added by introducing the character "m" to type strings.</P>
<P>The second major change is that the GVariant type system supports the concept of "indefinite types" -- types that are less specific than the normal types found in D-Bus. For example, it is possible to speak of "an array of any type" in GVariant, where the D-Bus type system would require you to speak of "an array of integers" or "an array of strings". Indefinite types have been added by introducing the characters "*", "?" and "r" to type strings.</P>
<P>Finally, all arbitrary restrictions relating to the complexity of types are lifted along with the restriction that dictionary entries may only appear nested inside of arrays.</P>
<P>Just as in D-Bus, GVariant types are described with strings ("type strings"). Subject to the differences mentioned above, these strings are of the same form as those found in DBus. Note, however: D-Bus always works in terms of messages and therefore individual type strings appear nowhere in its interface. Instead, "signatures" are a concatenation of the strings of the type of each argument in a message. GVariant deals with single values directly so GVariant type strings always describe the type of exactly one value. This means that a D-Bus signature string is generally not a valid GVariant type string -- except in the case that it is the signature of a message containing exactly one argument.</P>
<P>An indefinite type is similar in spirit to what may be called an abstract type in other type systems. No value can exist that has an indefinite type as its type, but values can exist that have types that are subtypes of indefinite types. That is to say, <A class=link title=g_variant_get_type&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariant.html#g-variant-get-type"><CODE class=function>g_variant_get_type()</CODE></A> will never return an indefinite type, but calling <A class=link title=g_variant_is_of_type&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariant.html#g-variant-is-of-type"><CODE class=function>g_variant_is_of_type()</CODE></A> with an indefinite type may return <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. For example, you cannot have a value that represents "an array of no particular type", but you can have an "array of integers" which certainly matches the type of "an array of no particular type", since "array of integers" is a subtype of "array of no particular type".</P>
<P>This is similar to how instances of abstract classes may not directly exist in other type systems, but instances of their non-abstract subtypes may. For example, in GTK, no object that has the type of <SPAN class=type>GtkBin</SPAN> can exist (since <SPAN class=type>GtkBin</SPAN> is an abstract class), but a <SPAN class=type>GtkWindow</SPAN> can certainly be instantiated, and you would say that the <SPAN class=type>GtkWindow</SPAN> is a <SPAN class=type>GtkBin</SPAN> (since <SPAN class=type>GtkWindow</SPAN> is a subclass of <SPAN class=type>GtkBin</SPAN>).</P>
<DIV class=refsect3><A name=id-1.6.18.6.9></A>
<H4>GVariant Type Strings</H4>
<P>A GVariant type string can be any of the following:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>any basic type string (listed below)</P></LI>
<LI class=listitem>
<P>"v", "r" or "*"</P></LI>
<LI class=listitem>
<P>one of the characters 'a' or 'm', followed by another type string</P></LI>
<LI class=listitem>
<P>the character '(', followed by a concatenation of zero or more other type strings, followed by the character ')'</P></LI>
<LI class=listitem>
<P>the character '{', followed by a basic type string (see below), followed by another type string, followed by the character '}'</P></LI></UL></DIV>
<P>A basic type string describes a basic type (as per <A class=link title=g_variant_type_is_basic&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-basic"><CODE class=function>g_variant_type_is_basic()</CODE></A>) and is always a single character in length. The valid basic type strings are "b", "y", "n", "q", "i", "u", "x", "t", "h", "d", "s", "o", "g" and "?".</P>
<P>The above definition is recursive to arbitrary depth. "aaaaai" and "(ui(nq((y)))s)" are both valid type strings, as is "a(aa(ui)(qna{ya(yd)}))".</P>
<P>The meaning of each of the characters is as follows:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P><CODE class=literal>b</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_BOOLEAN href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BOOLEAN:CAPS"><CODE class=literal>G_VARIANT_TYPE_BOOLEAN</CODE></A>; a boolean value.</P></LI>
<LI class=listitem>
<P><CODE class=literal>y</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_BYTE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BYTE:CAPS"><CODE class=literal>G_VARIANT_TYPE_BYTE</CODE></A>; a byte.</P></LI>
<LI class=listitem>
<P><CODE class=literal>n</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_INT16 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT16:CAPS"><CODE class=literal>G_VARIANT_TYPE_INT16</CODE></A>; a signed 16 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>q</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_UINT16 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT16:CAPS"><CODE class=literal>G_VARIANT_TYPE_UINT16</CODE></A>; an unsigned 16 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>i</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_INT32 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT32:CAPS"><CODE class=literal>G_VARIANT_TYPE_INT32</CODE></A>; a signed 32 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>u</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_UINT32 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT32:CAPS"><CODE class=literal>G_VARIANT_TYPE_UINT32</CODE></A>; an unsigned 32 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>x</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_INT64 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-INT64:CAPS"><CODE class=literal>G_VARIANT_TYPE_INT64</CODE></A>; a signed 64 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>t</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_UINT64 href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UINT64:CAPS"><CODE class=literal>G_VARIANT_TYPE_UINT64</CODE></A>; an unsigned 64 bit integer.</P></LI>
<LI class=listitem>
<P><CODE class=literal>h</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_HANDLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-HANDLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_HANDLE</CODE></A>; a signed 32 bit value that, by convention, is used as an index into an array of file descriptors that are sent alongside a D-Bus message.</P></LI>
<LI class=listitem>
<P><CODE class=literal>d</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_DOUBLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DOUBLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_DOUBLE</CODE></A>; a double precision floating point value.</P></LI>
<LI class=listitem>
<P><CODE class=literal>s</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_STRING href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-STRING:CAPS"><CODE class=literal>G_VARIANT_TYPE_STRING</CODE></A>; a string.</P></LI>
<LI class=listitem>
<P><CODE class=literal>o</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_OBJECT_PATH href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-OBJECT-PATH:CAPS"><CODE class=literal>G_VARIANT_TYPE_OBJECT_PATH</CODE></A>; a string in the form of a D-Bus object path.</P></LI>
<LI class=listitem>
<P><CODE class=literal>g</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_STRING href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-STRING:CAPS"><CODE class=literal>G_VARIANT_TYPE_STRING</CODE></A>; a string in the form of a D-Bus type signature.</P></LI>
<LI class=listitem>
<P><CODE class=literal>?</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_BASIC href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BASIC:CAPS"><CODE class=literal>G_VARIANT_TYPE_BASIC</CODE></A>; an indefinite type that is a supertype of any of the basic types.</P></LI>
<LI class=listitem>
<P><CODE class=literal>v</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_VARIANT href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-VARIANT:CAPS"><CODE class=literal>G_VARIANT_TYPE_VARIANT</CODE></A>; a container type that contain any other type of value.</P></LI>
<LI class=listitem>
<P><CODE class=literal>a</CODE>: used as a prefix on another type string to mean an array of that type; the type string "ai", for example, is the type of an array of signed 32-bit integers.</P></LI>
<LI class=listitem>
<P><CODE class=literal>m</CODE>: used as a prefix on another type string to mean a "maybe", or "nullable", version of that type; the type string "ms", for example, is the type of a value that maybe contains a string, or maybe contains nothing.</P></LI>
<LI class=listitem>
<P><CODE class=literal>()</CODE>: used to enclose zero or more other concatenated type strings to create a tuple type; the type string "(is)", for example, is the type of a pair of an integer and a string.</P></LI>
<LI class=listitem>
<P><CODE class=literal>r</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_TUPLE</CODE></A>; an indefinite type that is a supertype of any tuple type, regardless of the number of items.</P></LI>
<LI class=listitem>
<P><CODE class=literal>{}</CODE>: used to enclose a basic type string concatenated with another type string to create a dictionary entry type, which usually appears inside of an array to form a dictionary; the type string "a{sd}", for example, is the type of a dictionary that maps strings to double precision floating point values.</P>
<P>The first type (the basic type) is the key type and the second type is the value type. The reason that the first type is restricted to being a basic type is so that it can easily be hashed.</P></LI>
<LI class=listitem>
<P><CODE class=literal>*</CODE>: the type string of <A class=link title=G_VARIANT_TYPE_ANY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ANY:CAPS"><CODE class=literal>G_VARIANT_TYPE_ANY</CODE></A>; the indefinite type that is a supertype of all types. Note that, as with all type strings, this character represents exactly one type. It cannot be used inside of tuples to mean "any number of items".</P></LI></UL></DIV>
<P>Any type string of a container that contains an indefinite type is, itself, an indefinite type. For example, the type string "a*" (corresponding to <A class=link title=G_VARIANT_TYPE_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ARRAY:CAPS"><CODE class=literal>G_VARIANT_TYPE_ARRAY</CODE></A>) is an indefinite type that is a supertype of every array type. "(*s)" is a supertype of all tuples that contain exactly two items where the second item is a string.</P>
<P>"a{?*}" is an indefinite type that is a supertype of all arrays containing dictionary entries where the key is any basic type and the value is any type at all. This is, by definition, a dictionary, so this type string corresponds to <A class=link title=G_VARIANT_TYPE_DICTIONARY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DICTIONARY:CAPS"><CODE class=literal>G_VARIANT_TYPE_DICTIONARY</CODE></A>. Note that, due to the restriction that the key of a dictionary entry must be a basic type, "{**}" is not a valid type string.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-GVariantType.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=G-VARIANT-TYPE-BOOLEAN:CAPS></A>
<H3>G_VARIANT_TYPE_BOOLEAN</H3><PRE class=programlisting>#define G_VARIANT_TYPE_BOOLEAN              ((const GVariantType *) "b")
</PRE>
<P>The type of a value that can be either <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> or <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-BYTE:CAPS></A>
<H3>G_VARIANT_TYPE_BYTE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_BYTE                 ((const GVariantType *) "y")
</PRE>
<P>The type of an integer value that can range from 0 to 255.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-INT16:CAPS></A>
<H3>G_VARIANT_TYPE_INT16</H3><PRE class=programlisting>#define G_VARIANT_TYPE_INT16                ((const GVariantType *) "n")
</PRE>
<P>The type of an integer value that can range from -32768 to 32767.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-UINT16:CAPS></A>
<H3>G_VARIANT_TYPE_UINT16</H3><PRE class=programlisting>#define G_VARIANT_TYPE_UINT16               ((const GVariantType *) "q")
</PRE>
<P>The type of an integer value that can range from 0 to 65535. There were about this many people living in Toronto in the 1870s.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-INT32:CAPS></A>
<H3>G_VARIANT_TYPE_INT32</H3><PRE class=programlisting>#define G_VARIANT_TYPE_INT32                ((const GVariantType *) "i")
</PRE>
<P>The type of an integer value that can range from -2147483648 to 2147483647.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-UINT32:CAPS></A>
<H3>G_VARIANT_TYPE_UINT32</H3><PRE class=programlisting>#define G_VARIANT_TYPE_UINT32               ((const GVariantType *) "u")
</PRE>
<P>The type of an integer value that can range from 0 to 4294967295. That's one number for everyone who was around in the late 1970s.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-INT64:CAPS></A>
<H3>G_VARIANT_TYPE_INT64</H3><PRE class=programlisting>#define G_VARIANT_TYPE_INT64                ((const GVariantType *) "x")
</PRE>
<P>The type of an integer value that can range from -9223372036854775808 to 9223372036854775807.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-UINT64:CAPS></A>
<H3>G_VARIANT_TYPE_UINT64</H3><PRE class=programlisting>#define G_VARIANT_TYPE_UINT64               ((const GVariantType *) "t")
</PRE>
<P>The type of an integer value that can range from 0 to</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>
<P>That's a really big number, but a Rubik's cube can have a bit more than twice as many possible positions.</P></LI></OL></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-HANDLE:CAPS></A>
<H3>G_VARIANT_TYPE_HANDLE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_HANDLE               ((const GVariantType *) "h")
</PRE>
<P>The type of a 32bit signed integer value, that by convention, is used as an index into an array of file descriptors that are sent alongside a D-Bus message.</P>
<P>If you are not interacting with D-Bus, then there is no reason to make use of this type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-DOUBLE:CAPS></A>
<H3>G_VARIANT_TYPE_DOUBLE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_DOUBLE               ((const GVariantType *) "d")
</PRE>
<P>The type of a double precision IEEE754 floating point number. These guys go up to about 1.80e308 (plus and minus) but miss out on some numbers in between. In any case, that's far greater than the estimated number of fundamental particles in the observable universe.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-STRING:CAPS></A>
<H3>G_VARIANT_TYPE_STRING</H3><PRE class=programlisting>#define G_VARIANT_TYPE_STRING               ((const GVariantType *) "s")
</PRE>
<P>The type of a string. "" is a string. <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is not a string.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-OBJECT-PATH:CAPS></A>
<H3>G_VARIANT_TYPE_OBJECT_PATH</H3><PRE class=programlisting>#define G_VARIANT_TYPE_OBJECT_PATH          ((const GVariantType *) "o")
</PRE>
<P>The type of a D-Bus object reference. These are strings of a specific format used to identify objects at a given destination on the bus.</P>
<P>If you are not interacting with D-Bus, then there is no reason to make use of this type. If you are, then the D-Bus specification contains a precise description of valid object paths.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-SIGNATURE:CAPS></A>
<H3>G_VARIANT_TYPE_SIGNATURE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_SIGNATURE            ((const GVariantType *) "g")
</PRE>
<P>The type of a D-Bus type signature. These are strings of a specific format used as type signatures for D-Bus methods and messages.</P>
<P>If you are not interacting with D-Bus, then there is no reason to make use of this type. If you are, then the D-Bus specification contains a precise description of valid signature strings.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-VARIANT:CAPS></A>
<H3>G_VARIANT_TYPE_VARIANT</H3><PRE class=programlisting>#define G_VARIANT_TYPE_VARIANT              ((const GVariantType *) "v")
</PRE>
<P>The type of a box that contains any other value (including another variant).</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-ANY:CAPS></A>
<H3>G_VARIANT_TYPE_ANY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_ANY                  ((const GVariantType *) "*")
</PRE>
<P>An indefinite type that is a supertype of every type (including itself).</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-BASIC:CAPS></A>
<H3>G_VARIANT_TYPE_BASIC</H3><PRE class=programlisting>#define G_VARIANT_TYPE_BASIC                ((const GVariantType *) "?")
</PRE>
<P>An indefinite type that is a supertype of every basic (ie: non-container) type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-MAYBE:CAPS></A>
<H3>G_VARIANT_TYPE_MAYBE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_MAYBE                ((const GVariantType *) "m*")
</PRE>
<P>An indefinite type that is a supertype of every maybe type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-ARRAY:CAPS></A>
<H3>G_VARIANT_TYPE_ARRAY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_ARRAY                ((const GVariantType *) "a*")
</PRE>
<P>An indefinite type that is a supertype of every array type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-TUPLE:CAPS></A>
<H3>G_VARIANT_TYPE_TUPLE</H3><PRE class=programlisting>#define G_VARIANT_TYPE_TUPLE                ((const GVariantType *) "r")
</PRE>
<P>An indefinite type that is a supertype of every tuple type, regardless of the number of items in the tuple.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-UNIT:CAPS></A>
<H3>G_VARIANT_TYPE_UNIT</H3><PRE class=programlisting>#define G_VARIANT_TYPE_UNIT                 ((const GVariantType *) "()")
</PRE>
<P>The empty tuple type. Has only one instance. Known also as "triv" or "void".</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-DICT-ENTRY:CAPS></A>
<H3>G_VARIANT_TYPE_DICT_ENTRY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_DICT_ENTRY           ((const GVariantType *) "{?*}")
</PRE>
<P>An indefinite type that is a supertype of every dictionary entry type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-DICTIONARY:CAPS></A>
<H3>G_VARIANT_TYPE_DICTIONARY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_DICTIONARY           ((const GVariantType *) "a{?*}")
</PRE>
<P>An indefinite type that is a supertype of every dictionary type -- that is, any array type that has an element type equal to any dictionary entry type.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-STRING-ARRAY:CAPS></A>
<H3>G_VARIANT_TYPE_STRING_ARRAY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_STRING_ARRAY         ((const GVariantType *) "as")
</PRE>
<P>The type of an array of strings.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-OBJECT-PATH-ARRAY:CAPS></A>
<H3>G_VARIANT_TYPE_OBJECT_PATH_ARRAY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_OBJECT_PATH_ARRAY    ((const GVariantType *) "ao")
</PRE>
<P>The type of an array of object paths.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-BYTESTRING:CAPS></A>
<H3>G_VARIANT_TYPE_BYTESTRING</H3><PRE class=programlisting>#define G_VARIANT_TYPE_BYTESTRING           ((const GVariantType *) "ay")
</PRE>
<P>The type of an array of bytes. This type is commonly used to pass around strings that may not be valid utf8. In that case, the convention is that the nul terminator character should be included as the last character in the array.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-BYTESTRING-ARRAY:CAPS></A>
<H3>G_VARIANT_TYPE_BYTESTRING_ARRAY</H3><PRE class=programlisting>#define G_VARIANT_TYPE_BYTESTRING_ARRAY     ((const GVariantType *) "aay")
</PRE>
<P>The type of an array of byte strings (an array of arrays of bytes).</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE-VARDICT:CAPS></A>
<H3>G_VARIANT_TYPE_VARDICT</H3><PRE class=programlisting>#define G_VARIANT_TYPE_VARDICT              ((const GVariantType *) "a{sv}")
</PRE>
<P>The type of a dictionary mapping strings to variants (the ubiquitous "a{sv}" type).</P>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-VARIANT-TYPE:CAPS></A>
<H3>G_VARIANT_TYPE()</H3><PRE class=programlisting># define G_VARIANT_TYPE(type_string)            (g_variant_type_checked_ ((type_string)))
</PRE>
<P>Converts a string to a const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. Depending on the current debugging level, this function may perform a runtime check to ensure that <EM class=parameter><CODE>string</CODE></EM> is a valid GVariant type string.</P>
<P>It is always a programmer error to use this macro with an invalid type string. If in doubt, use <A class=link title=g_variant_type_string_is_valid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-is-valid"><CODE class=function>g_variant_type_string_is_valid()</CODE></A> to check if the string is valid.</P>
<P>Since 2.24</P>
<DIV class=refsect3><A name=id-1.6.18.7.29.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type_string</P></TD>
<TD class=parameter_description>
<P>a well-formed <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> type string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-free></A>
<H3>g_variant_type_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_variant_type_free (<EM class=parameter><CODE><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Frees a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> that was allocated with <A class=link title=g_variant_type_copy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-copy"><CODE class=function>g_variant_type_copy()</CODE></A>, <A class=link title=g_variant_type_new&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-new"><CODE class=function>g_variant_type_new()</CODE></A> or one of the container type constructor functions.</P>
<P>In the case that <EM class=parameter><CODE>type</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, this function does nothing.</P>
<P>Since 2.24</P>
<DIV class=refsect3><A name=id-1.6.18.7.30.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-copy></A>
<H3>g_variant_type_copy&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_copy (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Makes a copy of a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value. <EM class=parameter><CODE>type</CODE></EM> may not be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.31.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.31.6></A>
<H4>Returns</H4>
<P>a new <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-new></A>
<H3>g_variant_type_new&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_new (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_string</CODE></EM>);</PRE>
<P>Creates a new <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> corresponding to the type string given by <EM class=parameter><CODE>type_string</CODE></EM> . It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value.</P>
<P>It is a programmer error to call this function with an invalid type string. Use <A class=link title=g_variant_type_string_is_valid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-is-valid"><CODE class=function>g_variant_type_string_is_valid()</CODE></A> if you are unsure.</P>
<DIV class=refsect3><A name=id-1.6.18.7.32.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type_string</P></TD>
<TD class=parameter_description>
<P>a valid GVariant type string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.32.7></A>
<H4>Returns</H4>
<P>a new <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-string-is-valid></A>
<H3>g_variant_type_string_is_valid&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_string_is_valid (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_string</CODE></EM>);</PRE>
<P>Checks if <EM class=parameter><CODE>type_string</CODE></EM> is a valid GVariant type string. This call is equivalent to calling <A class=link title=g_variant_type_string_scan&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-scan"><CODE class=function>g_variant_type_string_scan()</CODE></A> and confirming that the following character is a nul terminator.</P>
<DIV class=refsect3><A name=id-1.6.18.7.33.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type_string</P></TD>
<TD class=parameter_description>
<P>a pointer to any string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.33.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type_string</CODE></EM> is exactly one valid type string</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-string-scan></A>
<H3>g_variant_type_string_scan&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_string_scan (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
                            <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *limit</CODE></EM>,
                            <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **endptr</CODE></EM>);</PRE>
<P>Scan for a single complete and valid GVariant type string in <EM class=parameter><CODE>string</CODE></EM> . The memory pointed to by <EM class=parameter><CODE>limit</CODE></EM> (or bytes beyond it) is never accessed.</P>
<P>If a valid type string is found, <EM class=parameter><CODE>endptr</CODE></EM> is updated to point to the first character past the end of the string that was found and <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> is returned.</P>
<P>If there is no valid type string starting at <EM class=parameter><CODE>string</CODE></EM> , or if the type string does not end before <EM class=parameter><CODE>limit</CODE></EM> then <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> is returned.</P>
<P>For the simple case of checking if a string is a valid type string, see <A class=link title=g_variant_type_string_is_valid&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-string-is-valid"><CODE class=function>g_variant_type_string_is_valid()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.34.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a pointer to any string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>limit</P></TD>
<TD class=parameter_description>
<P>the end of <EM class=parameter><CODE>string</CODE></EM> , or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>endptr</P></TD>
<TD class=parameter_description>
<P>location to store the end pointer, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.34.9></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if a valid type string was found</P>
<P></P></DIV>
<P class=since>Since 2.24</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-get-string-length></A>
<H3>g_variant_type_get_string_length&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_variant_type_get_string_length (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Returns the length of the type string corresponding to the given <EM class=parameter><CODE>type</CODE></EM> . This function must be used to determine the valid extent of the memory region returned by <A class=link title=g_variant_type_peek_string&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-peek-string"><CODE class=function>g_variant_type_peek_string()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.35.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.35.6></A>
<H4>Returns</H4>
<P>the length of the corresponding type string</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-peek-string></A>
<H3>g_variant_type_peek_string&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_variant_type_peek_string (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Returns the type string corresponding to the given <EM class=parameter><CODE>type</CODE></EM> . The result is not nul-terminated; in order to determine its length you must call <A class=link title=g_variant_type_get_string_length&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-get-string-length"><CODE class=function>g_variant_type_get_string_length()</CODE></A>.</P>
<P>To get a nul-terminated string, see <A class=link title=g_variant_type_dup_string&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-dup-string"><CODE class=function>g_variant_type_dup_string()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.36.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.36.7></A>
<H4>Returns</H4>
<P>the corresponding type string (not nul-terminated)</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-dup-string></A>
<H3>g_variant_type_dup_string&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_variant_type_dup_string (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Returns a newly-allocated copy of the type string corresponding to <EM class=parameter><CODE>type</CODE></EM> . The returned string is nul-terminated. It is appropriate to call <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> on the return value.</P>
<DIV class=refsect3><A name=id-1.6.18.7.37.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.37.6></A>
<H4>Returns</H4>
<P>the corresponding type string</P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-definite></A>
<H3>g_variant_type_is_definite&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_definite (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is definite (ie: not indefinite).</P>
<P>A type is definite if its type string does not contain any indefinite type characters ('*', '?', or 'r').</P>
<P>A <A class=link title=GVariant href="https://developer.gnome.org/glib/stable/glib-GVariant.html#GVariant"><SPAN class=type>GVariant</SPAN></A> instance may not have an indefinite type, so calling this function on the result of <A class=link title=g_variant_get_type&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariant.html#g-variant-get-type"><CODE class=function>g_variant_get_type()</CODE></A> will always result in <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> being returned. Calling this function on an indefinite type like <A class=link title=G_VARIANT_TYPE_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ARRAY:CAPS"><CODE class=literal>G_VARIANT_TYPE_ARRAY</CODE></A>, however, will result in <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> being returned.</P>
<DIV class=refsect3><A name=id-1.6.18.7.38.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.38.8></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is definite</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-container></A>
<H3>g_variant_type_is_container&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_container (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is a container type.</P>
<P>Container types are any array, maybe, tuple, or dictionary entry types plus the variant type.</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for any indefinite type for which every definite subtype is a container -- <A class=link title=G_VARIANT_TYPE_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ARRAY:CAPS"><CODE class=literal>G_VARIANT_TYPE_ARRAY</CODE></A>, for example.</P>
<DIV class=refsect3><A name=id-1.6.18.7.39.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.39.8></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a container type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-basic></A>
<H3>g_variant_type_is_basic&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_basic (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is a basic type.</P>
<P>Basic types are booleans, bytes, integers, doubles, strings, object paths and signatures.</P>
<P>Only a basic type may be used as the key of a dictionary entry.</P>
<P>This function returns <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all indefinite types except <A class=link title=G_VARIANT_TYPE_BASIC href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-BASIC:CAPS"><CODE class=literal>G_VARIANT_TYPE_BASIC</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.40.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.40.9></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a basic type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-maybe></A>
<H3>g_variant_type_is_maybe&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_maybe (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is a maybe type. This is true if the type string for <EM class=parameter><CODE>type</CODE></EM> starts with an 'm'.</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for any indefinite type for which every definite subtype is a maybe type -- <A class=link title=G_VARIANT_TYPE_MAYBE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-MAYBE:CAPS"><CODE class=literal>G_VARIANT_TYPE_MAYBE</CODE></A>, for example.</P>
<DIV class=refsect3><A name=id-1.6.18.7.41.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.41.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a maybe type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-array></A>
<H3>g_variant_type_is_array&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_array (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is an array type. This is true if the type string for <EM class=parameter><CODE>type</CODE></EM> starts with an 'a'.</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for any indefinite type for which every definite subtype is an array type -- <A class=link title=G_VARIANT_TYPE_ARRAY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-ARRAY:CAPS"><CODE class=literal>G_VARIANT_TYPE_ARRAY</CODE></A>, for example.</P>
<DIV class=refsect3><A name=id-1.6.18.7.42.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.42.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is an array type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-tuple></A>
<H3>g_variant_type_is_tuple&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_tuple (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is a tuple type. This is true if the type string for <EM class=parameter><CODE>type</CODE></EM> starts with a '(' or if <EM class=parameter><CODE>type</CODE></EM> is <A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_TUPLE</CODE></A>.</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for any indefinite type for which every definite subtype is a tuple type -- <A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_TUPLE</CODE></A>, for example.</P>
<DIV class=refsect3><A name=id-1.6.18.7.43.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.43.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a tuple type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-dict-entry></A>
<H3>g_variant_type_is_dict_entry&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_dict_entry (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is a dictionary entry type. This is true if the type string for <EM class=parameter><CODE>type</CODE></EM> starts with a '{'.</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for any indefinite type for which every definite subtype is a dictionary entry type -- <A class=link title=G_VARIANT_TYPE_DICT_ENTRY href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-DICT-ENTRY:CAPS"><CODE class=literal>G_VARIANT_TYPE_DICT_ENTRY</CODE></A>, for example.</P>
<DIV class=refsect3><A name=id-1.6.18.7.44.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.44.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a dictionary entry type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-variant></A>
<H3>g_variant_type_is_variant&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_variant (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines if the given <EM class=parameter><CODE>type</CODE></EM> is the variant type.</P>
<DIV class=refsect3><A name=id-1.6.18.7.45.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.45.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is the variant type</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-hash></A>
<H3>g_variant_type_hash&nbsp;()</H3><PRE class=programlisting><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_variant_type_hash (<EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> type</CODE></EM>);</PRE>
<P>Hashes <EM class=parameter><CODE>type</CODE></EM> .</P>
<P>The argument type of <EM class=parameter><CODE>type</CODE></EM> is only <A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> to allow use with <A class=link title=GHashTable href="https://developer.gnome.org/glib/stable/glib-Hash-Tables.html#GHashTable"><SPAN class=type>GHashTable</SPAN></A> without function pointer casting. A valid <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> must be provided.</P>
<DIV class=refsect3><A name=id-1.6.18.7.46.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GVariantType]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.46.7></A>
<H4>Returns</H4>
<P>the hash value</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-equal></A>
<H3>g_variant_type_equal&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_equal (<EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> type1</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> type2</CODE></EM>);</PRE>
<P>Compares <EM class=parameter><CODE>type1</CODE></EM> and <EM class=parameter><CODE>type2</CODE></EM> for equality.</P>
<P>Only returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the types are exactly equal. Even if one type is an indefinite type and the other is a subtype of it, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> will be returned if they are not exactly equal. If you want to check for subtypes, use <A class=link title=g_variant_type_is_subtype_of&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-subtype-of"><CODE class=function>g_variant_type_is_subtype_of()</CODE></A>.</P>
<P>The argument types of <EM class=parameter><CODE>type1</CODE></EM> and <EM class=parameter><CODE>type2</CODE></EM> are only <A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> to allow use with <A class=link title=GHashTable href="https://developer.gnome.org/glib/stable/glib-Hash-Tables.html#GHashTable"><SPAN class=type>GHashTable</SPAN></A> without function pointer casting. For both arguments, a valid <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> must be provided.</P>
<DIV class=refsect3><A name=id-1.6.18.7.47.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type1</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GVariantType]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>type2</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GVariantType]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.47.8></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type1</CODE></EM> and <EM class=parameter><CODE>type2</CODE></EM> are exactly equal</P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-is-subtype-of></A>
<H3>g_variant_type_is_subtype_of&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_variant_type_is_subtype_of (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>,
                              <EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *supertype</CODE></EM>);</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a subtype of <EM class=parameter><CODE>supertype</CODE></EM> .</P>
<P>This function returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a subtype of <EM class=parameter><CODE>supertype</CODE></EM> . All types are considered to be subtypes of themselves. Aside from that, only indefinite types can have subtypes.</P>
<DIV class=refsect3><A name=id-1.6.18.7.48.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>supertype</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.48.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a subtype of <EM class=parameter><CODE>supertype</CODE></EM> </P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-new-maybe></A>
<H3>g_variant_type_new_maybe&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_new_maybe (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *element</CODE></EM>);</PRE>
<P>Constructs the type corresponding to a maybe instance containing type <EM class=parameter><CODE>type</CODE></EM> or Nothing.</P>
<P>It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value.</P>
<DIV class=refsect3><A name=id-1.6.18.7.49.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>element</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.49.7></A>
<H4>Returns</H4>
<P>a new maybe <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-new-array></A>
<H3>g_variant_type_new_array&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_new_array (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *element</CODE></EM>);</PRE>
<P>Constructs the type corresponding to an array of elements of the type <EM class=parameter><CODE>type</CODE></EM> .</P>
<P>It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value.</P>
<DIV class=refsect3><A name=id-1.6.18.7.50.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>element</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.50.7></A>
<H4>Returns</H4>
<P>a new array <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-new-tuple></A>
<H3>g_variant_type_new_tuple&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_new_tuple (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> * const *items</CODE></EM>,
                          <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> length</CODE></EM>);</PRE>
<P>Constructs a new tuple type, from <EM class=parameter><CODE>items</CODE></EM> .</P>
<P><EM class=parameter><CODE>length</CODE></EM> is the number of items in <EM class=parameter><CODE>items</CODE></EM> , or -1 to indicate that <EM class=parameter><CODE>items</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated.</P>
<P>It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value.</P>
<DIV class=refsect3><A name=id-1.6.18.7.51.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>items</P></TD>
<TD class=parameter_description>
<P>an array of <A href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantTypes</SPAN></A>, one for each item. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=length]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>length</P></TD>
<TD class=parameter_description>
<P>the length of <EM class=parameter><CODE>items</CODE></EM> , or -1</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.51.8></A>
<H4>Returns</H4>
<P>a new tuple <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-new-dict-entry></A>
<H3>g_variant_type_new_dict_entry&nbsp;()</H3><PRE class=programlisting><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_new_dict_entry (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *key</CODE></EM>,
                               <EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *value</CODE></EM>);</PRE>
<P>Constructs the type corresponding to a dictionary entry with a key of type <EM class=parameter><CODE>key</CODE></EM> and a value of type <EM class=parameter><CODE>value</CODE></EM> .</P>
<P>It is appropriate to call <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A> on the return value.</P>
<DIV class=refsect3><A name=id-1.6.18.7.52.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>key</P></TD>
<TD class=parameter_description>
<P>a basic <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>value</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.52.7></A>
<H4>Returns</H4>
<P>a new dictionary entry <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-element></A>
<H3>g_variant_type_element&nbsp;()</H3><PRE class=programlisting>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_element (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the element type of an array or maybe type.</P>
<P>This function may only be used with array or maybe types.</P>
<DIV class=refsect3><A name=id-1.6.18.7.53.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>an array or maybe <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.53.7></A>
<H4>Returns</H4>
<P>the element type of <EM class=parameter><CODE>type</CODE></EM> </P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-n-items></A>
<H3>g_variant_type_n_items&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_variant_type_n_items (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the number of items contained in a tuple or dictionary entry type.</P>
<P>This function may only be used with tuple or dictionary entry types, but must not be used with the generic tuple type <A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_TUPLE</CODE></A>.</P>
<P>In the case of a dictionary entry type, this function will always return 2.</P>
<DIV class=refsect3><A name=id-1.6.18.7.54.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a tuple or dictionary entry <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.54.8></A>
<H4>Returns</H4>
<P>the number of items in <EM class=parameter><CODE>type</CODE></EM> </P>
<P>Since 2.24</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-first></A>
<H3>g_variant_type_first&nbsp;()</H3><PRE class=programlisting>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_first (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the first item type of a tuple or dictionary entry type.</P>
<P>This function may only be used with tuple or dictionary entry types, but must not be used with the generic tuple type <A class=link title=G_VARIANT_TYPE_TUPLE href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-TUPLE:CAPS"><CODE class=literal>G_VARIANT_TYPE_TUPLE</CODE></A>.</P>
<P>In the case of a dictionary entry type, this returns the type of the key.</P>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned in case of <EM class=parameter><CODE>type</CODE></EM> being <A class=link title=G_VARIANT_TYPE_UNIT href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#G-VARIANT-TYPE-UNIT:CAPS"><CODE class=literal>G_VARIANT_TYPE_UNIT</CODE></A>.</P>
<P>This call, together with <A class=link title=g_variant_type_next&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-next"><CODE class=function>g_variant_type_next()</CODE></A> provides an iterator interface over tuple and dictionary entry types.</P>
<DIV class=refsect3><A name=id-1.6.18.7.55.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a tuple or dictionary entry <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.55.10></A>
<H4>Returns</H4>
<P>the first item type of <EM class=parameter><CODE>type</CODE></EM> , or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-next></A>
<H3>g_variant_type_next&nbsp;()</H3><PRE class=programlisting>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_next (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the next item type of a tuple or dictionary entry type.</P>
<P><EM class=parameter><CODE>type</CODE></EM> must be the result of a previous call to <A class=link title=g_variant_type_first&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-first"><CODE class=function>g_variant_type_first()</CODE></A> or <A class=link title=g_variant_type_next&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-next"><CODE class=function>g_variant_type_next()</CODE></A>.</P>
<P>If called on the key type of a dictionary entry then this call returns the value type. If called on the value type of a dictionary entry then this call returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>For tuples, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned when <EM class=parameter><CODE>type</CODE></EM> is the last item in a tuple.</P>
<DIV class=refsect3><A name=id-1.6.18.7.56.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> from a previous call</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.56.9></A>
<H4>Returns</H4>
<P>the next <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> after <EM class=parameter><CODE>type</CODE></EM> , or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-key></A>
<H3>g_variant_type_key&nbsp;()</H3><PRE class=programlisting>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_key (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the key type of a dictionary entry type.</P>
<P>This function may only be used with a dictionary entry type. Other than the additional restriction, this call is equivalent to <A class=link title=g_variant_type_first&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-first"><CODE class=function>g_variant_type_first()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.6.18.7.57.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a dictionary entry <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.57.7></A>
<H4>Returns</H4>
<P>the key type of the dictionary entry</P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-variant-type-value></A>
<H3>g_variant_type_value&nbsp;()</H3><PRE class=programlisting>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=returnvalue>GVariantType</SPAN></A>&nbsp;*
g_variant_type_value (<EM class=parameter><CODE>const <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A> *type</CODE></EM>);</PRE>
<P>Determines the value type of a dictionary entry type.</P>
<P>This function may only be used with a dictionary entry type.</P>
<DIV class=refsect3><A name=id-1.6.18.7.58.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a dictionary entry <A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.6.18.7.58.7></A>
<H4>Returns</H4>
<P>the value type of the dictionary entry</P>
<P>Since 2.24. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-GVariantType.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GVariantType></A>
<H3>GVariantType</H3><PRE class=programlisting>typedef struct _GVariantType GVariantType;</PRE>
<P>A type in the GVariant type system.</P>
<P>Two types may not be compared by value; use <A class=link title=g_variant_type_equal&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-equal"><CODE class=function>g_variant_type_equal()</CODE></A> or <A class=link title=g_variant_type_is_subtype_of&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-is-subtype-of"><CODE class=function>g_variant_type_is_subtype_of()</CODE></A>. May be copied using <A class=link title=g_variant_type_copy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-copy"><CODE class=function>g_variant_type_copy()</CODE></A> and freed using <A class=link title=g_variant_type_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#g-variant-type-free"><CODE class=function>g_variant_type_free()</CODE></A>.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-GVariantType.see-also></A>
<H2>See Also</H2>
<P><A class=link title=GVariantType href="https://developer.gnome.org/glib/stable/glib-GVariantType.html#GVariantType"><SPAN class=type>GVariantType</SPAN></A>, <A class=link title=GVariant href="https://developer.gnome.org/glib/stable/glib-GVariant.html#GVariant"><SPAN class=type>GVariant</SPAN></A></P></DIV>