<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Windows-Compatibility-Functions.top_of_page></A>Windows Compatibility Functions</SPAN></H2>
<P>Windows Compatibility Functions &#8212; UNIX emulation on Windows</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;** </TD>
<TD class=function_name><A class=link title=g_win32_get_command_line&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-command-line">g_win32_get_command_line</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_error_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-error-message">g_win32_error_message</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_getlocale&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-getlocale">g_win32_getlocale</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_get_package_installation_directory&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory">g_win32_get_package_installation_directory</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_get_package_installation_directory_of_module&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module">g_win32_get_package_installation_directory_of_module</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_get_package_installation_subdirectory&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-subdirectory">g_win32_get_package_installation_subdirectory</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_win32_get_windows_version&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-windows-version">g_win32_get_windows_version</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_win32_locale_filename_from_utf8&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-locale-filename-from-utf8">g_win32_locale_filename_from_utf8</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_WIN32_DLLMAIN_FOR_DLL_NAME() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#G-WIN32-DLLMAIN-FOR-DLL-NAME:CAPS">G_WIN32_DLLMAIN_FOR_DLL_NAME</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_WIN32_HAVE_WIDECHAR_API href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#G-WIN32-HAVE-WIDECHAR-API:CAPS">G_WIN32_HAVE_WIDECHAR_API</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_WIN32_IS_NT_BASED href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#G-WIN32-IS-NT-BASED:CAPS">G_WIN32_IS_NT_BASED</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=MAXPATHLEN href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#MAXPATHLEN:CAPS">MAXPATHLEN</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.description></A>
<H2>Description</H2>
<P>These functions provide some level of UNIX emulation on the Windows platform. If your application really needs the POSIX APIs, we suggest you try the Cygwin project.</P></DIV>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-win32-get-command-line></A>
<H3>g_win32_get_command_line&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;**
g_win32_get_command_line (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Gets the command line arguments, on Windows, in the GLib filename encoding (ie: UTF-8).</P>
<P>Normally, on Windows, the command line arguments are passed to <CODE class=function>main()</CODE> in the system codepage encoding. This prevents passing filenames as arguments if the filenames contain characters that fall outside of this codepage. If such filenames are passed, then substitutions will occur (such as replacing some characters with '?').</P>
<P>GLib's policy of using UTF-8 as a filename encoding on Windows was designed to localise the pain of dealing with filenames outside of the system codepage to one area: dealing with commandline arguments in <CODE class=function>main()</CODE>.</P>
<P>As such, most GLib programs should ignore the value of argv passed to their <CODE class=function>main()</CODE> function and call <A class=link title=g_win32_get_command_line&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-command-line"><CODE class=function>g_win32_get_command_line()</CODE></A> instead. This will get the "full Unicode" commandline arguments using <CODE class=function>GetCommandLineW()</CODE> and convert it to the GLib filename encoding (which is UTF-8 on Windows).</P>
<P>The strings returned by this function are suitable for use with functions such as <A class=link title=g_open&nbsp;() href="https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-open"><CODE class=function>g_open()</CODE></A> and <A href="https://developer.gnome.org/gio/stable/GFile.html#g-file-new-for-commandline-arg"><CODE class=function>g_file_new_for_commandline_arg()</CODE></A> but are not suitable for use with <A class=link title=g_option_context_parse&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Commandline-option-parser.html#g-option-context-parse"><CODE class=function>g_option_context_parse()</CODE></A>, which assumes that its input will be in the system codepage. The return value is suitable for use with <A class=link title=g_option_context_parse_strv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Commandline-option-parser.html#g-option-context-parse-strv"><CODE class=function>g_option_context_parse_strv()</CODE></A>, however, which is a better match anyway because it won't leak memory.</P>
<P>Unlike argv, the returned value is a normal strv and can (and should) be freed with <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A> when no longer needed.</P>
<DIV class=refsect3><A name=id-1.5.31.7.2.10></A>
<H4>Returns</H4>
<P>the commandline arguments in the GLib filename encoding (ie: UTF-8). </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since 2.40</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-error-message></A>
<H3>g_win32_error_message&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_error_message (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> error</CODE></EM>);</PRE>
<P>Translate a Win32 error code (as returned by <CODE class=function>GetLastError()</CODE> or <CODE class=function>WSAGetLastError()</CODE>) into the corresponding message. The message is either language neutral, or in the thread's language, or the user's language, the system's language, or US English (see docs for <CODE class=function>FormatMessage()</CODE>). The returned string is in UTF-8. It should be deallocated with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.31.7.3.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>error code.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.31.7.3.6></A>
<H4>Returns</H4>
<P>newly-allocated error message</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-getlocale></A>
<H3>g_win32_getlocale&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_getlocale (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>The <A class=link title=Locale href="https://developer.gnome.org/glib/stable/glib-running.html#setlocale"><CODE class=function>setlocale()</CODE></A> function in the Microsoft C library uses locale names of the form "English_United States.1252" etc. We want the UNIXish standard form "en_US", "zh_TW" etc. This function gets the current thread locale from Windows - without any encoding info - and returns it as a string of the above form for use in forming file names etc. The returned string should be deallocated with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.31.7.4.5></A>
<H4>Returns</H4>
<P>newly-allocated locale name.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-get-package-installation-directory></A>
<H3>g_win32_get_package_installation_directory&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_get_package_installation_directory
                               (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *package</CODE></EM>,
                                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *dll_name</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_win32_get_package_installation_directory</CODE> has been deprecated since version 2.18 and should not be used in newly-written code.</P>
<P>Pass the HMODULE of a DLL or EXE to <A class=link title=g_win32_get_package_installation_directory_of_module&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module"><CODE class=function>g_win32_get_package_installation_directory_of_module()</CODE></A> instead.</P></DIV>
<P>Try to determine the installation directory for a software package.</P>
<P>This function is deprecated. Use <A class=link title=g_win32_get_package_installation_directory_of_module&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module"><CODE class=function>g_win32_get_package_installation_directory_of_module()</CODE></A> instead.</P>
<P>The use of <EM class=parameter><CODE>package</CODE></EM> is deprecated. You should always pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. A warning is printed if non-NULL is passed as <EM class=parameter><CODE>package</CODE></EM> .</P>
<P>The original intended use of <EM class=parameter><CODE>package</CODE></EM> was for a short identifier of the package, typically the same identifier as used for <CODE class=literal>GETTEXT_PACKAGE</CODE> in software configured using GNU autotools. The function first looks in the Windows Registry for the value <CODE class=literal>#InstallationDirectory</CODE> in the key <CODE class=literal>#HKLM\Software\@package</CODE>, and if that value exists and is a string, returns that.</P>
<P>It is strongly recommended that packagers of GLib-using libraries for Windows do not store installation paths in the Registry to be used by this function as that interfers with having several parallel installations of the library. Enabling multiple installations of different versions of some GLib-using library, or GLib itself, is desirable for various reasons.</P>
<P>For this reason it is recommeded to always pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> as <EM class=parameter><CODE>package</CODE></EM> to this function, to avoid the temptation to use the Registry. In version 2.20 of GLib the <EM class=parameter><CODE>package</CODE></EM> parameter will be ignored and this function won't look in the Registry at all.</P>
<P>If <EM class=parameter><CODE>package</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, or the above value isn't found in the Registry, but <EM class=parameter><CODE>dll_name</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, it should name a DLL loaded into the current process. Typically that would be the name of the DLL calling this function, looking for its installation directory. The function then asks Windows what directory that DLL was loaded from. If that directory's last component is "bin" or "lib", the parent directory is returned, otherwise the directory itself. If that DLL isn't loaded, the function proceeds as if <EM class=parameter><CODE>dll_name</CODE></EM> was <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>If both <EM class=parameter><CODE>package</CODE></EM> and <EM class=parameter><CODE>dll_name</CODE></EM> are <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the directory from where the main executable of the process was loaded is used instead in the same way as above.</P>
<DIV class=refsect3><A name=id-1.5.31.7.5.13></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>package</P></TD>
<TD class=parameter_description>
<P>You should pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for this. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>dll_name</P></TD>
<TD class=parameter_description>
<P>The name of a DLL that a package provides in UTF-8, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.31.7.5.14></A>
<H4>Returns</H4>
<P>a string containing the installation directory for <EM class=parameter><CODE>package</CODE></EM> . The string is in the GLib file name encoding, i.e. UTF-8. The return value should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when not needed any longer. If the function fails <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-get-package-installation-directory-of-module></A>
<H3>g_win32_get_package_installation_directory_of_module&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_get_package_installation_directory_of_module
                               (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> hmodule</CODE></EM>);</PRE>
<P>This function tries to determine the installation directory of a software package based on the location of a DLL of the software package.</P>
<P><EM class=parameter><CODE>hmodule</CODE></EM> should be the handle of a loaded DLL or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. The function looks up the directory that DLL was loaded from. If <EM class=parameter><CODE>hmodule</CODE></EM> is NULL, the directory the main executable of the current process is looked up. If that directory's last component is "bin" or "lib", its parent directory is returned, otherwise the directory itself.</P>
<P>It thus makes sense to pass only the handle to a "public" DLL of a software package to this function, as such DLLs typically are known to be installed in a "bin" or occasionally "lib" subfolder of the installation folder. DLLs that are of the dynamically loaded module or plugin variety are often located in more private locations deeper down in the tree, from which it is impossible for GLib to deduce the root of the package installation.</P>
<P>The typical use case for this function is to have a <CODE class=function>DllMain()</CODE> that saves the handle for the DLL. Then when code in the DLL needs to construct names of files in the installation tree it calls this function passing the DLL handle.</P>
<DIV class=refsect3><A name=id-1.5.31.7.6.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>hmodule</P></TD>
<TD class=parameter_description>
<P>The Win32 handle for a DLL loaded into the current process, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.31.7.6.9></A>
<H4>Returns</H4>
<P>a string containing the guessed installation directory for the software package <EM class=parameter><CODE>hmodule</CODE></EM> is from. The string is in the GLib file name encoding, i.e. UTF-8. The return value should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when not needed any longer. If the function fails <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-get-package-installation-subdirectory></A>
<H3>g_win32_get_package_installation_subdirectory&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_get_package_installation_subdirectory
                               (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *package</CODE></EM>,
                                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *dll_name</CODE></EM>,
                                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *subdir</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_win32_get_package_installation_subdirectory</CODE> has been deprecated since version 2.18 and should not be used in newly-written code.</P>
<P>Pass the HMODULE of a DLL or EXE to <A class=link title=g_win32_get_package_installation_directory_of_module&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module"><CODE class=function>g_win32_get_package_installation_directory_of_module()</CODE></A> instead, and then construct a subdirectory pathname with <A class=link title=g_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-build-filename"><CODE class=function>g_build_filename()</CODE></A>.</P></DIV>
<P>This function is deprecated. Use <A class=link title=g_win32_get_package_installation_directory_of_module&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module"><CODE class=function>g_win32_get_package_installation_directory_of_module()</CODE></A> and <A class=link title=g_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-build-filename"><CODE class=function>g_build_filename()</CODE></A> instead.</P>
<P>Returns a newly-allocated string containing the path of the subdirectory <EM class=parameter><CODE>subdir</CODE></EM> in the return value from calling <A class=link title=g_win32_get_package_installation_directory&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory"><CODE class=function>g_win32_get_package_installation_directory()</CODE></A> with the <EM class=parameter><CODE>package</CODE></EM> and <EM class=parameter><CODE>dll_name</CODE></EM> parameters. See the documentation for <A class=link title=g_win32_get_package_installation_directory&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory"><CODE class=function>g_win32_get_package_installation_directory()</CODE></A> for more details. In particular, note that it is deprecated to pass anything except NULL as <EM class=parameter><CODE>package</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.31.7.7.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>package</P></TD>
<TD class=parameter_description>
<P>You should pass <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> for this. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>dll_name</P></TD>
<TD class=parameter_description>
<P>The name of a DLL that a package provides, in UTF-8, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>subdir</P></TD>
<TD class=parameter_description>
<P>A subdirectory of the package installation directory, also in UTF-8</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.31.7.7.8></A>
<H4>Returns</H4>
<P>a string containing the complete path to <EM class=parameter><CODE>subdir</CODE></EM> inside the installation directory of <EM class=parameter><CODE>package</CODE></EM> . The returned string is in the GLib file name encoding, i.e. UTF-8. The return value should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed. If something goes wrong, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-get-windows-version></A>
<H3>g_win32_get_windows_version&nbsp;()</H3><PRE class=programlisting><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_win32_get_windows_version (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Returns version information for the Windows operating system the code is running on. See MSDN documentation for the <CODE class=function>GetVersion()</CODE> function. To summarize, the most significant bit is one on Win9x, and zero on NT-based systems. Since version 2.14, GLib works only on NT-based systems, so checking whether your are running on Win9x in your own software is moot. The least significant byte is 4 on Windows NT 4, and 5 on Windows XP. Software that needs really detailed version and feature information should use Win32 API like <CODE class=function>GetVersionEx()</CODE> and <CODE class=function>VerifyVersionInfo()</CODE>.</P>
<DIV class=refsect3><A name=id-1.5.31.7.8.5></A>
<H4>Returns</H4>
<P>The version information.</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-win32-locale-filename-from-utf8></A>
<H3>g_win32_locale_filename_from_utf8&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_win32_locale_filename_from_utf8 (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *utf8filename</CODE></EM>);</PRE>
<P>Converts a filename from UTF-8 to the system codepage.</P>
<P>On NT-based Windows, on NTFS file systems, file names are in Unicode. It is quite possible that Unicode file names contain characters not representable in the system codepage. (For instance, Greek or Cyrillic characters on Western European or US Windows installations, or various less common CJK characters on CJK Windows installations.)</P>
<P>In such a case, and if the filename refers to an existing file, and the file system stores alternate short (8.3) names for directory entries, the short form of the filename is returned. Note that the "short" name might in fact be longer than the Unicode name if the Unicode name has very short pathname components containing non-ASCII characters. If no system codepage name for the file is possible, <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is returned.</P>
<P>The return value is dynamically allocated and should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed.</P>
<DIV class=refsect3><A name=id-1.5.31.7.9.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>utf8filename</P></TD>
<TD class=parameter_description>
<P>a UTF-8 encoded filename.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.31.7.9.9></A>
<H4>Returns</H4>
<P>The converted filename, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> on conversion failure and lack of short names.</P>
<P></P></DIV>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-WIN32-DLLMAIN-FOR-DLL-NAME:CAPS></A>
<H3>G_WIN32_DLLMAIN_FOR_DLL_NAME()</H3><PRE class=programlisting># define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_WIN32_DLLMAIN_FOR_DLL_NAME</CODE> is deprecated and should not be used in newly-written code.</P></DIV>
<P>On Windows, this macro defines a <CODE class=function>DllMain()</CODE> function that stores the actual DLL name that the code being compiled will be included in.</P>
<P>On non-Windows platforms, expands to nothing.</P>
<DIV class=refsect3><A name=id-1.5.31.7.10.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>static</P></TD>
<TD class=parameter_description>
<P>empty or "static"</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>dll_name</P></TD>
<TD class=parameter_description>
<P>the name of the (pointer to the) char array where the DLL name will be stored. If this is used, you must also include <CODE class=literal>windows.h</CODE>. If you need a more complex DLL entry point function, you cannot use this</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-WIN32-HAVE-WIDECHAR-API:CAPS></A>
<H3>G_WIN32_HAVE_WIDECHAR_API</H3><PRE class=programlisting>#define G_WIN32_HAVE_WIDECHAR_API() TRUE
</PRE>
<P>On Windows, this macro defines an expression which evaluates to <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the code is running on a version of Windows where the wide character versions of the Win32 API functions, and the wide character versions of the C library functions work. (They are always present in the DLLs, but don't work on Windows 9x and Me.)</P>
<P>On non-Windows platforms, it is not defined.</P>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-WIN32-IS-NT-BASED:CAPS></A>
<H3>G_WIN32_IS_NT_BASED</H3><PRE class=programlisting>#define G_WIN32_IS_NT_BASED() TRUE
</PRE>
<P>On Windows, this macro defines an expression which evaluates to <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the code is running on an NT-based Windows operating system.</P>
<P>On non-Windows platforms, it is not defined.</P>
<P class=since>Since 2.6</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Windows-Compatibility-Functions.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=MAXPATHLEN:CAPS></A>
<H3>MAXPATHLEN</H3><PRE class=programlisting>#define MAXPATHLEN 1024
</PRE>
<P>Provided for UNIX emulation on Windows; equivalent to UNIX macro <A class=link title=MAXPATHLEN href="https://developer.gnome.org/glib/stable/glib-Windows-Compatibility-Functions.html#MAXPATHLEN:CAPS"><CODE class=literal>MAXPATHLEN</CODE></A>, which is the maximum length of a filename (including full path).</P></DIV></DIV>