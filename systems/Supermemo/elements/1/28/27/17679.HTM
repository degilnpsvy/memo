<H2 class=unnumbered>Foreword</H2>
<P>Arnold Robbins and I are good friends. We were introduced in 1990 by circumstances&#8212;and our favorite programming language, AWK. The circumstances started a couple of years earlier. I was working at a new job and noticed an unplugged Unix computer sitting in the corner. No one knew how to use it, and neither did I. However, a couple of days later it was running, and I was <CODE>root</CODE> and the one-and-only user. That day, I began the transition from statistician to Unix programmer. </P>
<P>On one of many trips to the library or bookstore in search of books on Unix, I found the gray AWK book, a.k.a. Aho, Kernighan and Weinberger, <CITE>The AWK Programming Language</CITE>, Addison-Wesley, 1988. AWK&#8217;s simple programming paradigm&#8212;find a pattern in the input and then perform an action&#8212;often reduced complex or tedious data manipulations to few lines of code. I was excited to try my hand at programming in AWK. </P>
<P>Alas, the <CODE>awk</CODE> on my computer was a limited version of the language described in the AWK book. I discovered that my computer had &#8220;old <CODE>awk</CODE>&#8221; and the AWK book described &#8220;new <CODE>awk</CODE>.&#8221; I learned that this was typical; the old version refused to step aside or relinquish its name. If a system had a new <CODE>awk</CODE>, it was invariably called <CODE>nawk</CODE>, and few systems had it. The best way to get a new <CODE>awk</CODE> was to <CODE>ftp</CODE> the source code for <CODE>gawk</CODE> from <CODE>prep.ai.mit.edu</CODE>. <CODE>gawk</CODE> was a version of new <CODE>awk</CODE> written by David Trueman and Arnold, and available under the GNU General Public License. </P>
<P>(Incidentally, it&#8217;s no longer difficult to find a new <CODE>awk</CODE>. <CODE>gawk</CODE> ships with GNU/Linux, and you can download binaries or source code for almost any system; my wife uses <CODE>gawk</CODE> on her VMS box.) </P>
<P>My Unix system started out unplugged from the wall; it certainly was not plugged into a network. So, oblivious to the existence of <CODE>gawk</CODE> and the Unix community in general, and desiring a new <CODE>awk</CODE>, I wrote my own, called <CODE>mawk</CODE>. Before I was finished I knew about <CODE>gawk</CODE>, but it was too late to stop, so I eventually posted to a <CODE>comp.sources</CODE> newsgroup. </P>
<P>A few days after my posting, I got a friendly email from Arnold introducing himself. He suggested we share design and algorithms and attached a draft of the POSIX standard so that I could update <CODE>mawk</CODE> to support language extensions added after publication of the AWK book. </P>
<P>Frankly, if our roles had been reversed, I would not have been so open and we probably would have never met. I&#8217;m glad we did meet. He is an AWK expert&#8217;s AWK expert and a genuinely nice person. Arnold contributes significant amounts of his expertise and time to the Free Software Foundation. </P>
<P>This book is the <CODE>gawk</CODE> reference manual, but at its core it is a book about AWK programming that will appeal to a wide audience. It is a definitive reference to the AWK language as defined by the 1987 Bell Laboratories release and codified in the 1992 POSIX Utilities standard. </P>
<P>On the other hand, the novice AWK programmer can study a wealth of practical programs that emphasize the power of AWK&#8217;s basic idioms: data driven control-flow, pattern matching with regular expressions, and associative arrays. Those looking for something new can try out <CODE>gawk</CODE>&#8217;s interface to network protocols via special <SAMP>/inet</SAMP> files. </P>
<P>The programs in this book make clear that an AWK program is typically much smaller and faster to develop than a counterpart written in C. Consequently, there is often a payoff to prototype an algorithm or design in AWK to get it running quickly and expose problems early. Often, the interpreted performance is adequate and the AWK prototype becomes the product. </P>
<P>The new <CODE>pgawk</CODE> (profiling <CODE>gawk</CODE>), produces program execution counts. I recently experimented with an algorithm that for <EM>n</EM> lines of input, exhibited ~ C n^2 performance, while theory predicted ~ C n log n behavior. A few minutes poring over the <SAMP>awkprof.out</SAMP> profile pinpointed the problem to a single line of code. <CODE>pgawk</CODE> is a welcome addition to my programmer&#8217;s toolbox. </P>
<P>Arnold has distilled over a decade of experience writing and using AWK programs, and developing <CODE>gawk</CODE>, into this book. If you use AWK or want to learn how, then read this book. </P><A name=index-Brennan_002c-Michael></A>
<DIV class=display><PRE class=display>Michael Brennan
Author of <CODE>mawk</CODE>
March, 2001
</PRE></DIV>