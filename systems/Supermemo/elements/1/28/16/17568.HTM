<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><B><FONT size=7><FONT face="Times New Roman, Times, serif">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>&nbsp;GRUB</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp;MBR<BR>(<FONT size=6>being the<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=7>GR</FONT><I>and<SPAN class=Apple-converted-space>&nbsp;</SPAN></I><FONT size=7>U</FONT><I>nified<SPAN class=Apple-converted-space>&nbsp;</SPAN></I><FONT size=7>B</FONT><I>oot<BR>Loader's</I></FONT></FONT><FONT face="Times New Roman, Times, serif"><I><SPAN class=Apple-converted-space>&nbsp;</SPAN>"stage1"</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=6>Sector</FONT></FONT></FONT></B><FONT face="Times New Roman, Times, serif"><B><FONT size=7><SPAN class=Apple-converted-space>&nbsp;</SPAN>)</FONT></B></FONT><BR><BR><FONT size=5 face="Arial, Helvetica, sans-serif"><B>A Disk Editor View<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>and</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>Comments on the Code<BR>(as seen in Memory during Execution)<BR><FONT size=4><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#linux"><I>Plus</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>some<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Lessons</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>for Linux users</A>!</FONT></B></FONT><BR><BR></CENTER>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">NOTE:</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=3 face="Arial, Helvetica, sans-serif">Although the code used in this<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>MBR</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is no mystery to anyone who has a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>search engine</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a bit of Assembly knowledge<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>since it<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>is</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>all Open Source code<B>)</B>, I decided that many would still like to see a listing and comments on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Assembly instructions</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>GRUB</B>'s MBR<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B><I>or</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>"<B>stage1</B>" as it's called<B>)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in an effort to help computer users understand what happens when<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>their</I><B>M</B>aster<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>B</B>oot<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>R</B>ecord is replaced by the boot code from<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>GRUB</B>. Also note that this code can be used as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>either</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>MBR code</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a hard drive's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>MBR</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>sector,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>or</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a Linux install's Volume<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Boot Sector</B>! GRUB as a whole<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>all of its software working together<B>)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is actually a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Boot Manager</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(in my opinion anyway; some technical reasons may exist for not labeling it as such, but it does so much more than just a common bootloader, I have to wonder if others ever take any time to study what can be done with it). It's capable of launching a variety of OS-types from its menu display; to which some distros such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Red Hat</B>&#174; have added their own<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>splash screens</B>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>SuSE&#174;</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(another Linux distribution company) has gone a step further, not only adding a splash screen patch, but some executable code which adds an<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>animated</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>progress-bar to their<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>splash screen</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>display.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=3 face="Arial, Helvetica, sans-serif"><B>GRUB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>often replaces the original MBR code when a Windows&#8482; user<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>tries out<SPAN class=Apple-converted-space>&nbsp;</SPAN></I><B>Linux</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first time. Long ago (in relation to how long computers have been around) GRUB was only the default loader for<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Red Hat</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a few lesser known<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>distros</I></B>. But soon<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>many</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>others, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>SuSE 9.2<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>(SuSe has also used GRUB for some time now) and then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Ubuntu</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(since 2004; Debian-based) distro, also<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>defaulted</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>to using GRUB<B><FONT color=#ff0000 size=4 face="Verdana, Arial, Helvetica, sans-serif">*</FONT></B>. This page will show you where "<B>stage1</B><I>"</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>gets loaded into Memory and how program execution is passed on to the rest of GRUB's executable code located elsewhere on the disk. You can also find documented sources by the authors of GRUB at most Linux archive sites. A good starting point would be:<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif"><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/grub/grub-legacy.en.html" target=offgrub><B>GRUB Legacy</B></A>. Many Linux users prefer reading the GRUB Manual in PDF or HTML form rather than GRUB's 'info' pages<B>;</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>you can get all the<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif"><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/grub/manual/" target=grubdocs>documentation here</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the single page HTML Manual is both portable and searchable across many platforms).<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face="Verdana, Arial, Helvetica, sans-serif">I</FONT>n the source code, the source file for GRUB's Master Boot Record (<I>or</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>VBR Boot Sector) code is called:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Verdana, Arial, Helvetica, sans-serif">stage1.S</FONT></B>. You may also find the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Verdana, Arial, Helvetica, sans-serif">stage1.h<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT></B>quite helpful; it contains definitions of various bytes used in GRUB's BPB and data areas (see below).<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>NOTE:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>The style or format of the assembly code instructions in these source files is often referred to as "AT&amp;T" (rather than "Intel"). The "Intel" format is what most assemblers, such as Microsoft's MASM, use; whereas, the GNU Assembler uses the "AT&amp;T" format.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=3 face="Arial, Helvetica, sans-serif"><B>_______________________</B><BR><FONT face="Verdana, Arial, Helvetica, sans-serif"><FONT color=#ff0000><FONT size=4><B>*</B></FONT></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>NOTE: S</FONT>ome Linux distros use a version of GRUB which has never been "patched" for<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>splash screens</I></B>; so you won't see any color image<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>logos</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>behind its menus or help screens.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=3 face="Arial, Helvetica, sans-serif"><I>And perhaps of equal importance to some:</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>A number of distros seem to have no way of installing GRUB into the MBR without adding some of its "<B>stage2</B>" code immediately after it (<B><I>overwriting many sectors of the first track</I></B>). Neither the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Red Hat</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<I>since at least</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>8.0</B>; when using their "Anaconda"<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>GUI<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>install) nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>SuSE</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>installation programs (<I>probably long before</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>9.1</B>; which is one version we tested) will overwrite any sectors in the first track by default, except the MBR sector. (This is probably true for other Linux distro installation programs as well.)<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><FONT size=3 face="Arial, Helvetica, sans-serif">What really bothers us about many particular install programs though, is their<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lack of clarity</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or are they simply propagating the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>error</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>over and over again?) by the manner in which the choices (for those that even give you a choice!) are presented to their users. For example, many distros that use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>text-only</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>install, and even for some distros with GUI install programs, when text-only is selected<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>or the user is forced into it, because there's not enough memory to run the GUI install<B>)</B>, at some point in the process, they ask: "Where do you want to install the boot loader?" and the only options are often:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Master Boot Record (MBR)" or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>2)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>"First sector of boot partition." Does it<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>make sense</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>that choosing option #1) means about 8 KiB (16 sectors) of 'stage2' code will also be written to the first track<B>?</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Yet choosing option #2) may or may not write any of GRUB's code to the MBR sector; so, if like me, you want to be sure a new install cannot overwrite any data you may have saved in the first track, you're stuck with manually having to install GRUB to the MBR sector after performing the installation!</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=3 face="Arial, Helvetica, sans-serif">Although this may be the default behavior of GRUB, a distribution's installation programmer(s) should be able to (and a number of major Linux distros have done so) offer you a choice<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>that makes sense! &nbsp;</I></B></FONT><FONT size=3 face="Arial, Helvetica, sans-serif">So, be aware that just because a distro uses GRUB, they certainly do not all follow the same installation methods! To most people, this won't make any difference at all, but we consider it disturbing that some<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>popular</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>new Linux distros do not point out what their install programs will<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>really</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>do<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>i.e., write<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>at least</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>16 sectors to the first track<B>)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than simply stating GRUB will be written to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>MBR</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>sector. As with all OS installs, it's up to the user to protect his existing data.<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><FONT size=3 face="Arial, Helvetica, sans-serif"><B>[</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>So<B>:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Back-up<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>the whole first track,<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>if you are trying out any new Linux distros and you have some other boot manager or other kind of data saved there.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>]</B></FONT></P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=DEview></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<H1 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT face="Times New Roman, Times, serif">A &nbsp;Disk &nbsp;Editor View of<BR><I>GRUB</I>'s &nbsp;MBR/Boot Sector</FONT></H1>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=5><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>There are many different versions of GRUB being used in the real world. The one we're examining here contains the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1 code</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>for both versions<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.92<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>and</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>0.93</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<B><FONT size=4 face="Courier New, Courier, mono">12/08/2002</FONT></B>); still found in most Linux installations. Also versions<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.94</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(some:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT size=4 face="Courier New, Courier, mono">1/25/2004</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>others:<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=4 face="Courier New, Courier, mono"><B>5/13/2004</B></FONT>;<FONT size=4 face="Arial, Helvetica, sans-serif"><SPAN class=Apple-converted-space>&nbsp;</SPAN>for example, as used in SuSE Linux 9.1 and seen in the Khexedit pics below</FONT>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif"><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="ftp://alpha.gnu.org/gnu/grub/" target=ftp><B>0.95</B></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<B><FONT size=4 face="Courier New, Courier, mono">6/13/2004</FONT></B>)<FONT size=4>; you'll also find<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.97</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>and<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>preliminary work on GRUB2 at this FTP site as well</FONT>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face="Verdana, Arial, Helvetica, sans-serif"><FONT size=4>A few more lines were added for<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT></FONT><FONT size=5><B>0.97</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<B><FONT size=4 face="Courier New, Courier, mono">5/7/2005</FONT></B>)</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>as discussed below.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=5><FONT face="Verdana, Arial, Helvetica, sans-serif"><FONT size=4>The MBR code for all of these versions is<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>basically</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the same as before (</FONT></FONT><FONT size=4 face="Arial, Helvetica, sans-serif">only<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#9495">one new instruction</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>was added</FONT><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif"><SPAN class=Apple-converted-space>&nbsp;</SPAN>for 0.95 and a few more for 0.97), but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>offsets</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the "GRUB " and error message strings have all changed due to that! One should also note that Linux companies such as SuSE&#174;, RedHat&#174;, etc. may make changes of their own (<FONT face="Arial, Helvetica, sans-serif"><B>SuSE&#174;</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>made a slight change in its 0.94 GRUB MBR code; see code comments<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#94suse">below</A></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif"><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.opensuse.org/" target=OSuse>OpenSuse</A>may have others). The most recent GNU GRUB version,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.97</B>, is also discussed below; where only 9 bytes have been added in the same area.</FONT></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Verdana>Like the Volume boot records of DOS/Windows, the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>three</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of GRUB's MBR code are called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Jump Instruction</B>, even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>only the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>two</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>form the actual<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>JMP</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(jump) to the rest of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>executable code</B>; the third byte (<B>90</B>h) is just a NOP instruction ('No OPeration'; although it does<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>nothing</I>, it's often used to align other bytes and allow for changes in the code that won't alter the size of the file). So the execution jumps over the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>59</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>highlighted in pink</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>which can be used as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk><B>B</B>IOS<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>P</B>arameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>B</B>lock</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the data is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUBbpb.htm" target=GBPB>explained here</A>), as well as the next<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>12</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>highlighted in yellow</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>which contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>data about GRUB</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#BPB">below</A>), to continue at offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>4A</B>h.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Verdana><B>NOTE:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>When GRUB is used as an MBR sector, which is how we're examining it here, none of the bytes stored on the media in the BPB area are actually used by the code; so we've filled it with zero bytes.</FONT></P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center>
<TABLE border=1 cellSpacing=0 borderColor=#000000 cellPadding=7 align=center>
<TBODY>
<TR>
<TD><PRE>Absolute sector 0 (cylinder 0, head 0, sector 1)
       0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
0000  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>EB 48 90</SPAN> <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>  .H..............
0010  <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>  ................
0020  <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>  ................
0030  <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN> <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>03 02</SPAN>  ................
0040  <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><B><FONT color=#cc0000>80</FONT></B> 00 00 80 <B><FONT color=#ff0000>DF 0A 93 01</FONT></B> 00 08</SPAN> <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>FA EA 50 7C 00 00</SPAN>  ............P|..
0050  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>31 C0 8E D8 8E D0 BC 00 20 FB A0 40 7C 3C FF 74</SPAN>  1....... ..@|&lt;.t
0060  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>02 88 C2 52 BE 76 7D E8 34 01 F6 C2 80 74 54 B4</SPAN>  ...R.v}.4....tT.
0070  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>41 BB AA 55 CD 13 5A 52 72 49 81 FB 55 AA 75 43</SPAN>  A..U..ZRrI..U.uC
0080  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>A0 41 7C 84 C0 75 05 83 E1 01 74 37 66 8B 4C 10</SPAN>  .A|..u....t7f.L.
0090  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>BE 05 7C C6 44 FF 01 66 8B 1E 44 7C C7 04 10 00</SPAN>  ..|.D..f..D|....
00A0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>C7 44 02 01 00 66 89 5C 08 C7 44 06 00 70 66 31</SPAN>  .D...f.\..D..pf1
00B0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>C0 89 44 04 66 89 44 0C B4 42 CD 13 72 05 BB 00</SPAN>  ..D.f.D..B..r...
00C0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>70 EB 7D B4 08 CD 13 73 0A F6 C2 80 0F 84 F3 00</SPAN>  p.}....s........
00D0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>E9 8D 00 BE 05 7C C6 44 FF 00 66 31 C0 88 F0 40</SPAN>  .....|.D..f1...@
00E0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>66 89 44 04 31 D2 88 CA C1 E2 02 88 E8 88 F4 40</SPAN>  f.D.1..........@
00F0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>89 44 08 31 C0 88 D0 C0 E8 02 66 89 04 66 A1 44</SPAN>  .D.1......f..f.D
0100  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>7C 66 31 D2 66 F7 34 88 54 0A 66 31 D2 66 F7 74</SPAN>  |f1.f.4.T.f1.f.t
0110  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>04 88 54 0B 89 44 0C 3B 44 08 7D 3C 8A 54 0D C0</SPAN>  ..T..D.;D.}&lt;.T..
0120  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>E2 06 8A 4C 0A FE C1 08 D1 8A 6C 0C 5A 8A 74 0B</SPAN>  ...L......l.Z.t.
0130  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>BB 00 70 8E C3 31 DB B8 01 02 CD 13 72 2A 8C C3</SPAN>  ..p..1......r*..
0140  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>8E 06 48 7C 60 1E B9 00 01 8E DB 31 F6 31 FF FC</SPAN>  ..H|`......1.1..
0150  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>F3 A5 1F 61 FF 26 42 7C BE 7C 7D E8 40 00 EB 0E</SPAN>  ...a.&amp;B|.|}.@...
0160  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>BE 81 7D E8 38 00 EB 06 BE 8B 7D E8 30 00 BE 90</SPAN>  ..}.8.....}.0...
0170  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>7D E8 2A 00 EB FE</SPAN><SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio> </SPAN><B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff>47 52 55 42 </FONT>20 <FONT color=#ff0000>00</FONT></B><SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio> 47 65 6F 6D</SPAN>  }.*...<B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff>GRUB</FONT> <FONT color=#ff0000>.</FONT></B><SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>Geom</SPAN>
0180  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio><FONT color=#ff0000>00</FONT> 48 61 72 64 20 44 69 73 6B <FONT color=#ff0000>00</FONT> 52 65 61 64 <FONT color=#ff0000>00</FONT></SPAN>  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio><FONT color=#ff0000><B>.</B></FONT>Hard Disk<FONT color=#ff0000><B>.</B></FONT>Read<FONT color=#ff0000><B>.</B></FONT></SPAN>
0190  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>20 45 72 72 6F 72 <FONT color=#ff0000>00</FONT> </SPAN><SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn><B>BB 01 00 B4 0E CD 10 AC 3C</B></SPAN>  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio> Error<FONT color=#ff0000><B>.</B></FONT></SPAN>........&lt;
01A0  <SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn><B>00 75 F4 C3</B></SPAN> 00 00 00 00 00 00 00 00 00 00 00 00  .u..............
01B0  00 00 00 00 00 00 00 00 <B style="BACKGROUND-COLOR: rgb(204,255,255)" class=ltcyn><FONT color=#cc00cc>A8 E1 A8 E1</FONT></B> 00 00<SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred> 80 01</SPAN>   ................
01C0  <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>01 00 07 FE FF 6D 3F 00 00 00 AF 39 D7 00 00 00</SPAN>  .....m?....9....
01D0  <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>C1 6E 0C FE FF FF EE 39 D7 00 BD 86 BB 00 00 FE</SPAN>  .n.....9........
01E0  <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>FF FF 83 FE FF FF AB C0 92 01 CD 2F 03 00 00 FE</SPAN>  .........../....
01F0  <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>FF FF 0F FE FF FF 78 F0 95 01 83 AF CC 00 </SPAN><B style="BACKGROUND-COLOR: rgb(255,255,0)" class=yel>55 AA</B>  ......x.......U.
       0  1  2  <B>3</B>  4  5  6  7  8  9  A  B  C  D  E  F

</PRE></TD></TR></TBODY></TABLE><FONT size=2 face="Verdana, Arial, Helvetica, sans-serif"><B>GRUB MBR example using version 0.92/0.93 code.</B></FONT></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">At offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>176</B>h (for<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.92/0.93</B>) we find the Zero-terminated string "<SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff><B><FONT size=5 face="Courier New, Courier, mono">GRUB</FONT></B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>". Under versions<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.94/0.95</B>, it will begin at offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>179</B>h, but in the SuSE 9.1 MBR (using ver.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.94</B>) an extra instruction was added which shifted the "GRUB " string offset to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>17B</B>h. [Note: If you have an earlier version of GRUB (<I>before</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>0.92), you may find this string in yet another location.]<B><BR></B>The "GRUB " string is followed by a group of very brief<SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>Error Messages</B>; each phrase in the Error Message section is zero-terminated as well. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>bolded code</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>inserted after the Error Message section is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn>subroutine</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>used to display both the word "<B>GRUB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>" and any Error Messages on the screen; it's called by the main body of code as needed.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">Although GRUB is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Boot Manager</B>, its<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1 code</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>follows the structure of all MBRs by placing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>standard</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>four-entry</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>Partition Table</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its agreed upon location<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>offsets 0<B>1BE</B>h through 0<B>1FD</B>h<B>)</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is followed by the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Word-sized</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>signature</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>ID of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="BACKGROUND-COLOR: rgb(255,255,0)" class=yel><B>AA55</B>h</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(remember hex Words for Intel x86 CPUs are stored in memory with the Lowest-byte first and the Highest-byte last; that's why you see: "55 AA" on the disk).</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">Finally, GRUB makes sure not to use any of the bytes between offsets<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1B8</B>h and<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1BB</B>h because they're used by Microsoft&#174; Windows<B>&#8482;</B>NT/2000/XP/2003 as the<SPAN style="BACKGROUND-COLOR: rgb(204,255,255)" class=ltcyn><SPAN class=Apple-converted-space>&nbsp;</SPAN>NT Drive Serial Number;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>which in our example above is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>four-byte</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>WORD<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#990099>E1A8E1A8</FONT>h.</FONT></P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=CODE></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" face="Verdana, Arial, Helvetica, sans-serif"><B>[</B>For more comments on the code below, read the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1.S</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>source file for your version of the GRUB distribution. It's associated file,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1.h</B>, contains a number of definitions used by the Assembly code in stage1.S; such as:<BR>"/* The signature for bootloader. */ : #define STAGE1_SIGNATURE<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0xaa55</B>"<B>]</B></FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">Unlike many<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>bootloader</I>s, since GRUB can function as either a Master Boot Record (when installed in the first sector of a PC's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><B>/dev/hda</B></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>device; that is, its<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Primary, Master</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>hard disk)<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>or<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>as a Linux install's Volume boot record, it never bothers to relocate its code, since there will be no other VBR code that needs to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>immediately<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>loaded at Segment:Offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0000:7C00</B>. Only after GRUB is fully operational (i.e., running elsewhere in memory), would it possibly need to perform a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>chainload<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>of some OS's boot record that might require use of this area of memory.</FONT><BR></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT size=6 face="Times New Roman, Times, serif">GRUB &nbsp;<B>stage1</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>MBR Code:</FONT></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"> 
7C00 EB48          JMP     <B><FONT color=#006e00>7C4A</FONT></B>          ; Jump (short) over <B>BPB</B> data
7C02 90            NOP                   ;  area to main body of code.</PRE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=BPB></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Times New Roman, Times, serif">Although GRUB's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>BPB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>BIOS Parameter Block</SPAN>) could contain data useful to many OS utilities, it's only used this way when GRUB is installed to a floppy diskette; in which case it uses the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>FAT VBR</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>format (as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUBbpb.htm" target=GBPB>explained here</A>):</FONT></P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=1 cellSpacing=0 cellPadding=7 align=center>
<TBODY>
<TR>
<TD><PRE>        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
7C00            <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>      .............
7C10   <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>   ................
7C20   <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN>   ................
7C30   <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk>00 00 00 00 00 00 00 00 00 00 00 00 00 00</SPAN> 03 02   ................
<B>7C40</B>   <B><FONT color=#cc0000>80</FONT></B> 00 <U>00 80</U><SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel> <B><FONT color=#ff0000><U>DF 0A 93 01</U></FONT></B> </SPAN><U>00 08</U>                     ..........
</PRE></TD></TR></TBODY></TABLE><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">   Stage1 Version Information: [7C3E] -&gt; COMPAT_VERSION_MAJOR (03h),
                               [7C3F] -&gt; COMPAT_VERSION_MINOR (02h).

   <B>BYTES in the GRUB data area which are referenced in the code below:</B>
  
   [7C05] -&gt; "<B>Disk Address Packet</B>" for LBA mode (see <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7C90">7C90</A> and <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7CD3">7CD3</A>).
             <B>NOTE:</B> These values may not correspond to any bytes that
                   happen to be stored on the media here, but rather
                   are overwritten in memory with values created by
                   execution of the code. Therefore, you can safely
                   zero-out (or fill with any other byte) the whole
                   <SPAN style="BACKGROUND-COLOR: rgb(255,204,255)" class=ltpnk><B>B</B>IOS <B>P</B>arameter <B>B</B>lock area</SPAN> as we did above!

   [<B>7C40</B>] -&gt; <B><FONT color=#cc0000>80</FONT></B> ("<B>Boot Drive</B>") <B>NOTE:</B> For those of you with <I><B>multi-OS
             booting</B></I> systems, <I><B>if</B></I> your <B>Linux</B> installation with <B>GRUB</B>'s
    See:     remaining software (<B>stage2</B>, <B>menu</B> file, etc.) is located
    <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7C5A">7C5A</A>     somewhere other than on the Primary Master drive, this
             value will be <B><FONT color=#cc0000>81</FONT></B>, <B><FONT color=#cc0000>82</FONT></B>, etc. depending upon which drive
             that Linux OS's <B>/boot/grub</B> directory is located. In the
             <B>stage1.S</B> file, it's called the GRUB_INVALID_DRIVE byte
             and commented as: "<B>the disk to load stage2 from</B>." (The
             word INVALID has something to do with the <I>code logic</I>.)
 
   [7C41] -&gt; 00 ("Force LBA mode byte"; at <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7C80">7C80</A>)
   [7C42] -&gt; 00 80 (<B>8000</B>h) Memory location where GRUB stores the
                           next stage of the code to execute. See
                           <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7D54">7D54</A> below ("stage2_address").

   <B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>[7C44]</B> -&gt; <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff><B>Note:</B></FONT></SPAN> A very important location for anyone using <B>GRUB!
          </B>   This <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>(<B>4-byte</B>) <B>Q</B>uad-<B>Word</B> contains the <B>location</B> of GRUB's</SPAN>
             <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><B>stage2 file</B> in <B><I>sectors</I></B>!</SPAN> It's called "stage2_sector" in
             the <B>stage1.S</B> code. If <B>GRUB</B> is installed in the MBR by a
             distro that always includes a numbmer of sectors from
             stage2 immediately following the GRUB MBR, you will see
             the bytes <B><FONT color=#ff0000>01 00 00 00</FONT></B> in this location; otherwise, it
             will point to stage2 in the "/boot/grub" directory.
    <B>Example:</B>
             <B><FONT color=#ff0000>DF 0A 93 01</FONT></B> (<B>1930ADF</B>h) [ "<B>stage2</B> Sector" -&gt; <B>26,413,791</B> ]
            <B>[</B>So, for this GRUB install, its <B>stage2 file</B> is located at
             Absolute Sector 26413791. <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>This value will of course <B>vary</B></SPAN>
             <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>depending upon the physical </SPAN><SPAN style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>location of the <B>stage2</B> file!</SPAN><B>]</B>

    [7C48] -&gt; 00 08 (<B>800</B>h) ["stage2_segment" at <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7D40">7D40</A>; <I>do not confuse
                           it with the "stage2_address" <B>8000</B> at <B>7D54</B>.</I>]
</PRE>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=1 cellSpacing=0 cellPadding=7 align=center>
<TBODY>
<TR>
<TD>
<P><FONT face="Arial, Helvetica, sans-serif"><FONT size=4>Another example:</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face="Courier New, Courier,&#10;&#9; monospace"><B>/boot</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>partition had so many system errors we decided to save the files and reformat it. When re-writing the saved files back to the partition, as expected, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B>file ended up in a different location. So, we used a disk editor with a search function (<B><A href="http://thestarman.pcministry.com/asm/mbr/BootToolsRefs.htm#HxD" target=Tools>HxD</A></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>under Windows) to find the string "Loading stage2", then converted its<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Absolute Sector</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>value of<B>26,472,763</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>to:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>193F13B</B>h and finally changed the bytes in the GRUB MBR to:<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#ff0000><B>3B F1</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>93 01</FONT>.</FONT></P>
<P><B><FONT color=#ff0000>NOTE:</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>For anyone who may need to do this some day, we ran into yet another problem: The<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>file itself also contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>hard-coded</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>value (<B>two</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>actually) pointing to other parts of the GRUB code! See:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/hexdump.htm" target=s21>First sector of stage2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(values in<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#ff0000>red</FONT>) starting at offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1F0</B>. Though I was successful in editing them<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>I noted the difference between the two values and our<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>old</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>"base location" then made changes in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>new</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>values accordingly), we still do not know for sure what they're actually used for. It was enough to keep<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>GRUB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>from operating correctly<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>until</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>we made the changes though<B>!</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>So, our new values in stage2 became:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT color=#ff0000>55 F1</FONT></B><FONT color=#ff0000><SPAN class=Apple-converted-space>&nbsp;</SPAN>93 01</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(offsets<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1F0-1F3</B>) and:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT color=#ff0000>3C F1</FONT></B><FONT color=#ff0000><SPAN class=Apple-converted-space>&nbsp;</SPAN>93 01</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(at offsets<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1F8-1FB</B>).</P></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><B><FONT color=#006e00>7C4A</FONT></B> FA            CLI
<A name=9495></A>
; In the <B>0.94</B> <I>and</I> <B>0.95</B> code, an <B><FONT color=#0000ff>OR  DL,80</FONT></B> instruction is inserted here
; when GRUB is installed in an MBR as a "workaround for <I>buggy</I> <B>BIOS</B>es.."
; which don't pass the <B>boot drive byte</B> correctly. If GRUB is installed
; as the Linux Boot Sector, a value of <B>00</B> is used instead of <B>80</B>, which
; <I>effectively</I> makes it a <B>NOP</B>.  This code (<B>80 CA 80</B>) causes all offsets
; <I>after it</I> to shift by <B>3 </B>bytes, so all relative jumps below would be
; different for these versions; even though its the same code<B>!</B>
;
; For the GNU GRUB <B>0.97</B> code, its programmers substituted the following
; as their "workaround for <I>buggy</I> <B>BIOS</B>es.." using the <B><FONT color=#0000ff>test  dl,0x80</FONT></B>
; instruction, etc. (as shown here):
; 7C4B  90          nop               ; These 'nops' are prob. for<BR>; 7C4C  90          nop               ;   anticipated future changes!
; 7C4D F6C280       <B><FONT color=#0000ff>test dl,0x80</FONT></B>      ; Check if DL is <I>masked</I> correctly.
; 7C50 7502         jnz  0x<FONT color=#ff0000><B><FONT color=#990000>7c54</FONT></B></FONT>       ;   If not, then assume it's a
; 7C52 B280         <B><FONT color=#0000ff>mov  dl,0x80</FONT></B>      ;   <I>bogus</I> value and set DL to 80.
; Thus, all the instructions below this line would be <I>shifted </I>by <B>9</B> bytes
; for version <B>0.97</B> (7C4Bh + 9 = <FONT color=#ff0000><B><FONT color=#990000>7C54</FONT></B></FONT>h).


7C4B EA507C0000    JMP     0000:<B><FONT color=#006600>7C50</FONT></B>  ; Long Jump to the next instruction
                                      ; because some <I>bogus</I> <B>BIOS</B>es jump to
                                      ; 07C0:0000 instead of 0000:7C00.

<B><FONT color=#006600>7C50</FONT></B> 31C0          XOR     AX,AX
7C52 8ED8          MOV     DS,AX
7C54 8ED0          MOV     SS,AX
7C56 BC0020        MOV     SP,2000
7C59 FB            STI
<A name=7C5A></A>7C5A A0407C        MOV     AL,[<B>7C40</B>]     ; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; <B>Boot Drive</B>
7C5D 3CFF          CMP     AL,FF
7C5F 7402          JZ      7C63
7C61 88C2          MOV     DL,AL
7C63 52            PUSH    DX
7C64 BE767D        MOV     SI,<B><FONT color=#0000ff>7D76</FONT></B>       ; --&gt; "<B><FONT color=#0000ff>GRUB</FONT> </B>"
7C67 E83401        <B><FONT color=#006600>CALL    <FONT color=#0000cc>7D9E</FONT></FONT></B>          ; Display GRUB ID on screen.

7C6A F6C280        TEST    DL,80
7C6D 7454          JZ      <B><FONT color=#cc0000>7CC3</FONT></B>
7C6F B441          MOV     AH,<B>41</B>         ; Function <B>41</B>h of INT13
7C71 BBAA55        MOV     BX,55AA
7C74 CD13          <B><I>INT</I>     13</B>            ; Test for INT13 Extensions

7C76 5A            POP     DX
7C77 52            PUSH    DX
7C78 7249          JB      <B><FONT color=#cc0000>7CC3</FONT></B>
7C7A 81FB55AA      CMP     BX,<B>AA55</B>
7C7E 7543          JNZ     <B><FONT color=#cc0000>7CC3</FONT></B>
<A name=7C80></A>7C80 A0417C        MOV     AL,[<B>7C41</B>]        &lt;&lt;&lt;&lt; Force LBA mode byte
7C83 84C0          TEST    AL,AL
<A name=94suse></A>
; At this point, <B>SuSE</B> Linux <B>9.1</B> added a <B>JS</B> instruction to jump to
; the code at <A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#7CC3"><B>7CC3</B></A>. Why? Neither 0.94 nor 0.95 have this! There are
; already 3 jumps above (7C6D, 7C78, 7C7E) and 2 below (7C8A, 7CBC)
; to this same location. Is there a problem with "TEST  AL,AL" here?

7C85 7505          JNZ     <B>7C8C</B>
7C87 83E101        AND     CX,+01
7C8A 7437          JZ      <B><FONT color=#cc0000>7CC3</FONT></B>

; LBA mode begins here:
; ====================
<B>7C8C</B> 668B4C10   *  MOV     ECX,[SI+10]
<A name=7C90></A>
7C90 BE057C        MOV     SI,<B>7C05</B>        &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;  Setup "Disk Packet"
                                                     for Extended Read
7C93 C644FF01      MOV     BYTE PTR [SI-01],01

7C97 668B1E447C  * MOV     EBX,[<B>7C44</B>]    &lt;&lt;&lt;&lt;&lt;  Location of <B>Stage2</B> code
                                                  from the beginning of
                                              the partition (the offset
                                              is in number of sectors).

7C9C C7041000      MOV     WORD PTR [SI],0010
7CA0 C744020100    MOV     WORD PTR [SI+02],0001

7CA5 66895C08   *  MOV     [SI+08],EBX

7CA9 C744060070    MOV     WORD PTR [SI+06],7000

7CAE 6631C0     *  XOR     EAX,EAX

7CB1 894404        MOV     [SI+04],AX

7CB4 6689440C   *  MOV     [SI+0C],EAX

7CB8 B442          MOV     AH,<B>42</B>           ; Function <B>42</B>h of INT13
7CBA CD13          <B>INT     13</B>              ; <B>Extended Read</B> (using
                                           ; Disk Address Packet).
7CBC 7205          JB      <B><FONT color=#cc0000>7CC3</FONT></B>            ; If LBA not supported,
                                           ; go to CHS mode only.

7CBE BB0070        MOV     BX,7000
7CC1 EB7D          <B>JMP</B>     <B><FONT color=#006e00>7D40</FONT></B>
<A name=7CC3></A>
<B><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm#94suse">7CC3</A></B> B408          MOV     AH,0<B>8</B>           ; Function 08 of INT13
7CC5 CD13          <B>INT     13</B>              ; Get Drive Parameters

7CC7 730A          JNB     7CD3

7CC9 F6C280        TEST    DL,80           ; Tests if HDD exists.
7CCC 0F84F300   *  JZ      7DC3            ; Therefore, this jump is
; never taken unless grub was installed on and running from a floppy
; disk.  And only then will you find more executable code at <B>7DC3</B>.
; In the source code file (stage1.S), you'll find this short comment
; about the extra code: "Kinda sneaky, huh?"

7CD0 E98D00        <B>JMP</B>     <B><FONT color=#ff0000>7D60</FONT></B>            ; There was an HDD Error!
<A name=7CD3></A>
7CD3 BE057C        MOV     SI,7C05              &lt;&lt;&lt;&lt;&lt;&lt; "Disk Packet"
7CD6 C644FF00      MOV     BYTE PTR [SI-01],00
7CDA 6631C0     *  XOR     EAX,EAX

; Save number of heads:
7CDD 88F0          MOV     AL,DH
7CDF 40            INC     AX
7CE0 66894404   *  MOV     [SI+04],EAX
7CE4 31D2          XOR     DX,DX
7CE6 88CA          MOV     DL,CL
7CE8 C1E202     *  SHL     DX,02
7CEB 88E8          MOV     AL,CH
7CED 88F4          MOV     AH,DH

; Save number of cylinders:
7CEF 40            INC     AX
7CF0 894408        MOV     [SI+08],AX
7CF3 31C0          XOR     AX,AX
7CF5 88D0          MOV     AL,DL
7CF7 C0E802     *  SHR     AL,02

; Save number of sectors:
7CFA 668904     *  MOV     [SI],EAX

7CFD 66A1447C   *  MOV     EAX,[<B>7C44</B>]     &lt;&lt;&lt;&lt;&lt;&lt; Location of <B>Stage2</B> code
                                                   from the beginning of
                                               the partition (the offset
                                               is in number of sectors).
7D01 6631D2     *  XOR     EDX,EDX
7D04 66F734     *  DIV     WORD PTR [SI]       ; Double word here.

7D07 88540A        MOV     [SI+0A],DL

7D0A 6631D2     *  XOR     EDX,EDX
7D0D 66F77404   *  DIV     WORD PTR [SI+04]    ; Double word here.

7D11 88540B        MOV     [SI+0B],DL
7D14 89440C        MOV     [SI+0C],AX
7D17 3B4408        CMP     AX,[SI+08]
7D1A 7D3C          <B>JGE</B>     <B><FONT color=#ff0000>7D58</FONT></B>            ; There was a <B>Geometry Error!</B>
7D1C 8A540D        MOV     DL,[SI+0D]

7D1F C0E206     *  SHL     DL,06

7D22 8A4C0A        MOV     CL,[SI+0A]
7D25 FEC1          INC     CL
7D27 08D1          OR      CL,DL
7D29 8A6C0C        MOV     CH,[SI+0C]
7D2C 5A            POP     DX
7D2D 8A740B        MOV     DH,[SI+0B]
7D30 BB0070        MOV     BX,7000
7D33 8EC3          MOV     ES,BX
7D35 31DB          XOR     BX,BX
7D37 B80102        MOV     AX,<B>02</B>01          ; Function 0<B>2</B> of INT13
7D3A CD13          <B>INT     13</B>               ; <B>Read</B> 1 <B>sector into Memory</B>

7D3C 722A          <B>JB</B>      <B><FONT color=#ff0000>7D68</FONT></B>             ; There was a Read Error!

7D3E 8CC3          MOV     BX,ES
<A name=7D40></A><B><FONT color=#006e00>7D40</FONT></B> 8E06487C      MOV     ES,[<B>7C48</B>]        ; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; WORD [<B>0800 </B>hex]
                                            ; <B>Note:</B> <B>800</B>:0000 = 0000:<B>8000</B>
7D44 60         *  PUSHA

7D45 1E            PUSH    DS
7D46 B90001        MOV     CX,0100
7D49 8EDB          MOV     DS,BX
7D4B 31F6          XOR     SI,SI
7D4D 31FF          XOR     DI,DI
7D4F FC            CLD
7D50 F3A5          REP     MOVSW

7D52 1F            POP     DS
7D53 61         *  POPA
<A name=7D54></A>
; This is where we jump to the next stage of the code which GRUB loaded
; from the HDD into Memory locations <B>0000:<FONT color=#006600>8000</FONT></B> hex and following:

<B><FONT color=#006600>7D54</FONT></B> FF26427C      <B><FONT color=#008000>JMP</FONT></B>     [<B>7C42</B>]           ; WORD    &lt;&lt;&lt; <B><FONT color=#006600>8000</FONT></B> hex.
                                            ; "stage2_address".
</PRE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT face="Verdana, Arial, Helvetica, sans-serif"><I>Section for Displaying Error Messages</I></FONT></H2><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><B><FONT color=#ff0000>7D58</FONT></B> BE7C7D        MOV     SI,<B><FONT color=#0000ff>7D7C</FONT></B>         ; --&gt; "<B>Geom Error</B>"
7D5B E84000        <B>CALL</B>    <B><FONT color=#0000cc>7D9E</FONT></B>            ; Display it on screen.
7D5E EB0E          JMP     <B><FONT color=#660000>7D6E</FONT></B>            ; Finish it and 'lock-up'

<B><FONT color=#ff0000>7D60</FONT></B> BE817D        MOV     SI,<B><FONT color=#0000ff>7D81</FONT></B>         ; --&gt; "<B>Hard Disk Error</B>"
7D63 E83800        <B>CALL</B>    <B><FONT color=#0000cc>7D9E</FONT></B>            ; Display it on screen.
7D66 EB06          JMP     <B><FONT color=#660000>7D6E</FONT></B>            ; Finish it and 'lock-up'

<B><FONT color=#ff0000>7D68</FONT></B> BE8B7D        MOV     SI,<B><FONT color=#0000ff>7D8B</FONT></B>         ; --&gt; "<B>Read Error</B>"
7D6B E83000        <B>CALL</B>    <B><FONT color=#0000cc>7D9E</FONT></B>            ; Display it on screen.
<B><FONT color=#660000>7D6E</FONT></B> BE907D        MOV     SI,<B><FONT color=#0000ff>7D90</FONT></B>         ; (For displaying " Error")
7D71 E82A00        <B>CALL</B>    <B><FONT color=#0000cc>7D9E</FONT></B>            ; Finish it and 'lock-up'
<U><B><FONT color=#ff0000>7D74</FONT></B> EBFE          <FONT color=#ff0000><B>JMP     7D74</B></FONT></U>            ; <I><B>Locks-up</B></I><B> execution</B> in an
                                           ; infinite loop<B>!</B>  You <I>must
                                           </I>;   <B>reboot </B>your computer!</PRE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=ErrMsg></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT size=6 face="Times New Roman"><B>Location of the</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel>GRUB &nbsp;</B><B>ID String<BR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN></B><B style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>Error Messages</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>in Memory<BR>(for versions 0.92/0.93)</B></FONT></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">                       <B>  6  </B>7  8  9  A  B  C  D  E  F
<B><FONT color=#0000ff>7D76</FONT></B>                    <B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff>47 52 55 42 20</FONT> <FONT color=#ff0000>00</FONT></B><SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio> 47 65 6F 6D</SPAN>         <B style="BACKGROUND-COLOR: rgb(255,255,204)" class=ltyel><FONT color=#0000ff>GRUB </FONT><FONT color=#ff0000>.</FONT></B><SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>Geom</SPAN>
7D80  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio><FONT color=#ff0000>00</FONT> 48 61 72 64 20 44 69 73 6B <FONT color=#ff0000>00</FONT> 52 65 61 64 <FONT color=#ff0000>00</FONT></SPAN>   <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio><FONT color=#ff0000><B>.</B></FONT>Hard Disk<FONT color=#ff0000><B>.</B></FONT>Read<FONT color=#ff0000><B>.</B></FONT></SPAN>
7D90  <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio>20 45 72 72 6F 72 <FONT color=#ff0000>00</FONT></SPAN>                              <SPAN style="BACKGROUND-COLOR: rgb(204,204,255)" class=vio> Error<FONT color=#ff0000><B>.</B></FONT></SPAN>
       0  1  2  3  4  5<B>  </B>6</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">For versions 0.94/0.95, these characters begin at 7D7<B>B</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead;<BR>for version<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>0.97</B>, they begin at 7D7<B>F</B>.</FONT></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT face="Verdana, Arial, Helvetica, sans-serif"><SPAN style="BACKGROUND-COLOR: rgb(204,255,204)" class=ltgrn><I>Display Characters</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp;Subroutine</SPAN></FONT></H2><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><B><FONT class=clozed>7D97</FONT></B> BB0100        MOV     BX,0001
7D9A B40E          MOV     AH,0<B>E</B>         ; Function 0<B>E</B>h of INT 10h
7D9C CD10          <B>INT     10</B>            ; Display the character

<B><FONT color=#0000cc>7D9E</FONT></B> AC            LODSB
7D9F 3C00          CMP     AL,00
7DA1 75F4          JNZ     <B><FONT class=clozed>7D97</FONT></B>          ; Loop until finding a zero byte.
7DA3 C3            <FONT color=#0000ff><B>RET</B></FONT></PRE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=PT></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT size=6 face="Times New Roman"><B>&nbsp;&nbsp;Location &nbsp;of &nbsp;Sample<BR></B><B style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>Partition Table</B><B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Memory</B></FONT></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">                               <B> </B>                  <B>E</B>  F
<B><FONT color=#0000ff>7DBE</FONT></B>                            <B><FONT color=#cc00cc>                 </FONT></B><SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred><B>80</B> 01</SPAN>   ................
7DC0   <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>01 00 <B>07</B> FE FF 6D 3F 00 00 00 AF 39 D7 00 00 00</SPAN>   .....m?....9....
7DD0   <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>C1 6E <B>0C</B> FE FF FF EE 39 D7 00 BD 86 BB 00 00 FE</SPAN>   .n.....9........
7DE0   <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>FF FF <B>83</B> FE FF FF AB C0 92 01 CD 2F 03 00 00 FE</SPAN>   .........../....
7DF0   <SPAN style="BACKGROUND-COLOR: rgb(255,204,204)" class=ltred>FF FF <B>0F</B> FE FF FF 78 F0 95 01 83 AF CC 00 </SPAN><B style="BACKGROUND-COLOR: rgb(255,255,0)" class=yel>55 AA</B>   ......x.......U.
        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F

</PRE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=linux><BR></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT face="Arial, Helvetica, sans-serif">Interesting Commands for Linux Users<BR>Related to their MBR Sector and GRUB</FONT></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">Some of the following Console commands require you to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>root</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to use them, so unless you're already logged in as 'root' you'll need to use the Console command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>su</B>.<BR><BR>This command will copy the first drive's MBR sector into a new 512-byte file called<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#660000><B>MBRhda.bin</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(in the same directory you run the command from):</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Courier New, Courier, mono"><B><FONT color=#ff00ff>#</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#660000>dd if=/dev/hda of=MBRhda.bin bs=512 count=1</FONT></B></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">If the first drive is SCSI rather than IDE/ATA, replace any occurrence of 'hda' with 'sda' in the command.<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=5>[</FONT>Placing this file on a couple diskettes and learning how to use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>linux rescue</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>system, such as good 'ole "<A href="http://thestarman.pcministry.com/Linux/tomsrtbt.htm" target=rtbt><B>tomsrtbt</B></A>" or the SuSE 9.1 install CD's "rescue" boot, makes it just as easy to<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>restore</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the MBR sector with the command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT size=4 face="Courier New, Courier, mono"><B><FONT color=#ff00ff>#</FONT><FONT color=#660000><SPAN class=Apple-converted-space>&nbsp;</SPAN>dd if=</FONT><FONT size=4 face="Courier New, Courier, mono"><B><FONT color=#660000>MBRhda.bin</FONT></B></FONT><FONT color=#660000><SPAN class=Apple-converted-space>&nbsp;</SPAN>of=/dev/hda bs=512 count=1</FONT></B></FONT><B><SPAN class=Apple-converted-space>&nbsp;</SPAN></B><FONT size=5>].</FONT></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif"><B>If</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>GRUB<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>is</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your MBR, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#660000><B>MBRhda.bin</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be a copy of GRUB's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>code</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>along with that drive's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Partition Table</B>. As a quick check, you could use the command:<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><FONT color=#ff00ff size=3 face="Courier New, Courier, mono"><B><FONT size=4>#</FONT></B></FONT><FONT size=4 face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#0000ff><B><FONT color=#660000>cat MBRhda.bin |grep "GRUB"<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT></B></FONT></FONT><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">to see if the word "GRUB" exists anywhere in the file. If linux outputs: "<B><FONT face="Courier New, Courier, mono">Binary file (standard input) matches</FONT></B>" on the next line, then chances are it's GRUB's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage1</B>. To know for sure, you'd have to check the code against a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>known</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>source. You can view the file similar to the Disk Editor View of GRUB above, by running the command:</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT color=#ff00ff size=3 face="Courier New, Courier, mono"><B><FONT size=4>#</FONT></B></FONT><FONT size=4 face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#0000ff><B><FONT color=#660000>hexdump -Cv MBRhda.bin |less</FONT></B></FONT></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">which allows you to scroll up or down while viewing it; just press the "q" key to quit. The letter "<B><FONT color=#660000>v</FONT></B>" in "<B><FONT color=#660000>-Cv</FONT></B>" means "show every byte" in the file.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">To find out<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>where</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>GRUB's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>code is located, you need to write down the 4-byte (Quad) Word located at offsets 00<B>44</B>h-00<B>47</B>h in the file, or open<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><FONT size=4 face="Courier New, Courier, mono"><FONT color=#0000ff><B><FONT color=#660000>MBRhda.bin<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT></B></FONT></FONT><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">in that nice GUI Hex Editor,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>KHexEdit</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>KDE</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which will do the necessary<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>decimal conversion</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>for you too):</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><IMG src="http://thestarman.pcministry.com/asm/mbr/KHexEdit.gif" width=632 height=358><BR><B><FONT size=3 face="Arial, Helvetica, sans-serif">Note:<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>highlighted background colors</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>added.</FONT></B></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">If we didn't have KHexEdit, we'd use a calculator program to convert the Quad Hex word 01934335h to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>26428213</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>decimal.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>NOTE</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>that<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>your own GRUB MBR</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN><I><B>will have a different number here!</B></I><SPAN class=Apple-converted-space>&nbsp;</SPAN>Once again, this is the Absolute Sector location where GRUB's<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>code begins. If you ever move a Linux partition with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Courier New, Courier, mono">/boot/grub</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>directory, such as resizing it or just replacing the files in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Courier New, Courier, mono">grub</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>directory, GRUB cannot function correctly until you change these four bytes to point to the new location of its stage2 code! (This is the main reason all Linux installs should ask you to create a boot diskette with GRUB on it, so you can run the GRUB install program from the diskette to correct these<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>hard-coded</I>values if necessar; otherwise, you'd have to manually perform the calculations and edit your MBR sector as we're doing here.) To confirm that you've got the correct number, substitute your own<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>sector number</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the "<B><FONT color=#660000>skip</FONT></B>" value in this command:</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Courier New, Courier, mono"><B><FONT color=#ff00ff>#</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#660000>dd if=/dev/hda of=stage2-1s.bin bs=512 skip=<FONT color=#ff0000>26428213</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>count=1</FONT></B></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">This means that 'dd' will<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>skip</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#ff0000>26,428,213</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>512-byte sectors</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<B><FONT color=#660000>bs=512</FONT></B>) from the beginning of the hard drive, before it copies the next sector into the new file "stage2-1s.bin"<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>(</B>just the first sector [<B><FONT color=#660000>count=1</FONT></B>]; the whole<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>stage2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>file on our system would require 259 sectors<B>)</B>. If you believe that you've copied the correct sector on your own HDD, then take a look at it with this familiar command:</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT color=#ff00ff size=3 face="Courier New, Courier, mono"><B><FONT size=4>#</FONT></B></FONT><FONT size=4 face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=#0000ff><B><FONT color=#660000>hexdump -C stage2-1s.bin |less</FONT></B></FONT></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">You can view our example<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Courier New, Courier, mono">hexdump</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>screen output<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/hexdump.htm" target=s21><B>here</B></A>.</FONT></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif"><I>Last Update:</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>26 September 2008. (26.09.2008)<BR><FONT size=5><I>Updated:<SPAN class=Apple-converted-space>&nbsp;</SPAN></I><B>17 October 2009</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(17.10.2009).</FONT></FONT>