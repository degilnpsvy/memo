<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT size=7><B>Removing the Mystery from<BR>SEGMENT : OFFSET<BR>Addressing</B></FONT><BR><BR><FONT size=4 face="Verdana, Arial, Helvetica, sans-serif">Copyright&#169;2001, 2007 by Daniel B. Sedory</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><BR><FONT color=#cc0000 size=4 face=Arial><B><FONT color=#0000ff>This page may be freely copied for PERSONAL use ONLY !</FONT><BR>( It may NOT be used for ANY other purpose unless you have<BR>first<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/Feedback.html" target=FB>contacted</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and received permission from the author! )</B></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Times>For information on using MS-<B>DEBUG</B>, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/debug.htm"><B>A Guide to DEBUG</B></A>.</FONT></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">

<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4>
<LI><B>Section 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#INTRO">Introduction, Definitions and Statistics</A></B><BR><BR></LI>
<LI><B>Section 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#VIZ">Vizualizing the Overlapping Segments</A></B><BR></LI>
<UL>
<LI><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#UMA">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Upper</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Memory Area (<B>UMA</B>)</A><BR></LI>
<LI><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#HMA">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>High</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Memory Area (<B>HMA</B>)</A><BR><BR></LI></UL>
<LI><B>Section 3.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#NORM"><I>Normalized</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>Segment:Offset Notation<BR><BR></A></B></LI>
<LI><B>Section 4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#PROB">Problems when Segment Register Values are not considered !</A></B></LI></FONT></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=3>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=INTRO></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=5><B>Introduction.</B></FONT><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>There are often many different Segment:Offset pairs which can be used to address the same location in your computer's memory. This scheme is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>relative way</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of viewing computer memory as opposed to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>Linear</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>Absolute</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>addressing scheme. When an Absolute addressing scheme is used, each memory location has its own<I>unique</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>designation; which is a much easier way for<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>people</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>to view things. So, why did anyone ever create this awkward "Segment:Offset scheme" for dealing with computer memory? As an answer, here's a brief lesson on the 8086 CPU with an<I><SPAN class=Apple-converted-space>&nbsp;</SPAN>historical slant:</I><BR><A name=R1><BR></A>Segment:Offset addressing was introduced at a time when the largest register in a CPU was only 16-<I>bits</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>long which meant it could address only 65,536 bytes (64 KiB<SUP><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#N1">[<B>1</B>]</A></SUP>) of memory, directly. But everyone was hungry for a way to run much larger programs! Rather than create a CPU with larger register sizes (as some CPU manufacturers had done), the designers at Intel decided to keep the 16-bit registers for their new 8086 CPU and added a different way to access more memory: They expanded the instruction set, so programs could tell the CPU to<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>group</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp;two 16-bit registers together whenever they needed to refer to an Absolute memory location beyond 64 KiB.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><A name=#R2><BR></A><FONT face=Verdana>I</FONT>f the designers had allowed the CPU to combine two registers into a high and low pair of 32-bits, it could have referenced up to 4 GiB<SUP><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#N2">[<B>2</B>]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>of memory in a linear fashion! Keep in mind, however, this was at a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=#R3>time</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>when many never dreamed we'd need a PC with more than 640 KiB of memory for user applications and data!<SUP><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#N3">[<B>3</B>]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>So, instead of dealing with whatever problems a linear addressing scheme of 32-bits would have produced, they created the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=#R4>Segment:Offset</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>scheme which allows a CPU to effectively address about 1 MiB of memory.<SUP><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#N4">[<B>4</B>]</A></SUP><BR><BR>The scheme works like this: The value in any register considered to be a Segment register is multiplied by 16 (or shifted one hexadecimal byte to the left; add an extra 0 to the end of the hex number) and then the value in an Offset register is added to it. So, the Absolute address for any combination of Segment and Offset pairs is found by using the formula:<BR><BR></FONT></P><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=4 face=Arial>
<TABLE border=2 cellSpacing=2 cellPadding=7 width="100%">
<TBODY>
<TR>
<TD bgColor=#ddffdd>
<CENTER>
<TABLE border=0>
<TBODY>
<TR>
<TD>
<P align=right><FONT size=4 face="Courier New"><B>Absolute &nbsp;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>Memory &nbsp;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>Location &nbsp;</B></FONT></P></TD>
<TD>
<P align=center><FONT size=4 face="Courier New"><B>= (Segment value * 16) + Offset value</B></FONT></P></TD></TR></TBODY></TABLE></CENTER></TD></TR></TBODY></TABLE><BR>After working through some examples, this will become much clearer to understand: The Absolute or Linear address for the Segment:Offset pair,<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>F000:FFFD</B><SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT>can be computed quite easily in your mind by simply inserting a zero at the end of the Segment value ( which is the same as multiplying by 16 ) and then adding the Offset value:</FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><PRE><FONT size=5 face="Courier &#10;New"><B>            F000<FONT color=blue>0</FONT>
           + FFFD
           ------
            FFFFD  or  1,048,573</B></FONT>(decimal)

<FONT size=5 face="Courier New"><B>Here's another example: 923F:E2FF -&gt;

            923F<FONT color=blue>0</FONT>
           + E2FF
           ------
            A06EF   or   657,135</B></FONT>(decimal)</PRE></UL><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=4 face=Arial>Now let's compute the Absolute Memory location for<SPAN style="BACKGROUND-COLOR: rgb(255,255,0)"><SPAN class=Apple-converted-space>&nbsp;</SPAN>the largest value that can be expressed using a Segment:Offset reference:</SPAN></FONT>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><PRE><FONT size=5 face="Courier New"><B>            FFFF<FONT color=blue>0</FONT>
          +  FFFF   
          -------
          <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"> 10FFEF </SPAN> or <SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"> 1,114,095 </SPAN></B></FONT>(decimal)
</PRE></UL><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=4 face=Arial>In reality, it wasn't until quite some time after the 8086, that such a large value actually corresponded to a real Memory location. Once it became common for PCs to have over 1MiB of memory, programmers developed ways to use it to their advantage and this last byte became part of what's now called the HMA (High Memory Area). But until that time, if a program tried to use a Segment:Offset pair that exceeded a 20-bit Absolute address (1MiB), the CPU would<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>truncate</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the highest bit (an 8086/8088<SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=#R5>CPU</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>has only 20 address lines), effectively<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>mapping</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>any value over<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>FFFFF</B>h (1,048,575) to an address within the first Segment. Thus, 10FFEFh was mapped to FFEFh.<SUP><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#N5">[<B>5</B>]</A></SUP><BR><BR>One of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>downsides</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in using Segment:Offset pairs (and likely what confuses most of you) is the fact that a large number of these<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>pairs</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to the same exact memory locations. For example, every Segment:Offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>pair</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>below, refers to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>exactly the same location</I><SPAN class=Apple-converted-space>&nbsp;</SPAN></B>in memory:<BR><BR></FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center>
<TBODY>
<TR>
<TD bgColor=#c0dfff>
<P align=center></P><PRE><B>
  0007:7B90   0008:7B80   0009:7B70   000A:7B60   000B:7B50   000C:7B40   

  0047:7790   0048:7780   0049:7770   004A:7760   004B:7750   004C:7740   

  0077:7490   0078:7480   0079:7470   007A:7460   007B:7450   007C:7440   

  01FF:5C10   0200:5C00   0201:5BF0   0202:5BE0   0203:5BD0   0204:5BC0   

  07BB:0050   07BC:0040   07BD:0030   07BE:0020   07BF:0010   07C0:0000   
</B></PRE></TD></TR>
<TR></TR>
<TR>
<TD><FONT size=3 face="Verdana, Arial, Helvetica, sans-serif"><B>The Segment:Offset pairs listed above are only some of the many<BR>ways one can refer to the single Absolute Memory location of:<BR><FONT size=4>7C00</FONT></B><FONT size=4>h (or 0000:7C00)</FONT>.</FONT></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>As a matter of fact there<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>may be</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>up to<SPAN style="BACKGROUND-COLOR: rgb(255,255,0)"><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>4,096</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>different Segment:Offset pairs for addressing a single byte in Memory; depending upon its particular location.<SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"><SPAN class=Apple-converted-space>&nbsp;</SPAN>For Absolute addresses<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>0</B></FONT>h through<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>FFEF</B></FONT>h ( 0 through 65,519 )</SPAN>, the number of different pairs can be computed as follows:<SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Divide the Absolute address by 16 ( which shifts all the hex digits one place to the right ), then<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>throw away</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>any fractional remainder and add 1. This is the same thing as saying: Add 1 to the Segment number if the Offset is 000Fh (15) or less.<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>For example, the byte in memory referenced by the Segment:Offset pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>0040:0000</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a total of 41h (or 65) different pairs that might be used. For the Absolute address<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>7C00</B>h</FONT>, which was mentioned above, there's a total of:<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>7C00 / 10h --&gt; 7C0 + 1 = 7C1 (or 1,985)</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>relative</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>ways to address this same memory location using Segment:Offset pairs.<SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"><SPAN class=Apple-converted-space>&nbsp;</SPAN>For the Absolute addresses from<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>FFF0</B></FONT>h (65,520) all the way through<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>FFFFF</B></FONT>h (1,048,575), there will always be<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face=Verdana>4,096</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>Segment:Offset pairs</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>one could use to refer to these addresses!</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>That's a little over<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>88%</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the memory that can be accessed using Segment:Offsets. The last 65,520 bytes that can be accessed by this method are collectively called the High Memory Area (HMA).<SPAN style="BACKGROUND-COLOR: rgb(255,255,204)"><SPAN class=Apple-converted-space>&nbsp;</SPAN>For each 16 bytes higher in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>HMA</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>that we point to, there is one less Segment:Offset pair available to reference that paragraph.&nbsp;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><BR>Due to the sheer number of possible Segment:Offset pairs for each address, most programmers have agreed to use the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>normalization method</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see the note below on<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#NORM">Normalized Notation</A>) when writing about a particular location in Memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><BR>We've created some graphic illustrations to help you picture the boundaries between various areas of Memory:</FONT><BR><FONT size=4 face=Arial><A name=VIZ></A></FONT><BR></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=7><B>Visualizing the Overlapping Segments</B></FONT></CENTER><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=5 face=Arial><B>The following illustrations should help students<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>visualize the artificial layout</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the Segment boundaries in a system's Memory.</B></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR></P><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=4 face=Arial>SEGMENTS are more like a mental construct or a way of visualizing a computer's Memory, rather than being closely tied to the physical hardware itself. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Figure 0</B>, we've tried to show how each<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Segment</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of 65,536 bytes<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><B>overlaps</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>most of</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp;the preceding Segment. As you can see, each Segment begins only 16 bytes (or a paragraph) after the preceding one. In computer terminology,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="BACKGROUND-COLOR: rgb(255,255,204)">a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>paragraph</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to refer to 16 consecutive bytes of Memory</SPAN>. For every 16 bytes higher in Memory that we point to, the number of overlapping Segments will increase by one<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>until</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>we arrive at the end of the first Segment. At that point, each successive paragraph of Memory (up to 1MiB) has a constant number of 4,096 overlapping Segments! Figure 0 also shows the Segment:Offset values for each of the four<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>corners</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the first five of Segments.</FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><IMG src="http://thestarman.pcministry.com/asm/debug/Figure0.gif" width=466 height=380></CENTER>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>In Figure 1 (see below), the focus is on just the beginning of Segments 1, 2, 3 and so on, rather than the whole Segment. Notice how the first 16 bytes of memory appear in the Figure. There's only one segment there:<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>no other segments overlap</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>these bytes. Therefore, the Segment:Offset pairs for each of the first 16 bytes in memory is actually unique! There's only one way to refer to them: with the Segment value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>0000:</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and one of the 16 Offsets, 0000 through 000F hex. The next 16 bytes in memory (10h through 1Fh) will each have precisely<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>two</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>different Segment:Offset pairs that can be used to address them. For each of the first five Segments, the exact number of equivalent Segment:Offset pairs for the last byte in the paragraph has been shown in the aqua (light-blue) colored boxes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><BR>(For comments on the part of Figure 1 under the BLUE line, see text below.)</FONT></P>
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><IMG src="http://thestarman.pcministry.com/asm/debug/Figure1.gif" width=466 height=380></CENTER>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>The second part of Figure 1 above, shows what happens at the transition from a paragraph of memory that is still within the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>boundary</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the first 64kb Segment (Absolute addresses FFF0h through FFFFh) to those paragraphs which are beyond its boundary (10000h and following). Note that the first paragraph of Segment 0FFF: (which is the same as the last 16 bytes within Segment 0000:) is the first paragraph in Memory to have a total of 4,096 different Segment:Offset pairs that could be used to reference its bytes.</FONT></P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=UMA></A><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>Figure 2 shows that<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>9000</FONT>:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the last whole 64kb segment to lie within the bounds of what's called "<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Conventional Memory</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>" ( the first 640kb or 655,360 bytes). The first paragraph of<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>A000</FONT>:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the beginning of the Upper Memory Area (<B>UMA</B>). The UMA contains a total of 384kb or 393,216 bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Segment<FONT face=Verdana>F000</FONT>:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the last whole segment that lies within the bounds of the UMA.</FONT></P>
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><IMG src="http://thestarman.pcministry.com/asm/debug/Figure2.gif" width=466 height=366></CENTER>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center><FONT size=5 face=Arial>640 KiB + 384 KiB = 1024 KiB (or 1,048,576 bytes) = 1 Mebibyte.<BR></FONT><FONT face="Comic Sans MS">(A long time ago, the UMA was called the 'Reserved Area.')</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>Another way of looking at the first 1MiB of Memory (and hopefully something that will help those who might still be a bit confused ) is the fact that each of these 1,048,576 bytes can be accessed by using one of just the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>16 Segment</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>references (<B><SPAN class=Apple-converted-space>&nbsp;</SPAN>none of which overlap</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>any of the others):<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>0000:</B></FONT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>1000:</B></FONT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>2000:</B></FONT>, ...<FONT face=Verdana><B>9000:</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>A000:</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>through<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>F000:</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus one of their 65,536 Offsets. Although it would really be nice if we could always refer to a particular byte in Memory using just these 16 Segments, that would be rather wasteful of memory resources: When it comes time for an OS like Windows to assign a full 64kb of free memory to an App such as DEBUG, it's not simply a matter of convenience for it to use the very first 16-byte Segment reference of continuous memory that it can find. Moving up to the next even<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>1000</FONT>h Segment would leave even more unused<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>holes</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Memory than there are already! (There is, however, an agreed upon convention called<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/Segments.html#NORM">Normalized Addressing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>which has been very helpful.)</FONT></P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HMA></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>Figure 3 shows the end of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>UMA</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the beginning of the last Segment (<B>Segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>FFFF</FONT>:</B>) in the Segment:Offset scheme. When the 8086 was first created, there wasn't even 640kb of memory in most PCs. And as you might recall from our history lesson above, addresses in this part of the Segment:Offset scheme were first<I>mapped</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>to bytes in Segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>0000</FONT>. Later, the memory above 1MiB that could still be accessed using Segment:Offset pairs became known as The High Memory Area (<B>HMA</B>).</FONT></P>
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><IMG src="http://thestarman.pcministry.com/asm/debug/Figure3.gif" width=466 height=316></CENTER>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>The High Memory Area (<B>HMA</B>) contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>only</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>one paragraph short</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of 64kb (or just 65,520 bytes).<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana>FFFF</FONT>:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the only segment that can<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>reach</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the last 16 bytes of the HMA. Here's a text file of a boring<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/debug/HMAtable.htm">Table of HMA Segment:Offset pairs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>which shows how the number of pairs decreases to only one for the last 16 bytes of the HMA.</FONT></P>
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><IMG src="http://thestarman.pcministry.com/asm/debug/Figure4.gif" width=466 height=208></CENTER><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=NORM><BR></A>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<CENTER style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=6><B><I>Normalized</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>Segment:Offset Notation</B></FONT></CENTER><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>Since there are so many different ways that a single byte in Memory might be referenced using Segment:Offset pairs, most programmers have agreed to use the same convention to<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>normalize</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>all such pairs into values that will always be<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>unique</I></B>. These unique pairs are called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Normalized Address</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>Pointer</B>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><BR>By confining the Offset to just the Hex values<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>0</B></FONT>h through<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>F</B></FONT>h (16 hex digits); or a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>paragraph</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>and setting the Segment value accordingly, we have a unique way to reference all Segment:Offset Memory pair locations. To convert an arbitrary Segment:Offset pair into a normalized address or pointer is a two-step process that's quite easy for an assembly programmer:</FONT></P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>
<LI>Convert the pairs into a single physical (linear) address.</LI>
<LI>Then simply insert the colon (:) between the last two hex digits!<BR></LI></FONT></OL><FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=4 face=Arial></FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>For example, in order to<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>normalize</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face=Verdana><B>1000:1B0F</B></FONT>, the steps are:</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial><FONT size=5>&nbsp;<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1000:1B0F</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/asm/debug/rtar.gif" width=33 height=15><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=blue><B>11B0F</B></FONT>h<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/asm/debug/rtar.gif" width=33 height=15><SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=green><B>11B0:F</B></FONT></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or 11B0:000F)<BR><BR>Since the normalized form will always have three leading zero bytes in its Offset, programmers often write it with just the digit that counts as shown here:<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT color=green face=Verdana><B>11B0:F</B></FONT>(when you see an address like this, it's almost a sure sign that the author is using this<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>normalized</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>notation).</FONT></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=PROB></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT face="Arial, Helvetica, sans-serif">How Segment:Offset notation can lead to Problems</FONT></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT size=4 face=Arial>The normalized notation for the first byte where all PC BIOS must place a floppy diskette's boot strap code is:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT color=green face="Verdana, Arial, Helvetica, sans-serif">07C0:0</FONT></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or 07C0:0000). A big problem for some PC manufacturers came about when some BIOS writer<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>assumed</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>that there'd be nothing wrong with<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>jumping to</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>the bootstrap code at that particular Segment:Offset pair,<I>since</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>it's the same memory location as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT size=5>0000:7C00</FONT></B>.<BR>Somehow they never took into consideration the fact that the standard used by everyone else always set the SEGMENT values to ZERO. Therefore, a bootstrap code programmer could assume all Segment values (Code, Data, etc.) were zero and only have to deal with the Offset values in that Segment. Along comes this BIOS chip clone that sets the Code Segment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>07C0</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(using a JMP 07C0:000 instruction), and suddenly there was a big problem getting most OS bootstrap code (including Microsoft&#174; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT face="Verdana, Arial, Helvetica, sans-serif">I</FONT>BM&#174; OSs) to boot up in these computers! This is why some bootstrap code, such as that in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/mbr/GRUB.htm" target=GM>GRUB</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Boot Manager, will add extra instructions to make sure the Segment Registers have been set correctly! One of the authors of GRUB comments that his Long Jump code was necessary "because some<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>bogus</I></B>BIOSes jump to 07C0:0000 instead of 0000:7C00."</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=FN>&nbsp;</A></P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<FONT style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" size=5 face="Verdana, Arial, Helvetica, sans-serif"><B>Footnotes</B></FONT><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=N1><SUP><FONT size=4 face=Verdana><B>1</B></FONT></SUP></A><FONT size=3 face="Arial, Helvetica, sans-serif">[<A href="http://thestarman.pcministry.com/asm/debug/Segments.html#R1">Return to Text</A>]<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>KiB<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>is the abbreviation for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>kibibyte<SPAN class=Apple-converted-space>&nbsp;</SPAN></I></B>(a contraction of<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>ki</B>lo<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>bi</B>nary<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>byte</B>) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>binary</I></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>kilobyte. It is equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>10</B>th power (2^10) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1024</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. Likewise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>MiB<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>mebibyte</I></B>(<B>me</B>ga<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>bi</B>nary<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>byte</B>); equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>20</B>th power (2^20) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1,048,576</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>GiB<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>gibibyte<SPAN class=Apple-converted-space>&nbsp;</SPAN></I></B>(<B>gi</B>ga<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>bi</B>nary<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>byte</B>); equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>30</B>th power (2^30) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1,073,741,824</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. In this document, which refers to memory in early IBM PCs (and the Intel 8086 and 80286 CPUs), we may at times refer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>kibibytes<SPAN class=Apple-converted-space>&nbsp;</SPAN></I></B>using the abbreviation "<B>kb</B>" instead of KiB. (It is taking a long time for "kibi-", "mebi-" and "gibi-" to be recognized by techs and computer sales departments as the proper way to refer to memory ; even though they have been in official standards organizations for many years. See, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif" width=33 height=11><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://physics.nist.gov/cuu/Units/binary.html" target=nist>NIST: Prefixes for binary multiples</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif" width=33 height=11><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://physics.nist.gov/cuu/Units/binary.html" target=nist></A><A href="http://en.wikipedia.org/wiki/Binary_prefix#Adoption_by_IEC_and_NIST" target=wiki>Adoption by IEC and NIST</A>.)<BR><BR><B>64 KiB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>2</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>16</B>th power<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>[</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(2^16)<B><SPAN class=Apple-converted-space>&nbsp;</SPAN>=</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(2^10) x (2^6)<B><SPAN class=Apple-converted-space>&nbsp;</SPAN>=</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(1024) x (64)<B><SPAN class=Apple-converted-space>&nbsp;</SPAN>=</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>65,536<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>]<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>bytes, and each of the two-byte (or 16-bit) registers in an 8086 CPU can<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>contain<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>a maximum value of:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1111 1111 1111 1111</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>in binary or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>FFFF</B>h (hexadecimal). In decimal, that's<B>:<SPAN class=Apple-converted-space>&nbsp;</SPAN></B><FONT face="Courier New, Courier, mono"><B>[</B>(15 x 16^<B>3</B>) + (15 x 16^<B>2</B>) + (15 x 16^<B>1</B>) + 15<B>]</B><SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><B>=</B><FONT face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>[</B>(15 x<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>4096</B>) + (15 x<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>256</B>) + (15 x<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>16</B>) + 15<B>]</B><SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><B>=</B><FONT face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN>61,440 + 3,840 + 240 + 15<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><B>=</B><FONT face="Courier New, Courier, mono"><SPAN class=Apple-converted-space>&nbsp;</SPAN>65,535.</FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>However, since memory always begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>zero</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<B><FONT face="Courier New, Courier, mono">0</FONT></B>) as its first location, that gives us 65,535 + 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>=</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>65,536</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or,<FONT face="Courier New, Courier, mono">16^<B>4</B></FONT>) memory locations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>65,536</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>divided by 1024 per KiB =<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>64 KiB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of memory. For more on the use of Hexadecimal in computers, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://thestarman.pcministry.com/asm/hexawhat.html" target=hex>What Is "Hexadecimal"?</A></FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=N2><SUP><FONT size=4 face=Verdana><B>2</B></FONT></SUP></A><FONT size=3 face="Arial, Helvetica, sans-serif">[<A href="http://thestarman.pcministry.com/asm/debug/Segments.html#R2">Return to Text</A>] This is<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><I>4 gibibytes<SPAN class=Apple-converted-space>&nbsp;</SPAN></I></B>(see Footnote #1) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>4<SPAN class=Apple-converted-space>&nbsp;</SPAN></B>times (2^<B>30</B>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>=</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>4,294,967,296 bytes.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=N3><SUP><FONT size=4 face=Verdana><B>3</B></FONT></SUP></A><FONT size=3 face="Arial, Helvetica, sans-serif">[<A href="http://thestarman.pcministry.com/asm/debug/Segments.html#R3">Return to Text</A>] We've often heard that Bill Gates said something to the effect:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><FONT face="Verdana, Arial, Helvetica, sans-serif">&#8216;</FONT></B>640K of memory should be enough for anyone.<FONT face="Verdana, Arial, Helvetica, sans-serif"><B>&#8217;</B></FONT><SPAN class=Apple-converted-space>&nbsp;</SPAN>Though many of us no longer believe he ever said those exact words (and he has finally made some public denials concerning this), he did, however, during a video interview with David Allison in 1993 for the National Museum of American History, Smithsonian Institution, say:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>"</B><FONT face="Times New Roman, Times, serif">I laid out memory so the bottom 640K was general purpose RAM and the upper 384 I reserved for video and ROM, and things like that. That is why they talk about the 640K limit. It is actually a limit, not of the software, in any way, shape, or form, it is the limit of the microprocessor. That thing generates addresses, 20-bits addresses, that only can address a megabyte of memory. And, therefore, all the applications are tied to that limit. It was ten times what we had before. But to my surprise, we ran out of that address base for applications within -- oh five or six years people were complaining.</FONT><B>"</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(from<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif" width=33 height=11><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://physics.nist.gov/cuu/Units/binary.html" target=nist></A><A href="http://americanhistory.si.edu/collections/comphist/gates.htm" target=vidint>a transcript of the interview</A>, under the "Microsoft and the Mouse" section). For a bit more info, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif" width=33 height=11><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://physics.nist.gov/cuu/Units/binary.html" target=nist></A><A href="http://americanhistory.si.edu/collections/comphist/gates.htm" target=vidint></A><A href="http://tickletux.wordpress.com/2007/02/20/did-bill-gates-say-the-640k-line/" target=didhe>Did Bill Gates say the 640k line?</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and perhaps of more interest to others, here are some<SPAN class=Apple-converted-space>&nbsp;</SPAN><IMG src="http://thestarman.pcministry.com/img/offsite.gif" width=33 height=11><A href="http://physics.nist.gov/cuu/Units/binary.html" target=nist></A><A href="http://en.wikiquote.org/wiki/Bill_Gates" target=bgquotes>verifiable quotes from Mr. Gates</A>.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=N4><SUP><FONT size=4 face=Verdana><B>4</B></FONT></SUP></A><FONT size=3 face="Arial, Helvetica, sans-serif">[<A href="http://thestarman.pcministry.com/asm/debug/Segments.html#R4">Return to Text</A>]<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1 MiB</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of memory is<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>1,048,576</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes (2^<B>20</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes), but the Segment:Offset addressing scheme actually allows one to access up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>10FFEF</B>h,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>plus one,</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of memory, or<B>1,114,096</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. We'll have more to say about this and the HMA (High Memory Area) shortly.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=N5><SUP><FONT size=4 face=Verdana><B>5</B></FONT></SUP></A><FONT size=3 face="Arial, Helvetica, sans-serif">[<A href="http://thestarman.pcministry.com/asm/debug/Segments.html#R5">Return to Text</A>] As we said above, until an IBM PC (or clone) actually had more than 1MiB of memory, it was expedient for the early IBM PCs to effectively<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>wrap-around<SPAN class=Apple-converted-space>&nbsp;</SPAN></I>to the beginning of memory whenever programs tried to access an address past<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>FFFFF</B>h bytes.<BR></FONT><FONT size=3 face="Arial, Helvetica, sans-serif">[Sorry, this<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>FOOTNOTE IS STILL UNDER CONSTRUCTION!</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>It will soon have some links about the IBM PC<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>AT</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>model's keyboard and the infamous<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>A20</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>line!]</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR><FONT size=5 face=Verdana><I>Last Revised:</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>15 OCT 2007</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(15.10.2007).</FONT>