<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Miscellaneous-Macros.top_of_page></A>Miscellaneous Macros</SPAN></H2>
<P>Miscellaneous Macros &#8212; specialized macros which are not used often</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_VA_COPY() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-VA-COPY:CAPS">G_VA_COPY</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STRINGIFY() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRINGIFY:CAPS">G_STRINGIFY</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_PASTE() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-PASTE:CAPS">G_PASTE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_ASSERT() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT:CAPS">G_STATIC_ASSERT</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STATIC_ASSERT_EXPR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT-EXPR:CAPS">G_STATIC_ASSERT_EXPR</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_ALLOC_SIZE() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-ALLOC-SIZE:CAPS">G_GNUC_ALLOC_SIZE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_ALLOC_SIZE2() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-ALLOC-SIZE2:CAPS">G_GNUC_ALLOC_SIZE2</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_DEPRECATED_FOR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED-FOR:CAPS">G_GNUC_DEPRECATED_FOR</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_PRINTF() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-PRINTF:CAPS">G_GNUC_PRINTF</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_SCANF() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-SCANF:CAPS">G_GNUC_SCANF</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_FORMAT() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-FORMAT:CAPS">G_GNUC_FORMAT</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_DEPRECATED_FOR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-DEPRECATED-FOR:CAPS">G_DEPRECATED_FOR</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_UNAVAILABLE() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-UNAVAILABLE:CAPS">G_UNAVAILABLE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_LIKELY() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-LIKELY:CAPS">G_LIKELY</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_UNLIKELY() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-UNLIKELY:CAPS">G_UNLIKELY</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STRFUNC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRFUNC:CAPS">G_STRFUNC</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_INLINE_FUNC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-INLINE-FUNC:CAPS">G_INLINE_FUNC</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STMT_START href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STMT-START:CAPS">G_STMT_START</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STMT_END href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STMT-END:CAPS">G_STMT_END</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_BEGIN_DECLS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-BEGIN-DECLS:CAPS">G_BEGIN_DECLS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_END_DECLS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-END-DECLS:CAPS">G_END_DECLS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_EXTENSION href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-EXTENSION:CAPS">G_GNUC_EXTENSION</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_CONST href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-CONST:CAPS">G_GNUC_CONST</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_PURE href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-PURE:CAPS">G_GNUC_PURE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_MALLOC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-MALLOC:CAPS">G_GNUC_MALLOC</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED:CAPS">G_GNUC_DEPRECATED</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_BEGIN_IGNORE_DEPRECATIONS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-BEGIN-IGNORE-DEPRECATIONS:CAPS">G_GNUC_BEGIN_IGNORE_DEPRECATIONS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_END_IGNORE_DEPRECATIONS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-END-IGNORE-DEPRECATIONS:CAPS">G_GNUC_END_IGNORE_DEPRECATIONS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_NORETURN href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-NORETURN:CAPS">G_GNUC_NORETURN</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_UNUSED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-UNUSED:CAPS">G_GNUC_UNUSED</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_NULL_TERMINATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-NULL-TERMINATED:CAPS">G_GNUC_NULL_TERMINATED</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_WARN_UNUSED_RESULT href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-WARN-UNUSED-RESULT:CAPS">G_GNUC_WARN_UNUSED_RESULT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_FUNCTION href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-FUNCTION:CAPS">G_GNUC_FUNCTION</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_PRETTY_FUNCTION href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-PRETTY-FUNCTION:CAPS">G_GNUC_PRETTY_FUNCTION</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_NO_INSTRUMENT href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-NO-INSTRUMENT:CAPS">G_GNUC_NO_INSTRUMENT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_HAVE_GNUC_VISIBILITY href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-HAVE-GNUC-VISIBILITY:CAPS">G_HAVE_GNUC_VISIBILITY</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_INTERNAL href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-INTERNAL:CAPS">G_GNUC_INTERNAL</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_GNUC_MAY_ALIAS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-MAY-ALIAS:CAPS">G_GNUC_MAY_ALIAS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-DEPRECATED:CAPS">G_DEPRECATED</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STRLOC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRLOC:CAPS">G_STRLOC</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.description></A>
<H2>Description</H2>
<P>These macros provide more specialized features which are not needed so often by application programmers.</P></DIV>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=G-VA-COPY:CAPS></A>
<H3>G_VA_COPY()</H3><PRE class=programlisting>#define             G_VA_COPY(ap1,ap2)</PRE>
<P>Portable way to copy va_list variables.</P>
<P>In order to use this function, you must include string.h yourself, because this macro may use <CODE class=function>memmove()</CODE> and GLib does not include string.h for you.</P>
<DIV class=refsect3><A name=id-1.3.8.7.2.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>ap1</P></TD>
<TD class=parameter_description>
<P>the va_list variable to place a copy of <EM class=parameter><CODE>ap2</CODE></EM> in</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>ap2</P></TD>
<TD class=parameter_description>
<P>a va_list</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STRINGIFY:CAPS></A>
<H3>G_STRINGIFY()</H3><PRE class=programlisting>#define G_STRINGIFY(macro_or_string)&nbsp;G_STRINGIFY_ARG (macro_or_string)
</PRE>
<P>Accepts a macro or a string and converts it into a string after preprocessor argument expansion. For example, the following code:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#define AGE 27</SPAN>
<SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>greeting <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRINGIFY:CAPS">G_STRINGIFY</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>AGE<SPAN class="gtkdoc opt">)</SPAN> <SPAN class=string>" today!"</SPAN><SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>is transformed by the preprocessor into (code equivalent to):</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>greeting <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=string>"27 today!"</SPAN><SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.3.10></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>macro_or_string</P></TD>
<TD class=parameter_description>
<P>a macro or a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-PASTE:CAPS></A>
<H3>G_PASTE()</H3><PRE class=programlisting>#define G_PASTE(identifier1,identifier2)      G_PASTE_ARGS (identifier1, identifier2)
</PRE>
<P>Yields a new preprocessor pasted identifier <EM class=parameter><CODE>identifier1identifier2</CODE></EM> from its expanded arguments <EM class=parameter><CODE>identifier1</CODE></EM> and <EM class=parameter><CODE>identifier2</CODE></EM> . For example, the following code:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#define GET(traveller,method) G_PASTE(traveller_get_, method) (traveller)</SPAN>
<SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>name <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>GET</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">,</SPAN> name<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>quest <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>GET</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">,</SPAN> quest<SPAN class="gtkdoc opt">);</SPAN>
GdkColor <SPAN class="gtkdoc opt">*</SPAN>favourite <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>GET</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">,</SPAN> favourite_colour<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>is transformed by the preprocessor into:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>name <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>traveller_get_name</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">const</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>quest <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>traveller_get_quest</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">);</SPAN>
GdkColor <SPAN class="gtkdoc opt">*</SPAN>favourite <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>traveller_get_favourite_colour</SPAN> <SPAN class="gtkdoc opt">(</SPAN>traveller<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.4.10></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>identifier1</P></TD>
<TD class=parameter_description>
<P>an identifier</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>identifier2</P></TD>
<TD class=parameter_description>
<P>an identifier</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.20</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-ASSERT:CAPS></A>
<H3>G_STATIC_ASSERT()</H3><PRE class=programlisting>#define G_STATIC_ASSERT(expr) typedef char G_PASTE (_GStaticAssertCompileTimeAssertion_, __COUNTER__)[(expr) ? 1 : -1] G_GNUC_UNUSED
</PRE>
<P>The <A class=link title=G_STATIC_ASSERT() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT:CAPS"><CODE class=function>G_STATIC_ASSERT()</CODE></A> macro lets the programmer check a condition at compile time, the condition needs to be compile time computable. The macro can be used in any place where a typedef is valid.</P>
<P>A typedef is generally allowed in exactly the same places that a variable declaration is allowed. For this reason, you should not use <A class=link title=G_STATIC_ASSERT() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT:CAPS"><CODE class=function>G_STATIC_ASSERT()</CODE></A> in the middle of blocks of code.</P>
<P>The macro should only be used once per source code line.</P>
<DIV class=refsect3><A name=id-1.3.8.7.5.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>a constant expression</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.20</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STATIC-ASSERT-EXPR:CAPS></A>
<H3>G_STATIC_ASSERT_EXPR()</H3><PRE class=programlisting>#define G_STATIC_ASSERT_EXPR(expr) ((void) sizeof (char[(expr) ? 1 : -1]))
</PRE>
<P>The <A class=link title=G_STATIC_ASSERT_EXPR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT-EXPR:CAPS"><CODE class=function>G_STATIC_ASSERT_EXPR()</CODE></A> macro lets the programmer check a condition at compile time. The condition needs to be compile time computable.</P>
<P>Unlike <A class=link title=G_STATIC_ASSERT() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STATIC-ASSERT:CAPS"><CODE class=function>G_STATIC_ASSERT()</CODE></A>, this macro evaluates to an expression and, as such, can be used in the middle of other expressions. Its value should be ignored. This can be accomplished by placing it as the first argument of a comma expression.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#define ADD_ONE_TO_INT(x) \</SPAN>
<SPAN class="gtkdoc ppc">  (G_STATIC_ASSERT_EXPR(sizeof (x) == sizeof (int)), ((x) + 1))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.6.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>a constant expression</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-ALLOC-SIZE:CAPS></A>
<H3>G_GNUC_ALLOC_SIZE()</H3><PRE class=programlisting>#define G_GNUC_ALLOC_SIZE(x) __attribute__((__alloc_size__(x)))
</PRE>
<P>Expands to the GNU C alloc_size function attribute if the compiler is a new enough gcc. This attribute tells the compiler that the function returns a pointer to memory of a size that is specified by the <EM class=parameter><CODE>xth</CODE></EM> function parameter.</P>
<P>Place the attribute after the function declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<DIV class=refsect3><A name=id-1.3.8.7.7.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>x</P></TD>
<TD class=parameter_description>
<P>the index of the argument specifying the allocation size</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.18</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-ALLOC-SIZE2:CAPS></A>
<H3>G_GNUC_ALLOC_SIZE2()</H3><PRE class=programlisting>#define G_GNUC_ALLOC_SIZE2(x,y) __attribute__((__alloc_size__(x,y)))
</PRE>
<P>Expands to the GNU C alloc_size function attribute if the compiler is a new enough gcc. This attribute tells the compiler that the function returns a pointer to memory of a size that is specified by the product of two function parameters.</P>
<P>Place the attribute after the function declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<DIV class=refsect3><A name=id-1.3.8.7.8.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>x</P></TD>
<TD class=parameter_description>
<P>the index of the argument specifying one factor of the allocation size</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>y</P></TD>
<TD class=parameter_description>
<P>the index of the argument specifying the second factor of the allocation size</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.18</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-DEPRECATED-FOR:CAPS></A>
<H3>G_GNUC_DEPRECATED_FOR()</H3><PRE class=programlisting>#define             G_GNUC_DEPRECATED_FOR(f)</PRE>
<P>Like <A class=link title=G_GNUC_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED:CAPS"><CODE class=literal>G_GNUC_DEPRECATED</CODE></A>, but names the intended replacement for the deprecated symbol if the version of gcc in use is new enough to support custom deprecation messages.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P>Note that if <EM class=parameter><CODE>f</CODE></EM> is a macro, it will be expanded in the warning message. You can enclose it in quotes to prevent this. (The quotes will show up in the warning, but it's better than showing the macro expansion.)</P>
<DIV class=refsect3><A name=id-1.3.8.7.9.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>f</P></TD>
<TD class=parameter_description>
<P>the intended replacement for the deprecated symbol, such as the name of a function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.26</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-PRINTF:CAPS></A>
<H3>G_GNUC_PRINTF()</H3><PRE class=programlisting>#define             G_GNUC_PRINTF( format_idx, arg_idx )</PRE>
<P>Expands to the GNU C format function attribute if the compiler is gcc. This is used for declaring functions which take a variable number of arguments, with the same syntax as <CODE class=function>printf()</CODE>. It allows the compiler to type-check the arguments passed to the function.</P>
<P>Place the attribute after the function declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gint <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-snprintf">g_snprintf</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>gchar  <SPAN class="gtkdoc opt">*</SPAN>string<SPAN class="gtkdoc opt">,</SPAN>
                 gulong       n<SPAN class="gtkdoc opt">,</SPAN>
                 gchar <SPAN class="gtkdoc kwb">const</SPAN> <SPAN class="gtkdoc opt">*</SPAN>format<SPAN class="gtkdoc opt">,</SPAN>
                 <SPAN class="gtkdoc opt">...)</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-PRINTF:CAPS">G_GNUC_PRINTF</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>3</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=number>4</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.10.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format_idx</P></TD>
<TD class=parameter_description>
<P>the index of the argument corresponding to the format string (The arguments are numbered from 1)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>arg_idx</P></TD>
<TD class=parameter_description>
<P>the index of the first of the format arguments</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-SCANF:CAPS></A>
<H3>G_GNUC_SCANF()</H3><PRE class=programlisting>#define             G_GNUC_SCANF( format_idx, arg_idx )</PRE>
<P>Expands to the GNU C format function attribute if the compiler is gcc. This is used for declaring functions which take a variable number of arguments, with the same syntax as <CODE class=function>scanf()</CODE>. It allows the compiler to type-check the arguments passed to the function.</P>
<P>See the GNU C documentation for details.</P>
<DIV class=refsect3><A name=id-1.3.8.7.11.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format_idx</P></TD>
<TD class=parameter_description>
<P>the index of the argument corresponding to the format string (The arguments are numbered from 1)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>arg_idx</P></TD>
<TD class=parameter_description>
<P>the index of the first of the format arguments</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-FORMAT:CAPS></A>
<H3>G_GNUC_FORMAT()</H3><PRE class=programlisting>#define             G_GNUC_FORMAT( arg_idx )</PRE>
<P>Expands to the GNU C format_arg function attribute if the compiler is gcc. This function attribute specifies that a function takes a format string for a <CODE class=function>printf()</CODE>, <CODE class=function>scanf()</CODE>, <CODE class=function>strftime()</CODE> or <CODE class=function>strfmon()</CODE> style function and modifies it, so that the result can be passed to a <CODE class=function>printf()</CODE>, <CODE class=function>scanf()</CODE>, <CODE class=function>strftime()</CODE> or <CODE class=function>strfmon()</CODE> style function (with the remaining arguments to the format function the same as they would have been for the unmodified string).</P>
<P>Place the attribute after the function declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting>gchar <SPAN class="gtkdoc opt">*</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-I18N.html#g-dgettext">g_dgettext</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>gchar <SPAN class="gtkdoc opt">*</SPAN>domain_name<SPAN class="gtkdoc opt">,</SPAN> gchar <SPAN class="gtkdoc opt">*</SPAN>msgid<SPAN class="gtkdoc opt">)</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-FORMAT:CAPS">G_GNUC_FORMAT</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>2</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.12.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>arg_idx</P></TD>
<TD class=parameter_description>
<P>the index of the argument</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-DEPRECATED-FOR:CAPS></A>
<H3>G_DEPRECATED_FOR()</H3><PRE class=programlisting>#define G_DEPRECATED_FOR(f) __attribute__((__deprecated__("Use '" #f "' instead")))
</PRE>
<P>This macro is similar to <A class=link title=G_GNUC_DEPRECATED_FOR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED-FOR:CAPS"><CODE class=literal>G_GNUC_DEPRECATED_FOR</CODE></A>, and can be used to mark functions declarations as deprecated. Unlike <A class=link title=G_GNUC_DEPRECATED_FOR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED-FOR:CAPS"><CODE class=literal>G_GNUC_DEPRECATED_FOR</CODE></A>, it is meant to be portable across different compilers and must be placed before the function declaration.</P>
<DIV class=refsect3><A name=id-1.3.8.7.13.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>f</P></TD>
<TD class=parameter_description>
<P>the name of the function that this function was deprecated for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-UNAVAILABLE:CAPS></A>
<H3>G_UNAVAILABLE()</H3><PRE class=programlisting>#define G_UNAVAILABLE(maj,min) __attribute__((deprecated("Not available before " #maj "." #min)))
</PRE>
<P>This macro can be used to mark a function declaration as unavailable. It must be placed before the function declaration. Use of a function that has been annotated with this macros will produce a compiler warning.</P>
<DIV class=refsect3><A name=id-1.3.8.7.14.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>maj</P></TD>
<TD class=parameter_description>
<P>the major version that introduced the symbol</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>min</P></TD>
<TD class=parameter_description>
<P>the minor version that introduced the symbol</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-LIKELY:CAPS></A>
<H3>G_LIKELY()</H3><PRE class=programlisting>#define G_LIKELY(expr) (__builtin_expect (_G_BOOLEAN_EXPR(expr), 1))
</PRE>
<P>Hints the compiler that the expression is likely to evaluate to a true value. The compiler may use this information for optimizations.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-LIKELY:CAPS">G_LIKELY</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>random</SPAN> <SPAN class="gtkdoc opt">() !=</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">))</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"not one"</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.15.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.8.7.15.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>expr</CODE></EM> </P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-UNLIKELY:CAPS></A>
<H3>G_UNLIKELY()</H3><PRE class=programlisting>#define G_UNLIKELY(expr) (__builtin_expect (_G_BOOLEAN_EXPR(expr), 0))
</PRE>
<P>Hints the compiler that the expression is unlikely to evaluate to a true value. The compiler may use this information for optimizations.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-UNLIKELY:CAPS">G_UNLIKELY</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>random</SPAN> <SPAN class="gtkdoc opt">() ==</SPAN> <SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">))</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"a random one"</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.3.8.7.16.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.8.7.16.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>expr</CODE></EM> </P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STRFUNC:CAPS></A>
<H3>G_STRFUNC</H3><PRE class=programlisting>#define G_STRFUNC     ((const char*) (__PRETTY_FUNCTION__))
</PRE>
<P>Expands to a string identifying the current function.</P>
<P class=since>Since 2.4</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Miscellaneous-Macros.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=G-INLINE-FUNC:CAPS></A>
<H3>G_INLINE_FUNC</H3><PRE class=programlisting>#  define G_INLINE_FUNC _GLIB_EXTERN
</PRE>
<P>This macro is used to export function prototypes so they can be linked with an external version when no inlining is performed. The file which implements the functions should define <CODE class=literal>G_IMPLEMENTS_INLINES</CODE> before including the headers which contain <A class=link title=G_INLINE_FUNC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-INLINE-FUNC:CAPS"><CODE class=literal>G_INLINE_FUNC</CODE></A> declarations. Since inlining is very compiler-dependent using these macros correctly is very difficult. Their use is strongly discouraged.</P>
<P>This macro is often mistaken for a replacement for the inline keyword; inline is already declared in a portable manner in the GLib headers and can be used normally.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STMT-START:CAPS></A>
<H3>G_STMT_START</H3><PRE class=programlisting>#define G_STMT_START  do
</PRE>
<P>Used within multi-statement macros so that they can be used in places where only one statement is expected by the compiler.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STMT-END:CAPS></A>
<H3>G_STMT_END</H3><PRE class=programlisting>#define G_STMT_END    while (0)
</PRE>
<P>Used within multi-statement macros so that they can be used in places where only one statement is expected by the compiler.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-BEGIN-DECLS:CAPS></A>
<H3>G_BEGIN_DECLS</H3><PRE class=programlisting>#define G_BEGIN_DECLS  extern "C" {
</PRE>
<P>Used (along with <A class=link title=G_END_DECLS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-END-DECLS:CAPS"><SPAN class=type>G_END_DECLS</SPAN></A>) to bracket header files. If the compiler in use is a C++ compiler, adds extern "C" around the header.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-END-DECLS:CAPS></A>
<H3>G_END_DECLS</H3><PRE class=programlisting>#define G_END_DECLS    }
</PRE>
<P>Used (along with <A class=link title=G_BEGIN_DECLS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-BEGIN-DECLS:CAPS"><SPAN class=type>G_BEGIN_DECLS</SPAN></A>) to bracket header files. If the compiler in use is a C++ compiler, adds extern "C" around the header.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-EXTENSION:CAPS></A>
<H3>G_GNUC_EXTENSION</H3><PRE class=programlisting>#define G_GNUC_EXTENSION __extension__
</PRE>
<P>Expands to __extension__ when gcc is used as the compiler. This simply tells gcc not to warn about the following non-standard code when compiling with the <CODE class=literal>-pedantic</CODE> option.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-CONST:CAPS></A>
<H3>G_GNUC_CONST</H3><PRE class=programlisting>#define             G_GNUC_CONST</PRE>
<P>Expands to the GNU C const function attribute if the compiler is gcc. Declaring a function as const enables better optimization of calls to the function. A const function doesn't examine any values except its parameters, and has no effects except its return value.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P>A function that has pointer arguments and examines the data pointed to must not be declared const. Likewise, a function that calls a non-const function usually must not be const. It doesn't make sense for a const function to return void.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-PURE:CAPS></A>
<H3>G_GNUC_PURE</H3><PRE class=programlisting>#define G_GNUC_PURE __attribute__((__pure__))
</PRE>
<P>Expands to the GNU C pure function attribute if the compiler is gcc. Declaring a function as pure enables better optimization of calls to the function. A pure function has no effects except its return value and the return value depends only on the parameters and/or global variables.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-MALLOC:CAPS></A>
<H3>G_GNUC_MALLOC</H3><PRE class=programlisting>#define G_GNUC_MALLOC __attribute__((__malloc__))
</PRE>
<P>Expands to the GNU C malloc function attribute if the compiler is gcc. Declaring a function as malloc enables better optimization of the function. A function can have the malloc attribute if it returns a pointer which is guaranteed to not alias with any other pointer when the function returns (in practice, this means newly allocated memory).</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-DEPRECATED:CAPS></A>
<H3>G_GNUC_DEPRECATED</H3><PRE class=programlisting>#define G_GNUC_DEPRECATED __attribute__((__deprecated__))
</PRE>
<P>Expands to the GNU C deprecated attribute if the compiler is gcc. It can be used to mark typedefs, variables and functions as deprecated. When called with the <CODE class=literal>-Wdeprecated-declarations</CODE> option, gcc will generate warnings when deprecated interfaces are used.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-BEGIN-IGNORE-DEPRECATIONS:CAPS></A>
<H3>G_GNUC_BEGIN_IGNORE_DEPRECATIONS</H3><PRE class=programlisting>#define             G_GNUC_BEGIN_IGNORE_DEPRECATIONS</PRE>
<P>Tells gcc (if it is a new enough version) to temporarily stop emitting warnings when functions marked with <A class=link title=G_GNUC_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED:CAPS"><CODE class=literal>G_GNUC_DEPRECATED</CODE></A> or <A class=link title=G_GNUC_DEPRECATED_FOR() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED-FOR:CAPS"><CODE class=literal>G_GNUC_DEPRECATED_FOR</CODE></A> are called. This is useful for when you have one deprecated function calling another one, or when you still have regression tests for deprecated functions.</P>
<P>Use <A class=link title=G_GNUC_END_IGNORE_DEPRECATIONS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-END-IGNORE-DEPRECATIONS:CAPS"><CODE class=literal>G_GNUC_END_IGNORE_DEPRECATIONS</CODE></A> to begin warning again. (If you are not compiling with <CODE class=literal>-Wdeprecated-declarations</CODE> then neither macro has any effect.)</P>
<P>This macro can be used either inside or outside of a function body, but must appear on a line by itself.</P>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-END-IGNORE-DEPRECATIONS:CAPS></A>
<H3>G_GNUC_END_IGNORE_DEPRECATIONS</H3><PRE class=programlisting>#define             G_GNUC_END_IGNORE_DEPRECATIONS</PRE>
<P>Undoes the effect of <A class=link title=G_GNUC_BEGIN_IGNORE_DEPRECATIONS href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-BEGIN-IGNORE-DEPRECATIONS:CAPS"><CODE class=literal>G_GNUC_BEGIN_IGNORE_DEPRECATIONS</CODE></A>, telling gcc to begin outputting warnings again (assuming those warnings had been enabled to begin with).</P>
<P>This macro can be used either inside or outside of a function body, but must appear on a line by itself.</P>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-NORETURN:CAPS></A>
<H3>G_GNUC_NORETURN</H3><PRE class=programlisting>#define             G_GNUC_NORETURN</PRE>
<P>Expands to the GNU C noreturn function attribute if the compiler is gcc. It is used for declaring functions which never return. It enables optimization of the function, and avoids possible compiler warnings.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-UNUSED:CAPS></A>
<H3>G_GNUC_UNUSED</H3><PRE class=programlisting>#define             G_GNUC_UNUSED</PRE>
<P>Expands to the GNU C unused function attribute if the compiler is gcc. It is used for declaring functions and arguments which may never be used. It avoids possible compiler warnings.</P>
<P>For functions, place the attribute after the declaration, just before the semicolon. For arguments, place the attribute at the beginning of the argument declaration.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>my_unused_function</SPAN> <SPAN class="gtkdoc opt">(</SPAN>G_GNUC_UNUSED gint unused_argument<SPAN class="gtkdoc opt">,</SPAN>
                         gint other_argument<SPAN class="gtkdoc opt">)</SPAN> G_GNUC_UNUSED<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>See the GNU C documentation for more details.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-NULL-TERMINATED:CAPS></A>
<H3>G_GNUC_NULL_TERMINATED</H3><PRE class=programlisting>#define G_GNUC_NULL_TERMINATED __attribute__((__sentinel__))
</PRE>
<P>Expands to the GNU C sentinel function attribute if the compiler is gcc. This function attribute only applies to variadic functions and instructs the compiler to check that the argument list is terminated with an explicit <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P class=since>Since 2.8</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-WARN-UNUSED-RESULT:CAPS></A>
<H3>G_GNUC_WARN_UNUSED_RESULT</H3><PRE class=programlisting>#define G_GNUC_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
</PRE>
<P>Expands to the GNU C warn_unused_result function attribute if the compiler is gcc. This function attribute makes the compiler emit a warning if the result of a function call is ignored.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P>
<P class=since>Since 2.10</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-FUNCTION:CAPS></A>
<H3>G_GNUC_FUNCTION</H3><PRE class=programlisting>#define G_GNUC_FUNCTION         __FUNCTION__
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_GNUC_FUNCTION</CODE> has been deprecated since version 2.16 and should not be used in newly-written code.</P>
<P>Use <A class=link title=G_STRFUNC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRFUNC:CAPS"><CODE class=function>G_STRFUNC()</CODE></A> instead</P></DIV>
<P>Expands to "" on all modern compilers, and to __FUNCTION__ on gcc version 2.x. Don't use it.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-PRETTY-FUNCTION:CAPS></A>
<H3>G_GNUC_PRETTY_FUNCTION</H3><PRE class=programlisting>#define G_GNUC_PRETTY_FUNCTION  __PRETTY_FUNCTION__
</PRE>
<DIV class=warning>
<P><CODE class=literal>G_GNUC_PRETTY_FUNCTION</CODE> has been deprecated since version 2.16 and should not be used in newly-written code.</P>
<P>Use <A class=link title=G_STRFUNC href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-STRFUNC:CAPS"><CODE class=function>G_STRFUNC()</CODE></A> instead</P></DIV>
<P>Expands to "" on all modern compilers, and to __PRETTY_FUNCTION__ on gcc version 2.x. Don't use it.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-NO-INSTRUMENT:CAPS></A>
<H3>G_GNUC_NO_INSTRUMENT</H3><PRE class=programlisting>#define             G_GNUC_NO_INSTRUMENT</PRE>
<P>Expands to the GNU C no_instrument_function function attribute if the compiler is gcc. Functions with this attribute will not be instrumented for profiling, when the compiler is called with the <CODE class=literal>-finstrument-functions</CODE> option.</P>
<P>Place the attribute after the declaration, just before the semicolon.</P>
<P>See the GNU C documentation for more details.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-HAVE-GNUC-VISIBILITY:CAPS></A>
<H3>G_HAVE_GNUC_VISIBILITY</H3><PRE class=programlisting>#define G_HAVE_GNUC_VISIBILITY 1
</PRE>
<P>Defined to 1 if gcc-style visibility handling is supported.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-INTERNAL:CAPS></A>
<H3>G_GNUC_INTERNAL</H3><PRE class=programlisting>#define G_GNUC_INTERNAL __attribute__((visibility("hidden")))
</PRE>
<P>This attribute can be used for marking library functions as being used internally to the library only, which may allow the compiler to handle function calls more efficiently. Note that static functions do not need to be marked as internal in this way. See the GNU C documentation for details.</P>
<P>When using a compiler that supports the GNU C hidden visibility attribute, this macro expands to __attribute__((visibility("hidden"))). When using the Sun Studio compiler, it expands to __hidden.</P>
<P>Note that for portability, the attribute should be placed before the function declaration. While GCC allows the macro after the declaration, Sun Studio does not.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5</PRE></TD>
<TD class=listing_code><PRE class=programlisting>G_GNUC_INTERNAL
<SPAN class="gtkdoc kwb">void</SPAN> <SPAN class=function>_g_log_fallback_handler</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">const</SPAN> gchar    <SPAN class="gtkdoc opt">*</SPAN>log_domain<SPAN class="gtkdoc opt">,</SPAN>
                              GLogLevelFlags  log_level<SPAN class="gtkdoc opt">,</SPAN>
                              <SPAN class="gtkdoc kwb">const</SPAN> gchar    <SPAN class="gtkdoc opt">*</SPAN>message<SPAN class="gtkdoc opt">,</SPAN>
                              gpointer        unused_data<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-GNUC-MAY-ALIAS:CAPS></A>
<H3>G_GNUC_MAY_ALIAS</H3><PRE class=programlisting>#define G_GNUC_MAY_ALIAS __attribute__((may_alias))
</PRE>
<P>Expands to the GNU C may_alias type attribute if the compiler is gcc. Types with this attribute will not be subjected to type-based alias analysis, but are assumed to alias with any other type, just like char.</P>
<P>See the GNU C documentation for details.</P>
<P class=since>Since 2.14</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-DEPRECATED:CAPS></A>
<H3>G_DEPRECATED</H3><PRE class=programlisting>#define G_DEPRECATED __attribute__((__deprecated__))
</PRE>
<P>This macro is similar to <A class=link title=G_GNUC_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED:CAPS"><CODE class=literal>G_GNUC_DEPRECATED</CODE></A>, and can be used to mark functions declarations as deprecated. Unlike <A class=link title=G_GNUC_DEPRECATED href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Macros.html#G-GNUC-DEPRECATED:CAPS"><CODE class=literal>G_GNUC_DEPRECATED</CODE></A>, it is meant to be portable across different compilers and must be placed before the function declaration.</P>
<P class=since>Since 2.32</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-STRLOC:CAPS></A>
<H3>G_STRLOC</H3><PRE class=programlisting>#define G_STRLOC&nbsp;__FILE__ ":" G_STRINGIFY (__LINE__) ":" __PRETTY_FUNCTION__ "()"
</PRE>
<P>Expands to a string identifying the current code position.</P></DIV></DIV>