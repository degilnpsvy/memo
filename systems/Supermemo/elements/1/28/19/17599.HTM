<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Atomic-Operations.top_of_page></A>Atomic Operations</SPAN></H2>
<P>Atomic Operations &#8212; basic atomic integer and pointer operations</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Atomic-Operations.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_get&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-get">g_atomic_int_get</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_atomic_int_set&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-set">g_atomic_int_set</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_atomic_int_inc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-inc">g_atomic_int_inc</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_dec_and_test&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-dec-and-test">g_atomic_int_dec_and_test</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_compare_and_exchange&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-compare-and-exchange">g_atomic_int_compare_and_exchange</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-add">g_atomic_int_add</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_and&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-and">g_atomic_int_and</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_or&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-or">g_atomic_int_or</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_xor&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-xor">g_atomic_int_xor</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_get&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-get">g_atomic_pointer_get</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_atomic_pointer_set&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-set">g_atomic_pointer_set</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_compare_and_exchange&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-compare-and-exchange">g_atomic_pointer_compare_and_exchange</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gssize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=returnvalue>gssize</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-add">g_atomic_pointer_add</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_and&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-and">g_atomic_pointer_and</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_or&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-or">g_atomic_pointer_or</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_pointer_xor&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-pointer-xor">g_atomic_pointer_xor</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A title=g_atomic_int_exchange_and_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-exchange-and-add">g_atomic_int_exchange_and_add</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_ATOMIC_LOCK_FREE class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#G-ATOMIC-LOCK-FREE:CAPS">G_ATOMIC_LOCK_FREE</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.description></A>
<H2>Description</H2>
<P>The following is a collection of compiler macros to provide atomic access to integer and pointer-sized values.</P>
<P>The macros that have 'int' in the name will operate on pointers to <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> and <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A>. The macros with 'pointer' in the name will operate on pointers to any pointer-sized value, including <A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A>. There is no support for 64bit operations on platforms with 32bit pointers because it is not generally possible to perform these operations atomically.</P>
<P>The get, set and exchange operations for integers and pointers nominally operate on <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> and <A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A>, respectively. Of the arithmetic operations, the 'add' operation operates on (and returns) signed integer values (<A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> and <A title=gssize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A>) and the 'and', 'or', and 'xor' operations operate on (and return) unsigned integer values (<A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> and <A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A>).</P>
<P>All of the operations act as a full compiler and (where appropriate) hardware memory barrier. Acquire and release or producer and consumer barrier semantics are not available through this API.</P>
<P>It is very important that all accesses to a particular integer or pointer be performed using only this API and that different sizes of operation are not mixed or used on overlapping memory regions. Never read or assign directly from or to a value -- always use this API.</P>
<P>For simple reference counting purposes you should use <A title=g_atomic_int_inc&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-inc"><CODE class=function>g_atomic_int_inc()</CODE></A> and <A title=g_atomic_int_dec_and_test&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-dec-and-test"><CODE class=function>g_atomic_int_dec_and_test()</CODE></A>. Other uses that fall outside of simple reference counting patterns are prone to subtle bugs and occasionally undefined behaviour. It is also worth noting that since all of these operations require global synchronisation of the entire machine, they can be quite slow. In * the case of performing multiple atomic operations it can often be faster to simply acquire a mutex lock around the critical area, perform the operations normally and then release the lock.</P></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-atomic-int-get></A>
<H3>g_atomic_int_get&nbsp;()</H3><PRE class=programlisting><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_atomic_int_get (<EM class=parameter><CODE>const volatile <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>);</PRE>
<P>Gets the current value of <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>This call acts as a full compiler and hardware memory barrier (before the get).</P>
<DIV class=refsect3><A name=id-1.3.9.7.2.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.2.7></A>
<H4>Returns</H4>
<P>the value of the integer</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-set></A>
<H3>g_atomic_int_set&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_atomic_int_set (<EM class=parameter><CODE>volatile <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>,
                  <EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> newval</CODE></EM>);</PRE>
<P>Sets the value of <EM class=parameter><CODE>atomic</CODE></EM> to <EM class=parameter><CODE>newval</CODE></EM> .</P>
<P>This call acts as a full compiler and hardware memory barrier (after the set).</P>
<DIV class=refsect3><A name=id-1.3.9.7.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>newval</P></TD>
<TD class=parameter_description>
<P>a new value to store</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-inc></A>
<H3>g_atomic_int_inc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_atomic_int_inc (<EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>);</PRE>
<P>Increments the value of <EM class=parameter><CODE>atomic</CODE></EM> by 1.</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ *atomic += 1; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.4.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-dec-and-test></A>
<H3>g_atomic_int_dec_and_test&nbsp;()</H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_atomic_int_dec_and_test (<EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>);</PRE>
<P>Decrements the value of <EM class=parameter><CODE>atomic</CODE></EM> by 1.</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ *atomic -= 1; return (*atomic == 0); }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.5.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.5.8></A>
<H4>Returns</H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the resultant value is zero</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-compare-and-exchange></A>
<H3>g_atomic_int_compare_and_exchange&nbsp;()</H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_atomic_int_compare_and_exchange (<EM class=parameter><CODE>volatile <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>,
                                   <EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> oldval</CODE></EM>,
                                   <EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> newval</CODE></EM>);</PRE>
<P>Compares <EM class=parameter><CODE>atomic</CODE></EM> to <EM class=parameter><CODE>oldval</CODE></EM> and, if equal, sets it to <EM class=parameter><CODE>newval</CODE></EM> . If <EM class=parameter><CODE>atomic</CODE></EM> was not equal to <EM class=parameter><CODE>oldval</CODE></EM> then no change occurs.</P>
<P>This compare and exchange is done atomically.</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.6.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>oldval</P></TD>
<TD class=parameter_description>
<P>the value to compare with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>newval</P></TD>
<TD class=parameter_description>
<P>the value to conditionally replace with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.6.9></A>
<H4>Returns</H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the exchange took place</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-add></A>
<H3>g_atomic_int_add&nbsp;()</H3><PRE class=programlisting><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_atomic_int_add (<EM class=parameter><CODE>volatile <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>,
                  <EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> val</CODE></EM>);</PRE>
<P>Atomically adds <EM class=parameter><CODE>val</CODE></EM> to the value of <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic += val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<P>Before version 2.30, this function did not return a value (but <A title=g_atomic_int_exchange_and_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-exchange-and-add"><CODE class=function>g_atomic_int_exchange_and_add()</CODE></A> did, and had the same meaning).</P>
<DIV class=refsect3><A name=id-1.3.9.7.7.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.7.9></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the add, signed</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-and></A>
<H3>g_atomic_int_and&nbsp;()</H3><PRE class=programlisting><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_atomic_int_and (<EM class=parameter><CODE>volatile <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *atomic</CODE></EM>,
                  <EM class=parameter><CODE><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'and' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic &amp;= val; return tmp; }</CODE>.</P>
<DIV class=refsect3><A name=id-1.3.9.7.8.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'and'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.8.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-or></A>
<H3>g_atomic_int_or&nbsp;()</H3><PRE class=programlisting><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_atomic_int_or (<EM class=parameter><CODE>volatile <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *atomic</CODE></EM>,
                 <EM class=parameter><CODE><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'or' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic |= val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.9.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'or'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.9.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-xor></A>
<H3>g_atomic_int_xor&nbsp;()</H3><PRE class=programlisting><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_atomic_int_xor (<EM class=parameter><CODE>volatile <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *atomic</CODE></EM>,
                  <EM class=parameter><CODE><A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'xor' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic ^= val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.10.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> or <A title=guint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'xor'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.10.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-get></A>
<H3>g_atomic_pointer_get&nbsp;()</H3><PRE class=programlisting><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_atomic_pointer_get (<EM class=parameter><CODE>const volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>);</PRE>
<P>Gets the current value of <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>This call acts as a full compiler and hardware memory barrier (before the get).</P>
<DIV class=refsect3><A name=id-1.3.9.7.11.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.11.7></A>
<H4>Returns</H4>
<P>the value of the pointer</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-set></A>
<H3>g_atomic_pointer_set&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_atomic_pointer_set (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                      <EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> newval</CODE></EM>);</PRE>
<P>Sets the value of <EM class=parameter><CODE>atomic</CODE></EM> to <EM class=parameter><CODE>newval</CODE></EM> .</P>
<P>This call acts as a full compiler and hardware memory barrier (after the set).</P>
<DIV class=refsect3><A name=id-1.3.9.7.12.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>newval</P></TD>
<TD class=parameter_description>
<P>a new value to store</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-compare-and-exchange></A>
<H3>g_atomic_pointer_compare_and_exchange&nbsp;()</H3><PRE class=programlisting><A title=gboolean class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_atomic_pointer_compare_and_exchange (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                                       <EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> oldval</CODE></EM>,
                                       <EM class=parameter><CODE><A title=gpointer class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> newval</CODE></EM>);</PRE>
<P>Compares <EM class=parameter><CODE>atomic</CODE></EM> to <EM class=parameter><CODE>oldval</CODE></EM> and, if equal, sets it to <EM class=parameter><CODE>newval</CODE></EM> . If <EM class=parameter><CODE>atomic</CODE></EM> was not equal to <EM class=parameter><CODE>oldval</CODE></EM> then no change occurs.</P>
<P>This compare and exchange is done atomically.</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.13.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>oldval</P></TD>
<TD class=parameter_description>
<P>the value to compare with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>newval</P></TD>
<TD class=parameter_description>
<P>the value to conditionally replace with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.13.9></A>
<H4>Returns</H4>
<P><A title=TRUE class=link href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the exchange took place</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-add></A>
<H3>g_atomic_pointer_add&nbsp;()</H3><PRE class=programlisting><A title=gssize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=returnvalue>gssize</SPAN></A>
g_atomic_pointer_add (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                      <EM class=parameter><CODE><A title=gssize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> val</CODE></EM>);</PRE>
<P>Atomically adds <EM class=parameter><CODE>val</CODE></EM> to the value of <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic += val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.14.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.14.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the add, signed</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-and></A>
<H3>g_atomic_pointer_and&nbsp;()</H3><PRE class=programlisting><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_atomic_pointer_and (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                      <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'and' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic &amp;= val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.15.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'and'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.15.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-or></A>
<H3>g_atomic_pointer_or&nbsp;()</H3><PRE class=programlisting><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_atomic_pointer_or (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                     <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'or' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic |= val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.16.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'or'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.16.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-pointer-xor></A>
<H3>g_atomic_pointer_xor&nbsp;()</H3><PRE class=programlisting><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_atomic_pointer_xor (<EM class=parameter><CODE>volatile <SPAN class=type>void</SPAN> *atomic</CODE></EM>,
                      <EM class=parameter><CODE><A title=gsize class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> val</CODE></EM>);</PRE>
<P>Performs an atomic bitwise 'xor' of the value of <EM class=parameter><CODE>atomic</CODE></EM> and <EM class=parameter><CODE>val</CODE></EM> , storing the result back in <EM class=parameter><CODE>atomic</CODE></EM> .</P>
<P>Think of this operation as an atomic version of <CODE class=literal>{ tmp = *atomic; *atomic ^= val; return tmp; }</CODE>.</P>
<P>This call acts as a full compiler and hardware memory barrier.</P>
<DIV class=refsect3><A name=id-1.3.9.7.17.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <SPAN class=type>gpointer-sized</SPAN> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to 'xor'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.17.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the operation, unsigned</P>
<P></P></DIV>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-atomic-int-exchange-and-add></A>
<H3>g_atomic_int_exchange_and_add&nbsp;()</H3><PRE class=programlisting><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_atomic_int_exchange_and_add (<EM class=parameter><CODE>volatile <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *atomic</CODE></EM>,
                               <EM class=parameter><CODE><A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> val</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_atomic_int_exchange_and_add</CODE> has been deprecated since version 2.30 and should not be used in newly-written code.</P>
<P>Use <A title=g_atomic_int_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-add"><CODE class=function>g_atomic_int_add()</CODE></A> instead.</P></DIV>
<P>This function existed before <A title=g_atomic_int_add&nbsp;() class=link href="https://developer.gnome.org/glib/stable/glib-Atomic-Operations.html#g-atomic-int-add"><CODE class=function>g_atomic_int_add()</CODE></A> returned the prior value of the integer (which it now does). It is retained only for compatibility reasons. Don't use this function in new code.</P>
<DIV class=refsect3><A name=id-1.3.9.7.18.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>atomic</P></TD>
<TD class=parameter_description>
<P>a pointer to a <A title=gint class=link href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>val</P></TD>
<TD class=parameter_description>
<P>the value to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.3.9.7.18.8></A>
<H4>Returns</H4>
<P>the value of <EM class=parameter><CODE>atomic</CODE></EM> before the add, signed</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=G-ATOMIC-LOCK-FREE:CAPS></A>
<H3>G_ATOMIC_LOCK_FREE</H3><PRE class=programlisting>#define G_ATOMIC_LOCK_FREE
</PRE>
<P>This macro is defined if the atomic operations of GLib are implemented using real hardware atomic operations. This means that the GLib atomic API can be used between processes and safely mixed with other (hardware) atomic APIs.</P>
<P>If this macro is not defined, the atomic operations may be emulated using a mutex. In that case, the GLib atomic operations are only atomic relative to themselves and within a single process.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Atomic-Operations.see-also></A>
<H2>See Also</H2>
<P><A title="union GMutex" class=link href="https://developer.gnome.org/glib/stable/glib-Threads.html#GMutex"><SPAN class=type>GMutex</SPAN></A></P></DIV>