<H4 class=subsection>1.1.5 Comments in <CODE>awk</CODE> Programs</H4><A name=index-_0023-_0028number-sign_0029_002c-commenting></A><A name=index-number-sign-_0028_0023_0029_002c-commenting></A><A name=index-commenting></A><A name=index-awk-programs_002c-documenting></A>
<P>A <EM>comment</EM> is some text that is included in a program for the sake of human readers; it is not really an executable part of the program. Comments can explain what the program does and how it works. Nearly all programming languages have provisions for comments, as programs are typically hard to understand without them. </P>
<P>In the <CODE>awk</CODE> language, a comment starts with the sharp sign character (&#8216;<SAMP>#</SAMP>&#8217;) and continues to the end of the line. The &#8216;<SAMP>#</SAMP>&#8217; does not have to be the first character on the line. The <CODE>awk</CODE> language ignores the rest of a line following a sharp sign. For example, we could have put the following into <SAMP>advice</SAMP>: </P>
<DIV class=example><PRE class=example># This program prints a nice friendly message.  It helps
# keep novice users from being afraid of the computer.
BEGIN    { print "Don't Panic!" }
</PRE></DIV>
<P>You can put comment lines into keyboard-composed throwaway <CODE>awk</CODE> programs, but this usually isn&#8217;t very useful; the purpose of a comment is to help you or another person understand the program when reading it at a later time. </P><A name=index-quoting_002c-for-small-awk-programs></A><A name=index-single-quote-_0028_0027_0029_002c-vs_002e-apostrophe></A><A name=index-_0027-_0028single-quote_0029_002c-vs_002e-apostrophe></A>
<BLOCKQUOTE>
<P><B>CAUTION:</B> As mentioned in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#One_002dshot">One-shot</A>, you can enclose small to medium programs in single quotes, in order to keep your shell scripts self-contained. When doing so, <EM>don&#8217;t</EM> put an apostrophe (i.e., a single quote) into a comment (or anywhere else in your program). The shell interprets the quote as the closing quote for the entire program. As a result, usually the shell prints a message about mismatched quotes, and if <CODE>awk</CODE> actually runs, it will probably print strange messages about syntax errors. For example, look at the following: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print "hello" } # let's be cute'</EM></KBD>
&gt;
</PRE></DIV>
<P>The shell sees that the first two quotes match, and that a new quoted object begins at the end of the command line. It therefore prompts with the secondary prompt, waiting for more input. With Unix <CODE>awk</CODE>, closing the quoted string produces this result: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print "hello" } # let's be cute'</EM></KBD>
&gt; <KBD><EM>'</EM></KBD>
error&#8594; awk: can't open file be
error&#8594;  source line number 1
</PRE></DIV><A name=index-_005c-_0028backslash_0029></A><A name=index-backslash-_0028_005c_0029></A>
<P>Putting a backslash before the single quote in &#8216;<SAMP>let's</SAMP>&#8217; wouldn&#8217;t help, since backslashes are not special inside single quotes. The next subsection describes the shell&#8217;s quoting rules. </P></BLOCKQUOTE>