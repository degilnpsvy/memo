<H3 class=section>1.5 A More Complex Example</H3>
<P>Now that we&#8217;ve mastered some simple tasks, let&#8217;s look at what typical <CODE>awk</CODE> programs do. This example shows how <CODE>awk</CODE> can be used to summarize, select, and rearrange the output of another utility. It uses features that haven&#8217;t been covered yet, so don&#8217;t worry if you don&#8217;t understand all the details: </P>
<DIV class=example><PRE class=example>LC_ALL=C ls -l | awk '$6 == "Nov" { sum += $5 }
                      END { print sum }'
</PRE></DIV><A name=index-ls-utility></A>
<P>This command prints the total number of bytes in all the files in the current directory that were last modified in November (of any year). The &#8216;<SAMP>ls&nbsp;<SPAN class=nolinebreak>-l</SPAN></SAMP>&#8217;<!-- /@w --> part of this example is a system command that gives you a listing of the files in a directory, including each file&#8217;s size and the date the file was last modified. Its output looks like this: </P>
<DIV class=example><PRE class=example>-rw-r--r--  1 arnold   user   1933 Nov  7 13:05 Makefile
-rw-r--r--  1 arnold   user  10809 Nov  7 13:03 awk.h
-rw-r--r--  1 arnold   user    983 Apr 13 12:14 awk.tab.h
-rw-r--r--  1 arnold   user  31869 Jun 15 12:20 awkgram.y
-rw-r--r--  1 arnold   user  22414 Nov  7 13:03 awk1.c
-rw-r--r--  1 arnold   user  37455 Nov  7 13:03 awk2.c
-rw-r--r--  1 arnold   user  27511 Dec  9 13:07 awk3.c
-rw-r--r--  1 arnold   user   7989 Nov  7 13:03 awk4.c
</PRE></DIV><A name=index-line-continuations_002c-with-C-shell></A>
<P>The first field contains read-write permissions, the second field contains the number of links to the file, and the third field identifies the owner of the file. The fourth field identifies the group of the file. The fifth field contains the size of the file in bytes. The sixth, seventh, and eighth fields contain the month, day, and time, respectively, that the file was last modified. Finally, the ninth field contains the file name.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT11" name=DOCF11><SUP>11</SUP></A> </P><A name=index-initialization_002c-automatic></A>
<P>The &#8216;<SAMP>$6 == "Nov"</SAMP>&#8217; in our <CODE>awk</CODE> program is an expression that tests whether the sixth field of the output from &#8216;<SAMP>ls&nbsp;<SPAN class=nolinebreak>-l</SPAN></SAMP>&#8217;<!-- /@w --> matches the string &#8216;<SAMP>Nov</SAMP>&#8217;. Each time a line has the string &#8216;<SAMP>Nov</SAMP>&#8217; for its sixth field, the action &#8216;<SAMP>sum += $5</SAMP>&#8217; is performed. This adds the fifth field (the file&#8217;s size) to the variable <CODE>sum</CODE>. As a result, when <CODE>awk</CODE> has finished reading all the input lines, <CODE>sum</CODE> is the total of the sizes of the files whose lines matched the pattern. (This works because <CODE>awk</CODE> variables are automatically initialized to zero.) </P>
<P>After the last line of output from <CODE>ls</CODE> has been processed, the <CODE>END</CODE> rule executes and prints the value of <CODE>sum</CODE>. In this example, the value of <CODE>sum</CODE> is 80600. </P>
<P>These more advanced <CODE>awk</CODE> techniques are covered in later sections (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Action-Overview">Action Overview</A>). Before you can move on to more advanced <CODE>awk</CODE> programming, you have to know how <CODE>awk</CODE> interprets your input and displays your output. By manipulating fields and using <CODE>print</CODE> statements, you can produce some very useful and impressive-looking reports.