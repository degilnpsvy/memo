<H3 class=section>1.3 Some Simple Examples</H3>
<P>The following command runs a simple <CODE>awk</CODE> program that searches the input file <SAMP>mail-list</SAMP> for the character string &#8216;<SAMP>li</SAMP>&#8217; (a grouping of characters is usually called a <EM>string</EM>; the term <EM>string</EM> is based on similar usage in English, such as &#8220;a string of pearls,&#8221; or &#8220;a string of cars in a train&#8221;): </P>
<DIV class=example><PRE class=example>awk '/li/ { print $0 }' mail-list
</PRE></DIV>
<P>When lines containing &#8216;<SAMP>li</SAMP>&#8217; are found, they are printed because &#8216;<SAMP>print&nbsp;$0</SAMP>&#8217;<!-- /@w --> means print the current line. (Just &#8216;<SAMP>print</SAMP>&#8217; by itself means the same thing, so we could have written that instead.) </P>
<P>You will notice that slashes (&#8216;<SAMP>/</SAMP>&#8217;) surround the string &#8216;<SAMP>li</SAMP>&#8217; in the <CODE>awk</CODE> program. The slashes indicate that &#8216;<SAMP>li</SAMP>&#8217; is the pattern to search for. This type of pattern is called a <EM>regular expression</EM>, which is covered in more detail later (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp">Regexp</A>). The pattern is allowed to match parts of words. There are single quotes around the <CODE>awk</CODE> program so that the shell won&#8217;t interpret any of it as special shell characters. </P>
<P>Here is what this program prints: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '/li/ { print $0 }' mail-list</EM></KBD>
-| Amelia       555-5553     amelia.zodiacusque@gmail.com    F
-| Broderick    555-0542     broderick.aliquotiens@yahoo.com R
-| Julie        555-6699     julie.perscrutabor@skeeve.com   F
-| Samuel       555-3430     samuel.lanceolis@shu.edu        A
</PRE></DIV><A name=index-actions_002c-default></A><A name=index-patterns_002c-default></A>
<P>In an <CODE>awk</CODE> rule, either the pattern or the action can be omitted, but not both. If the pattern is omitted, then the action is performed for <EM>every</EM> input line. If the action is omitted, the default action is to print all lines that match the pattern. </P><A name=index-actions_002c-empty></A>
<P>Thus, we could leave out the action (the <CODE>print</CODE> statement and the curly braces) in the previous example and the result would be the same: <CODE>awk</CODE> prints all lines matching the pattern &#8216;<SAMP>li</SAMP>&#8217;. By comparison, omitting the <CODE>print</CODE> statement but retaining the curly braces makes an empty action that does nothing (i.e., no lines are printed). </P><A name=index-awk-programs_002c-one_002dline-examples></A>
<P>Many practical <CODE>awk</CODE> programs are just a line or two. Following is a collection of useful, short programs to get you started. Some of these programs contain constructs that haven&#8217;t been covered yet. (The description of the program will give you a good idea of what is going on, but please read the rest of the Web page to become an <CODE>awk</CODE> expert!) Most of the examples use a data file named <SAMP>data</SAMP>. This is just a placeholder; if you use these programs yourself, substitute your own file names for <SAMP>data</SAMP>. For future reference, note that there is often more than one way to do things in <CODE>awk</CODE>. At some point, you may want to look back at these examples and see if you can come up with different ways to do the same things shown here: </P>
<UL>
<LI>Print the length of the longest input line: 
<DIV class=example><PRE class=example>awk '{ if (length($0) &gt; max) max = length($0) }
     END { print max }' data
</PRE></DIV></LI>
<LI>Print every line that is longer than 80 characters: 
<DIV class=example><PRE class=example>awk 'length($0) &gt; 80' data
</PRE></DIV>
<P>The sole rule has a relational expression as its pattern and it has no action&#8212;so the default action, printing the record, is used. </P></LI>
<LI><A name=index-expand-utility></A>Print the length of the longest line in <SAMP>data</SAMP>: 
<DIV class=example><PRE class=example>expand data | awk '{ if (x &lt; length()) x = length() }
              END { print "maximum line length is " x }'
</PRE></DIV>
<P>The input is processed by the <CODE>expand</CODE> utility to change TABs into spaces, so the widths compared are actually the right-margin columns. </P></LI>
<LI>Print every line that has at least one field: 
<DIV class=example><PRE class=example>awk 'NF &gt; 0' data
</PRE></DIV>
<P>This is an easy way to delete blank lines from a file (or rather, to create a new file similar to the old file but from which the blank lines have been removed). </P></LI>
<LI>Print seven random numbers from 0 to 100, inclusive: 
<DIV class=example><PRE class=example>awk 'BEGIN { for (i = 1; i &lt;= 7; i++)
                 print int(101 * rand()) }'
</PRE></DIV></LI>
<LI>Print the total number of bytes used by <VAR>files</VAR>: 
<DIV class=example><PRE class=example>ls -l <VAR>files</VAR> | awk '{ x += $5 }
                  END { print "total bytes: " x }'
</PRE></DIV></LI>
<LI>Print the total number of kilobytes used by <VAR>files</VAR>: 
<DIV class=example><PRE class=example>ls -l <VAR>files</VAR> | awk '{ x += $5 }
   END { print "total K-bytes:", x / 1024 }'
</PRE></DIV></LI>
<LI>Print a sorted list of the login names of all users: 
<DIV class=example><PRE class=example>awk -F: '{ print $1 }' /etc/passwd | sort
</PRE></DIV></LI>
<LI>Count the lines in a file: 
<DIV class=example><PRE class=example>awk 'END { print NR }' data
</PRE></DIV></LI>
<LI>Print the even-numbered lines in the data file: 
<DIV class=example><PRE class=example>awk 'NR % 2 == 0' data
</PRE></DIV>
<P>If you use the expression &#8216;<SAMP>NR % 2 == 1</SAMP>&#8217; instead, the program would print the odd-numbered lines. </P></LI></UL>