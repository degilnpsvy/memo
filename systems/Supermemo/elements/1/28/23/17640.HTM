<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Testing.top_of_page></A>Testing</SPAN></H2>
<P>Testing &#8212; a test framework</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Testing.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_minimized_result&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-minimized-result">g_test_minimized_result</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_maximized_result&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-maximized-result">g_test_maximized_result</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init">g_test_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_initialized href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-initialized">g_test_initialized</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_quick href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quick">g_test_quick</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_slow href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-slow">g_test_slow</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_thorough href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-thorough">g_test_thorough</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_perf href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-perf">g_test_perf</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_verbose href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-verbose">g_test_verbose</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_undefined href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-undefined">g_test_undefined</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_quiet href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quiet">g_test_quiet</A></TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-subprocess">g_test_subprocess</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_run&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run">g_test_run</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GTestFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFunc">*GTestFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_add_func&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-func">g_test_add_func</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GTestDataFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestDataFunc">*GTestDataFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_add_data_func&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-data-func">g_test_add_data_func</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_add_data_func_full&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-data-func-full">g_test_add_data_func_full</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_add() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add">g_test_add</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-build-filename">g_test_build_filename</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_get_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-get-filename">g_test_get_filename</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_get_dir&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-get-dir">g_test_get_dir</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_fail&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-fail">g_test_fail</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_skip&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-skip">g_test_skip</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_incomplete&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-incomplete">g_test_incomplete</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_failed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-failed">g_test_failed</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-message">g_test_message</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_bug_base&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-bug-base">g_test_bug_base</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_bug&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-bug">g_test_bug</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GTestLogFatalFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestLogFatalFunc">*GTestLogFatalFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_log_set_fatal_handler&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-log-set-fatal-handler">g_test_log_set_fatal_handler</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_timer_start&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-start">g_test_timer_start</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>double</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_timer_elapsed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-elapsed">g_test_timer_elapsed</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>double</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_timer_last&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-last">g_test_timer_last</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_queue_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-queue-free">g_test_queue_free</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_queue_destroy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-queue-destroy">g_test_queue_destroy</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_queue_unref() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-queue-unref">g_test_queue_unref</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_expect_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message">g_test_expect_message</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_assert_expected_messages href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-assert-expected-messages">g_test_assert_expected_messages</A></TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess">g_test_trap_subprocess</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_trap_has_passed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-has-passed">g_test_trap_has_passed</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_trap_reached_timeout&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-reached-timeout">g_test_trap_reached_timeout</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_passed href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-passed">g_test_trap_assert_passed</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_failed href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-failed">g_test_trap_assert_failed</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_stdout() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout">g_test_trap_assert_stdout</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_stdout_unmatched() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout-unmatched">g_test_trap_assert_stdout_unmatched</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_stderr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr">g_test_trap_assert_stderr</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_trap_assert_stderr_unmatched() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr-unmatched">g_test_trap_assert_stderr_unmatched</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_trap_fork&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-fork">g_test_trap_fork</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_test_rand_bit href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-bit">g_test_rand_bit</A></TD></TR>
<TR>
<TD class=function_type><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=returnvalue>gint32</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_rand_int&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int">g_test_rand_int</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=returnvalue>gint32</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_test_rand_int_range&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int-range">g_test_rand_int_range</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>double</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_rand_double&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-double">g_test_rand_double</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>double</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_rand_double_range&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-double-range">g_test_rand_double_range</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert">g_assert</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_not_reached href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-not-reached">g_assert_not_reached</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_cmpstr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpstr">g_assert_cmpstr</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_cmpint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpint">g_assert_cmpint</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_cmpuint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpuint">g_assert_cmpuint</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_cmphex() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmphex">g_assert_cmphex</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_cmpfloat() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpfloat">g_assert_cmpfloat</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_no_error() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-no-error">g_assert_no_error</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_error() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-error">g_assert_error</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_true() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-true">g_assert_true</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_false() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-false">g_assert_false</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_null() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-null">g_assert_null</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_assert_nonnull() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-nonnull">g_assert_nonnull</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_set_nonfatal_assertions&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-set-nonfatal-assertions">g_test_set_nonfatal_assertions</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A class=link title=GTestFixtureFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFixtureFunc">*GTestFixtureFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=returnvalue>GTestCase</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_create_case&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-case">g_test_create_case</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=returnvalue>GTestSuite</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_create_suite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-suite">g_test_create_suite</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=returnvalue>GTestSuite</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_test_get_root&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-get-root">g_test_get_root</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_suite_add&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-suite-add">g_test_suite_add</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_suite_add_suite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-suite-add-suite">g_test_suite_add_suite</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_test_run_suite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run-suite">g_test_run_suite</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Testing.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GTestFileType" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFileType">GTestFileType</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GTestTrapFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestTrapFlags">GTestTrapFlags</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GTestSubprocessFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSubprocessFlags">GTestSubprocessFlags</A></TD></TR>
<TR>
<TD class=typedef_keyword>typedef</TD>
<TD class=function_name><A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase">GTestCase</A></TD></TR>
<TR>
<TD class=typedef_keyword>typedef</TD>
<TD class=function_name><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite">GTestSuite</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Testing.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Testing.description></A>
<H2>Description</H2>
<P>GLib provides a framework for writing and maintaining unit tests in parallel to the code they are testing. The API is designed according to established concepts found in the other test frameworks (JUnit, NUnit, RUnit), which in turn is based on smalltalk unit testing concepts.</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>Test case: Tests (test methods) are grouped together with their fixture into test cases.</P></LI>
<LI class=listitem>
<P>Fixture: A test fixture consists of fixture data and setup and teardown methods to establish the environment for the test functions. We use fresh fixtures, i.e. fixtures are newly set up and torn down around each test invocation to avoid dependencies between tests.</P></LI>
<LI class=listitem>
<P>Test suite: Test cases can be grouped into test suites, to allow subsets of the available tests to be run. Test suites can be grouped into other test suites as well.</P></LI></UL></DIV>
<P>The API is designed to handle creation and registration of test suites and test cases implicitly. A simple call like</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-func">g_test_add_func</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"/misc/assertions"</SPAN><SPAN class="gtkdoc opt">,</SPAN> test_assertions<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>creates a test suite called "misc" with a single test case named "assertions", which consists of running the test_assertions function.</P>
<P>In addition to the traditional <A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert"><CODE class=function>g_assert()</CODE></A>, the test framework provides an extended set of assertions for string and numerical comparisons: <A class=link title=g_assert_cmpfloat() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpfloat"><CODE class=function>g_assert_cmpfloat()</CODE></A>, <A class=link title=g_assert_cmpint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpint"><CODE class=function>g_assert_cmpint()</CODE></A>, <A class=link title=g_assert_cmpuint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpuint"><CODE class=function>g_assert_cmpuint()</CODE></A>, <A class=link title=g_assert_cmphex() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmphex"><CODE class=function>g_assert_cmphex()</CODE></A>, <A class=link title=g_assert_cmpstr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpstr"><CODE class=function>g_assert_cmpstr()</CODE></A>. The advantage of these variants over plain <A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert"><CODE class=function>g_assert()</CODE></A> is that the assertion messages can be more elaborate, and include the values of the compared entities.</P>
<P>GLib ships with two utilities called gtester and gtester-report to facilitate running tests and producing nicely formatted test reports.</P></DIV>
<DIV class=refsect1><A name=glib-Testing.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-test-minimized-result></A>
<H3>g_test_minimized_result&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_minimized_result (<EM class=parameter><CODE><SPAN class=type>double</SPAN> minimized_quantity</CODE></EM>,
                         <EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *format</CODE></EM>,
                         <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Report the result of a performance or measurement test. The test should generally strive to minimize the reported quantities (smaller values are better than larger ones), this and <EM class=parameter><CODE>minimized_quantity</CODE></EM> can determine sorting order for test result reports.</P>
<DIV class=refsect3><A name=id-1.5.29.7.2.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>minimized_quantity</P></TD>
<TD class=parameter_description>
<P>the reported value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the format string of the report message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>arguments to pass to the <CODE class=function>printf()</CODE> function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-maximized-result></A>
<H3>g_test_maximized_result&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_maximized_result (<EM class=parameter><CODE><SPAN class=type>double</SPAN> maximized_quantity</CODE></EM>,
                         <EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *format</CODE></EM>,
                         <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Report the result of a performance or measurement test. The test should generally strive to maximize the reported quantities (larger values are better than smaller ones), this and <EM class=parameter><CODE>maximized_quantity</CODE></EM> can determine sorting order for test result reports.</P>
<DIV class=refsect3><A name=id-1.5.29.7.3.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>maximized_quantity</P></TD>
<TD class=parameter_description>
<P>the reported value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the format string of the report message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>arguments to pass to the <CODE class=function>printf()</CODE> function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-init></A>
<H3>g_test_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_init (<EM class=parameter><CODE><SPAN class=type>int</SPAN> *argc</CODE></EM>,
             <EM class=parameter><CODE><SPAN class=type>char</SPAN> ***argv</CODE></EM>,
             <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Initialize the GLib testing framework, e.g. by seeding the test random number generator, the name for <A class=link title=g_get_prgname&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-get-prgname"><CODE class=function>g_get_prgname()</CODE></A> and parsing test related command line args.</P>
<P>So far, the following arguments are understood:</P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P><CODE class=literal>-l</CODE>: List test cases available in a test executable.</P></LI>
<LI class=listitem>
<P><CODE class=literal>--seed=SEED</CODE>: Provide a random seed to reproduce test runs using random numbers.</P></LI>
<LI class=listitem>
<P><CODE class=literal>--verbose</CODE>: Run tests verbosely.</P></LI>
<LI class=listitem>
<P><CODE class=literal>-q</CODE>, <CODE class=literal>--quiet</CODE>: Run tests quietly.</P></LI>
<LI class=listitem>
<P><CODE class=literal>-p PATH</CODE>: Execute all tests matching the given path. This can also be used to force a test to run that would otherwise be skipped (ie, a test whose name contains "/subprocess").</P></LI>
<LI class=listitem>
<P><CODE class=literal>-m {perf|slow|thorough|quick|undefined|no-undefined}</CODE>: Execute tests according to these test modes:</P>
<P><CODE class=literal>perf</CODE>: Performance tests, may take long and report results.</P>
<P><CODE class=literal>slow</CODE>, <CODE class=literal>thorough</CODE>: Slow and thorough tests, may take quite long and maximize coverage.</P>
<P><CODE class=literal>quick</CODE>: Quick tests, should run really quickly and give good coverage.</P>
<P><CODE class=literal>undefined</CODE>: Tests for undefined behaviour, may provoke programming errors under <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> or <A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message"><CODE class=function>g_test_expect_messages()</CODE></A> to check that appropriate assertions or warnings are given</P>
<P><CODE class=literal>no-undefined</CODE>: Avoid tests for undefined behaviour</P></LI>
<LI class=listitem>
<P><CODE class=literal>--debug-log</CODE>: Debug test logging output.</P></LI></UL></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.4.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>argc</P></TD>
<TD class=parameter_description>
<P>Address of the <EM class=parameter><CODE>argc</CODE></EM> parameter of the <CODE class=function>main()</CODE> function. Changed if any arguments were handled.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>argv</P></TD>
<TD class=parameter_description>
<P>Address of the <EM class=parameter><CODE>argv</CODE></EM> parameter of <CODE class=function>main()</CODE>. Any parameters understood by <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A> stripped before return.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated list of special options. Currently the only defined option is <CODE class=literal>"no_g_set_prgname"</CODE>, which will cause <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A> to not call <A class=link title=g_set_prgname&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-set-prgname"><CODE class=function>g_set_prgname()</CODE></A>.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-initialized></A>
<H3>g_test_initialized</H3><PRE class=programlisting>#define             g_test_initialized()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A> has been called.</P>
<DIV class=refsect3><A name=id-1.5.29.7.5.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A> has been called.</P>
<P></P></DIV>
<P class=since>Since 2.36</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-quick></A>
<H3>g_test_quick</H3><PRE class=programlisting>#define             g_test_quick()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in quick mode. Exactly one of <A class=link title=g_test_quick href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quick"><CODE class=function>g_test_quick()</CODE></A> and <A class=link title=g_test_slow href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-slow"><CODE class=function>g_test_slow()</CODE></A> is active in any run; there is no "medium speed".</P>
<DIV class=refsect3><A name=id-1.5.29.7.6.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if in quick mode</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-slow></A>
<H3>g_test_slow</H3><PRE class=programlisting>#define             g_test_slow()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in slow mode. Exactly one of <A class=link title=g_test_quick href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quick"><CODE class=function>g_test_quick()</CODE></A> and <A class=link title=g_test_slow href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-slow"><CODE class=function>g_test_slow()</CODE></A> is active in any run; there is no "medium speed".</P>
<DIV class=refsect3><A name=id-1.5.29.7.7.5></A>
<H4>Returns</H4>
<P>the opposite of <A class=link title=g_test_quick href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quick"><CODE class=function>g_test_quick()</CODE></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-thorough></A>
<H3>g_test_thorough</H3><PRE class=programlisting>#define             g_test_thorough()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in thorough mode, equivalent to <A class=link title=g_test_slow href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-slow"><CODE class=function>g_test_slow()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.8.5></A>
<H4>Returns</H4>
<P>the same thing as <A class=link title=g_test_slow href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-slow"><CODE class=function>g_test_slow()</CODE></A></P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-perf></A>
<H3>g_test_perf</H3><PRE class=programlisting>#define             g_test_perf()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in performance mode.</P>
<DIV class=refsect3><A name=id-1.5.29.7.9.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if in performance mode</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-verbose></A>
<H3>g_test_verbose</H3><PRE class=programlisting>#define             g_test_verbose()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in verbose mode. The default is neither <A class=link title=g_test_verbose href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-verbose"><CODE class=function>g_test_verbose()</CODE></A> nor <A class=link title=g_test_quiet href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quiet"><CODE class=function>g_test_quiet()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.10.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if in verbose mode</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-undefined></A>
<H3>g_test_undefined</H3><PRE class=programlisting>#define             g_test_undefined()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests may provoke assertions and other formally-undefined behaviour, to verify that appropriate warnings are given. It might, in some cases, be useful to turn this off if running tests under valgrind.</P>
<DIV class=refsect3><A name=id-1.5.29.7.11.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests may provoke programming errors</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-quiet></A>
<H3>g_test_quiet</H3><PRE class=programlisting>#define             g_test_quiet()</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if tests are run in quiet mode. The default is neither <A class=link title=g_test_verbose href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-verbose"><CODE class=function>g_test_verbose()</CODE></A> nor <A class=link title=g_test_quiet href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-quiet"><CODE class=function>g_test_quiet()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.12.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if in quiet mode</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-subprocess></A>
<H3>g_test_subprocess&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_test_subprocess (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> (after <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A> has been called) if the test program is running under <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.13.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the test program is running under <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<P></P></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-run></A>
<H3>g_test_run&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_test_run (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Runs all tests under the toplevel suite which can be retrieved with <A class=link title=g_test_get_root&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-get-root"><CODE class=function>g_test_get_root()</CODE></A>. Similar to <A class=link title=g_test_run_suite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run-suite"><CODE class=function>g_test_run_suite()</CODE></A>, the test cases to be run are filtered according to test path arguments (<CODE class=literal>-p testpath</CODE>) as parsed by <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A>. <A class=link title=g_test_run_suite&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run-suite"><CODE class=function>g_test_run_suite()</CODE></A> or <A class=link title=g_test_run&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run"><CODE class=function>g_test_run()</CODE></A> may only be called once in a program.</P>
<P>In general, the tests and sub-suites within each suite are run in the order in which they are defined. However, note that prior to GLib 2.36, there was a bug in the <CODE class=literal>g_test_add_*</CODE> functions which caused them to create multiple suites with the same name, meaning that if you created tests "/foo/simple", "/bar/simple", and "/foo/using-bar" in that order, they would get run in that order (since <A class=link title=g_test_run&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run"><CODE class=function>g_test_run()</CODE></A> would run the first "/foo" suite, then the "/bar" suite, then the second "/foo" suite). As of 2.36, this bug is fixed, and adding the tests in that order would result in a running order of "/foo/simple", "/foo/using-bar", "/bar/simple". If this new ordering is sub-optimal (because it puts more-complicated tests before simpler ones, making it harder to figure out exactly what has failed), you can fix it by changing the test paths to group tests by suite in a way that will result in the desired running order. Eg, "/simple/foo", "/simple/bar", "/complex/foo-using-bar".</P>
<P>However, you should never make the actual result of a test depend on the order that tests are run in. If you need to ensure that some particular code runs before or after a given test case, use <A class=link title=g_test_add() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add"><CODE class=function>g_test_add()</CODE></A>, which lets you specify setup and teardown functions.</P>
<P>If all tests are skipped, this function will return 0 if producing TAP output, or 77 (treated as "skip test" by Automake) otherwise.</P>
<DIV class=refsect3><A name=id-1.5.29.7.14.8></A>
<H4>Returns</H4>
<P>0 on success, 1 on failure (assuming it returns at all), 0 or 77 if all tests were skipped with <A class=link title=g_test_skip&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-skip"><CODE class=function>g_test_skip()</CODE></A></P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestFunc></A>
<H3>GTestFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GTestFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>The type used for test case functions.</P>
<P class=since>Since 2.28</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-add-func></A>
<H3>g_test_add_func&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_add_func (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *testpath</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=GTestFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFunc"><SPAN class=type>GTestFunc</SPAN></A> test_func</CODE></EM>);</PRE>
<P>Create a new test case, similar to <A class=link title=g_test_create_case&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-case"><CODE class=function>g_test_create_case()</CODE></A>. However the test is assumed to use no fixture, and test suites are automatically created on the fly and added to the root fixture, based on the slash-separated portions of <EM class=parameter><CODE>testpath</CODE></EM> .</P>
<P>If <EM class=parameter><CODE>testpath</CODE></EM> includes the component "subprocess" anywhere in it, the test will be skipped by default, and only run if explicitly required via the <CODE class=literal>-p</CODE> command-line option or <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.16.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>testpath</P></TD>
<TD class=parameter_description>
<P>/-separated test case path name for the test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_func</P></TD>
<TD class=parameter_description>
<P>The test function to invoke for this test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestDataFunc></A>
<H3>GTestDataFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GTestDataFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<P>The type used for test case functions that take an extra pointer argument.</P>
<DIV class=refsect3><A name=id-1.5.29.7.17.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>the data provided when registering the test</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.28</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-add-data-func></A>
<H3>g_test_add_data_func&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_add_data_func (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *testpath</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> test_data</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=GTestDataFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestDataFunc"><SPAN class=type>GTestDataFunc</SPAN></A> test_func</CODE></EM>);</PRE>
<P>Create a new test case, similar to <A class=link title=g_test_create_case&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-case"><CODE class=function>g_test_create_case()</CODE></A>. However the test is assumed to use no fixture, and test suites are automatically created on the fly and added to the root fixture, based on the slash-separated portions of <EM class=parameter><CODE>testpath</CODE></EM> . The <EM class=parameter><CODE>test_data</CODE></EM> argument will be passed as first argument to <EM class=parameter><CODE>test_func</CODE></EM> .</P>
<P>If <EM class=parameter><CODE>testpath</CODE></EM> includes the component "subprocess" anywhere in it, the test will be skipped by default, and only run if explicitly required via the <CODE class=literal>-p</CODE> command-line option or <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.18.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>testpath</P></TD>
<TD class=parameter_description>
<P>/-separated test case path name for the test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_data</P></TD>
<TD class=parameter_description>
<P>Test data argument for the test function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_func</P></TD>
<TD class=parameter_description>
<P>The test function to invoke for this test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-add-data-func-full></A>
<H3>g_test_add_data_func_full&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_add_data_func_full (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *testpath</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> test_data</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=GTestDataFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestDataFunc"><SPAN class=type>GTestDataFunc</SPAN></A> test_func</CODE></EM>,
                           <EM class=parameter><CODE><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> data_free_func</CODE></EM>);</PRE>
<P>Create a new test case, as with <A class=link title=g_test_add_data_func&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-data-func"><CODE class=function>g_test_add_data_func()</CODE></A>, but freeing <EM class=parameter><CODE>test_data</CODE></EM> after the test run is complete.</P>
<DIV class=refsect3><A name=id-1.5.29.7.19.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>testpath</P></TD>
<TD class=parameter_description>
<P>/-separated test case path name for the test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_data</P></TD>
<TD class=parameter_description>
<P>Test data argument for the test function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_func</P></TD>
<TD class=parameter_description>
<P>The test function to invoke for this test.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data_free_func</P></TD>
<TD class=parameter_description>
<P><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> for <EM class=parameter><CODE>test_data</CODE></EM> .</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-add></A>
<H3>g_test_add()</H3><PRE class=programlisting>#define             g_test_add(testpath, Fixture, tdata, fsetup, ftest, fteardown)</PRE>
<P>Hook up a new test case at <EM class=parameter><CODE>testpath</CODE></EM> , similar to <A class=link title=g_test_add_func&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-func"><CODE class=function>g_test_add_func()</CODE></A>. A fixture data structure with setup and teardown function may be provided though, similar to <A class=link title=g_test_create_case&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-case"><CODE class=function>g_test_create_case()</CODE></A>. <A class=link title=g_test_add() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add"><CODE class=function>g_test_add()</CODE></A> is implemented as a macro, so that the <CODE class=function>fsetup()</CODE>, <CODE class=function>ftest()</CODE> and <CODE class=function>fteardown()</CODE> callbacks can expect a <EM class=parameter><CODE>Fixture</CODE></EM> pointer as first argument in a type safe manner.</P>
<DIV class=refsect3><A name=id-1.5.29.7.20.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>testpath</P></TD>
<TD class=parameter_description>
<P>The test path for a new test case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>Fixture</P></TD>
<TD class=parameter_description>
<P>The type of a fixture data structure.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>tdata</P></TD>
<TD class=parameter_description>
<P>Data argument for the test functions.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>fsetup</P></TD>
<TD class=parameter_description>
<P>The function to set up the fixture data.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>ftest</P></TD>
<TD class=parameter_description>
<P>The actual test function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>fteardown</P></TD>
<TD class=parameter_description>
<P>The function to tear down the fixture data.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-build-filename></A>
<H3>g_test_build_filename&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_test_build_filename (<EM class=parameter><CODE><A class=link title="enum GTestFileType" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFileType"><SPAN class=type>GTestFileType</SPAN></A> file_type</CODE></EM>,
                       <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *first_path</CODE></EM>,
                       <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Creates the pathname to a data file that is required for a test.</P>
<P>This function is conceptually similar to <A class=link title=g_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Miscellaneous-Utility-Functions.html#g-build-filename"><CODE class=function>g_build_filename()</CODE></A> except that the first argument has been replaced with a <A class=link title="enum GTestFileType" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFileType"><SPAN class=type>GTestFileType</SPAN></A> argument.</P>
<P>The data file should either have been distributed with the module containing the test (<A class=link href="https://developer.gnome.org/glib/stable/glib-Testing.html#G-TEST-DIST:CAPS"><CODE class=literal>G_TEST_DIST</CODE></A>) or built as part of the build system of that module (<A class=link href="https://developer.gnome.org/glib/stable/glib-Testing.html#G-TEST-BUILT:CAPS"><CODE class=literal>G_TEST_BUILT</CODE></A>).</P>
<P>In order for this function to work in srcdir != builddir situations, the G_TEST_SRCDIR and G_TEST_BUILDDIR environment variables need to have been defined. As of 2.38, this is done by the glib.mk included in GLib. Please ensure that your copy is up to date before using this function.</P>
<P>In case neither variable is set, this function will fall back to using the dirname portion of argv[0], possibly removing ".libs". This allows for casual running of tests directly from the commandline in the srcdir == builddir case and should also support running of installed tests, assuming the data files have been installed in the same relative path as the test binary.</P>
<DIV class=refsect3><A name=id-1.5.29.7.21.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file_type</P></TD>
<TD class=parameter_description>
<P>the type of file (built vs. distributed)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>first_path</P></TD>
<TD class=parameter_description>
<P>the first segment of the pathname</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated additional path segments</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.21.10></A>
<H4>Returns</H4>
<P>the path of the file, to be freed using <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A></P>
<P></P></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-get-filename></A>
<H3>g_test_get_filename&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_test_get_filename (<EM class=parameter><CODE><A class=link title="enum GTestFileType" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFileType"><SPAN class=type>GTestFileType</SPAN></A> file_type</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *first_path</CODE></EM>,
                     <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Gets the pathname to a data file that is required for a test.</P>
<P>This is the same as <A class=link title=g_test_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-build-filename"><CODE class=function>g_test_build_filename()</CODE></A> with two differences. The first difference is that must only use this function from within a testcase function. The second difference is that you need not free the return value -- it will be automatically freed when the testcase finishes running.</P>
<P>It is safe to use this function from a thread inside of a testcase but you must ensure that all such uses occur before the main testcase function returns (ie: it is best to ensure that all threads have been joined).</P>
<DIV class=refsect3><A name=id-1.5.29.7.22.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file_type</P></TD>
<TD class=parameter_description>
<P>the type of file (built vs. distributed)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>first_path</P></TD>
<TD class=parameter_description>
<P>the first segment of the pathname</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P><A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated additional path segments</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.22.8></A>
<H4>Returns</H4>
<P>the path, automatically freed at the end of the testcase</P>
<P></P></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-get-dir></A>
<H3>g_test_get_dir&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_test_get_dir (<EM class=parameter><CODE><A class=link title="enum GTestFileType" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFileType"><SPAN class=type>GTestFileType</SPAN></A> file_type</CODE></EM>);</PRE>
<P>Gets the pathname of the directory containing test files of the type specified by <EM class=parameter><CODE>file_type</CODE></EM> .</P>
<P>This is approximately the same as calling g_test_build_filename("."), but you don't need to free the return value.</P>
<DIV class=refsect3><A name=id-1.5.29.7.23.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file_type</P></TD>
<TD class=parameter_description>
<P>the type of file (built vs. distributed)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.23.7></A>
<H4>Returns</H4>
<P>the path of the directory, owned by GLib</P>
<P></P></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-fail></A>
<H3>g_test_fail&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_fail (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Indicates that a test failed. This function can be called multiple times from the same test. You can use this function if your test failed in a recoverable way.</P>
<P>Do not use this function if the failure of a test could cause other tests to malfunction.</P>
<P>Calling this function will not stop the test from running, you need to return from the test function yourself. So you can produce additional diagnostic messages or even continue running the test.</P>
<P>If not called from inside a test, this function does nothing.</P>
<P class=since>Since 2.30</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-skip></A>
<H3>g_test_skip&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_skip (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *msg</CODE></EM>);</PRE>
<P>Indicates that a test was skipped.</P>
<P>Calling this function will not stop the test from running, you need to return from the test function yourself. So you can produce additional diagnostic messages or even continue running the test.</P>
<P>If not called from inside a test, this function does nothing.</P>
<DIV class=refsect3><A name=id-1.5.29.7.25.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>msg</P></TD>
<TD class=parameter_description>
<P>explanation. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-incomplete></A>
<H3>g_test_incomplete&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_incomplete (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *msg</CODE></EM>);</PRE>
<P>Indicates that a test failed because of some incomplete functionality. This function can be called multiple times from the same test.</P>
<P>Calling this function will not stop the test from running, you need to return from the test function yourself. So you can produce additional diagnostic messages or even continue running the test.</P>
<P>If not called from inside a test, this function does nothing.</P>
<DIV class=refsect3><A name=id-1.5.29.7.26.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>msg</P></TD>
<TD class=parameter_description>
<P>explanation. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-failed></A>
<H3>g_test_failed&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_test_failed (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Returns whether a test has already failed. This will be the case when <A class=link title=g_test_fail&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-fail"><CODE class=function>g_test_fail()</CODE></A>, <A class=link title=g_test_incomplete&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-incomplete"><CODE class=function>g_test_incomplete()</CODE></A> or <A class=link title=g_test_skip&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-skip"><CODE class=function>g_test_skip()</CODE></A> have been called, but also if an assertion has failed.</P>
<P>This can be useful to return early from a test if continuing after a failed assertion might be harmful.</P>
<P>The return value of this function is only meaningful if it is called from inside a test function.</P>
<DIV class=refsect3><A name=id-1.5.29.7.27.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the test has failed</P>
<P></P></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-message></A>
<H3>g_test_message&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_message (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *format</CODE></EM>,
                <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Add a message to the test report.</P>
<DIV class=refsect3><A name=id-1.5.29.7.28.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>printf-like arguments to <EM class=parameter><CODE>format</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-bug-base></A>
<H3>g_test_bug_base&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_bug_base (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *uri_pattern</CODE></EM>);</PRE>
<P>Specify the base URI for bug reports.</P>
<P>The base URI is used to construct bug report messages for <A class=link title=g_test_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-message"><CODE class=function>g_test_message()</CODE></A> when <A class=link title=g_test_bug&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-bug"><CODE class=function>g_test_bug()</CODE></A> is called. Calling this function outside of a test case sets the default base URI for all test cases. Calling it from within a test case changes the base URI for the scope of the test case only. Bug URIs are constructed by appending a bug specific URI portion to <EM class=parameter><CODE>uri_pattern</CODE></EM> , or by replacing the special string '%s' within <EM class=parameter><CODE>uri_pattern</CODE></EM> if that is present.</P>
<DIV class=refsect3><A name=id-1.5.29.7.29.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>uri_pattern</P></TD>
<TD class=parameter_description>
<P>the base pattern for bug URIs</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-bug></A>
<H3>g_test_bug&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_bug (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *bug_uri_snippet</CODE></EM>);</PRE>
<P>This function adds a message to test reports that associates a bug URI with a test case. Bug URIs are constructed from a base URI set with <A class=link title=g_test_bug_base&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-bug-base"><CODE class=function>g_test_bug_base()</CODE></A> and <EM class=parameter><CODE>bug_uri_snippet</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.30.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>bug_uri_snippet</P></TD>
<TD class=parameter_description>
<P>Bug specific bug tracker URI portion.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestLogFatalFunc></A>
<H3>GTestLogFatalFunc&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
<SPAN class=c_punctuation>(</SPAN>*GTestLogFatalFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *log_domain</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title="enum GLogLevelFlags" href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#GLogLevelFlags"><SPAN class=type>GLogLevelFlags</SPAN></A> log_level</CODE></EM>,
                      <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *message</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<P>Specifies the prototype of fatal log handler functions.</P>
<DIV class=refsect3><A name=id-1.5.29.7.31.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>log_domain</P></TD>
<TD class=parameter_description>
<P>the log domain of the message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>log_level</P></TD>
<TD class=parameter_description>
<P>the log level of the message (including the fatal and recursion flags)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>message</P></TD>
<TD class=parameter_description>
<P>the message to process</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>user data, set in <A class=link title=g_test_log_set_fatal_handler&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-log-set-fatal-handler"><CODE class=function>g_test_log_set_fatal_handler()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.31.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the program should abort, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> otherwise</P>
<P></P></DIV>
<P class=since>Since 2.22</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-log-set-fatal-handler></A>
<H3>g_test_log_set_fatal_handler&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_log_set_fatal_handler (<EM class=parameter><CODE><A class=link title=GTestLogFatalFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestLogFatalFunc"><SPAN class=type>GTestLogFatalFunc</SPAN></A> log_func</CODE></EM>,
                              <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<P>Installs a non-error fatal log handler which can be used to decide whether log messages which are counted as fatal abort the program.</P>
<P>The use case here is that you are running a test case that depends on particular libraries or circumstances and cannot prevent certain known critical or warning messages. So you install a handler that compares the domain and message to precisely not abort in such a case.</P>
<P>Note that the handler is reset at the beginning of any test case, so you have to set it inside each test function which needs the special behavior.</P>
<P>This handler has no effect on g_error messages.</P>
<DIV class=refsect3><A name=id-1.5.29.7.32.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>log_func</P></TD>
<TD class=parameter_description>
<P>the log handler function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>data passed to the log handler.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.22</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-timer-start></A>
<H3>g_test_timer_start&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_timer_start (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Start a timing test. Call <A class=link title=g_test_timer_elapsed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-elapsed"><CODE class=function>g_test_timer_elapsed()</CODE></A> when the task is supposed to be done. Call this function again to restart the timer.</P>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-timer-elapsed></A>
<H3>g_test_timer_elapsed&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>double</SPAN>
g_test_timer_elapsed (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Get the time since the last start of the timer with <A class=link title=g_test_timer_start&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-start"><CODE class=function>g_test_timer_start()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.34.5></A>
<H4>Returns</H4>
<P>the time since the last start of the timer, as a double</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-timer-last></A>
<H3>g_test_timer_last&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>double</SPAN>
g_test_timer_last (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Report the last result of <A class=link title=g_test_timer_elapsed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-elapsed"><CODE class=function>g_test_timer_elapsed()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.35.5></A>
<H4>Returns</H4>
<P>the last result of <A class=link title=g_test_timer_elapsed&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-timer-elapsed"><CODE class=function>g_test_timer_elapsed()</CODE></A>, as a double</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-queue-free></A>
<H3>g_test_queue_free&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_queue_free (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> gfree_pointer</CODE></EM>);</PRE>
<P>Enqueue a pointer to be released with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> during the next teardown phase. This is equivalent to calling <A class=link title=g_test_queue_destroy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-queue-destroy"><CODE class=function>g_test_queue_destroy()</CODE></A> with a destroy callback of <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.36.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>gfree_pointer</P></TD>
<TD class=parameter_description>
<P>the pointer to be stored.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-queue-destroy></A>
<H3>g_test_queue_destroy&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_queue_destroy (<EM class=parameter><CODE><A class=link title=GDestroyNotify&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Datasets.html#GDestroyNotify"><SPAN class=type>GDestroyNotify</SPAN></A> destroy_func</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> destroy_data</CODE></EM>);</PRE>
<P>This function enqueus a callback <EM class=parameter><CODE>destroy_func</CODE></EM> to be executed during the next test case teardown phase. This is most useful to auto destruct allocted test resources at the end of a test run. Resources are released in reverse queue order, that means enqueueing callback A before callback B will cause <CODE class=function>B()</CODE> to be called before <CODE class=function>A()</CODE> during teardown.</P>
<DIV class=refsect3><A name=id-1.5.29.7.37.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>destroy_func</P></TD>
<TD class=parameter_description>
<P>Destroy callback for teardown phase.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>destroy_data</P></TD>
<TD class=parameter_description>
<P>Destroy callback data.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-queue-unref></A>
<H3>g_test_queue_unref()</H3><PRE class=programlisting>#define             g_test_queue_unref(gobject)</PRE>
<P>Enqueue an object to be released with <A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-unref"><CODE class=function>g_object_unref()</CODE></A> during the next teardown phase. This is equivalent to calling <A class=link title=g_test_queue_destroy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-queue-destroy"><CODE class=function>g_test_queue_destroy()</CODE></A> with a destroy callback of <A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-unref"><CODE class=function>g_object_unref()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.38.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>gobject</P></TD>
<TD class=parameter_description>
<P>the object to unref</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-expect-message></A>
<H3>g_test_expect_message&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_expect_message (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *log_domain</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title="enum GLogLevelFlags" href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#GLogLevelFlags"><SPAN class=type>GLogLevelFlags</SPAN></A> log_level</CODE></EM>,
                       <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *pattern</CODE></EM>);</PRE>
<P>Indicates that a message with the given <EM class=parameter><CODE>log_domain</CODE></EM> and <EM class=parameter><CODE>log_level</CODE></EM> , with text matching <EM class=parameter><CODE>pattern</CODE></EM> , is expected to be logged. When this message is logged, it will not be printed, and the test case will not abort.</P>
<P>Use <A class=link title=g_test_assert_expected_messages href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-assert-expected-messages"><CODE class=function>g_test_assert_expected_messages()</CODE></A> to assert that all previously-expected messages have been seen and suppressed.</P>
<P>You can call this multiple times in a row, if multiple messages are expected as a result of a single call. (The messages must appear in the same order as the calls to <A class=link title=g_test_expect_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message"><CODE class=function>g_test_expect_message()</CODE></A>.)</P>
<P>For example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc slc">// g_main_context_push_thread_default() should fail if the</SPAN>
<SPAN class="gtkdoc slc">// context is already owned by another thread.</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message">g_test_expect_message</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>G_LOG_DOMAIN<SPAN class="gtkdoc opt">,</SPAN>
                       G_LOG_LEVEL_CRITICAL<SPAN class="gtkdoc opt">,</SPAN>
                       <SPAN class=string>"assertion*acquired_context*failed"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html#g-main-context-push-thread-default">g_main_context_push_thread_default</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>bad_context<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-assert-expected-messages">g_test_assert_expected_messages</A></SPAN> <SPAN class="gtkdoc opt">();</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Note that you cannot use this to test <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A> messages, since <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A> intentionally never returns even if the program doesn't abort; use <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> in this case.</P>
<P>If messages at <A class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#G-LOG-LEVEL-DEBUG:CAPS"><CODE class=literal>G_LOG_LEVEL_DEBUG</CODE></A> are emitted, but not explicitly expected via <A class=link title=g_test_expect_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message"><CODE class=function>g_test_expect_message()</CODE></A> then they will be ignored.</P>
<DIV class=refsect3><A name=id-1.5.29.7.39.12></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>log_domain</P></TD>
<TD class=parameter_description>
<P>the log domain of the message. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>log_level</P></TD>
<TD class=parameter_description>
<P>the log level of the message</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>pattern</P></TD>
<TD class=parameter_description>
<P>a glob-style <A class=link title="Glob-style pattern matching" href="https://developer.gnome.org/glib/stable/glib-Glob-style-pattern-matching.html">pattern</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-assert-expected-messages></A>
<H3>g_test_assert_expected_messages</H3><PRE class=programlisting>#define             g_test_assert_expected_messages()</PRE>
<P>Asserts that all messages previously indicated via <A class=link title=g_test_expect_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message"><CODE class=function>g_test_expect_message()</CODE></A> have been seen and suppressed.</P>
<P>If messages at <A class=link href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#G-LOG-LEVEL-DEBUG:CAPS"><CODE class=literal>G_LOG_LEVEL_DEBUG</CODE></A> are emitted, but not explicitly expected via <A class=link title=g_test_expect_message&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-expect-message"><CODE class=function>g_test_expect_message()</CODE></A> then they will be ignored.</P>
<P class=since>Since 2.34</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-subprocess></A>
<H3>g_test_trap_subprocess&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_trap_subprocess (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *test_path</CODE></EM>,
                        <EM class=parameter><CODE><A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=type>guint64</SPAN></A> usec_timeout</CODE></EM>,
                        <EM class=parameter><CODE><A class=link title="enum GTestSubprocessFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSubprocessFlags"><SPAN class=type>GTestSubprocessFlags</SPAN></A> test_flags</CODE></EM>);</PRE>
<P>Respawns the test program to run only <EM class=parameter><CODE>test_path</CODE></EM> in a subprocess. This can be used for a test case that might not return, or that might abort.</P>
<P>If <EM class=parameter><CODE>test_path</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> then the same test is re-run in a subprocess. You can use <A class=link title=g_test_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-subprocess"><CODE class=function>g_test_subprocess()</CODE></A> to determine whether the test is in a subprocess or not.</P>
<P><EM class=parameter><CODE>test_path</CODE></EM> can also be the name of the parent test, followed by "<CODE class=literal>/subprocess/</CODE>" and then a name for the specific subtest (or just ending with "<CODE class=literal>/subprocess</CODE>" if the test only has one child test); tests with names of this form will automatically be skipped in the parent process.</P>
<P>If <EM class=parameter><CODE>usec_timeout</CODE></EM> is non-0, the test subprocess is aborted and considered failing if its run time exceeds it.</P>
<P>The subprocess behavior can be configured with the <A class=link title="enum GTestSubprocessFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSubprocessFlags"><SPAN class=type>GTestSubprocessFlags</SPAN></A> flags.</P>
<P>You can use methods such as <A class=link title=g_test_trap_assert_passed href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-passed"><CODE class=function>g_test_trap_assert_passed()</CODE></A>, <A class=link title=g_test_trap_assert_failed href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-failed"><CODE class=function>g_test_trap_assert_failed()</CODE></A>, and <A class=link title=g_test_trap_assert_stderr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr"><CODE class=function>g_test_trap_assert_stderr()</CODE></A> to check the results of the subprocess. (But note that <A class=link title=g_test_trap_assert_stdout() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout"><CODE class=function>g_test_trap_assert_stdout()</CODE></A> and <A class=link title=g_test_trap_assert_stderr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr"><CODE class=function>g_test_trap_assert_stderr()</CODE></A> cannot be used if <EM class=parameter><CODE>test_flags</CODE></EM> specifies that the child should inherit the parent stdout/stderr.) </P>
<P>If your <CODE class=literal><CODE class=function>main()</CODE></CODE> needs to behave differently in the subprocess, you can call <A class=link title=g_test_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-subprocess"><CODE class=function>g_test_subprocess()</CODE></A> (after calling <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A>) to see whether you are in a subprocess.</P>
<P>The following example tests that calling <CODE class=literal>my_object_new(1000000)</CODE> will abort with an error message.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>test_create_large_object_subprocess</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-subprocess">g_test_subprocess</A></SPAN> <SPAN class="gtkdoc opt">())</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function>my_object_new</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>1000000</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=keyword>return</SPAN><SPAN class="gtkdoc opt">;</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>

  <SPAN class="gtkdoc slc">// Reruns this same test in a subprocess</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess">g_test_trap_subprocess</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>NULL<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-failed">g_test_trap_assert_failed</A></SPAN> <SPAN class="gtkdoc opt">();</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr">g_test_trap_assert_stderr</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"*ERROR*too large*"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>main</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN> argc<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">char</SPAN> <SPAN class="gtkdoc opt">**</SPAN>argv<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init">g_test_init</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>argc<SPAN class="gtkdoc opt">, &amp;</SPAN>argv<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-func">g_test_add_func</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"/myobject/create_large_object"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                   test_create_large_object<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=keyword>return</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run">g_test_run</A></SPAN> <SPAN class="gtkdoc opt">();</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.5.29.7.41.14></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>test_path</P></TD>
<TD class=parameter_description>
<P>Test to run in a subprocess. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>usec_timeout</P></TD>
<TD class=parameter_description>
<P>Timeout for the subprocess test in micro seconds.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_flags</P></TD>
<TD class=parameter_description>
<P>Flags to modify subprocess behaviour.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-has-passed></A>
<H3>g_test_trap_has_passed&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_test_trap_has_passed (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Check the result of the last <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> call.</P>
<DIV class=refsect3><A name=id-1.5.29.7.42.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the last test subprocess terminated successfully.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-reached-timeout></A>
<H3>g_test_trap_reached_timeout&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_test_trap_reached_timeout (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Check the result of the last <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> call.</P>
<DIV class=refsect3><A name=id-1.5.29.7.43.5></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if the last test subprocess got killed due to a timeout.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-passed></A>
<H3>g_test_trap_assert_passed</H3><PRE class=programlisting>#define             g_test_trap_assert_passed()</PRE>
<P>Assert that the last test subprocess passed. See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-failed></A>
<H3>g_test_trap_assert_failed</H3><PRE class=programlisting>#define             g_test_trap_assert_failed()</PRE>
<P>Assert that the last test subprocess failed. See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<P>This is sometimes used to test situations that are formally considered to be undefined behaviour, like inputs that fail a <A class=link title=g_return_if_fail() href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-return-if-fail"><CODE class=function>g_return_if_fail()</CODE></A> check. In these situations you should skip the entire test, including the call to <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>, unless <A class=link title=g_test_undefined href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-undefined"><CODE class=function>g_test_undefined()</CODE></A> returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> to indicate that undefined behaviour may be tested.</P>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-stdout></A>
<H3>g_test_trap_assert_stdout()</H3><PRE class=programlisting>#define             g_test_trap_assert_stdout(soutpattern)</PRE>
<P>Assert that the stdout output of the last test subprocess matches <EM class=parameter><CODE>soutpattern</CODE></EM> . See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.46.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>soutpattern</P></TD>
<TD class=parameter_description>
<P>a glob-style <A class=link title="Glob-style pattern matching" href="https://developer.gnome.org/glib/stable/glib-Glob-style-pattern-matching.html">pattern</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-stdout-unmatched></A>
<H3>g_test_trap_assert_stdout_unmatched()</H3><PRE class=programlisting>#define             g_test_trap_assert_stdout_unmatched(soutpattern)</PRE>
<P>Assert that the stdout output of the last test subprocess does not match <EM class=parameter><CODE>soutpattern</CODE></EM> . See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.47.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>soutpattern</P></TD>
<TD class=parameter_description>
<P>a glob-style <A class=link title="Glob-style pattern matching" href="https://developer.gnome.org/glib/stable/glib-Glob-style-pattern-matching.html">pattern</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-stderr></A>
<H3>g_test_trap_assert_stderr()</H3><PRE class=programlisting>#define             g_test_trap_assert_stderr(serrpattern)</PRE>
<P>Assert that the stderr output of the last test subprocess matches <EM class=parameter><CODE>serrpattern</CODE></EM> . See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<P>This is sometimes used to test situations that are formally considered to be undefined behaviour, like code that hits a <A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert"><CODE class=function>g_assert()</CODE></A> or <A class=link title=g_error() href="https://developer.gnome.org/glib/stable/glib-Message-Logging.html#g-error"><CODE class=function>g_error()</CODE></A>. In these situations you should skip the entire test, including the call to <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>, unless <A class=link title=g_test_undefined href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-undefined"><CODE class=function>g_test_undefined()</CODE></A> returns <A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> to indicate that undefined behaviour may be tested.</P>
<DIV class=refsect3><A name=id-1.5.29.7.48.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>serrpattern</P></TD>
<TD class=parameter_description>
<P>a glob-style <A class=link title="Glob-style pattern matching" href="https://developer.gnome.org/glib/stable/glib-Glob-style-pattern-matching.html">pattern</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-assert-stderr-unmatched></A>
<H3>g_test_trap_assert_stderr_unmatched()</H3><PRE class=programlisting>#define             g_test_trap_assert_stderr_unmatched(serrpattern)</PRE>
<P>Assert that the stderr output of the last test subprocess does not match <EM class=parameter><CODE>serrpattern</CODE></EM> . See <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.49.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>serrpattern</P></TD>
<TD class=parameter_description>
<P>a glob-style <A class=link title="Glob-style pattern matching" href="https://developer.gnome.org/glib/stable/glib-Glob-style-pattern-matching.html">pattern</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-trap-fork></A>
<H3>g_test_trap_fork&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_test_trap_fork (<EM class=parameter><CODE><A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=type>guint64</SPAN></A> usec_timeout</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title="enum GTestTrapFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestTrapFlags"><SPAN class=type>GTestTrapFlags</SPAN></A> test_trap_flags</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_test_trap_fork</CODE> is deprecated and should not be used in newly-written code.</P>
<P>This function is implemented only on Unix platforms, and is not always reliable due to problems inherent in fork-without-exec. Use <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> instead.</P></DIV>
<P>Fork the current test program to execute a test case that might not return or that might abort.</P>
<P>If <EM class=parameter><CODE>usec_timeout</CODE></EM> is non-0, the forked test case is aborted and considered failing if its run time exceeds it.</P>
<P>The forking behavior can be configured with the <A class=link title="enum GTestTrapFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestTrapFlags"><SPAN class=type>GTestTrapFlags</SPAN></A> flags.</P>
<P>In the following example, the test code forks, the forked child process produces some sample output and exits successfully. The forking parent process then asserts successful child program termination and validates child program outputs.</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3
4
5
6
7
8
9
10
11
12
13</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>test_fork_patterns</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-fork">g_test_trap_fork</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">,</SPAN> G_TEST_TRAP_SILENCE_STDOUT <SPAN class="gtkdoc opt">|</SPAN> G_TEST_TRAP_SILENCE_STDERR<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-print">g_print</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"some stdout text: somagic17</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Warnings-and-Assertions.html#g-printerr">g_printerr</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"some stderr text: semagic43</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class=function>exit</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN> <SPAN class="gtkdoc slc">// successful test run</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-passed">g_test_trap_assert_passed</A></SPAN> <SPAN class="gtkdoc opt">();</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout">g_test_trap_assert_stdout</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"*somagic17*"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr">g_test_trap_assert_stderr</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"*semagic43*"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.5.29.7.50.12></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>usec_timeout</P></TD>
<TD class=parameter_description>
<P>Timeout for the forked test in micro seconds.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_trap_flags</P></TD>
<TD class=parameter_description>
<P>Flags to modify forking behaviour.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.50.13></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> for the forked child and <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for the executing parent process.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-rand-bit></A>
<H3>g_test_rand_bit</H3><PRE class=programlisting>#define             g_test_rand_bit()</PRE>
<P>Get a reproducible random bit (0 or 1), see <A class=link title=g_test_rand_int&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int"><CODE class=function>g_test_rand_int()</CODE></A> for details on test case random numbers.</P>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-rand-int></A>
<H3>g_test_rand_int&nbsp;()</H3><PRE class=programlisting><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=returnvalue>gint32</SPAN></A>
g_test_rand_int (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Get a reproducible random integer number.</P>
<P>The random numbers generated by the g_test_rand_*() family of functions change with every new test program start, unless the --seed option is given when starting test programs.</P>
<P>For individual test cases however, the random number generator is reseeded, to avoid dependencies between tests and to make --seed effective for all test cases.</P>
<DIV class=refsect3><A name=id-1.5.29.7.52.7></A>
<H4>Returns</H4>
<P>a random number from the seeded random number generator.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-rand-int-range></A>
<H3>g_test_rand_int_range&nbsp;()</H3><PRE class=programlisting><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=returnvalue>gint32</SPAN></A>
g_test_rand_int_range (<EM class=parameter><CODE><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=type>gint32</SPAN></A> begin</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title=gint32 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint32"><SPAN class=type>gint32</SPAN></A> end</CODE></EM>);</PRE>
<P>Get a reproducible random integer number out of a specified range, see <A class=link title=g_test_rand_int&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int"><CODE class=function>g_test_rand_int()</CODE></A> for details on test case random numbers.</P>
<DIV class=refsect3><A name=id-1.5.29.7.53.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>begin</P></TD>
<TD class=parameter_description>
<P>the minimum value returned by this function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>end</P></TD>
<TD class=parameter_description>
<P>the smallest value not to be returned by this function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.53.6></A>
<H4>Returns</H4>
<P>a number with <EM class=parameter><CODE>begin</CODE></EM> &lt;= number &lt; <EM class=parameter><CODE>end</CODE></EM> .</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-rand-double></A>
<H3>g_test_rand_double&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>double</SPAN>
g_test_rand_double (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Get a reproducible random floating point number, see <A class=link title=g_test_rand_int&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int"><CODE class=function>g_test_rand_int()</CODE></A> for details on test case random numbers.</P>
<DIV class=refsect3><A name=id-1.5.29.7.54.5></A>
<H4>Returns</H4>
<P>a random number from the seeded random number generator.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-rand-double-range></A>
<H3>g_test_rand_double_range&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>double</SPAN>
g_test_rand_double_range (<EM class=parameter><CODE><SPAN class=type>double</SPAN> range_start</CODE></EM>,
                          <EM class=parameter><CODE><SPAN class=type>double</SPAN> range_end</CODE></EM>);</PRE>
<P>Get a reproducible random floating pointer number out of a specified range, see <A class=link title=g_test_rand_int&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-rand-int"><CODE class=function>g_test_rand_int()</CODE></A> for details on test case random numbers.</P>
<DIV class=refsect3><A name=id-1.5.29.7.55.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>range_start</P></TD>
<TD class=parameter_description>
<P>the minimum value returned by this function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>range_end</P></TD>
<TD class=parameter_description>
<P>the minimum value not returned by this function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.55.6></A>
<H4>Returns</H4>
<P>a number with <EM class=parameter><CODE>range_start</CODE></EM> &lt;= number &lt; <EM class=parameter><CODE>range_end</CODE></EM> .</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert></A>
<H3>g_assert()</H3><PRE class=programlisting>#define             g_assert(expr)</PRE>
<P>Debugging macro to terminate the application if the assertion fails. If the assertion fails (i.e. the expression is not true), an error message is logged and the application is terminated.</P>
<P>The macro can be turned off in final releases of code by defining <CODE class=literal>G_DISABLE_ASSERT</CODE> when compiling the application.</P>
<DIV class=refsect3><A name=id-1.5.29.7.56.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-not-reached></A>
<H3>g_assert_not_reached</H3><PRE class=programlisting>#define             g_assert_not_reached()</PRE>
<P>Debugging macro to terminate the application if it is ever reached. If it is reached, an error message is logged and the application is terminated.</P>
<P>The macro can be turned off in final releases of code by defining <CODE class=literal>G_DISABLE_ASSERT</CODE> when compiling the application.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-cmpstr></A>
<H3>g_assert_cmpstr()</H3><PRE class=programlisting>#define             g_assert_cmpstr(s1, cmp, s2)</PRE>
<P>Debugging macro to compare two strings. If the comparison fails, an error message is logged and the application is either terminated or the testcase marked as failed. The strings are compared using <A class=link title=g_strcmp0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcmp0"><CODE class=function>g_strcmp0()</CODE></A>.</P>
<P>The effect of <CODE class=literal>g_assert_cmpstr (s1, op, s2)</CODE> is the same as <CODE class=literal>g_assert_true (g_strcmp0 (s1, s2) op 0)</CODE>. The advantage of this macro is that it can produce a message that includes the actual values of <EM class=parameter><CODE>s1</CODE></EM> and <EM class=parameter><CODE>s2</CODE></EM> .</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpstr">g_assert_cmpstr</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>mystring<SPAN class="gtkdoc opt">, ==,</SPAN> <SPAN class=string>"fubar"</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.5.29.7.58.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>s1</P></TD>
<TD class=parameter_description>
<P>a string (may be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cmp</P></TD>
<TD class=parameter_description>
<P>The comparison operator to use. One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>s2</P></TD>
<TD class=parameter_description>
<P>another string (may be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-cmpint></A>
<H3>g_assert_cmpint()</H3><PRE class=programlisting>#define             g_assert_cmpint(n1, cmp, n2)</PRE>
<P>Debugging macro to compare two integers.</P>
<P>The effect of <CODE class=literal>g_assert_cmpint (n1, op, n2)</CODE> is the same as <CODE class=literal>g_assert_true (n1 op n2)</CODE>. The advantage of this macro is that it can produce a message that includes the actual values of <EM class=parameter><CODE>n1</CODE></EM> and <EM class=parameter><CODE>n2</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.59.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n1</P></TD>
<TD class=parameter_description>
<P>an integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cmp</P></TD>
<TD class=parameter_description>
<P>The comparison operator to use. One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n2</P></TD>
<TD class=parameter_description>
<P>another integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-cmpuint></A>
<H3>g_assert_cmpuint()</H3><PRE class=programlisting>#define             g_assert_cmpuint(n1, cmp, n2)</PRE>
<P>Debugging macro to compare two unsigned integers.</P>
<P>The effect of <CODE class=literal>g_assert_cmpuint (n1, op, n2)</CODE> is the same as <CODE class=literal>g_assert_true (n1 op n2)</CODE>. The advantage of this macro is that it can produce a message that includes the actual values of <EM class=parameter><CODE>n1</CODE></EM> and <EM class=parameter><CODE>n2</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.60.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n1</P></TD>
<TD class=parameter_description>
<P>an unsigned integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cmp</P></TD>
<TD class=parameter_description>
<P>The comparison operator to use. One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n2</P></TD>
<TD class=parameter_description>
<P>another unsigned integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-cmphex></A>
<H3>g_assert_cmphex()</H3><PRE class=programlisting>#define             g_assert_cmphex(n1, cmp, n2)</PRE>
<P>Debugging macro to compare to unsigned integers.</P>
<P>This is a variant of <A class=link title=g_assert_cmpuint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpuint"><CODE class=function>g_assert_cmpuint()</CODE></A> that displays the numbers in hexadecimal notation in the message.</P>
<DIV class=refsect3><A name=id-1.5.29.7.61.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n1</P></TD>
<TD class=parameter_description>
<P>an unsigned integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cmp</P></TD>
<TD class=parameter_description>
<P>The comparison operator to use. One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n2</P></TD>
<TD class=parameter_description>
<P>another unsigned integer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-cmpfloat></A>
<H3>g_assert_cmpfloat()</H3><PRE class=programlisting>#define             g_assert_cmpfloat(n1,cmp,n2)</PRE>
<P>Debugging macro to compare two floating point numbers.</P>
<P>The effect of <CODE class=literal>g_assert_cmpfloat (n1, op, n2)</CODE> is the same as <CODE class=literal>g_assert_true (n1 op n2)</CODE>. The advantage of this macro is that it can produce a message that includes the actual values of <EM class=parameter><CODE>n1</CODE></EM> and <EM class=parameter><CODE>n2</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.62.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>n1</P></TD>
<TD class=parameter_description>
<P>an floating point number</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cmp</P></TD>
<TD class=parameter_description>
<P>The comparison operator to use. One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n2</P></TD>
<TD class=parameter_description>
<P>another floating point number</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-no-error></A>
<H3>g_assert_no_error()</H3><PRE class=programlisting>#define             g_assert_no_error(err)</PRE>
<P>Debugging macro to check that a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> is not set.</P>
<P>The effect of <CODE class=literal>g_assert_no_error (err)</CODE> is the same as <CODE class=literal>g_assert_true (err == NULL)</CODE>. The advantage of this macro is that it can produce a message that includes the error message and code.</P>
<DIV class=refsect3><A name=id-1.5.29.7.63.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, possibly <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.20</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-error></A>
<H3>g_assert_error()</H3><PRE class=programlisting>#define             g_assert_error(err, dom, c)</PRE>
<P>Debugging macro to check that a method has returned the correct <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>.</P>
<P>The effect of <CODE class=literal>g_assert_error (err, dom, c)</CODE> is the same as <CODE class=literal>g_assert_true (err != NULL &amp;&amp; err-&gt;domain == dom &amp;&amp; err-&gt;code == c)</CODE>. The advantage of this macro is that it can produce a message that includes the incorrect error message and code.</P>
<P>This can only be used to test for a specific error. If you want to test that <EM class=parameter><CODE>err</CODE></EM> is set, but don't care what it's set to, just use <CODE class=literal>g_assert (err != NULL)</CODE></P>
<DIV class=refsect3><A name=id-1.5.29.7.64.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>err</P></TD>
<TD class=parameter_description>
<P>a <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A>, possibly <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>dom</P></TD>
<TD class=parameter_description>
<P>the expected error domain (a <A class=link title=GQuark href="https://developer.gnome.org/glib/stable/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>the expected error code</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.20</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-true></A>
<H3>g_assert_true()</H3><PRE class=programlisting>#define             g_assert_true(expr)</PRE>
<P>Debugging macro to check that an expression is true.</P>
<P>If the assertion fails (i.e. the expression is not true), an error message is logged and the application is either terminated or the testcase marked as failed.</P>
<P>See <A class=link title=g_test_set_nonfatal_assertions&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-set-nonfatal-assertions"><CODE class=function>g_test_set_nonfatal_assertions()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.65.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-false></A>
<H3>g_assert_false()</H3><PRE class=programlisting>#define             g_assert_false(expr)</PRE>
<P>Debugging macro to check an expression is false.</P>
<P>If the assertion fails (i.e. the expression is not false), an error message is logged and the application is either terminated or the testcase marked as failed.</P>
<P>See <A class=link title=g_test_set_nonfatal_assertions&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-set-nonfatal-assertions"><CODE class=function>g_test_set_nonfatal_assertions()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.66.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-null></A>
<H3>g_assert_null()</H3><PRE class=programlisting>#define             g_assert_null(expr)</PRE>
<P>Debugging macro to check an expression is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>If the assertion fails (i.e. the expression is not <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>), an error message is logged and the application is either terminated or the testcase marked as failed.</P>
<P>See <A class=link title=g_test_set_nonfatal_assertions&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-set-nonfatal-assertions"><CODE class=function>g_test_set_nonfatal_assertions()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.67.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-assert-nonnull></A>
<H3>g_assert_nonnull()</H3><PRE class=programlisting>#define             g_assert_nonnull(expr)</PRE>
<P>Debugging macro to check an expression is not <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<P>If the assertion fails (i.e. the expression is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>), an error message is logged and the application is either terminated or the testcase marked as failed.</P>
<P>See <A class=link title=g_test_set_nonfatal_assertions&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-set-nonfatal-assertions"><CODE class=function>g_test_set_nonfatal_assertions()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.29.7.68.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>expr</P></TD>
<TD class=parameter_description>
<P>the expression to check</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.40</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-set-nonfatal-assertions></A>
<H3>g_test_set_nonfatal_assertions&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_set_nonfatal_assertions (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Changes the behaviour of <A class=link title=g_assert_cmpstr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpstr"><CODE class=function>g_assert_cmpstr()</CODE></A>, <A class=link title=g_assert_cmpint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpint"><CODE class=function>g_assert_cmpint()</CODE></A>, <A class=link title=g_assert_cmpuint() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpuint"><CODE class=function>g_assert_cmpuint()</CODE></A>, <A class=link title=g_assert_cmphex() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmphex"><CODE class=function>g_assert_cmphex()</CODE></A>, <A class=link title=g_assert_cmpfloat() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-cmpfloat"><CODE class=function>g_assert_cmpfloat()</CODE></A>, <A class=link title=g_assert_true() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-true"><CODE class=function>g_assert_true()</CODE></A>, <A class=link title=g_assert_false() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-false"><CODE class=function>g_assert_false()</CODE></A>, <A class=link title=g_assert_null() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-null"><CODE class=function>g_assert_null()</CODE></A>, <A class=link title=g_assert_no_error() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-no-error"><CODE class=function>g_assert_no_error()</CODE></A>, <A class=link title=g_assert_error() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-error"><CODE class=function>g_assert_error()</CODE></A>, <A class=link title=g_test_assert_expected_messages href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-assert-expected-messages"><CODE class=function>g_test_assert_expected_messages()</CODE></A> and the various g_test_trap_assert_*() macros to not abort to program, but instead call <A class=link title=g_test_fail&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-fail"><CODE class=function>g_test_fail()</CODE></A> and continue. (This also changes the behavior of <A class=link title=g_test_fail&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-fail"><CODE class=function>g_test_fail()</CODE></A> so that it will not cause the test program to abort after completing the failed test.)</P>
<P>Note that the <A class=link title=g_assert_not_reached href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert-not-reached"><CODE class=function>g_assert_not_reached()</CODE></A> and <A class=link title=g_assert() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-assert"><CODE class=function>g_assert()</CODE></A> are not affected by this.</P>
<P>This function can only be called after <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A>.</P>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestFixtureFunc></A>
<H3>GTestFixtureFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GTestFixtureFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A class=link title=gpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> fixture</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> user_data</CODE></EM>);</PRE>
<P>The type used for functions that operate on test fixtures. This is used for the fixture setup and teardown functions as well as for the testcases themselves.</P>
<P><EM class=parameter><CODE>user_data</CODE></EM> is a pointer to the data that was given when registering the test case.</P>
<P><EM class=parameter><CODE>fixture</CODE></EM> will be a pointer to the area of memory allocated by the test framework, of the size requested. If the requested size was zero then <EM class=parameter><CODE>fixture</CODE></EM> will be equal to <EM class=parameter><CODE>user_data</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.70.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>fixture</P></TD>
<TD class=parameter_description>
<P>the test fixture</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>user_data</P></TD>
<TD class=parameter_description>
<P>the data provided when registering the test</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.28</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-create-case></A>
<H3>g_test_create_case&nbsp;()</H3><PRE class=programlisting><A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=returnvalue>GTestCase</SPAN></A>&nbsp;*
g_test_create_case (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *test_name</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> data_size</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gconstpointer href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A> test_data</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=GTestFixtureFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFixtureFunc"><SPAN class=type>GTestFixtureFunc</SPAN></A> data_setup</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=GTestFixtureFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFixtureFunc"><SPAN class=type>GTestFixtureFunc</SPAN></A> data_test</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=GTestFixtureFunc&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestFixtureFunc"><SPAN class=type>GTestFixtureFunc</SPAN></A> data_teardown</CODE></EM>);</PRE>
<P>Create a new <A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=type>GTestCase</SPAN></A>, named <EM class=parameter><CODE>test_name</CODE></EM> , this API is fairly low level, calling <A class=link title=g_test_add() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add"><CODE class=function>g_test_add()</CODE></A> or <A class=link title=g_test_add_func&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-add-func"><CODE class=function>g_test_add_func()</CODE></A> is preferable. When this test is executed, a fixture structure of size <EM class=parameter><CODE>data_size</CODE></EM> will be allocated and filled with 0s. Then <EM class=parameter><CODE>data_setup</CODE></EM> is called to initialize the fixture. After fixture setup, the actual test function <EM class=parameter><CODE>data_test</CODE></EM> is called. Once the test run completed, the fixture structure is torn down by calling <EM class=parameter><CODE>data_teardown</CODE></EM> and after that the memory is released.</P>
<P>Splitting up a test run into fixture setup, test function and fixture teardown is most usful if the same fixture is used for multiple tests. In this cases, <A class=link title=g_test_create_case&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-create-case"><CODE class=function>g_test_create_case()</CODE></A> will be called with the same fixture, but varying <EM class=parameter><CODE>test_name</CODE></EM> and <EM class=parameter><CODE>data_test</CODE></EM> arguments.</P>
<DIV class=refsect3><A name=id-1.5.29.7.71.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>test_name</P></TD>
<TD class=parameter_description>
<P>the name for the test case</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data_size</P></TD>
<TD class=parameter_description>
<P>the size of the fixture data structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_data</P></TD>
<TD class=parameter_description>
<P>test data argument for the test functions</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data_setup</P></TD>
<TD class=parameter_description>
<P>the function to set up the fixture data</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data_test</P></TD>
<TD class=parameter_description>
<P>the actual test function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data_teardown</P></TD>
<TD class=parameter_description>
<P>the function to teardown the fixture data</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.71.7></A>
<H4>Returns</H4>
<P>a newly allocated <A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=type>GTestCase</SPAN></A>.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-create-suite></A>
<H3>g_test_create_suite&nbsp;()</H3><PRE class=programlisting><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=returnvalue>GTestSuite</SPAN></A>&nbsp;*
g_test_create_suite (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *suite_name</CODE></EM>);</PRE>
<P>Create a new test suite with the name <EM class=parameter><CODE>suite_name</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.72.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>suite_name</P></TD>
<TD class=parameter_description>
<P>a name for the suite</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.72.6></A>
<H4>Returns</H4>
<P>A newly allocated <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A> instance.</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-get-root></A>
<H3>g_test_get_root&nbsp;()</H3><PRE class=programlisting><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=returnvalue>GTestSuite</SPAN></A>&nbsp;*
g_test_get_root (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Get the toplevel test suite for the test path API.</P>
<DIV class=refsect3><A name=id-1.5.29.7.73.5></A>
<H4>Returns</H4>
<P>the toplevel <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A></P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-suite-add></A>
<H3>g_test_suite_add&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_suite_add (<EM class=parameter><CODE><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A> *suite</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=type>GTestCase</SPAN></A> *test_case</CODE></EM>);</PRE>
<P>Adds <EM class=parameter><CODE>test_case</CODE></EM> to <EM class=parameter><CODE>suite</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.74.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>suite</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>test_case</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GTestCase href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestCase"><SPAN class=type>GTestCase</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-suite-add-suite></A>
<H3>g_test_suite_add_suite&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_test_suite_add_suite (<EM class=parameter><CODE><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A> *suite</CODE></EM>,
                        <EM class=parameter><CODE><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A> *nestedsuite</CODE></EM>);</PRE>
<P>Adds <EM class=parameter><CODE>nestedsuite</CODE></EM> to <EM class=parameter><CODE>suite</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.29.7.75.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>suite</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>nestedsuite</P></TD>
<TD class=parameter_description>
<P>another <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-test-run-suite></A>
<H3>g_test_run_suite&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_test_run_suite (<EM class=parameter><CODE><A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A> *suite</CODE></EM>);</PRE>
<P>Execute the tests within <EM class=parameter><CODE>suite</CODE></EM> and all nested <A href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuites</SPAN></A>. The test suites to be executed are filtered according to test path arguments (<CODE class=literal>-p testpath</CODE>) as parsed by <A class=link title=g_test_init&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-init"><CODE class=function>g_test_init()</CODE></A>. See the <A class=link title=g_test_run&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run"><CODE class=function>g_test_run()</CODE></A> documentation for more information on the order that tests are run in.</P>
<P>g_test_run_suite() or <A class=link title=g_test_run&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-run"><CODE class=function>g_test_run()</CODE></A> may only be called once in a program.</P>
<DIV class=refsect3><A name=id-1.5.29.7.76.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>suite</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=GTestSuite href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestSuite"><SPAN class=type>GTestSuite</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.29.7.76.7></A>
<H4>Returns</H4>
<P>0 on success</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Testing.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GTestFileType></A>
<H3>enum GTestFileType</H3>
<P>The type of file to return the filename for, when used with <A class=link title=g_test_build_filename&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-build-filename"><CODE class=function>g_test_build_filename()</CODE></A>.</P>
<P>These two options correspond rather directly to the 'dist' and 'built' terminology that automake uses and are explicitly used to distinguish between the 'srcdir' and 'builddir' being separate. All files in your project should either be dist (in the <CODE class=literal>DIST_EXTRA</CODE> or <CODE class=literal>dist_schema_DATA</CODE> sense, in which case they will always be in the srcdir) or built (in the <CODE class=literal>BUILT_SOURCES</CODE> sense, in which case they will always be in the builddir).</P>
<P>Note: as a general rule of automake, files that are generated only as part of the build-from-git process (but then are distributed with the tarball) always go in srcdir (even if doing a srcdir != builddir build from git) and are considered as distributed files.</P>
<DIV class=refsect3><A name=id-1.5.29.8.2.6></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-DIST:CAPS></A>G_TEST_DIST</P></TD>
<TD class=enum_member_description>
<P>a file that was included in the distribution tarball</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-BUILT:CAPS></A>G_TEST_BUILT</P></TD>
<TD class=enum_member_description>
<P>a file that was built on the compiling machine</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since 2.38</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestTrapFlags></A>
<H3>enum GTestTrapFlags</H3>
<DIV class=warning>
<P><CODE class=literal>GTestTrapFlags</CODE> is deprecated and should not be used in newly-written code.</P>
<P><A class=link title="enum GTestTrapFlags" href="https://developer.gnome.org/glib/stable/glib-Testing.html#GTestTrapFlags"><SPAN class=type>GTestTrapFlags</SPAN></A> is used only with <A class=link title=g_test_trap_fork&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-fork"><CODE class=function>g_test_trap_fork()</CODE></A>, which is deprecated. <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> uses <SPAN class=type>GTestTrapSubprocessFlags</SPAN>.</P></DIV>
<P>Test traps are guards around forked tests. These flags determine what traps to set.</P>
<DIV class=refsect3><A name=id-1.5.29.8.3.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-TRAP-SILENCE-STDOUT:CAPS></A>G_TEST_TRAP_SILENCE_STDOUT</P></TD>
<TD class=enum_member_description>
<P>Redirect stdout of the test child to <CODE class=literal>/dev/null</CODE> so it cannot be observed on the console during test runs. The actual output is still captured though to allow later tests with <A class=link title=g_test_trap_assert_stdout() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout"><CODE class=function>g_test_trap_assert_stdout()</CODE></A>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-TRAP-SILENCE-STDERR:CAPS></A>G_TEST_TRAP_SILENCE_STDERR</P></TD>
<TD class=enum_member_description>
<P>Redirect stderr of the test child to <CODE class=literal>/dev/null</CODE> so it cannot be observed on the console during test runs. The actual output is still captured though to allow later tests with <A class=link title=g_test_trap_assert_stderr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr"><CODE class=function>g_test_trap_assert_stderr()</CODE></A>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-TRAP-INHERIT-STDIN:CAPS></A>G_TEST_TRAP_INHERIT_STDIN</P></TD>
<TD class=enum_member_description>
<P>If this flag is given, stdin of the child process is shared with stdin of its parent process. It is redirected to <CODE class=literal>/dev/null</CODE> otherwise.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestSubprocessFlags></A>
<H3>enum GTestSubprocessFlags</H3>
<P>Flags to pass to <A class=link title=g_test_trap_subprocess&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-subprocess"><CODE class=function>g_test_trap_subprocess()</CODE></A> to control input and output.</P>
<P>Note that in contrast with <A class=link title=g_test_trap_fork&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-fork"><CODE class=function>g_test_trap_fork()</CODE></A>, the default is to not show stdout and stderr.</P>
<DIV class=refsect3><A name=id-1.5.29.8.4.5></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-SUBPROCESS-INHERIT-STDIN:CAPS></A>G_TEST_SUBPROCESS_INHERIT_STDIN</P></TD>
<TD class=enum_member_description>
<P>If this flag is given, the child process will inherit the parent's stdin. Otherwise, the child's stdin is redirected to <CODE class=literal>/dev/null</CODE>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-SUBPROCESS-INHERIT-STDOUT:CAPS></A>G_TEST_SUBPROCESS_INHERIT_STDOUT</P></TD>
<TD class=enum_member_description>
<P>If this flag is given, the child process will inherit the parent's stdout. Otherwise, the child's stdout will not be visible, but it will be captured to allow later tests with <A class=link title=g_test_trap_assert_stdout() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stdout"><CODE class=function>g_test_trap_assert_stdout()</CODE></A>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TEST-SUBPROCESS-INHERIT-STDERR:CAPS></A>G_TEST_SUBPROCESS_INHERIT_STDERR</P></TD>
<TD class=enum_member_description>
<P>If this flag is given, the child process will inherit the parent's stderr. Otherwise, the child's stderr will not be visible, but it will be captured to allow later tests with <A class=link title=g_test_trap_assert_stderr() href="https://developer.gnome.org/glib/stable/glib-Testing.html#g-test-trap-assert-stderr"><CODE class=function>g_test_trap_assert_stderr()</CODE></A>.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestCase></A>
<H3>GTestCase</H3><PRE class=programlisting>typedef struct GTestCase  GTestCase;
</PRE>
<P>An opaque structure representing a test case.</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=GTestSuite></A>
<H3>GTestSuite</H3><PRE class=programlisting>typedef struct GTestSuite GTestSuite;
</PRE>
<P>An opaque structure representing a test suite.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Testing.see-also></A>
<H2>See Also</H2>
<P><A href="https://developer.gnome.org/glib/stable/gtester.html">gtester</A>, <A href="https://developer.gnome.org/glib/stable/gtester-report.html">gtester-report</A></P></DIV>