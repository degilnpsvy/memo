<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Shell-related-Utilities.top_of_page></A>Shell-related Utilities</SPAN></H2>
<P>Shell-related Utilities &#8212; shell-like commandline handling</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv">g_shell_parse_argv</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_shell_quote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-quote">g_shell_quote</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_shell_unquote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-unquote">g_shell_unquote</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A class=link title="enum GShellError" href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#GShellError">GShellError</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_SHELL_ERROR href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#G-SHELL-ERROR:CAPS">G_SHELL_ERROR</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.description></A>
<H2>Description</H2>
<P>GLib provides the functions <A class=link title=g_shell_quote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-quote"><CODE class=function>g_shell_quote()</CODE></A> and <A class=link title=g_shell_unquote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-unquote"><CODE class=function>g_shell_unquote()</CODE></A> to handle shell-like quoting in strings. The function <A class=link title=g_shell_parse_argv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-parse-argv"><CODE class=function>g_shell_parse_argv()</CODE></A> parses a string similar to the way a POSIX shell (/bin/sh) would.</P>
<P>Note that string handling in shells has many obscure and historical corner-cases which these functions do not necessarily reproduce. They are good enough in practice, though.</P></DIV>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-shell-parse-argv></A>
<H3>g_shell_parse_argv&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_shell_parse_argv (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *command_line</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *argcp</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> ***argvp</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Parses a command line into an argument vector, in much the same way the shell would, but without many of the expansions the shell would perform (variable expansion, globs, operators, filename expansion, etc. are not supported). The results are defined to be the same as those you would get from a UNIX98 /bin/sh, as long as the input contains none of the unsupported shell expansions. If the input does contain such expansions, they are passed through literally. Possible errors are those from the <A class=link title=G_SHELL_ERROR href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#G-SHELL-ERROR:CAPS"><SPAN class=type>G_SHELL_ERROR</SPAN></A> domain. Free the returned vector with <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.21.7.2.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>command_line</P></TD>
<TD class=parameter_description>
<P>command line to parse</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>argcp</P></TD>
<TD class=parameter_description>
<P>return location for number of args, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>argvp</P></TD>
<TD class=parameter_description>
<P>return location for array of args, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=argcp zero-terminated=1]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>return location for error, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.21.7.2.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success, <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> if error set</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-shell-quote></A>
<H3>g_shell_quote&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_shell_quote (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *unquoted_string</CODE></EM>);</PRE>
<P>Quotes a string so that the shell (/bin/sh) will interpret the quoted string to mean <EM class=parameter><CODE>unquoted_string</CODE></EM> . If you pass a filename to the shell, for example, you should first quote it with this function. The return value must be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. The quoting style used is undefined (single or double quotes may be used).</P>
<DIV class=refsect3><A name=id-1.5.21.7.3.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>unquoted_string</P></TD>
<TD class=parameter_description>
<P>a literal string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.21.7.3.6></A>
<H4>Returns</H4>
<P>quoted string</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-shell-unquote></A>
<H3>g_shell_unquote&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_shell_unquote (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *quoted_string</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> **error</CODE></EM>);</PRE>
<P>Unquotes a string as the shell (/bin/sh) would. Only handles quotes; if a string contains file globs, arithmetic operators, variables, backticks, redirections, or other special-to-the-shell features, the result will be different from the result a real shell would produce (the variables, backticks, etc. will be passed through literally instead of being expanded). This function is guaranteed to succeed if applied to the result of <A class=link title=g_shell_quote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-quote"><CODE class=function>g_shell_quote()</CODE></A>. If it fails, it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> and sets the error. The <EM class=parameter><CODE>quoted_string</CODE></EM> need not actually contain quoted or escaped text; <A class=link title=g_shell_unquote&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#g-shell-unquote"><CODE class=function>g_shell_unquote()</CODE></A> simply goes through the string and unquotes/unescapes anything that the shell would. Both single and double quotes are handled, as are escapes including escaped newlines. The return value must be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. Possible errors are in the <A class=link title=G_SHELL_ERROR href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#G-SHELL-ERROR:CAPS"><SPAN class=type>G_SHELL_ERROR</SPAN></A> domain.</P>
<P>Shell quoting rules are a bit strange. Single quotes preserve the literal string exactly. escape sequences are not allowed; not even \' - if you want a ' in the quoted text, you have to do something like 'foo'\''bar'. Double quotes allow $, `, ", \, and newline to be escaped with backslash. Otherwise double quotes preserve things literally.</P>
<DIV class=refsect3><A name=id-1.5.21.7.4.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>quoted_string</P></TD>
<TD class=parameter_description>
<P>shell-quoted string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>error</P></TD>
<TD class=parameter_description>
<P>error return location or NULL</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.21.7.4.7></A>
<H4>Returns</H4>
<P>an unquoted string</P>
<P></P></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-Shell-related-Utilities.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GShellError></A>
<H3>enum GShellError</H3>
<P>Error codes returned by shell functions.</P>
<DIV class=refsect3><A name=id-1.5.21.8.2.4></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=enum_members_name width=300></COL>
<COL class=enum_members_description></COL>
<COL class=enum_members_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-SHELL-ERROR-BAD-QUOTING:CAPS></A>G_SHELL_ERROR_BAD_QUOTING</P></TD>
<TD class=enum_member_description>
<P>Mismatched or otherwise mangled quoting.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SHELL-ERROR-EMPTY-STRING:CAPS></A>G_SHELL_ERROR_EMPTY_STRING</P></TD>
<TD class=enum_member_description>
<P>String to be parsed was empty.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-SHELL-ERROR-FAILED:CAPS></A>G_SHELL_ERROR_FAILED</P></TD>
<TD class=enum_member_description>
<P>Some other error.</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-SHELL-ERROR:CAPS></A>
<H3>G_SHELL_ERROR</H3><PRE class=programlisting>#define G_SHELL_ERROR g_shell_error_quark ()
</PRE>
<P>Error domain for shell functions. Errors in this domain will be from the <A class=link title="enum GShellError" href="https://developer.gnome.org/glib/stable/glib-Shell-related-Utilities.html#GShellError"><SPAN class=type>GShellError</SPAN></A> enumeration. See <A class=link title="struct GError" href="https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#GError"><SPAN class=type>GError</SPAN></A> for information on error domains.</P></DIV></DIV>