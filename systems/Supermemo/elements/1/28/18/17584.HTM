<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>Compiling the GLib package</SPAN></H2>
<P>Compiling the GLib Package &#8212; How to compile GLib itself</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=building></A>
<H2>Building the Library on UNIX</H2>
<P>On UNIX, GLib uses the standard GNU build system, using <SPAN class=application>autoconf</SPAN> for package configuration and resolving portability issues, <SPAN class=application>automake</SPAN> for building makefiles that comply with the GNU Coding Standards, and <SPAN class=application>libtool</SPAN> for building shared libraries on multiple platforms. The normal sequence for compiling and installing the GLib library is thus: </P>
<DIV class=literallayout>
<P><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<STRONG class=userinput><CODE>./configure</CODE></STRONG><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<STRONG class=userinput><CODE>make</CODE></STRONG><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<STRONG class=userinput><CODE>make&nbsp;install</CODE></STRONG><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P></DIV>
<P></P>
<P>The standard options provided by <SPAN class=application>GNU autoconf</SPAN> may be passed to the <SPAN class=command><STRONG>configure</STRONG></SPAN> script. Please see the <SPAN class=application>autoconf</SPAN> documentation or run <SPAN class=command><STRONG>./configure --help</STRONG></SPAN> for information about the standard options. </P>
<P>The GTK+ documentation contains <A class=ulink href="https://developer.gnome.org/gtk/stable/gtk-building.html" target=_top>further details</A> about the build process and ways to influence it. </P></DIV>
<DIV class=refsect1><A name=dependencies></A>
<H2>Dependencies</H2>
<P>Before you can compile the GLib library, you need to have various other tools and libraries installed on your system. Beyond a C compiler (which must implement C90, but does not need to implement C99), the two tools needed during the build process (as differentiated from the tools used in when creating GLib mentioned above such as <SPAN class=application>autoconf</SPAN>) are <SPAN class=command><STRONG>pkg-config</STRONG></SPAN> and GNU make. </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P><A class=ulink href="http://www.freedesktop.org/software/pkgconfig/" target=_top>pkg-config</A> is a tool for tracking the compilation flags needed for libraries that are used by the GLib library. (For each library, a small <CODE class=literal>.pc</CODE> text file is installed in a standard location that contains the compilation flags needed for that library along with version number information.) The version of <SPAN class=command><STRONG>pkg-config</STRONG></SPAN> needed to build GLib is mirrored in the <CODE class=filename>dependencies</CODE> directory on the <A class=ulink href="ftp://ftp.gtk.org/pub/gtk/v2.2/" target=_top>GTK+ FTP site.</A> </P>
<LI class=listitem>
<P>The GLib Makefiles make use of several features specific to <A class=ulink href="http://www.gnu.org/software/make" target=_top>GNU make</A>, and will not build correctly with other versions of <SPAN class=command><STRONG>make</STRONG></SPAN>. You will need to install it if you don't already have it on your system. (It may be called <SPAN class=command><STRONG>gmake</STRONG></SPAN> rather than <SPAN class=command><STRONG>make</STRONG></SPAN>.) </P></LI></UL></DIV>
<P>A UNIX build of GLib requires that the system implements at least the original 1990 version of POSIX. Beyond this, it depends on a number of other libraries. </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>The <A class=ulink href="http://www.gnu.org/software/libiconv/" target=_top>GNU libiconv library</A> is needed to build GLib if your system doesn't have the <CODE class=function>iconv()</CODE> function for doing conversion between character encodings. Most modern systems should have <CODE class=function>iconv()</CODE>, however many older systems lack an <CODE class=function>iconv()</CODE> implementation. On such systems, you must install the libiconv library. This can be found at: <A class=ulink href="http://www.gnu.org/software/libiconv" target=_top>http://www.gnu.org/software/libiconv</A>. </P>
<P>If your system has an <CODE class=function>iconv()</CODE> implementation but you want to use libiconv instead, you can pass the --with-libiconv option to configure. This forces libiconv to be used. </P>
<P>Note that if you have libiconv installed in your default include search path (for instance, in <CODE class=filename>/usr/local/</CODE>), but don't enable it, you will get an error while compiling GLib because the <CODE class=filename>iconv.h</CODE> that libiconv installs hides the system iconv. </P>
<P>If you are using the native iconv implementation on Solaris instead of libiconv, you'll need to make sure that you have the converters between locale encodings and UTF-8 installed. At a minimum you'll need the SUNWuiu8 package. You probably should also install the SUNWciu8, SUNWhiu8, SUNWjiu8, and SUNWkiu8 packages. </P>
<P>The native iconv on Compaq Tru64 doesn't contain support for UTF-8, so you'll need to use GNU libiconv instead. (When using GNU libiconv for GLib, you'll need to use GNU libiconv for GNU gettext as well.) This probably applies to related operating systems as well. </P>
<LI class=listitem>
<P>The libintl library from the <A class=ulink href="http://www.gnu.org/software/gettext" target=_top>GNU gettext package</A> is needed if your system doesn't have the <CODE class=function>gettext()</CODE> functionality for handling message translation databases. </P>
<LI class=listitem>
<P>A thread implementation is needed. The thread support in GLib can be based upon POSIX threads or win32 threads. </P>
<LI class=listitem>
<P>GRegex uses the <A class=ulink href="http://www.pcre.org/" target=_top>PCRE library</A> for regular expression matching. The default is to use the internal version of PCRE that is patched to use GLib for memory management and Unicode handling. If you prefer to use the system-supplied PCRE library you can pass the <CODE class=option>--with-pcre=system</CODE> option to, but it is not recommended. </P>
<LI class=listitem>
<P>The optional extended attribute support in GIO requires the getxattr() family of functions that may be provided by glibc or by the standalone libattr library. To build GLib without extended attribute support, use the <CODE class=option>--disable-xattr</CODE> option. </P>
<LI class=listitem>
<P>The optional SELinux support in GIO requires libselinux. To build GLib without SELinux support, use the <CODE class=option>--disable-selinux</CODE> option. </P>
<LI class=listitem>
<P>The optional support for DTrace requires the <CODE class=filename>sys/sdt.h</CODE> header, which is provided by SystemTap on Linux. To build GLib without DTrace, use the <CODE class=option>--disable-dtrace</CODE> configure option. </P>
<LI class=listitem>
<P>The optional support for <A class=ulink href="http://sourceware.org/systemtap/" target=_top>SystemTap</A> can be disabled with the <CODE class=option>--disable-systemtap</CODE> configure option. </P></LI></UL></DIV></DIV>
<DIV class=refsect1><A name=extra-configuration-options></A>
<H2>Extra Configuration Options</H2>
<P>In addition to the normal options, the <SPAN class=command><STRONG>configure</STRONG></SPAN> script in the GLib library supports these additional arguments: </P>
<P><B><CODE class=systemitem>--enable-debug</CODE>.&nbsp;</B> Turns on various amounts of debugging support. Setting this to 'no' disables g_assert(), g_return_if_fail(), g_return_val_if_fail() and all cast checks between different object types. Setting it to 'minimum' disables only cast checks. Setting it to 'yes' enables <A class=link title=G_DEBUG href="https://developer.gnome.org/glib/stable/glib-running.html#G-DEBUG:CAPS">runtime debugging</A>. The default is 'minimum'. Note that 'no' is fast, but dangerous as it tends to destabilize even mostly bug-free software by changing the effect of many bugs from simple warnings into fatal crashes. Thus <CODE class=option>--enable-debug=no</CODE> should <SPAN class=emphasis><EM>not</EM></SPAN> be used for stable releases of GLib. </P>
<P><B><CODE class=systemitem>--disable-gc-friendly</CODE> and <CODE class=systemitem>--enable-gc-friendly</CODE>.&nbsp;</B> By default, and with <CODE class=systemitem>--disable-gc-friendly</CODE> as well, Glib does not clear the memory for certain objects before they are freed. For example, Glib may decide to recycle GList nodes by putting them in a free list. However, memory profiling and debugging tools like <A class=ulink href="http://www.valgrind.org/" target=_top>Valgrind</A> work better if an application does not keep dangling pointers to freed memory (even though these pointers are no longer dereferenced), or invalid pointers inside uninitialized memory. The <CODE class=systemitem>--enable-gc-friendly</CODE> option makes Glib clear memory in these situations: </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>When shrinking a GArray, Glib will clear the memory no longer available in the array: shrink an array from 10 bytes to 7, and the last 3 bytes will be cleared. This includes removals of single and multiple elements. </P>
<LI class=listitem>
<P>When growing a GArray, Glib will clear the new chunk of memory. Grow an array from 7 bytes to 10 bytes, and the last 3 bytes will be cleared. </P>
<LI class=listitem>
<P>The above applies to GPtrArray as well. </P>
<LI class=listitem>
<P>When freeing a node from a GHashTable, Glib will first clear the node, which used to have pointers to the key and the value stored at that node. </P>
<LI class=listitem>
<P>When destroying or removing a GTree node, Glib will clear the node, which used to have pointers to the node's value, and the left and right subnodes. </P></LI></UL></DIV>
<P>Since clearing the memory has a cost, <CODE class=systemitem>--disable-gc-friendly</CODE> is the default. </P>
<P><B><CODE class=systemitem>--disable-mem-pools</CODE> and <CODE class=systemitem>--enable-mem-pools</CODE>.&nbsp;</B> Many small chunks of memory are often allocated via collective pools in GLib and are cached after release to speed up reallocations. For sparse memory systems this behaviour is often inferior, so memory pools can be disabled to avoid excessive caching and force atomic maintenance of chunks through the <CODE class=function>g_malloc()</CODE> and <CODE class=function>g_free()</CODE> functions. Code currently affected by this: </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P><SPAN class=structname>GMemChunk</SPAN>s become basically non-effective </P>
<LI class=listitem>
<P><SPAN class=structname>GSignal</SPAN> disables all caching (potentially very slow) </P>
<LI class=listitem>
<P><SPAN class=structname>GType</SPAN> doesn't honour the <SPAN class=structname>GTypeInfo</SPAN> <EM class=structfield><CODE>n_preallocs</CODE></EM> field anymore </P>
<LI class=listitem>
<P>the <SPAN class=structname>GBSearchArray</SPAN> flag <CODE class=literal>G_BSEARCH_ALIGN_POWER2</CODE> becomes non-functional </P></LI></UL></DIV>
<P></P>
<P><B><CODE class=systemitem>--with-threads</CODE>.&nbsp;</B> Specify a thread implementation to use. Available options are 'posix' or 'win32'. Normally, <SPAN class=command><STRONG>configure</STRONG></SPAN> should be able to work out the system threads API on its own. </P>
<P><B><CODE class=systemitem>--disable-regex</CODE> and <CODE class=systemitem>--enable-regex</CODE>.&nbsp;</B> Do not compile GLib with regular expression support. GLib will be smaller because it will not need the PCRE library. This is however not recommended, as programs may need GRegex. </P>
<P><B><CODE class=systemitem>--with-pcre</CODE>.&nbsp;</B> Specify whether to use the internal or the system-supplied PCRE library. </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>'internal' means that GRegex will be compiled to use the internal PCRE library. </P>
<LI class=listitem>
<P>'system' means that GRegex will be compiled to use the system-supplied PCRE library. </P></LI></UL></DIV>
<P>Using the internal PCRE is the preferred solution: </P>
<DIV class=itemizedlist>
<UL style="LIST-STYLE-TYPE: disc" class=itemizedlist>
<LI class=listitem>
<P>System-supplied PCRE has a separated copy of the big tables used for Unicode handling. </P>
<LI class=listitem>
<P>Some systems have PCRE libraries compiled without some needed features, such as UTF-8 and Unicode support. </P>
<LI class=listitem>
<P>PCRE uses some global variables for memory management and other features. In the rare case of a program using both GRegex and PCRE (maybe indirectly through a library), this variables could lead to problems when they are modified. </P></LI></UL></DIV>
<P></P>
<P><B><CODE class=systemitem>--disable-included-printf</CODE> and <CODE class=systemitem>--enable-included-printf</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will try to auto-detect whether the C library provides a suitable set of printf() functions. In detail, <SPAN class=command><STRONG>configure</STRONG></SPAN> checks that the semantics of snprintf() are as specified by C99 and that positional parameters as specified in the Single Unix Specification are supported. If this not the case, GLib will include an implementation of the printf() family. These options can be used to explicitly control whether an implementation of the printf() family should be included or not. </P>
<P><B><CODE class=systemitem>--disable-Bsymbolic</CODE> and <CODE class=systemitem>--enable-Bsymbolic</CODE>.&nbsp;</B> By default, GLib uses the -Bsymbolic-functions linker flag to avoid intra-library PLT jumps. A side-effect of this is that it is no longer possible to override internal uses of GLib functions with <CODE class=envar>LD_PRELOAD</CODE>. Therefore, it may make sense to turn this feature off in some situations. The <CODE class=option>--disable-Bsymbolic</CODE> option allows to do that. </P>
<P><B><CODE class=systemitem>--disable-gtk-doc</CODE> and <CODE class=systemitem>--enable-gtk-doc</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will try to auto-detect whether the <SPAN class=application>gtk-doc</SPAN> package is installed. If it is, then it will use it to extract and build the documentation for the GLib library. These options can be used to explicitly control whether <SPAN class=application>gtk-doc</SPAN> should be used or not. If it is not used, the distributed, pre-generated HTML files will be installed instead of building them on your machine. </P>
<P><B><CODE class=systemitem>--disable-man</CODE> and <CODE class=systemitem>--enable-man</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will try to auto-detect whether <SPAN class=application>xsltproc</SPAN> and the necessary Docbook stylesheets are installed. If they are, then it will use them to rebuild the included man pages from the XML sources. These options can be used to explicitly control whether man pages should be rebuilt used or not. The distribution includes pre-generated man pages. </P>
<P><B><CODE class=systemitem>--disable-xattr</CODE> and <CODE class=systemitem>--enable-xattr</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will try to auto-detect whether the getxattr() family of functions is available. If it is, then extended attribute support will be included in GIO. These options can be used to explicitly control whether extended attribute support should be included or not. getxattr() and friends can be provided by glibc or by the standalone libattr library. </P>
<P><B><CODE class=systemitem>--disable-selinux</CODE> and <CODE class=systemitem>--enable-selinux</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will auto-detect if libselinux is available and include SELinux support in GIO if it is. These options can be used to explicitly control whether SELinux support should be included. </P>
<P><B><CODE class=systemitem>--disable-dtrace</CODE> and <CODE class=systemitem>--enable-dtrace</CODE>.&nbsp;</B> By default the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will detect if DTrace support is available, and use it. </P>
<P><B><CODE class=systemitem>--disable-systemtap</CODE> and <CODE class=systemitem>--enable-systemtap</CODE>.&nbsp;</B> This option requires DTrace support. If it is available, then the <SPAN class=command><STRONG>configure</STRONG></SPAN> script will also check for the presence of SystemTap. </P>
<P><B><CODE class=systemitem>--enable-coverage</CODE> and <CODE class=systemitem>--disable-coverage</CODE>.&nbsp;</B> Enable the generation of coverage reports for the GLib tests. This requires the lcov frontend to gcov from the <A class=ulink href="http://ltp.sourceforge.net/" target=_top>Linux Test Project</A>. To generate a coverage report, use the lcov make target. The report is placed in the <CODE class=filename>glib-lcov</CODE> directory. </P>
<P><B><CODE class=systemitem>--with-runtime-libdir=RELPATH</CODE>.&nbsp;</B> Allows specifying a relative path to where to install the runtime libraries (meaning library files used for running, not developing, GLib applications). This can be used in operating system setups where programs using GLib needs to run before e.g. <CODE class=filename>/usr</CODE> is mounted. For example, if LIBDIR is <CODE class=filename>/usr/lib</CODE> and <CODE class=filename>../../lib</CODE> is passed to <CODE class=systemitem>--with-runtime-libdir</CODE> then the runtime libraries are installed into <CODE class=filename>/lib</CODE> rather than <CODE class=filename>/usr/lib</CODE>. </P>
<P><B><CODE class=systemitem>--with-python</CODE>.&nbsp;</B> Allows specifying the Python interpreter to use, either as an absolute path, or as a program name. GLib can be built with Python 2 (at least version 2.5) or Python 3. </P></DIV>