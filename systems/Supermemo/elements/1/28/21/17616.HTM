<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-Base64-Encoding.top_of_page></A>Base64 Encoding</SPAN></H2>
<P>Base64 Encoding &#8212; encodes and decodes data in Base64 format</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-Base64-Encoding.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_base64_encode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-step">g_base64_encode_step</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_base64_encode_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-close">g_base64_encode_close</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_base64_encode&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode">g_base64_encode</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_base64_decode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode-step">g_base64_decode_step</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=returnvalue>guchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_base64_decode&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode">g_base64_decode</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=returnvalue>guchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_base64_decode_inplace&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode-inplace">g_base64_decode_inplace</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-Base64-Encoding.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-Base64-Encoding.description></A>
<H2>Description</H2>
<P>Base64 is an encoding that allows a sequence of arbitrary bytes to be encoded as a sequence of printable ASCII characters. For the definition of Base64, see <A class=ulink href="http://www.ietf.org/rfc/rfc1421.txt" target=_top>RFC 1421</A> or <A class=ulink href="http://www.ietf.org/rfc/rfc2045.txt" target=_top>RFC 2045</A>. Base64 is most commonly used as a MIME transfer encoding for email.</P>
<P>GLib supports incremental encoding using <A class=link title=g_base64_encode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-step"><CODE class=function>g_base64_encode_step()</CODE></A> and <A class=link title=g_base64_encode_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-close"><CODE class=function>g_base64_encode_close()</CODE></A>. Incremental decoding can be done with <A class=link title=g_base64_decode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode-step"><CODE class=function>g_base64_decode_step()</CODE></A>. To encode or decode data in one go, use <A class=link title=g_base64_encode&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode"><CODE class=function>g_base64_encode()</CODE></A> or <A class=link title=g_base64_decode&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode"><CODE class=function>g_base64_decode()</CODE></A>. To avoid memory allocation when decoding, you can use <A class=link title=g_base64_decode_inplace&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-decode-inplace"><CODE class=function>g_base64_decode_inplace()</CODE></A>.</P>
<P>Support for Base64 encoding has been added in GLib 2.12.</P></DIV>
<DIV class=refsect1><A name=glib-Base64-Encoding.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-base64-encode-step></A>
<H3>g_base64_encode_step&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_base64_encode_step (<EM class=parameter><CODE>const <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> *in</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> len</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> break_lines</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *out</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *state</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *save</CODE></EM>);</PRE>
<P>Incrementally encode a sequence of binary data into its Base-64 stringified representation. By calling this function multiple times you can convert data in chunks to avoid having to have the full encoded data in memory.</P>
<P>When all of the data has been converted you must call <A class=link title=g_base64_encode_close&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-close"><CODE class=function>g_base64_encode_close()</CODE></A> to flush the saved state.</P>
<P>The output buffer must be large enough to fit all the data that will be written to it. Due to the way base64 encodes you will need at least: (<EM class=parameter><CODE>len</CODE></EM> / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of non-zero state). If you enable line-breaking you will need at least: ((<EM class=parameter><CODE>len</CODE></EM> / 3 + 1) * 4 + 4) / 72 + 1 bytes of extra space.</P>
<P><EM class=parameter><CODE>break_lines</CODE></EM> is typically used when putting base64-encoded data in emails. It breaks the lines at 72 columns instead of putting all of the text on the same line. This avoids problems with long lines in the email system. Note however that it breaks the lines with <CODE class=literal>LF</CODE> characters, not <CODE class=literal>CR LF</CODE> sequences, so the result cannot be passed directly to SMTP or certain other protocols.</P>
<DIV class=refsect3><A name=id-1.5.5.6.2.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>in</P></TD>
<TD class=parameter_description>
<P>the binary data to encode. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=len][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>the length of <EM class=parameter><CODE>in</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>break_lines</P></TD>
<TD class=parameter_description>
<P>whether to break long lines</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>out</P></TD>
<TD class=parameter_description>
<P>pointer to destination buffer. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM>][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>state</P></TD>
<TD class=parameter_description>
<P>Saved state between steps, initialize to 0. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>save</P></TD>
<TD class=parameter_description>
<P>Saved state between steps, initialize to 0. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.2.9></A>
<H4>Returns</H4>
<P>The number of bytes of output that was written</P>
<P></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-base64-encode-close></A>
<H3>g_base64_encode_close&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_base64_encode_close (<EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> break_lines</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *out</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *state</CODE></EM>,
                       <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *save</CODE></EM>);</PRE>
<P>Flush the status from a sequence of calls to <A class=link title=g_base64_encode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-step"><CODE class=function>g_base64_encode_step()</CODE></A>.</P>
<P>The output buffer must be large enough to fit all the data that will be written to it. It will need up to 4 bytes, or up to 5 bytes if line-breaking is enabled.</P>
<DIV class=refsect3><A name=id-1.5.5.6.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>break_lines</P></TD>
<TD class=parameter_description>
<P>whether to break long lines</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>out</P></TD>
<TD class=parameter_description>
<P>pointer to destination buffer. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM>][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>state</P></TD>
<TD class=parameter_description>
<P>Saved state from <A class=link title=g_base64_encode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-step"><CODE class=function>g_base64_encode_step()</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>save</P></TD>
<TD class=parameter_description>
<P>Saved state from <A class=link title=g_base64_encode_step&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Base64-Encoding.html#g-base64-encode-step"><CODE class=function>g_base64_encode_step()</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.3.7></A>
<H4>Returns</H4>
<P>The number of bytes of output that was written</P>
<P></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-base64-encode></A>
<H3>g_base64_encode&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_base64_encode (<EM class=parameter><CODE>const <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> *data</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> len</CODE></EM>);</PRE>
<P>Encode a sequence of binary data into its Base-64 stringified representation.</P>
<DIV class=refsect3><A name=id-1.5.5.6.4.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>data</P></TD>
<TD class=parameter_description>
<P>the binary data to encode. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=len][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>the length of <EM class=parameter><CODE>data</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.4.6></A>
<H4>Returns</H4>
<P>a newly allocated, zero-terminated Base-64 encoded string representing <EM class=parameter><CODE>data</CODE></EM> . The returned string must be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-base64-decode-step></A>
<H3>g_base64_decode_step&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_base64_decode_step (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *in</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> len</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> *out</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> *state</CODE></EM>,
                      <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *save</CODE></EM>);</PRE>
<P>Incrementally decode a sequence of binary data from its Base-64 stringified representation. By calling this function multiple times you can convert data in chunks to avoid having to have the full encoded data in memory.</P>
<P>The output buffer must be large enough to fit all the data that will be written to it. Since base64 encodes 3 bytes in 4 chars you need at least: (<EM class=parameter><CODE>len</CODE></EM> / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero state).</P>
<DIV class=refsect3><A name=id-1.5.5.6.5.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>in</P></TD>
<TD class=parameter_description>
<P>binary input data. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=len][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>max length of <EM class=parameter><CODE>in</CODE></EM> data to decode</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>out</P></TD>
<TD class=parameter_description>
<P>output buffer. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM>][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>state</P></TD>
<TD class=parameter_description>
<P>Saved state between steps, initialize to 0. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>save</P></TD>
<TD class=parameter_description>
<P>Saved state between steps, initialize to 0. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.5.7></A>
<H4>Returns</H4>
<P>The number of bytes of output that was written</P>
<P></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-base64-decode></A>
<H3>g_base64_decode&nbsp;()</H3><PRE class=programlisting><A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=returnvalue>guchar</SPAN></A>&nbsp;*
g_base64_decode (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *text</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> *out_len</CODE></EM>);</PRE>
<P>Decode a sequence of Base-64 encoded text into binary data. Note that the returned binary data is not necessarily zero-terminated, so it should not be used as a character string.</P>
<DIV class=refsect3><A name=id-1.5.5.6.6.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>text</P></TD>
<TD class=parameter_description>
<P>zero-terminated string with base64 text to decode</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>out_len</P></TD>
<TD class=parameter_description>
<P>The length of the decoded data is written here. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.6.6></A>
<H4>Returns</H4>
<P>newly allocated buffer containing the binary data that <EM class=parameter><CODE>text</CODE></EM> represents. The returned buffer must be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=out_len][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-base64-decode-inplace></A>
<H3>g_base64_decode_inplace&nbsp;()</H3><PRE class=programlisting><A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=returnvalue>guchar</SPAN></A>&nbsp;*
g_base64_decode_inplace (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *text</CODE></EM>,
                         <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> *out_len</CODE></EM>);</PRE>
<P>Decode a sequence of Base-64 encoded text into binary data by overwriting the input data.</P>
<DIV class=refsect3><A name=id-1.5.5.6.7.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>text</P></TD>
<TD class=parameter_description>
<P>zero-terminated string with base64 text to decode. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=out_len][<ACRONYM title="Generics and defining elements of containers and arrays."><SPAN class=acronym>element-type</SPAN></ACRONYM> guint8]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>out_len</P></TD>
<TD class=parameter_description>
<P>The length of the decoded data is written here. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for input and for returning results. Default is transfer full."><SPAN class=acronym>inout</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.5.6.7.6></A>
<H4>Returns</H4>
<P>The binary data that <EM class=parameter><CODE>text</CODE></EM> responds. This pointer is the same as the input <EM class=parameter><CODE>text</CODE></EM> . </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since 2.20</P></DIV></DIV>
<DIV class=refsect1><A name=glib-Base64-Encoding.other_details></A>
<H2>Types and Values</H2></DIV>