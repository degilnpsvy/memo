<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle><A name=glib-String-Utility-Functions.top_of_page></A>String Utility Functions</SPAN></H2>
<P>String Utility Functions &#8212; various string-related functions</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE>
<DIV class=refsect1><A name=glib-String-Utility-Functions.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=functions_return width=150></COL>
<COL class=functions_name></COL></COLGROUP>
<TBODY>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strdup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup">g_strdup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strndup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strndup">g_strndup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;** </TD>
<TD class=function_name><A class=link title=g_strdupv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdupv">g_strdupv</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strnfill&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strnfill">g_strnfill</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_stpcpy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-stpcpy">g_stpcpy</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strstr_len&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strstr-len">g_strstr_len</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strrstr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strrstr">g_strrstr</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strrstr_len&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strrstr-len">g_strrstr_len</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_str_has_prefix&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-has-prefix">g_str_has_prefix</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_str_has_suffix&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-has-suffix">g_str_has_suffix</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A class=link title=g_strcmp0&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcmp0">g_strcmp0</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_str_to_ascii&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-to-ascii">g_str_to_ascii</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;** </TD>
<TD class=function_name><A class=link title=g_str_tokenize_and_fold&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-tokenize-and-fold">g_str_tokenize_and_fold</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_str_match_string&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-match-string">g_str_match_string</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strlcpy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strlcpy">g_strlcpy</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strlcat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strlcat">g_strlcat</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strdup_printf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup-printf">g_strdup_printf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strdup_vprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup-vprintf">g_strdup_vprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_printf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-printf">g_printf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_vprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vprintf">g_vprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_fprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-fprintf">g_fprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_vfprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vfprintf">g_vfprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_sprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-sprintf">g_sprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_vsprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsprintf">g_vsprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_snprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-snprintf">g_snprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_vsnprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsnprintf">g_vsnprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_vasprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vasprintf">g_vasprintf</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_printf_string_upper_bound&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-printf-string-upper-bound">g_printf_string_upper_bound</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_str_is_ascii&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-is-ascii">g_str_is_ascii</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isalnum&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isalnum">g_ascii_isalnum</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isalpha&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isalpha">g_ascii_isalpha</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_iscntrl&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-iscntrl">g_ascii_iscntrl</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isdigit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isdigit">g_ascii_isdigit</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isgraph&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isgraph">g_ascii_isgraph</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_islower&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-islower">g_ascii_islower</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isprint&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isprint">g_ascii_isprint</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_ispunct&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-ispunct">g_ascii_ispunct</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isspace&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isspace">g_ascii_isspace</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isupper&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isupper">g_ascii_isupper</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_isxdigit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isxdigit">g_ascii_isxdigit</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_digit_value&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-digit-value">g_ascii_digit_value</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_xdigit_value&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-xdigit-value">g_ascii_xdigit_value</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_strcasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strcasecmp">g_ascii_strcasecmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strncasecmp">g_ascii_strncasecmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_ascii_strup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strup">g_ascii_strup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_ascii_strdown&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strdown">g_ascii_strdown</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_tolower&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-tolower">g_ascii_tolower</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_toupper&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-toupper">g_ascii_toupper</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=returnvalue>GString</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_string_ascii_up&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-string-ascii-up">g_string_ascii_up</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=returnvalue>GString</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_string_ascii_down&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-string-ascii-down">g_string_ascii_down</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strup">g_strup</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strdown&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdown">g_strdown</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strcasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcasecmp">g_strcasecmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp">g_strncasecmp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strreverse&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strreverse">g_strreverse</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint64"><SPAN class=returnvalue>gint64</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_strtoll&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtoll">g_ascii_strtoll</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=returnvalue>guint64</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_strtoull&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtoull">g_ascii_strtoull</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_ASCII_DTOSTR_BUF_SIZE href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#G-ASCII-DTOSTR-BUF-SIZE:CAPS">G_ASCII_DTOSTR_BUF_SIZE</A></TD></TR>
<TR>
<TD class=function_type><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=returnvalue>gdouble</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_ascii_strtod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtod">g_ascii_strtod</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_ascii_dtostr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-dtostr">g_ascii_dtostr</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_ascii_formatd&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-formatd">g_ascii_formatd</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=returnvalue>gdouble</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strtod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strtod">g_strtod</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strchug&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchug">g_strchug</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strchomp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchomp">g_strchomp</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=g_strstrip() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strstrip">g_strstrip</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strdelimit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdelimit">g_strdelimit</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strescape&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strescape">g_strescape</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strcompress&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcompress">g_strcompress</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strcanon&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcanon">g_strcanon</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;** </TD>
<TD class=function_name><A class=link title=g_strsplit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit">g_strsplit</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;** </TD>
<TD class=function_name><A class=link title=g_strsplit_set&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit-set">g_strsplit_set</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev">g_strfreev</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strconcat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strconcat">g_strconcat</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strjoin&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strjoin">g_strjoin</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strjoinv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strjoinv">g_strjoinv</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A class=link title=g_strv_length&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strv-length">g_strv_length</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strerror&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strerror">g_strerror</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A class=link title=g_strsignal&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsignal">g_strsignal</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-String-Utility-Functions.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=name width=150></COL>
<COL class=description></COL></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A class=link title=G_STR_DELIMITERS href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#G-STR-DELIMITERS:CAPS">G_STR_DELIMITERS</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=glib-String-Utility-Functions.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib.h&gt;
#include &lt;glib/gprintf.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=glib-String-Utility-Functions.description></A>
<H2>Description</H2>
<P>This section describes a number of utility functions for creating, duplicating, and manipulating strings.</P>
<P>Note that the functions <A class=link title=g_printf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-printf"><CODE class=function>g_printf()</CODE></A>, <A class=link title=g_fprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-fprintf"><CODE class=function>g_fprintf()</CODE></A>, <A class=link title=g_sprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-sprintf"><CODE class=function>g_sprintf()</CODE></A>, <A class=link title=g_snprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-snprintf"><CODE class=function>g_snprintf()</CODE></A>, <A class=link title=g_vprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vprintf"><CODE class=function>g_vprintf()</CODE></A>, <A class=link title=g_vfprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vfprintf"><CODE class=function>g_vfprintf()</CODE></A>, <A class=link title=g_vsprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsprintf"><CODE class=function>g_vsprintf()</CODE></A> and <A class=link title=g_vsnprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsnprintf"><CODE class=function>g_vsnprintf()</CODE></A> are declared in the header <CODE class=literal>gprintf.h</CODE> which is not included in <CODE class=literal>glib.h</CODE> (otherwise using <CODE class=literal>glib.h</CODE> would drag in <CODE class=literal>stdio.h</CODE>), so you'll have to explicitly include <CODE class=literal>&lt;glib/gprintf.h&gt;</CODE> in order to use the GLib <CODE class=function>printf()</CODE> functions.</P>
<DIV class=refsect3><A name=string-precision></A>
<H4>String precision pitfalls</H4>
<P>While you may use the <CODE class=function>printf()</CODE> functions to format UTF-8 strings, notice that the precision of a %Ns parameter is interpreted as the number of bytes, not characters to print. On top of that, the GNU libc implementation of the <CODE class=function>printf()</CODE> functions has the "feature" that it checks that the string given for the %Ns parameter consists of a whole number of characters in the current encoding. So, unless you are sure you are always going to be in an UTF-8 locale or your know your text is restricted to ASCII, avoid using %Ns. If your intention is to format strings for a certain number of columns, then %Ns is not a correct solution anyway, since it fails to take wide characters (see <A class=link title=g_unichar_iswide&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-unichar-iswide"><CODE class=function>g_unichar_iswide()</CODE></A>) into account.</P></DIV></DIV>
<DIV class=refsect1><A name=glib-String-Utility-Functions.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=g-strdup></A>
<H3>g_strdup&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strdup (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>);</PRE>
<P>Duplicates a string. If <EM class=parameter><CODE>str</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed.</P>
<DIV class=refsect3><A name=id-1.5.2.7.2.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>the string to duplicate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.2.6></A>
<H4>Returns</H4>
<P>a newly-allocated copy of <EM class=parameter><CODE>str</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strndup></A>
<H3>g_strndup&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strndup (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n</CODE></EM>);</PRE>
<P>Duplicates the first <EM class=parameter><CODE>n</CODE></EM> bytes of a string, returning a newly-allocated buffer <EM class=parameter><CODE>n</CODE></EM> + 1 bytes long which will always be nul-terminated. If <EM class=parameter><CODE>str</CODE></EM> is less than <EM class=parameter><CODE>n</CODE></EM> bytes long the buffer is padded with nuls. If <EM class=parameter><CODE>str</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> it returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. The returned value should be freed when no longer needed.</P>
<P>To copy a number of characters from a UTF-8 encoded string, use <A class=link title=g_utf8_strncpy&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-utf8-strncpy"><CODE class=function>g_utf8_strncpy()</CODE></A> instead.</P>
<DIV class=refsect3><A name=id-1.5.2.7.3.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>the string to duplicate</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n</P></TD>
<TD class=parameter_description>
<P>the maximum number of bytes to copy from <EM class=parameter><CODE>str</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.3.7></A>
<H4>Returns</H4>
<P>a newly-allocated buffer containing the first <EM class=parameter><CODE>n</CODE></EM> bytes of <EM class=parameter><CODE>str</CODE></EM> , nul-terminated</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strdupv></A>
<H3>g_strdupv&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;**
g_strdupv (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **str_array</CODE></EM>);</PRE>
<P>Copies <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings. The copy is a deep copy; the new array should be freed by first freeing each string, then the array itself. <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A> does this for you. If called on a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> value, <A class=link title=g_strdupv&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdupv"><CODE class=function>g_strdupv()</CODE></A> simply returns <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.4.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str_array</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.4.6></A>
<H4>Returns</H4>
<P>a new <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strnfill></A>
<H3>g_strnfill&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strnfill (<EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> length</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> fill_char</CODE></EM>);</PRE>
<P>Creates a new string <EM class=parameter><CODE>length</CODE></EM> bytes long filled with <EM class=parameter><CODE>fill_char</CODE></EM> . The returned string should be freed when no longer needed.</P>
<DIV class=refsect3><A name=id-1.5.2.7.5.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>length</P></TD>
<TD class=parameter_description>
<P>the length of the new string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>fill_char</P></TD>
<TD class=parameter_description>
<P>the byte to fill the string with</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.5.6></A>
<H4>Returns</H4>
<P>a newly-allocated string filled the <EM class=parameter><CODE>fill_char</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-stpcpy></A>
<H3>g_stpcpy&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_stpcpy (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *dest</CODE></EM>,
          <EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *src</CODE></EM>);</PRE>
<P>Copies a nul-terminated string into the dest buffer, include the trailing nul, and return a pointer to the trailing nul byte. This is useful for concatenating multiple strings together without having to repeatedly scan for the end.</P>
<DIV class=refsect3><A name=id-1.5.2.7.6.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>destination buffer.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>source string.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.6.6></A>
<H4>Returns</H4>
<P>a pointer to trailing nul byte.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strstr-len></A>
<H3>g_strstr_len&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strstr_len (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *haystack</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gssize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> haystack_len</CODE></EM>,
              <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *needle</CODE></EM>);</PRE>
<P>Searches the string <EM class=parameter><CODE>haystack</CODE></EM> for the first occurrence of the string <EM class=parameter><CODE>needle</CODE></EM> , limiting the length of the search to <EM class=parameter><CODE>haystack_len</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.7.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>haystack</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>haystack_len</P></TD>
<TD class=parameter_description>
<P>the maximum length of <EM class=parameter><CODE>haystack</CODE></EM> . Note that -1 is a valid length, if <EM class=parameter><CODE>haystack</CODE></EM> is nul-terminated, meaning it will search through the whole string.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>needle</P></TD>
<TD class=parameter_description>
<P>the string to search for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.7.6></A>
<H4>Returns</H4>
<P>a pointer to the found occurrence, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if not found.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strrstr></A>
<H3>g_strrstr&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strrstr (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *haystack</CODE></EM>,
           <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *needle</CODE></EM>);</PRE>
<P>Searches the string <EM class=parameter><CODE>haystack</CODE></EM> for the last occurrence of the string <EM class=parameter><CODE>needle</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.8.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>haystack</P></TD>
<TD class=parameter_description>
<P>a nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>needle</P></TD>
<TD class=parameter_description>
<P>the nul-terminated string to search for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.8.6></A>
<H4>Returns</H4>
<P>a pointer to the found occurrence, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if not found.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strrstr-len></A>
<H3>g_strrstr_len&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strrstr_len (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *haystack</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gssize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> haystack_len</CODE></EM>,
               <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *needle</CODE></EM>);</PRE>
<P>Searches the string <EM class=parameter><CODE>haystack</CODE></EM> for the last occurrence of the string <EM class=parameter><CODE>needle</CODE></EM> , limiting the length of the search to <EM class=parameter><CODE>haystack_len</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.9.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>haystack</P></TD>
<TD class=parameter_description>
<P>a nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>haystack_len</P></TD>
<TD class=parameter_description>
<P>the maximum length of <EM class=parameter><CODE>haystack</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>needle</P></TD>
<TD class=parameter_description>
<P>the nul-terminated string to search for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.9.6></A>
<H4>Returns</H4>
<P>a pointer to the found occurrence, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if not found.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-has-prefix></A>
<H3>g_str_has_prefix&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_str_has_prefix (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
                  <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *prefix</CODE></EM>);</PRE>
<P>Looks whether the string <EM class=parameter><CODE>str</CODE></EM> begins with <EM class=parameter><CODE>prefix</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.10.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>prefix</P></TD>
<TD class=parameter_description>
<P>the nul-terminated prefix to look for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.10.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>str</CODE></EM> begins with <EM class=parameter><CODE>prefix</CODE></EM> , <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> otherwise.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-has-suffix></A>
<H3>g_str_has_suffix&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_str_has_suffix (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
                  <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *suffix</CODE></EM>);</PRE>
<P>Looks whether the string <EM class=parameter><CODE>str</CODE></EM> ends with <EM class=parameter><CODE>suffix</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.11.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>suffix</P></TD>
<TD class=parameter_description>
<P>the nul-terminated suffix to look for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.11.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>str</CODE></EM> end with <EM class=parameter><CODE>suffix</CODE></EM> , <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> otherwise.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strcmp0></A>
<H3>g_strcmp0&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_strcmp0 (<EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *str1</CODE></EM>,
           <EM class=parameter><CODE>const <SPAN class=type>char</SPAN> *str2</CODE></EM>);</PRE>
<P>Compares <EM class=parameter><CODE>str1</CODE></EM> and <EM class=parameter><CODE>str2</CODE></EM> like <CODE class=function>strcmp()</CODE>. Handles <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> gracefully by sorting it before non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> strings. Comparing two <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> pointers returns 0.</P>
<DIV class=refsect3><A name=id-1.5.2.7.12.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str1</P></TD>
<TD class=parameter_description>
<P>a C string or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>str2</P></TD>
<TD class=parameter_description>
<P>another C string or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.12.6></A>
<H4>Returns</H4>
<P>an integer less than, equal to, or greater than zero, if <EM class=parameter><CODE>str1</CODE></EM> is &lt;, == or &gt; than <EM class=parameter><CODE>str2</CODE></EM> .</P>
<P></P></DIV>
<P class=since>Since 2.16</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-to-ascii></A>
<H3>g_str_to_ascii&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_str_to_ascii (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *from_locale</CODE></EM>);</PRE>
<P>Transliterate <EM class=parameter><CODE>str</CODE></EM> to plain ASCII.</P>
<P>For best results, <EM class=parameter><CODE>str</CODE></EM> should be in composed normalised form.</P>
<P>This function performs a reasonably good set of character replacements. The particular set of replacements that is done may change by version or even by runtime environment.</P>
<P>If the source language of <EM class=parameter><CODE>str</CODE></EM> is known, it can used to improve the accuracy of the translation by passing it as <EM class=parameter><CODE>from_locale</CODE></EM> . It should be a valid POSIX locale string (of the form "language_territory[<EM class=parameter><CODE>modifier</CODE></EM> ]").</P>
<P>If <EM class=parameter><CODE>from_locale</CODE></EM> is <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> then the current locale is used.</P>
<P>If you want to do translation for no specific locale, and you want it to be done independently of the currently locale, specify "C" for <EM class=parameter><CODE>from_locale</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.13.10></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a string, in UTF-8</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>from_locale</P></TD>
<TD class=parameter_description>
<P>the source locale, if known. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.13.11></A>
<H4>Returns</H4>
<P>a string in plain ASCII</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-tokenize-and-fold></A>
<H3>g_str_tokenize_and_fold&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;**
g_str_tokenize_and_fold (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
                         <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *translit_locale</CODE></EM>,
                         <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> ***ascii_alternates</CODE></EM>);</PRE>
<P>Tokenises <EM class=parameter><CODE>string</CODE></EM> and performs folding on each token.</P>
<P>A token is a non-empty sequence of alphanumeric characters in the source string, separated by non-alphanumeric characters. An "alphanumeric" character for this purpose is one that matches <A class=link title=g_unichar_isalnum&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-unichar-isalnum"><CODE class=function>g_unichar_isalnum()</CODE></A> or <A class=link title=g_unichar_ismark&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-unichar-ismark"><CODE class=function>g_unichar_ismark()</CODE></A>.</P>
<P>Each token is then (Unicode) normalised and case-folded. If <EM class=parameter><CODE>ascii_alternates</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> and some of the returned tokens contain non-ASCII characters, ASCII alternatives will be generated.</P>
<P>The number of ASCII alternatives that are generated and the method for doing so is unspecified, but <EM class=parameter><CODE>translit_locale</CODE></EM> (if specified) may improve the transliteration if the language of the source string is known.</P>
<DIV class=refsect3><A name=id-1.5.2.7.14.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>translit_locale</P></TD>
<TD class=parameter_description>
<P>the language code (like 'de' or 'en_GB') from which <EM class=parameter><CODE>string</CODE></EM> originates. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>ascii_alternates</P></TD>
<TD class=parameter_description>
<P>a return location for ASCII alternates. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.14.9></A>
<H4>Returns</H4>
<P>the folded tokens. </P>
<P><SPAN class=annotation>[<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>][<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> zero-terminated=1]</SPAN></P></DIV>
<P class=since>Since 2.40</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-match-string></A>
<H3>g_str_match_string&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_str_match_string (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *search_term</CODE></EM>,
                    <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *potential_hit</CODE></EM>,
                    <EM class=parameter><CODE><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A> accept_alternates</CODE></EM>);</PRE>
<P>Checks if a search conducted for <EM class=parameter><CODE>search_term</CODE></EM> should match <EM class=parameter><CODE>potential_hit</CODE></EM> .</P>
<P>This function calls <A class=link title=g_str_tokenize_and_fold&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-tokenize-and-fold"><CODE class=function>g_str_tokenize_and_fold()</CODE></A> on both <EM class=parameter><CODE>search_term</CODE></EM> and <EM class=parameter><CODE>potential_hit</CODE></EM> . ASCII alternates are never taken for <EM class=parameter><CODE>search_term</CODE></EM> but will be taken for <EM class=parameter><CODE>potential_hit</CODE></EM> according to the value of <EM class=parameter><CODE>accept_alternates</CODE></EM> .</P>
<P>A hit occurs when each folded token in <EM class=parameter><CODE>search_term</CODE></EM> is a prefix of a folded token from <EM class=parameter><CODE>potential_hit</CODE></EM> .</P>
<P>Depending on how you're performing the search, it will typically be faster to call <A class=link title=g_str_tokenize_and_fold&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-tokenize-and-fold"><CODE class=function>g_str_tokenize_and_fold()</CODE></A> on each string in your corpus and build an index on the returned folded tokens, then call <A class=link title=g_str_tokenize_and_fold&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-str-tokenize-and-fold"><CODE class=function>g_str_tokenize_and_fold()</CODE></A> on the search term and perform lookups into that index.</P>
<P>As some examples, searching for "fred" would match the potential hit "Smith, Fred" and also "Fr&#233;d&#233;ric". Searching for "Fr&#233;d" would match "Fr&#233;d&#233;ric" but not "Frederic" (due to the one-directional nature of accent matching). Searching "fo" would match "Foo" and "Bar Foo Baz", but not "SFO" (because no word as "fo" as a prefix).</P>
<DIV class=refsect3><A name=id-1.5.2.7.15.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>search_term</P></TD>
<TD class=parameter_description>
<P>the search term from the user</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>potential_hit</P></TD>
<TD class=parameter_description>
<P>the text that may be a hit</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>accept_alternates</P></TD>
<TD class=parameter_description>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> to accept ASCII alternates</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.15.10></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>potential_hit</CODE></EM> is a hit</P>
<P></P></DIV>
<P class=since>Since 2.40</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strlcpy></A>
<H3>g_strlcpy&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_strlcpy (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *dest</CODE></EM>,
           <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *src</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> dest_size</CODE></EM>);</PRE>
<P>Portability wrapper that calls <CODE class=function>strlcpy()</CODE> on systems which have it, and emulates <CODE class=function>strlcpy()</CODE> otherwise. Copies <EM class=parameter><CODE>src</CODE></EM> to <EM class=parameter><CODE>dest</CODE></EM> ; <EM class=parameter><CODE>dest</CODE></EM> is guaranteed to be nul-terminated; <EM class=parameter><CODE>src</CODE></EM> must be nul-terminated; <EM class=parameter><CODE>dest_size</CODE></EM> is the buffer size, not the number of bytes to copy.</P>
<P>At most <EM class=parameter><CODE>dest_size</CODE></EM> - 1 characters will be copied. Always nul-terminates (unless <EM class=parameter><CODE>dest_size</CODE></EM> is 0). This function does not allocate memory. Unlike <CODE class=function>strncpy()</CODE>, this function doesn't pad <EM class=parameter><CODE>dest</CODE></EM> (so it's often faster). It returns the size of the attempted result, strlen (src), so if <EM class=parameter><CODE>retval</CODE></EM> &gt;= <EM class=parameter><CODE>dest_size</CODE></EM> , truncation occurred.</P>
<P>Caveat: <CODE class=function>strlcpy()</CODE> is supposedly more secure than <CODE class=function>strcpy()</CODE> or <CODE class=function>strncpy()</CODE>, but if you really want to avoid screwups, <A class=link title=g_strdup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup"><CODE class=function>g_strdup()</CODE></A> is an even better idea.</P>
<DIV class=refsect3><A name=id-1.5.2.7.16.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>destination buffer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>source buffer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>dest_size</P></TD>
<TD class=parameter_description>
<P>length of <EM class=parameter><CODE>dest</CODE></EM> in bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.16.8></A>
<H4>Returns</H4>
<P>length of <EM class=parameter><CODE>src</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strlcat></A>
<H3>g_strlcat&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_strlcat (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *dest</CODE></EM>,
           <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *src</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> dest_size</CODE></EM>);</PRE>
<P>Portability wrapper that calls <CODE class=function>strlcat()</CODE> on systems which have it, and emulates it otherwise. Appends nul-terminated <EM class=parameter><CODE>src</CODE></EM> string to <EM class=parameter><CODE>dest</CODE></EM> , guaranteeing nul-termination for <EM class=parameter><CODE>dest</CODE></EM> . The total size of <EM class=parameter><CODE>dest</CODE></EM> won't exceed <EM class=parameter><CODE>dest_size</CODE></EM> .</P>
<P>At most <EM class=parameter><CODE>dest_size</CODE></EM> - 1 characters will be copied. Unlike <CODE class=function>strncat()</CODE>, <EM class=parameter><CODE>dest_size</CODE></EM> is the full size of dest, not the space left over. This function does not allocate memory. It always nul-terminates (unless <EM class=parameter><CODE>dest_size</CODE></EM> == 0 or there were no nul characters in the <EM class=parameter><CODE>dest_size</CODE></EM> characters of dest to start with).</P>
<P>Caveat: this is supposedly a more secure alternative to <CODE class=function>strcat()</CODE> or <CODE class=function>strncat()</CODE>, but for real security <A class=link title=g_strconcat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strconcat"><CODE class=function>g_strconcat()</CODE></A> is harder to mess up.</P>
<DIV class=refsect3><A name=id-1.5.2.7.17.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>dest</P></TD>
<TD class=parameter_description>
<P>destination buffer, already containing one nul-terminated string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>src</P></TD>
<TD class=parameter_description>
<P>source buffer</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>dest_size</P></TD>
<TD class=parameter_description>
<P>length of <EM class=parameter><CODE>dest</CODE></EM> buffer in bytes (not length of existing string inside <EM class=parameter><CODE>dest</CODE></EM> )</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.17.8></A>
<H4>Returns</H4>
<P>size of attempted result, which is MIN (dest_size, strlen (original dest)) + strlen (src), so if retval &gt;= dest_size, truncation occurred.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strdup-printf></A>
<H3>g_strdup_printf&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strdup_printf (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                 <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Similar to the standard C <CODE class=function>sprintf()</CODE> function but safer, since it calculates the maximum space required and allocates memory to hold the result. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed.</P>
<DIV class=refsect3><A name=id-1.5.2.7.18.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the parameters to insert into the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.18.6></A>
<H4>Returns</H4>
<P>a newly-allocated string holding the result</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strdup-vprintf></A>
<H3>g_strdup_vprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strdup_vprintf (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                  <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>Similar to the standard C <CODE class=function>vsprintf()</CODE> function but safer, since it calculates the maximum space required and allocates memory to hold the result. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed.</P>
<P>See also <A class=link title=g_vasprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vasprintf"><CODE class=function>g_vasprintf()</CODE></A>, which offers the same functionality, but additionally returns the length of the allocated string.</P>
<DIV class=refsect3><A name=id-1.5.2.7.19.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of parameters to insert into the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.19.7></A>
<H4>Returns</H4>
<P>a newly-allocated string holding the result</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-printf></A>
<H3>g_printf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_printf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
          <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>printf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<P>As with the standard <CODE class=function>printf()</CODE>, this does not automatically append a trailing new-line character to the message, so typically <EM class=parameter><CODE>format</CODE></EM> should end with its own new-line character.</P>
<DIV class=refsect3><A name=id-1.5.2.7.20.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.20.7></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-vprintf></A>
<H3>g_vprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_vprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
           <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>vprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.21.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.21.6></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-fprintf></A>
<H3>g_fprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_fprintf (<EM class=parameter><CODE><SPAN class=type>FILE</SPAN> *file</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
           <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>fprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.22.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>the stream to write to.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.22.6></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-vfprintf></A>
<H3>g_vfprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_vfprintf (<EM class=parameter><CODE><SPAN class=type>FILE</SPAN> *file</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
            <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>fprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.23.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>file</P></TD>
<TD class=parameter_description>
<P>the stream to write to.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.23.6></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-sprintf></A>
<H3>g_sprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_sprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
           <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
           <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>sprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<P>Note that it is usually better to use <A class=link title=g_snprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-snprintf"><CODE class=function>g_snprintf()</CODE></A>, to avoid the risk of buffer overflow.</P>
<P>See also <A class=link title=g_strdup_printf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup-printf"><CODE class=function>g_strdup_printf()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.24.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>A pointer to a memory buffer to contain the resulting string. It is up to the caller to ensure that the allocated buffer is large enough to hold the formatted result</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.24.8></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-vsprintf></A>
<H3>g_vsprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_vsprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
            <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>An implementation of the standard <CODE class=function>vsprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.25.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the buffer to hold the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.25.6></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-snprintf></A>
<H3>g_snprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_snprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gulong href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gulong"><SPAN class=type>gulong</SPAN></A> n</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
            <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>A safer form of the standard <CODE class=function>sprintf()</CODE> function. The output is guaranteed to not exceed <EM class=parameter><CODE>n</CODE></EM> characters (including the terminating nul character), so it is easy to ensure that a buffer overflow cannot occur.</P>
<P>See also <A class=link title=g_strdup_printf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup-printf"><CODE class=function>g_strdup_printf()</CODE></A>.</P>
<P>In versions of GLib prior to 1.2.3, this function may return -1 if the output was truncated, and the truncated string may not be nul-terminated. In versions prior to 1.3.12, this function returns the length of the output string.</P>
<P>The return value of <A class=link title=g_snprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-snprintf"><CODE class=function>g_snprintf()</CODE></A> conforms to the <CODE class=function>snprintf()</CODE> function as standardized in ISO C99. Note that this is different from traditional <CODE class=function>snprintf()</CODE>, which returns the length of the output string.</P>
<P>The format string may contain positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.26.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the buffer to hold the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n</P></TD>
<TD class=parameter_description>
<P>the maximum number of bytes to produce (including the terminating nul character).</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>the arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.26.10></A>
<H4>Returns</H4>
<P>the number of bytes which would be produced if the buffer was large enough.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-vsnprintf></A>
<H3>g_vsnprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_vsnprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gulong href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gulong"><SPAN class=type>gulong</SPAN></A> n</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
             <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>A safer form of the standard <CODE class=function>vsprintf()</CODE> function. The output is guaranteed to not exceed <EM class=parameter><CODE>n</CODE></EM> characters (including the terminating nul character), so it is easy to ensure that a buffer overflow cannot occur.</P>
<P>See also <A class=link title=g_strdup_vprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdup-vprintf"><CODE class=function>g_strdup_vprintf()</CODE></A>.</P>
<P>In versions of GLib prior to 1.2.3, this function may return -1 if the output was truncated, and the truncated string may not be nul-terminated. In versions prior to 1.3.12, this function returns the length of the output string.</P>
<P>The return value of <A class=link title=g_vsnprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsnprintf"><CODE class=function>g_vsnprintf()</CODE></A> conforms to the <CODE class=function>vsnprintf()</CODE> function as standardized in ISO C99. Note that this is different from traditional <CODE class=function>vsnprintf()</CODE>, which returns the length of the output string.</P>
<P>The format string may contain positional parameters, as specified in the Single Unix Specification.</P>
<DIV class=refsect3><A name=id-1.5.2.7.27.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the buffer to hold the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n</P></TD>
<TD class=parameter_description>
<P>the maximum number of bytes to produce (including the terminating nul character).</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice string precision pitfalls][string-precision]</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.27.10></A>
<H4>Returns</H4>
<P>the number of bytes which would be produced if the buffer was large enough.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-vasprintf></A>
<H3>g_vasprintf&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_vasprintf (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **string</CODE></EM>,
             <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> const *format</CODE></EM>,
             <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>An implementation of the GNU <CODE class=function>vasprintf()</CODE> function which supports positional parameters, as specified in the Single Unix Specification. This function is similar to <A class=link title=g_vsprintf&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-vsprintf"><CODE class=function>g_vsprintf()</CODE></A>, except that it allocates a string to hold the output, instead of putting the output in a buffer you allocate in advance.</P>
<DIV class=refsect3><A name=id-1.5.2.7.28.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the return location for the newly-allocated string.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>a standard <CODE class=function>printf()</CODE> format string, but notice <A class=link title="String precision pitfalls" href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#string-precision">string precision pitfalls</A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the list of arguments to insert in the output.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.28.6></A>
<H4>Returns</H4>
<P>the number of bytes printed.</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-printf-string-upper-bound></A>
<H3>g_printf_string_upper_bound&nbsp;()</H3><PRE class=programlisting><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=returnvalue>gsize</SPAN></A>
g_printf_string_upper_bound (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                             <EM class=parameter><CODE><SPAN class=type>va_list</SPAN> args</CODE></EM>);</PRE>
<P>Calculates the maximum space needed to store the output of the <CODE class=function>sprintf()</CODE> function.</P>
<DIV class=refsect3><A name=id-1.5.2.7.29.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>the format string. See the <CODE class=function>printf()</CODE> documentation</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>args</P></TD>
<TD class=parameter_description>
<P>the parameters to be inserted into the format string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.29.6></A>
<H4>Returns</H4>
<P>the maximum space needed to store the formatted string</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-str-is-ascii></A>
<H3>g_str_is_ascii&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_str_is_ascii (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>);</PRE>
<P>Determines if a string is pure ASCII. A string is pure ASCII if it contains no bytes with the high bit set.</P>
<DIV class=refsect3><A name=id-1.5.2.7.30.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.30.6></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>str</CODE></EM> is ASCII</P>
<P></P></DIV>
<P class=since>Since 2.40</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isalnum></A>
<H3>g_ascii_isalnum&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isalnum (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is alphanumeric.</P>
<P>Unlike the standard C library <CODE class=function>isalnum()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.31.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.31.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII alphanumeric character</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isalpha></A>
<H3>g_ascii_isalpha&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isalpha (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is alphabetic (i.e. a letter).</P>
<P>Unlike the standard C library <CODE class=function>isalpha()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.32.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.32.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII alphabetic character</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-iscntrl></A>
<H3>g_ascii_iscntrl&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_iscntrl (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a control character.</P>
<P>Unlike the standard C library <CODE class=function>iscntrl()</CODE> function, this only recognizes standard ASCII control characters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.33.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.33.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII control character.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isdigit></A>
<H3>g_ascii_isdigit&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isdigit (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is digit (0-9).</P>
<P>Unlike the standard C library <CODE class=function>isdigit()</CODE> function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.34.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.34.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII digit.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isgraph></A>
<H3>g_ascii_isgraph&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isgraph (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a printing character and not a space.</P>
<P>Unlike the standard C library <CODE class=function>isgraph()</CODE> function, this only recognizes standard ASCII characters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.35.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.35.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII printing character other than space.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-islower></A>
<H3>g_ascii_islower&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_islower (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is an ASCII lower case letter.</P>
<P>Unlike the standard C library <CODE class=function>islower()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to worry about casting to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.36.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.36.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII lower case letter</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isprint></A>
<H3>g_ascii_isprint&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isprint (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a printing character.</P>
<P>Unlike the standard C library <CODE class=function>isprint()</CODE> function, this only recognizes standard ASCII characters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.37.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.37.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII printing character.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-ispunct></A>
<H3>g_ascii_ispunct&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_ispunct (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a punctuation character.</P>
<P>Unlike the standard C library <CODE class=function>ispunct()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.38.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.38.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII punctuation character.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isspace></A>
<H3>g_ascii_isspace&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isspace (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a white-space character.</P>
<P>Unlike the standard C library <CODE class=function>isspace()</CODE> function, this only recognizes standard ASCII white-space and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.39.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.39.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII white-space character</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isupper></A>
<H3>g_ascii_isupper&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isupper (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is an ASCII upper case letter.</P>
<P>Unlike the standard C library <CODE class=function>isupper()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning <A class=link title=FALSE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> for all non-ASCII characters. Also, unlike the standard library function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to worry about casting to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.40.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.40.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII upper case letter</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-isxdigit></A>
<H3>g_ascii_isxdigit&nbsp;()</H3><PRE class=programlisting><A class=link title=gboolean href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_ascii_isxdigit (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines whether a character is a hexadecimal-digit character.</P>
<P>Unlike the standard C library <CODE class=function>isxdigit()</CODE> function, this takes a char, not an int, so don't call it on <CODE class=literal>EOF</CODE>, but no need to cast to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.41.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.41.7></A>
<H4>Returns</H4>
<P><A class=link title=TRUE href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>c</CODE></EM> is an ASCII hexadecimal-digit character.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-digit-value></A>
<H3>g_ascii_digit_value&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_ascii_digit_value (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines the numeric value of a character as a decimal digit. Differs from <A class=link title=g_unichar_digit_value&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-unichar-digit-value"><CODE class=function>g_unichar_digit_value()</CODE></A> because it takes a char, so there's no worry about sign extension if characters are signed.</P>
<DIV class=refsect3><A name=id-1.5.2.7.42.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>an ASCII character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.42.6></A>
<H4>Returns</H4>
<P>If <EM class=parameter><CODE>c</CODE></EM> is a decimal digit (according to <A class=link title=g_ascii_isdigit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isdigit"><CODE class=function>g_ascii_isdigit()</CODE></A>), its numeric value. Otherwise, -1.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-xdigit-value></A>
<H3>g_ascii_xdigit_value&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_ascii_xdigit_value (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Determines the numeric value of a character as a hexidecimal digit. Differs from <A class=link title=g_unichar_xdigit_value&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-unichar-xdigit-value"><CODE class=function>g_unichar_xdigit_value()</CODE></A> because it takes a char, so there's no worry about sign extension if characters are signed.</P>
<DIV class=refsect3><A name=id-1.5.2.7.43.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>an ASCII character.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.43.6></A>
<H4>Returns</H4>
<P>If <EM class=parameter><CODE>c</CODE></EM> is a hex digit (according to <A class=link title=g_ascii_isxdigit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-isxdigit"><CODE class=function>g_ascii_isxdigit()</CODE></A>), its numeric value. Otherwise, -1.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strcasecmp></A>
<H3>g_ascii_strcasecmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_ascii_strcasecmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s1</CODE></EM>,
                    <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s2</CODE></EM>);</PRE>
<P>Compare two strings, ignoring the case of ASCII characters.</P>
<P>Unlike the BSD <CODE class=function>strcasecmp()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, treating all non-ASCII bytes as if they are not letters.</P>
<P>This function should be used only on strings that are known to be in encodings where the bytes corresponding to ASCII letters always represent themselves. This includes UTF-8 and the ISO-8859-* charsets, but not for instance double-byte encodings like the Windows Codepage 932, where the trailing bytes of double-byte characters include all ASCII letters. If you compare two CP932 strings using this function, you will get false matches.</P>
<P>Both <EM class=parameter><CODE>s1</CODE></EM> and <EM class=parameter><CODE>s2</CODE></EM> must be non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.44.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>s1</P></TD>
<TD class=parameter_description>
<P>string to compare with <EM class=parameter><CODE>s2</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>s2</P></TD>
<TD class=parameter_description>
<P>string to compare with <EM class=parameter><CODE>s1</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.44.9></A>
<H4>Returns</H4>
<P>0 if the strings match, a negative value if <EM class=parameter><CODE>s1</CODE></EM> &lt; <EM class=parameter><CODE>s2</CODE></EM> , or a positive value if <EM class=parameter><CODE>s1</CODE></EM> &gt; <EM class=parameter><CODE>s2</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strncasecmp></A>
<H3>g_ascii_strncasecmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_ascii_strncasecmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s1</CODE></EM>,
                     <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s2</CODE></EM>,
                     <EM class=parameter><CODE><A class=link title=gsize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> n</CODE></EM>);</PRE>
<P>Compare <EM class=parameter><CODE>s1</CODE></EM> and <EM class=parameter><CODE>s2</CODE></EM> , ignoring the case of ASCII characters and any characters after the first <EM class=parameter><CODE>n</CODE></EM> in each string.</P>
<P>Unlike the BSD <CODE class=function>strcasecmp()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, treating all non-ASCII characters as if they are not letters.</P>
<P>The same warning as in <A class=link title=g_ascii_strcasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strcasecmp"><CODE class=function>g_ascii_strcasecmp()</CODE></A> applies: Use this function only on strings known to be in encodings where bytes corresponding to ASCII letters always represent themselves.</P>
<DIV class=refsect3><A name=id-1.5.2.7.45.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>s1</P></TD>
<TD class=parameter_description>
<P>string to compare with <EM class=parameter><CODE>s2</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>s2</P></TD>
<TD class=parameter_description>
<P>string to compare with <EM class=parameter><CODE>s1</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n</P></TD>
<TD class=parameter_description>
<P>number of characters to compare</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.45.8></A>
<H4>Returns</H4>
<P>0 if the strings match, a negative value if <EM class=parameter><CODE>s1</CODE></EM> &lt; <EM class=parameter><CODE>s2</CODE></EM> , or a positive value if <EM class=parameter><CODE>s1</CODE></EM> &gt; <EM class=parameter><CODE>s2</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strup></A>
<H3>g_ascii_strup&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_ascii_strup (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=gssize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> len</CODE></EM>);</PRE>
<P>Converts all lower case ASCII letters to upper case ASCII letters.</P>
<DIV class=refsect3><A name=id-1.5.2.7.46.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>length of <EM class=parameter><CODE>str</CODE></EM> in bytes, or -1 if <EM class=parameter><CODE>str</CODE></EM> is nul-terminated</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.46.6></A>
<H4>Returns</H4>
<P>a newly allocated string, with all the lower case characters in <EM class=parameter><CODE>str</CODE></EM> converted to upper case, with semantics that exactly match <A class=link title=g_ascii_toupper&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-toupper"><CODE class=function>g_ascii_toupper()</CODE></A>. (Note that this is unlike the old <A class=link title=g_strup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strup"><CODE class=function>g_strup()</CODE></A>, which modified the string in place.)</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strdown></A>
<H3>g_ascii_strdown&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_ascii_strdown (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *str</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gssize href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gssize"><SPAN class=type>gssize</SPAN></A> len</CODE></EM>);</PRE>
<P>Converts all upper case ASCII letters to lower case ASCII letters.</P>
<DIV class=refsect3><A name=id-1.5.2.7.47.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>len</P></TD>
<TD class=parameter_description>
<P>length of <EM class=parameter><CODE>str</CODE></EM> in bytes, or -1 if <EM class=parameter><CODE>str</CODE></EM> is nul-terminated</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.47.6></A>
<H4>Returns</H4>
<P>a newly-allocated string, with all the upper case characters in <EM class=parameter><CODE>str</CODE></EM> converted to lower case, with semantics that exactly match <A class=link title=g_ascii_tolower&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-tolower"><CODE class=function>g_ascii_tolower()</CODE></A>. (Note that this is unlike the old <A class=link title=g_strdown&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdown"><CODE class=function>g_strdown()</CODE></A>, which modified the string in place.)</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-tolower></A>
<H3>g_ascii_tolower&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>
g_ascii_tolower (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Convert a character to ASCII lower case.</P>
<P>Unlike the standard C library <CODE class=function>tolower()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning all non-ASCII characters unchanged, even if they are lower case letters in a particular character set. Also unlike the standard library function, this takes and returns a char, not an int, so don't call it on <CODE class=literal>EOF</CODE> but no need to worry about casting to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.48.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.48.7></A>
<H4>Returns</H4>
<P>the result of converting <EM class=parameter><CODE>c</CODE></EM> to lower case. If <EM class=parameter><CODE>c</CODE></EM> is not an ASCII upper case letter, <EM class=parameter><CODE>c</CODE></EM> is returned unchanged.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-toupper></A>
<H3>g_ascii_toupper&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>
g_ascii_toupper (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> c</CODE></EM>);</PRE>
<P>Convert a character to ASCII upper case.</P>
<P>Unlike the standard C library <CODE class=function>toupper()</CODE> function, this only recognizes standard ASCII letters and ignores the locale, returning all non-ASCII characters unchanged, even if they are upper case letters in a particular character set. Also unlike the standard library function, this takes and returns a char, not an int, so don't call it on <CODE class=literal>EOF</CODE> but no need to worry about casting to <A class=link title=guchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A> before passing a possibly non-ASCII character in.</P>
<DIV class=refsect3><A name=id-1.5.2.7.49.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>c</P></TD>
<TD class=parameter_description>
<P>any character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.49.7></A>
<H4>Returns</H4>
<P>the result of converting <EM class=parameter><CODE>c</CODE></EM> to upper case. If <EM class=parameter><CODE>c</CODE></EM> is not an ASCII lower case letter, <EM class=parameter><CODE>c</CODE></EM> is returned unchanged.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-string-ascii-up></A>
<H3>g_string_ascii_up&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=returnvalue>GString</SPAN></A>&nbsp;*
g_string_ascii_up (<EM class=parameter><CODE><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=type>GString</SPAN></A> *string</CODE></EM>);</PRE>
<P>Converts all lowercase ASCII letters to uppercase ASCII letters.</P>
<DIV class=refsect3><A name=id-1.5.2.7.50.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a GString</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.50.6></A>
<H4>Returns</H4>
<P>passed-in <EM class=parameter><CODE>string</CODE></EM> pointer, with all the lowercase characters converted to uppercase in place, with semantics that exactly match <A class=link title=g_ascii_toupper&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-toupper"><CODE class=function>g_ascii_toupper()</CODE></A>.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-string-ascii-down></A>
<H3>g_string_ascii_down&nbsp;()</H3><PRE class=programlisting><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=returnvalue>GString</SPAN></A>&nbsp;*
g_string_ascii_down (<EM class=parameter><CODE><A class=link title="struct GString" href="https://developer.gnome.org/glib/stable/glib-Strings.html#GString"><SPAN class=type>GString</SPAN></A> *string</CODE></EM>);</PRE>
<P>Converts all uppercase ASCII letters to lowercase ASCII letters.</P>
<DIV class=refsect3><A name=id-1.5.2.7.51.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a GString</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.51.6></A>
<H4>Returns</H4>
<P>passed-in <EM class=parameter><CODE>string</CODE></EM> pointer, with all the uppercase characters converted to lowercase in place, with semantics that exactly match <A class=link title=g_ascii_tolower&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-tolower"><CODE class=function>g_ascii_tolower()</CODE></A>.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strup></A>
<H3>g_strup&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strup (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_strup</CODE> has been deprecated since version 2.2 and should not be used in newly-written code.</P>
<P>This function is totally broken for the reasons discussed in the <A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp"><CODE class=function>g_strncasecmp()</CODE></A> docs - use <A class=link title=g_ascii_strup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strup"><CODE class=function>g_ascii_strup()</CODE></A> or <A class=link title=g_utf8_strup&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-utf8-strup"><CODE class=function>g_utf8_strup()</CODE></A> instead.</P></DIV>
<P>Converts a string to upper case.</P>
<DIV class=refsect3><A name=id-1.5.2.7.52.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the string to convert</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.52.7></A>
<H4>Returns</H4>
<P>the string</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strdown></A>
<H3>g_strdown&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strdown (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_strdown</CODE> has been deprecated since version 2.2 and should not be used in newly-written code.</P>
<P>This function is totally broken for the reasons discussed in the <A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp"><CODE class=function>g_strncasecmp()</CODE></A> docs - use <A class=link title=g_ascii_strdown&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strdown"><CODE class=function>g_ascii_strdown()</CODE></A> or <A class=link title=g_utf8_strdown&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-utf8-strdown"><CODE class=function>g_utf8_strdown()</CODE></A> instead.</P></DIV>
<P>Converts a string to lower case.</P>
<DIV class=refsect3><A name=id-1.5.2.7.53.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the string to convert.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.53.7></A>
<H4>Returns</H4>
<P>the string</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strcasecmp></A>
<H3>g_strcasecmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_strcasecmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s1</CODE></EM>,
              <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s2</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_strcasecmp</CODE> has been deprecated since version 2.2 and should not be used in newly-written code.</P>
<P>See <A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp"><CODE class=function>g_strncasecmp()</CODE></A> for a discussion of why this function is deprecated and how to replace it.</P></DIV>
<P>A case-insensitive string comparison, corresponding to the standard <CODE class=function>strcasecmp()</CODE> function on platforms which support it.</P>
<DIV class=refsect3><A name=id-1.5.2.7.54.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>s1</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>s2</P></TD>
<TD class=parameter_description>
<P>a string to compare with <EM class=parameter><CODE>s1</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.54.7></A>
<H4>Returns</H4>
<P>0 if the strings match, a negative value if <EM class=parameter><CODE>s1</CODE></EM> &lt; <EM class=parameter><CODE>s2</CODE></EM> , or a positive value if <EM class=parameter><CODE>s1</CODE></EM> &gt; <EM class=parameter><CODE>s2</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strncasecmp></A>
<H3>g_strncasecmp&nbsp;()</H3><PRE class=programlisting><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=returnvalue>gint</SPAN></A>
g_strncasecmp (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s1</CODE></EM>,
               <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *s2</CODE></EM>,
               <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> n</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_strncasecmp</CODE> has been deprecated since version 2.2 and should not be used in newly-written code.</P>
<P>The problem with <A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp"><CODE class=function>g_strncasecmp()</CODE></A> is that it does the comparison by calling <CODE class=function>toupper()</CODE>/<CODE class=function>tolower()</CODE>. These functions are locale-specific and operate on single bytes. However, it is impossible to handle things correctly from an internationalization standpoint by operating on bytes, since characters may be multibyte. Thus <A class=link title=g_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strncasecmp"><CODE class=function>g_strncasecmp()</CODE></A> is broken if your string is guaranteed to be ASCII, since it is locale-sensitive, and it's broken if your string is localized, since it doesn't work on many encodings at all, including UTF-8, EUC-JP, etc.</P>
<P>There are therefore two replacement techniques: <A class=link title=g_ascii_strncasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strncasecmp"><CODE class=function>g_ascii_strncasecmp()</CODE></A>, which only works on ASCII and is not locale-sensitive, and <A class=link title=g_utf8_casefold&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-utf8-casefold"><CODE class=function>g_utf8_casefold()</CODE></A> followed by <CODE class=function>strcmp()</CODE> on the resulting strings, which is good for case-insensitive sorting of UTF-8.</P></DIV>
<P>A case-insensitive string comparison, corresponding to the standard <CODE class=function>strncasecmp()</CODE> function on platforms which support it. It is similar to <A class=link title=g_strcasecmp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcasecmp"><CODE class=function>g_strcasecmp()</CODE></A> except it only compares the first <EM class=parameter><CODE>n</CODE></EM> characters of the strings.</P>
<DIV class=refsect3><A name=id-1.5.2.7.55.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>s1</P></TD>
<TD class=parameter_description>
<P>a string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>s2</P></TD>
<TD class=parameter_description>
<P>a string to compare with <EM class=parameter><CODE>s1</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n</P></TD>
<TD class=parameter_description>
<P>the maximum number of characters to compare</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.55.7></A>
<H4>Returns</H4>
<P>0 if the strings match, a negative value if <EM class=parameter><CODE>s1</CODE></EM> &lt; <EM class=parameter><CODE>s2</CODE></EM> , or a positive value if <EM class=parameter><CODE>s1</CODE></EM> &gt; <EM class=parameter><CODE>s2</CODE></EM> .</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strreverse></A>
<H3>g_strreverse&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strreverse (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<P>Reverses all of the bytes in a string. For example, <CODE class=literal>g_strreverse ("abcdef")</CODE> will result in "fedcba".</P>
<P>Note that <A class=link title=g_strreverse&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strreverse"><CODE class=function>g_strreverse()</CODE></A> doesn't work on UTF-8 strings containing multibyte characters. For that purpose, use <A class=link title=g_utf8_strreverse&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Unicode-Manipulation.html#g-utf8-strreverse"><CODE class=function>g_utf8_strreverse()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.56.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the string to reverse</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.56.7></A>
<H4>Returns</H4>
<P>the same pointer passed in as <EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strtoll></A>
<H3>g_ascii_strtoll&nbsp;()</H3><PRE class=programlisting><A class=link title=gint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint64"><SPAN class=returnvalue>gint64</SPAN></A>
g_ascii_strtoll (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *nptr</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **endptr</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> base</CODE></EM>);</PRE>
<P>Converts a string to a <A class=link title=gint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint64"><SPAN class=type>gint64</SPAN></A> value. This function behaves like the standard <CODE class=function>strtoll()</CODE> function does in the C locale. It does this without actually changing the current locale, since that would not be thread-safe.</P>
<P>This function is typically used when reading configuration files or other non-user input that should be locale independent. To handle input from the user you should normally use the locale-sensitive system <CODE class=function>strtoll()</CODE> function.</P>
<P>If the correct value would cause overflow, <A class=link title=G_MAXINT64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#G-MAXINT64:CAPS"><CODE class=literal>G_MAXINT64</CODE></A> or <A class=link title=G_MININT64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#G-MININT64:CAPS"><CODE class=literal>G_MININT64</CODE></A> is returned, and <CODE class=literal>ERANGE</CODE> is stored in <CODE class=literal>errno</CODE>. If the base is outside the valid range, zero is returned, and <CODE class=literal>EINVAL</CODE> is stored in <CODE class=literal>errno</CODE>. If the string conversion fails, zero is returned, and <EM class=parameter><CODE>endptr</CODE></EM> returns <EM class=parameter><CODE>nptr</CODE></EM> (if <EM class=parameter><CODE>endptr</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>).</P>
<DIV class=refsect3><A name=id-1.5.2.7.57.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>nptr</P></TD>
<TD class=parameter_description>
<P>the string to convert to a numeric value.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>endptr</P></TD>
<TD class=parameter_description>
<P>if non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, it returns the character after the last character used in the conversion.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>base</P></TD>
<TD class=parameter_description>
<P>to be used for the conversion, 2..36 or 0</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.57.8></A>
<H4>Returns</H4>
<P>the <A class=link title=gint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint64"><SPAN class=type>gint64</SPAN></A> value or zero on error.</P>
<P></P></DIV>
<P class=since>Since 2.12</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strtoull></A>
<H3>g_ascii_strtoull&nbsp;()</H3><PRE class=programlisting><A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=returnvalue>guint64</SPAN></A>
g_ascii_strtoull (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *nptr</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **endptr</CODE></EM>,
                  <EM class=parameter><CODE><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> base</CODE></EM>);</PRE>
<P>Converts a string to a <A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=type>guint64</SPAN></A> value. This function behaves like the standard <CODE class=function>strtoull()</CODE> function does in the C locale. It does this without actually changing the current locale, since that would not be thread-safe.</P>
<P>This function is typically used when reading configuration files or other non-user input that should be locale independent. To handle input from the user you should normally use the locale-sensitive system <CODE class=function>strtoull()</CODE> function.</P>
<P>If the correct value would cause overflow, <A class=link title=G_MAXUINT64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#G-MAXUINT64:CAPS"><CODE class=literal>G_MAXUINT64</CODE></A> is returned, and <CODE class=literal>ERANGE</CODE> is stored in <CODE class=literal>errno</CODE>. If the base is outside the valid range, zero is returned, and <CODE class=literal>EINVAL</CODE> is stored in <CODE class=literal>errno</CODE>. If the string conversion fails, zero is returned, and <EM class=parameter><CODE>endptr</CODE></EM> returns <EM class=parameter><CODE>nptr</CODE></EM> (if <EM class=parameter><CODE>endptr</CODE></EM> is non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>).</P>
<DIV class=refsect3><A name=id-1.5.2.7.58.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>nptr</P></TD>
<TD class=parameter_description>
<P>the string to convert to a numeric value.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>endptr</P></TD>
<TD class=parameter_description>
<P>if non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, it returns the character after the last character used in the conversion.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>base</P></TD>
<TD class=parameter_description>
<P>to be used for the conversion, 2..36 or 0</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.58.8></A>
<H4>Returns</H4>
<P>the <A class=link title=guint64 href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint64"><SPAN class=type>guint64</SPAN></A> value or zero on error.</P>
<P></P></DIV>
<P class=since>Since 2.2</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=G-ASCII-DTOSTR-BUF-SIZE:CAPS></A>
<H3>G_ASCII_DTOSTR_BUF_SIZE</H3><PRE class=programlisting>#define G_ASCII_DTOSTR_BUF_SIZE (29 + 10)
</PRE>
<P>A good size for a buffer to be passed into <A class=link title=g_ascii_dtostr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-dtostr"><CODE class=function>g_ascii_dtostr()</CODE></A>. It is guaranteed to be enough for all output of that function on systems with 64bit IEEE-compatible doubles.</P>
<P>The typical usage would be something like:</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1
2
3</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">char</SPAN> buf<SPAN class="gtkdoc opt">[</SPAN>G_ASCII_DTOSTR_BUF_SIZE<SPAN class="gtkdoc opt">];</SPAN>

<SPAN class=function>fprintf</SPAN> <SPAN class="gtkdoc opt">(</SPAN>out<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"value=%s</SPAN><SPAN class="gtkdoc esc">\n</SPAN><SPAN class=string>"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-dtostr">g_ascii_dtostr</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>buf<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>buf<SPAN class="gtkdoc opt">),</SPAN> value<SPAN class="gtkdoc opt">));</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-strtod></A>
<H3>g_ascii_strtod&nbsp;()</H3><PRE class=programlisting><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=returnvalue>gdouble</SPAN></A>
g_ascii_strtod (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *nptr</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **endptr</CODE></EM>);</PRE>
<P>Converts a string to a <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> value.</P>
<P>This function behaves like the standard <CODE class=function>strtod()</CODE> function does in the C locale. It does this without actually changing the current locale, since that would not be thread-safe. A limitation of the implementation is that this function will still accept localized versions of infinities and NANs.</P>
<P>This function is typically used when reading configuration files or other non-user input that should be locale independent. To handle input from the user you should normally use the locale-sensitive system <CODE class=function>strtod()</CODE> function.</P>
<P>To convert from a <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> to a string in a locale-insensitive way, use <A class=link title=g_ascii_dtostr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-dtostr"><CODE class=function>g_ascii_dtostr()</CODE></A>.</P>
<P>If the correct value would cause overflow, plus or minus <CODE class=literal>HUGE_VAL</CODE> is returned (according to the sign of the value), and <CODE class=literal>ERANGE</CODE> is stored in <CODE class=literal>errno</CODE>. If the correct value would cause underflow, zero is returned and <CODE class=literal>ERANGE</CODE> is stored in <CODE class=literal>errno</CODE>.</P>
<P>This function resets <CODE class=literal>errno</CODE> before calling <CODE class=function>strtod()</CODE> so that you can reliably detect overflow and underflow.</P>
<DIV class=refsect3><A name=id-1.5.2.7.60.10></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>nptr</P></TD>
<TD class=parameter_description>
<P>the string to convert to a numeric value.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>endptr</P></TD>
<TD class=parameter_description>
<P>if non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, it returns the character after the last character used in the conversion.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.60.11></A>
<H4>Returns</H4>
<P>the <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> value.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-dtostr></A>
<H3>g_ascii_dtostr&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_ascii_dtostr (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *buffer</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> buf_len</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> d</CODE></EM>);</PRE>
<P>Converts a <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> to a string, using the '.' as decimal point.</P>
<P>This function generates enough precision that converting the string back using <A class=link title=g_ascii_strtod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtod"><CODE class=function>g_ascii_strtod()</CODE></A> gives the same machine-number (on machines with IEEE compatible 64bit doubles). It is guaranteed that the size of the resulting string will never be larger than <EM class=parameter><CODE>G_ASCII_DTOSTR_BUF_SIZE</CODE></EM> bytes.</P>
<DIV class=refsect3><A name=id-1.5.2.7.61.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>buffer</P></TD>
<TD class=parameter_description>
<P>A buffer to place the resulting string in</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>buf_len</P></TD>
<TD class=parameter_description>
<P>The length of the buffer.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>d</P></TD>
<TD class=parameter_description>
<P>The <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> to convert</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.61.7></A>
<H4>Returns</H4>
<P>The pointer to the buffer with the converted string.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-ascii-formatd></A>
<H3>g_ascii_formatd&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_ascii_formatd (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *buffer</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> buf_len</CODE></EM>,
                 <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *format</CODE></EM>,
                 <EM class=parameter><CODE><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> d</CODE></EM>);</PRE>
<P>Converts a <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> to a string, using the '.' as decimal point. To format the number you pass in a <CODE class=function>printf()</CODE>-style format string. Allowed conversion specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.</P>
<P>If you just want to want to serialize the value into a string, use <A class=link title=g_ascii_dtostr&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-dtostr"><CODE class=function>g_ascii_dtostr()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.62.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>buffer</P></TD>
<TD class=parameter_description>
<P>A buffer to place the resulting string in</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>buf_len</P></TD>
<TD class=parameter_description>
<P>The length of the buffer.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>format</P></TD>
<TD class=parameter_description>
<P>The <CODE class=function>printf()</CODE>-style format to use for the code to use for converting.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>d</P></TD>
<TD class=parameter_description>
<P>The <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> to convert</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.62.7></A>
<H4>Returns</H4>
<P>The pointer to the buffer with the converted string.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strtod></A>
<H3>g_strtod&nbsp;()</H3><PRE class=programlisting><A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=returnvalue>gdouble</SPAN></A>
g_strtod (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *nptr</CODE></EM>,
          <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **endptr</CODE></EM>);</PRE>
<P>Converts a string to a <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> value. It calls the standard <CODE class=function>strtod()</CODE> function to handle the conversion, but if the string is not completely converted it attempts the conversion again with <A class=link title=g_ascii_strtod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtod"><CODE class=function>g_ascii_strtod()</CODE></A>, and returns the best match.</P>
<P>This function should seldom be used. The normal situation when reading numbers not for human consumption is to use <A class=link title=g_ascii_strtod&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strtod"><CODE class=function>g_ascii_strtod()</CODE></A>. Only when you know that you must expect both locale formatted and C formatted numbers should you use this. Make sure that you don't pass strings such as comma separated lists of values, since the commas may be interpreted as a decimal point in some locales, causing unexpected results.</P>
<DIV class=refsect3><A name=id-1.5.2.7.63.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>nptr</P></TD>
<TD class=parameter_description>
<P>the string to convert to a numeric value.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>endptr</P></TD>
<TD class=parameter_description>
<P>if non-<A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, it returns the character after the last character used in the conversion.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.63.7></A>
<H4>Returns</H4>
<P>the <A class=link title=gdouble href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A> value.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strchug></A>
<H3>g_strchug&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strchug (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<P>Removes leading whitespace from a string, by moving the rest of the characters forward.</P>
<P>This function doesn't allocate or reallocate any memory; it modifies <EM class=parameter><CODE>string</CODE></EM> in place. Therefore, it cannot be used on statically allocated strings.</P>
<P>The pointer to <EM class=parameter><CODE>string</CODE></EM> is returned to allow the nesting of functions.</P>
<P>Also see <A class=link title=g_strchomp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchomp"><CODE class=function>g_strchomp()</CODE></A> and <A class=link title=g_strstrip() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strstrip"><CODE class=function>g_strstrip()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.64.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a string to remove the leading whitespace from</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.64.9></A>
<H4>Returns</H4>
<P><EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strchomp></A>
<H3>g_strchomp&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strchomp (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>);</PRE>
<P>Removes trailing whitespace from a string.</P>
<P>This function doesn't allocate or reallocate any memory; it modifies <EM class=parameter><CODE>string</CODE></EM> in place. Therefore, it cannot be used on statically allocated strings.</P>
<P>The pointer to <EM class=parameter><CODE>string</CODE></EM> is returned to allow the nesting of functions.</P>
<P>Also see <A class=link title=g_strchug&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchug"><CODE class=function>g_strchug()</CODE></A> and <A class=link title=g_strstrip() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strstrip"><CODE class=function>g_strstrip()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.65.8></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a string to remove the trailing whitespace from</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.65.9></A>
<H4>Returns</H4>
<P><EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strstrip></A>
<H3>g_strstrip()</H3><PRE class=programlisting>#define             g_strstrip( string )</PRE>
<P>Removes leading and trailing whitespace from a string. See <A class=link title=g_strchomp&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchomp"><CODE class=function>g_strchomp()</CODE></A> and <A class=link title=g_strchug&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strchug"><CODE class=function>g_strchug()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.66.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a string to remove the leading and trailing whitespace from</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.66.6></A>
<H4>Returns</H4>
<P><EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strdelimit></A>
<H3>g_strdelimit&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strdelimit (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
              <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *delimiters</CODE></EM>,
              <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> new_delimiter</CODE></EM>);</PRE>
<P>Converts any delimiter characters in <EM class=parameter><CODE>string</CODE></EM> to <EM class=parameter><CODE>new_delimiter</CODE></EM> . Any characters in <EM class=parameter><CODE>string</CODE></EM> which are found in <EM class=parameter><CODE>delimiters</CODE></EM> are changed to the <EM class=parameter><CODE>new_delimiter</CODE></EM> character. Modifies <EM class=parameter><CODE>string</CODE></EM> in place, and returns <EM class=parameter><CODE>string</CODE></EM> itself, not a copy. The return value is to allow nesting such as</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strup">g_ascii_strup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdelimit">g_strdelimit</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>str<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"abc"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>'?'</SPAN><SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.5.2.7.67.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>the string to convert</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>delimiters</P></TD>
<TD class=parameter_description>
<P>a string containing the current delimiters, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> to use the standard delimiters defined in <A class=link title=G_STR_DELIMITERS href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#G-STR-DELIMITERS:CAPS"><SPAN class=type>G_STR_DELIMITERS</SPAN></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>new_delimiter</P></TD>
<TD class=parameter_description>
<P>the new delimiter character</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.67.8></A>
<H4>Returns</H4>
<P><EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strescape></A>
<H3>g_strescape&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strescape (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *source</CODE></EM>,
             <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *exceptions</CODE></EM>);</PRE>
<P>Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\' and '"' in the string <EM class=parameter><CODE>source</CODE></EM> by inserting a '\' before them. Additionally all characters in the range 0x01-0x1F (everything below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are replaced with a '\' followed by their octal representation. Characters supplied in <EM class=parameter><CODE>exceptions</CODE></EM> are not escaped.</P>
<P>g_strcompress() does the reverse conversion.</P>
<DIV class=refsect3><A name=id-1.5.2.7.68.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>source</P></TD>
<TD class=parameter_description>
<P>a string to escape</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>exceptions</P></TD>
<TD class=parameter_description>
<P>a string of characters not to escape in <EM class=parameter><CODE>source</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.68.7></A>
<H4>Returns</H4>
<P>a newly-allocated copy of <EM class=parameter><CODE>source</CODE></EM> with certain characters escaped. See above.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strcompress></A>
<H3>g_strcompress&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strcompress (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *source</CODE></EM>);</PRE>
<P>Replaces all escaped characters with their one byte equivalent.</P>
<P>This function does the reverse conversion of <A class=link title=g_strescape&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strescape"><CODE class=function>g_strescape()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.69.6></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>source</P></TD>
<TD class=parameter_description>
<P>a string to compress</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.69.7></A>
<H4>Returns</H4>
<P>a newly-allocated copy of <EM class=parameter><CODE>source</CODE></EM> with all escaped character compressed</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strcanon></A>
<H3>g_strcanon&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strcanon (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
            <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *valid_chars</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> substitutor</CODE></EM>);</PRE>
<P>For each character in <EM class=parameter><CODE>string</CODE></EM> , if the character is not in <EM class=parameter><CODE>valid_chars</CODE></EM> , replaces the character with <EM class=parameter><CODE>substitutor</CODE></EM> . Modifies <EM class=parameter><CODE>string</CODE></EM> in place, and return <EM class=parameter><CODE>string</CODE></EM> itself, not a copy. The return value is to allow nesting such as</P>
<DIV class=informalexample>
<TABLE class=listing_frame border=0 cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD class=listing_lines align=right><PRE>1</PRE></TD>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-ascii-strup">g_ascii_strup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strcanon">g_strcanon</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>str<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"abc"</SPAN><SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>'?'</SPAN><SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=id-1.5.2.7.70.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a nul-terminated array of bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>valid_chars</P></TD>
<TD class=parameter_description>
<P>bytes permitted in <EM class=parameter><CODE>string</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>substitutor</P></TD>
<TD class=parameter_description>
<P>replacement character for disallowed bytes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.70.8></A>
<H4>Returns</H4>
<P><EM class=parameter><CODE>string</CODE></EM> </P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strsplit></A>
<H3>g_strsplit&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;**
g_strsplit (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
            <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *delimiter</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> max_tokens</CODE></EM>);</PRE>
<P>Splits a string into a maximum of <EM class=parameter><CODE>max_tokens</CODE></EM> pieces, using the given <EM class=parameter><CODE>delimiter</CODE></EM> . If <EM class=parameter><CODE>max_tokens</CODE></EM> is reached, the remainder of <EM class=parameter><CODE>string</CODE></EM> is appended to the last token.</P>
<P>As an example, the result of g_strsplit (":a:bc::d:", ":", -1) is a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated vector containing the six strings "", "a", "bc", "", "d" and "".</P>
<P>As a special case, the result of splitting the empty string "" is an empty vector, not a vector containing a single string. The reason for this special case is that being able to represent a empty vector is typically more useful than consistent handling of empty elements. If you do need to represent empty elements, you'll need to check for the empty string before calling <A class=link title=g_strsplit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit"><CODE class=function>g_strsplit()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.71.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>a string to split</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>delimiter</P></TD>
<TD class=parameter_description>
<P>a string which specifies the places at which to split the string. The delimiter is not included in any of the resulting strings, unless <EM class=parameter><CODE>max_tokens</CODE></EM> is reached.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>max_tokens</P></TD>
<TD class=parameter_description>
<P>the maximum number of pieces to split <EM class=parameter><CODE>string</CODE></EM> into. If this is less than 1, the string is split completely.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.71.8></A>
<H4>Returns</H4>
<P>a newly-allocated <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings. Use <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A> to free it.</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strsplit-set></A>
<H3>g_strsplit_set&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;**
g_strsplit_set (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string</CODE></EM>,
                <EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *delimiters</CODE></EM>,
                <EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> max_tokens</CODE></EM>);</PRE>
<P>Splits <EM class=parameter><CODE>string</CODE></EM> into a number of tokens not containing any of the characters in <EM class=parameter><CODE>delimiter</CODE></EM> . A token is the (possibly empty) longest string that does not contain any of the characters in <EM class=parameter><CODE>delimiters</CODE></EM> . If <EM class=parameter><CODE>max_tokens</CODE></EM> is reached, the remainder is appended to the last token.</P>
<P>For example the result of g_strsplit_set ("abc:def/ghi", ":/", -1) is a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated vector containing the three strings "abc", "def", and "ghi".</P>
<P>The result of g_strsplit_set (":def/ghi:", ":/", -1) is a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated vector containing the four strings "", "def", "ghi", and "".</P>
<P>As a special case, the result of splitting the empty string "" is an empty vector, not a vector containing a single string. The reason for this special case is that being able to represent a empty vector is typically more useful than consistent handling of empty elements. If you do need to represent empty elements, you'll need to check for the empty string before calling <A class=link title=g_strsplit_set&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit-set"><CODE class=function>g_strsplit_set()</CODE></A>.</P>
<P>Note that this function works on bytes not characters, so it can't be used to delimit UTF-8 strings for anything but ASCII characters.</P>
<DIV class=refsect3><A name=id-1.5.2.7.72.9></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string</P></TD>
<TD class=parameter_description>
<P>The string to be tokenized</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>delimiters</P></TD>
<TD class=parameter_description>
<P>A nul-terminated string containing bytes that are used to split the string.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>max_tokens</P></TD>
<TD class=parameter_description>
<P>The maximum number of tokens to split <EM class=parameter><CODE>string</CODE></EM> into. If this is less than 1, the string is split completely</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.72.10></A>
<H4>Returns</H4>
<P>a newly-allocated <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings. Use <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A> to free it.</P>
<P></P></DIV>
<P class=since>Since 2.4</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strfreev></A>
<H3>g_strfreev&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_strfreev (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **str_array</CODE></EM>);</PRE>
<P>Frees a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings, and the array itself. If called on a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> value, <A class=link title=g_strfreev&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strfreev"><CODE class=function>g_strfreev()</CODE></A> simply returns.</P>
<DIV class=refsect3><A name=id-1.5.2.7.73.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str_array</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings to free</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strconcat></A>
<H3>g_strconcat&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strconcat (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *string1</CODE></EM>,
             <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Concatenates all of the given strings into one long string. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A> when no longer needed.</P>
<P>The variable argument list must end with <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. If you forget the <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A class=link title=g_strconcat&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strconcat"><CODE class=function>g_strconcat()</CODE></A> will start appending random memory junk to your string.</P>
<P>Note that this function is usually not the right function to use to assemble a translated message from pieces, since proper translation often requires the pieces to be reordered.</P>
<DIV class=refsect3><A name=id-1.5.2.7.74.7></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>string1</P></TD>
<TD class=parameter_description>
<P>the first string to add, which must not be <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated list of strings to append to the string</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.74.8></A>
<H4>Returns</H4>
<P>a newly-allocated string containing all the string arguments</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strjoin></A>
<H3>g_strjoin&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strjoin (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *separator</CODE></EM>,
           <EM class=parameter><CODE>...</CODE></EM>);</PRE>
<P>Joins a number of strings together to form one long string, with the optional <EM class=parameter><CODE>separator</CODE></EM> inserted between each of them. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.75.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>separator</P></TD>
<TD class=parameter_description>
<P>a string to insert between each of the strings, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>...</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated list of strings to join</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.75.6></A>
<H4>Returns</H4>
<P>a newly-allocated string containing all of the strings joined together, with <EM class=parameter><CODE>separator</CODE></EM> between them</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strjoinv></A>
<H3>g_strjoinv&nbsp;()</H3><PRE class=programlisting><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strjoinv (<EM class=parameter><CODE>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *separator</CODE></EM>,
            <EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **str_array</CODE></EM>);</PRE>
<P>Joins a number of strings together to form one long string, with the optional <EM class=parameter><CODE>separator</CODE></EM> inserted between each of them. The returned string should be freed with <A class=link title=g_free&nbsp;() href="https://developer.gnome.org/glib/stable/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>.</P>
<DIV class=refsect3><A name=id-1.5.2.7.76.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>separator</P></TD>
<TD class=parameter_description>
<P>a string to insert between each of the strings, or <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL is OK, both for passing and for returning."><SPAN class=acronym>allow-none</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>str_array</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings to join</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.76.6></A>
<H4>Returns</H4>
<P>a newly-allocated string containing all of the strings joined together, with <EM class=parameter><CODE>separator</CODE></EM> between them</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strv-length></A>
<H3>g_strv_length&nbsp;()</H3><PRE class=programlisting><A class=link title=guint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_strv_length (<EM class=parameter><CODE><A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> **str_array</CODE></EM>);</PRE>
<P>Returns the length of the given <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated string array <EM class=parameter><CODE>str_array</CODE></EM> .</P>
<DIV class=refsect3><A name=id-1.5.2.7.77.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>str_array</P></TD>
<TD class=parameter_description>
<P>a <A class=link title=NULL href="https://developer.gnome.org/glib/stable/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>-terminated array of strings</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.77.6></A>
<H4>Returns</H4>
<P>length of <EM class=parameter><CODE>str_array</CODE></EM> .</P>
<P></P></DIV>
<P class=since>Since 2.6</P></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strerror></A>
<H3>g_strerror&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strerror (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> errnum</CODE></EM>);</PRE>
<P>Returns a string corresponding to the given error code, e.g. "no such process". You should use this function in preference to <CODE class=function>strerror()</CODE>, because it returns a string in UTF-8 encoding, and since not all platforms support the <CODE class=function>strerror()</CODE> function.</P>
<DIV class=refsect3><A name=id-1.5.2.7.78.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>errnum</P></TD>
<TD class=parameter_description>
<P>the system error number. See the standard C <CODE class=literal>errno</CODE> documentation</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.78.6></A>
<H4>Returns</H4>
<P>a UTF-8 string describing the error code. If the error code is unknown, it returns "unknown error (&lt;code&gt;)".</P>
<P></P></DIV></DIV>
<HR>
</HR>
<DIV class=refsect2><A name=g-strsignal></A>
<H3>g_strsignal&nbsp;()</H3><PRE class=programlisting>const <A class=link title=gchar href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_strsignal (<EM class=parameter><CODE><A class=link title=gint href="https://developer.gnome.org/glib/stable/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A> signum</CODE></EM>);</PRE>
<P>Returns a string describing the given signal, e.g. "Segmentation fault". You should use this function in preference to <CODE class=function>strsignal()</CODE>, because it returns a string in UTF-8 encoding, and since not all platforms support the <CODE class=function>strsignal()</CODE> function.</P>
<DIV class=refsect3><A name=id-1.5.2.7.79.5></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE border=0 width="100%">
<COLGROUP>
<COL class=parameters_name width=150></COL>
<COL class=parameters_description></COL>
<COL class=parameters_annotations width=200></COL></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>signum</P></TD>
<TD class=parameter_description>
<P>the signal number. See the <CODE class=literal>signal</CODE> documentation</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=id-1.5.2.7.79.6></A>
<H4>Returns</H4>
<P>a UTF-8 string describing the signal. If the signal is unknown, it returns "unknown signal (&lt;signum&gt;)".</P>
<P></P></DIV></DIV></DIV>
<DIV class=refsect1><A name=glib-String-Utility-Functions.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=G-STR-DELIMITERS:CAPS></A>
<H3>G_STR_DELIMITERS</H3><PRE class=programlisting>#define	 G_STR_DELIMITERS&nbsp;"_-|&gt; &lt;."
</PRE>
<P>The standard delimiters, used in <A class=link title=g_strdelimit&nbsp;() href="https://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strdelimit"><CODE class=function>g_strdelimit()</CODE></A>.</P></DIV></DIV>