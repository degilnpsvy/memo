<H3 class=section>2.3 Other Command-Line Arguments</H3><A name=index-command-line_002c-arguments></A><A name=index-arguments_002c-command_002dline></A>
<P>Any additional arguments on the command line are normally treated as input files to be processed in the order specified. However, an argument that has the form <CODE><VAR>var</VAR>=<VAR>value</VAR></CODE>, assigns the value <VAR>value</VAR> to the variable <VAR>var</VAR>&#8212;it does not specify a file at all. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Assignment-Options">Assignment Options</A>.) </P><A name=index-gawk_002c-ARGIND-variable-in></A><A name=index-ARGIND-variable_002c-command_002dline-arguments></A><A name=index-ARGV-array_002c-indexing-into></A><A name=index-ARGC_002fARGV-variables_002c-command_002dline-arguments></A>
<P>All these arguments are made available to your <CODE>awk</CODE> program in the <CODE>ARGV</CODE> array (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables">Built-in Variables</A>). Command-line options and the program text (if present) are omitted from <CODE>ARGV</CODE>. All other arguments, including variable assignments, are included. As each element of <CODE>ARGV</CODE> is processed, <CODE>gawk</CODE> sets the variable <CODE>ARGIND</CODE> to the index in <CODE>ARGV</CODE> of the current element. </P><A name=index-input-files_002c-variable-assignments-and></A><A name=index-variable-assignments-and-input-files></A>
<P>The distinction between file name arguments and variable-assignment arguments is made when <CODE>awk</CODE> is about to open the next input file. At that point in execution, it checks the file name to see whether it is really a variable assignment; if so, <CODE>awk</CODE> sets the variable instead of reading a file. </P>
<P>Therefore, the variables actually receive the given values after all previously specified files have been read. In particular, the values of variables assigned in this fashion are <EM>not</EM> available inside a <CODE>BEGIN</CODE> rule (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGIN_002fEND">BEGIN/END</A>), because such rules are run before <CODE>awk</CODE> begins scanning the argument list. </P><A name=index-dark-corner_002c-escape-sequences></A>
<P>The variable values given on the command line are processed for escape sequences (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Escape-Sequences">Escape Sequences</A>). (d.c.) </P>
<P>In some earlier implementations of <CODE>awk</CODE>, when a variable assignment occurred before any file names, the assignment would happen <EM>before</EM> the <CODE>BEGIN</CODE> rule was executed. <CODE>awk</CODE>&#8217;s behavior was thus inconsistent; some command-line assignments were available inside the <CODE>BEGIN</CODE> rule, while others were not. Unfortunately, some applications came to depend upon this &#8220;feature.&#8221; When <CODE>awk</CODE> was changed to be more consistent, the <SAMP>-v</SAMP> option was added to accommodate applications that depended upon the old behavior. </P>
<P>The variable assignment feature is most useful for assigning to variables such as <CODE>RS</CODE>, <CODE>OFS</CODE>, and <CODE>ORS</CODE>, which control input and output formats before scanning the data files. It is also useful for controlling state if multiple passes are needed over a data file. For example: </P><A name=index-files_002c-multiple-passes-over></A>
<DIV class=example><PRE class=example>awk 'pass == 1  { <VAR>pass 1 stuff</VAR> }
     pass == 2  { <VAR>pass 2 stuff</VAR> }' pass=1 mydata pass=2 mydata
</PRE></DIV>
<P>Given the variable assignment feature, the <SAMP>-F</SAMP> option for setting the value of <CODE>FS</CODE> is not strictly necessary. It remains for historical compatibility.