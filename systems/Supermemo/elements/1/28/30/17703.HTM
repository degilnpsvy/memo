<H3 class=section>1.8 When to Use <CODE>awk</CODE></H3><A name=index-awk_002c-uses-for-2></A>
<P>Now that you&#8217;ve seen some of what <CODE>awk</CODE> can do, you might wonder how <CODE>awk</CODE> could be useful for you. By using utility programs, advanced patterns, field separators, arithmetic statements, and other selection criteria, you can produce much more complex output. The <CODE>awk</CODE> language is very useful for producing reports from large amounts of raw data, such as summarizing information from the output of other utility programs like <CODE>ls</CODE>. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#More-Complex">More Complex</A>.) </P>
<P>Programs written with <CODE>awk</CODE> are usually much smaller than they would be in other languages. This makes <CODE>awk</CODE> programs easy to compose and use. Often, <CODE>awk</CODE> programs can be quickly composed at your keyboard, used once, and thrown away. Because <CODE>awk</CODE> programs are interpreted, you can avoid the (usually lengthy) compilation part of the typical edit-compile-test-debug cycle of software development. </P><A name=index-Brian-Kernighan_0027s-awk-1></A>
<P>Complex programs have been written in <CODE>awk</CODE>, including a complete retargetable assembler for eight-bit microprocessors (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Glossary">Glossary</A>, for more information), and a microcode assembler for a special-purpose Prolog computer. While the original <CODE>awk</CODE>&#8217;s capabilities were strained by tasks of such complexity, modern versions are more capable. Even Brian Kernighan&#8217;s version of <CODE>awk</CODE> has fewer predefined limits, and those that it has are much larger than they used to be. </P><A name=index-awk-programs_002c-complex></A>
<P>If you find yourself writing <CODE>awk</CODE> scripts of more than, say, a few hundred lines, you might consider using a different programming language. Emacs Lisp is a good choice if you need sophisticated string or pattern matching capabilities. The shell is also good at string and pattern matching; in addition, it allows powerful use of the system utilities. More conventional languages, such as C, C++, and Java, offer better facilities for system programming and for managing the complexity of large programs. Programs in these languages may require more lines of source code than the equivalent <CODE>awk</CODE> programs, but they are easier to maintain and usually run more efficiently.