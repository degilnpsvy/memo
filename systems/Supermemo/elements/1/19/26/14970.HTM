<FONT class=extract>In recipe execution, each line of a canned sequence is treated just as if the line appeared on its own in the rule, preceded by a tab. In particular, <CODE>make</CODE> invokes a separate sub-shell for each line.</FONT> <FONT class=extract>You can use the special prefix characters that affect command lines (&#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217;) on each line of a canned sequence. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recipes"><FONT class=extract>Writing Recipes in Rules</FONT></A><FONT class=extract>. For example, using this canned sequence: </FONT><PRE class=example><FONT class=extract>     define frobnicate =
     @echo "frobnicating target $@"
     frob-step-1 $&lt; -o $@-step-1
     frob-step-2 $@-step-1 -o $@
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract><CODE>make</CODE> will not echo the first line, the <CODE>echo</CODE> command. But it <EM>will</EM> echo the following two recipe lines. </FONT>
<P><FONT class=extract>On the other hand, prefix characters on the recipe line that refers to a canned sequence apply to every line in the sequence. So the rule: </FONT><PRE class=example><FONT class=extract>     frob.out: frob.in
             @$(frobnicate)
</FONT></PRE>
<P class=noindent><FONT class=extract>does not echo <EM>any</EM> recipe lines. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>, for a full explanation of &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;.)</FONT>