<H4 class=subsection>6.3.2 Computed Variable Names</H4>
<P><A name=index-nested-variable-reference-507></A><A name=index-computed-variable-name-508></A><A name=index-variables_002c-computed-names-509></A><A name=index-variables_002c-nested-references-510></A><A name=index-variables_002c-_0040samp_007b_0024_007d-in-name-511></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-variable-name-512></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-name-513></A>Computed variable names are a complicated concept needed only for sophisticated makefile programming. For most purposes you need not consider them, except to know that making a variable with a dollar sign in its name might have strange results. However, if you are the type that wants to understand everything, or you are actually interested in what they do, read on. 
<P>Variables may be referenced inside the name of a variable. This is called a <DFN>computed variable name</DFN> or a <DFN>nested variable reference</DFN>. For example, <PRE class=example>     x = y
     y = z
     a := $($(x))
</PRE>
<P class=noindent>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;: the &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; inside &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;. Here the name of the variable to reference is not stated explicitly; it is computed by expansion of &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217;. The reference &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; here is nested within the outer variable reference. 
<P>The previous example shows two levels of nesting, but any number of levels is possible. For example, here are three levels: <PRE class=example>     x = y
     y = z
     z = u
     a := $($($(x)))
</PRE>
<P class=noindent>Here the innermost &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;; now we have &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217;, which becomes &#8216;<SAMP><SPAN class=samp>u</SPAN></SAMP>&#8217;. 
<P>References to recursively-expanded variables within a variable name are re-expanded in the usual fashion. For example: <PRE class=example>     x = $(y)
     y = z
     z = Hello
     a := $($(x))
</PRE>
<P class=noindent>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;: &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; becomes &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. 
<P>Nested variable references can also contain modified references and function invocations (see <A href="https://www.gnu.org/software/make/manual/make.html#Functions">Functions for Transforming Text</A>), just like any other reference. For example, using the <CODE>subst</CODE> function (see <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>): <PRE class=example>     x = variable1
     variable2 := Hello
     y = $(subst 1,2,$(x))
     z = y
     a := $($($(z)))
</PRE>
<P class=noindent>eventually defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. It is doubtful that anyone would ever want to write a nested reference as convoluted as this one, but it works: &#8216;<SAMP><SPAN class=samp>$($($(z)))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$($(subst 1,2,$(x)))</SPAN></SAMP>&#8217;. This gets the value &#8216;<SAMP><SPAN class=samp>variable1</SPAN></SAMP>&#8217; from <CODE>x</CODE> and changes it by substitution to &#8216;<SAMP><SPAN class=samp>variable2</SPAN></SAMP>&#8217;, so that the entire string becomes &#8216;<SAMP><SPAN class=samp>$(variable2)</SPAN></SAMP>&#8217;, a simple variable reference whose value is &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. 
<P>A computed variable name need not consist entirely of a single variable reference. It can contain several variable references, as well as some invariant text. For example, <PRE class=example>     a_dirs := dira dirb
     1_dirs := dir1 dir2
     
     a_files := filea fileb
     1_files := file1 file2
     
     ifeq "$(use_a)" "yes"
     a1 := a
     else
     a1 := 1
     endif
     
     ifeq "$(use_dirs)" "yes"
     df := dirs
     else
     df := files
     endif
     
     dirs := $($(a1)_$(df))
</PRE>
<P class=noindent>will give <CODE>dirs</CODE> the same value as <CODE>a_dirs</CODE>, <CODE>1_dirs</CODE>, <CODE>a_files</CODE> or <CODE>1_files</CODE> depending on the settings of <CODE>use_a</CODE> and <CODE>use_dirs</CODE>. 
<P>Computed variable names can also be used in substitution references: <PRE class=example>     a_objects := a.o b.o c.o
     1_objects := 1.o 2.o 3.o
     
     sources := $($(a1)_objects:.o=.c)
</PRE>
<P class=noindent>defines <CODE>sources</CODE> as either &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>1.c 2.c 3.c</SPAN></SAMP>&#8217;, depending on the value of <CODE>a1</CODE>. 
<P>The only restriction on this sort of use of nested variable references is that they cannot specify part of the name of a function to be called. This is because the test for a recognized function name is done before the expansion of nested references. For example, <PRE class=example>     ifdef do_sort
     func := sort
     else
     func := strip
     endif
     
     bar := a d b g q c
     
     foo := $($(func) $(bar))
</PRE>
<P class=noindent>attempts to give &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; the value of the variable &#8216;<SAMP><SPAN class=samp>sort a d b g q c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>strip a d b g q c</SPAN></SAMP>&#8217;, rather than giving &#8216;<SAMP><SPAN class=samp>a d b g q c</SPAN></SAMP>&#8217; as the argument to either the <CODE>sort</CODE> or the <CODE>strip</CODE> function. This restriction could be removed in the future if that change is shown to be a good idea. 
<P>You can also use computed variable names in the left-hand side of a variable assignment, or in a <CODE>define</CODE> directive, as in: <PRE class=example>     dir = foo
     $(dir)_sources := $(wildcard $(dir)/*.c)
     define $(dir)_print =
     lpr $($(dir)_sources)
     endef
</PRE>
<P class=noindent>This example defines the variables &#8216;<SAMP><SPAN class=samp>dir</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>foo_sources</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>foo_print</SPAN></SAMP>&#8217;. 
<P><FONT class=extract>Note that <DFN>nested variable references</DFN> are quite different from <DFN>recursively expanded variables</DFN> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>), though both are used together in complex ways when doing makefile programming.</FONT>