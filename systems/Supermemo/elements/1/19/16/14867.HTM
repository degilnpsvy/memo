The usual behavior assumes that your purpose is to get the specified targets up to date; once <CODE>make</CODE> learns that this is impossible, it might as well report the failure immediately. <FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; option says that the real purpose is to test as many of the changes made in the program as possible, perhaps to find several independent problems so that you can correct them all before the next attempt to compile. </FONT>This is why Emacs' <CODE>compile</CODE> command passes the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag by default. 
<P></P>
<P><A name=index-g_t_002eDELETE_005fON_005fERROR-374></A><A name=index-deletion-of-target-files-375></A><A name=index-removal-of-target-files-376></A><A name=index-target_002c-deleting-on-error-377></A>Usually when a recipe line fails, if it has changed the target file at all, the file is corrupted and cannot be used&#8212;or at least it is not completely updated. Yet the file's time stamp says that it is now up to date, so the next time <CODE>make</CODE> runs, it will not try to update that file. The situation is just the same as when the shell is killed by a signal; see <A href="https://www.gnu.org/software/make/manual/make.html#Interrupts">Interrupts</A>. <FONT class=extract>So generally the right thing to do is to delete the target file if the recipe fails after beginning to change the file. <CODE>make</CODE> will do this if <CODE>.DELETE_ON_ERROR</CODE> appears as a target. This is almost always what you want <CODE>make</CODE> to do, but it is not historical practice; so for compatibility, you must explicitly request it.</FONT>