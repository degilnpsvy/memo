<H3 class=section>6.11 Target-specific Variable Values</H3>
<P><A name=index-target_002dspecific-variables-541></A><A name=index-variables_002c-target_002dspecific-542></A><FONT class=extract>Variable values in <CODE>make</CODE> are usually global; that is, they are the same regardless of where they are evaluated (unless they're reset, of course). One exception to that is automatic variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT>
<P>The other exception is <DFN>target-specific variable values</DFN>. This feature allows you to define different values for the same variable, based on the target that <CODE>make</CODE> is currently building. As with automatic variables, these values are only available within the context of a target's recipe (and in other target-specific assignments). 
<P><FONT class=extract>Set a target-specific variable value like this: </FONT><PRE class=example><FONT class=extract>     <VAR>target</VAR> ... : <VAR>variable-assignment</VAR>
</FONT></PRE>
<P><FONT class=extract>Target-specific variable assignments can be prefixed with any or all of the special keywords <CODE>export</CODE>, <CODE>override</CODE>, or <CODE>private</CODE>; these apply their normal behavior to this instance of the variable only. </FONT>
<P><FONT class=extract>Multiple <VAR>target</VAR> values create a target-specific variable value for each member of the target list individually. </FONT>
<P><FONT class=extract>The <VAR>variable-assignment</VAR> can be any valid form of assignment; recursive (&#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;), simple (&#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;), appending (&#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;), or conditional (&#8216;<SAMP><SPAN class=samp>?=</SPAN></SAMP>&#8217;). All variables that appear within the <VAR>variable-assignment</VAR> are evaluated within the context of the target: thus, any previously-defined target-specific variable values will be in effect. Note that this variable is actually distinct from any &#8220;global&#8221; value: the two variables do not have to have the same flavor (recursive vs. simple). </FONT>
<P>Target-specific variables have the same priority as any other makefile variable. Variables provided on the command line (and in the environment if the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; option is in force) will take precedence. Specifying the <CODE>override</CODE> directive will allow the target-specific variable value to be preferred. 
<P><FONT class=extract>There is one more special feature of target-specific variables: when you define a target-specific variable that variable value is also in effect for all prerequisites of this target, and all their prerequisites, etc. (unless those prerequisites override that variable with their own target-specific variable value). So, for example, a statement like this: </FONT><PRE class=example><FONT class=extract>     prog : CFLAGS = -g
     prog : prog.o foo.o bar.o
</FONT></PRE>
<P class=noindent><FONT class=extract>will set <CODE>CFLAGS</CODE> to &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; in the recipe for <SAMP><SPAN class=file>prog</SPAN></SAMP>, but it will also set <CODE>CFLAGS</CODE> to &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; in the recipes that create <SAMP><SPAN class=file>prog.o</SPAN></SAMP>, <SAMP><SPAN class=file>foo.o</SPAN></SAMP>, and <SAMP><SPAN class=file>bar.o</SPAN></SAMP>, and any recipes which create their prerequisites. </FONT>
<P><FONT class=extract>Be aware that a given prerequisite will only be built once per invocation of make, at most. If the same file is a prerequisite of multiple targets, and each of those targets has a different value for the same target-specific variable, then the first target to be built will cause that prerequisite to be built and the prerequisite will inherit the target-specific value from the first target. It will ignore the target-specific values from any other targets.</FONT>