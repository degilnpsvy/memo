<H3 class=section>6.12 Pattern-specific Variable Values</H3>
<P><A name=index-pattern_002dspecific-variables-543></A><A name=index-variables_002c-pattern_002dspecific-544></A><FONT class=extract>In addition to target-specific variable values (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Target_002dspecific"><FONT class=extract>Target-specific Variable Values</FONT></A><FONT class=extract>), GNU <CODE>make</CODE> supports pattern-specific variable values. In this form, the variable is defined for any target that matches the pattern specified. </FONT>
<P><FONT class=extract>Set a pattern-specific variable value like this: </FONT><PRE class=example><FONT class=extract>     <VAR>pattern</VAR> ... : <VAR>variable-assignment</VAR>
</FONT></PRE>
<P><FONT class=extract>where <VAR>pattern</VAR> is a %-pattern. As with target-specific variable values, multiple <VAR>pattern</VAR> values create a pattern-specific variable value for each pattern individually. The <VAR>variable-assignment</VAR> can be any valid form of assignment. Any command line variable setting will take precedence, unless <CODE>override</CODE> is specified. </FONT>
<P><FONT class=extract>For example: </FONT><PRE class=example><FONT class=extract>     %.o : CFLAGS = -O
</FONT></PRE>
<P class=noindent><FONT class=extract>will assign <CODE>CFLAGS</CODE> the value of &#8216;<SAMP><SPAN class=samp>-O</SPAN></SAMP>&#8217; for all targets matching the pattern <CODE>%.o</CODE>. </FONT>
<P><FONT class=extract>If a target matches more than one pattern, the matching pattern-specific variables with longer stems are interpreted first. This results in more specific variables taking precedence over the more generic ones, for example: </FONT><PRE class=example><FONT class=extract>     %.o: %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
     
     lib/%.o: CFLAGS := -fPIC -g
     %.o: CFLAGS := -g
     
     all: foo.o lib/bar.o
</FONT></PRE>
<P><FONT class=extract>In this example the first definition of the <CODE>CFLAGS</CODE> variable will be used to update <SAMP><SPAN class=file>lib/bar.o</SPAN></SAMP> even though the second one also applies to this target. Pattern-specific variables which result in the same stem length are considered in the order in which they were defined in the makefile. </FONT>
<P><FONT class=extract>Pattern-specific variables are searched after any target-specific variables defined explicitly for that target, and before target-specific variables defined for the parent target.</FONT>