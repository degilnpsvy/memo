<H3 class=section>6.9 Undefining Variables</H3>
<P><A name=index-undefine-536></A><A name=index-undefining-variable-537></A><FONT class=extract>If you want to clear a variable, setting its value to empty is usually sufficient.</FONT> Expanding such a variable will yield the same result (empty string) regardless of whether it was set or not. However, if you are using the <CODE>flavor</CODE> (see <A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">Flavor Function</A>) and <CODE>origin</CODE> (see <A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">Origin Function</A>) functions, there is a difference between a variable that was never set and a variable with an empty value. In such situations you may want to use the <CODE>undefine</CODE> directive to make a variable appear as if it was never set. For example: <PRE class=example><FONT class=extract>     foo := foo
     bar = bar
     
     undefine foo
     undefine bar
     
     $(info $(origin foo))
     $(info $(flavor bar))
</FONT></PRE>
<P><FONT class=extract>This example will print &#8220;undefined&#8221; for both variables.</FONT> 
<P><FONT class=extract>If you want to undefine a command-line variable definition, you can use the <CODE>override</CODE> directive together with <CODE>undefine</CODE>, similar to how this is done for variable definitions: </FONT><PRE class=example><FONT class=extract>     override undefine CFLAGS
</FONT></PRE>