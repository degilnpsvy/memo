<H3 class=section>6.13 Suppressing Inheritance</H3>
<P><A name=index-private-545></A><A name=index-suppressing-inheritance-546></A><A name=index-inheritance_002c-suppressing-547></A><FONT class=extract>As described in previous sections, <CODE>make</CODE> variables are inherited by prerequisites. This capability allows you to modify the behavior of a prerequisite based on which targets caused it to be rebuilt. For example, you might set a target-specific variable on a <CODE>debug</CODE> target, then running &#8216;<SAMP><SPAN class=samp>make debug</SPAN></SAMP>&#8217; will cause that variable to be inherited by all prerequisites of <CODE>debug</CODE>, while just running &#8216;<SAMP><SPAN class=samp>make all</SPAN></SAMP>&#8217; (for example) would not have that assignment.</FONT> 
<P><FONT class=extract>Sometimes, however, you may not want a variable to be inherited. For these situations, <CODE>make</CODE> provides the <CODE>private</CODE> modifier. Although this modifier can be used with any variable assignment, it makes the most sense with target- and pattern-specific variables. Any variable marked <CODE>private</CODE> will be visible to its local target but will not be inherited by prerequisites of that target. A global variable marked <CODE>private</CODE> will be visible in the global scope but will not be inherited by any target, and hence will not be visible in any recipe. </FONT>
<P><FONT class=extract>As an example, consider this makefile: </FONT><PRE class=example><FONT class=extract>     EXTRA_CFLAGS =
     
     prog: private EXTRA_CFLAGS = -L/usr/local/lib
     prog: a.o b.o
</FONT></PRE>
<P><FONT class=extract>Due to the <CODE>private</CODE> modifier, <CODE>a.o</CODE> and <CODE>b.o</CODE> will not inherit the <CODE>EXTRA_CFLAGS</CODE> variable assignment from the <CODE>prog</CODE> target.</FONT>