The first difference is what happens if the intermediate file does not exist. If an ordinary file <VAR>b</VAR> does not exist, and <CODE>make</CODE> considers a target that depends on <VAR>b</VAR>, it invariably creates <VAR>b</VAR> and then updates the target from <VAR>b</VAR>. But if <VAR>b</VAR> is an intermediate file, then <CODE>make</CODE> can leave well enough alone. It won't bother updating <VAR>b</VAR>, or the ultimate target, unless some prerequisite of <VAR>b</VAR> is newer than that target or there is some other reason to update that target. 
<P>The second difference is that if <CODE>make</CODE> <EM>does</EM> create <VAR>b</VAR> in order to update something else, it deletes <VAR>b</VAR> later on after it is no longer needed. Therefore, an intermediate file which did not exist before <CODE>make</CODE> also does not exist after <CODE>make</CODE>. <CODE>make</CODE> reports the deletion to you by printing a &#8216;<SAMP><SPAN class=samp>rm -f</SPAN></SAMP>&#8217; command showing which file it is deleting.