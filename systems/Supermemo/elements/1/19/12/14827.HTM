<H3 class=section>6.1 Basics of Variable References</H3>
<P><A name=index-variables_002c-how-to-reference-475></A><A name=index-reference-to-variables-476></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-variable-reference-477></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-reference-478></A><FONT class=extract>To substitute a variable's value, write a dollar sign followed by the name of the variable in parentheses or braces: either &#8216;<SAMP><SPAN class=samp>$(foo)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${foo}</SPAN></SAMP>&#8217; is a valid reference to the variable <CODE>foo</CODE>. This special significance of &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; is why you must write &#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217; to have the effect of a single dollar sign in a file name or recipe.</FONT> 
<P><FONT class=extract>Variable references can be used in any context: targets, prerequisites, recipes, most directives, and new variable values. Here is an example of a common case, where a variable holds the names of all the object files in a program: </FONT><PRE class=example><FONT class=extract>     objects = program.o foo.o utils.o
     program : $(objects)
             cc -o program $(objects)
     
     $(objects) : defs.h
</FONT></PRE>
<P><FONT class=extract>Variable references work by strict textual substitution. Thus, the rule </FONT><PRE class=example><FONT class=extract>     foo = c
     prog.o : prog.$(foo)
             $(foo)$(foo) -$(foo) prog.$(foo)
</FONT></PRE>
<P class=noindent><FONT class=extract>could be used to compile a C program <SAMP><SPAN class=file>prog.c</SPAN></SAMP>. Since spaces before the variable value are ignored in variable assignments, the value of <CODE>foo</CODE> is precisely &#8216;<SAMP><SPAN class=samp>c</SPAN></SAMP>&#8217;. (Don't actually write your makefiles this way!)</FONT> 
<P>A dollar sign followed by a character other than a dollar sign, open-parenthesis or open-brace treats that single character as the variable name. Thus, you could reference the variable <CODE>x</CODE> with &#8216;<SAMP><SPAN class=samp>$x</SPAN></SAMP>&#8217;. However, this practice is strongly discouraged, except in the case of the automatic variables (see <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>).