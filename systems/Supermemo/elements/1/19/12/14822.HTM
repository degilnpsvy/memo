This pattern rule has two targets: <PRE class=example>     %.tab.c %.tab.h: %.y
             bison -d $&lt;
</PRE>
<P class=noindent><!-- The following paragraph is rewritten to avoid overfull hboxes -->This tells <CODE>make</CODE> that the recipe &#8216;<SAMP><SPAN class=samp>bison -d </SPAN><VAR>x</VAR><SPAN class=samp>.y</SPAN></SAMP>&#8217; will make <FONT class=clozed>both <SAMP><VAR>x</VAR><SPAN class=file>.tab.c</SPAN></SAMP> and <SAMP><VAR>x</VAR><SPAN class=file>.tab.h</SPAN></SAMP></FONT>. 
<P class=noindent>If the file <SAMP><SPAN class=file>foo</SPAN></SAMP> depends on the files <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> depends on the file <SAMP><SPAN class=file>parse.tab.h</SPAN></SAMP>, when <SAMP><SPAN class=file>parse.y</SPAN></SAMP> is changed, the recipe &#8216;<SAMP><SPAN class=samp>bison -d parse.y</SPAN></SAMP>&#8217; will be executed <SPAN class=cloze>[...]</SPAN>, and the prerequisites of both <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> will be satisfied. 
<P class=noindent>(Presumably the file <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> will be recompiled from <SAMP><SPAN class=file>parse.tab.c</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> from <SAMP><SPAN class=file>scan.c</SPAN></SAMP>, while <SAMP><SPAN class=file>foo</SPAN></SAMP> is linked from <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP>, <SAMP><SPAN class=file>scan.o</SPAN></SAMP>, and its other prerequisites, and it will execute happily ever after.)