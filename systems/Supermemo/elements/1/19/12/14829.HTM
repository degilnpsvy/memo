<H3 class=section>6.3 Advanced Features for Reference to Variables</H3>
<P><A name=index-reference-to-variables-499></A>This section describes some advanced features you can use to reference variables in more flexible ways. 
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs">Substitution Refs</A>: Referencing a variable with substitutions on the value. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Computed-Names">Computed Names</A>: Computing the name of the variable to refer to. </LI></UL>
<DIV class=node><A name=Substitution-Refs></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Computed-Names" rel=next>Computed Names</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=previous>Advanced</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=up>Advanced</A> </DIV>
<H4 class=subsection><FONT class=extract>6.3.1 Substitution References</FONT></H4>
<P><A name=index-modified-variable-reference-500></A><A name=index-substitution-variable-reference-501></A><A name=index-variables_002c-modified-reference-502></A><A name=index-variables_002c-substitution-reference-503></A><A name=index-variables_002c-substituting-suffix-in-504></A><A name=index-suffix_002c-substituting-in-variables-505></A><FONT class=extract>A <DFN>substitution reference</DFN> substitutes the value of a variable with alterations that you specify. It has the form &#8216;<SAMP><SPAN class=samp>$(</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217; (or &#8216;<SAMP><SPAN class=samp>${</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>}</SPAN></SAMP>&#8217;) and its meaning is to take the value of the variable <VAR>var</VAR>, replace every <VAR>a</VAR> at the end of a word with <VAR>b</VAR> in that value, and substitute the resulting string. </FONT>
<P><FONT class=extract>When we say &#8220;at the end of a word&#8221;, we mean that <VAR>a</VAR> must appear either followed by whitespace or at the end of the value in order to be replaced; other occurrences of <VAR>a</VAR> in the value are unaltered. For example: </FONT><PRE class=example><FONT class=extract>     foo := a.o b.o c.o
     bar := $(foo:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Setting"><FONT class=extract>Setting Variables</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>A substitution reference is actually an abbreviation for use of the <CODE>patsubst</CODE> expansion function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>). We provide substitution references as well as <CODE>patsubst</CODE> for compatibility with other implementations of <CODE>make</CODE>. </FONT>
<P><A name=index-patsubst-506></A><FONT class=extract>Another type of substitution reference lets you use the full power of the <CODE>patsubst</CODE> function. It has the same form &#8216;<SAMP><SPAN class=samp>$(</SPAN><VAR>var</VAR><SPAN class=samp>:</SPAN><VAR>a</VAR><SPAN class=samp>=</SPAN><VAR>b</VAR><SPAN class=samp>)</SPAN></SAMP>&#8217; described above, except that now <VAR>a</VAR> must contain a single &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. This case is equivalent to &#8216;<SAMP><SPAN class=samp>$(patsubst </SPAN><VAR>a</VAR><SPAN class=samp>,</SPAN><VAR>b</VAR><SPAN class=samp>,$(</SPAN><VAR>var</VAR><SPAN class=samp>))</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>, for a description of the <CODE>patsubst</CODE> function. </FONT><PRE class=example><BR><FONT class=extract>For example:<BR>
     
     foo := a.o b.o c.o
     bar := $(foo:%.o=%.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>sets &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217;. </FONT>
<DIV class=node><A name=Computed-Names></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs" rel=previous>Substitution Refs</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Advanced" rel=up>Advanced</A> </DIV>
<H4 class=subsection><FONT class=extract>6.3.2 Computed Variable Names</FONT></H4>
<P><A name=index-nested-variable-reference-507></A><A name=index-computed-variable-name-508></A><A name=index-variables_002c-computed-names-509></A><A name=index-variables_002c-nested-references-510></A><A name=index-variables_002c-_0040samp_007b_0024_007d-in-name-511></A><A name=index-g_t_0040code_007b_0024_007d_002c-in-variable-name-512></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-variable-name-513></A><FONT class=extract>Computed variable names are a complicated concept needed only for sophisticated makefile programming. For most purposes you need not consider them, except to know that making a variable with a dollar sign in its name might have strange results. However, if you are the type that wants to understand everything, or you are actually interested in what they do, read on. </FONT>
<P><FONT class=extract>Variables may be referenced inside the name of a variable. This is called a <DFN>computed variable name</DFN> or a <DFN>nested variable reference</DFN>. For example, </FONT><PRE class=example><FONT class=extract>     x = y
     y = z
     a := $($(x))
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;: the &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; inside &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;. Here the name of the variable to reference is not stated explicitly; it is computed by expansion of &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217;. The reference &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; here is nested within the outer variable reference. </FONT>
<P><FONT class=extract>The previous example shows two levels of nesting, but any number of levels is possible. For example, here are three levels: </FONT><PRE class=example><FONT class=extract>     x = y
     y = z
     z = u
     a := $($($(x)))
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the innermost &#8216;<SAMP><SPAN class=samp>$(x)</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>y</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$(y)</SPAN></SAMP>&#8217; which in turn expands to &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;; now we have &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217;, which becomes &#8216;<SAMP><SPAN class=samp>u</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>References to recursively-expanded variables within a variable name are re-expanded in the usual fashion. For example: </FONT><PRE class=example><FONT class=extract>     x = $(y)
     y = z
     z = Hello
     a := $($(x))
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;: &#8216;<SAMP><SPAN class=samp>$($(x))</SPAN></SAMP>&#8217; becomes &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$(z)</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Nested variable references can also contain modified references and function invocations (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>), just like any other reference. For example, using the <CODE>subst</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     x = variable1
     variable2 := Hello
     y = $(subst 1,2,$(x))
     z = y
     a := $($($(z)))
</FONT></PRE>
<P class=noindent><FONT class=extract>eventually defines <CODE>a</CODE> as &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. It is doubtful that anyone would ever want to write a nested reference as convoluted as this one, but it works: &#8216;<SAMP><SPAN class=samp>$($($(z)))</SPAN></SAMP>&#8217; expands to &#8216;<SAMP><SPAN class=samp>$($(y))</SPAN></SAMP>&#8217; which becomes &#8216;<SAMP><SPAN class=samp>$($(subst 1,2,$(x)))</SPAN></SAMP>&#8217;. This gets the value &#8216;<SAMP><SPAN class=samp>variable1</SPAN></SAMP>&#8217; from <CODE>x</CODE> and changes it by substitution to &#8216;<SAMP><SPAN class=samp>variable2</SPAN></SAMP>&#8217;, so that the entire string becomes &#8216;<SAMP><SPAN class=samp>$(variable2)</SPAN></SAMP>&#8217;, a simple variable reference whose value is &#8216;<SAMP><SPAN class=samp>Hello</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>A computed variable name need not consist entirely of a single variable reference. It can contain several variable references, as well as some invariant text. For example, </FONT><PRE class=example><FONT class=extract>     a_dirs := dira dirb
     1_dirs := dir1 dir2
     
     a_files := filea fileb
     1_files := file1 file2
     
     ifeq "$(use_a)" "yes"
     a1 := a
     else
     a1 := 1
     endif
     
     ifeq "$(use_dirs)" "yes"
     df := dirs
     else
     df := files
     endif
     
     dirs := $($(a1)_$(df))
</FONT></PRE>
<P class=noindent><FONT class=extract>will give <CODE>dirs</CODE> the same value as <CODE>a_dirs</CODE>, <CODE>1_dirs</CODE>, <CODE>a_files</CODE> or <CODE>1_files</CODE> depending on the settings of <CODE>use_a</CODE> and <CODE>use_dirs</CODE>. </FONT>
<P><FONT class=extract>Computed variable names can also be used in substitution references: </FONT><PRE class=example><FONT class=extract>     a_objects := a.o b.o c.o
     1_objects := 1.o 2.o 3.o
     
     sources := $($(a1)_objects:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>defines <CODE>sources</CODE> as either &#8216;<SAMP><SPAN class=samp>a.c b.c c.c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>1.c 2.c 3.c</SPAN></SAMP>&#8217;, depending on the value of <CODE>a1</CODE>. </FONT>
<P><FONT class=extract>The only restriction on this sort of use of nested variable references is that they cannot specify part of the name of a function to be called. This is because the test for a recognized function name is done before the expansion of nested references. For example, </FONT><PRE class=example><FONT class=extract>     ifdef do_sort
     func := sort
     else
     func := strip
     endif
     
     bar := a d b g q c
     
     foo := $($(func) $(bar))
</FONT></PRE>
<P class=noindent><FONT class=extract>attempts to give &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; the value of the variable &#8216;<SAMP><SPAN class=samp>sort a d b g q c</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>strip a d b g q c</SPAN></SAMP>&#8217;, rather than giving &#8216;<SAMP><SPAN class=samp>a d b g q c</SPAN></SAMP>&#8217; as the argument to either the <CODE>sort</CODE> or the <CODE>strip</CODE> function. This restriction could be removed in the future if that change is shown to be a good idea. </FONT>
<P><FONT class=extract>You can also use computed variable names in the left-hand side of a variable assignment, or in a <CODE>define</CODE> directive, as in: </FONT><PRE class=example><FONT class=extract>     dir = foo
     $(dir)_sources := $(wildcard $(dir)/*.c)
     define $(dir)_print =
     lpr $($(dir)_sources)
     endef
</FONT></PRE>
<P class=noindent><FONT class=extract>This example defines the variables &#8216;<SAMP><SPAN class=samp>dir</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>foo_sources</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>foo_print</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Note that <DFN>nested variable references</DFN> are quite different from <DFN>recursively expanded variables</DFN> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>), though both are used together in complex ways when doing makefile programming.</FONT>