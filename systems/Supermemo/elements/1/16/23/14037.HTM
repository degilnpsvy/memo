<H1 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=SECTION02110000000000000000><SPAN class=arabic>1</SPAN>.<SPAN class=arabic>1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>Planning to Plan</A></H1>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><EM>Planning</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a term that means different things to different groups of people.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Robotics</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>addresses the automation of mechanical systems that have sensing, actuation, and computation capabilities (similar terms, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>autonomous systems</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also used). A fundamental need in robotics is to have algorithms that convert high-level specifications of tasks from humans into low-level descriptions of how to move. The terms<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>motion planning</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>trajectory planning</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>are often used for these kinds of problems. A classical version of motion planning is sometimes referred to as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Piano Mover's Problem</EM>. Imagine giving a precise computer-aided design (CAD) model of a house and a piano as input to an algorithm. The algorithm must determine how to move the piano from one room to another in the house without hitting anything. Most of us have encountered similar problems when moving a sofa or mattress up a set of stairs. Robot motion planning usually ignores dynamics and other differential constraints and focuses primarily on the translations and rotations required to move the piano. Recent work, however, does consider other aspects, such as uncertainties, differential constraints, modeling errors, and optimality. Trajectory planning usually refers to the problem of taking the solution from a robot motion planning algorithm and determining how to move along the solution in a way that respects the mechanical limitations of the robot.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><EM>Control theory</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>has historically been concerned with designing inputs to physical systems described by differential equations. These could include mechanical systems such as cars or aircraft, electrical systems such as noise filters, or even systems arising in areas as diverse as chemistry, economics, and sociology. Classically, control theory has developed<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>feedback policies</I>, which enable an adaptive response during execution, and has focused on<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>stability</I>, which ensures that the dynamics do not cause the system to become wildly out of control. A large emphasis is also placed on optimizing criteria to minimize resource consumption, such as energy or time. In recent control theory literature,<I>motion planning</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>sometimes refers to the construction of inputs to a nonlinear dynamical system that drives it from an initial state to a specified goal state. For example, imagine trying to operate a remote-controlled hovercraft that glides over the surface of a frozen pond. Suppose we would like the hovercraft to leave its current resting location and come to rest at another specified location. Can an algorithm be designed that computes the desired inputs, even in an ideal simulator that neglects uncertainties that arise from model inaccuracies? It is possible to add other considerations, such as uncertainties, feedback, and optimality; however, the problem is already challenging enough without these.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>artificial intelligence</EM>, the terms<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>planning</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>AI planning</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>take on a more discrete flavor. Instead of moving a piano through a continuous space, as in the robot motion planning problem, the task might be to solve a puzzle, such as the Rubik's cube<A name=1696></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a sliding-tile puzzle<A name=1698></A>, or to achieve a task that is modeled discretely, such as building a stack of blocks. Although such problems could be modeled with continuous spaces, it seems natural to define a finite set of actions that can be applied to a discrete set of states and to construct a solution by giving the appropriate sequence of actions. Historically, planning has been considered different from<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>problem solving</I>; however, the distinction seems to have faded away in recent years. In this book, we do not attempt to make a distinction between the two. Also, substantial effort has been devoted to representation language issues in planning. Although some of this will be covered, it is mainly outside of our focus. Many decision-theoretic ideas have recently been incorporated into the AI planning problem, to model uncertainties, adversarial scenarios, and optimization. These issues are important and are considered in detail in Part<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://planning.cs.uiuc.edu/node420.html#par:dtp">III</A>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Given the broad range of problems to which the term planning has been applied in the artificial intelligence, control theory, and robotics communities, you might wonder whether it has a specific meaning. Otherwise, just about anything could be considered as an instance of planning. Some common elements for planning problems will be discussed shortly, but first we consider planning as a branch of algorithms. Hence, this book is entitled<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Planning Algorithms</I>. The primary focus is on algorithmic and computational issues of planning problems that have arisen in several disciplines. On the other hand, this does not mean that planning algorithms refers to an existing community of researchers within the general algorithms community. This book it not limited to combinatorics and asymptotic complexity analysis, which is the main focus in pure algorithms. The focus here includes numerous concepts that are not necessarily algorithmic but aid in modeling, solving, and analyzing planning problems.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Natural questions at this point are, What is a plan? How is a plan represented? How is it computed? What is it supposed to achieve? How is its quality evaluated? Who or what is going to use it? This chapter provides general answers to these questions. Regarding the user of the plan, it clearly depends on the application. In most applications, an algorithm executes the plan; however, the user could even be a human. Imagine, for example, that the planning algorithm provides you with an investment strategy.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In this book, the user of the plan will frequently be referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>robot</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>decision maker</EM><A name=1700></A>. In artificial intelligence and related areas, it has become popular in recent years to use the term<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>agent</I>, possibly with adjectives to yield an<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>intelligent agent</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>software agent</I>. Control theory usually refers to the decision maker as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>controller</I>. The plan in this context is sometimes referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>policy</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>control law</I>. In a game-theoretic context, it might make sense to refer to decision makers as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>players</I>. Regardless of the terminology used in a particular discipline, this book is concerned with planning algorithms that find a strategy for one or more decision makers. Therefore, remember that terms such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>robot</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>agent</EM>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>controller</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are interchangeable.