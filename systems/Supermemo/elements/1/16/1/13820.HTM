<H2 class=chapter>13 Features of GNU <CODE>make</CODE></H2>
<P><A name=index-features-of-GNU-_0040code_007bmake_007d-1078></A><A name=index-portability-1079></A><A name=index-compatibility-1080></A>Here is a summary of the features of GNU <CODE>make</CODE>, for comparison with and credit to other versions of <CODE>make</CODE>. We consider the features of <CODE>make</CODE> in 4.2 BSD systems as a baseline. If you are concerned with writing portable makefiles, you should not use the features of <CODE>make</CODE> listed here, nor the ones in <A href="https://www.gnu.org/software/make/manual/make.html#Missing">Missing</A>. 
<P>Many features come from the version of <CODE>make</CODE> in System V. 
<UL>
<LI>The <CODE>VPATH</CODE> variable and its special meaning. See <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Searching Directories for Prerequisites</A>. This feature exists in System V <CODE>make</CODE>, but is undocumented. It is documented in 4.3 BSD <CODE>make</CODE> (which says it mimics System V's <CODE>VPATH</CODE> feature). 
<LI>Included makefiles. See <A href="https://www.gnu.org/software/make/manual/make.html#Include">Including Other Makefiles</A>. Allowing multiple files to be included with a single directive is a GNU extension. 
<LI>Variables are read from and communicated via the environment. See <A href="https://www.gnu.org/software/make/manual/make.html#Environment">Variables from the Environment</A>. 
<LI>Options passed through the variable <CODE>MAKEFLAGS</CODE> to recursive invocations of <CODE>make</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Communicating Options to a Sub-<CODE>make</CODE></A>. 
<LI>The automatic variable <CODE>$%</CODE> is set to the member name in an archive reference. See <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>. 
<LI>The automatic variables <CODE>$@</CODE>, <CODE>$*</CODE>, <CODE>$&lt;</CODE>, <CODE>$%</CODE>, and <CODE>$?</CODE> have corresponding forms like <CODE>$(@F)</CODE> and <CODE>$(@D)</CODE>. We have generalized this to <CODE>$^</CODE> as an obvious extension. See <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>. 
<LI>Substitution variable references. See <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Basics of Variable References</A>. 
<LI>The command line options &#8216;<SAMP><SPAN class=samp>-b</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217;, accepted and ignored. In System V <CODE>make</CODE>, these options actually do something. 
<LI>Execution of recursive commands to run <CODE>make</CODE> via the variable <CODE>MAKE</CODE> even if &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; is specified. See <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursive Use of <CODE>make</CODE></A>. 
<LI>Support for suffix &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; in suffix rules. See <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Suffix-Rules">Archive Suffix Rules</A>. This feature is obsolete in GNU <CODE>make</CODE>, because the general feature of rule chaining (see <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chains of Implicit Rules</A>) allows one pattern rule for installing members in an archive (see <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Update">Archive Update</A>) to be sufficient. 
<LI>The arrangement of lines and backslash/newline combinations in recipes is retained when the recipes are printed, so they appear as they do in the makefile, except for the stripping of initial whitespace. </LI></UL>
<P>The following features were inspired by various other versions of <CODE>make</CODE>. In some cases it is unclear exactly which versions inspired which others. 
<UL>
<LI>Pattern rules using &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. This has been implemented in several versions of <CODE>make</CODE>. We're not sure who invented it first, but it's been spread around a bit. See <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">Defining and Redefining Pattern Rules</A>. 
<LI>Rule chaining and implicit intermediate files. This was implemented by Stu Feldman in his version of <CODE>make</CODE> for AT&amp;T Eighth Edition Research Unix, and later by Andrew Hume of AT&amp;T Bell Labs in his <CODE>mk</CODE> program (where he terms it &#8220;transitive closure&#8221;). We do not really know if we got this from either of them or thought it up ourselves at the same time. See <A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules">Chains of Implicit Rules</A>. 
<LI>The automatic variable <CODE>$^</CODE> containing a list of all prerequisites of the current target. We did not invent this, but we have no idea who did. See <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>. The automatic variable <CODE>$+</CODE> is a simple extension of <CODE>$^</CODE>. 
<LI>The &#8220;what if&#8221; flag (&#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; in GNU <CODE>make</CODE>) was (as far as we know) invented by Andrew Hume in <CODE>mk</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Executing Recipes</A>. 
<LI>The concept of doing several things at once (parallelism) exists in many incarnations of <CODE>make</CODE> and similar programs, though not in the System V or BSD implementations. See <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Recipe Execution</A>. 
<LI>A number of different build tools that support parallelism also support collecting output and displaying as a single block. See <A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Output During Parallel Execution</A>. 
<LI>Modified variable references using pattern substitution come from SunOS 4. See <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Basics of Variable References</A>. This functionality was provided in GNU <CODE>make</CODE> by the <CODE>patsubst</CODE> function before the alternate syntax was implemented for compatibility with SunOS 4. It is not altogether clear who inspired whom, since GNU <CODE>make</CODE> had <CODE>patsubst</CODE> before SunOS 4 was released. 
<LI>The special significance of &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; characters preceding recipe lines (see <A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Executing Recipes</A>) is mandated by <CITE>IEEE Standard 1003.2-1992</CITE> (POSIX.2). 
<LI>The &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; syntax to append to the value of a variable comes from SunOS 4 <CODE>make</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Appending">Appending More Text to Variables</A>. 
<LI>The syntax &#8216;<SAMP><VAR>archive</VAR><SPAN class=samp>(</SPAN><VAR>mem1</VAR><SPAN class=samp>&nbsp;</SPAN><VAR>mem2</VAR><SPAN class=samp>...)</SPAN></SAMP>&#8217;<!-- /@w --> to list multiple members in a single archive file comes from SunOS 4 <CODE>make</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members">Archive Members</A>. 
<LI>The <CODE>-include</CODE> directive to include makefiles with no error for a nonexistent file comes from SunOS 4 <CODE>make</CODE>. (But note that SunOS 4 <CODE>make</CODE> does not allow multiple makefiles to be specified in one <CODE>-include</CODE> directive.) The same feature appears with the name <CODE>sinclude</CODE> in SGI <CODE>make</CODE> and perhaps others. 
<LI>The <CODE>!=</CODE> shell assignment operator exists in many BSD of <CODE>make</CODE> and is purposefully implemented here to behave identically to those implementations. 
<LI>Various build management tools are implemented using scripting languages such as Perl or Python and thus provide a natural embedded scripting language, similar to GNU <CODE>make</CODE>'s integration of GNU Guile. </LI></UL>
<P>The remaining features are inventions new in GNU <CODE>make</CODE>: 
<UL>
<LI>Use the &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--version</SPAN></SAMP>&#8217; option to print version and copyright information. 
<LI>Use the &#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--help</SPAN></SAMP>&#8217; option to summarize the options to <CODE>make</CODE>. 
<LI>Simply-expanded variables. See <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">The Two Flavors of Variables</A>. 
<LI>Pass command line variable assignments automatically through the variable <CODE>MAKE</CODE> to recursive <CODE>make</CODE> invocations. See <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursive Use of <CODE>make</CODE></A>. 
<LI>Use the &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--directory</SPAN></SAMP>&#8217; command option to change directory. See <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Summary of Options</A>. 
<LI>Make verbatim variable definitions with <CODE>define</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Defining Multi-Line Variables</A>. 
<LI>Declare phony targets with the special target <CODE>.PHONY</CODE>. 
<P>Andrew Hume of AT&amp;T Bell Labs implemented a similar feature with a different syntax in his <CODE>mk</CODE> program. This seems to be a case of parallel discovery. See <A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets">Phony Targets</A>. </P>
<LI>Manipulate text by calling functions. See <A href="https://www.gnu.org/software/make/manual/make.html#Functions">Functions for Transforming Text</A>. 
<LI>Use the &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--old-file</SPAN></SAMP>&#8217; option to pretend a file's modification-time is old. See <A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Recompilation of Some Files</A>. 
<LI>Conditional execution. 
<P>This feature has been implemented numerous times in various versions of <CODE>make</CODE>; it seems a natural extension derived from the features of the C preprocessor and similar macro languages and is not a revolutionary concept. See <A href="https://www.gnu.org/software/make/manual/make.html#Conditionals">Conditional Parts of Makefiles</A>. </P>
<LI>Specify a search path for included makefiles. See <A href="https://www.gnu.org/software/make/manual/make.html#Include">Including Other Makefiles</A>. 
<LI>Specify extra makefiles to read with an environment variable. See <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">The Variable <CODE>MAKEFILES</CODE></A>. 
<LI>Strip leading sequences of &#8216;<SAMP><SPAN class=samp>./</SPAN></SAMP>&#8217; from file names, so that <SAMP><SPAN class=file>./</SPAN><VAR>file</VAR></SAMP> and <SAMP><VAR>file</VAR></SAMP> are considered to be the same file. 
<LI>Use a special search method for library prerequisites written in the form &#8216;<SAMP><SPAN class=samp>-l</SPAN><VAR>name</VAR></SAMP>&#8217;. See <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Directory Search for Link Libraries</A>. 
<LI>Allow suffixes for suffix rules (see <A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules">Old-Fashioned Suffix Rules</A>) to contain any characters. In other versions of <CODE>make</CODE>, they must begin with &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217; and not contain any &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217; characters. 
<LI>Keep track of the current level of <CODE>make</CODE> recursion using the variable <CODE>MAKELEVEL</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursive Use of <CODE>make</CODE></A>. 
<LI>Provide any goals given on the command line in the variable <CODE>MAKECMDGOALS</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Arguments to Specify the Goals</A>. 
<LI>Specify static pattern rules. See <A href="https://www.gnu.org/software/make/manual/make.html#Static-Pattern">Static Pattern Rules</A>. 
<LI>Provide selective <CODE>vpath</CODE> search. See <A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search">Searching Directories for Prerequisites</A>. 
<LI>Provide computed variable references. See <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Basics of Variable References</A>. 
<LI>Update makefiles. See <A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles">How Makefiles Are Remade</A>. System V <CODE>make</CODE> has a very, very limited form of this functionality in that it will check out SCCS files for makefiles. 
<LI>Various new built-in implicit rules. See <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Implicit Rules</A>. 
<LI>Load dynamic objects which can modify the behavior of <CODE>make</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Loading-Objects">Loading Dynamic Objects</A>. </LI></UL>