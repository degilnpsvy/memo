<H2 class=chapter>9 How to Run <CODE>make</CODE></H2>
<P>A makefile that says how to recompile a program can be used in more than one way. The simplest use is to recompile every file that is out of date. Usually, makefiles are written so that if you run <CODE>make</CODE> with no arguments, it does just that. 
<P>But you might want to update only some of the files; you might want to use a different compiler or different compiler options; you might want just to find out which files are out of date without changing them. 
<P>By giving arguments when you run <CODE>make</CODE>, you can do any of these things and many others. 
<P><A name=index-exit-status-of-make-681></A><FONT class=extract>The exit status of <CODE>make</CODE> is always one of three values: </FONT>
<DL>
<DT><FONT class=extract><CODE>0</CODE> </FONT>
<DD><FONT class=extract>The exit status is zero if <CODE>make</CODE> is successful. <BR></FONT>
<DT><FONT class=extract><CODE>2</CODE> </FONT>
<DD><FONT class=extract>The exit status is two if <CODE>make</CODE> encounters any errors. It will print messages describing the particular errors. <BR></FONT>
<DT><FONT class=extract><CODE>1</CODE> </FONT>
<DD><FONT class=extract>The exit status is one if you use the &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag and <CODE>make</CODE> determines that some target is not already up to date. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>.</FONT> </DD></DL>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments">Makefile Arguments</A>: How to specify which makefile to use. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Goals">Goals</A>: How to use goal arguments to specify which parts of the makefile to use. 
<LI><A accessKey=3 href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution">Instead of Execution</A>: How to use mode flags to specify what kind of thing to do with the recipes in the makefile other than simply execute them. 
<LI><A accessKey=4 href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation">Avoiding Compilation</A>: How to avoid recompiling certain files. 
<LI><A accessKey=5 href="https://www.gnu.org/software/make/manual/make.html#Overriding">Overriding</A>: How to override a variable to specify an alternate compiler and other things. 
<LI><A accessKey=6 href="https://www.gnu.org/software/make/manual/make.html#Testing">Testing</A>: How to proceed past some errors, to test compilation. 
<LI><A accessKey=7 href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Options Summary</A>: Summary of Options </LI></UL>
<DIV class=node><A name=Makefile-Arguments></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Goals" rel=next>Goals</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Running" rel=previous>Running</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.1 Arguments to Specify the Makefile</FONT></H3>
<P><A name=index-g_t_0040code_007b_002d_002dfile_007d-682></A><A name=index-g_t_0040code_007b_002d_002dmakefile_007d-683></A><A name=index-g_t_0040code_007b_002df_007d-684></A><FONT class=extract>The way to specify the name of the makefile is with the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; option (&#8216;<SAMP><SPAN class=samp>--makefile</SPAN></SAMP>&#8217; also works). For example, &#8216;<SAMP><SPAN class=samp>-f altmake</SPAN></SAMP>&#8217; says to use the file <SAMP><SPAN class=file>altmake</SPAN></SAMP> as the makefile. </FONT>
<P><FONT class=extract>If you use the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; flag several times and follow each &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; with an argument, all the specified files are used jointly as makefiles. </FONT>
<P><FONT class=extract>If you do not use the &#8216;<SAMP><SPAN class=samp>-f</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--file</SPAN></SAMP>&#8217; flag, the default is to try <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, <SAMP><SPAN class=file>makefile</SPAN></SAMP>, and <SAMP><SPAN class=file>Makefile</SPAN></SAMP>, in that order, and use the first of these three which exists or can be made (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>).</FONT> 
<DIV class=node><A name=Goals></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution" rel=next>Instead of Execution</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments" rel=previous>Makefile Arguments</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.2 Arguments to Specify the Goals</FONT></H3>
<P><A name=index-goal_002c-how-to-specify-685></A><FONT class=extract>The <DFN>goals</DFN> are the targets that <CODE>make</CODE> should strive ultimately to update. Other targets are updated as well if they appear as prerequisites of goals, or prerequisites of prerequisites of goals, etc. </FONT>
<P><FONT class=extract>By default, the goal is the first target in the makefile (not counting targets that start with a period). Therefore, makefiles are usually written so that the first target is for compiling the entire program or programs they describe. If the first rule in the makefile has several targets, only the first target in the rule becomes the default goal, not the whole list. You can manage the selection of the default goal from within your makefile using the <CODE>.DEFAULT_GOAL</CODE> variable (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>You can also specify a different goal or goals with command line arguments to <CODE>make</CODE>. Use the name of the goal as an argument. If you specify several goals, <CODE>make</CODE> processes each of them in turn, in the order you name them. </FONT>
<P><FONT class=extract>Any target in the makefile may be specified as a goal (unless it starts with &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; or contains an &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, in which case it will be parsed as a switch or variable definition, respectively). Even targets not in the makefile may be specified, if <CODE>make</CODE> can find implicit rules that say how to make them. </FONT>
<P><A name=index-MAKECMDGOALS-686></A><FONT class=extract><CODE>Make</CODE> will set the special variable <CODE>MAKECMDGOALS</CODE> to the list of goals you specified on the command line. If no goals were given on the command line, this variable is empty. Note that this variable should be used only in special circumstances. </FONT>
<P><FONT class=extract>An example of appropriate use is to avoid including <SAMP><SPAN class=file>.d</SPAN></SAMP> files during <CODE>clean</CODE> rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites"><FONT class=extract>Automatic Prerequisites</FONT></A><FONT class=extract>), so <CODE>make</CODE> won't create them only to immediately remove them again: </FONT><PRE class=example><FONT class=extract>     sources = foo.c bar.c
     
     ifneq ($(MAKECMDGOALS),clean)
     include $(sources:.c=.d)
     endif
</FONT></PRE>
<P><FONT class=extract>One use of specifying a goal is if you want to compile only a part of the program, or only one of several programs. Specify as a goal each file that you wish to remake. For example, consider a directory containing several programs, with a makefile that starts like this: </FONT><PRE class=example><FONT class=extract>     .PHONY: all
     all: size nm ld ar as
</FONT></PRE>
<P><FONT class=extract>If you are working on the program <CODE>size</CODE>, you might want to say &#8216;<SAMP><SPAN class=samp>make&nbsp;size</SPAN></SAMP>&#8217;<!-- /@w --> so that only the files of that program are recompiled. </FONT>
<P><FONT class=extract>Another use of specifying a goal is to make files that are not normally made. For example, there may be a file of debugging output, or a version of the program that is compiled specially for testing, which has a rule in the makefile but is not a prerequisite of the default goal. </FONT>
<P><FONT class=extract>Another use of specifying a goal is to run the recipe associated with a phony target (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>) or empty target (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Targets"><FONT class=extract>Empty Target Files to Record Events</FONT></A><FONT class=extract>). Many makefiles contain a phony target named <SAMP><SPAN class=file>clean</SPAN></SAMP> which deletes everything except source files. Naturally, this is done only if you request it explicitly with &#8216;<SAMP><SPAN class=samp>make&nbsp;clean</SPAN></SAMP>&#8217;<!-- /@w -->. Following is a list of typical phony and empty target names. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Standard-Targets"><FONT class=extract>Standard Targets</FONT></A><FONT class=extract>, for a detailed list of all the standard target names which GNU software packages use. </FONT>
<DL>
<DT><FONT class=extract><SAMP><SPAN class=file>all</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007ball_007d-_0040r_007b_0028standard-target_0029_007d-687></A><FONT class=extract>Make all the top-level targets the makefile knows about. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>clean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bclean_007d-_0040r_007b_0028standard-target_0029_007d-688></A><FONT class=extract>Delete all files that are normally created by running <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>mostlyclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bmostlyclean_007d-_0040r_007b_0028standard-target_0029_007d-689></A><FONT class=extract>Like &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217;, but may refrain from deleting a few files that people normally don't want to recompile. For example, the &#8216;<SAMP><SPAN class=samp>mostlyclean</SPAN></SAMP>&#8217; target for GCC does not delete <SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>, because recompiling it is rarely necessary and takes a lot of time. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>distclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bdistclean_007d-_0040r_007b_0028standard-target_0029_007d-690><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>realclean</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007brealclean_007d-_0040r_007b_0028standard-target_0029_007d-691><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>clobber</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bclobber_007d-_0040r_007b_0028standard-target_0029_007d-692></A><FONT class=extract>Any of these targets might be defined to delete <EM>more</EM> files than &#8216;<SAMP><SPAN class=samp>clean</SPAN></SAMP>&#8217; does. For example, this would delete configuration files or links that you would normally create as preparation for compilation, even if the makefile itself cannot create these files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>install</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007binstall_007d-_0040r_007b_0028standard-target_0029_007d-693></A><FONT class=extract>Copy the executable file into a directory that users typically search for commands; copy any auxiliary files that the executable uses into the directories where it will look for them. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>print</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bprint_007d-_0040r_007b_0028standard-target_0029_007d-694></A><FONT class=extract>Print listings of the source files that have changed. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>tar</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007btar_007d-_0040r_007b_0028standard-target_0029_007d-695></A><FONT class=extract>Create a tar file of the source files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>shar</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bshar_007d-_0040r_007b_0028standard-target_0029_007d-696></A><FONT class=extract>Create a shell archive (shar file) of the source files. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>dist</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bdist_007d-_0040r_007b_0028standard-target_0029_007d-697></A><FONT class=extract>Create a distribution file of the source files. This might be a tar file, or a shar file, or a compressed version of one of the above, or even more than one of the above. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>TAGS</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bTAGS_007d-_0040r_007b_0028standard-target_0029_007d-698></A><FONT class=extract>Update a tags table for this program. <BR></FONT>
<DT><FONT class=extract><SAMP><SPAN class=file>check</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007bcheck_007d-_0040r_007b_0028standard-target_0029_007d-699><FONT class=extract></FONT></A>
<DT><FONT class=extract><SAMP><SPAN class=file>test</SPAN></SAMP> </FONT>
<DD><A name=index-g_t_0040code_007btest_007d-_0040r_007b_0028standard-target_0029_007d-700></A><FONT class=extract>Perform self tests on the program this makefile builds.</FONT> </DD></DL>
<DIV class=node><A name=Instead-of-Execution></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation" rel=next>Avoiding Compilation</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Goals" rel=previous>Goals</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.3 Instead of Executing Recipes</FONT></H3>
<P><A name=index-execution_002c-instead-of-701></A><A name=index-recipes_002c-instead-of-executing-702></A><FONT class=extract>The makefile tells <CODE>make</CODE> how to tell whether a target is up to date, and how to update each target. But updating the targets is not always what you want. Certain options specify other activities for <CODE>make</CODE>. <!-- Extra blank lines make it print better. --></FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--dry-run</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--recon</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djust_002dprint_007d-703></A><A name=index-g_t_0040code_007b_002d_002ddry_002drun_007d-704></A><A name=index-g_t_0040code_007b_002d_002drecon_007d-705></A><A name=index-g_t_0040code_007b_002dn_007d-706></A><FONT class=extract>&#8220;No-op&#8221;. Causes <CODE>make</CODE> to print the recipes that are needed to make the targets up to date, but not actually execute them. Note that some recipes are still executed, even with this flag (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>). Also any recipes needed to update included makefiles are still executed (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtouch_007d-707></A><A name=index-touching-files-708></A><A name=index-target_002c-touching-709></A><A name=index-g_t_0040code_007b_002dt_007d-710></A><FONT class=extract>&#8220;Touch&#8221;. Marks targets as up to date without actually changing them. In other words, <CODE>make</CODE> pretends to update the targets but does not really change their contents; instead only their modified times are updated. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquestion_007d-711></A><A name=index-g_t_0040code_007b_002dq_007d-712></A><A name=index-question-mode-713></A><FONT class=extract>&#8220;Question&#8221;. Silently check whether the targets are up to date, but do not execute recipes; the exit code shows whether any updates are needed. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-W </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--what-if=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-new=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--new-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwhat_002dif_007d-714></A><A name=index-g_t_0040code_007b_002dW_007d-715></A><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d-716></A><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d-717></A><A name=index-what-if-718></A><A name=index-files_002c-assuming-new-719></A><FONT class=extract>&#8220;What if&#8221;. Each &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag is followed by a file name. The given files' modification times are recorded by <CODE>make</CODE> as being the present time, although the actual modification times remain the same. You can use the &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag in conjunction with the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag to see what would happen if you were to modify specific files. </FONT></DD></DL>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> prints the recipe that it would normally execute but usually does not execute it. </FONT>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> ignores the recipes in the rules and uses (in effect) the command <CODE>touch</CODE> for each target that needs to be remade. The <CODE>touch</CODE> command is also printed, unless &#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; or <CODE>.SILENT</CODE> is used. For speed, <CODE>make</CODE> does not actually invoke the program <CODE>touch</CODE>. It does the work directly. </FONT>
<P><FONT class=extract>With the &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, <CODE>make</CODE> prints nothing and executes no recipes, but the exit status code it returns is zero if and only if the targets to be considered are already up to date. If the exit status is one, then some updating needs to be done. If <CODE>make</CODE> encounters an error, the exit status is two, so you can distinguish an error from a target that is not up to date. </FONT>
<P><FONT class=extract>It is an error to use more than one of these three flags in the same invocation of <CODE>make</CODE>. </FONT>
<P><A name=index-g_t_002b_002c-and-recipe-execution-720></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; options do not affect recipe lines that begin with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; characters or contain the strings &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217;. Note that only the line containing the &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; character or the strings &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217; is run regardless of these options. Other lines in the same rule are not run unless they too begin with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; or contain &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217; (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>.) </FONT>
<P><A name=index-phony-targets-and-recipe-execution-721></A><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag prevents phony targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Phony-Targets"><FONT class=extract>Phony Targets</FONT></A><FONT class=extract>) from being updated, unless there are recipe lines beginning with &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; or containing &#8216;<SAMP><SPAN class=samp>$(MAKE)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>${MAKE}</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag provides two features: </FONT>
<UL>
<LI><FONT class=extract>If you also use the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, you can see what <CODE>make</CODE> would do if you were to modify some files. </FONT>
<LI><FONT class=extract>Without the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; flag, when <CODE>make</CODE> is actually executing recipes, the &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217; flag can direct <CODE>make</CODE> to act as if some files had been modified, without actually running the recipes for those files. </FONT></LI></UL>
<P><FONT class=extract>Note that the options &#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; allow you to obtain other information about <CODE>make</CODE> or about the makefiles in use (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>).</FONT> 
<DIV class=node><A name=Avoiding-Compilation></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Overriding" rel=next>Overriding</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution" rel=previous>Instead of Execution</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.4 Avoiding Recompilation of Some Files</FONT></H3>
<P><A name=index-g_t_0040code_007b_002do_007d-722></A><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d-723></A><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d-724></A><A name=index-files_002c-assuming-old-725></A><A name=index-files_002c-avoiding-recompilation-of-726></A><A name=index-recompilation_002c-avoiding-727></A><FONT class=extract>Sometimes you may have changed a source file but you do not want to recompile all the files that depend on it. For example, suppose you add a macro or a declaration to a header file that many other files depend on. Being conservative, <CODE>make</CODE> assumes that any change in the header file requires recompilation of all dependent files, but you know that they do not need to be recompiled and you would rather not waste the time waiting for them to compile. </FONT>
<P><FONT class=extract>If you anticipate the problem before changing the header file, you can use the &#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; flag. This flag tells <CODE>make</CODE> not to run the recipes in the rules, but rather to mark the target up to date by changing its last-modification date. You would follow this procedure: </FONT>
<OL type=1>
<LI><FONT class=extract>Use the command &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; to recompile the source files that really need recompilation, ensuring that the object files are up-to-date before you begin. </FONT>
<LI><FONT class=extract>Make the changes in the header files. </FONT>
<LI><FONT class=extract>Use the command &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217; to mark all the object files as up to date. The next time you run <CODE>make</CODE>, the changes in the header files will not cause any recompilation. </FONT></LI></OL>
<P><FONT class=extract>If you have already changed the header file at a time when some files do need recompilation, it is too late to do this. Instead, you can use the &#8216;<SAMP><SPAN class=samp>-o&nbsp;</SPAN><VAR>file</VAR></SAMP>&#8217;<!-- /@w --> flag, which marks a specified file as &#8220;old&#8221; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). This means that the file itself will not be remade, and nothing else will be remade on its account. Follow this procedure: </FONT>
<OL type=1>
<LI><FONT class=extract>Recompile the source files that need compilation for reasons independent of the particular header file, with &#8216;<SAMP><SPAN class=samp>make -o </SPAN><VAR>headerfile</VAR></SAMP>&#8217;. If several header files are involved, use a separate &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; option for each header file. </FONT>
<LI><FONT class=extract>Touch all the object files with &#8216;<SAMP><SPAN class=samp>make -t</SPAN></SAMP>&#8217;.</FONT> </LI></OL>
<DIV class=node><A name=Overriding></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Testing" rel=next>Testing</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation" rel=previous>Avoiding Compilation</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.5 Overriding Variables</FONT></H3>
<P><A name=index-overriding-variables-with-arguments-728></A><A name=index-variables_002c-overriding-with-arguments-729></A><A name=index-command-line-variables-730></A><A name=index-variables_002c-command-line-731></A><FONT class=extract>An argument that contains &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; specifies the value of a variable: &#8216;<SAMP><VAR>v</VAR><SPAN class=samp>=</SPAN><VAR>x</VAR></SAMP>&#8217; sets the value of the variable <VAR>v</VAR> to <VAR>x</VAR>. If you specify a value in this way, all ordinary assignments of the same variable in the makefile are ignored; we say they have been <DFN>overridden</DFN> by the command line argument. </FONT>
<P><FONT class=extract>The most common way to use this facility is to pass extra flags to compilers. For example, in a properly written makefile, the variable <CODE>CFLAGS</CODE> is included in each recipe that runs the C compiler, so a file <SAMP><SPAN class=file>foo.c</SPAN></SAMP> would be compiled something like this: </FONT><PRE class=example><FONT class=extract>     cc -c $(CFLAGS) foo.c
</FONT></PRE>
<P><FONT class=extract>Thus, whatever value you set for <CODE>CFLAGS</CODE> affects each compilation that occurs. The makefile probably specifies the usual value for <CODE>CFLAGS</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     CFLAGS=-g
</FONT></PRE>
<P><FONT class=extract>Each time you run <CODE>make</CODE>, you can override this value if you wish. For example, if you say &#8216;<SAMP><SPAN class=samp>make CFLAGS='-g -O'</SPAN></SAMP>&#8217;, each C compilation will be done with &#8216;<SAMP><SPAN class=samp>cc -c -g -O</SPAN></SAMP>&#8217;. (This also illustrates how you can use quoting in the shell to enclose spaces and other special characters in the value of a variable when you override it.) </FONT>
<P><FONT class=extract>The variable <CODE>CFLAGS</CODE> is only one of many standard variables that exist just so that you can change them this way. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>, for a complete list. </FONT>
<P><FONT class=extract>You can also program the makefile to look at additional variables of your own, giving the user the ability to control other aspects of how the makefile works by changing the variables. </FONT>
<P><FONT class=extract>When you override a variable with a command line argument, you can define either a recursively-expanded variable or a simply-expanded variable. The examples shown above make a recursively-expanded variable; to make a simply-expanded variable, write &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;. But, unless you want to include a variable reference or function call in the <EM>value</EM> that you specify, it makes no difference which kind of variable you create. </FONT>
<P><FONT class=extract>There is one way that the makefile can change a variable that you have overridden. This is to use the <CODE>override</CODE> directive, which is a line that looks like this: &#8216;<SAMP><SPAN class=samp>override </SPAN><VAR>variable</VAR><SPAN class=samp> = </SPAN><VAR>value</VAR></SAMP>&#8217; (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>).</FONT> 
<DIV class=node><A name=Testing></A>
<P>
<HR>
Next:&nbsp;<A accessKey=n href="https://www.gnu.org/software/make/manual/make.html#Options-Summary" rel=next>Options Summary</A>, Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Overriding" rel=previous>Overriding</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.6 Testing the Compilation of a Program</FONT></H3>
<P><A name=index-testing-compilation-732></A><A name=index-compilation_002c-testing-733></A><FONT class=extract>Normally, when an error happens in executing a shell command, <CODE>make</CODE> gives up immediately, returning a nonzero status. No further recipes are executed for any target. The error implies that the goal cannot be correctly remade, and <CODE>make</CODE> reports this as soon as it knows. </FONT>
<P><FONT class=extract>When you are compiling a program that you have just changed, this is not what you want. Instead, you would rather that <CODE>make</CODE> try compiling every file that can be tried, to show you as many compilation errors as possible. </FONT>
<P><A name=index-g_t_0040code_007b_002dk_007d-734></A><A name=index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-735></A><FONT class=extract>On these occasions, you should use the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; flag. This tells <CODE>make</CODE> to continue to consider the other prerequisites of the pending targets, remaking them if necessary, before it gives up and returns nonzero status. For example, after an error in compiling one object file, &#8216;<SAMP><SPAN class=samp>make -k</SPAN></SAMP>&#8217; will continue compiling other object files even though it already knows that linking them will be impossible. In addition to continuing after failed shell commands, &#8216;<SAMP><SPAN class=samp>make -k</SPAN></SAMP>&#8217; will continue as much as possible after discovering that it does not know how to make a target or prerequisite file. This will always cause an error message, but without &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217;, it is a fatal error (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>The usual behavior of <CODE>make</CODE> assumes that your purpose is to get the goals up to date; once <CODE>make</CODE> learns that this is impossible, it might as well report the failure immediately. The &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag says that the real purpose is to test as much as possible of the changes made in the program, perhaps to find several independent problems so that you can correct them all before the next attempt to compile. This is why Emacs' <KBD>M-x compile</KBD> command passes the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; flag by default.</FONT> 
<DIV class=node><A name=Options-Summary></A>
<P>
<HR>
Previous:&nbsp;<A accessKey=p href="https://www.gnu.org/software/make/manual/make.html#Testing" rel=previous>Testing</A>, Up:&nbsp;<A accessKey=u href="https://www.gnu.org/software/make/manual/make.html#Running" rel=up>Running</A> </DIV>
<H3 class=section><FONT class=extract>9.7 Summary of Options</FONT></H3>
<P><A name=index-options-736></A><A name=index-flags-737></A><A name=index-switches-738></A><FONT class=extract>Here is a table of all the options <CODE>make</CODE> understands: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-b</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002db_007d-739><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dm_007d-740></A><FONT class=extract>These options are ignored for compatibility with other versions of <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-B</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dB_007d-741><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--always-make</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dalways_002dmake_007d-742></A><FONT class=extract>Consider all targets out-of-date. GNU <CODE>make</CODE> proceeds to consider targets and their prerequisites using the normal algorithms; however, all targets so considered are always remade regardless of the status of their prerequisites. To avoid infinite recursion, if <CODE>MAKE_RESTARTS</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Other Special Variables</FONT></A><FONT class=extract>) is set to a number greater than 0 this option is disabled when considering whether to remake makefiles (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-C </SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dC_007d-743><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--directory=</SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddirectory_007d-744></A><FONT class=extract>Change to directory <VAR>dir</VAR> before reading the makefiles. If multiple &#8216;<SAMP><SPAN class=samp>-C</SPAN></SAMP>&#8217; options are specified, each is interpreted relative to the previous one: &#8216;<SAMP><SPAN class=samp>-C / -C etc</SPAN></SAMP>&#8217; is equivalent to &#8216;<SAMP><SPAN class=samp>-C /etc</SPAN></SAMP>&#8217;. This is typically used with recursive invocations of <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-d</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dd_007d-745></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print debugging information in addition to normal processing. The debugging information says which files are being considered for remaking, which file-times are being compared and with what results, which files actually need to be remade, which implicit rules are considered and which are applied&#8212;everything interesting about how <CODE>make</CODE> decides what to do. The <CODE>-d</CODE> option is equivalent to &#8216;<SAMP><SPAN class=samp>--debug=a</SPAN></SAMP>&#8217; (see below). <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--debug[=</SPAN><VAR>options</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddebug_007d-746></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print debugging information in addition to normal processing. Various levels and types of output can be chosen. With no arguments, print the &#8220;basic&#8221; level of debugging. Possible arguments are below; only the first character is considered, and values must be comma- or space-separated. </FONT>
<DL>
<DT><FONT class=extract><CODE>a (</CODE><I>all</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>All types of debugging output are enabled. This is equivalent to using &#8216;<SAMP><SPAN class=samp>-d</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract><CODE>b (</CODE><I>basic</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Basic debugging prints each target that was found to be out-of-date, and whether the build was successful or not. <BR></FONT>
<DT><FONT class=extract><CODE>v (</CODE><I>verbose</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>A level above &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217;; includes messages about which makefiles were parsed, prerequisites that did not need to be rebuilt, etc. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>i (</CODE><I>implicit</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Prints messages describing the implicit rule searches for each target. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>j (</CODE><I>jobs</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Prints messages giving details on the invocation of specific sub-commands. <BR></FONT>
<DT><FONT class=extract><CODE>m (</CODE><I>makefile</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>By default, the above messages are not enabled while trying to remake the makefiles. This option enables messages while rebuilding makefiles, too. Note that the &#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217; option does enable this option. This option also enables &#8216;<SAMP><SPAN class=samp>basic</SPAN></SAMP>&#8217; messages. <BR></FONT>
<DT><FONT class=extract><CODE>n (</CODE><I>none</I><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Disable all debugging currently enabled. If additional debugging flags are encountered after this they will still take effect. </FONT></DD></DL><BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002de_007d-747><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--environment-overrides</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002denvironment_002doverrides_007d-748></A><FONT class=extract>Give variables taken from the environment precedence over variables from makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Environment"><FONT class=extract>Variables from the Environment</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--eval=</SPAN><VAR>string</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002deval_007d-749></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Evaluate <VAR>string</VAR> as makefile syntax. This is a command-line version of the <CODE>eval</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function"><FONT class=extract>Eval Function</FONT></A><FONT class=extract>). The evaluation is performed after the default rules and variables have been defined, but before any makefiles are read. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-f </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002df_007d-750><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dfile_007d-751><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--makefile=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dmakefile_007d-752></A><FONT class=extract>Read the file named <VAR>file</VAR> as a makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-h</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dh_007d-753><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--help</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dhelp_007d-754></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Remind you of the options that <CODE>make</CODE> understands and then exit. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-i</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002di_007d-755><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--ignore-errors</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dignore_002derrors_007d-756></A><FONT class=extract>Ignore all errors in recipes executed to remake files. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-I </SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dI_007d-757><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--include-dir=</SPAN><VAR>dir</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-758></A><FONT class=extract>Specifies a directory <VAR>dir</VAR> to search for included makefiles. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>. If several &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; options are used to specify several directories, the directories are searched in the order specified. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-j [</SPAN><VAR>jobs</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dj_007d-759><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--jobs[=</SPAN><VAR>jobs</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djobs_007d-760></A><FONT class=extract>Specifies the number of recipes (jobs) to run simultaneously. With no argument, <CODE>make</CODE> runs as many recipes simultaneously as possible. If there is more than one &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option, the last one is effective. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>, for more information on how recipes are run. Note that this option is ignored on MS-DOS. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dk_007d-761><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dkeep_002dgoing_007d-762></A><FONT class=extract>Continue as much as possible after an error. While the target that failed, and those that depend on it, cannot be remade, the other prerequisites of these targets can be processed all the same. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Testing"><FONT class=extract>Testing the Compilation of a Program</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-l [</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dl_007d-763><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--load-average[=</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dload_002daverage_007d-764><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--max-load[=</SPAN><VAR>load</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dmax_002dload_007d-765></A><FONT class=extract>Specifies that no new recipes should be started if there are other recipes running and the load average is at least <VAR>load</VAR> (a floating-point number). With no argument, removes a previous load limit. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-L</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dL_007d-766><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--check-symlink-times</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dcheck_002dsymlink_002dtimes_007d-767></A><FONT class=extract>On systems that support symbolic links, this option causes <CODE>make</CODE> to consider the timestamps on any symbolic links in addition to the timestamp on the file referenced by those links. When this option is provided, the most recent timestamp among the file and the symbolic links is taken as the modification time for this target file. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dn_007d-768><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--just-print</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002djust_002dprint_007d-769><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--dry-run</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002ddry_002drun_007d-770><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--recon</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002drecon_007d-771></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Print the recipe that would be executed, but do not execute it (except in certain circumstances). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-o </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002do_007d-772><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--old-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dold_002dfile_007d-773><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-old=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dassume_002dold_007d-774></A><FONT class=extract>Do not remake the file <VAR>file</VAR> even if it is older than its prerequisites, and do not remake anything on account of changes in <VAR>file</VAR>. Essentially the file is treated as very old and its rules are ignored. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Avoiding-Compilation"><FONT class=extract>Avoiding Recompilation of Some Files</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-O[</SPAN><VAR>type</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dO_007d-775><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--output-sync[=</SPAN><VAR>type</VAR><SPAN class=samp>]</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002doutput_002dsync_007d-776></A><A name=index-output-during-parallel-execution-777></A><A name=index-parallel-execution_002c-output-during-778></A><FONT class=extract>Ensure that the complete output from each recipe is printed in one uninterrupted sequence. This option is only useful when using the <CODE>--jobs</CODE> option to run multiple recipes simultaneously (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel"><FONT class=extract>Parallel Execution</FONT></A><FONT class=extract>) Without this option output will be displayed as it is generated by the recipes. </FONT>
<P><FONT class=extract>With no type or the type &#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217;, output from the entire recipe of each target is grouped together. With the type &#8216;<SAMP><SPAN class=samp>line</SPAN></SAMP>&#8217;, output from each line in the recipe is grouped together. With the type &#8216;<SAMP><SPAN class=samp>recurse</SPAN></SAMP>&#8217;, the output from an entire recursive make is grouped together. With the type &#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;, no output synchronization is performed. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output"><FONT class=extract>Output During Parallel Execution</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dp_007d-779><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--print-data-base</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dprint_002ddata_002dbase_007d-780></A><A name=index-data-base-of-_0040code_007bmake_007d-rules-781></A><A name=index-predefined-rules-and-variables_002c-printing-782></A><FONT class=extract>Print the data base (rules and variable values) that results from reading the makefiles; then execute as usual or as otherwise specified. This also prints the version information given by the &#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; switch (see below). To print the data base without trying to remake any files, use &#8216;<SAMP><SPAN class=samp>make&nbsp;-qp</SPAN></SAMP>&#8217;<!-- /@w -->. To print the data base of predefined rules and variables, use &#8216;<SAMP><SPAN class=samp>make&nbsp;-p&nbsp;-f&nbsp;/dev/null</SPAN></SAMP>&#8217;<!-- /@w -->. The data base output contains file name and line number information for recipe and variable definitions, so it can be a useful debugging tool in complex environments. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-q</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dq_007d-783><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--question</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquestion_007d-784></A><FONT class=extract>&#8220;Question mode&#8221;. Do not run any recipes, or print anything; just return an exit status that is zero if the specified targets are already up to date, one if any remaking is required, or two if an error is encountered. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dr_007d-785><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-builtin-rules</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dbuiltin_002drules_007d-786></A><FONT class=extract>Eliminate use of the built-in implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Using Implicit Rules</FONT></A><FONT class=extract>). You can still define your own by writing pattern rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules"><FONT class=extract>Defining and Redefining Pattern Rules</FONT></A><FONT class=extract>). The &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option also clears out the default list of suffixes for suffix rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>). But you can still define your own suffixes with a rule for <CODE>.SUFFIXES</CODE>, and then define your own suffix rules. Note that only <EM>rules</EM> are affected by the <CODE>-r</CODE> option; default variables remain in effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>); see the &#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; option below. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dR_007d-787><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-builtin-variables</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dbuiltin_002dvariables_007d-788></A><FONT class=extract>Eliminate use of the built-in rule-specific variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>). You can still define your own, of course. The &#8216;<SAMP><SPAN class=samp>-R</SPAN></SAMP>&#8217; option also automatically enables the &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option (see above), since it doesn't make sense to have implicit rules without any definitions for the variables that they use. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-s</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002ds_007d-789><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--silent</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dsilent_007d-790><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--quiet</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dquiet_007d-791></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Silent operation; do not print the recipes as they are executed. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Echoing"><FONT class=extract>Recipe Echoing</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-S</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dS_007d-792><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-keep-going</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dkeep_002dgoing_007d-793><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--stop</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dstop_007d-794></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Cancel the effect of the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; option. This is never necessary except in a recursive <CODE>make</CODE> where &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; might be inherited from the top-level <CODE>make</CODE> via <CODE>MAKEFLAGS</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>) or if you set &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; in <CODE>MAKEFLAGS</CODE> in your environment. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-t</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dt_007d-795><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--touch</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtouch_007d-796></A><!-- Extra blank line here makes the table look better. -->
<P><FONT class=extract>Touch files (mark them up to date without really changing them) instead of running their recipes. This is used to pretend that the recipes were done, in order to fool future invocations of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--trace</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dtrace_007d-797></A><FONT class=extract>Show tracing information for <CODE>make</CODE> execution. Prints the entire recipe to be executed, even for recipes that are normally silent (due to <CODE>.SILENT</CODE> or &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;). Also prints the makefile name and line number where the recipe was defined, and information on why the target is being rebuilt. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-v</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dv_007d-798><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--version</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dversion_007d-799></A><FONT class=extract>Print the version of the <CODE>make</CODE> program plus a copyright, a list of authors, and a notice that there is no warranty; then exit. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-w</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dw_007d-800><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dprint_002ddirectory_007d-801></A><FONT class=extract>Print a message containing the working directory both before and after executing the makefile. This may be useful for tracking down errors from complicated nests of recursive <CODE>make</CODE> commands. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>. (In practice, you rarely need to specify this option since &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217; does it for you; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></A><FONT class=extract>.) <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--no-print-directory</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dno_002dprint_002ddirectory_007d-802></A><FONT class=extract>Disable printing of the working directory under <CODE>-w</CODE>. This option is useful when <CODE>-w</CODE> is turned on automatically, but you do not want to see the extra messages. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#g_t_002dw-Option"><FONT class=extract>The &#8216;<SAMP><SPAN class=samp>--print-directory</SPAN></SAMP>&#8217; Option</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>-W </SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002dW_007d-803><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--what-if=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwhat_002dif_007d-804><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--new-file=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dnew_002dfile_007d-805><FONT class=extract></FONT></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--assume-new=</SPAN><VAR>file</VAR></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dassume_002dnew_007d-806></A><FONT class=extract>Pretend that the target <VAR>file</VAR> has just been modified. When used with the &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217; flag, this shows you what would happen if you were to modify that file. Without &#8216;<SAMP><SPAN class=samp>-n</SPAN></SAMP>&#8217;, it is almost the same as running a <CODE>touch</CODE> command on the given file before running <CODE>make</CODE>, except that the modification time is changed only in the imagination of <CODE>make</CODE>. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Instead-of-Execution"><FONT class=extract>Instead of Executing Recipes</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>--warn-undefined-variables</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0040code_007b_002d_002dwarn_002dundefined_002dvariables_007d-807></A><A name=index-variables_002c-warning-for-undefined-808></A><A name=index-undefined-variables_002c-warning-message-809></A><FONT class=extract>Issue a warning message whenever <CODE>make</CODE> sees a reference to an undefined variable. This can be helpful when you are trying to debug makefiles which use variables in complex ways. </FONT></DD></DL>