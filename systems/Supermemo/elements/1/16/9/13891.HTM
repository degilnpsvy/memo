<H3 class=section>15.1 General Conventions for Makefiles</H3>
<P>Every Makefile should contain this line: <PRE class=example>     SHELL = /bin/sh
</PRE>
<P class=noindent>to avoid trouble on systems where the <CODE>SHELL</CODE> variable might be inherited from the environment. (This is never a problem with GNU <CODE>make</CODE>.) 
<P><FONT class=extract>Different <CODE>make</CODE> programs have incompatible suffix lists and implicit rules, and this sometimes creates confusion or misbehavior. So it is a good idea to set the suffix list explicitly using only the suffixes you need in the particular Makefile, like this: </FONT><PRE class=example><FONT class=extract>     .SUFFIXES:
     .SUFFIXES: .c .o
</FONT></PRE>
<P class=noindent><FONT class=extract>The first line clears out the suffix list, the second introduces all suffixes which may be subject to implicit rules in this Makefile. </FONT>
<P><FONT class=extract>Don't assume that <SAMP><SPAN class=file>.</SPAN></SAMP> is in the path for command execution. When you need to run programs that are a part of your package during the make, please make sure that it uses <SAMP><SPAN class=file>./</SPAN></SAMP> if the program is built as part of the make or <SAMP><SPAN class=file>$(srcdir)/</SPAN></SAMP> if the file is an unchanging part of the source code. Without one of these prefixes, the current search path is used.</FONT> 
<P><FONT class=extract>The distinction between <SAMP><SPAN class=file>./</SPAN></SAMP> (the <DFN>build directory</DFN>) and <SAMP><SPAN class=file>$(srcdir)/</SPAN></SAMP> (the <DFN>source directory</DFN>) is important because users can build in a separate directory using the &#8216;<SAMP><SPAN class=samp>--srcdir</SPAN></SAMP>&#8217; option to <SAMP><SPAN class=file>configure</SPAN></SAMP>. A rule of the form: </FONT><PRE class=smallexample><FONT class=extract>     foo.1 : foo.man sedscript
             sed -f sedscript foo.man &gt; foo.1
</FONT></PRE>
<P class=noindent><FONT class=extract>will fail when the build directory is not the source directory, because <SAMP><SPAN class=file>foo.man</SPAN></SAMP> and <SAMP><SPAN class=file>sedscript</SPAN></SAMP> are in the source directory.</FONT> 
<P>When using GNU <CODE>make</CODE>, relying on &#8216;<SAMP><SPAN class=samp>VPATH</SPAN></SAMP>&#8217; to find the source file will work in the case where there is a single dependency file, since the <CODE>make</CODE> automatic variable &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; will represent the source file wherever it is. (Many versions of <CODE>make</CODE> set &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; only in implicit rules.) A Makefile target like <PRE class=smallexample>     foo.o : bar.c
             $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</PRE>
<P class=noindent>should instead be written as <PRE class=smallexample>     foo.o : bar.c
             $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</PRE>
<P class=noindent><FONT class=extract>in order to allow &#8216;<SAMP><SPAN class=samp>VPATH</SPAN></SAMP>&#8217; to work correctly. When the target has multiple dependencies, using an explicit &#8216;<SAMP><SPAN class=samp>$(srcdir)</SPAN></SAMP>&#8217; is the easiest way to make the rule work well. For example, the target above for <SAMP><SPAN class=file>foo.1</SPAN></SAMP> is best written as: </FONT><PRE class=smallexample><FONT class=extract>     foo.1 : foo.man sedscript
             sed -f $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</FONT></PRE>
<P><FONT class=extract>GNU distributions usually contain some files which are not source files&#8212;for example, Info files, and the output from Autoconf, Automake, Bison or Flex. Since these files normally appear in the source directory, they should always appear in the source directory, not in the build directory. So Makefile rules to update them should put the updated files in the source directory. </FONT>
<P><FONT class=extract>However, if a file does not appear in the distribution, then the Makefile should not put it in the source directory, because building a program in ordinary circumstances should not modify the source directory in any way.</FONT> 
<P><FONT class=extract>Try to make the build and installation targets, at least (and all their subtargets) work correctly with a parallel <CODE>make</CODE>.</FONT>