<H3 class=section>15.5 Variables for Installation Directories</H3>
<P>Installation directories should always be named by variables, so it is easy to install in a nonstandard place. The standard names for these variables and the values they should have in GNU packages are described below. They are based on a standard file system layout; variants of it are used in GNU/Linux and other modern operating systems. 
<P>Installers are expected to override these values when calling <SAMP><SPAN class=command>make</SPAN></SAMP> (e.g., <KBD>make prefix=/usr install</KBD> or <SAMP><SPAN class=command>configure</SPAN></SAMP> (e.g., <KBD>configure --prefix=/usr</KBD>). GNU packages should not try to guess which value should be appropriate for these variables on the system they are being installed onto: use the default settings specified here so that all GNU packages behave identically, allowing the installer to achieve any desired layout. 
<P><A name=index-directories_002c-creating-installation-1091></A><A name=index-installation-directories_002c-creating-1092></A>All installation directories, and their parent directories, should be created (if necessary) before they are installed into. 
<P>These first two variables set the root for the installation. All the other installation directories should be subdirectories of one of these two, and nothing should be directly installed into these two directories. 
<DL>
<DT><CODE>prefix</CODE> 
<DD><A name=index-prefix-1093></A>A prefix used in constructing the default values of the variables listed below. The default value of <CODE>prefix</CODE> should be <SAMP><SPAN class=file>/usr/local</SPAN></SAMP>. When building the complete GNU system, the prefix will be empty and <SAMP><SPAN class=file>/usr</SPAN></SAMP> will be a symbolic link to <SAMP><SPAN class=file>/</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@prefix@</SPAN></SAMP>&#8217;.) 
<P>Running &#8216;<SAMP><SPAN class=samp>make install</SPAN></SAMP>&#8217; with a different value of <CODE>prefix</CODE> from the one used to build the program should <EM>not</EM> recompile the program. <BR></P>
<DT><CODE>exec_prefix</CODE> 
<DD><A name=index-exec_005fprefix-1094></A>A prefix used in constructing the default values of some of the variables listed below. The default value of <CODE>exec_prefix</CODE> should be <CODE>$(prefix)</CODE>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@exec_prefix@</SPAN></SAMP>&#8217;.) 
<P>Generally, <CODE>$(exec_prefix)</CODE> is used for directories that contain machine-specific files (such as executables and subroutine libraries), while <CODE>$(prefix)</CODE> is used directly for other directories. 
<P>Running &#8216;<SAMP><SPAN class=samp>make install</SPAN></SAMP>&#8217; with a different value of <CODE>exec_prefix</CODE> from the one used to build the program should <EM>not</EM> recompile the program. </P></DD></DL>
<P>Executable programs are installed in one of the following directories. 
<DL>
<DT><CODE>bindir</CODE> 
<DD><A name=index-bindir-1095></A>The directory for installing executable programs that users can run. This should normally be <SAMP><SPAN class=file>/usr/local/bin</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/bin</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@bindir@</SPAN></SAMP>&#8217;.) <BR>
<DT><CODE>sbindir</CODE> 
<DD><A name=index-sbindir-1096></A>The directory for installing executable programs that can be run from the shell, but are only generally useful to system administrators. This should normally be <SAMP><SPAN class=file>/usr/local/sbin</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/sbin</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sbindir@</SPAN></SAMP>&#8217;.) <BR>
<DT><CODE>libexecdir</CODE> 
<DD><A name=index-libexecdir-1097></A><!-- This paragraph adjusted to avoid overfull hbox -roland 5jul94 -->The directory for installing executable programs to be run by other programs rather than by users. This directory should normally be <SAMP><SPAN class=file>/usr/local/libexec</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/libexec</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@libexecdir@</SPAN></SAMP>&#8217;.) 
<P>The definition of &#8216;<SAMP><SPAN class=samp>libexecdir</SPAN></SAMP>&#8217; is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under <SAMP><SPAN class=file>$(libexecdir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN></SAMP>, possibly within additional subdirectories thereof, such as <SAMP><SPAN class=file>$(libexecdir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN><VAR>machine</VAR><SPAN class=file>/</SPAN><VAR>version</VAR></SAMP>. </P></DD></DL>
<P>Data files used by the program during its execution are divided into categories in two ways. 
<UL>
<LI>Some files are normally modified by programs; others are never normally modified (though users may edit some of these). 
<LI>Some files are architecture-independent and can be shared by all machines at a site; some are architecture-dependent and can be shared only by machines of the same kind and operating system; others may never be shared between two machines. </LI></UL>
<P>This makes for six different possibilities. However, we want to discourage the use of architecture-dependent files, aside from object files and libraries. It is much cleaner to make other data files architecture-independent, and it is generally not hard. 
<P>Here are the variables Makefiles should use to specify directories to put these various kinds of files in: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>datarootdir</SPAN></SAMP>&#8217; 
<DD>The root of the directory tree for read-only architecture-independent data files. This should normally be <SAMP><SPAN class=file>/usr/local/share</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/share</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@datarootdir@</SPAN></SAMP>&#8217;.) &#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217;'s default value is based on this variable; so are &#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mandir</SPAN></SAMP>&#8217;, and others. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217; 
<DD>The directory for installing idiosyncratic read-only architecture-independent data files for this program. This is usually the same place as &#8216;<SAMP><SPAN class=samp>datarootdir</SPAN></SAMP>&#8217;, but we use the two separate variables so that you can move these program-specific files without altering the location for Info files, man pages, etc. <!-- raggedright  (not until next Texinfo release) -->
<P>This should normally be <SAMP><SPAN class=file>/usr/local/share</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(datarootdir)</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@datadir@</SPAN></SAMP>&#8217;.) <!-- end raggedright -->
<P>The definition of &#8216;<SAMP><SPAN class=samp>datadir</SPAN></SAMP>&#8217; is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under <SAMP><SPAN class=file>$(datadir)/</SPAN><VAR>package-name</VAR><SPAN class=file>/</SPAN></SAMP>. <BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>sysconfdir</SPAN></SAMP>&#8217; 
<DD>The directory for installing read-only data files that pertain to a single machine&#8211;that is to say, files for configuring a host. Mailer and network configuration files, <SAMP><SPAN class=file>/etc/passwd</SPAN></SAMP>, and so forth belong here. All the files in this directory should be ordinary ASCII text files. This directory should normally be <SAMP><SPAN class=file>/usr/local/etc</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/etc</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sysconfdir@</SPAN></SAMP>&#8217;.) 
<P>Do not install executables here in this directory (they probably belong in <SAMP><SPAN class=file>$(libexecdir)</SPAN></SAMP> or <SAMP><SPAN class=file>$(sbindir)</SPAN></SAMP>). Also do not install files that are modified in the normal course of their use (programs whose purpose is to change the configuration of the system excluded). Those probably belong in <SAMP><SPAN class=file>$(localstatedir)</SPAN></SAMP>. <BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>sharedstatedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing architecture-independent data files which the programs modify while they run. This should normally be <SAMP><SPAN class=file>/usr/local/com</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/com</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@sharedstatedir@</SPAN></SAMP>&#8217;.) <BR>
<DT>&#8216;<SAMP><SPAN class=samp>localstatedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing data files which the programs modify while they run, and that pertain to one specific machine. Users should never need to modify files in this directory to configure the package's operation; put such configuration information in separate files that go in <SAMP><SPAN class=file>$(datadir)</SPAN></SAMP> or <SAMP><SPAN class=file>$(sysconfdir)</SPAN></SAMP>. <SAMP><SPAN class=file>$(localstatedir)</SPAN></SAMP> should normally be <SAMP><SPAN class=file>/usr/local/var</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/var</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@localstatedir@</SPAN></SAMP>&#8217;.) <BR>
<DT>&#8216;<SAMP><SPAN class=samp>runstatedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing data files which the programs modify while they run, that pertain to one specific machine, and which need not persist longer than the execution of the program&#8212;which is generally long-lived, for example, until the next reboot. PID files for system daemons are a typical use. In addition, this directory should not be cleaned except perhaps at reboot, while the general <SAMP><SPAN class=file>/tmp</SPAN></SAMP> (<CODE>TMPDIR</CODE>) may be cleaned arbitrarily. This should normally be <SAMP><SPAN class=file>/var/run</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(localstatedir)/run</SPAN></SAMP>. Having it as a separate variable allows the use of <SAMP><SPAN class=file>/run</SPAN></SAMP> if desired, for example. (If you are using Autoconf 2.70 or later, write it as &#8216;<SAMP><SPAN class=samp>@runstatedir@</SPAN></SAMP>&#8217;.) </DD></DL>
<P>These variables specify the directory for installing certain specific types of files, if your program has them. Every GNU package should have Info files, so every program needs &#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217;, but not all need &#8216;<SAMP><SPAN class=samp>libdir</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>lispdir</SPAN></SAMP>&#8217;. 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>includedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing header files to be included by user programs with the C &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; preprocessor directive. This should normally be <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(prefix)/include</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@includedir@</SPAN></SAMP>&#8217;.) 
<P>Most compilers other than GCC do not look for header files in directory <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>. So installing the header files this way is only useful with GCC. Sometimes this is not a problem because some libraries are only really intended to work with GCC. But some libraries are intended to work with other compilers. They should install their header files in two places, one specified by <CODE>includedir</CODE> and one specified by <CODE>oldincludedir</CODE>. <BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>oldincludedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; header files for use with compilers other than GCC. This should normally be <SAMP><SPAN class=file>/usr/include</SPAN></SAMP>. (If you are using Autoconf, you can write it as &#8216;<SAMP><SPAN class=samp>@oldincludedir@</SPAN></SAMP>&#8217;.) 
<P>The Makefile commands should check whether the value of <CODE>oldincludedir</CODE> is empty. If it is, they should not try to use it; they should cancel the second installation of the header files. 
<P>A package should not replace an existing header in this directory unless the header came from the same package. Thus, if your Foo package provides a header file <SAMP><SPAN class=file>foo.h</SPAN></SAMP>, then it should install the header file in the <CODE>oldincludedir</CODE> directory if either (1) there is no <SAMP><SPAN class=file>foo.h</SPAN></SAMP> there or (2) the <SAMP><SPAN class=file>foo.h</SPAN></SAMP> that exists came from the Foo package. 
<P>To tell whether <SAMP><SPAN class=file>foo.h</SPAN></SAMP> came from the Foo package, put a magic string in the file&#8212;part of a comment&#8212;and <CODE>grep</CODE> for that string. <BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>docdir</SPAN></SAMP>&#8217; 
<DD>The directory for installing documentation files (other than Info) for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/doc/</SPAN><VAR>yourpkg</VAR></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/doc/</SPAN><VAR>yourpkg</VAR></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@docdir@</SPAN></SAMP>&#8217;.) The <VAR>yourpkg</VAR> subdirectory, which may include a version number, prevents collisions among files with common names, such as <SAMP><SPAN class=file>README</SPAN></SAMP>. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>infodir</SPAN></SAMP>&#8217; 
<DD>The directory for installing the Info files for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/info</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/info</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@infodir@</SPAN></SAMP>&#8217;.) <CODE>infodir</CODE> is separate from <CODE>docdir</CODE> for compatibility with existing practice. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>htmldir</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>dvidir</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>pdfdir</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>psdir</SPAN></SAMP>&#8217; 
<DD>Directories for installing documentation files in the particular format. They should all be set to <CODE>$(docdir)</CODE> by default. (If you are using Autoconf, write them as &#8216;<SAMP><SPAN class=samp>@htmldir@</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>@dvidir@</SPAN></SAMP>&#8217;, etc.) Packages which supply several translations of their documentation should install them in &#8216;<SAMP><SPAN class=samp>$(htmldir)/</SPAN></SAMP>&#8217;<VAR>ll</VAR>, &#8216;<SAMP><SPAN class=samp>$(pdfdir)/</SPAN></SAMP>&#8217;<VAR>ll</VAR>, etc. where <VAR>ll</VAR> is a locale abbreviation such as &#8216;<SAMP><SPAN class=samp>en</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>pt_BR</SPAN></SAMP>&#8217;. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>libdir</SPAN></SAMP>&#8217; 
<DD>The directory for object files and libraries of object code. Do not install executables here, they probably ought to go in <SAMP><SPAN class=file>$(libexecdir)</SPAN></SAMP> instead. The value of <CODE>libdir</CODE> should normally be <SAMP><SPAN class=file>/usr/local/lib</SPAN></SAMP>, but write it as <SAMP><SPAN class=file>$(exec_prefix)/lib</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@libdir@</SPAN></SAMP>&#8217;.) <BR>
<DT>&#8216;<SAMP><SPAN class=samp>lispdir</SPAN></SAMP>&#8217; 
<DD>The directory for installing any Emacs Lisp files in this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/emacs/site-lisp</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/emacs/site-lisp</SPAN></SAMP>. 
<P>If you are using Autoconf, write the default as &#8216;<SAMP><SPAN class=samp>@lispdir@</SPAN></SAMP>&#8217;. In order to make &#8216;<SAMP><SPAN class=samp>@lispdir@</SPAN></SAMP>&#8217; work, you need the following lines in your <SAMP><SPAN class=file>configure.ac</SPAN></SAMP> file: <PRE class=example>          lispdir='${datarootdir}/emacs/site-lisp'
          AC_SUBST(lispdir)
</PRE><BR>
<DT>&#8216;<SAMP><SPAN class=samp>localedir</SPAN></SAMP>&#8217; 
<DD>The directory for installing locale-specific message catalogs for this package. By default, it should be <SAMP><SPAN class=file>/usr/local/share/locale</SPAN></SAMP>, but it should be written as <SAMP><SPAN class=file>$(datarootdir)/locale</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@localedir@</SPAN></SAMP>&#8217;.) This directory usually has a subdirectory per locale. </DD></DL>
<P>Unix-style man pages are installed in one of the following: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>mandir</SPAN></SAMP>&#8217; 
<DD>The top-level directory for installing the man pages (if any) for this package. It will normally be <SAMP><SPAN class=file>/usr/local/share/man</SPAN></SAMP>, but you should write it as <SAMP><SPAN class=file>$(datarootdir)/man</SPAN></SAMP>. (If you are using Autoconf, write it as &#8216;<SAMP><SPAN class=samp>@mandir@</SPAN></SAMP>&#8217;.) <BR>
<DT>&#8216;<SAMP><SPAN class=samp>man1dir</SPAN></SAMP>&#8217; 
<DD>The directory for installing section 1 man pages. Write it as <SAMP><SPAN class=file>$(mandir)/man1</SPAN></SAMP>. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>man2dir</SPAN></SAMP>&#8217; 
<DD>The directory for installing section 2 man pages. Write it as <SAMP><SPAN class=file>$(mandir)/man2</SPAN></SAMP> <BR>
<DT>&#8216;<SAMP><SPAN class=samp>...</SPAN></SAMP>&#8217; 
<DD><STRONG>Don't make the primary documentation for any GNU software be a man page. Write a manual in Texinfo instead. Man pages are just for the sake of people running GNU software on Unix, which is a secondary application only.</STRONG> <BR>
<DT>&#8216;<SAMP><SPAN class=samp>manext</SPAN></SAMP>&#8217; 
<DD>The file name extension for the installed man page. This should contain a period followed by the appropriate digit; it should normally be &#8216;<SAMP><SPAN class=samp>.1</SPAN></SAMP>&#8217;. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>man1ext</SPAN></SAMP>&#8217; 
<DD>The file name extension for installed section 1 man pages. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>man2ext</SPAN></SAMP>&#8217; 
<DD>The file name extension for installed section 2 man pages. <BR>
<DT>&#8216;<SAMP><SPAN class=samp>...</SPAN></SAMP>&#8217; 
<DD>Use these names instead of &#8216;<SAMP><SPAN class=samp>manext</SPAN></SAMP>&#8217; if the package needs to install man pages in more than one section of the manual. </DD></DL>
<P>And finally, you should set the following variable: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>srcdir</SPAN></SAMP>&#8217; 
<DD>The directory for the sources being compiled. The value of this variable is normally inserted by the <CODE>configure</CODE> shell script. (If you are using Autoconf, use &#8216;<SAMP><SPAN class=samp>srcdir = @srcdir@</SPAN></SAMP>&#8217;.) </DD></DL>
<P>For example: <PRE class=smallexample>     <!-- I have changed some of the comments here slightly to fix an overfull -->
     <!-- hbox, so the make manual can format correctly. -roland -->
     # Common prefix for installation directories.
     # NOTE: This directory must exist when you start the install.
     prefix = /usr/local
     datarootdir = $(prefix)/share
     datadir = $(datarootdir)
     exec_prefix = $(prefix)
     # Where to put the executable for the command `gcc'.
     bindir = $(exec_prefix)/bin
     # Where to put the directories used by the compiler.
     libexecdir = $(exec_prefix)/libexec
     # Where to put the Info files.
     infodir = $(datarootdir)/info
</PRE>
<P>If your program installs a large number of files into one of the standard user-specified directories, it might be useful to group them into a subdirectory particular to that program. If you do this, you should write the <CODE>install</CODE> rule to create these subdirectories. 
<P>Do not expect the user to include the subdirectory name in the value of any of the variables listed above. The idea of having a uniform set of variable names for installation directories is to enable the user to specify the exact same values for several different GNU packages. In order for this to be useful, all the packages must be designed so that they will work sensibly when the user does so. 
<P>At times, not all of these variables may be implemented in the current release of Autoconf and/or Automake; but as of Autoconf&nbsp;2.60, we believe all of them are. When any are missing, the descriptions here serve as specifications for what Autoconf will implement. As a programmer, you can either use a development version of Autoconf or avoid using these variables until a stable release is made which supports them.