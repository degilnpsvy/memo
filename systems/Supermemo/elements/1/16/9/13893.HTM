<H3 class=section>15.3 Variables for Specifying Commands</H3>
<P>Makefiles should provide variables for overriding certain commands, options, and so on. 
<P>In particular, you should run most utility programs via variables. Thus, if you use Bison, have a variable named <CODE>BISON</CODE> whose default value is set with &#8216;<SAMP><SPAN class=samp>BISON = bison</SPAN></SAMP>&#8217;, and refer to it with <CODE>$(BISON)</CODE> whenever you need to use Bison. 
<P>File management utilities such as <CODE>ln</CODE>, <CODE>rm</CODE>, <CODE>mv</CODE>, and so on, need not be referred to through variables in this way, since users don't need to replace them with other programs. 
<P>Each program-name variable should come with an options variable that is used to supply options to the program. Append &#8216;<SAMP><SPAN class=samp>FLAGS</SPAN></SAMP>&#8217; to the program-name variable name to get the options variable name&#8212;for example, <CODE>BISONFLAGS</CODE>. (The names <CODE>CFLAGS</CODE> for the C compiler, <CODE>YFLAGS</CODE> for yacc, and <CODE>LFLAGS</CODE> for lex, are exceptions to this rule, but we keep them because they are standard.) Use <CODE>CPPFLAGS</CODE> in any compilation command that runs the preprocessor, and use <CODE>LDFLAGS</CODE> in any compilation command that does linking as well as in any direct use of <CODE>ld</CODE>. 
<P><FONT class=extract>If there are C compiler options that <EM>must</EM> be used for proper compilation of certain files, do not include them in <CODE>CFLAGS</CODE>. Users expect to be able to specify <CODE>CFLAGS</CODE> freely themselves. Instead, arrange to pass the necessary options to the C compiler independently of <CODE>CFLAGS</CODE>, by writing them explicitly in the compilation commands or by defining an implicit rule, like this: </FONT><PRE class=smallexample><FONT class=extract>     CFLAGS = -g
     ALL_CFLAGS = -I. $(CFLAGS)
     .c.o:
             $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&lt;
</FONT></PRE>
<P><FONT class=extract>Do include the &#8216;<SAMP><SPAN class=samp>-g</SPAN></SAMP>&#8217; option in <CODE>CFLAGS</CODE>, because that is not <EM>required</EM> for proper compilation. You can consider it a default that is only recommended. If the package is set up so that it is compiled with GCC by default, then you might as well include &#8216;<SAMP><SPAN class=samp>-O</SPAN></SAMP>&#8217; in the default value of <CODE>CFLAGS</CODE> as well. </FONT>
<P><FONT class=extract>Put <CODE>CFLAGS</CODE> last in the compilation command, after other variables containing compiler options, so the user can use <CODE>CFLAGS</CODE> to override the others. </FONT>
<P><FONT class=extract><CODE>CFLAGS</CODE> should be used in every invocation of the C compiler, both those which do compilation and those which do linking. </FONT>
<P><FONT class=extract>Every Makefile should define the variable <CODE>INSTALL</CODE>, which is the basic command for installing a file into the system. </FONT>
<P><FONT class=extract>Every Makefile should also define the variables <CODE>INSTALL_PROGRAM</CODE> and <CODE>INSTALL_DATA</CODE>. (The default for <CODE>INSTALL_PROGRAM</CODE> should be <CODE>$(INSTALL)</CODE>; the default for <CODE>INSTALL_DATA</CODE> should be <CODE>${INSTALL} -m 644</CODE>.) Then it should use those variables as the commands for actual installation, for executables and non-executables respectively. Minimal use of these variables is as follows: </FONT><PRE class=example><FONT class=extract>     $(INSTALL_PROGRAM) foo $(bindir)/foo
     $(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a
</FONT></PRE>
<P><FONT class=extract>However, it is preferable to support a <CODE>DESTDIR</CODE> prefix on the target files, as explained in the next section. </FONT>
<P><FONT class=extract>It is acceptable, but not required, to install multiple files in one command, with the final argument being a directory, as in: </FONT><PRE class=example><FONT class=extract>     $(INSTALL_PROGRAM) foo bar baz $(bindir)
</FONT></PRE>