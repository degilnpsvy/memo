<DT><FONT class=clozed><CODE>$(strip </CODE><VAR>string</VAR><CODE>)</CODE></FONT> 
<DD><A name=index-stripping-whitespace-579></A><A name=index-whitespace_002c-stripping-580></A><A name=index-spaces_002c-stripping-581></A><A name=index-strip-582></A>Removes leading and trailing whitespace from <VAR>string</VAR> and replaces each internal sequence of one or more whitespace characters with a single space. Thus, &#8216;<SAMP><SPAN class=samp>$(strip a b c )</SPAN></SAMP>&#8217; results in &#8216;<SAMP><SPAN class=samp>a&nbsp;b&nbsp;c</SPAN></SAMP>&#8217;<!-- /@w -->. 
<P>The function <CODE>strip</CODE> can be very useful when used in conjunction with conditionals. When comparing something with the empty string &#8216;<SAMP></SAMP>&#8217; using <CODE>ifeq</CODE> or <CODE>ifneq</CODE>, you usually want a string of just whitespace to match the empty string (see <A href="https://www.gnu.org/software/make/manual/make.html#Conditionals">Conditionals</A>). 
<P>Thus, the following may fail to have the desired results: <PRE class=example>          .PHONY: all
          ifneq   "$(needs_made)" ""
          all: $(needs_made)
          else
          all:;@echo 'Nothing to make!'
          endif
</PRE>
<P class=noindent>Replacing the variable reference &#8216;<SAMP><SPAN class=samp>$(needs_made)</SPAN></SAMP>&#8217;<!-- /@w --> with the function call &#8216;<SAMP><SPAN class=samp>$(strip&nbsp;$(needs_made))</SPAN></SAMP>&#8217;<!-- /@w --> in the <CODE>ifneq</CODE> directive would make it more robust. <BR></P></DD>