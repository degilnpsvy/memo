<DT><FONT class=extract><CODE>$(patsubst </CODE><VAR>pattern</VAR><CODE>,</CODE><VAR>replacement</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-patsubst-573></A><FONT class=extract>Finds whitespace-separated words in <VAR>text</VAR> that match <VAR>pattern</VAR> and replaces them with <VAR>replacement</VAR>. Here <VAR>pattern</VAR> may contain a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; which acts as a wildcard, matching any number of any characters within a word. If <VAR>replacement</VAR> also contains a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is replaced by the text that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in <VAR>pattern</VAR>. Only the first &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the <VAR>pattern</VAR> and <VAR>replacement</VAR> is treated this way; any subsequent &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is unchanged.</FONT> 
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bpatsubst_007d-574></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-575></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-576></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-577></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bpatsubst_007d-578></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in <CODE>patsubst</CODE> function invocations can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared file names or has a stem substituted into it. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. For example, the pattern <SAMP><SPAN class=file>the\%weird\\%pattern\\</SPAN></SAMP> has &#8216;<SAMP><SPAN class=samp>the%weird\</SPAN></SAMP>&#8217; preceding the operative &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character, and &#8216;<SAMP><SPAN class=samp>pattern\\</SPAN></SAMP>&#8217; following it. The final two backslashes are left alone because they cannot affect any &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. </FONT>
<P><FONT class=extract>Whitespace between words is folded into single space characters; leading and trailing whitespace is discarded.</FONT> 
<P>For example, <PRE class=example>          $(patsubst %.c,%.o,x.c.c bar.c)
</PRE>
<P class=noindent>produces the value &#8216;<SAMP><SPAN class=samp>x.c.o bar.o</SPAN></SAMP>&#8217;. 
<P><FONT class=extract>Substitution references (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs"><FONT class=extract>Substitution References</FONT></A><FONT class=extract>) are a simpler way to get the effect of the <CODE>patsubst</CODE> function: </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>pattern</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst <VAR>pattern</VAR>,<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P><FONT class=extract>The second shorthand simplifies one of the most common uses of <CODE>patsubst</CODE>: replacing the suffix at the end of file names. </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>suffix</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst %<VAR>suffix</VAR>,%<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P class=noindent><FONT class=extract>For example, you might have a list of object files: </FONT><PRE class=example><FONT class=extract>          objects = foo.o bar.o baz.o
</FONT></PRE>
<P class=noindent><FONT class=extract>To get the list of corresponding source files, you could simply write: </FONT><PRE class=example><FONT class=extract>          $(objects:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>instead of using the general form: </FONT><PRE class=example><FONT class=extract>          $(patsubst %.o,%.c,$(objects))
</FONT></PRE></DD>