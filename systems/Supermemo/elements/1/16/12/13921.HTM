<H3 class=section>8.1 Function Call Syntax</H3>
<P><A name=index-g_t_0040code_007b_0024_007d_002c-in-function-call-567></A><A name=index-dollar-sign-_0028_0040code_007b_0024_007d_0029_002c-in-function-call-568></A><A name=index-arguments-of-functions-569></A><A name=index-functions_002c-syntax-of-570></A>A function call resembles a variable reference. It can appear anywhere a variable reference can appear, and it is expanded using the same rules as variable references. <FONT class=extract>A function call looks like this: </FONT><PRE class=example><FONT class=extract>     $(<VAR>function</VAR> <VAR>arguments</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>or like this: </FONT><PRE class=example><FONT class=extract>     ${<VAR>function</VAR> <VAR>arguments</VAR>}
</FONT></PRE>
<P>Here <VAR>function</VAR> is a function name; one of a short list of names that are part of <CODE>make</CODE>. You can also essentially create your own functions by using the <CODE>call</CODE> built-in function. 
<P>The <VAR>arguments</VAR> are the arguments of the function. They are separated from the function name by one or more spaces or tabs, and if there is more than one argument, then they are separated by commas. Such whitespace and commas are not part of an argument's value. The delimiters which you use to surround the function call, whether parentheses or braces, can appear in an argument only in matching pairs; the other kind of delimiters may appear singly. If the arguments themselves contain other function calls or variable references, it is wisest to use the same kind of delimiters for all the references; write &#8216;<SAMP><SPAN class=samp>$(subst&nbsp;a,b,$(x))</SPAN></SAMP>&#8217;<!-- /@w -->, not &#8216;<SAMP><SPAN class=samp>$(subst&nbsp;a,b,${x})</SPAN></SAMP>&#8217;<!-- /@w -->. This is because it is clearer, and because only one type of delimiter is matched to find the end of the reference. 
<P>The text written for each argument is processed by substitution of variables and function calls to produce the argument value, which is the text on which the function acts. The substitution is done in the order in which the arguments appear. 
<P><FONT class=extract>Commas and unmatched parentheses or braces cannot appear in the text of an argument as written; leading spaces cannot appear in the text of the first argument as written. These characters can be put into the argument value by variable substitution. First define variables <CODE>comma</CODE> and <CODE>space</CODE> whose values are isolated comma and space characters, then substitute these variables where such characters are wanted, like this: </FONT><PRE class=example><FONT class=extract>     comma:= ,
     empty:=
     space:= $(empty) $(empty)
     foo:= a b c
     bar:= $(subst $(space),$(comma),$(foo))
     # <SPAN class=roman><FONT face="Times New Roman">bar is now `a,b,c'.</FONT></SPAN>
</FONT></PRE>
<P class=noindent><FONT class=extract>Here the <CODE>subst</CODE> function replaces each space with a comma, through the value of <CODE>foo</CODE>, and substitutes the result.</FONT>