<H3 class=section>8.2 Functions for String Substitution and Analysis</H3>
<P><A name=index-functions_002c-for-text-571></A>Here are some functions that operate on strings: 
<DL>
<DT><FONT class=extract><CODE>$(subst </CODE><VAR>from</VAR><CODE>,</CODE><VAR>to</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-subst-572></A><FONT class=extract>Performs a textual replacement on the text <VAR>text</VAR>: each occurrence of <VAR>from</VAR> is replaced by <VAR>to</VAR>. The result is substituted for the function call. For example, </FONT><PRE class=example><FONT class=extract>          $(subst ee,EE,feet on the street)
</FONT></PRE>
<P><FONT class=extract>substitutes the string &#8216;<SAMP><SPAN class=samp>fEEt on the strEEt</SPAN></SAMP>&#8217;.</FONT> <BR></P>
<DT><FONT class=extract><CODE>$(patsubst </CODE><VAR>pattern</VAR><CODE>,</CODE><VAR>replacement</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-patsubst-573></A><FONT class=extract>Finds whitespace-separated words in <VAR>text</VAR> that match <VAR>pattern</VAR> and replaces them with <VAR>replacement</VAR>. Here <VAR>pattern</VAR> may contain a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; which acts as a wildcard, matching any number of any characters within a word. If <VAR>replacement</VAR> also contains a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is replaced by the text that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in <VAR>pattern</VAR>. Only the first &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the <VAR>pattern</VAR> and <VAR>replacement</VAR> is treated this way; any subsequent &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; is unchanged. </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-_0040code_007bpatsubst_007d-574></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-575></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-576></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-577></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-_0040code_007bpatsubst_007d-578></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in <CODE>patsubst</CODE> function invocations can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared file names or has a stem substituted into it. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. For example, the pattern <SAMP><SPAN class=file>the\%weird\\%pattern\\</SPAN></SAMP> has &#8216;<SAMP><SPAN class=samp>the%weird\</SPAN></SAMP>&#8217; preceding the operative &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character, and &#8216;<SAMP><SPAN class=samp>pattern\\</SPAN></SAMP>&#8217; following it. The final two backslashes are left alone because they cannot affect any &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. </FONT>
<P><FONT class=extract>Whitespace between words is folded into single space characters; leading and trailing whitespace is discarded. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(patsubst %.c,%.o,x.c.c bar.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the value &#8216;<SAMP><SPAN class=samp>x.c.o bar.o</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Substitution references (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Substitution-Refs"><FONT class=extract>Substitution References</FONT></A><FONT class=extract>) are a simpler way to get the effect of the <CODE>patsubst</CODE> function: </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>pattern</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst <VAR>pattern</VAR>,<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P><FONT class=extract>The second shorthand simplifies one of the most common uses of <CODE>patsubst</CODE>: replacing the suffix at the end of file names. </FONT><PRE class=example><FONT class=extract>          $(<VAR>var</VAR>:<VAR>suffix</VAR>=<VAR>replacement</VAR>)
</FONT></PRE>
<P class=noindent><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>          $(patsubst %<VAR>suffix</VAR>,%<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</FONT></PRE>
<P class=noindent><FONT class=extract>For example, you might have a list of object files: </FONT><PRE class=example><FONT class=extract>          objects = foo.o bar.o baz.o
</FONT></PRE>
<P class=noindent><FONT class=extract>To get the list of corresponding source files, you could simply write: </FONT><PRE class=example><FONT class=extract>          $(objects:.o=.c)
</FONT></PRE>
<P class=noindent><FONT class=extract>instead of using the general form: </FONT><PRE class=example><FONT class=extract>          $(patsubst %.o,%.c,$(objects))</FONT>
</PRE><BR>
<DT><FONT class=extract><CODE>$(strip </CODE><VAR>string</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-stripping-whitespace-579></A><A name=index-whitespace_002c-stripping-580></A><A name=index-spaces_002c-stripping-581></A><A name=index-strip-582></A><FONT class=extract>Removes leading and trailing whitespace from <VAR>string</VAR> and replaces each internal sequence of one or more whitespace characters with a single space. Thus, &#8216;<SAMP><SPAN class=samp>$(strip a b c )</SPAN></SAMP>&#8217; results in &#8216;<SAMP><SPAN class=samp>a&nbsp;b&nbsp;c</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>The function <CODE>strip</CODE> can be very useful when used in conjunction with conditionals. When comparing something with the empty string &#8216;<SAMP></SAMP>&#8217; using <CODE>ifeq</CODE> or <CODE>ifneq</CODE>, you usually want a string of just whitespace to match the empty string (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditionals"><FONT class=extract>Conditionals</FONT></A><FONT class=extract>). </FONT>
<P><FONT class=extract>Thus, the following may fail to have the desired results: </FONT><PRE class=example><FONT class=extract>          .PHONY: all
          ifneq   "$(needs_made)" ""
          all: $(needs_made)
          else
          all:;@echo 'Nothing to make!'
          endif
</FONT></PRE>
<P class=noindent><FONT class=extract>Replacing the variable reference &#8216;<SAMP><SPAN class=samp>$(needs_made)</SPAN></SAMP>&#8217;<!-- /@w --> with the function call &#8216;<SAMP><SPAN class=samp>$(strip&nbsp;$(needs_made))</SPAN></SAMP>&#8217;<!-- /@w --> in the <CODE>ifneq</CODE> directive would make it more robust. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(findstring </CODE><VAR>find</VAR><CODE>,</CODE><VAR>in</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-findstring-583></A><A name=index-searching-for-strings-584></A><A name=index-finding-strings-585></A><A name=index-strings_002c-searching-for-586></A><FONT class=extract>Searches <VAR>in</VAR> for an occurrence of <VAR>find</VAR>. If it occurs, the value is <VAR>find</VAR>; otherwise, the value is empty. You can use this function in a conditional to test for the presence of a specific substring in a given string. Thus, the two examples, </FONT><PRE class=example><FONT class=extract>          $(findstring a,a b c)
          $(findstring a,b c)
</FONT></PRE>
<P class=noindent><FONT class=extract>produce the values &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; and &#8216;<SAMP></SAMP>&#8217; (the empty string), respectively. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Testing-Flags"><FONT class=extract>Testing Flags</FONT></A><FONT class=extract>, for a practical application of <CODE>findstring</CODE>. </FONT>
<P><A name=index-filter-587></A><A name=index-filtering-words-588></A><A name=index-words_002c-filtering-589></A><BR></P>
<DT><FONT class=extract><FONT class=extract><CODE>$(filter </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT></FONT>
<DD><FONT class=extract>Returns all whitespace-separated words in <VAR>text</VAR> that <EM>do</EM> match any of the <VAR>pattern</VAR> words, removing any words that <EM>do not</EM> match. The patterns are written using &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, just like the patterns used in the <CODE>patsubst</CODE> function above. </FONT>
<P><FONT class=extract>The <CODE>filter</CODE> function can be used to separate out different types of strings (such as file names) in a variable. For example: </FONT><PRE class=example><FONT class=extract>          sources := foo.c bar.c baz.s ugh.h
          foo: $(sources)
                  cc $(filter %.c %.s,$(sources)) -o foo
</FONT></PRE>
<P class=noindent><FONT class=extract>says that <SAMP><SPAN class=file>foo</SPAN></SAMP> depends of <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <SAMP><SPAN class=file>bar.c</SPAN></SAMP>, <SAMP><SPAN class=file>baz.s</SPAN></SAMP> and <SAMP><SPAN class=file>ugh.h</SPAN></SAMP> but only <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <SAMP><SPAN class=file>bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>baz.s</SPAN></SAMP> should be specified in the command to the compiler. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(filter-out </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-filter_002dout-590></A><A name=index-filtering-out-words-591></A><A name=index-words_002c-filtering-out-592></A><FONT class=extract>Returns all whitespace-separated words in <VAR>text</VAR> that <EM>do not</EM> match any of the <VAR>pattern</VAR> words, removing the words that <EM>do</EM> match one or more. This is the exact opposite of the <CODE>filter</CODE> function. </FONT>
<P><FONT class=extract>For example, given: </FONT><PRE class=example><FONT class=extract>          objects=main1.o foo.o main2.o bar.o
          mains=main1.o main2.o
</FONT></PRE>
<P class=noindent><FONT class=extract>the following generates a list which contains all the object files not in &#8216;<SAMP><SPAN class=samp>mains</SPAN></SAMP>&#8217;: </FONT><PRE class=example><FONT class=extract>          $(filter-out $(mains),$(objects))
</FONT></PRE>
<P><A name=index-sort-593></A><A name=index-sorting-words-594></A><BR></P>
<DT><FONT class=extract><CODE>$(sort </CODE><VAR>list</VAR><CODE>)</CODE> </FONT>
<DD><FONT class=extract>Sorts the words of <VAR>list</VAR> in lexical order, removing duplicate words. The output is a list of words separated by single spaces. Thus, </FONT><PRE class=example><FONT class=extract>          $(sort foo bar lose)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns the value &#8216;<SAMP><SPAN class=samp>bar foo lose</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-removing-duplicate-words-595></A><A name=index-duplicate-words_002c-removing-596></A><A name=index-words_002c-removing-duplicates-597></A><FONT class=extract>Incidentally, since <CODE>sort</CODE> removes duplicate words, you can use it for this purpose even if you don't care about the sort order. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(word </CODE><VAR>n</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-word-598></A><A name=index-word_002c-selecting-a-599></A><A name=index-selecting-a-word-600></A><FONT class=extract>Returns the <VAR>n</VAR>th word of <VAR>text</VAR>. The legitimate values of <VAR>n</VAR> start from 1. If <VAR>n</VAR> is bigger than the number of words in <VAR>text</VAR>, the value is empty. For example, </FONT><PRE class=example><FONT class=extract>          $(word 2, foo bar baz)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(wordlist </CODE><VAR>s</VAR><CODE>,</CODE><VAR>e</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-wordlist-601></A><A name=index-words_002c-selecting-lists-of-602></A><A name=index-selecting-word-lists-603></A><FONT class=extract>Returns the list of words in <VAR>text</VAR> starting with word <VAR>s</VAR> and ending with word <VAR>e</VAR> (inclusive). The legitimate values of <VAR>s</VAR> start from 1; <VAR>e</VAR> may start from 0. If <VAR>s</VAR> is bigger than the number of words in <VAR>text</VAR>, the value is empty. If <VAR>e</VAR> is bigger than the number of words in <VAR>text</VAR>, words up to the end of <VAR>text</VAR> are returned. If <VAR>s</VAR> is greater than <VAR>e</VAR>, nothing is returned. For example, </FONT><PRE class=example><FONT class=extract>          $(wordlist 2, 3, foo bar baz)
</FONT></PRE>
<P class=noindent><FONT class=extract>returns &#8216;<SAMP><SPAN class=samp>bar baz</SPAN></SAMP>&#8217;. <!-- Following item phrased to prevent overfull hbox.  -RJC 17 Jul 92 --><BR></FONT></P>
<DT><FONT class=extract><CODE>$(words </CODE><VAR>text</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-words-604></A><A name=index-words_002c-finding-number-605></A><FONT class=extract>Returns the number of words in <VAR>text</VAR>. Thus, the last word of <VAR>text</VAR> is <CODE>$(word&nbsp;$(words&nbsp;</CODE><VAR>text</VAR><CODE>),</CODE><VAR>text</VAR><CODE>)</CODE><!-- /@w -->. <BR></FONT>
<DT><FONT class=extract><CODE>$(firstword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-firstword-606></A><A name=index-words_002c-extracting-first-607></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace. The value is the first name in the series. The rest of the names are ignored. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(firstword foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;. Although <CODE>$(firstword </CODE><VAR>text</VAR><CODE>)</CODE> is the same as <CODE>$(word 1,</CODE><VAR>text</VAR><CODE>)</CODE>, the <CODE>firstword</CODE> function is retained for its simplicity. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(lastword </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-lastword-608></A><A name=index-words_002c-extracting-last-609></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace. The value is the last name in the series. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(lastword foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;. Although <CODE>$(lastword </CODE><VAR>text</VAR><CODE>)</CODE> is the same as <CODE>$(word $(words </CODE><VAR>text</VAR><CODE>),</CODE><VAR>text</VAR><CODE>)</CODE>, the <CODE>lastword</CODE> function was added for its simplicity and better performance. </FONT></P></DD></DL>
<P><FONT class=extract>Here is a realistic example of the use of <CODE>subst</CODE> and <CODE>patsubst</CODE>. Suppose that a makefile uses the <CODE>VPATH</CODE> variable to specify a list of directories that <CODE>make</CODE> should search for prerequisite files (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#General-Search"><FONT class=extract><CODE>VPATH</CODE> Search Path for All Prerequisites</FONT></A><FONT class=extract>). This example shows how to tell the C compiler to search for header files in the same list of directories. </FONT>
<P><FONT class=extract>The value of <CODE>VPATH</CODE> is a list of directories separated by colons, such as &#8216;<SAMP><SPAN class=samp>src:../headers</SPAN></SAMP>&#8217;. First, the <CODE>subst</CODE> function is used to change the colons to spaces: </FONT><PRE class=example><FONT class=extract>     $(subst :, ,$(VPATH))
</FONT></PRE>
<P class=noindent><FONT class=extract>This produces &#8216;<SAMP><SPAN class=samp>src ../headers</SPAN></SAMP>&#8217;. Then <CODE>patsubst</CODE> is used to turn each directory name into a &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; flag. These can be added to the value of the variable <CODE>CFLAGS</CODE>, which is passed automatically to the C compiler, like this: </FONT><PRE class=example><FONT class=extract>     override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
</FONT></PRE>
<P class=noindent><FONT class=extract>The effect is to append the text &#8216;<SAMP><SPAN class=samp>-Isrc -I../headers</SPAN></SAMP>&#8217; to the previously given value of <CODE>CFLAGS</CODE>. The <CODE>override</CODE> directive is used so that the new value is assigned even if the previous value of <CODE>CFLAGS</CODE> was specified with a command argument (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>).</FONT>