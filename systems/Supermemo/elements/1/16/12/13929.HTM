<H3 class=section>8.9 The <CODE>eval</CODE> Function</H3>
<P><A name=index-eval-656></A><A name=index-evaluating-makefile-syntax-657></A><A name=index-makefile-syntax_002c-evaluating-658></A><FONT class=extract>The <CODE>eval</CODE> function is very special: it allows you to define new makefile constructs that are not constant; which are the result of evaluating other variables and functions. The argument to the <CODE>eval</CODE> function is expanded, then the results of that expansion are parsed as makefile syntax. The expanded results can define new <CODE>make</CODE> variables, targets, implicit or explicit rules, etc.</FONT> 
<P><FONT class=extract>The result of the <CODE>eval</CODE> function is always the empty string; thus, it can be placed virtually anywhere in a makefile without causing syntax errors.</FONT> 
<P><FONT class=extract>It's important to realize that the <CODE>eval</CODE> argument is expanded <EM>twice</EM>; first by the <CODE>eval</CODE> function, then the results of that expansion are expanded again when they are parsed as makefile syntax. This means you may need to provide extra levels of escaping for &#8220;$&#8221; characters when using <CODE>eval</CODE>. The <CODE>value</CODE> function (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Value-Function"><FONT class=extract>Value Function</FONT></A><FONT class=extract>) can sometimes be useful in these situations, to circumvent unwanted expansions.</FONT> 
<P><FONT class=extract>Here is an example of how <CODE>eval</CODE> can be used; this example combines a number of concepts and other functions. Although it might seem overly complex to use <CODE>eval</CODE> in this example, rather than just writing out the rules, consider two things: first, the template definition (in <CODE>PROGRAM_template</CODE>) could need to be much more complex than it is here; and second, you might put the complex, &#8220;generic&#8221; part of this example into another makefile, then include it in all the individual makefiles. Now your individual makefiles are quite straightforward. </FONT><PRE class=example><FONT class=extract>     PROGRAMS    = server client
     
     server_OBJS = server.o server_priv.o server_access.o
     server_LIBS = priv protocol
     
     client_OBJS = client.o client_api.o client_mem.o
     client_LIBS = protocol
     
     # Everything after this is generic
     
     .PHONY: all
     all: $(PROGRAMS)
     
     define PROGRAM_template =
      $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%)
      ALL_OBJS   += $$($(1)_OBJS)
     endef
     
     $(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))
     
     $(PROGRAMS):
             $(LINK.o) $^ $(LDLIBS) -o $@
     
     clean:
             rm -f $(ALL_OBJS) $(PROGRAMS)</FONT>
</PRE>