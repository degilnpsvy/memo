<H3 class=section>8.3 Functions for File Names</H3>
<P><A name=index-functions_002c-for-file-names-610></A><A name=index-file-name-functions-611></A>Several of the built-in expansion functions relate specifically to taking apart file names or lists of file names. 
<P>Each of the following functions performs a specific transformation on a file name. The argument of the function is regarded as a series of file names, separated by whitespace. (Leading and trailing whitespace is ignored.) Each file name in the series is transformed in the same way and the results are concatenated with single spaces between them. 
<DL>
<DT><FONT class=extract><CODE>$(dir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-dir-612></A><A name=index-directory-part-613></A><A name=index-file-name_002c-directory-part-614></A><FONT class=extract>Extracts the directory-part of each file name in <VAR>names</VAR>. The directory-part of the file name is everything up through (and including) the last slash in it. If the file name contains no slash, the directory part is the string &#8216;<SAMP><SPAN class=samp>./</SPAN></SAMP>&#8217;. For example, </FONT><PRE class=example><FONT class=extract>          $(dir src/foo.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/ ./</SPAN></SAMP>&#8217;. <BR></FONT>&nbsp;</P>
<DT><FONT class=extract><CODE>$(notdir </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-notdir-615></A><A name=index-file-name_002c-nondirectory-part-616></A><A name=index-nondirectory-part-617></A><FONT class=extract>Extracts all but the directory-part of each file name in <VAR>names</VAR>. If the file name contains no slash, it is left unchanged. Otherwise, everything through the last slash is removed from it. </FONT>
<P><FONT class=extract>A file name that ends with a slash becomes an empty string. This is unfortunate, because it means that the result does not always have the same number of whitespace-separated file names as the argument had; but we do not see any other valid alternative. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(notdir src/foo.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo.c hacks</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(suffix </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-suffix-618></A><A name=index-suffix_002c-function-to-find-619></A><A name=index-file-name-suffix-620></A><FONT class=extract>Extracts the suffix of each file name in <VAR>names</VAR>. If the file name contains a period, the suffix is everything starting with the last period. Otherwise, the suffix is the empty string. This frequently means that the result will be empty when <VAR>names</VAR> is not, and if <VAR>names</VAR> contains multiple file names, the result may contain fewer file names. </FONT>
<P><FONT class=extract>For example, </FONT><PRE class=example><FONT class=extract>          $(suffix src/foo.c src-1.0/bar.c hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>.c .c</SPAN></SAMP>&#8217;.</FONT> <BR></P>
<DT><FONT class=extract><CODE>$(basename </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-basename-621></A><A name=index-basename-622></A><A name=index-file-name_002c-basename-of-623></A><FONT class=extract>Extracts all but the suffix of each file name in <VAR>names</VAR>. If the file name contains a period, the basename is everything starting up to (and not including) the last period. Periods in the directory part are ignored. If there is no period, the basename is the entire file name. For example, </FONT><PRE class=example><FONT class=extract>          $(basename src/foo.c src-1.0/bar hacks)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/foo src-1.0/bar hacks</SPAN></SAMP>&#8217;. <!-- plural convention with dots (be consistent) --><BR></FONT></P>
<DT><FONT class=extract><CODE>$(addsuffix </CODE><VAR>suffix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-addsuffix-624></A><A name=index-suffix_002c-adding-625></A><A name=index-file-name-suffix_002c-adding-626></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace; <VAR>suffix</VAR> is used as a unit. The value of <VAR>suffix</VAR> is appended to the end of each individual name and the resulting larger names are concatenated with single spaces between them. For example, </FONT><PRE class=example><FONT class=extract>          $(addsuffix .c,foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>foo.c bar.c</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(addprefix </CODE><VAR>prefix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-addprefix-627></A><A name=index-prefix_002c-adding-628></A><A name=index-file-name-prefix_002c-adding-629></A><FONT class=extract>The argument <VAR>names</VAR> is regarded as a series of names, separated by whitespace; <VAR>prefix</VAR> is used as a unit. The value of <VAR>prefix</VAR> is prepended to the front of each individual name and the resulting larger names are concatenated with single spaces between them. For example, </FONT><PRE class=example><FONT class=extract>          $(addprefix src/,foo bar)
</FONT></PRE>
<P class=noindent><FONT class=extract>produces the result &#8216;<SAMP><SPAN class=samp>src/foo src/bar</SPAN></SAMP>&#8217;. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(join </CODE><VAR>list1</VAR><CODE>,</CODE><VAR>list2</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-join-630></A><A name=index-joining-lists-of-words-631></A><A name=index-words_002c-joining-lists-632></A><FONT class=extract>Concatenates the two arguments word by word: the two first words (one from each argument) concatenated form the first word of the result, the two second words form the second word of the result, and so on. So the <VAR>n</VAR>th word of the result comes from the <VAR>n</VAR>th word of each argument. If one argument has more words that the other, the extra words are copied unchanged into the result. </FONT>
<P><FONT class=extract>For example, &#8216;<SAMP><SPAN class=samp>$(join a b,.c .o)</SPAN></SAMP>&#8217; produces &#8216;<SAMP><SPAN class=samp>a.c b.o</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>Whitespace between the words in the lists is not preserved; it is replaced with a single space. </FONT>
<P><FONT class=extract>This function can merge the results of the <CODE>dir</CODE> and <CODE>notdir</CODE> functions, to produce the original list of files which was given to those two functions. <BR></FONT></P>
<DT><FONT class=extract><CODE>$(wildcard </CODE><VAR>pattern</VAR><CODE>)</CODE> </FONT>
<DD><A name=index-wildcard-633></A><A name=index-wildcard_002c-function-634></A><FONT class=extract>The argument <VAR>pattern</VAR> is a file name pattern, typically containing wildcard characters (as in shell file name patterns). The result of <CODE>wildcard</CODE> is a space-separated list of the names of existing files that match the pattern. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract><CODE>$(realpath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-realpath-635></A><A name=index-realpath-636></A><A name=index-file-name_002c-realpath-of-637></A><FONT class=extract>For each file name in <VAR>names</VAR> return the canonical absolute name. A canonical name does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, nor any repeated path separators (<CODE>/</CODE>) or symlinks. In case of a failure the empty string is returned. Consult the <CODE>realpath(3)</CODE> documentation for a list of possible failure causes. <BR></FONT>
<DT><FONT class=extract><CODE>$(abspath </CODE><VAR>names</VAR><CODE>...)</CODE> </FONT>
<DD><A name=index-abspath-638></A><A name=index-abspath-639></A><A name=index-file-name_002c-abspath-of-640></A><FONT class=extract>For each file name in <VAR>names</VAR> return an absolute name that does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, nor any repeated path separators (<CODE>/</CODE>). Note that, in contrast to <CODE>realpath</CODE> function, <CODE>abspath</CODE> does not resolve symlinks and does not require the file names to refer to an existing file or directory. Use the <CODE>wildcard</CODE> function to test for existence. </FONT></DD></DL>