<H3 class=section>8.10 The <CODE>origin</CODE> Function</H3>
<P><A name=index-origin-659></A><A name=index-variables_002c-origin-of-660></A><A name=index-origin-of-variable-661></A>The <CODE>origin</CODE> function is unlike most other functions in that it does not operate on the values of variables; it tells you something <EM>about</EM> a variable. Specifically, it tells you where it came from. 
<P><FONT class=extract>The syntax of the <CODE>origin</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(origin <VAR>variable</VAR>)
</FONT></PRE>
<P><FONT class=extract>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable to inquire about, not a <EM>reference</EM> to that variable. Therefore you would not normally use a &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; or parentheses when writing it. (You can, however, use a variable reference in the name if you want the name not to be a constant.) </FONT>
<P><FONT class=extract>The result of this function is a string telling you how the variable <VAR>variable</VAR> was defined: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>undefined</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was never defined. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>default</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> has a default definition, as is usual with <CODE>CC</CODE> and so on. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Variables"><FONT class=extract>Variables Used by Implicit Rules</FONT></A><FONT class=extract>. Note that if you have redefined a default variable, the <CODE>origin</CODE> function will return the origin of the later definition. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>environment</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was inherited from the environment provided to <CODE>make</CODE>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>environment override</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was inherited from the environment provided to <CODE>make</CODE>, and is overriding a setting for <VAR>variable</VAR> in the makefile as a result of the &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217;<!-- /@w --> option (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>file</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined in a makefile. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>command line</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined on the command line. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>override</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> was defined with an <CODE>override</CODE> directive in a makefile (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive"><FONT class=extract>The <CODE>override</CODE> Directive</FONT></A><FONT class=extract>). <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>automatic</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>if <VAR>variable</VAR> is an automatic variable defined for the execution of the recipe for each rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>). </FONT></DD></DL>
<P><FONT class=extract>This information is primarily useful (other than for your curiosity) to determine if you want to believe the value of a variable. For example, suppose you have a makefile <SAMP><SPAN class=file>foo</SPAN></SAMP> that includes another makefile <SAMP><SPAN class=file>bar</SPAN></SAMP>. You want a variable <CODE>bletch</CODE> to be defined in <SAMP><SPAN class=file>bar</SPAN></SAMP> if you run the command &#8216;<SAMP><SPAN class=samp>make&nbsp;-f&nbsp;bar</SPAN></SAMP>&#8217;<!-- /@w -->, even if the environment contains a definition of <CODE>bletch</CODE>. However, if <SAMP><SPAN class=file>foo</SPAN></SAMP> defined <CODE>bletch</CODE> before including <SAMP><SPAN class=file>bar</SPAN></SAMP>, you do not want to override that definition. This could be done by using an <CODE>override</CODE> directive in <SAMP><SPAN class=file>foo</SPAN></SAMP>, giving that definition precedence over the later definition in <SAMP><SPAN class=file>bar</SPAN></SAMP>; unfortunately, the <CODE>override</CODE> directive would also override any command line definitions. So, <SAMP><SPAN class=file>bar</SPAN></SAMP> could include: </FONT><PRE class=example><FONT class=extract>     ifdef bletch
     ifeq "$(origin bletch)" "environment"
     bletch = barf, gag, etc.
     endif
     endif
</FONT></PRE>
<P class=noindent><FONT class=extract>If <CODE>bletch</CODE> has been defined from the environment, this will redefine it. </FONT>
<P><FONT class=extract>If you want to override a previous definition of <CODE>bletch</CODE> if it came from the environment, even under &#8216;<SAMP><SPAN class=samp>-e</SPAN></SAMP>&#8217;, you could instead write: </FONT><PRE class=example><FONT class=extract>     ifneq "$(findstring environment,$(origin bletch))" ""
     bletch = barf, gag, etc.
     endif
</FONT></PRE>
<P><FONT class=extract>Here the redefinition takes place if &#8216;<SAMP><SPAN class=samp>$(origin bletch)</SPAN></SAMP>&#8217; returns either &#8216;<SAMP><SPAN class=samp>environment</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>environment override</SPAN></SAMP>&#8217;. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>.</FONT>