This simple example sets the variable &#8216;<SAMP><SPAN class=samp>files</SPAN></SAMP>&#8217; to the list of all files in the directories in the list &#8216;<SAMP><SPAN class=samp>dirs</SPAN></SAMP>&#8217;: <PRE class=example>     dirs := a b c d
     files := $(foreach dir,$(dirs),$(wildcard $(dir)/*))
</PRE>
<P>Here <VAR>text</VAR> is &#8216;<SAMP><SPAN class=samp>$(wildcard $(dir)/*)</SPAN></SAMP>&#8217;. The first repetition finds the value &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; for <CODE>dir</CODE>, so it produces the same result as &#8216;<SAMP><SPAN class=samp>$(wildcard a/*)</SPAN></SAMP>&#8217;; the second repetition produces the result of &#8216;<SAMP><SPAN class=samp>$(wildcard b/*)</SPAN></SAMP>&#8217;; and the third, that of &#8216;<SAMP><SPAN class=samp>$(wildcard c/*)</SPAN></SAMP>&#8217;. 
<P>This example has the same result (except for setting &#8216;<SAMP><SPAN class=samp>dirs</SPAN></SAMP>&#8217;) as the following example: <PRE class=example>     files := $(wildcard a/* b/* c/* d/*)
</PRE>
<P>When <VAR>text</VAR> is complicated, you can improve readability by giving it a name, with an additional variable: <PRE class=example><FONT class=clozed>     find_files = $(wildcard $(dir)/*)
     dirs := a b c d
     files := $(foreach dir,$(dirs),$(find_files))
</FONT></PRE>
<P class=noindent>Here we use the variable <CODE>find_files</CODE> this way. We use plain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; to define a recursively-expanding variable, so that its value contains an actual function call to be re-expanded under the control of <CODE>foreach</CODE>; a simply-expanded variable would not do, since <CODE>wildcard</CODE> would be called only once at the time of defining <CODE>find_files</CODE>.