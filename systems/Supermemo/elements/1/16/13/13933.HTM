<H3 class=section>8.13 The <CODE>shell</CODE> Function</H3>
<P><A name=index-shell-675></A><A name=index-command-expansion-676></A><A name=index-backquotes-677></A><A name=index-shell-command_002c-function-for-678></A>The <CODE>shell</CODE> function is unlike any other function other than the <CODE>wildcard</CODE> function (see <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">The Function <CODE>wildcard</CODE></A>) in that it communicates with the world outside of <CODE>make</CODE>. 
<P><FONT class=extract>The <CODE>shell</CODE> function performs the same function that backquotes (&#8216;<SAMP><SPAN class=samp>`</SPAN></SAMP>&#8217;) perform in most shells: it does <DFN>command expansion</DFN>. This means that it takes as an argument a shell command and evaluates to the output of the command. The only processing <CODE>make</CODE> does on the result is to convert each newline (or carriage-return / newline pair) to a single space. If there is a trailing (carriage-return and) newline it will simply be removed.</FONT> 
<P>The commands run by calls to the <CODE>shell</CODE> function are run when the function calls are expanded (see <A href="https://www.gnu.org/software/make/manual/make.html#Reading-Makefiles">How <CODE>make</CODE> Reads a Makefile</A>). <FONT class=extract>Because this function involves spawning a new shell, you should carefully consider the performance implications of using the <CODE>shell</CODE> function within recursively expanded variables vs. simply expanded variables (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Flavors"><FONT class=extract>The Two Flavors of Variables</FONT></A><FONT class=extract>).</FONT> 
<P>Here are some examples of the use of the <CODE>shell</CODE> function: <PRE class=example>     contents := $(shell cat foo)
</PRE>
<P class=noindent>sets <CODE>contents</CODE> to the contents of the file <SAMP><SPAN class=file>foo</SPAN></SAMP>, with a space (rather than a newline) separating each line. <PRE class=example>     files := $(shell echo *.c)
</PRE>
<P class=noindent>sets <CODE>files</CODE> to the expansion of &#8216;<SAMP><SPAN class=samp>*.c</SPAN></SAMP>&#8217;. Unless <CODE>make</CODE> is using a very strange shell, this has the same result as &#8216;<SAMP><SPAN class=samp>$(wildcard&nbsp;*.c)</SPAN></SAMP>&#8217;<!-- /@w --> (as long as at least one &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file exists).