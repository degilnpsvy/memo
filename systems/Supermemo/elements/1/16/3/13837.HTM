<H3 class=section>3.6 Overriding Part of Another Makefile</H3>
<P><A name=index-overriding-makefiles-98></A><A name=index-makefile_002c-overriding-99></A>Sometimes it is useful to have a makefile that is mostly just like another makefile. You can often use the &#8216;<SAMP><SPAN class=samp>include</SPAN></SAMP>&#8217; directive to include one in the other, and add more targets or variable definitions. However, it is invalid for two makefiles to give different recipes for the same target. But there is another way. 
<P><A name=index-match_002danything-rule_002c-used-to-override-100></A>In the containing makefile (the one that wants to include the other), you can use a match-anything pattern rule to say that to remake any target that cannot be made from the information in the containing makefile, <CODE>make</CODE> should look in another makefile. See <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">Pattern Rules</A>, for more information on pattern rules. 
<P>For example, if you have a makefile called <SAMP><SPAN class=file>Makefile</SPAN></SAMP> that says how to make the target &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; (and other targets), you can write a makefile called <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP> that contains: <PRE class=example>     foo:
             frobnicate &gt; foo
     
     %: force
             @$(MAKE) -f Makefile $@
     force: ;
</PRE>
<P>If you say &#8216;<SAMP><SPAN class=samp>make foo</SPAN></SAMP>&#8217;, <CODE>make</CODE> will find <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, read it, and see that to make <SAMP><SPAN class=file>foo</SPAN></SAMP>, it needs to run the recipe &#8216;<SAMP><SPAN class=samp>frobnicate &gt; foo</SPAN></SAMP>&#8217;. If you say &#8216;<SAMP><SPAN class=samp>make bar</SPAN></SAMP>&#8217;, <CODE>make</CODE> will find no way to make <SAMP><SPAN class=file>bar</SPAN></SAMP> in <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP>, so it will use the recipe from the pattern rule: &#8216;<SAMP><SPAN class=samp>make -f Makefile bar</SPAN></SAMP>&#8217;. If <SAMP><SPAN class=file>Makefile</SPAN></SAMP> provides a rule for updating <SAMP><SPAN class=file>bar</SPAN></SAMP>, <CODE>make</CODE> will apply the rule. And likewise for any other target that <SAMP><SPAN class=file>GNUmakefile</SPAN></SAMP> does not say how to make. 
<P>The way this works is that the pattern rule has a pattern of just &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, so it matches any target whatever. The rule specifies a prerequisite <SAMP><SPAN class=file>force</SPAN></SAMP>, to guarantee that the recipe will be run even if the target file already exists. We give the <SAMP><SPAN class=file>force</SPAN></SAMP> target an empty recipe to prevent <CODE>make</CODE> from searching for an implicit rule to build it&#8212;otherwise it would apply the same match-anything rule to <SAMP><SPAN class=file>force</SPAN></SAMP> itself and create a prerequisite loop!