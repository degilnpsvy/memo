<H3 class=section>3.4 The Variable <CODE>MAKEFILES</CODE></H3>
<P><A name=index-makefile_002c-and-_0040code_007bMAKEFILES_007d-variable-91></A><A name=index-including-_0028_0040code_007bMAKEFILES_007d-variable_0029-92></A><A name=index-MAKEFILES-93></A><FONT class=extract>If the environment variable <CODE>MAKEFILES</CODE> is defined, <CODE>make</CODE> considers its value as a list of names (separated by whitespace) of additional makefiles to be read before the others. This works much like the <CODE>include</CODE> directive: various directories are searched for those files (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Include"><FONT class=extract>Including Other Makefiles</FONT></A><FONT class=extract>). In addition, the default goal is never taken from one of these makefiles (or any makefile included by them) and it is not an error if the files listed in <CODE>MAKEFILES</CODE> are not found.</FONT> 
<P><A name=index-recursion_002c-and-_0040code_007bMAKEFILES_007d-variable-94></A><FONT class=extract>The main use of <CODE>MAKEFILES</CODE> is in communication between recursive invocations of <CODE>make</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Recursion"><FONT class=extract>Recursive Use of <CODE>make</CODE></FONT></A><FONT class=extract>). It usually is not desirable to set the environment variable before a top-level invocation of <CODE>make</CODE>, because it is usually better not to mess with a makefile from outside. However, if you are running <CODE>make</CODE> without a specific makefile, a makefile in <CODE>MAKEFILES</CODE> can do useful things to help the built-in implicit rules work better, such as defining search paths (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Directory Search</FONT></A><FONT class=extract>).</FONT> 
<P>Some users are tempted to set <CODE>MAKEFILES</CODE> in the environment automatically on login, and program makefiles to expect this to be done. This is a very bad idea, because such makefiles will fail to work if run by anyone else. It is much better to write explicit <CODE>include</CODE> directives in the makefiles. See <A href="https://www.gnu.org/software/make/manual/make.html#Include">Including Other Makefiles</A>.