<H3 class=section>3.3 Including Other Makefiles</H3>
<P><A name=index-including-other-makefiles-75></A><A name=index-makefile_002c-including-76></A><A name=index-include-77></A>The <CODE>include</CODE> directive tells <CODE>make</CODE> to suspend reading the current makefile and read one or more other makefiles before continuing. The directive is a line in the makefile that looks like this: <PRE class=example>     include <VAR>filenames</VAR>...
</PRE>
<P class=noindent><VAR>filenames</VAR> can contain shell file name patterns. If <VAR>filenames</VAR> is empty, nothing is included and no error is printed. <A name=index-shell-file-name-pattern-_0028in-_0040code_007binclude_007d_0029-78></A><A name=index-shell-wildcards-_0028in-_0040code_007binclude_007d_0029-79></A><A name=index-wildcard_002c-in-_0040code_007binclude_007d-80></A>Extra spaces are allowed and ignored at the beginning of the line, but the first character must not be a tab (or the value of <CODE>.RECIPEPREFIX</CODE>)&#8212;if the line begins with a tab, it will be considered a recipe line. Whitespace is required between <CODE>include</CODE> and the file names, and between file names; extra whitespace is ignored there and at the end of the directive. A comment starting with &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; is allowed at the end of the line. If the file names contain any variable or function references, they are expanded. See <A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables">How to Use Variables</A>. 
<P><FONT class=extract>For example, if you have three <SAMP><SPAN class=file>.mk</SPAN></SAMP> files, <SAMP><SPAN class=file>a.mk</SPAN></SAMP>, <SAMP><SPAN class=file>b.mk</SPAN></SAMP>, and <SAMP><SPAN class=file>c.mk</SPAN></SAMP>, and <CODE>$(bar)</CODE> expands to <CODE>bish bash</CODE>, then the following expression </FONT><PRE class=example><FONT class=extract>     include foo *.mk $(bar)
</FONT></PRE>
<P><FONT class=extract>is equivalent to </FONT><PRE class=example><FONT class=extract>     include foo a.mk b.mk c.mk bish bash
</FONT></PRE>
<P>When <CODE>make</CODE> processes an <CODE>include</CODE> directive, it suspends reading of the containing makefile and reads from each listed file in turn. When that is finished, <CODE>make</CODE> resumes reading the makefile in which the directive appears. 
<P>One occasion for using <CODE>include</CODE> directives is when several programs, handled by individual makefiles in various directories, need to use a common set of variable definitions (see <A href="https://www.gnu.org/software/make/manual/make.html#Setting">Setting Variables</A>) or pattern rules (see <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Rules">Defining and Redefining Pattern Rules</A>). 
<P>Another such occasion is when you want to generate prerequisites from source files automatically; the prerequisites can be put in a file that is included by the main makefile. This practice is generally cleaner than that of somehow appending the prerequisites to the end of the main makefile as has been traditionally done with other versions of <CODE>make</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Prerequisites">Automatic Prerequisites</A>. <A name=index-prerequisites_002c-automatic-generation-81></A><A name=index-automatic-generation-of-prerequisites-82></A><A name=index-generating-prerequisites-automatically-83></A><A name=index-g_t_0040code_007b_002dI_007d-84></A><A name=index-g_t_0040code_007b_002d_002dinclude_002ddir_007d-85></A><A name=index-included-makefiles_002c-default-directories-86></A><A name=index-default-directories-for-included-makefiles-87></A><A name=index-g_t_002fusr_002fgnu_002finclude-88></A><A name=index-g_t_002fusr_002flocal_002finclude-89></A><A name=index-g_t_002fusr_002finclude-90></A><FONT class=extract>If the specified name does not start with a slash, and the file is not found in the current directory, several other directories are searched. First, any directories you have specified with the &#8216;<SAMP><SPAN class=samp>-I</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--include-dir</SPAN></SAMP>&#8217; option are searched (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary"><FONT class=extract>Summary of Options</FONT></A><FONT class=extract>). Then the following directories (if they exist) are searched, in this order: <SAMP><VAR>prefix</VAR><SPAN class=file>/include</SPAN></SAMP> (normally <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP> </FONT><A href="https://www.gnu.org/software/make/manual/make.html#fn-1" rel=footnote name=fnd-1><SUP><FONT class=extract>1</FONT></SUP></A><FONT class=extract>) <SAMP><SPAN class=file>/usr/gnu/include</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/local/include</SPAN></SAMP>, <SAMP><SPAN class=file>/usr/include</SPAN></SAMP>.</FONT> 
<P><FONT class=extract>If an included makefile cannot be found in any of these directories, a warning message is generated, but it is not an immediately fatal error; processing of the makefile containing the <CODE>include</CODE> continues. Once it has finished reading makefiles, <CODE>make</CODE> will try to remake any that are out of date or don't exist. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles"><FONT class=extract>How Makefiles Are Remade</FONT></A><FONT class=extract>. Only after it has tried to find a way to remake a makefile and failed, will <CODE>make</CODE> diagnose the missing makefile as a fatal error.</FONT> 
<P><FONT class=extract>If you want <CODE>make</CODE> to simply ignore a makefile which does not exist or cannot be remade, with no error message, use the <CODE>-include</CODE><!-- /@w --> directive instead of <CODE>include</CODE>, like this: </FONT><PRE class=example><FONT class=extract>     -include <VAR>filenames</VAR>...</FONT>
</PRE>
<P>This acts like <CODE>include</CODE> in every way except that there is no error (not even a warning) if any of the <VAR>filenames</VAR> (or any prerequisites of any of the <VAR>filenames</VAR>) do not exist or cannot be remade. 
<P>For compatibility with some other <CODE>make</CODE> implementations, <CODE>sinclude</CODE> is another name for <CODE>-include</CODE><!-- /@w -->.