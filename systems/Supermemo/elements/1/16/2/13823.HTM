<H2 class=appendix>Appendix A Quick Reference</H2>
<P>This appendix summarizes the directives, text manipulation functions, and special variables which GNU <CODE>make</CODE> understands. See <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Targets</A>, <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Implicit Rules</A>, and <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Summary of Options</A>, for other summaries. 
<P>Here is a summary of the directives GNU <CODE>make</CODE> recognizes: 
<DL>
<DT><CODE>define </CODE><VAR>variable</VAR> 
<DT><CODE>define </CODE><VAR>variable</VAR><CODE> =</CODE> 
<DT><CODE>define </CODE><VAR>variable</VAR><CODE> :=</CODE> 
<DT><CODE>define </CODE><VAR>variable</VAR><CODE> ::=</CODE> 
<DT><CODE>define </CODE><VAR>variable</VAR><CODE> +=</CODE> 
<DT><CODE>define </CODE><VAR>variable</VAR><CODE> ?=</CODE> 
<DT><CODE>endef</CODE> 
<DD>Define multi-line variables.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Multi_002dLine">Multi-Line</A>. <BR>
<DT><CODE>undefine </CODE><VAR>variable</VAR> 
<DD>Undefining variables.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Undefine-Directive">Undefine Directive</A>. <BR>
<DT><CODE>ifdef </CODE><VAR>variable</VAR> 
<DT><CODE>ifndef </CODE><VAR>variable</VAR> 
<DT><CODE>ifeq (</CODE><VAR>a</VAR><CODE>,</CODE><VAR>b</VAR><CODE>)</CODE> 
<DT><CODE>ifeq "</CODE><VAR>a</VAR><CODE>" "</CODE><VAR>b</VAR><CODE>"</CODE> 
<DT><CODE>ifeq '</CODE><VAR>a</VAR><CODE>' '</CODE><VAR>b</VAR><CODE>'</CODE> 
<DT><CODE>ifneq (</CODE><VAR>a</VAR><CODE>,</CODE><VAR>b</VAR><CODE>)</CODE> 
<DT><CODE>ifneq "</CODE><VAR>a</VAR><CODE>" "</CODE><VAR>b</VAR><CODE>"</CODE> 
<DT><CODE>ifneq '</CODE><VAR>a</VAR><CODE>' '</CODE><VAR>b</VAR><CODE>'</CODE> 
<DT><CODE>else</CODE> 
<DT><CODE>endif</CODE> 
<DD>Conditionally evaluate part of the makefile.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Conditionals">Conditionals</A>. <BR>
<DT><CODE>include </CODE><VAR>file</VAR> 
<DT><CODE>-include </CODE><VAR>file</VAR> 
<DT><CODE>sinclude </CODE><VAR>file</VAR> 
<DD>Include another makefile.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Include">Including Other Makefiles</A>. <BR>
<DT><CODE>override </CODE><VAR>variable-assignment</VAR> 
<DD>Define a variable, overriding any previous definition, even one from the command line.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Override-Directive">The <CODE>override</CODE> Directive</A>. <BR>
<DT><CODE>export</CODE> 
<DD>Tell <CODE>make</CODE> to export all variables to child processes by default.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Communicating Variables to a Sub-<CODE>make</CODE></A>. <BR>
<DT><CODE>export </CODE><VAR>variable</VAR> 
<DT><CODE>export </CODE><VAR>variable-assignment</VAR> 
<DT><CODE>unexport </CODE><VAR>variable</VAR> 
<DD>Tell <CODE>make</CODE> whether or not to export a particular variable to child processes.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Communicating Variables to a Sub-<CODE>make</CODE></A>. <BR>
<DT><CODE>private </CODE><VAR>variable-assignment</VAR> 
<DD>Do not allow this variable assignment to be inherited by prerequisites.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Suppressing-Inheritance">Suppressing Inheritance</A>. <BR>
<DT><CODE>vpath </CODE><VAR>pattern</VAR> <VAR>path</VAR> 
<DD>Specify a search path for files matching a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; pattern.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Selective-Search">The <CODE>vpath</CODE> Directive</A>. <BR>
<DT><CODE>vpath </CODE><VAR>pattern</VAR> 
<DD>Remove all search paths previously specified for <VAR>pattern</VAR>. <BR>
<DT><CODE>vpath</CODE> 
<DD>Remove all search paths previously specified in any <CODE>vpath</CODE> directive. </DD></DL>
<P>Here is a summary of the built-in functions (see <A href="https://www.gnu.org/software/make/manual/make.html#Functions">Functions</A>): 
<DL>
<DT><CODE>$(subst </CODE><VAR>from</VAR><CODE>,</CODE><VAR>to</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Replace <VAR>from</VAR> with <VAR>to</VAR> in <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(patsubst </CODE><VAR>pattern</VAR><CODE>,</CODE><VAR>replacement</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Replace words matching <VAR>pattern</VAR> with <VAR>replacement</VAR> in <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(strip </CODE><VAR>string</VAR><CODE>)</CODE> 
<DD>Remove excess whitespace characters from <VAR>string</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(findstring </CODE><VAR>find</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Locate <VAR>find</VAR> in <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(filter </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Select words in <VAR>text</VAR> that match one of the <VAR>pattern</VAR> words.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(filter-out </CODE><VAR>pattern</VAR><CODE>...,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Select words in <VAR>text</VAR> that <EM>do not</EM> match any of the <VAR>pattern</VAR> words.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(sort </CODE><VAR>list</VAR><CODE>)</CODE> 
<DD>Sort the words in <VAR>list</VAR> lexicographically, removing duplicates.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(word </CODE><VAR>n</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Extract the <VAR>n</VAR>th word (one-origin) of <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(words </CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Count the number of words in <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(wordlist </CODE><VAR>s</VAR><CODE>,</CODE><VAR>e</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Returns the list of words in <VAR>text</VAR> from <VAR>s</VAR> to <VAR>e</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(firstword </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the first word of <VAR>names</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(lastword </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the last word of <VAR>names</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>. <BR>
<DT><CODE>$(dir </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the directory part of each file name.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(notdir </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the non-directory part of each file name.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(suffix </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the suffix (the last &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217; and following characters) of each file name.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(basename </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Extract the base name (name without suffix) of each file name.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(addsuffix </CODE><VAR>suffix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Append <VAR>suffix</VAR> to each word in <VAR>names</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(addprefix </CODE><VAR>prefix</VAR><CODE>,</CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>Prepend <VAR>prefix</VAR> to each word in <VAR>names</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(join </CODE><VAR>list1</VAR><CODE>,</CODE><VAR>list2</VAR><CODE>)</CODE> 
<DD>Join two parallel lists of words.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(wildcard </CODE><VAR>pattern</VAR><CODE>...)</CODE> 
<DD>Find file names matching a shell file name pattern (<EM>not</EM> a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; pattern).<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Wildcard-Function">The Function <CODE>wildcard</CODE></A>. <BR>
<DT><CODE>$(realpath </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>For each file name in <VAR>names</VAR>, expand to an absolute name that does not contain any <CODE>.</CODE>, <CODE>..</CODE>, nor symlinks.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(abspath </CODE><VAR>names</VAR><CODE>...)</CODE> 
<DD>For each file name in <VAR>names</VAR>, expand to an absolute name that does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, but preserves symlinks.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions">Functions for File Names</A>. <BR>
<DT><CODE>$(error </CODE><VAR>text</VAR><CODE>...)</CODE> 
<DD>When this function is evaluated, <CODE>make</CODE> generates a fatal error with the message <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Functions That Control Make</A>. <BR>
<DT><CODE>$(warning </CODE><VAR>text</VAR><CODE>...)</CODE> 
<DD>When this function is evaluated, <CODE>make</CODE> generates a warning with the message <VAR>text</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Make-Control-Functions">Functions That Control Make</A>. <BR>
<DT><CODE>$(shell </CODE><VAR>command</VAR><CODE>)</CODE> 
<DD>Execute a shell command and return its output.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Shell-Function">The <CODE>shell</CODE> Function</A>. <BR>
<DT><CODE>$(origin </CODE><VAR>variable</VAR><CODE>)</CODE> 
<DD>Return a string describing how the <CODE>make</CODE> variable <VAR>variable</VAR> was defined.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">The <CODE>origin</CODE> Function</A>. <BR>
<DT><CODE>$(flavor </CODE><VAR>variable</VAR><CODE>)</CODE> 
<DD>Return a string describing the flavor of the <CODE>make</CODE> variable <VAR>variable</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">The <CODE>flavor</CODE> Function</A>. <BR>
<DT><CODE>$(foreach </CODE><VAR>var</VAR><CODE>,</CODE><VAR>words</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Evaluate <VAR>text</VAR> with <VAR>var</VAR> bound to each word in <VAR>words</VAR>, and concatenate the results.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Foreach-Function">The <CODE>foreach</CODE> Function</A>. <BR>
<DT><CODE>$(if </CODE><VAR>condition</VAR><CODE>,</CODE><VAR>then-part</VAR><CODE>[,</CODE><VAR>else-part</VAR><CODE>])</CODE> 
<DD>Evaluate the condition <VAR>condition</VAR>; if it's non-empty substitute the expansion of the <VAR>then-part</VAR> otherwise substitute the expansion of the <VAR>else-part</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Functions for Conditionals</A>. <BR>
<DT><CODE>$(or </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> 
<DD>Evaluate each condition <VAR>conditionN</VAR> one at a time; substitute the first non-empty expansion. If all expansions are empty, substitute the empty string.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Functions for Conditionals</A>. <BR>
<DT><CODE>$(and </CODE><VAR>condition1</VAR><CODE>[,</CODE><VAR>condition2</VAR><CODE>[,</CODE><VAR>condition3</VAR><CODE>...]])</CODE> 
<DD>Evaluate each condition <VAR>conditionN</VAR> one at a time; if any expansion results in the empty string substitute the empty string. If all expansions result in a non-empty string, substitute the expansion of the last <VAR>condition</VAR>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Functions">Functions for Conditionals</A>. <BR>
<DT><CODE>$(call </CODE><VAR>var</VAR><CODE>,</CODE><VAR>param</VAR><CODE>,...)</CODE> 
<DD>Evaluate the variable <VAR>var</VAR> replacing any references to <CODE>$(1)</CODE>, <CODE>$(2)</CODE> with the first, second, etc. <VAR>param</VAR> values.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Call-Function">The <CODE>call</CODE> Function</A>. <BR>
<DT><CODE>$(eval </CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Evaluate <VAR>text</VAR> then read the results as makefile commands. Expands to the empty string.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">The <CODE>eval</CODE> Function</A>. <BR>
<DT><CODE>$(file </CODE><VAR>op</VAR> <VAR>filename</VAR><CODE>,</CODE><VAR>text</VAR><CODE>)</CODE> 
<DD>Expand the arguments, then open the file <VAR>filename</VAR> using mode <VAR>op</VAR> and write <VAR>text</VAR> to that file.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#File-Function">The <CODE>file</CODE> Function</A>. <BR>
<DT><CODE>$(value </CODE><VAR>var</VAR><CODE>)</CODE> 
<DD>Evaluates to the contents of the variable <VAR>var</VAR>, with no expansion performed on it.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Value-Function">The <CODE>value</CODE> Function</A>. </DD></DL>
<P>Here is a summary of the automatic variables. See <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>, for full information. 
<DL>
<DT><CODE>$@</CODE> 
<DD>The file name of the target. <BR>
<DT><CODE>$%</CODE> 
<DD>The target member name, when the target is an archive member. <BR>
<DT><CODE>$&lt;</CODE> 
<DD>The name of the first prerequisite. <BR>
<DT><CODE>$?</CODE> 
<DD>The names of all the prerequisites that are newer than the target, with spaces between them. For prerequisites which are archive members, only the named member is used (see <A href="https://www.gnu.org/software/make/manual/make.html#Archives">Archives</A>). <BR>
<DT><CODE>$^</CODE> 
<DT><CODE>$+</CODE> 
<DD>The names of all the prerequisites, with spaces between them. For prerequisites which are archive members, only the named member is used (see <A href="https://www.gnu.org/software/make/manual/make.html#Archives">Archives</A>). The value of <CODE>$^</CODE> omits duplicate prerequisites, while <CODE>$+</CODE> retains them and preserves their order. <BR>
<DT><CODE>$*</CODE> 
<DD>The stem with which an implicit rule matches (see <A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match">How Patterns Match</A>). <BR>
<DT><CODE>$(@D)</CODE> 
<DT><CODE>$(@F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$@</CODE>. <BR>
<DT><CODE>$(*D)</CODE> 
<DT><CODE>$(*F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$*</CODE>. <BR>
<DT><CODE>$(%D)</CODE> 
<DT><CODE>$(%F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$%</CODE>. <BR>
<DT><CODE>$(&lt;D)</CODE> 
<DT><CODE>$(&lt;F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$&lt;</CODE>. <BR>
<DT><CODE>$(^D)</CODE> 
<DT><CODE>$(^F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$^</CODE>. <BR>
<DT><CODE>$(+D)</CODE> 
<DT><CODE>$(+F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$+</CODE>. <BR>
<DT><CODE>$(?D)</CODE> 
<DT><CODE>$(?F)</CODE> 
<DD>The directory part and the file-within-directory part of <CODE>$?</CODE>. </DD></DL>
<P>These variables are used specially by GNU <CODE>make</CODE>: 
<DL>
<DT><CODE>MAKEFILES</CODE> 
<DD>Makefiles to be read on every invocation of <CODE>make</CODE>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#MAKEFILES-Variable">The Variable <CODE>MAKEFILES</CODE></A>. <BR>
<DT><CODE>VPATH</CODE> 
<DD>Directory search path for files not found in the current directory.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#General-Search"><CODE>VPATH</CODE> Search Path for All Prerequisites</A>. <BR>
<DT><CODE>SHELL</CODE> 
<DD>The name of the system default command interpreter, usually <SAMP><SPAN class=file>/bin/sh</SPAN></SAMP>. You can set <CODE>SHELL</CODE> in the makefile to change the shell used to run recipes. See <A href="https://www.gnu.org/software/make/manual/make.html#Execution">Recipe Execution</A>. The <CODE>SHELL</CODE> variable is handled specially when importing from and exporting to the environment. See <A href="https://www.gnu.org/software/make/manual/make.html#Choosing-the-Shell">Choosing the Shell</A>. <BR>
<DT><CODE>MAKESHELL</CODE> 
<DD>On MS-DOS only, the name of the command interpreter that is to be used by <CODE>make</CODE>. This value takes precedence over the value of <CODE>SHELL</CODE>. See <A href="https://www.gnu.org/software/make/manual/make.html#Execution">MAKESHELL variable</A>. <BR>
<DT><CODE>MAKE</CODE> 
<DD>The name with which <CODE>make</CODE> was invoked. Using this variable in recipes has special meaning. See <A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable">How the <CODE>MAKE</CODE> Variable Works</A>. <BR>
<DT><CODE>MAKE_VERSION</CODE> 
<DD>The built-in variable &#8216;<SAMP><SPAN class=samp>MAKE_VERSION</SPAN></SAMP>&#8217; expands to the version number of the GNU <CODE>make</CODE> program. <A name=index-MAKE_005fVERSION-1101></A><BR>
<DT><CODE>MAKE_HOST</CODE> 
<DD>The built-in variable &#8216;<SAMP><SPAN class=samp>MAKE_HOST</SPAN></SAMP>&#8217; expands to a string representing the host that GNU <CODE>make</CODE> was built to run on. <A name=index-MAKE_005fHOST-1102></A><BR>
<DT><CODE>MAKELEVEL</CODE> 
<DD>The number of levels of recursion (sub-<CODE>make</CODE>s).<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Variables_002fRecursion">Variables/Recursion</A>. <BR>
<DT><CODE>MAKEFLAGS</CODE> 
<DD>The flags given to <CODE>make</CODE>. You can set this in the environment or a makefile to set flags.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Communicating Options to a Sub-<CODE>make</CODE></A>. 
<P>It is <EM>never</EM> appropriate to use <CODE>MAKEFLAGS</CODE> directly in a recipe line: its contents may not be quoted correctly for use in the shell. Always allow recursive <CODE>make</CODE>'s to obtain these values through the environment from its parent. <BR></P>
<DT><CODE>GNUMAKEFLAGS</CODE> 
<DD>Other flags parsed by <CODE>make</CODE>. You can set this in the environment or a makefile to set <CODE>make</CODE> command-line flags. GNU <CODE>make</CODE> never sets this variable itself. This variable is only needed if you'd like to set GNU <CODE>make</CODE>-specific flags in a POSIX-compliant makefile. This variable will be seen by GNU <CODE>make</CODE> and ignored by other <CODE>make</CODE> implementations. It's not needed if you only use GNU <CODE>make</CODE>; just use <CODE>MAKEFLAGS</CODE> directly. See <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Communicating Options to a Sub-<CODE>make</CODE></A>. <BR>
<DT><CODE>MAKECMDGOALS</CODE> 
<DD>The targets given to <CODE>make</CODE> on the command line. Setting this variable has no effect on the operation of <CODE>make</CODE>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Goals">Arguments to Specify the Goals</A>. <BR>
<DT><CODE>CURDIR</CODE> 
<DD>Set to the pathname of the current working directory (after all <CODE>-C</CODE> options are processed, if any). Setting this variable has no effect on the operation of <CODE>make</CODE>.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Recursion">Recursive Use of <CODE>make</CODE></A>. <BR>
<DT><CODE>SUFFIXES</CODE> 
<DD>The default list of suffixes before <CODE>make</CODE> reads any makefiles. <BR>
<DT><CODE>.LIBPATTERNS</CODE> 
<DD>Defines the naming of the libraries <CODE>make</CODE> searches for, and their order.<BR>See <A href="https://www.gnu.org/software/make/manual/make.html#Libraries_002fSearch">Directory Search for Link Libraries</A>. </DD></DL>