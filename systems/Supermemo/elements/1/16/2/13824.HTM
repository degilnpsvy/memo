<H2 class=appendix>Appendix B Errors Generated by Make</H2>
<P>Here is a list of the more common errors you might see generated by <CODE>make</CODE>, and some information about what they mean and how to fix them. 
<P><FONT class=extract>Sometimes <CODE>make</CODE> errors are not fatal, especially in the presence of a <CODE>-</CODE> prefix on a recipe line, or the <CODE>-k</CODE> command line option. Errors that are fatal are prefixed with the string <CODE>***</CODE>.</FONT> 
<P>Error messages are all either prefixed with the name of the program (usually &#8216;<SAMP><SPAN class=samp>make</SPAN></SAMP>&#8217;), or, if the error is found in a makefile, the name of the file and line number containing the problem. 
<P>In the table below, these common prefixes are left off. 
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>[</SPAN><VAR>foo</VAR><SPAN class=samp>] Error </SPAN><VAR>NN</VAR></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>[</SPAN><VAR>foo</VAR><SPAN class=samp>] </SPAN><VAR>signal description</VAR></SAMP>&#8217; </FONT>
<DD><FONT class=extract>These errors are not really <CODE>make</CODE> errors at all. They mean that a program that <CODE>make</CODE> invoked as part of a recipe returned a non-0 error code (&#8216;<SAMP><SPAN class=samp>Error </SPAN><VAR>NN</VAR></SAMP>&#8217;), which <CODE>make</CODE> interprets as failure, or it exited in some other abnormal fashion (with a signal of some type). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Errors"><FONT class=extract>Errors in Recipes</FONT></A><FONT class=extract>. </FONT>
<P><FONT class=extract>If no <CODE>***</CODE> is attached to the message, then the sub-process failed but the rule in the makefile was prefixed with the <CODE>-</CODE> special character, so <CODE>make</CODE> ignored the error.</FONT> <BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing separator. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing separator (did you mean TAB instead of 8 spaces?). Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> could not understand much of anything about the makefile line it just read. GNU <CODE>make</CODE> looks for various separators (<CODE>:</CODE>, <CODE>=</CODE>, recipe prefix characters, etc.) to indicate what kind of line it's parsing. This message means it couldn't find a valid one. </FONT>
<P><FONT class=extract>One of the most common reasons for this message is that you (or perhaps your oh-so-helpful editor, as is the case with many MS-Windows editors) have attempted to indent your recipe lines with spaces instead of a tab character. In this case, <CODE>make</CODE> will use the second form of the error above. Remember that every line in the recipe must begin with a tab character (unless you set <CODE>.RECIPEPREFIX</CODE>; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>). Eight spaces do not count. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax"><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>.</FONT> <BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>recipe commences before first target. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing rule before recipe. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means the first thing in the makefile seems to be part of a recipe: it begins with a recipe prefix character and doesn't appear to be a legal <CODE>make</CODE> directive (such as a variable assignment). Recipes must always be associated with a target. </FONT>
<P><FONT class=extract>The second form is generated if the line has a semicolon as the first non-whitespace character; <CODE>make</CODE> interprets this to mean you left out the "target: prerequisite" section of a rule. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Rule-Syntax"><FONT class=extract>Rule Syntax</FONT></A><FONT class=extract>.</FONT> <BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No rule to make target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No rule to make target `</SPAN><VAR>xxx</VAR><SPAN class=samp>', needed by `</SPAN><VAR>yyy</VAR><SPAN class=samp>'.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> decided it needed to build a target, but then couldn't find any instructions in the makefile on how to do that, either explicit or implicit (including in the default rules database). </FONT>
<P><FONT class=extract>If you want that file to be built, you will need to add a rule to your makefile describing how that target can be built. Other possible sources of this problem are typos in the makefile (if that file name is wrong) or a corrupted source tree (if that file is not supposed to be built, but rather only a prerequisite).</FONT> <BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No targets specified and no makefile found. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>No targets. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The former means that you didn't provide any targets to be built on the command line, and <CODE>make</CODE> couldn't find any makefiles to read in. The latter means that some makefile was found, but it didn't contain any default goal and none was given on the command line. GNU <CODE>make</CODE> has nothing to do in these situations. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefile-Arguments"><FONT class=extract>Arguments to Specify the Makefile</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Makefile `</SPAN><VAR>xxx</VAR><SPAN class=samp>' was not found.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Included makefile `</SPAN><VAR>xxx</VAR><SPAN class=samp>' was not found.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>A makefile specified on the command line (first form) or included (second form) was not found. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: overriding recipe for target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: ignoring old recipe for target `</SPAN><VAR>xxx</VAR><SPAN class=samp>'</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>GNU <CODE>make</CODE> allows only one recipe to be specified per target (except for double-colon rules). If you give a recipe for a target which already has been defined to have one, this warning is issued and the second recipe will overwrite the first. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Multiple-Rules"><FONT class=extract>Multiple Rules for One Target</FONT></A><FONT class=extract>.</FONT> <BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Circular </SPAN><VAR>xxx</VAR><SPAN class=samp> &lt;- </SPAN><VAR>yyy</VAR><SPAN class=samp> dependency dropped.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means that <CODE>make</CODE> detected a loop in the dependency graph: after tracing the prerequisite <VAR>yyy</VAR> of target <VAR>xxx</VAR>, and its prerequisites, etc., one of them depended on <VAR>xxx</VAR> again.</FONT> <BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Recursive variable `</SPAN><VAR>xxx</VAR><SPAN class=samp>' references itself (eventually). Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you've defined a normal (recursive) <CODE>make</CODE> variable <VAR>xxx</VAR> that, when it's expanded, will refer to itself (<VAR>xxx</VAR>). This is not allowed; either use simply-expanded variables (&#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>::=</SPAN></SAMP>&#8217;) or use the append operator (&#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;). See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Using-Variables"><FONT class=extract>How to Use Variables</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>Unterminated variable reference. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you forgot to provide the proper closing parenthesis or brace in your variable or function reference.</FONT> <BR>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>insufficient arguments to function `</SPAN><VAR>xxx</VAR><SPAN class=samp>'. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This means you haven't provided the requisite number of arguments for this function. See the documentation of the function for a description of its arguments. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Functions"><FONT class=extract>Functions for Transforming Text</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>missing target pattern. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>multiple target patterns. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>target pattern contains no `%'. Stop.</SPAN></SAMP>&#8217; </FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>mixed implicit and static pattern rules. Stop.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>These are generated for malformed static pattern rules. The first means there's no pattern in the target section of the rule; the second means there are multiple patterns in the target section; the third means the target doesn't contain a pattern character (<CODE>%</CODE>); and the fourth means that all three parts of the static pattern rule contain pattern characters (<CODE>%</CODE>)&#8211;only the first two parts should. If you see these errors and you aren't trying to create a static pattern rule, check the value of any variables in your target and prerequisite lists to be sure they do not contain colons. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Static-Usage"><FONT class=extract>Syntax of Static Pattern Rules</FONT></A><FONT class=extract>. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: -jN forced in submake: disabling jobserver mode.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>This warning and the next are generated if <CODE>make</CODE> detects error conditions related to parallel processing on systems where sub-<CODE>make</CODE>s can communicate (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion"><FONT class=extract>Communicating Options to a Sub-<CODE>make</CODE></FONT></A><FONT class=extract>). This warning is generated if a recursive invocation of a <CODE>make</CODE> process is forced to have &#8216;<SAMP><SPAN class=samp>-j</SPAN><VAR>N</VAR></SAMP>&#8217; in its argument list (where <VAR>N</VAR> is greater than one). This could happen, for example, if you set the <CODE>MAKE</CODE> environment variable to &#8216;<SAMP><SPAN class=samp>make -j2</SPAN></SAMP>&#8217;. In this case, the sub-<CODE>make</CODE> doesn't communicate with other <CODE>make</CODE> processes and will simply pretend it has two jobs of its own. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>warning: jobserver unavailable: using -j1. Add `+' to parent make rule.</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>In order for <CODE>make</CODE> processes to communicate, the parent will pass information to the child. Since this could result in problems if the child process isn't actually a <CODE>make</CODE>, the parent will only do this if it thinks the child is a <CODE>make</CODE>. The parent uses the normal algorithms to determine this (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#MAKE-Variable"><FONT class=extract>How the <CODE>MAKE</CODE> Variable Works</FONT></A><FONT class=extract>). If the makefile is constructed such that the parent doesn't know the child is a <CODE>make</CODE> process, then the child will receive only part of the information necessary. In this case, the child will generate this warning message and proceed with its build in a sequential manner.</FONT> </DD></DL>