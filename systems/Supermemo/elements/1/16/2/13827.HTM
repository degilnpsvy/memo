<H4 class=subsection>3.1.1 Splitting Long Lines</H4>
<P><A name=index-splitting-long-lines-57></A><A name=index-long-lines_002c-splitting-58></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-newlines-59></A>Makefiles use a &#8220;line-based&#8221; syntax in which the newline character is special and marks the end of a statement. GNU <CODE>make</CODE> has no limit on the length of a statement line, up to the amount of memory in your computer. 
<P>However, it is difficult to read lines which are too long to display without wrapping or scrolling. <FONT class=extract>So, you can format your makefiles for readability by adding newlines into the middle of a statement: you do this by escaping the internal newlines with a backslash (<CODE>\</CODE>) character.</FONT> Where we need to make a distinction we will refer to &#8220;physical lines&#8221; as a single line ending with a newline (regardless of whether it is escaped) and a &#8220;logical line&#8221; being a complete statement including all escaped newlines up to the first non-escaped newline. 
<P>The way in which backslash/newline combinations are handled depends on whether the statement is a recipe line or a non-recipe line. Handling of backslash/newline in a recipe line is discussed later (see <A href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A>). 
<P>Outside of recipe lines, backslash/newlines are converted into a single space character. Once that is done, all whitespace around the backslash/newline is condensed into a single space: this includes all whitespace preceding the backslash, all whitespace at the beginning of the line after the backslash/newline, and any consecutive backslash/newline combinations. 
<P>If the <CODE>.POSIX</CODE> special target is defined then backslash/newline handling is modified slightly to conform to POSIX.2: first, whitespace preceding a backslash is not removed and second, consecutive backslash/newlines are not condensed.