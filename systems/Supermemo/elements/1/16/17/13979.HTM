<H4 class=subheading>Secondary Expansion of Implicit Rules</H4>
<P><A name=index-secondary-expansion-and-implicit-rules-125></A><A name=index-implicit-rules_002c-secondary-expansion-of-126></A>As <CODE>make</CODE> searches for an implicit rule, it substitutes the stem and then performs secondary expansion for every rule with a matching target pattern. The value of the automatic variables is derived in the same fashion as for static pattern rules. As an example: <PRE class=example>     .SECONDEXPANSION:
     
     foo: bar
     
     foo foz: fo%: bo%
     
     %oo: $$&lt; $$^ $$+ $$*
</PRE>
<P>When the implicit rule is tried for target <SAMP><SPAN class=file>foo</SPAN></SAMP>, <CODE>$$&lt;</CODE> expands to <SAMP><SPAN class=file>bar</SPAN></SAMP>, <CODE>$$^</CODE> expands to <SAMP><SPAN class=file>bar boo</SPAN></SAMP>, <CODE>$$+</CODE> also expands to <SAMP><SPAN class=file>bar boo</SPAN></SAMP>, and <CODE>$$*</CODE> expands to <SAMP><SPAN class=file>f</SPAN></SAMP>. 
<P>Note that the directory prefix (D), as described in <A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search">Implicit Rule Search Algorithm</A>, is appended (after expansion) to all the patterns in the prerequisites list. As an example: <PRE class=example>     .SECONDEXPANSION:
     
     /tmp/foo.o:
     
     %.o: $$(addsuffix /%.c,foo bar) foo.h
             @echo $^
</PRE>
<P>The prerequisite list printed, after the secondary expansion and directory prefix reconstruction, will be <SAMP><SPAN class=file>/tmp/foo/foo.c /tmp/bar/foo.c foo.h</SPAN></SAMP>. If you are not interested in this reconstruction, you can use <CODE>$$*</CODE> instead of <CODE>%</CODE> in the prerequisites list.