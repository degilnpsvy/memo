<H4 class=subheading>Secondary Expansion of Explicit Rules</H4>
<P><A name=index-secondary-expansion-and-explicit-rules-121></A><A name=index-explicit-rules_002c-secondary-expansion-of-122></A><FONT class=extract>During the secondary expansion of explicit rules, <CODE>$$@</CODE> and <CODE>$$%</CODE> evaluate, respectively, to the file name of the target and, when the target is an archive member, the target member name. The <CODE>$$&lt;</CODE> variable evaluates to the first prerequisite in the first rule for this target. <CODE>$$^</CODE> and <CODE>$$+</CODE> evaluate to the list of all prerequisites of rules <EM>that have already appeared</EM> for the same target (<CODE>$$+</CODE> with repetitions and <CODE>$$^</CODE> without).</FONT> The following example will help illustrate these behaviors: <PRE class=example><FONT class=extract>     .SECONDEXPANSION:
     
     foo: foo.1 bar.1 $$&lt; $$^ $$+    # line #1
     
     foo: foo.2 bar.2 $$&lt; $$^ $$+    # line #2
     
     foo: foo.3 bar.3 $$&lt; $$^ $$+    # line #3
</FONT></PRE>
<P><FONT class=extract>In the first prerequisite list, all three variables (<CODE>$$&lt;</CODE>, <CODE>$$^</CODE>, and <CODE>$$+</CODE>) expand to the empty string. In the second, they will have values <CODE>foo.1</CODE>, <CODE>foo.1 bar.1</CODE>, and <CODE>foo.1 bar.1</CODE> respectively. In the third they will have values <CODE>foo.1</CODE>, <CODE>foo.1 bar.1 foo.2 bar.2</CODE>, and <CODE>foo.1 bar.1 foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1</CODE> respectively.</FONT> 
<P><FONT class=extract>Rules undergo secondary expansion in makefile order, except that the rule with the recipe is always evaluated last. </FONT>
<P><FONT class=extract>The variables <CODE>$$?</CODE> and <CODE>$$*</CODE> are not available and expand to the empty string.</FONT>