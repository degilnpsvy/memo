<FONT class=extract>Memory can be a bit confusing though, because the CPU has two memory addressing modes, Real mode and Protected mode.</FONT> 
<P></P>
<P><FONT class=extract>Real mode was the only method available on the 8086 and is still the primary addressing mode used in DOS. Unfortunately, real mode only provides access to the first 1 MB of memory.</FONT> </P>
<P><FONT class=extract>Protected mode is used on the 80286 and up to allow access to more memory. (There are also other details such as protection, virtual memory, and other aspects not particularly applicable to this discussion.)</FONT> </P>
<P><FONT class=extract>Memory is accessed by the 80x86 processors using segments and offsets. Segments tell the memory management unit where in memory is located, and the offset is the displacement from that address. In real mode offsets are limited to 64K, because of the 16-bit nature of the 8086. In protected mode, segments can be any size up to the full address capability of the machine. Segments are accessed via special segment registers in the processor. In real mode, the segment address is shifted left four bits and added to the offset, allowing for a 20 bit address (20 bits = 1 MB); in protected mode segments are offsets into a table in memory which tells where the segment is located. Your particular programming environment may create code for real and/or protected mode, and it is important to know which mode is being used.</FONT> </P>
<P>An added difficulty is the fact that protected mode provides for I/O and memory protection (hence protected mode), in order to allow multiple programs to share one processor and prevent them from corrupting other processes. This means that you may need to interact with the operating system to gain rights to access the hardware directly. If you write your own protected mode handler for DOS or are using a DOS extender, then this should be simple, but it is much more complicated under multi-tasking operating systems such as Windows or Linux.