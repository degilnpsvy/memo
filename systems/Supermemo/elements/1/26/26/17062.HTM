drm_gem_mmap_obj<BR>Prev &nbsp;GEM Function Reference&nbsp; Next<BR>Name</P>
<P>drm_gem_mmap_obj &#8212; memory map a GEM object<BR>Synopsis<BR>int drm_gem_mmap_obj (&nbsp;struct drm_gem_object * obj,<BR>&nbsp;&nbsp;unsigned long obj_size,<BR>&nbsp;&nbsp;struct vm_area_struct * vma);<BR>&nbsp;<BR>Arguments</P>
<P>obj</P>
<P>&nbsp;&nbsp;&nbsp; the GEM object to map <BR>obj_size</P>
<P>&nbsp;&nbsp;&nbsp; the object size to be mapped, in bytes <BR>vma</P>
<P>&nbsp;&nbsp;&nbsp; VMA for the area to be mapped </P>
<P>Description</P>
<P>Set up the VMA to prepare mapping of the GEM object using the gem_vm_ops provided by the driver. Depending on their requirements, drivers can either provide a fault handler in their gem_vm_ops (in which case any accesses to the object will be trapped, to perform migration, GTT binding, surface register allocation, or performance monitoring), or mmap the buffer memory synchronously after calling drm_gem_mmap_obj.</P>
<P>This function is mainly intended to implement the DMABUF mmap operation, when the GEM object is not looked up based on its fake offset. To implement the DRM mmap operation, drivers should use the drm_gem_mmap function.</P>
<P>drm_gem_mmap_obj assumes the user is granted access to the buffer while drm_gem_mmap prevents unprivileged users from mapping random objects. So callers must verify access restrictions before calling this helper.<BR>NOTE</P>
<P>This function has to be protected with dev-&gt;struct_mutex</P>
<P>Return 0 or success or -EINVAL if the object size is smaller than the VMA size, or if no gem_vm_ops are provided.<BR>Prev &nbsp;Up&nbsp; Next<BR>drm_gem_object_free &nbsp;Home&nbsp; drm_gem_mmap