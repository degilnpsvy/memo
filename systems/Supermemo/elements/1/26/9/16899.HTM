<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><B>Accessing the Attribute Registers</B><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The attribute registers are also accessed in an indexed fashion, albeit in a more confusing way. The address register is read and written via port 3C0h. The data register is written to port 3C0h and read from port 3C1h. The index and the data are written to the same port, one after another. A flip-flop inside the card keeps track of whether the next write will be handled is an index or data. Because there is no standard method of determining the state of this flip-flop, the ability to reset the flip-flop such that the next write will be handled as an index is provided. This is accomplished by reading the Input Status #1 Register (normally port 3DAh) (the data received is not important.) This can cause problems with interrupts because there is no standard way to find out what the state of the flip-flop is; therefore interrupt routines require special card when reading this register. (Especially since the Input Status #1 Register's purpose is to determine whether a horizontal or vertical retrace is in progress, something likely to be read by an interrupt routine that deals with the display.) If an interrupt were to read 3DAh in the middle of writing to an address/data pair, then the flip-flop would be reset and the data would be written to the address register instead. Any further writes would also be handled incorrectly and thus major corruption of the registers could occur. To read and write an data register in the attribute register group, perform the following procedure:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Input a value from the Input Status #1 Register (normally port 3DAh) and discard it. 
<LI>Read the value of the Address/Data Register and save it for step 7. 
<LI>Output the index of the desired Data Register to the Address/Data Register 
<LI>Read the value of the Data Register and save it for later restoration upon termination, if needed. 
<LI>If writing, modify the value read in step 4, making sure to mask off bits not being modified. 
<LI>If writing, write the new value from step 5 to the Address/Data register. 
<LI>Write the value of Address register saved in step 1 to the Address/Data Register. 
<LI>If you wish to leave the register waiting for an index, input a value from the Input Status #1 Register (normally port 3DAh) and discard it.</LI></OL><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If you have control over interrupts, then you can disable interrupts while in the middle of writing to the register. If not, then you may be able to implement a critical section where you use a byte in memory as a flag whether it is safe to modify the attribute registers and have your interrupt routine honor this. And again, it pays to be paranoid. Resetting the flip-flop even though it<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><B style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">should</B><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>be in the reset state already helps prevent catastrophic problems. Also, you might want to read back and compare the bytes written in step 3, 6, and 7 as in the<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" href="http://web.stanford.edu/class/cs140/projects/pintos/specs/freevga/vga/vgareg.htm#paranoia">Paranoia</A><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>section above.<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On the IBM VGA implementation, an undocumented register (CRTC Index=24h, bit 7) can be read to determine the status of the flip-flop (0=address,1=data) and many VGA compatible chipsets duplicate this behavior, but it is not guaranteed. However, it is a simple matter to determine if this is the case. Also, some SVGA chipsets provide the ability to access the attribute registers in the same fashion as the CRT, Sequencer, and Graphics controllers. Because this functionality is vendor specific it is really only useful when programming for that particular chipset. To determine if this undocumented bit is supported, perform the following procedure:</SPAN> 
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Input a value from the Input Status #1 Register (normally port 3DAh) and discard it. 
<LI>Verify that the flip-flop status bit (CRTC Index 24, bit 7) is 0. If bit=1 then feature is not supported, else continue to step 3. 
<LI>Output an address value to the Attribute Address/Data register. 
<LI>Verify that the flip-flop status bit (CRTC Index 24, bit 7) is 1. If bit=0 then feature is not supported, else continue to step 5. 
<LI>Input a value from the Input Status #1 Register (normally port 3DAh) and discard it. 
<LI>Verify that the flip-flop status bit (CRTC Index 24, bit 7) is 0. If bit=1 then feature is not supported, else feature is supported.</LI></OL>