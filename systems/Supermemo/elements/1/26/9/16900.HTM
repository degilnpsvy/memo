<B style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Accessing the Color Registers</B><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&nbsp;&nbsp;&nbsp;&nbsp; The color registers require an altogether different technique; this is because the 256-color palette requires 3 bytes to store 18-bit color values. In addition the hardware supports the capability to load all or portions of the palette rapidly. To write to the palette, first you must output the value of the palette entry to the PEL Address Write Mode Register (port 3C8h.) Then you should output the component values to the PEL Data Register (port 3C9h), in the order red, green, then blue. The PEL Address Write Mode Register will then automatically increment, allowing the component values of the palette entry to be written to the PEL Data Register. Reading is performed similarly, except that the PEL Address Read Mode Register (port 3C7h) is used to specify the palette entry to be read, and the values are read from the PEL Data Register. Again, the PEL Address Read Mode Register auto-increments after each triplet is written. The current index for the current operation can be read from the PEL Address Write Mode Register. Reading port 3C7h gives the DAC State Register, which specifies whether a read operation or a write operation is in effect. As in the attribute registers, there is guaranteed way for an interrupt routine to access the color registers and return the color registers to the state they were in prior to access without some communication between the ISR and the main program. For some workarounds see the<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" href="http://web.stanford.edu/class/cs140/projects/pintos/specs/freevga/vga/vgareg.htm#attribute">Accessing the Attribute Registers</A><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>section above. To read the color registers:</SPAN> 
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Read the DAC State Register and save the value for use in step 8. 
<LI>Read the PEL Address Write Mode Register for use in step 8. 
<LI>Output the value of the first color entry to be read to the PEL Address Read Mode Register. 
<LI>Read the PEL Data Register to obtain the red component value. 
<LI>Read the PEL Data Register to obtain the green component value. 
<LI>Read the PEL Data Register to obtain the blue component value. 
<LI>If more colors are to be read, repeat steps 4-6. 
<LI>Based upon the DAC State from step 1, write the value saved in step 2 to either the PEL Address Write Mode Register or the PEL Address Read Mode Register.</LI></OL><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note: Steps 1, 2, and 8 are hopelessly optimistic. This in no way guarantees that the state is preserved, and with some DAC implementations this may actually guarantee that the state is never preserved. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" href="http://web.stanford.edu/class/cs140/projects/pintos/specs/freevga/vga/vgadac.htm">DAC Operation</A><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>page for more details.</SPAN>