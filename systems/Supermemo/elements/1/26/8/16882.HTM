<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>Seven Virtues of a Good Object</FONT></SPAN></B></P>
<UL style="MARGIN-TOP: 0cm" type=disc>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>20 November 2014&nbsp;</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt" class=MsoNormal><SPAN lang=EN-US><A href="https://github.com/yegor256/blog/commits/master/_posts/2014/nov/2014-11-20-seven-virtues-of-good-object.md"><FONT color=#0000ff size=6 face=Calibri>modified</FONT></A><FONT size=6 face=Calibri>&nbsp;on&nbsp;22 January 2015</FONT></SPAN><FONT size=6> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l0 level1 lfo1; tab-stops: list 36.0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;&nbsp;</FONT><A href="http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html#disqus_thread"><FONT color=#0000ff size=6 face=Calibri>53 comments</FONT></A></SPAN></LI></UL>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><A href="http://www.yegor256.com/tag/oop.html"><FONT color=#0000ff size=6 face=Calibri>oop</FONT></A></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><A title="Share on Facebook" href="http://www.facebook.com/sharer/sharer.php?u=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html"><FONT color=#0000ff size=6 face=Calibri>&nbsp;</FONT></A><A title="Share on Twitter" href="https://twitter.com/share?url=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html&amp;text=Seven+Virtues+of+a+Good+Object"><FONT color=#0000ff size=6 face=Calibri>&nbsp;</FONT></A><A title="Share on Google+" href="https://plus.google.com/share?url=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html"><FONT color=#0000ff size=6 face=Calibri>&nbsp;</FONT></A><A title="Share on LinkedIn" href="https://www.linkedin.com/cws/share?url=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html"><FONT color=#0000ff size=6 face=Calibri>21&nbsp;</FONT></A><A title="Share on StumbleUpon" href="http://www.stumbleupon.com/submit?url=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html&amp;title=Seven+Virtues+of+a+Good+Object"><FONT color=#0000ff size=6 face=Calibri>12&nbsp;</FONT></A><A title="Share on Reddit" href="http://reddit.com/submit?url=http://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html%3F2014-46&amp;title=Seven+Virtues+of+a+Good+Object"><FONT color=#0000ff size=6 face=Calibri>2&nbsp;</FONT></A></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Martin Fowler&nbsp;</FONT><A href="http://martinfowler.com/bliki/InversionOfControl.html"><FONT color=#0000ff size=6 face=Calibri>says</FONT></A><FONT size=6 face=Calibri>:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><I><SPAN lang=EN-US><FONT size=6 face=Calibri>A library is essentially a set of functions that you can call, these days usually organized into classes.</FONT></SPAN></I></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Functions organized into classes? With all due respect, this is wrong. And it is a very common misconception of a class in object-oriented programming. Classes are not organizers of functions. And objects are not data structures.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>So what is a "proper" object? Which one is not a proper one? What is the difference? Even though it is a very polemic subject, it is very important. Unless we understand what an object is, how can we write object-oriented software? Well, thanks to Java, Ruby, and others, we can. But how good will it be? Unfortunately, this is not an exact science, and there are many opinions. Here is my list of qualities of a good object.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>Class vs. Object</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Before we start talking about objects, let's define what a&nbsp;<I>class</I>&nbsp;is. It is a place where objects are being born (a.k.a.<I>instantiated</I>). The main responsibility of a class is to&nbsp;<I>construct</I>&nbsp;new objects on demand and&nbsp;<I>destruct</I>&nbsp;them when they are not used anymore. A class knows how its children should look and how they should behave. In other words, it knows what&nbsp;<I>contracts</I>&nbsp;they should obey.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Sometimes I hear classes being called "object templates" (for example,</FONT><A href="https://en.wikipedia.org/wiki/Class_%28computer_programming%29"><FONT color=#0000ff size=6 face=Calibri>Wikipedia says so</FONT></A><FONT size=6 face=Calibri>). This definition is not correct because it places classes into a passive position. This definition assumes that someone will get a template and build an object by using it. This may be true, technically speaking, but conceptually it's wrong. Nobody else should be involved &#8212; there are only a class and its children. An object asks a class to create another object, and the class constructs it; that's it. Ruby expresses this concept much better than Java or C++:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>photo = File.new('/tmp/photo.png')</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>The object&nbsp;photo&nbsp;is constructed by the class&nbsp;File&nbsp;(new&nbsp;is an entry point to the class). Once constructed, the object is acting on its own. It shouldn't know who constructed it and how many more brothers and sisters it has in the class. Yes, I mean that&nbsp;</FONT><A href="https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29"><FONT color=#0000ff size=6 face=Calibri>reflection</FONT></A><FONT size=6 face=Calibri>&nbsp;is a terrible idea, but I'll write more about it in one of the next posts :) Now, let's talk about objects and their best and worst sides.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>1. He Exists in Real Life</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>First of all, an object is a&nbsp;<B>living organism</B>. Moreover, an object should be</FONT><A href="https://en.wikipedia.org/wiki/Anthropomorphism"><FONT color=#0000ff size=6 face=Calibri>anthropomorphized</FONT></A><FONT size=6 face=Calibri>, i.e. treated like a human being (or a pet, if you like them more). By this I basically mean that an object is not a&nbsp;<I>data structure</I>&nbsp;or a collection of functions. Instead, it is an independent entity with its own life cycle, its own behavior, and its own habits.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>An employee, a department, an HTTP request, a table in MySQL, a line in a file, or a file itself are proper objects &#8212; because they exist in real life, even when our software is turned off. To be more precise, an object is a&nbsp;<I>representative</I>&nbsp;of a real-life creature. It is a&nbsp;<I>proxy</I>&nbsp;of that real-life creature in front of all other objects. Without such a creature, there is &#8212; obviously &#8212; no object.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>photo = File.new('/tmp/photo.png')</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>puts photo.width()</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>In this example, I'm asking&nbsp;File&nbsp;to construct a new object&nbsp;photo, which will be a representative of a real file on disk. You may say that a file is also something virtual and exists only when the computer is turned on. I would agree and refine the definition of "real life" as follows: It is everything that exists aside from the scope of the program the object lives in. The disk file is outside the scope of our program; that's why it is perfectly correct to create its representative inside the program.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A controller, a parser, a filter, a validator, a service locator, a singleton, or a factory are&nbsp;<B>not</B>&nbsp;good objects (yes, most GoF patterns are anti-patterns!). They don't exist apart from your software, in real life. They are invented just to tie other objects together. They are artificial and fake creatures. They don't represent anyone. Seriously, an XML parser &#8212; who does it represent? Nobody.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Some of them may become good if they change their names; others can never excuse their existence. For example, that XML parser can be renamed to "parseable XML" and start to represent an XML document that exists outside of our scope.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Always ask yourself, "What is the real-life entity behind my object?" If you can't find an answer, start thinking about refactoring.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>2. He Works by Contracts</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A good object always works by contracts. He expects to be hired not because of his personal merits but because he obeys the contracts. On the other hand, when we hire an object, we shouldn't discriminate and expect some specific object from a specific class to do the work for us. We should expect&nbsp;<I>any</I>&nbsp;object to do what our contract says. As long as the object does what we need, we should not be interested in his class of origin, his sex, or his religion.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>For example, I need to show a photo on the screen. I want that photo to be read from a file in PNG format. I'm contracting an object from classDataFile&nbsp;and asking him to give me the binary content of that image.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>But wait, do I care where exactly the content will come from &#8212; the file on disk, or an HTTP request, or maybe a document in Dropbox? Actually, I don't. All I care about is that some object gives me a byte array with PNG content. So my contract would look like this:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>interface</SPAN></B><SPAN lang=EN-US> Binary {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>byte</B>[] read();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Now, any object from any class (not just&nbsp;DataFile) can work for me. All he has to do, in order to be eligible, is to obey the contract &#8212; by implementing the interface&nbsp;Binary.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>The rule here is simple: every public method in a good object should implement his counterpart from an interface. If your object has public methods that are not inherited from any interface, he is badly designed.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>There are two practical reasons for this. First, an object working without a contract is impossible to mock in a unit test. Second, a contractless object is impossible to extend via&nbsp;</FONT><A href="https://en.wikipedia.org/wiki/Decorator_pattern"><FONT color=#0000ff size=6 face=Calibri>decoration</FONT></A><FONT size=6 face=Calibri>.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>3. He Is Unique</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A good object should always encapsulate something in order to be unique. If there is nothing to encapsulate, an object may have identical clones, which I believe is bad. Here is an example of a bad object, which may have clones:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>class</SPAN></B><SPAN lang=EN-US> HTTPStatus <B>implements</B> Status {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>private</B> URL page = new URL("http://www.google.com");</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>int</B> read() <B>throws</B> IOException {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return HttpURLConnection.class.cast(</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>this.page.openConnection()</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>).getResponseCode();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>I can create a few instances of class&nbsp;HTTPStatus, and all of them will be equal to each other:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>first = new HTTPStatus();</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>second = new HTTPStatus();</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>assert first.equals(second);</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Obviously utility classes, which have only static methods, can't instantiate good objects. More generally, utility classes don't have any of the merits mentioned in this article and can't even be called "classes". They are simply terrible abusers of an object paradigm and exist in modern object-oriented languages only because their inventors enabled static methods.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>4. He Is Immutable</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A good object should never change his encapsulated state. Remember, an object is a representative of a real-life entity, and this entity should stay the same through the entire life of the object. In other words, an object should never betray those whom he represents. He should never change owners. :)</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Be aware that immutability doesn't mean that all methods always return the same values. Instead, a good immutable object is very dynamic. However, he never changes his internal state. For example:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>@Immutable</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>final</SPAN></B><SPAN lang=EN-US> <B>class</B> HTTPStatus <B>implements</B> Status {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>private</B> URL page;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> HTTPStatus(URL url) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>this.page = url;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>int</B> read() <B>throws</B> IOException {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return HttpURLConnection.class.cast(</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>this.page.openConnection()</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>).getResponseCode();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Even though the method&nbsp;read()&nbsp;may return different values, the object is immutable. He points to a certain web page and will never point anywhere else. He will never change his encapsulated state, and he will never betray the URL he represents.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Why is immutability a virtue? This article explains in detail:&nbsp;</FONT><A href="http://www.yegor256.com/2014/06/09/objects-should-be-immutable.html"><FONT color=#0000ff size=6 face=Calibri>Objects Should Be Immutable</FONT></A><FONT size=6 face=Calibri>. In a nutshell, immutable objects are better because:</FONT></SPAN></P>
<UL style="MARGIN-TOP: 0cm" type=disc>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>Immutable objects are simpler to construct, test, and use.</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>Truly immutable objects are always thread-safe.</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>They help avoid temporal coupling.</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>Their usage is side-effect free (no defensive copies).</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>They always have failure atomicity.</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><FONT size=6><SPAN lang=EN-US><FONT face=Calibri>They are much easier to cache.</FONT></SPAN> </FONT>
<LI style="MARGIN: 0cm 0cm 0pt; mso-list: l1 level1 lfo2; tab-stops: list 36.0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>They prevent&nbsp;</FONT><A href="http://www.yegor256.com/2014/05/13/why-null-is-bad.html"><FONT color=#0000ff size=6 face=Calibri>NULL references</FONT></A><FONT size=6 face=Calibri>.</FONT></SPAN></LI></UL>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Of course, a good object doesn't have&nbsp;</FONT><A href="http://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html"><FONT color=#0000ff size=6 face=Calibri>setters</FONT></A><FONT size=6 face=Calibri>, which may change his state and force him to betray the URL. In other words, introducing a&nbsp;setURL()method would be a terrible mistake in class&nbsp;HTTPStatus.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Besides all that, immutable objects will force you to make more cohesive, solid, and understandable designs, as this article explains:&nbsp;</FONT><A href="http://www.yegor256.com/2014/11/07/how-immutability-helps.html"><FONT color=#0000ff size=6 face=Calibri>How Immutability Helps</FONT></A><FONT size=6 face=Calibri>.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>5. His Class Doesn't Have Anything Static</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A static method implements a behavior of a class, not an object. Let's say we have class&nbsp;File, and his children have method&nbsp;size():</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>final</SPAN></B><SPAN lang=EN-US> <B>class</B> File <B>implements</B> Measurable {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>int</B> size() {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>// calculate the size of the file and return</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>So far, so good; the method&nbsp;size()&nbsp;is there because of the contractMeasurable, and every object of class&nbsp;File&nbsp;will be able to measure his size. A terrible mistake would be to design this class with a static method instead (this design is also known as&nbsp;</FONT><A href="http://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html"><FONT color=#0000ff size=6 face=Calibri>a utility class</FONT></A><FONT size=6 face=Calibri>&nbsp;and is very popular in Java, Ruby, and almost every OOP language):</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>// TERRIBLE DESIGN, DON'T USE!</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>class</SPAN></B><SPAN lang=EN-US> File {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>static</B> <B>int</B> size(String file) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>// calculate the size of the file and return</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>This design runs completely against the object-oriented paradigm. Why? Because static methods turn object-oriented programming into "class-oriented" programming. This method,&nbsp;size(), exposes the behavior of the class, not of his objects. What's wrong with this, you may ask? Why can't we have both objects and classes as first-class citizens in our code? Why can't both of them have methods and properties?</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>The problem is that with class-oriented programming, decomposition doesn't work anymore. We can't break down a complex problem into parts, because only a single instance of a class exists in the entire program. The power of OOP is that it allows us to use objects as an instrument for scope decomposition. When I instantiate an object inside a method, he is dedicated to my specific task. He is perfectly isolated from all other objects around the method. This object is a&nbsp;<I>local variable</I>&nbsp;in the scope of the method. A class, with his static methods, is always a&nbsp;<I>global variable</I>&nbsp;no matter where I use him. Because of that, I can't isolate my interaction with this variable from others.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Besides being conceptually against object-oriented principles, public static methods have a few practical drawbacks:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>First, it's&nbsp;<B>impossible to mock</B>&nbsp;them (Well, you can use&nbsp;</FONT><A href="https://code.google.com/p/powermock/"><FONT color=#0000ff size=6 face=Calibri>PowerMock</FONT></A><FONT size=6 face=Calibri>, but this will then be the most terrible decision you could make in a Java project ... I made it once, a few years ago).</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Second, they are&nbsp;<B>not thread-safe</B>&nbsp;by definition, because they always work with static variables, which are accessible from all threads. You can make them thread-safe, but this will always require explicit synchronization.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Every time you see a public static method, start rewriting immediately. I don't even want to mention how terrible static (or global) variables are. I think it is just obvious.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>6. His Name Is Not a Job Title</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>The name of an object should tell us what this object&nbsp;<B>is</B>, not what it&nbsp;<B>does</B>, just like we name objects in real life: book instead of page aggregator, cup instead of water holder, T-shirt instead of body dresser. There are exceptions, of course, like printer or computer, but they were invented just recently and by those who didn't read this article. :)</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>For example, these names tell us who their owners are: an apple, a file, a series of HTTP requests, a socket, an XML document, a list of users, a regular expression, an integer, a PostgreSQL table, or Jeffrey Lebowski. A properly named object is always possible to draw as a small picture. Even a regular expression can be drawn.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>In the opposite, here is an example of names that tell us what their owners do: a file reader, a text parser, a URL validator, an XML printer, a service locator, a singleton, a script runner, or a Java programmer. Can you draw any of them? No, you can't. These names are not suitable for good objects. They are terrible names that lead to terrible design.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>In general, avoid names that end with "-er" &#8212; most of them are bad.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>"What is the alternative of a&nbsp;FileReader?" I hear you asking. What would be a better name? Let's see. We already have&nbsp;File, which is a representative of a real-world file on disk. This representative is not powerful enough for us, because he doesn't know how to read the content of the file. We want to create a more powerful one that will have that ability. What would we call him? Remember, the name should say what he is, not what he does. What is he? He is a file that has data; not just a file, like&nbsp;File, but a more sophisticated one, with data. So how about&nbsp;FileWithData&nbsp;or simplyDataFile?</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>The same logic should be applicable to all other names. Always think about<B>what it is</B>&nbsp;rather than what it does. Give your objects real, meaningful names instead of job titles.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><B><SPAN lang=EN-US><FONT size=6 face=Calibri>7. His Class Is Either Final or Abstract</FONT></SPAN></B></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>A good object comes from either a final or abstract class. A&nbsp;final&nbsp;class is one that can't be extended via inheritance. Anabstract&nbsp;class is one that can't have children. Simply put, a class should either say, "You can never break me; I'm a black box for you" or "I'm broken already; fix me first and then use".</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>There is nothing in between. A final class is a black box that you can't modify by any means. He works as he works, and you either use him or throw him away. You can't create another class that will inherit his properties. This is not allowed because of that&nbsp;final&nbsp;modifier. The only way to extend such a final class is through decoration of his children. Let's say I have the classHTTPStatus&nbsp;(see above), and I don't like him. Well, I like him, but he's not powerful enough for me. I want him to throw an exception if HTTP status is over 400. I want his method,&nbsp;read(), to do more that it does now. A traditional way would be to extend the class and overwrite his method:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>class</SPAN></B><SPAN lang=EN-US> OnlyValidStatus <B>extends</B> HTTPStatus {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> OnlyValidStatus(URL url) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><B>super</B>(url);</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>int</B> read() <B>throws</B> IOException {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><B>int</B> code = <B>super</B>.read();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (code &gt; 400) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>throw new RuntimException("unsuccessful HTTP code");</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return code;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Why is this wrong? It is very wrong because we risk breaking the logic of the entire parent class by overriding one of his methods. Remember, once we override the method&nbsp;read()&nbsp;in the child class, all methods from the parent class start to use his new version. We're literally injecting a new "piece of implementation" right into the class. Philosophically speaking, this is an offense.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>On the other hand, to extend a final class, you have to treat him like a black box and decorate him with your own implementation (a.k.a.&nbsp;</FONT><A href="https://en.wikipedia.org/wiki/Decorator_pattern"><FONT color=#0000ff size=6 face=Calibri>Decorator Pattern</FONT></A><FONT size=6 face=Calibri>):</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>final</SPAN></B><SPAN lang=EN-US> <B>class</B> OnlyValidStatus <B>implements</B> Status {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>private</B> <B>final</B> Status origin;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> OnlyValidStatus(Status status) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>this.origin = status;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>int</B> read() <B>throws</B> IOException {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><B>int</B> code = this.origin.read();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (code &gt; 400) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>throw new RuntimException("unsuccessful HTTP code");</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return code;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>Make sure that this class is implementing the same interface as the original one:&nbsp;Status. The instance of&nbsp;HTTPStatus&nbsp;will be passed into him through the constructor and encapsulated. Then every call will be intercepted and implemented in a different way, if necessary. In this design, we treat the original object as a black box and never touch his internal logic.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>If you don't use that&nbsp;final&nbsp;keyword, anyone (including yourself) will be able to extend the class and ... offend him :( So a class without&nbsp;final&nbsp;is a bad design.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>An abstract class is the exact oposite case &#8212; he tells us that he is incomplete and we can't use him "as is". We have to inject our custom implementation logic into him, but only into the places he allows us to touch. These places are explicitly marked as&nbsp;abstract&nbsp;methods. For example, our&nbsp;HTTPStatusmay look like this:</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT face=Calibri><FONT size=6><B><SPAN lang=EN-US>abstract</SPAN></B><SPAN lang=EN-US> <B>class</B> ValidatedHTTPStatus <B>implements</B> Status {</SPAN></FONT></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>@Override</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>public</B> <B>final</B> <B>int</B> read() <B>throws</B> IOException {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><B>int</B> code = this.origin.read();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (!this.isValid()) {</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>throw new RuntimException("unsuccessful HTTP code");</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return code;</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT face=Calibri><FONT size=6><SPAN style="mso-spacerun: yes">&nbsp; </SPAN><B>protected</B> <B>abstract</B> <B>boolean</B> isValid();</FONT></FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>}</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>As you see, the class doesn't know how exactly to validate the HTTP code, and he expects us to inject that logic through inheritance and through overloading the method&nbsp;isValid(). We're not going to offend him with this inheritance, since he defended all other methods with&nbsp;final&nbsp;(pay attention to the modifiers of his methods). Thus, the class is ready for our offense and is perfectly guarded against it.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>To summarize, your class should either be&nbsp;final&nbsp;or&nbsp;abstract&nbsp;&#8212; nothing in between.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN lang=EN-US><FONT size=6 face=Calibri>&nbsp;</FONT></SPAN>