Masking Bit-Fields </P>
<P>Your development environment may provide some assistance in dealing with bit fields. Consult your documentation for this. In addition it can be performed using the logical operators AND, OR, and XOR (for details on these operators see the Binary Operations section above.) </P>
<P>To change the value of the Shift Register field of the example register above, we would first mask out the bits we do not wish to change. This is accomplished by performing a logical AND of the value read from the register and a binary value in which all of the bits we wish to leave alone are set to 1, which would be 10011111b for our example. This leaves all of the bits except the Shift Register field alone and set the Shift Register field to zero. If this was our goal, then we would stop here and write the value back to the register. We then OR the value with a binary number in which the bits are shifted into position. To set this field to 10b we would OR the result of the AND with 01000000b. The resulting byte would then be written to the register. To set a bitfield to all ones the AND step is not necessary, similar to setting the bitfield to all zeros using AND. To toggle a bitfield you can XOR a value with a byte with a ones in the positions to toggle. For example XORing the value read with 01100000b would toggle the value of the Shift Register bitfield. By using these techniques you can assure that you do not cause any unwanted "side-effects" when modifying registers<SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">.</SPAN>