<H4 class=subsection>10.5.4 How Patterns Match</H4>
<P><A name=index-stem-1012></A>A target pattern is composed of a &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; between a prefix and a suffix, either or both of which may be empty. The pattern matches a file name only if the file name starts with the prefix and ends with the suffix, without overlap. The text between the prefix and the suffix is called the <DFN>stem</DFN>. Thus, when the pattern &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217; matches the file name <SAMP><SPAN class=file>test.o</SPAN></SAMP>, the stem is &#8216;<SAMP><SPAN class=samp>test</SPAN></SAMP>&#8217;. The pattern rule prerequisites are turned into actual file names by substituting the stem for the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. Thus, if in the same example one of the prerequisites is written as &#8216;<SAMP><SPAN class=samp>%.c</SPAN></SAMP>&#8217;, it expands to &#8216;<SAMP><SPAN class=samp>test.c</SPAN></SAMP>&#8217;. 
<P><FONT class=extract>When the target pattern does not contain a slash (and it usually does not), directory names in the file names are removed from the file name before it is compared with the target prefix and suffix. After the comparison of the file name to the target pattern, the directory names, along with the slash that ends them, are added on to the prerequisite file names generated from the pattern rule's prerequisite patterns and the file name. The directories are ignored only for the purpose of finding an implicit rule to use, not in the application of that rule. Thus, &#8216;<SAMP><SPAN class=samp>e%t</SPAN></SAMP>&#8217; matches the file name <SAMP><SPAN class=file>src/eat</SPAN></SAMP>, with &#8216;<SAMP><SPAN class=samp>src/a</SPAN></SAMP>&#8217; as the stem. When prerequisites are turned into file names, the directories from the stem are added at the front, while the rest of the stem is substituted for the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;. The stem &#8216;<SAMP><SPAN class=samp>src/a</SPAN></SAMP>&#8217; with a prerequisite pattern &#8216;<SAMP><SPAN class=samp>c%r</SPAN></SAMP>&#8217; gives the file name <SAMP><SPAN class=file>src/car</SPAN></SAMP>.</FONT> 
<P><A name=index-pattern-rules_002c-order-of-1013></A><A name=index-order-of-pattern-rules-1014></A>A pattern rule can be used to build a given file only if there is a target pattern that matches the file name, <EM>and</EM> all prerequisites in that rule either exist or can be built. The rules you write take precedence over those that are built in. <FONT class=extract>Note however, that a rule whose prerequisites actually exist or are mentioned always takes priority over a rule with prerequisites that must be made by chaining other implicit rules.</FONT> 
<P><A name=index-stem_002c-shortest-1015></A><FONT class=extract>It is possible that more than one pattern rule will meet these criteria. In that case, <CODE>make</CODE> will choose the rule with the shortest stem (that is, the pattern that matches most specifically). If more than one pattern rule has the shortest stem, <CODE>make</CODE> will choose the first one found in the makefile.</FONT> 
<P><FONT class=extract>This algorithm results in more specific rules being preferred over more generic ones; for example: </FONT><PRE class=example><FONT class=extract>     %.o: %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
     
     %.o : %.f
             $(COMPILE.F) $(OUTPUT_OPTION) $&lt;
     
     lib/%.o: lib/%.c
             $(CC) -fPIC -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</FONT></PRE>
<P><FONT class=extract>Given these rules and asked to build <SAMP><SPAN class=file>bar.o</SPAN></SAMP> where both <SAMP><SPAN class=file>bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>bar.f</SPAN></SAMP> exist, <CODE>make</CODE> will choose the first rule and compile <SAMP><SPAN class=file>bar.c</SPAN></SAMP> into <SAMP><SPAN class=file>bar.o</SPAN></SAMP>. In the same situation where <SAMP><SPAN class=file>bar.c</SPAN></SAMP> does not exist, then <CODE>make</CODE> will choose the second rule and compile <SAMP><SPAN class=file>bar.f</SPAN></SAMP> into <SAMP><SPAN class=file>bar.o</SPAN></SAMP>. </FONT>
<P><FONT class=extract>If <CODE>make</CODE> is asked to build <SAMP><SPAN class=file>lib/bar.o</SPAN></SAMP> and both <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> and <SAMP><SPAN class=file>lib/bar.f</SPAN></SAMP> exist, then the third rule will be chosen since the stem for this rule (&#8216;<SAMP><SPAN class=samp>bar</SPAN></SAMP>&#8217;) is shorter than the stem for the first rule (&#8216;<SAMP><SPAN class=samp>lib/bar</SPAN></SAMP>&#8217;). If <SAMP><SPAN class=file>lib/bar.c</SPAN></SAMP> does not exist then the third rule is not eligible and the second rule will be used, even though the stem is longer.</FONT>