<H4 class=subsection>10.5.3 Automatic Variables</H4>
<P><A name=index-automatic-variables-958></A><A name=index-variables_002c-automatic-959></A><A name=index-variables_002c-and-implicit-rule-960></A>Suppose you are writing a pattern rule to compile a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file into a &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; file: how do you write the &#8216;<SAMP><SPAN class=samp>cc</SPAN></SAMP>&#8217; command so that it operates on the right source file name? You cannot write the name in the recipe, because the name is different each time the implicit rule is applied. 
<P>What you do is use a special feature of <CODE>make</CODE>, the <DFN>automatic variables</DFN>. These variables have values computed afresh for each rule that is executed, based on the target and prerequisites of the rule. In this example, you would use &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; for the object file name and &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; for the source file name. 
<P><A name=index-automatic-variables-in-prerequisites-961></A><A name=index-prerequisites_002c-and-automatic-variables-962></A><FONT class=extract>It's very important that you recognize the limited scope in which automatic variable values are available: they only have values within the recipe. In particular, you cannot use them anywhere within the target list of a rule; they have no value there and will expand to the empty string. Also, they cannot be accessed directly within the prerequisite list of a rule. A common mistake is attempting to use <CODE>$@</CODE> within the prerequisites list; this will not work. However, there is a special feature of GNU <CODE>make</CODE>, secondary expansion (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Secondary-Expansion"><FONT class=extract>Secondary Expansion</FONT></A><FONT class=extract>), which will allow automatic variable values to be used in prerequisite lists.</FONT> 
<P><FONT class=extract>Here is a table of automatic variables: </FONT><A name=index-g_t_0024_0040_0040-963></A><A name=index-g_t_0040_0040-_0040r_007b_0028automatic-variable_0029_007d-964></A>
<DL>
<DT><FONT class=extract><CODE>$@</CODE> </FONT>
<DD><FONT class=extract>The file name of the target of the rule. If the target is an archive member, then &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of the archive file. In a pattern rule that has multiple targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro"><FONT class=extract>Introduction to Pattern Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of whichever target caused the rule's recipe to be run. </FONT>
<P><A name=index-g_t_0024_0025-965></A><A name=index-g_t_0025-_0040r_007b_0028automatic-variable_0029_007d-966></A><BR></P>
<DT><FONT class=extract><CODE>$%</CODE> </FONT>
<DD><FONT class=extract>The target member name, when the target is an archive member. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>. For example, if the target is <SAMP><SPAN class=file>foo.a(bar.o)</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o</SPAN></SAMP> and &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>foo.a</SPAN></SAMP>. &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is empty when the target is not an archive member. </FONT>
<P><A name=index-g_t_0024_003c-967></A><A name=index-g_t_003c-_0040r_007b_0028automatic-variable_0029_007d-968></A><BR></P>
<DT><FONT class=extract><CODE>$&lt;</CODE> </FONT>
<DD><FONT class=extract>The name of the first prerequisite. If the target got its recipe from an implicit rule, this will be the first prerequisite added by the implicit rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-g_t_0024_003f-969></A><A name=index-g_t_003f-_0040r_007b_0028automatic-variable_0029_007d-970></A><BR></P>
<DT><FONT class=extract><CODE>$?</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites that are newer than the target, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). </FONT><A name=index-prerequisites_002c-list-of-changed-971></A><A name=index-list-of-changed-prerequisites-972></A><A name=index-g_t_0024_005e-973></A><A name=index-g_t_005e-_0040r_007b_0028automatic-variable_0029_007d-974></A><BR>
<DT><FONT class=extract><CODE>$^</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). A target has only one prerequisite on each other file it depends on, no matter how many times each file is listed as a prerequisite. So if you list a prerequisite more than once for a target, the value of <CODE>$^</CODE> contains just one copy of the name. This list does <STRONG>not</STRONG> contain any of the order-only prerequisites; for those see the &#8216;<SAMP><SPAN class=samp>$|</SPAN></SAMP>&#8217; variable, below. </FONT><A name=index-prerequisites_002c-list-of-all-975></A><A name=index-list-of-all-prerequisites-976></A><A name=index-g_t_0024_002b-977></A><A name=index-g_t_002b-_0040r_007b_0028automatic-variable_0029_007d-978></A><BR>
<DT><FONT class=extract><CODE>$+</CODE> </FONT>
<DD><FONT class=extract>This is like &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217;, but prerequisites listed more than once are duplicated in the order they were listed in the makefile. This is primarily useful for use in linking commands where it is meaningful to repeat library file names in a particular order. </FONT>
<P><A name=index-g_t_0024_007c-979></A><A name=index-g_t_007c-_0040r_007b_0028automatic-variable_0029_007d-980></A><BR></P>
<DT><FONT class=extract><CODE>$|</CODE> </FONT>
<DD><FONT class=extract>The names of all the order-only prerequisites, with spaces between them. </FONT>
<P><A name=index-g_t_0024_002a-981></A><A name=index-g_t_002a-_0040r_007b_0028automatic-variable_0029_007d-982></A><BR></P>
<DT><FONT class=extract><CODE>$*</CODE> </FONT>
<DD><FONT class=extract>The stem with which an implicit rule matches (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>). If the target is <SAMP><SPAN class=file>dir/a.foo.b</SPAN></SAMP> and the target pattern is <SAMP><SPAN class=file>a.%.b</SPAN></SAMP> then the stem is <SAMP><SPAN class=file>dir/foo</SPAN></SAMP>. The stem is useful for constructing names of related files. </FONT><A name=index-stem_002c-variable-for-983></A><FONT class=extract>In a static pattern rule, the stem is part of the file name that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the target pattern. </FONT>
<P><FONT class=extract>In an explicit rule, there is no stem; so &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; cannot be determined in that way. Instead, if the target name ends with a recognized suffix (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the target name minus the suffix. For example, if the target name is &#8216;<SAMP><SPAN class=samp>foo.c</SPAN></SAMP>&#8217;, then &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;, since &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; is a suffix. GNU <CODE>make</CODE> does this bizarre thing only for compatibility with other implementations of <CODE>make</CODE>. You should generally avoid using &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; except in implicit rules or static pattern rules. </FONT>
<P><FONT class=extract>If the target name in an explicit rule does not end with a recognized suffix, &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the empty string for that rule.</FONT> </P></DD></DL>
<P><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$?</SPAN></SAMP>&#8217; is useful even in explicit rules when you wish to operate on only the prerequisites that have changed. For example, suppose that an archive named <SAMP><SPAN class=file>lib</SPAN></SAMP> is supposed to contain copies of several object files. This rule copies just the changed object files into the archive: </FONT><PRE class=example><FONT class=extract>     lib: foo.o bar.o lose.o win.o
             ar r lib $?</FONT>
</PRE>
<P><FONT class=extract>Of the variables listed above, four have values that are single file names, and three have values that are lists of file names. These seven have variants that get just the file's directory name or just the file name within the directory. The variant variables' names are formed by appending &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217;, respectively. These variants are semi-obsolete in GNU <CODE>make</CODE> since the functions <CODE>dir</CODE> and <CODE>notdir</CODE> can be used to get a similar effect (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#File-Name-Functions"><FONT class=extract>Functions for File Names</FONT></A><FONT class=extract>). Note, however, that the &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217; variants all omit the trailing slash which always appears in the output of the <CODE>dir</CODE> function. Here is a table of the variants: </FONT><A name=index-g_t_0024_0028_0040_0040D_0029-984></A><A name=index-g_t_0040_0040D-_0040r_007b_0028automatic-variable_0029_007d-985></A>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(@D)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part of the file name of the target, with the trailing slash removed. If the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir/foo.o</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$(@D)</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir</SPAN></SAMP>. This value is <SAMP><SPAN class=file>.</SPAN></SAMP> if &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; does not contain a slash. </FONT>
<P><A name=index-g_t_0024_0028_0040_0040F_0029-986></A><A name=index-g_t_0040_0040F-_0040r_007b_0028automatic-variable_0029_007d-987></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The file-within-directory part of the file name of the target. If the value of &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>dir/foo.o</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>foo.o</SPAN></SAMP>. &#8216;<SAMP><SPAN class=samp>$(@F)</SPAN></SAMP>&#8217; is equivalent to &#8216;<SAMP><SPAN class=samp>$(notdir $@)</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_0024_0028_002aD_0029-988></A><A name=index-g_t_002aD-_0040r_007b_0028automatic-variable_0029_007d-989></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(*D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_002aF_0029-990><FONT class=extract></FONT></A><A name=index-g_t_002aF-_0040r_007b_0028automatic-variable_0029_007d-991></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(*F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the stem; <SAMP><SPAN class=file>dir</SPAN></SAMP> and <SAMP><SPAN class=file>foo</SPAN></SAMP> in this example. </FONT>
<P><A name=index-g_t_0024_0028_0025D_0029-992></A><A name=index-g_t_0025D-_0040r_007b_0028automatic-variable_0029_007d-993></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(%D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_0025F_0029-994><FONT class=extract></FONT></A><A name=index-g_t_0025F-_0040r_007b_0028automatic-variable_0029_007d-995></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(%F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the target archive member name. This makes sense only for archive member targets of the form <SAMP><VAR>archive</VAR><SPAN class=file>(</SPAN><VAR>member</VAR><SPAN class=file>)</SPAN></SAMP> and is useful only when <VAR>member</VAR> may contain a directory name. (See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archive-Members"><FONT class=extract>Archive Members as Targets</FONT></A><FONT class=extract>.) </FONT>
<P><A name=index-g_t_0024_0028_003cD_0029-996></A><A name=index-g_t_003cD-_0040r_007b_0028automatic-variable_0029_007d-997></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(&lt;D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_003cF_0029-998><FONT class=extract></FONT></A><A name=index-g_t_003cF-_0040r_007b_0028automatic-variable_0029_007d-999></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(&lt;F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>The directory part and the file-within-directory part of the first prerequisite. </FONT>
<P><A name=index-g_t_0024_0028_005eD_0029-1000></A><A name=index-g_t_005eD-_0040r_007b_0028automatic-variable_0029_007d-1001></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(^D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_005eF_0029-1002><FONT class=extract></FONT></A><A name=index-g_t_005eF-_0040r_007b_0028automatic-variable_0029_007d-1003></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(^F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites. </FONT>
<P><A name=index-g_t_0024_0028_002bD_0029-1004></A><A name=index-g_t_002bD-_0040r_007b_0028automatic-variable_0029_007d-1005></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(+D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_002bF_0029-1006><FONT class=extract></FONT></A><A name=index-g_t_002bF-_0040r_007b_0028automatic-variable_0029_007d-1007></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(+F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites, including multiple instances of duplicated prerequisites. </FONT>
<P><A name=index-g_t_0024_0028_003fD_0029-1008></A><A name=index-g_t_003fD-_0040r_007b_0028automatic-variable_0029_007d-1009></A><BR></P>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(?D)</SPAN></SAMP>&#8217; </FONT>
<DD><A name=index-g_t_0024_0028_003fF_0029-1010><FONT class=extract></FONT></A><A name=index-g_t_003fF-_0040r_007b_0028automatic-variable_0029_007d-1011></A>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(?F)</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>Lists of the directory parts and the file-within-directory parts of all prerequisites that are newer than the target. </FONT></DD></DL>
<P>Note that we use a special stylistic convention when we talk about these automatic variables; we write &#8220;the value of &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217;&#8221;, rather than &#8220;the&nbsp;variable&nbsp;<CODE>&lt;</CODE>&#8221;<!-- /@w --> as we would write for ordinary variables such as <CODE>objects</CODE> and <CODE>CFLAGS</CODE>. We think this convention looks more natural in this special case. Please do not assume it has a deep significance; &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; refers to the variable named <CODE>&lt;</CODE> just as &#8216;<SAMP><SPAN class=samp>$(CFLAGS)</SPAN></SAMP>&#8217; refers to the variable named <CODE>CFLAGS</CODE>. You could just as well use &#8216;<SAMP><SPAN class=samp>$(&lt;)</SPAN></SAMP>&#8217; in place of &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217;.