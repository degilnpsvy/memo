<H4 class=subsection>10.5.2 Pattern Rule Examples</H4>
<P>Here are some examples of pattern rules actually predefined in <CODE>make</CODE>. <FONT class=extract>First, the rule that compiles &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; files into &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files: </FONT><PRE class=example><FONT class=extract>     %.o : %.c
             $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</FONT></PRE>
<P class=noindent><FONT class=extract>defines a rule that can make any file <SAMP><VAR>x</VAR><SPAN class=file>.o</SPAN></SAMP> from <SAMP><VAR>x</VAR><SPAN class=file>.c</SPAN></SAMP>. The recipe uses the automatic variables &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; to substitute the names of the target file and the source file in each case where the rule applies (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables"><FONT class=extract>Automatic Variables</FONT></A><FONT class=extract>).</FONT> 
<P><FONT class=extract>Here is a second built-in rule: </FONT><PRE class=example><FONT class=extract>     % :: RCS/%,v
             $(CO) $(COFLAGS) $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>defines a rule that can make any file <SAMP><VAR>x</VAR></SAMP> whatsoever from a corresponding file <SAMP><VAR>x</VAR><SPAN class=file>,v</SPAN></SAMP> in the sub-directory <SAMP><SPAN class=file>RCS</SPAN></SAMP>. Since the target is &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;, this rule will apply to any file whatever, provided the appropriate prerequisite file exists. The double colon makes the rule <DFN>terminal</DFN>, which means that its prerequisite may not be an intermediate file (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>).</FONT> 
<P><FONT class=extract>This pattern rule has two targets: </FONT><PRE class=example><FONT class=extract>     %.tab.c %.tab.h: %.y
             bison -d $&lt;
</FONT></PRE>
<P class=noindent><!-- The following paragraph is rewritten to avoid overfull hboxes --><FONT class=extract>This tells <CODE>make</CODE> that the recipe &#8216;<SAMP><SPAN class=samp>bison -d </SPAN><VAR>x</VAR><SPAN class=samp>.y</SPAN></SAMP>&#8217; will make both <SAMP><VAR>x</VAR><SPAN class=file>.tab.c</SPAN></SAMP> and <SAMP><VAR>x</VAR><SPAN class=file>.tab.h</SPAN></SAMP>. If the file <SAMP><SPAN class=file>foo</SPAN></SAMP> depends on the files <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> depends on the file <SAMP><SPAN class=file>parse.tab.h</SPAN></SAMP>, when <SAMP><SPAN class=file>parse.y</SPAN></SAMP> is changed, the recipe &#8216;<SAMP><SPAN class=samp>bison -d parse.y</SPAN></SAMP>&#8217; will be executed only once, and the prerequisites of both <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> and <SAMP><SPAN class=file>scan.o</SPAN></SAMP> will be satisfied. (Presumably the file <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP> will be recompiled from <SAMP><SPAN class=file>parse.tab.c</SPAN></SAMP> and the file <SAMP><SPAN class=file>scan.o</SPAN></SAMP> from <SAMP><SPAN class=file>scan.c</SPAN></SAMP>, while <SAMP><SPAN class=file>foo</SPAN></SAMP> is linked from <SAMP><SPAN class=file>parse.tab.o</SPAN></SAMP>, <SAMP><SPAN class=file>scan.o</SPAN></SAMP>, and its other prerequisites, and it will execute happily ever after.)</FONT>