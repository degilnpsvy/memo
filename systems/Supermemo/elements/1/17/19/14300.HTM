<H3 class=section>10.6 Defining Last-Resort Default Rules</H3>
<P><A name=index-last_002dresort-default-rules-1018></A><A name=index-default-rules_002c-last_002dresort-1019></A><FONT class=extract>You can define a last-resort implicit rule by writing a terminal match-anything pattern rule with no prerequisites (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Rules</FONT></A><FONT class=extract>). This is just like any other pattern rule; the only thing special about it is that it will match any target. So such a rule's recipe is used for all targets and prerequisites that have no recipe of their own and for which no other implicit rule applies. </FONT>
<P><FONT class=extract>For example, when testing a makefile, you might not care if the source files contain real data, only that they exist. Then you might do this: </FONT><PRE class=example><FONT class=extract>     %::
             touch $@
</FONT></PRE>
<P class=noindent><FONT class=extract>to cause all the source files needed (as prerequisites) to be created automatically.</FONT> 
<P><A name=index-g_t_002eDEFAULT-1020></A><FONT class=extract>You can instead define a recipe to be used for targets for which there are no rules at all, even ones which don't specify recipes. You do this by writing a rule for the target <CODE>.DEFAULT</CODE>. Such a rule's recipe is used for all prerequisites which do not appear as targets in any explicit rule, and for which no implicit rule applies. Naturally, there is no <CODE>.DEFAULT</CODE> rule unless you write one. </FONT>
<P><FONT class=extract>If you use <CODE>.DEFAULT</CODE> with no recipe or prerequisites: </FONT><PRE class=example><FONT class=extract>     .DEFAULT:
</FONT></PRE>
<P class=noindent><FONT class=extract>the recipe previously stored for <CODE>.DEFAULT</CODE> is cleared. Then <CODE>make</CODE> acts as if you had never defined <CODE>.DEFAULT</CODE> at all.</FONT> 
<P><FONT class=extract>If you do not want a target to get the recipe from a match-anything pattern rule or <CODE>.DEFAULT</CODE>, but you also do not want any recipe to be run for the target, you can give it an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Defining Empty Recipes</FONT></A><FONT class=extract>).</FONT> 
<P><FONT class=extract>You can use a last-resort rule to override part of another makefile. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Overriding-Makefiles"><FONT class=extract>Overriding Part of Another Makefile</FONT></A><FONT class=extract>.</FONT>