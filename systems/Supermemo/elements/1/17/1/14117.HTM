<H4><A name=SECTION02222010000000000000>Breadth first</A> </H4>
<P><A name=2493></A>The method given in Section <A href="http://planning.cs.uiuc.edu/node40.html#sec:gfs">2.2.1</A> specifies <SPAN class=MATH><IMG height=34 alt="$ {Q}$" src="http://planning.cs.uiuc.edu/img7.gif" width=20 align=middle border=0></SPAN> as a First-In First-Out (FIFO) queue, which selects states using the first-come, first-serve principle. This causes the search frontier to grow uniformly and is therefore referred to as <EM>breadth-first search</EM><A name=3516></A>. All plans that have <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN> steps are exhausted before plans with <SPAN class=MATH><IMG height=34 alt="$ k+1$" src="http://planning.cs.uiuc.edu/img289.gif" width=48 align=middle border=0></SPAN> steps are investigated. Therefore, breadth first guarantees that the first solution found will use the smallest number of steps. On detection that a state has been revisited, there is no work to do in line 12. Since the search progresses in a series of wavefronts, breadth-first search is systematic. In fact, it even remains systematic if it does not keep track of repeated states (however, it will waste time considering irrelevant cycles). 
<P>The asymptotic running time of breadth-first search is <!-- MATH
 $O(|V|+|E|)$
 --><SPAN class=MATH><IMG height=37 alt="$ O(\vert V\vert+\vert E\vert)$" src="http://planning.cs.uiuc.edu/img290.gif" width=108 align=middle border=0></SPAN>, in which <SPAN class=MATH><IMG height=37 alt="$ \vert V\vert$" src="http://planning.cs.uiuc.edu/img291.gif" width=30 align=middle border=0></SPAN> and <SPAN class=MATH><IMG height=37 alt="$ \vert E\vert$" src="http://planning.cs.uiuc.edu/img292.gif" width=30 align=middle border=0></SPAN> are the numbers of vertices and edges, respectively, in the state transition graph (recall, however, that the graph is usually not the input; for example, the input may be the rules of the Rubik's cube). This assumes that all basic operations, such as determining whether a state has been visited, are performed in constant time. In practice, these operations will typically require more time and must be counted as part of the algorithm's complexity. The running time can be expressed in terms of the other representations. Recall that <SPAN class=MATH><IMG height=37 alt="$ \vert V\vert = \vert X\vert$" src="http://planning.cs.uiuc.edu/img293.gif" width=83 align=middle border=0></SPAN> is the number of states. If the same actions <SPAN class=MATH><IMG height=17 alt="$ U$" src="http://planning.cs.uiuc.edu/img38.gif" width=19 align=bottom border=0></SPAN> are available from every state, then <!-- MATH
 $|E| = |U|
|X|$
 --><SPAN class=MATH><IMG height=37 alt="$ \vert E\vert = \vert U\vert&#10;\vert X\vert$" src="http://planning.cs.uiuc.edu/img294.gif" width=108 align=middle border=0></SPAN>. If the action sets <SPAN class=MATH><IMG height=37 alt="$ U(x_1)$" src="http://planning.cs.uiuc.edu/img295.gif" width=52 align=middle border=0></SPAN> and <SPAN class=MATH><IMG height=37 alt="$ U(x_2)$" src="http://planning.cs.uiuc.edu/img296.gif" width=52 align=middle border=0></SPAN> are pairwise disjoint for any <!-- MATH
 $x_1,x_2 \in X$
 --><SPAN class=MATH><IMG height=34 alt="$ x_1,x_2 \in X$" src="http://planning.cs.uiuc.edu/img297.gif" width=90 align=middle border=0></SPAN>, then <SPAN class=MATH><IMG height=37 alt="$ \vert E\vert = \vert U\vert$" src="http://planning.cs.uiuc.edu/img298.gif" width=81 align=middle border=0></SPAN>. <A name=2496></A>