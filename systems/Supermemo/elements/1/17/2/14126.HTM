<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN> A Unified View of the Search Methods It is convenient to summarize the behavior of all search methods in terms of several basic steps. Variations of these steps will appear later for more complicated planning problems. For example, in Section <A href="http://planning.cs.uiuc.edu/node218.html#sec:incplan">5.4</A>, a large family of sampling-based motion planning algorithms can be viewed as an extension of the steps presented here. The extension in this case is made from a discrete state space to a continuous state space (called the configuration space). Each method incrementally constructs a <EM>search graph</EM><A name=3833></A>, <!-- MATH
 ${\cal G}(V,E)$
 --><SPAN class=MATH><IMG height=37 alt="$ {\cal G}(V,E)$" src="http://planning.cs.uiuc.edu/img339.gif" width=67 align=middle border=0></SPAN>, which is the subgraph of the state transition graph that has been explored so far. 
<P>All of the planning methods from this section followed the same basic template: 
<OL>
<LI><B>Initialization:</B> Let the search graph, <!-- MATH
 ${\cal G}(V,E)$
 --><SPAN class=MATH><IMG height=37 alt="$ {\cal G}(V,E)$" src="http://planning.cs.uiuc.edu/img339.gif" width=67 align=middle border=0></SPAN>, be initialized with <SPAN class=MATH><IMG height=17 alt="$ E$" src="http://planning.cs.uiuc.edu/img2.gif" width=20 align=bottom border=0></SPAN> empty and <SPAN class=MATH><IMG height=17 alt="$ V$" src="http://planning.cs.uiuc.edu/img340.gif" width=20 align=bottom border=0></SPAN> containing some starting states. For forward search, <!-- MATH
 $V = \{{x_{I}}\}$
 --><SPAN class=MATH><IMG height=37 alt="$ V = \{{x_{I}}\}$" src="http://planning.cs.uiuc.edu/img341.gif" width=82 align=middle border=0></SPAN>; for backward search, <!-- MATH
 $V =
\{{x_{G}}\}$
 --><SPAN class=MATH><IMG height=37 alt="$ V =&#10;\{{x_{G}}\}$" src="http://planning.cs.uiuc.edu/img342.gif" width=86 align=middle border=0></SPAN>. If bidirectional search is used, then <!-- MATH
 $V =
\{{x_{I}},{x_{G}}\}$
 --><SPAN class=MATH><IMG height=37 alt="$ V =&#10;\{{x_{I}},{x_{G}}\}$" src="http://planning.cs.uiuc.edu/img343.gif" width=113 align=middle border=0></SPAN>. It is possible to grow more than two trees and merge them during the search process. In this case, more states can be initialized in <SPAN class=MATH><IMG height=17 alt="$ V$" src="http://planning.cs.uiuc.edu/img340.gif" width=20 align=bottom border=0></SPAN>. The search graph will incrementally grow to reveal more and more of the state transition graph. 
<LI><B>Select Vertex:</B> Choose a vertex <!-- MATH
 $n_{cur} \in V$
 --><SPAN class=MATH><IMG height=34 alt="$ n_{cur} \in V$" src="http://planning.cs.uiuc.edu/img344.gif" width=75 align=middle border=0></SPAN> for expansion; this is usually accomplished by maintaining a priority queue. Let <SPAN class=MATH><IMG height=33 alt="$ x_{cur}$" src="http://planning.cs.uiuc.edu/img345.gif" width=36 align=middle border=0></SPAN> denote the state associated with <SPAN class=MATH><IMG height=33 alt="$ n_{cur}$" src="http://planning.cs.uiuc.edu/img346.gif" width=37 align=middle border=0></SPAN>. 
<LI><B>Apply an Action:</B> In either a forward or backward direction, a new state, <SPAN class=MATH><IMG height=33 alt="$ x_{new}$" src="http://planning.cs.uiuc.edu/img347.gif" width=41 align=middle border=0></SPAN>, is obtained. This may arise from <!-- MATH
 $x_{new} = f(x,u)$
 --><SPAN class=MATH><IMG height=37 alt="$ x_{new} = f(x,u)$" src="http://planning.cs.uiuc.edu/img348.gif" width=121 align=middle border=0></SPAN> for some <!-- MATH
 $u \in U(x)$
 --><SPAN class=MATH><IMG height=37 alt="$ u \in U(x)$" src="http://planning.cs.uiuc.edu/img156.gif" width=79 align=middle border=0></SPAN> (forward) or <!-- MATH
 $x =
f(x_{new},u)$
 --><SPAN class=MATH><IMG height=37 alt="$ x =&#10;f(x_{new},u)$" src="http://planning.cs.uiuc.edu/img349.gif" width=121 align=middle border=0></SPAN> for some <!-- MATH
 $u \in U(x_{new})$
 --><SPAN class=MATH><IMG height=37 alt="$ u \in U(x_{new})$" src="http://planning.cs.uiuc.edu/img350.gif" width=104 align=middle border=0></SPAN> (backward). 
<LI><B>Insert a Directed Edge into the Graph:</B> If certain algorithm-specific tests are passed, then generate an edge from <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN> to <SPAN class=MATH><IMG height=33 alt="$ x_{new}$" src="http://planning.cs.uiuc.edu/img347.gif" width=41 align=middle border=0></SPAN> for the forward case, or an edge from <SPAN class=MATH><IMG height=33 alt="$ x_{new}$" src="http://planning.cs.uiuc.edu/img347.gif" width=41 align=middle border=0></SPAN> to <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN> for the backward case. If <SPAN class=MATH><IMG height=33 alt="$ x_{new}$" src="http://planning.cs.uiuc.edu/img347.gif" width=41 align=middle border=0></SPAN> is not yet in <SPAN class=MATH><IMG height=17 alt="$ V$" src="http://planning.cs.uiuc.edu/img340.gif" width=20 align=bottom border=0></SPAN>, it will be inserted into <SPAN class=MATH><IMG height=17 alt="$ V$" src="http://planning.cs.uiuc.edu/img340.gif" width=20 align=bottom border=0></SPAN>.<A href="http://planning.cs.uiuc.edu/footnode.html#foot2636" name=tex2html32><SUP><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>2</SPAN></SUP></A> 
<LI><B>Check for Solution:</B> Determine whether <SPAN class=MATH><IMG height=34 alt="$ {\cal G}$" src="http://planning.cs.uiuc.edu/img77.gif" width=17 align=middle border=0></SPAN> encodes a path from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> to <SPAN class=MATH><IMG height=33 alt="$ {x_{G}}$" src="http://planning.cs.uiuc.edu/img215.gif" width=27 align=middle border=0></SPAN>. If there is a single search tree, then this is trivial. If there are two or more search trees, then this step could be expensive. 
<LI><B>Return to Step 2:</B> Iterate unless a solution has been found or an early termination condition is satisfied, in which case the algorithm reports failure. </LI></OL>
<P>Note that in this summary, several iterations may have to be made to generate one iteration in the previous formulations. The forward search algorithm in Figure <A href="http://planning.cs.uiuc.edu/node40.html#fig:gfs">2.4</A> tries all actions for the first element of <SPAN class=MATH><IMG height=34 alt="$ {Q}$" src="http://planning.cs.uiuc.edu/img7.gif" width=20 align=middle border=0></SPAN>. If there are <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN> actions, this corresponds to <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN> iterations in the template above. <A name=2641></A>