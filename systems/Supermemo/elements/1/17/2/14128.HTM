<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN>.<SPAN class=arabic>1</SPAN> Optimal Fixed-Length Plans 
<P><A name=2680></A>Consider computing an optimal plan under Formulation <A href="http://planning.cs.uiuc.edu/node52.html#for:dflop">2.2</A>. One could naively generate all length-<SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> sequences of actions and select the sequence that produces the best cost, but this would require <SPAN class=MATH><IMG height=39 alt="$ O(\vert U\vert^K)$" src="http://planning.cs.uiuc.edu/img379.gif" width=73 align=middle border=0></SPAN> running time (imagine <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> nested loops, one for each stage), which is clearly prohibitive. Luckily, the dynamic programming principle helps. We first say in words what will appear later in equations. The main observation is that portions of optimal plans are themselves optimal. It would be absurd to be able to replace a portion of an optimal plan with a portion that produces lower total cost; this contradicts the optimality of the original plan. 
<P>The principle of optimality leads directly to an iterative algorithm, called <EM>value iteration</EM><A name=3871></A>,<A href="http://planning.cs.uiuc.edu/footnode.html#foot3341" name=tex2html33><SUP><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN></SUP></A> that can solve a vast collection of optimal planning problems, including those that involve variable-length plans, stochastic uncertainties, imperfect state measurements, and many other complications. The idea is to iteratively compute optimal cost-to-go (or cost-to-come) functions over the state space. In some cases, the approach can be reduced to Dijkstra's algorithm; however, this only occurs under some special conditions. The <EM>value-iteration</EM><A name=2685></A> algorithm will be presented next, and Section <A href="http://planning.cs.uiuc.edu/node57.html#sec:dijrev">2.3.3</A> discusses its connection to Dijkstra's algorithm. 
<P><BR>
<HR>
<!--Table of Child-Links--><A name=CHILD_LINKS><STRONG>Subsections</STRONG></A> 
<UL class=ChildLinks>
<LI><A href="http://planning.cs.uiuc.edu/node54.html" name=tex2html2091><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN>.<SPAN class=arabic>1</SPAN>.<SPAN class=arabic>1</SPAN> Backward value iteration</A> 
<LI><A href="http://planning.cs.uiuc.edu/node55.html" name=tex2html2092><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN>.<SPAN class=arabic>1</SPAN>.<SPAN class=arabic>2</SPAN> Forward value iteration</A> </LI></UL><!--End of Table of Child-Links-->