Best first 
<P>
<DIV align=center><A name=fig:spiral3d></A><A name=3338></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.5:</STRONG> Here is a troublesome example for best-first search. Imagine trying to reach a state that is directly below the spiral tube. If the initial state starts inside of the opening at the top of the tube, the search will progress around the spiral instead of leaving the tube and heading straight for the goal.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=477 alt="\begin{figure}\centerline{\psfig{figure=figs/spiral3dmod.eps,width=3.5in} }\end{figure}" src="http://planning.cs.uiuc.edu/img320.gif" width=404 border=0></TD></TR></TBODY></TABLE></DIV>
<P>For <EM>best-first search</EM><A name=3562></A>, the priority queue is sorted according to an estimate of the optimal cost-to-go. The solutions obtained in this way are not necessarily optimal; therefore, it does not matter whether the estimate exceeds the true optimal cost-to-go, which was important to maintain optimality for <SPAN class=MATH><IMG height=17 alt="$ A^*$" src="http://planning.cs.uiuc.edu/img288.gif" width=26 align=bottom border=0></SPAN> search. Although optimal solutions are not found, in many cases, far fewer vertices are explored, which results in much faster running times. There is no guarantee, however, that this will happen. The worst-case performance of best-first search is worse than that of <SPAN class=MATH><IMG height=17 alt="$ A^*$" src="http://planning.cs.uiuc.edu/img288.gif" width=26 align=bottom border=0></SPAN> search and dynamic programming. The algorithm is often too greedy because it prefers states that ``look good'' very early in the search. Sometimes the price must be paid for being greedy! Figure <A href="http://planning.cs.uiuc.edu/node46.html#fig:spiral3d">2.5</A> shows a contrived example in which the planning problem involves taking small steps in a 3D world. For any specified number, <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN>, of steps, it is easy to construct a spiral example that wastes at least <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN> steps in comparison to Dijkstra's algorithm. Note that best-first search is not systematic. <A name=2538></A><A name=2539></A>