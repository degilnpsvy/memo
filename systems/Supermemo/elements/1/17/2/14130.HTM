<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN>.<SPAN class=arabic>1</SPAN>.<SPAN class=arabic>2</SPAN> Forward value iteration 
<P>The ideas from Section <A href="http://planning.cs.uiuc.edu/node54.html#sec:disbdp">2.3.1</A> may be recycled to yield a symmetrically equivalent method that computes optimal <EM>cost-to-come</EM><A name=2785></A> functions from the initial stage. Whereas backward value iterations were able to find optimal plans from all initial states simultaneously, forward value iterations can be used to find optimal plans to all states in <SPAN class=MATH><IMG height=17 alt="$ X$" src="http://planning.cs.uiuc.edu/img8.gif" width=22 align=bottom border=0></SPAN>. In the backward case, <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> must be fixed, and in the forward case, <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> must be fixed. 
<P>The issue of maintaining feasible solutions appears again. In the forward direction, the role of <SPAN class=MATH><IMG height=34 alt="$ l_F$" src="http://planning.cs.uiuc.edu/img371.gif" width=22 align=middle border=0></SPAN> is not important. It may be applied in the last iteration, or it can be dropped altogether for problems that do not have a predetermined <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. However, one must force all plans considered by forward value iteration to originate from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>. We again have the choice of either making notation that imposes constraints on the action spaces or simply adding a term that forces infeasible plans to have infinite cost. Once again, the latter will be chosen here. 
<P><A name=2786></A>
<P>Let <SPAN class=MATH><IMG height=34 alt="$ C^*_k$" src="http://planning.cs.uiuc.edu/img430.gif" width=27 align=middle border=0></SPAN> denote the <EM>optimal cost-to-come</EM> from stage <SPAN class=MATH><IMG height=17 alt="$ 1$" src="http://planning.cs.uiuc.edu/img43.gif" width=14 align=bottom border=0></SPAN> to stage <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN>, optimized over all <SPAN class=MATH><IMG height=37 alt="$ (k-1)$" src="http://planning.cs.uiuc.edu/img431.gif" width=62 align=middle border=0></SPAN>-step plans. To preclude plans that do not start at <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>, the definition of <SPAN class=MATH><IMG height=34 alt="$ C^*_1$" src="http://planning.cs.uiuc.edu/img432.gif" width=27 align=middle border=0></SPAN> is given by 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
C^*_1(x_1) = l_I(x_1) ,
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle C^*_1(x_1) = l_I(x_1) ,$" src="http://planning.cs.uiuc.edu/img433.gif" width=136 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>13</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>in which <SPAN class=MATH><IMG height=34 alt="$ l_I$" src="http://planning.cs.uiuc.edu/img434.gif" width=18 align=middle border=0></SPAN> is a new function that yields <!-- MATH
 $l_I({x_{I}}) = 0$
 --><SPAN class=MATH><IMG height=37 alt="$ l_I({x_{I}}) = 0$" src="http://planning.cs.uiuc.edu/img435.gif" width=85 align=middle border=0></SPAN>, and <!-- MATH
 $l_I(x) = \infty$
 --><SPAN class=MATH><IMG height=37 alt="$ l_I(x) = \infty$" src="http://planning.cs.uiuc.edu/img436.gif" width=87 align=middle border=0></SPAN> for all <!-- MATH
 $x \not = {x_{I}}$
 --><SPAN class=MATH><IMG height=34 alt="$ x \not = {x_{I}}$" src="http://planning.cs.uiuc.edu/img437.gif" width=59 align=middle border=0></SPAN>. Thus, any plans that try to start from a state other than <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> will immediately receive infinite cost. 
<P>For an intermediate stage, <!-- MATH
 $k \in \{ 2,\ldots,K \}$
 --><SPAN class=MATH><IMG height=37 alt="$ k \in \{ 2,\ldots,K \}$" src="http://planning.cs.uiuc.edu/img438.gif" width=126 align=middle border=0></SPAN>, the following represents the optimal cost-to-come: 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:ctck></A><!-- MATH
 \begin{equation}
C^*_k(x_k) = \min_{u_1,\ldots,u_{k-1}} 
\left\{ l_I(x_1) + \sum_{i=1}^{k-1} l(x_i,u_i)
\right\} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=77 alt="$\displaystyle C^*_k(x_k) = \min_{u_1,\ldots,u_{k-1}} \left\{ l_I(x_1) + \sum_{i=1}^{k-1} l(x_i,u_i) \right\} .$" src="http://planning.cs.uiuc.edu/img439.gif" width=352 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>14</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>Note that the sum refers to a sequence of states, <!-- MATH
 $x_1, \ldots,
x_{k-1}$
 --><SPAN class=MATH><IMG height=33 alt="$ x_1, \ldots,&#10;x_{k-1}$" src="http://planning.cs.uiuc.edu/img440.gif" width=101 align=middle border=0></SPAN>, which is the result of applying the action sequence <!-- MATH
 $(u_1,
\ldots, u_{k-2})$
 --><SPAN class=MATH><IMG height=37 alt="$ (u_1,&#10;\ldots, u_{k-2})$" src="http://planning.cs.uiuc.edu/img441.gif" width=115 align=middle border=0></SPAN>. The last state, <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN>, is not included because its cost term, <!-- MATH
 $l(x_k,u_k)$
 --><SPAN class=MATH><IMG height=37 alt="$ l(x_k,u_k)$" src="http://planning.cs.uiuc.edu/img3.gif" width=71 align=middle border=0></SPAN>, requires the application of an action, <SPAN class=MATH><IMG height=33 alt="$ u_k$" src="http://planning.cs.uiuc.edu/img360.gif" width=24 align=middle border=0></SPAN>, which has not been chosen. If it is possible to write the cost additively, as <!-- MATH
 $l(x_k,u_k) = l_1(x_k) + l_2(u_k)$
 --><SPAN class=MATH><IMG height=37 alt="$ l(x_k,u_k) = l_1(x_k) + l_2(u_k)$" src="http://planning.cs.uiuc.edu/img442.gif" width=212 align=middle border=0></SPAN>, then the <SPAN class=MATH><IMG height=37 alt="$ l_1(x_k)$" src="http://planning.cs.uiuc.edu/img443.gif" width=51 align=middle border=0></SPAN> part could be included in the cost-to-come definition, if desired. This detail will not be considered further. 
<P>As in (<A href="http://planning.cs.uiuc.edu/node54.html#eqn:ctgk">2.5</A>), it is assumed in (<A href="http://planning.cs.uiuc.edu/node55.html#eqn:ctck">2.14</A>) that <!-- MATH
 $u_i \in
U(x_i)$
 --><SPAN class=MATH><IMG height=37 alt="$ u_i \in&#10;U(x_i)$" src="http://planning.cs.uiuc.edu/img444.gif" width=89 align=middle border=0></SPAN> for every <!-- MATH
 $i \in \{ 1,\ldots,k-1\}$
 --><SPAN class=MATH><IMG height=37 alt="$ i \in \{ 1,\ldots,k-1\}$" src="http://planning.cs.uiuc.edu/img445.gif" width=148 align=middle border=0></SPAN>. The resulting <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN>, obtained after applying <SPAN class=MATH><IMG height=33 alt="$ u_{k-1}$" src="http://planning.cs.uiuc.edu/img446.gif" width=41 align=middle border=0></SPAN>, must be the same <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN> that is named in the argument on the left side of (<A href="http://planning.cs.uiuc.edu/node55.html#eqn:ctck">2.14</A>). It might appear odd that <SPAN class=MATH><IMG height=33 alt="$ x_1$" src="http://planning.cs.uiuc.edu/img39.gif" width=23 align=middle border=0></SPAN> appears inside of the <SPAN class=MATH><IMG height=16 alt="$ \min$" src="http://planning.cs.uiuc.edu/img382.gif" width=36 align=bottom border=0></SPAN> above; however, this is not a problem. The state <SPAN class=MATH><IMG height=33 alt="$ x_1$" src="http://planning.cs.uiuc.edu/img39.gif" width=23 align=middle border=0></SPAN> can be completely determined once <!-- MATH
 $u_1,\ldots,u_{k-1}$
 --><SPAN class=MATH><IMG height=33 alt="$ u_1,\ldots,u_{k-1}$" src="http://planning.cs.uiuc.edu/img447.gif" width=101 align=middle border=0></SPAN> and <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN> are given. 
<P>The final forward value iteration is the arrival at the final stage, <SPAN class=MATH><IMG height=17 alt="$ F$" src="http://planning.cs.uiuc.edu/img188.gif" width=19 align=bottom border=0></SPAN>. The cost-to-come in this case is 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
C^*_F(x_F) = \min_{u_1,\ldots,u_K} 
\left\{ l_I(x_1) + \sum_{i=1}^K l(x_i,u_i)
\right\} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=77 alt="$\displaystyle C^*_F(x_F) = \min_{u_1,\ldots,u_K} \left\{ l_I(x_1) + \sum_{i=1}^K l(x_i,u_i) \right\} .$" src="http://planning.cs.uiuc.edu/img448.gif" width=346 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>15</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>This equation looks the same as (<A href="http://planning.cs.uiuc.edu/node54.html#eqn:ctgk">2.5</A>) after substituting <SPAN class=MATH><IMG height=17 alt="$ k=1$" src="http://planning.cs.uiuc.edu/img449.gif" width=50 align=bottom border=0></SPAN>; however, <SPAN class=MATH><IMG height=34 alt="$ l_I$" src="http://planning.cs.uiuc.edu/img434.gif" width=18 align=middle border=0></SPAN> is used here instead of <SPAN class=MATH><IMG height=34 alt="$ l_F$" src="http://planning.cs.uiuc.edu/img371.gif" width=22 align=middle border=0></SPAN>. This has the effect of filtering the plans that are considered to include only those that start at <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>. The forward value iterations find optimal plans to any reachable final state from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>. This behavior is complementary to that of backward value iteration. In that case, <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> was fixed, and optimal plans from any initial state were found. For forward value iteration, this is reversed. 
<P>To express the dynamic-programming recurrence, one further issue remains. Suppose that <SPAN class=MATH><IMG height=34 alt="$ C^*_{k-1}$" src="http://planning.cs.uiuc.edu/img450.gif" width=44 align=middle border=0></SPAN> is known by induction, and we want to compute <!-- MATH
 $C^*_k(x_k)$
 --><SPAN class=MATH><IMG height=37 alt="$ C^*_k(x_k)$" src="http://planning.cs.uiuc.edu/img451.gif" width=60 align=middle border=0></SPAN> for a particular <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN>. This means that we must start at some state <SPAN class=MATH><IMG height=33 alt="$ x_{k-1}$" src="http://planning.cs.uiuc.edu/img452.gif" width=41 align=middle border=0></SPAN> and arrive in state <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN> by applying some action. Once again, the backward state transition equation<A name=2810></A> from Section <A href="http://planning.cs.uiuc.edu/node49.html#sec:bws">2.2.3</A> is useful. Using the stage indices, it is written here as <!-- MATH
 $x_{k-1} = {f^{-1}}(x_k,u^{-1}_k)$
 --><SPAN class=MATH><IMG height=40 alt="$ x_{k-1} = {f^{-1}}(x_k,u^{-1}_k)$" src="http://planning.cs.uiuc.edu/img453.gif" width=166 align=middle border=0></SPAN>. 
<P>The recurrence is 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:fdp></A><!-- MATH
 \begin{equation}
C^*_k(x_k) = 
\min_{u^{-1}_k \in {U^{-1}}(x_k)} 
\Big\{ C^*_{k-1}(x_{k-1}) + l(x_{k-1},u_{k-1}) \Big\} ,
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=52 alt="$\displaystyle C^*_k(x_k) = \min_{u^{-1}_k \in {U^{-1}}(x_k)} \Big\{ C^*_{k-1}(x_{k-1}) + l(x_{k-1},u_{k-1}) \Big\} ,$" src="http://planning.cs.uiuc.edu/img454.gif" width=418 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>16</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>in which <!-- MATH
 $x_{k-1} = {f^{-1}}(x_k,u^{-1}_k)$
 --><SPAN class=MATH><IMG height=40 alt="$ x_{k-1} = {f^{-1}}(x_k,u^{-1}_k)$" src="http://planning.cs.uiuc.edu/img453.gif" width=166 align=middle border=0></SPAN> and <!-- MATH
 $u_{k-1} \in U(x_{k-1})$
 --><SPAN class=MATH><IMG height=37 alt="$ u_{k-1} \in U(x_{k-1})$" src="http://planning.cs.uiuc.edu/img455.gif" width=130 align=middle border=0></SPAN> is the input to which <!-- MATH
 $u^{-1}_k \in {U^{-1}}(x_k)$
 --><SPAN class=MATH><IMG height=40 alt="$ u^{-1}_k \in {U^{-1}}(x_k)$" src="http://planning.cs.uiuc.edu/img456.gif" width=123 align=middle border=0></SPAN> corresponds. Using (<A href="http://planning.cs.uiuc.edu/node55.html#eqn:fdp">2.16</A>), the final cost-to-come is iteratively computed in <!-- MATH
 $O(K |X| |U|)$
 --><SPAN class=MATH><IMG height=37 alt="$ O(K \vert X\vert \vert U\vert)$" src="http://planning.cs.uiuc.edu/img408.gif" width=104 align=middle border=0></SPAN> time, as in the case of computing the first-stage cost-to-go in the backward value-iteration method. <A name=2825></A>
<P>
<DIV align=center><A name=fig:ctcfivestate></A><A name=3350></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.12:</STRONG> The optimal cost-to-come functions computed by forward value iteration.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=146 alt="\begin{figure}\begin{center}&#10;\begin{tabular}{\vert c\vert c\vert c\vert c\vert c...&#10;...ne&#10;$C^*_5$ &amp; 6 &amp; 6 &amp; 5 &amp; 6 &amp; 5  \hline&#10;\end{tabular}\end{center}&#10;\end{figure}" src="http://planning.cs.uiuc.edu/img457.gif" width=224 border=0></TD></TR></TBODY></TABLE></DIV>
<P>
<P>
<DIV><B>Example <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>4</SPAN></B> (Forward Value Iteration) &nbsp; Example <A href="http://planning.cs.uiuc.edu/node54.html#exa:fivestate">2.3</A> is revisited for the case of forward value iterations with a fixed plan length of <SPAN class=MATH><IMG height=17 alt="$ K=4$" src="http://planning.cs.uiuc.edu/img413.gif" width=57 align=bottom border=0></SPAN>. The cost-to-come functions shown in Figure <A href="http://planning.cs.uiuc.edu/node55.html#fig:ctcfivestate">2.12</A> are obtained by direct application of (<A href="http://planning.cs.uiuc.edu/node55.html#eqn:fdp">2.16</A>). It will be helpful to refer to Figures <A href="http://planning.cs.uiuc.edu/node54.html#fig:fivestate2">2.10</A> and <A href="http://planning.cs.uiuc.edu/node54.html#fig:fivestate3">2.11</A> once again. The first row corresponds to the immediate application of <SPAN class=MATH><IMG height=34 alt="$ l_I$" src="http://planning.cs.uiuc.edu/img434.gif" width=18 align=middle border=0></SPAN>. In the second row, finite values are obtained for <SPAN class=MATH><IMG height=17 alt="$ a$" src="http://planning.cs.uiuc.edu/img458.gif" width=15 align=bottom border=0></SPAN> and <SPAN class=MATH><IMG height=17 alt="$ b$" src="http://planning.cs.uiuc.edu/img424.gif" width=13 align=bottom border=0></SPAN>, which are reachable in one stage from <!-- MATH
 ${x_{I}}= a$
 --><SPAN class=MATH><IMG height=33 alt="$ {x_{I}}= a$" src="http://planning.cs.uiuc.edu/img414.gif" width=58 align=middle border=0></SPAN>. The iterations continue until <SPAN class=MATH><IMG height=17 alt="$ k=5$" src="http://planning.cs.uiuc.edu/img428.gif" width=50 align=bottom border=0></SPAN>, at which point that optimal cost-to-come is determined for every state. <!-- MATH
 $\blacksquare$
 --><SPAN class=MATH><IMG height=16 alt="$ \blacksquare$" src="http://planning.cs.uiuc.edu/img282.gif" width=20 align=bottom border=0></SPAN> <BR></DIV>