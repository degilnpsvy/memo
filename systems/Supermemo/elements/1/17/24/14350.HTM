Here is a table of automatic variables: <A name=index-g_t_0024_0040_0040-963></A><A name=index-g_t_0040_0040-_0040r_007b_0028automatic-variable_0029_007d-964></A>
<DL>
<DT><FONT class=extract><CODE>$@</CODE> </FONT>
<DD><FONT class=extract>The file name of the target of the rule. If the target is an archive member, then &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of the archive file. In a pattern rule that has multiple targets (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Intro"><FONT class=extract>Introduction to Pattern Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the name of whichever target caused the rule's recipe to be run.</FONT> 
<P><A name=index-g_t_0024_0025-965></A><A name=index-g_t_0025-_0040r_007b_0028automatic-variable_0029_007d-966></A><BR></P>
<DT><FONT class=extract><CODE>$%</CODE> </FONT>
<DD><FONT class=extract>The target member name, when the target is an archive member. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>. For example, if the target is <SAMP><SPAN class=file>foo.a(bar.o)</SPAN></SAMP> then &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o</SPAN></SAMP> and &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>foo.a</SPAN></SAMP>. &#8216;<SAMP><SPAN class=samp>$%</SPAN></SAMP>&#8217; is empty when the target is not an archive member.</FONT> 
<P><A name=index-g_t_0024_003c-967></A><A name=index-g_t_003c-_0040r_007b_0028automatic-variable_0029_007d-968></A><BR></P>
<DT><FONT class=extract><CODE>$&lt;</CODE> </FONT>
<DD><FONT class=extract>The name of the first prerequisite. If the target got its recipe from an implicit rule, this will be the first prerequisite added by the implicit rule (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rules"><FONT class=extract>Implicit Rules</FONT></A><FONT class=extract>).</FONT> 
<P><A name=index-g_t_0024_003f-969></A><A name=index-g_t_003f-_0040r_007b_0028automatic-variable_0029_007d-970></A><BR></P>
<DT><FONT class=extract><CODE>$?</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites that are newer than the target, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>).</FONT> <A name=index-prerequisites_002c-list-of-changed-971></A><A name=index-list-of-changed-prerequisites-972></A><A name=index-g_t_0024_005e-973></A><A name=index-g_t_005e-_0040r_007b_0028automatic-variable_0029_007d-974></A><BR>
<DT><FONT class=extract><CODE>$^</CODE> </FONT>
<DD><FONT class=extract>The names of all the prerequisites, with spaces between them. For prerequisites which are archive members, only the named member is used (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Archives"><FONT class=extract>Archives</FONT></A><FONT class=extract>). A target has only one prerequisite on each other file it depends on, no matter how many times each file is listed as a prerequisite. So if you list a prerequisite more than once for a target, the value of <CODE>$^</CODE> contains just one copy of the name. This list does <STRONG>not</STRONG> contain any of the order-only prerequisites; for those see the &#8216;<SAMP><SPAN class=samp>$|</SPAN></SAMP>&#8217; variable, below.</FONT> <A name=index-prerequisites_002c-list-of-all-975></A><A name=index-list-of-all-prerequisites-976></A><A name=index-g_t_0024_002b-977></A><A name=index-g_t_002b-_0040r_007b_0028automatic-variable_0029_007d-978></A><BR>
<DT><FONT class=extract><CODE>$+</CODE> </FONT>
<DD><FONT class=extract>This is like &#8216;<SAMP><SPAN class=samp>$^</SPAN></SAMP>&#8217;, but prerequisites listed more than once are duplicated in the order they were listed in the makefile. This is primarily useful for use in linking commands where it is meaningful to repeat library file names in a particular order.</FONT> 
<P><A name=index-g_t_0024_007c-979></A><A name=index-g_t_007c-_0040r_007b_0028automatic-variable_0029_007d-980></A><BR></P>
<DT><FONT class=extract><CODE>$|</CODE> </FONT>
<DD><FONT class=extract>The names of all the order-only prerequisites, with spaces between them.</FONT> 
<P><A name=index-g_t_0024_002a-981></A><A name=index-g_t_002a-_0040r_007b_0028automatic-variable_0029_007d-982></A><BR></P>
<DT><FONT class=extract><CODE>$*</CODE> </FONT>
<DD><FONT class=extract>The stem with which an implicit rule matches (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Pattern-Match"><FONT class=extract>How Patterns Match</FONT></A><FONT class=extract>). If the target is <SAMP><SPAN class=file>dir/a.foo.b</SPAN></SAMP> and the target pattern is <SAMP><SPAN class=file>a.%.b</SPAN></SAMP> then the stem is <SAMP><SPAN class=file>dir/foo</SPAN></SAMP>. The stem is useful for constructing names of related files. </FONT><A name=index-stem_002c-variable-for-983></A><FONT class=extract>In a static pattern rule, the stem is part of the file name that matched the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in the target pattern. </FONT>
<P><FONT class=extract>In an explicit rule, there is no stem; so &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; cannot be determined in that way. Instead, if the target name ends with a recognized suffix (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>), &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the target name minus the suffix. For example, if the target name is &#8216;<SAMP><SPAN class=samp>foo.c</SPAN></SAMP>&#8217;, then &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217;, since &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; is a suffix. GNU <CODE>make</CODE> does this bizarre thing only for compatibility with other implementations of <CODE>make</CODE>. You should generally avoid using &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; except in implicit rules or static pattern rules. </FONT>
<P><FONT class=extract>If the target name in an explicit rule does not end with a recognized suffix, &#8216;<SAMP><SPAN class=samp>$*</SPAN></SAMP>&#8217; is set to the empty string for that rule.</FONT> </P></DD></DL>