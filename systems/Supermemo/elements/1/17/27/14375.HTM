<H3 class=section>8.6 The <CODE>file</CODE> Function</H3>
<P><A name=index-file-648></A><A name=index-writing-to-a-file-649></A><A name=index-file_002c-writing-to-650></A>The <CODE>file</CODE> function allows the makefile to write to a file. Two modes of writing are supported: overwrite, where the text is written to the beginning of the file and any existing content is lost, and append, where the text is written to the end of the file, preserving the existing content. In all cases the file is created if it does not exist. 
<P><FONT class=extract>The syntax of the <CODE>file</CODE> function is: </FONT><PRE class=example><FONT class=extract>     $(file <VAR>op</VAR> <VAR>filename</VAR>,<VAR>text</VAR>)
</FONT></PRE>
<P><FONT class=extract>The operator <VAR>op</VAR> can be either <CODE>&gt;</CODE> which indicates overwrite mode, or <CODE>&gt;&gt;</CODE> which indicates append mode. The <VAR>filename</VAR> indicates the file to be written to. There may optionally be whitespace between the operator and the file name.</FONT> 
<P><FONT class=extract>When the <CODE>file</CODE> function is expanded all its arguments are expanded first, then the file indicated by <VAR>filename</VAR> will be opened in the mode described by <VAR>op</VAR>. Finally <VAR>text</VAR> will be written to the file. If <VAR>text</VAR> does not already end in a newline, a final newline will be written. The result of evaluating the <CODE>file</CODE> function is always the empty string.</FONT> 
<P>It is a fatal error if the file cannot be opened for writing, or if the write operation fails. 
<P><FONT class=extract>For example, the <CODE>file</CODE> function can be useful if your build system has a limited command line size and your recipe runs a command that can accept arguments from a file as well. Many commands use the convention that an argument prefixed with an <CODE>@</CODE> specifies a file containing more arguments. Then you might write your recipe in this way: </FONT><PRE class=example><FONT class=extract>     program: $(OBJECTS)
             $(file &gt;$@.in,$^)
             $(CMD) $(CMDFLAGS) @$@.in
             @rm $@.in
</FONT></PRE>
<P><FONT class=extract>If the command required each argument to be on a separate line of the input file, you might write your recipe like this: </FONT><PRE class=example><FONT class=extract>     program: $(OBJECTS)
             $(file &gt;$@.in,) $(foreach O,$^,$(file &gt;&gt;$@.in,$O))
             $(CMD) $(CMDFLAGS) @$@.in
             @rm $@.in</FONT>
</PRE>