<DT><FONT class=extract>Linking a single object file </FONT>
<DD><A name=index-linking_002c-predefined-rule-for-844></A><A name=index-ld-845></A><A name=index-g_t_002eo-846></A><FONT class=extract><SAMP><VAR>n</VAR></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> by running the linker (usually called <CODE>ld</CODE>) via the C compiler. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(CC)&nbsp;$(LDFLAGS)&nbsp;</SPAN><VAR>n</VAR><SPAN class=samp>.o&nbsp;$(LOADLIBES)&nbsp;$(LDLIBS)</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>This rule does the right thing for a simple program with only one source file.</FONT> <FONT class=extract>It will also do the right thing if there are multiple object files (presumably coming from various other source files), one of which has a name matching that of the executable file. Thus, </FONT><PRE class=example><FONT class=extract>          x: y.o z.o
</FONT></PRE>
<P class=noindent><FONT class=extract>when <SAMP><SPAN class=file>x.c</SPAN></SAMP>, <SAMP><SPAN class=file>y.c</SPAN></SAMP> and <SAMP><SPAN class=file>z.c</SPAN></SAMP> all exist will execute: </FONT><PRE class=example><FONT class=extract>          cc -c x.c -o x.o
          cc -c y.c -o y.o
          cc -c z.c -o z.o
          cc x.o y.o z.o -o x
          rm -f x.o
          rm -f y.o
          rm -f z.o
</FONT></PRE>
<P class=noindent>In more complicated cases, such as when there is no object file whose name derives from the executable file name, you must write an explicit recipe for linking. 
<P>Each kind of file automatically made into &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files will be automatically linked by using the compiler (&#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>$(FC)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>$(PC)</SPAN></SAMP>&#8217;; the C compiler &#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217; is used to assemble &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217; files) without the &#8216;<SAMP><SPAN class=samp>-c</SPAN></SAMP>&#8217; option. This could be done by using the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files as intermediates, but it is faster to do the compiling and linking in one step, so that's how it's done.</P></DD>