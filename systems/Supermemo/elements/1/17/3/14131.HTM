<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>3</SPAN>.<SPAN class=arabic>2</SPAN> Optimal Plans of Unspecified Lengths 
<P><A name=2846></A>The value-iteration method for fixed-length plans can be generalized nicely to the case in which plans of different lengths are allowed. There will be no bound on the maximal length of a plan; therefore, the current case is truly a generalization of Formulation <A href="http://planning.cs.uiuc.edu/node37.html#for:dfp">2.1</A> because arbitrarily long plans may be attempted in efforts to reach <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. The model for the general case does not require the specification of <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> but instead introduces a special action, <SPAN class=MATH><IMG height=33 alt="$ u_T$" src="http://planning.cs.uiuc.edu/img459.gif" width=26 align=middle border=0></SPAN>. 
<P><A name=2848></A>
<P>
<DIV><B>Formulation <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>3</SPAN></B> (Discrete Optimal Planning) &nbsp; <A name=for:dop></A>
<OL>
<LI>All of the components from Formulation <A href="http://planning.cs.uiuc.edu/node37.html#for:dfp">2.1</A> are inherited directly: <SPAN class=MATH><IMG height=17 alt="$ X$" src="http://planning.cs.uiuc.edu/img8.gif" width=22 align=bottom border=0></SPAN>, <SPAN class=MATH><IMG height=37 alt="$ U(x)$" src="http://planning.cs.uiuc.edu/img256.gif" width=45 align=middle border=0></SPAN>, <SPAN class=MATH><IMG height=34 alt="$ f$" src="http://planning.cs.uiuc.edu/img14.gif" width=16 align=middle border=0></SPAN>, <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>, and <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. Also, the notion of stages from Formulation <A href="http://planning.cs.uiuc.edu/node52.html#for:dflop">2.2</A> is used. 
<LI>Let <SPAN class=MATH><IMG height=17 alt="$ L$" src="http://planning.cs.uiuc.edu/img83.gif" width=18 align=bottom border=0></SPAN> denote a stage-additive cost functional, which may be applied to any <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN>-step plan, <SPAN class=MATH><IMG height=33 alt="$ \pi _K$" src="http://planning.cs.uiuc.edu/img352.gif" width=28 align=middle border=0></SPAN>, to yield 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
L(\pi _K) = \sum_{k=1}^K l(x_k,u_k) + l_F(x_F) .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=77 alt="$\displaystyle L(\pi _K) = \sum_{k=1}^K l(x_k,u_k) + l_F(x_F) .$" src="http://planning.cs.uiuc.edu/img365.gif" width=260 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>17</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>In comparison with <SPAN class=MATH><IMG height=17 alt="$ L$" src="http://planning.cs.uiuc.edu/img83.gif" width=18 align=bottom border=0></SPAN> from Formulation <A href="http://planning.cs.uiuc.edu/node52.html#for:dflop">2.2</A>, the present expression does not consider <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> as a predetermined constant. It will now vary, depending on the length of the plan. Thus, the domain of <SPAN class=MATH><IMG height=17 alt="$ L$" src="http://planning.cs.uiuc.edu/img83.gif" width=18 align=bottom border=0></SPAN> is much larger. 
<LI>Each <SPAN class=MATH><IMG height=37 alt="$ U(x)$" src="http://planning.cs.uiuc.edu/img256.gif" width=45 align=middle border=0></SPAN> contains the special <EM>termination action</EM><A name=3959></A>, <SPAN class=MATH><IMG height=33 alt="$ u_T$" src="http://planning.cs.uiuc.edu/img459.gif" width=26 align=middle border=0></SPAN>. If <SPAN class=MATH><IMG height=33 alt="$ u_T$" src="http://planning.cs.uiuc.edu/img459.gif" width=26 align=middle border=0></SPAN> is applied at <SPAN class=MATH><IMG height=33 alt="$ x_k$" src="http://planning.cs.uiuc.edu/img4.gif" width=24 align=middle border=0></SPAN>, then the action is repeatedly applied forever, the state remains unchanged, and no more cost accumulates. Thus, for all <SPAN class=MATH><IMG height=34 alt="$ i \geq k$" src="http://planning.cs.uiuc.edu/img460.gif" width=47 align=middle border=0></SPAN>, <SPAN class=MATH><IMG height=33 alt="$ u_i = u_T$" src="http://planning.cs.uiuc.edu/img461.gif" width=67 align=middle border=0></SPAN>, <SPAN class=MATH><IMG height=33 alt="$ x_i = x_k$" src="http://planning.cs.uiuc.edu/img462.gif" width=65 align=middle border=0></SPAN>, and <!-- MATH
 $l(x_i,u_T) =
0$
 --><SPAN class=MATH><IMG height=37 alt="$ l(x_i,u_T) =&#10;0$" src="http://planning.cs.uiuc.edu/img463.gif" width=105 align=middle border=0></SPAN>. </LI></OL></DIV>
<P></P>
<P>The termination action is the key to allowing plans of different lengths. It will appear throughout this book. Suppose that value iterations are performed up to <SPAN class=MATH><IMG height=17 alt="$ K=5$" src="http://planning.cs.uiuc.edu/img464.gif" width=57 align=bottom border=0></SPAN>, and for the problem there exists a two-step solution plan, <SPAN class=MATH><IMG height=37 alt="$ (u_1,u_2)$" src="http://planning.cs.uiuc.edu/img465.gif" width=64 align=middle border=0></SPAN>, that arrives in <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN>. This plan is equivalent to the five-step plan <!-- MATH
 $(u_1,u_2,u_T,u_T,u_T)$
 --><SPAN class=MATH><IMG height=37 alt="$ (u_1,u_2,u_T,u_T,u_T)$" src="http://planning.cs.uiuc.edu/img466.gif" width=153 align=middle border=0></SPAN> because the termination action does not change the state, nor does it accumulate cost. The resulting five-step plan reaches <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> and costs the same as <SPAN class=MATH><IMG height=37 alt="$ (u_1,u_2)$" src="http://planning.cs.uiuc.edu/img465.gif" width=64 align=middle border=0></SPAN>. With this simple extension, the forward and backward value iteration methods of Section <A href="http://planning.cs.uiuc.edu/node53.html#sec:oflp">2.3.1</A> may be applied for any fixed <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> to optimize over all plans of length <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> or less (instead of fixing <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN>). 
<P>The next step is to remove the dependency on <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN>. Consider running backward value iterations indefinitely. At some point, <SPAN class=MATH><IMG height=34 alt="$ G^*_1$" src="http://planning.cs.uiuc.edu/img407.gif" width=27 align=middle border=0></SPAN> will be computed, but there is no reason why the process cannot be continued onward to <SPAN class=MATH><IMG height=34 alt="$ G^*_0$" src="http://planning.cs.uiuc.edu/img467.gif" width=27 align=middle border=0></SPAN>, <SPAN class=MATH><IMG height=34 alt="$ G^*_{-1}$" src="http://planning.cs.uiuc.edu/img468.gif" width=38 align=middle border=0></SPAN>, and so on. Recall that <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> is not utilized in the backward value-iteration method; therefore, there is no concern regarding the starting initial state of the plans. Suppose that backward value iteration was applied for <SPAN class=MATH><IMG height=17 alt="$ K =&#10;16$" src="http://planning.cs.uiuc.edu/img469.gif" width=66 align=bottom border=0></SPAN> and was executed down to <SPAN class=MATH><IMG height=34 alt="$ G^*_{-8}$" src="http://planning.cs.uiuc.edu/img470.gif" width=38 align=middle border=0></SPAN>. This considers all plans of length <SPAN class=MATH><IMG height=17 alt="$ 25$" src="http://planning.cs.uiuc.edu/img122.gif" width=23 align=bottom border=0></SPAN> or less. Note that it is harmless to add <SPAN class=MATH><IMG height=17 alt="$ 9$" src="http://planning.cs.uiuc.edu/img89.gif" width=14 align=bottom border=0></SPAN> to all stage indices to shift all of the cost-to-go functions. Instead of running from <SPAN class=MATH><IMG height=34 alt="$ G^*_{-8}$" src="http://planning.cs.uiuc.edu/img470.gif" width=38 align=middle border=0></SPAN> to <SPAN class=MATH><IMG height=34 alt="$ G^*_{16}$" src="http://planning.cs.uiuc.edu/img471.gif" width=34 align=middle border=0></SPAN>, they can run from <SPAN class=MATH><IMG height=34 alt="$ G^*_1$" src="http://planning.cs.uiuc.edu/img407.gif" width=27 align=middle border=0></SPAN> to <SPAN class=MATH><IMG height=34 alt="$ G^*_{25}$" src="http://planning.cs.uiuc.edu/img472.gif" width=34 align=middle border=0></SPAN> without affecting their values. The index shifting is allowed because none of the costs depend on the particular index that is given to the stage. The only important aspect of the value iterations is that they proceed backward and consecutively from stage to stage. 
<P>Eventually, enough iterations will have been executed so that an optimal plan is known from every state that can reach <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. From that stage, say <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN>, onward, the cost-to-go values from one value iteration to the next will be <I>stationary</I>,<A name=2868></A> meaning that for all <SPAN class=MATH><IMG height=34 alt="$ i \leq k$" src="http://planning.cs.uiuc.edu/img473.gif" width=47 align=middle border=0></SPAN>, <!-- MATH
 $G^*_{i-1}(x)
= G^*_i(x)$
 --><SPAN class=MATH><IMG height=37 alt="$ G^*_{i-1}(x)&#10;= G^*_i(x)$" src="http://planning.cs.uiuc.edu/img474.gif" width=140 align=middle border=0></SPAN> for all <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>. Once the stationary condition is reached, the cost-to-go function no longer depends on a particular stage <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN>. In this case, the stage index may be dropped, and the recurrence becomes 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:statdp></A><!-- MATH
 \begin{equation}
G^*(x) = \min_{u} \Big\{ l(x,u) + G^*(f(x,u)) \Big\} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=52 alt="$\displaystyle G^*(x) = \min_{u} \Big\{ l(x,u) + G^*(f(x,u)) \Big\} .$" src="http://planning.cs.uiuc.edu/img475.gif" width=308 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>18</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>
<P>Are there any conditions under which backward value iterations could be executed forever, with each iteration producing a cost-to-go function for which some values are different from the previous iteration? If <SPAN class=MATH><IMG height=37 alt="$ l(x,u)$" src="http://planning.cs.uiuc.edu/img301.gif" width=55 align=middle border=0></SPAN> is nonnegative for all <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN> and <!-- MATH
 $u \in
U(x)$
 --><SPAN class=MATH><IMG height=37 alt="$ u \in U(x)$" src="http://planning.cs.uiuc.edu/img156.gif" width=79 align=middle border=0></SPAN>, then this could never happen. It could certainly be true that, for any fixed <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN>, longer plans will exist, but this cannot be said of <EM>optimal</EM> plans. From every <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>, there either exists a plan that reaches <SPAN class=MATH><IMG height=34 alt="$ X_{G}$" src="http://planning.cs.uiuc.edu/img476.gif" width=32 align=middle border=0></SPAN> with finite cost or there is no solution. For each state from which there exists a plan that reaches <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>, consider the number of stages in the optimal plan. Consider the maximum number of stages taken from all states that can reach <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. This serves as an upper bound on the number of value iterations before the cost-to-go becomes stationary. Any further iterations will just consider solutions that are worse than the ones already considered (some may be equivalent due to the termination action and shifting of stages). Some trouble might occur if <SPAN class=MATH><IMG height=37 alt="$ l(x,u)$" src="http://planning.cs.uiuc.edu/img301.gif" width=55 align=middle border=0></SPAN> contains negative values. If the state transition graph contains a cycle for which total cost is negative, then it is preferable to execute a plan that travels around the cycle forever, thereby reducing the total cost to <SPAN class=MATH><IMG height=33 alt="$ -\infty$" src="http://planning.cs.uiuc.edu/img477.gif" width=39 align=middle border=0></SPAN>. Therefore, we will assume that the cost functional is defined in a sensible way so that negative cycles do not exist. Otherwise, the optimization model itself appears flawed. Some negative values for <SPAN class=MATH><IMG height=37 alt="$ l(x,u)$" src="http://planning.cs.uiuc.edu/img301.gif" width=55 align=middle border=0></SPAN>, however, are allowed as long as there are no negative cycles. (It is straightforward to detect and report negative cycles before running the value iterations.) 
<P>Since the particular stage index is unimportant, let <SPAN class=MATH><IMG height=17 alt="$ k = 0$" src="http://planning.cs.uiuc.edu/img478.gif" width=50 align=bottom border=0></SPAN> be the index of the final stage, which is the stage at which the backward value iterations begin. Hence, <SPAN class=MATH><IMG height=34 alt="$ G^*_0$" src="http://planning.cs.uiuc.edu/img467.gif" width=27 align=middle border=0></SPAN> is the final stage cost, which is obtained directly from <SPAN class=MATH><IMG height=34 alt="$ l_F$" src="http://planning.cs.uiuc.edu/img371.gif" width=22 align=middle border=0></SPAN>. Let <SPAN class=MATH><IMG height=34 alt="$ -K$" src="http://planning.cs.uiuc.edu/img479.gif" width=37 align=middle border=0></SPAN> denote the stage index at which the cost-to-go values all become stationary. At this stage, the optimal cost-to-go function, <!-- MATH
 $G^*: X \rightarrow {\mathbb{R}}
\cup \{\infty\}$
 --><SPAN class=MATH><IMG height=37 alt="$ G^*: X \rightarrow {\mathbb{R}}&#10;\cup \{\infty\}$" src="http://planning.cs.uiuc.edu/img480.gif" width=163 align=middle border=0></SPAN>, is expressed by assigning <!-- MATH
 $G^*= G^*_{-K}$
 --><SPAN class=MATH><IMG height=34 alt="$ G^*= G^*_{-K}$" src="http://planning.cs.uiuc.edu/img481.gif" width=91 align=middle border=0></SPAN>. In other words, the particular stage index no longer matters. The value <SPAN class=MATH><IMG height=37 alt="$ G^*(x)$" src="http://planning.cs.uiuc.edu/img482.gif" width=52 align=middle border=0></SPAN> gives the optimal cost to go from state <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN> to the specific goal state <SPAN class=MATH><IMG height=33 alt="$ {x_{G}}$" src="http://planning.cs.uiuc.edu/img215.gif" width=27 align=middle border=0></SPAN>. 
<P>If the optimal actions are not stored during the value iterations, the optimal cost-to-go, <SPAN class=MATH><IMG height=17 alt="$ G^*$" src="http://planning.cs.uiuc.edu/img224.gif" width=27 align=bottom border=0></SPAN>, can be used to efficiently recover them. Consider starting from some <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>. What is the optimal next action? This is given by 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:ctggen></A><!-- MATH
 \begin{equation}
u^* = \operatornamewithlimits{argmin}_{u \in U(x)} \Big\{ l(x,u) + G^*(f(x,u)) \Big\} ,
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=52 alt="$\displaystyle u^* = \operatornamewithlimits{argmin}_{u \in U(x)} \Big\{ l(x,u) + G^*(f(x,u)) \Big\} ,$" src="http://planning.cs.uiuc.edu/img483.gif" width=305 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>19</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>in which <!-- MATH
 $\operatornamewithlimits{argmin}$
 --><SPAN class=MATH><IMG height=33 alt="$ \operatornamewithlimits{argmin}$" src="http://planning.cs.uiuc.edu/img484.gif" width=62 align=middle border=0></SPAN> denotes the argument that achieves the minimum value of the expression. The action minimizes an expression that is very similar to (<A href="http://planning.cs.uiuc.edu/node54.html#eqn:ctgk2">2.11</A>). The only differences between (<A href="http://planning.cs.uiuc.edu/node56.html#eqn:ctggen">2.19</A>) and (<A href="http://planning.cs.uiuc.edu/node54.html#eqn:ctgk2">2.11</A>) are that the stage indices are dropped in (<A href="http://planning.cs.uiuc.edu/node56.html#eqn:ctggen">2.19</A>) because the cost-to-go values no longer depend on them, and <!-- MATH
 $\operatornamewithlimits{argmin}$
 --><SPAN class=MATH><IMG height=33 alt="$ \operatornamewithlimits{argmin}$" src="http://planning.cs.uiuc.edu/img484.gif" width=62 align=middle border=0></SPAN> is used so that <SPAN class=MATH><IMG height=16 alt="$ u^*$" src="http://planning.cs.uiuc.edu/img485.gif" width=23 align=bottom border=0></SPAN> is selected. After applying <SPAN class=MATH><IMG height=16 alt="$ u^*$" src="http://planning.cs.uiuc.edu/img485.gif" width=23 align=bottom border=0></SPAN>, the state transition equation is used to obtain <!-- MATH
 $x' = f(x,u^*)$
 --><SPAN class=MATH><IMG height=37 alt="$ x' = f(x,u^*)$" src="http://planning.cs.uiuc.edu/img486.gif" width=108 align=middle border=0></SPAN>, and (<A href="http://planning.cs.uiuc.edu/node56.html#eqn:ctggen">2.19</A>) may be applied again on <SPAN class=MATH><IMG height=18 alt="$ x'$" src="http://planning.cs.uiuc.edu/img254.gif" width=20 align=bottom border=0></SPAN>. This process continues until a state in <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> is reached. This procedure is based directly on the dynamic programming recurrence; therefore, it recovers the optimal plan. The function <SPAN class=MATH><IMG height=17 alt="$ G^*$" src="http://planning.cs.uiuc.edu/img224.gif" width=27 align=bottom border=0></SPAN> serves as a kind of guide that leads the system from any initial state into the goal set optimally. This can be considered as a special case of a <EM>navigation function</EM><A name=3984></A>, which will be covered in Section <A href="http://planning.cs.uiuc.edu/node368.html#sec:compfb">8.2.2</A>. 
<P>As in the case of fixed-length plans, the direction of the value iterations can be reversed to obtain a forward value-iteration method for the variable-length planning problem. In this case, the backward state transition equation, <SPAN class=MATH><IMG height=38 alt="$ {f^{-1}}$" src="http://planning.cs.uiuc.edu/img334.gif" width=34 align=middle border=0></SPAN>, is used once again. Also, the initial cost term <SPAN class=MATH><IMG height=34 alt="$ l_I$" src="http://planning.cs.uiuc.edu/img434.gif" width=18 align=middle border=0></SPAN> is used instead of <SPAN class=MATH><IMG height=34 alt="$ l_F$" src="http://planning.cs.uiuc.edu/img371.gif" width=22 align=middle border=0></SPAN>, as in (<A href="http://planning.cs.uiuc.edu/node55.html#eqn:ctck">2.14</A>). The forward value-iteration method starts at <SPAN class=MATH><IMG height=17 alt="$ k=1$" src="http://planning.cs.uiuc.edu/img449.gif" width=50 align=bottom border=0></SPAN>, and then iterates until the cost-to-come becomes stationary. Once again, the termination action, <SPAN class=MATH><IMG height=33 alt="$ u_T$" src="http://planning.cs.uiuc.edu/img459.gif" width=26 align=middle border=0></SPAN>, preserves the cost of plans that arrived at a state in earlier iterations. Note that it is not required to specify <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>. A counterpart to <SPAN class=MATH><IMG height=17 alt="$ G^*$" src="http://planning.cs.uiuc.edu/img224.gif" width=27 align=bottom border=0></SPAN> may be obtained, from which optimal actions can be recovered. When the cost-to-come values become stationary, an optimal cost-to-come function, <!-- MATH
 $C^*: X \rightarrow {\mathbb{R}}\cup \{\infty\}$
 --><SPAN class=MATH><IMG height=37 alt="$ C^*: X \rightarrow {\mathbb{R}}\cup \{\infty\}$" src="http://planning.cs.uiuc.edu/img487.gif" width=163 align=middle border=0></SPAN>, may be expressed by assigning <!-- MATH
 $C^*= C^*_F$
 --><SPAN class=MATH><IMG height=34 alt="$ C^*= C^*_F$" src="http://planning.cs.uiuc.edu/img488.gif" width=77 align=middle border=0></SPAN>, in which <SPAN class=MATH><IMG height=17 alt="$ F$" src="http://planning.cs.uiuc.edu/img188.gif" width=19 align=bottom border=0></SPAN> is the final stage reached when the algorithm terminates. The value <SPAN class=MATH><IMG height=37 alt="$ C^*(x)$" src="http://planning.cs.uiuc.edu/img303.gif" width=52 align=middle border=0></SPAN> gives the cost of an optimal plan that starts from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> and reaches <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN>. The optimal action sequence for any specified goal <!-- MATH
 ${x_{G}}\in X$
 --><SPAN class=MATH><IMG height=34 alt="$ {x_{G}}\in X$" src="http://planning.cs.uiuc.edu/img489.gif" width=67 align=middle border=0></SPAN> can be obtained using <A name=2889></A>
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:ctcgen></A><!-- MATH
 \begin{equation}
\operatornamewithlimits{argmin}_{u^{-1}\in {U^{-1}}} \Big\{ C^*({f^{-1}}(x,u^{-1})) +
l({f^{-1}}(x,u^{-1}),u') \Big\} ,
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=52 alt="$\displaystyle \operatornamewithlimits{argmin}_{u^{-1}\in {U^{-1}}} \Big\{ C^*({f^{-1}}(x,u^{-1})) + l({f^{-1}}(x,u^{-1}),u') \Big\} ,$" src="http://planning.cs.uiuc.edu/img490.gif" width=385 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>20</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>which is the forward counterpart of (<A href="http://planning.cs.uiuc.edu/node56.html#eqn:ctggen">2.19</A>). The <SPAN class=MATH><IMG height=18 alt="$ u'$" src="http://planning.cs.uiuc.edu/img491.gif" width=20 align=bottom border=0></SPAN> is the action in <!-- MATH
 $U({f^{-1}}(x,u^{-1}))$
 --><SPAN class=MATH><IMG height=38 alt="$ U({f^{-1}}(x,u^{-1}))$" src="http://planning.cs.uiuc.edu/img492.gif" width=126 align=middle border=0></SPAN> that yields <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN> when the state transition function, <SPAN class=MATH><IMG height=34 alt="$ f$" src="http://planning.cs.uiuc.edu/img14.gif" width=16 align=middle border=0></SPAN>, is applied. The iterations proceed backward from <SPAN class=MATH><IMG height=33 alt="$ {x_{G}}$" src="http://planning.cs.uiuc.edu/img215.gif" width=27 align=middle border=0></SPAN> and terminate when <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> is reached. 
<P>
<P>
<DIV><A name=exa:fivestate3><B>Example <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>5</SPAN></B></A> (Value Iteration for Variable-Length Plans) &nbsp; Once again, Example <A href="http://planning.cs.uiuc.edu/node54.html#exa:fivestate">2.3</A> is revisited; however, this time the plan length is not fixed due to the termination action. Its effect is depicted in Figure <A href="http://planning.cs.uiuc.edu/node56.html#fig:fivestate4">2.13</A> by the superposition of new edges that have zero cost. It might appear at first that there is no incentive to choose nontermination actions, but remember that any plan that does not terminate in state <SPAN class=MATH><IMG height=34 alt="$ x_{G} = d$" src="http://planning.cs.uiuc.edu/img493.gif" width=62 align=middle border=0></SPAN> will receive infinite cost. 
<P>
<DIV align=center><A name=fig:fivestate4></A><A name=3352></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.13:</STRONG> Compare this figure to Figure <A href="http://planning.cs.uiuc.edu/node54.html#fig:fivestate3">2.11</A>, for which <SPAN class=MATH><IMG height=17 alt="$ K$" src="http://planning.cs.uiuc.edu/img5.gif" width=22 align=bottom border=0></SPAN> was fixed at <SPAN class=MATH><IMG height=17 alt="$ 4$" src="http://planning.cs.uiuc.edu/img6.gif" width=14 align=bottom border=0></SPAN>. The effect of the termination action is depicted as dashed-line edges that yield <SPAN class=MATH>0</SPAN> cost when traversed. This enables plans of all finite lengths to be considered. Also, the stages extend indefinitely to the left (for the case of backward value iteration). </CAPTION>
<TBODY>
<TR>
<TD><IMG height=459 alt="\begin{figure}\centerline{\psfig{figure=figs/fivestate4.eps,width=5.0in} }\end{figure}" src="http://planning.cs.uiuc.edu/img494.gif" width=575 border=0></TD></TR></TBODY></TABLE></DIV>
<P>
<DIV align=center><A name=fig:vlctg></A><A name=3353></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.14:</STRONG> The optimal cost-to-go functions computed by backward value iteration applied in the case of variable-length plans.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=170 alt="\begin{figure}\begin{center}&#10;\begin{tabular}{\vert c\vert c\vert c\vert c\vert c...&#10;...$ &amp; 4 &amp; 2 &amp; 1 &amp; 0 &amp; $\infty$  \hline&#10;\end{tabular}\end{center}&#10;\end{figure}" src="http://planning.cs.uiuc.edu/img495.gif" width=234 border=0></TD></TR></TBODY></TABLE></DIV>
<P>See Figure <A href="http://planning.cs.uiuc.edu/node56.html#fig:vlctg">2.14</A>. After a few backward value iterations, the cost-to-go values become stationary. After this point, the termination action is being applied from all reachable states and no further cost accumulates. The final cost-to-go function is defined to be <SPAN class=MATH><IMG height=17 alt="$ G^*$" src="http://planning.cs.uiuc.edu/img224.gif" width=27 align=bottom border=0></SPAN>. Since <SPAN class=MATH><IMG height=17 alt="$ d$" src="http://planning.cs.uiuc.edu/img425.gif" width=14 align=bottom border=0></SPAN> is not reachable from <SPAN class=MATH><IMG height=17 alt="$ e$" src="http://planning.cs.uiuc.edu/img307.gif" width=13 align=bottom border=0></SPAN>, <!-- MATH
 $G^*(e) = \infty$
 --><SPAN class=MATH><IMG height=37 alt="$ G^*(e) = \infty$" src="http://planning.cs.uiuc.edu/img496.gif" width=95 align=middle border=0></SPAN>. 
<P>As an example of using (<A href="http://planning.cs.uiuc.edu/node56.html#eqn:ctggen">2.19</A>) to recover optimal actions, consider starting from state <SPAN class=MATH><IMG height=17 alt="$ a$" src="http://planning.cs.uiuc.edu/img458.gif" width=15 align=bottom border=0></SPAN>. The action that leads to <SPAN class=MATH><IMG height=17 alt="$ b$" src="http://planning.cs.uiuc.edu/img424.gif" width=13 align=bottom border=0></SPAN> is chosen next because the total cost <!-- MATH
 $2 + G^*(b) = 4$
 --><SPAN class=MATH><IMG height=37 alt="$ 2 + G^*(b) = 4$" src="http://planning.cs.uiuc.edu/img497.gif" width=116 align=middle border=0></SPAN> is better than <!-- MATH
 $2 + G^*(a) = 6$
 --><SPAN class=MATH><IMG height=37 alt="$ 2 + G^*(a) = 6$" src="http://planning.cs.uiuc.edu/img498.gif" width=118 align=middle border=0></SPAN> (the <SPAN class=MATH><IMG height=17 alt="$ 2$" src="http://planning.cs.uiuc.edu/img44.gif" width=14 align=bottom border=0></SPAN> comes from the action cost). From state <SPAN class=MATH><IMG height=17 alt="$ b$" src="http://planning.cs.uiuc.edu/img424.gif" width=13 align=bottom border=0></SPAN>, the optimal action leads to <SPAN class=MATH><IMG height=17 alt="$ c$" src="http://planning.cs.uiuc.edu/img154.gif" width=13 align=bottom border=0></SPAN>, which produces total cost <!-- MATH
 $1 +
G^*(c) = 1$
 --><SPAN class=MATH><IMG height=37 alt="$ 1 +&#10;G^*(c) = 1$" src="http://planning.cs.uiuc.edu/img499.gif" width=117 align=middle border=0></SPAN>. Similarly, the next action leads to <!-- MATH
 $d \in {X_{G}}$
 --><SPAN class=MATH><IMG height=34 alt="$ d \in {X_{G}}$" src="http://planning.cs.uiuc.edu/img500.gif" width=65 align=middle border=0></SPAN>, which terminates the plan. 
<P>
<DIV align=center><A name=fig:vlctc></A><A name=3354></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.15:</STRONG> The optimal cost-to-come functions computed by forward value iteration applied in the case of variable-length plans.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=146 alt="\begin{figure}\begin{center}&#10;\begin{tabular}{\vert c\vert c\vert c\vert c\vert c...&#10;...ine $C^*$ &amp; 2 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\&#10;\hline&#10;\end{tabular}\end{center}&#10;\end{figure}" src="http://planning.cs.uiuc.edu/img501.gif" width=224 border=0></TD></TR></TBODY></TABLE></DIV>
<P>Using forward value iteration, suppose that <!-- MATH
 ${x_{I}}= b$
 --><SPAN class=MATH><IMG height=34 alt="$ {x_{I}}= b$" src="http://planning.cs.uiuc.edu/img502.gif" width=56 align=middle border=0></SPAN>. The following cost-to-come functions shown in Figure <A href="http://planning.cs.uiuc.edu/node56.html#fig:vlctc">2.15</A> are obtained. For any finite value that remains constant from one iteration to the next, the termination action was applied. Note that the last value iteration is useless in this example. Once <SPAN class=MATH><IMG height=34 alt="$ C^*_3$" src="http://planning.cs.uiuc.edu/img503.gif" width=27 align=middle border=0></SPAN> is computed, the optimal cost-to-come to every possible state from <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> is determined, and future cost-to-come functions are identical. Therefore, the final cost-to-come is renamed <SPAN class=MATH><IMG height=17 alt="$ C^*$" src="http://planning.cs.uiuc.edu/img310.gif" width=27 align=bottom border=0></SPAN>. <!-- MATH
 $\blacksquare$
 --><SPAN class=MATH><IMG height=16 alt="$ \blacksquare$" src="http://planning.cs.uiuc.edu/img282.gif" width=20 align=bottom border=0></SPAN> <BR></P></DIV>