<H2><A name=SECTION02251000000000000000><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>5</SPAN>.<SPAN class=arabic>1</SPAN> Searching in a Space of Partial Plans</A> </H2>
<P><A name=3086></A>
<P>One alternative to searching directly in <SPAN class=MATH><IMG height=17 alt="$ X$" src="http://planning.cs.uiuc.edu/img8.gif" width=22 align=bottom border=0></SPAN> is to construct partial plans without reference to particular states. By using the operator representation, partial plans can be incrementally constructed. The idea is to iteratively achieve required subgoals in a partial plan while ensuring that no conflicts arise that could destroy the solution developed so far. 
<P>A <EM>partial plan</EM><A name=4117></A> <SPAN class=MATH><IMG height=17 alt="$ \sigma $" src="http://planning.cs.uiuc.edu/img540.gif" width=16 align=bottom border=0></SPAN> is defined as 
<OL>
<LI>A set <SPAN class=MATH><IMG height=34 alt="$ O_\sigma $" src="http://planning.cs.uiuc.edu/img541.gif" width=28 align=middle border=0></SPAN> of operators that need to be applied. If the operators contain variables, these may be filled in by specific values or left as variables. The same operator may appear multiple times in <SPAN class=MATH><IMG height=34 alt="$ O_\sigma $" src="http://planning.cs.uiuc.edu/img541.gif" width=28 align=middle border=0></SPAN>, possibly with different values for the variables. 
<LI>A partial ordering relation <!-- MATH
 $\prec_\sigma$
 --><SPAN class=MATH><IMG height=33 alt="$ \prec_\sigma $" src="http://planning.cs.uiuc.edu/img542.gif" width=29 align=middle border=0></SPAN> on <SPAN class=MATH><IMG height=34 alt="$ O_\sigma $" src="http://planning.cs.uiuc.edu/img541.gif" width=28 align=middle border=0></SPAN>, which indicates for some pairs <!-- MATH
 $o_1,o_2 \in O_\sigma$
 --><SPAN class=MATH><IMG height=34 alt="$ o_1,o_2 \in O_\sigma $" src="http://planning.cs.uiuc.edu/img543.gif" width=93 align=middle border=0></SPAN> that one must appear before other: <!-- MATH
 $o_1 \prec_\sigma o_2$
 --><SPAN class=MATH><IMG height=33 alt="$ o_1 \prec_\sigma o_2$" src="http://planning.cs.uiuc.edu/img544.gif" width=72 align=middle border=0></SPAN>. 
<LI>A set <SPAN class=MATH><IMG height=34 alt="$ B_\sigma $" src="http://planning.cs.uiuc.edu/img545.gif" width=28 align=middle border=0></SPAN> of <EM>binding constraints</EM><A name=4119></A>, in which each indicates that some variables across operators must take on the same value. 
<LI>A set <SPAN class=MATH><IMG height=34 alt="$ C_\sigma $" src="http://planning.cs.uiuc.edu/img546.gif" width=27 align=middle border=0></SPAN> of <EM>causal links</EM><A name=4121></A>, in which each is of the form <!-- MATH
 $(o_1,l,o_2)$
 --><SPAN class=MATH><IMG height=37 alt="$ (o_1,l,o_2)$" src="http://planning.cs.uiuc.edu/img547.gif" width=75 align=middle border=0></SPAN> and indicates that <SPAN class=MATH><IMG height=33 alt="$ o_1$" src="http://planning.cs.uiuc.edu/img548.gif" width=21 align=middle border=0></SPAN> achieves the literal <SPAN class=MATH><IMG height=17 alt="$ l$" src="http://planning.cs.uiuc.edu/img549.gif" width=11 align=bottom border=0></SPAN> for the purpose of satisfying a precondition of <SPAN class=MATH><IMG height=33 alt="$ o_2$" src="http://planning.cs.uiuc.edu/img550.gif" width=21 align=middle border=0></SPAN>. </LI></OL>
<P>
<P>
<DIV><A name=exa:pplan><B>Example <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>7</SPAN></B></A> (A Partial Plan) &nbsp; Each partial plan encodes a <EM>set</EM> of possible plans. Recall the model from Example <A href="http://planning.cs.uiuc.edu/node59.html#exa:flashlight">2.6</A>. Suppose 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
O_\sigma = \{ RemoveCap, Insert(Battery1)\} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle O_\sigma = \{ RemoveCap, Insert(Battery1)\} .$" src="http://planning.cs.uiuc.edu/img551.gif" width=330 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>27</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>A sensible ordering constraint is that 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
RemoveCap \prec_\sigma Insert(Battery1) .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle RemoveCap \prec_\sigma Insert(Battery1) .$" src="http://planning.cs.uiuc.edu/img552.gif" width=289 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>28</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>A causal link, 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
(RemoveCap,\neg On(Cap,Flashlight),Insert(Battery1)),
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle (RemoveCap,\neg On(Cap,Flashlight),Insert(Battery1)),$" src="http://planning.cs.uiuc.edu/img553.gif" width=471 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>29</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>indicates that the <SPAN class=MATH><IMG height=34 alt="$ RemoveCap$" src="http://planning.cs.uiuc.edu/img554.gif" width=105 align=middle border=0></SPAN> operator achieves the literal <!-- MATH
 $\neg
On(Cap,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ \neg&#10;On(Cap,Flashlight)$" src="http://planning.cs.uiuc.edu/img555.gif" width=190 align=middle border=0></SPAN>, which is a precondition of <!-- MATH
 $Insert(Battery1)$
 --><SPAN class=MATH><IMG height=37 alt="$ Insert(Battery1)$" src="http://planning.cs.uiuc.edu/img556.gif" width=149 align=middle border=0></SPAN>. There are no binding constraints for this example. The partial plan implicitly represents the set of all plans for which <SPAN class=MATH><IMG height=34 alt="$ RemoveCap$" src="http://planning.cs.uiuc.edu/img554.gif" width=105 align=middle border=0></SPAN> appears before <!-- MATH
 $Insert(Battery1)$
 --><SPAN class=MATH><IMG height=37 alt="$ Insert(Battery1)$" src="http://planning.cs.uiuc.edu/img556.gif" width=149 align=middle border=0></SPAN>, under the constraint that the causal link is not violated. <!-- MATH
 $\blacksquare$
 --><SPAN class=MATH><IMG height=16 alt="$ \blacksquare$" src="http://planning.cs.uiuc.edu/img282.gif" width=20 align=bottom border=0></SPAN> <BR></DIV>
<P></P>
<P>Several algorithms have been developed to search in the space of partial plans. To obtain some intuition about the partial-plan approach, a planning algorithm is described in Figure <A href="http://planning.cs.uiuc.edu/node62.html#fig:psp">2.19</A>. A vertex in the partial-plan search graph is a partial plan, and an edge is constructed by extending one partial plan to obtain another partial plan that is closer to completion. Although the general template is simple, the algorithm performance depends critically on the choice of initial plan and the particular flaw that is resolved in each iteration. One straightforward generalization is to develop multiple partial plans and decide which one to refine in each iteration. 
<P>
<DIV align=center><A name=fig:psp></A><A name=3361></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.19:</STRONG> <A name=3108></A>Planning in the plan space is achieved by iteratively finding a flaw in the plan and fixing it.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=437 alt="\begin{figure}PLAN-SPACE PLANNING&#10;\begin{enumerate}&#10;\item Start with any initial...&#10;...y&#10;that resolves the threat.&#10;\item Return to Step 2.&#10;\end{enumerate}&#10;\end{figure}" src="http://planning.cs.uiuc.edu/img557.gif" width=554 border=0></TD></TR></TBODY></TABLE></DIV>
<P>In early works, methods based on partial plans seemed to offer substantial benefits; however, they are currently considered to be not ``competitive enough'' in comparison to methods that search the state space [<A href="http://planning.cs.uiuc.edu/node858.html#GhaNauTra04">382</A>]. One problem is that it becomes more difficult to develop application-specific heuristics without explicit references to states. Also, the vertices in the partial-plan search graph are costly to maintain and manipulate in comparison to ordinary states.