<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN>.<SPAN class=arabic>1</SPAN> A STRIPS-Like Representation 
<P><A name=2982></A>
<P>STRIPS-like representations have been the most common logic-based representations for discrete planning problems. This refers to the STRIPS<A name=4087></A> system, which is considered one of the first planning algorithms and representations [<A href="http://planning.cs.uiuc.edu/node858.html#FikNil71">337</A>]; its name is derived from the STanford Research Institute Problem Solver. The original representation used first-order logic, which had great expressive power but many technical difficulties. Therefore, the representation was later restricted to only propositional logic [<A href="http://planning.cs.uiuc.edu/node858.html#Nil80">743</A>], which is similar to the form introduced in this section. There are many variations of STRIPS-like representations. Here is one formulation: 
<P>
<P>
<DIV><B>Formulation <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>4</SPAN></B> (STRIPS-Like Planning) &nbsp; <A name=for:strips></A>
<OL>
<LI>A finite, nonempty set <SPAN class=MATH><IMG height=17 alt="$ I$" src="http://planning.cs.uiuc.edu/img507.gif" width=14 align=bottom border=0></SPAN> of <EM>instances</EM>. 
<LI>A finite, nonempty set <SPAN class=MATH><IMG height=17 alt="$ P$" src="http://planning.cs.uiuc.edu/img508.gif" width=19 align=bottom border=0></SPAN> of <EM>predicates</EM><A name=2991></A>, which are binary-valued (partial) functions of one of more instances. Each application of a predicate to a specific set of instances is called a <EM>positive literal</EM><A name=4089></A>. A logically negated positive literal is called a <EM>negative literal</EM><A name=4091></A>. 
<LI>A finite, nonempty set <SPAN class=MATH><IMG height=17 alt="$ O$" src="http://planning.cs.uiuc.edu/img130.gif" width=20 align=bottom border=0></SPAN> of <EM>operators</EM><A name=2995></A><A name=2996></A>, each of which has: 1) <EM>preconditions</EM>, which are positive or negative literals that must hold for the operator to apply, and 2) <EM>effects</EM>, which are positive or negative literals that are the result of applying the operator. 
<LI>An <EM>initial set</EM> <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN> which is expressed as a set of <EM>positive literals</EM>. Negative literals are implied. For any positive literal that does not appear in <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN>, its corresponding negative literal is assumed to hold initially. 
<LI>A <EM>goal set</EM> <SPAN class=MATH><IMG height=17 alt="$ G$" src="http://planning.cs.uiuc.edu/img509.gif" width=20 align=bottom border=0></SPAN> which is expressed as a set of both <EM>positive</EM> and <EM>negative literals</EM>. </LI></OL></DIV>
<P></P>
<P>Formulation <A href="http://planning.cs.uiuc.edu/node59.html#sec:strips">2.4.1</A> provides a definition of discrete feasible planning expressed in a STRIPS-like<A name=3007></A> representation. The three most important components are the sets of <EM>instances</EM> <SPAN class=MATH><IMG height=17 alt="$ I$" src="http://planning.cs.uiuc.edu/img507.gif" width=14 align=bottom border=0></SPAN>, <EM>predicates</EM> <SPAN class=MATH><IMG height=17 alt="$ P$" src="http://planning.cs.uiuc.edu/img508.gif" width=19 align=bottom border=0></SPAN>, and <EM>operators</EM> <SPAN class=MATH><IMG height=17 alt="$ O$" src="http://planning.cs.uiuc.edu/img130.gif" width=20 align=bottom border=0></SPAN>. Informally, the instances characterize the complete set of distinct things that exist in the world. They could, for example, be books, cars, trees, and so on. The predicates correspond to basic properties or statements that can be formed regarding the instances. For example, a predicate called <SPAN class=MATH><IMG height=17 alt="$ Under$" src="http://planning.cs.uiuc.edu/img510.gif" width=58 align=bottom border=0></SPAN> might be used to indicate things like <!-- MATH
 $Under(Book,Table)$
 --><SPAN class=MATH><IMG height=37 alt="$ Under(Book,Table)$" src="http://planning.cs.uiuc.edu/img511.gif" width=170 align=middle border=0></SPAN> (the book is under the table) or <!-- MATH
 $Under(Dirt,Rug)$
 --><SPAN class=MATH><IMG height=37 alt="$ Under(Dirt,Rug)$" src="http://planning.cs.uiuc.edu/img512.gif" width=154 align=middle border=0></SPAN>. A predicate can be interpreted as a kind of function that yields <SMALL><FONT size=2>TRUE </FONT></SMALL>or <SMALL><FONT size=2>FALSE </FONT></SMALL>values; however, it is important to note that it is only a partial function because it might not be desirable to allow any instance to be inserted as an argument to the predicate. 
<P>If a predicate is evaluated on an instance, for example, <!-- MATH
 $Under(Dirt,Rug)$
 --><SPAN class=MATH><IMG height=37 alt="$ Under(Dirt,Rug)$" src="http://planning.cs.uiuc.edu/img512.gif" width=154 align=middle border=0></SPAN>, the expression is called a <EM>positive literal</EM><A name=4097></A>. The set of all possible positive literals can be formed by applying all possible instances to the domains over which the predicates are defined. Every positive literal has a corresponding <EM>negative literal</EM><A name=4099></A>, which is formed by negating the positive literal. For example, <!-- MATH
 $\neg Under(Dirt,Rug)$
 --><SPAN class=MATH><IMG height=37 alt="$ \neg Under(Dirt,Rug)$" src="http://planning.cs.uiuc.edu/img513.gif" width=166 align=middle border=0></SPAN> is the negative literal that corresponds to the positive literal <!-- MATH
 $Under(Dirt,Rug)$
 --><SPAN class=MATH><IMG height=37 alt="$ Under(Dirt,Rug)$" src="http://planning.cs.uiuc.edu/img512.gif" width=154 align=middle border=0></SPAN>, and <SPAN class=MATH><IMG height=15 alt="$ \neg$" src="http://planning.cs.uiuc.edu/img514.gif" width=18 align=bottom border=0></SPAN> denotes negation. Let a <EM>complementary pair</EM><A name=4101></A> refer to a positive literal together with its counterpart negative literal. The various components of the planning problem are expressed in terms of positive and negative literals. 
<P>The role of an operator is to change the world. To be applicable, a set of <I>preconditions</I> must all be satisfied. Each element of this set is a positive or negative literal that must hold <SMALL><FONT size=2>TRUE </FONT></SMALL>for the operator to be applicable. Any complementary pairs that can be formed from the predicates, but are not mentioned in the preconditions, may assume any value without affecting the applicability of the operator. If the operator is applied, then the world is updated in a manner precisely specified by the set of <EM>effects</EM>, which indicates positive and negative literals that result from the application of the operator. It is assumed that the truth values of all unmentioned complementary pairs are not affected. 
<P>Multiple operators are often defined in a single statement by using variables. For example, <SPAN class=MATH><IMG height=37 alt="$ Insert(i)$" src="http://planning.cs.uiuc.edu/img515.gif" width=80 align=middle border=0></SPAN> may allow any instance <SPAN class=MATH><IMG height=34 alt="$ i \in I$" src="http://planning.cs.uiuc.edu/img516.gif" width=44 align=middle border=0></SPAN> to be inserted. In some cases, this dramatically reduces the space required to express the problem. 
<P>The planning problem is expressed in terms of an initial set <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN> of positive literals and a goal set <SPAN class=MATH><IMG height=17 alt="$ G$" src="http://planning.cs.uiuc.edu/img509.gif" width=20 align=bottom border=0></SPAN> of positive and negative literals. A state can be defined by selecting either the positive or negative literal for every possible complementary pair. The initial set <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN> specifies such a state by giving the positive literals only. For all possible positive literals that do not appear in <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN>, it is assumed that their negative counterparts hold in the initial state. The goal set <SPAN class=MATH><IMG height=17 alt="$ G$" src="http://planning.cs.uiuc.edu/img509.gif" width=20 align=bottom border=0></SPAN> actually refers to a set of states because, for any unmentioned complementary pair, the positive or negative literal may be chosen, and the goal is still achieved. The task is to find a sequence of operators that when applied in succession will transform the world from the initial state into one in which all literals of <SPAN class=MATH><IMG height=17 alt="$ G$" src="http://planning.cs.uiuc.edu/img509.gif" width=20 align=bottom border=0></SPAN> are <SMALL><FONT size=2>TRUE</FONT></SMALL>. For each operator, the preconditions must also be satisfied before it can be applied. The following example illustrates Formulation <A href="http://planning.cs.uiuc.edu/node59.html#for:strips">2.4</A>. 
<P>
<P>
<DIV><A name=exa:flashlight><B>Example <SPAN class=arabic>2</SPAN>..<SPAN class=arabic>6</SPAN></B></A> (Putting Batteries into a Flashlight) &nbsp; <A name=3019></A>
<DIV align=center><A name=fig:flashlight></A><A name=3358></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.17:</STRONG> An example that involves putting batteries into a flashlight. </CAPTION>
<TBODY>
<TR>
<TD><IMG height=271 alt="\begin{figure}\centerline{\psfig{figure=figs/flashlight1.idr,width=5.0in} }  \\&#10;\centerline{\psfig{figure=figs/flashlight2.idr,width=3.0in} }\end{figure}" src="http://planning.cs.uiuc.edu/img517.gif" width=571 border=0></TD></TR></TBODY></TABLE></DIV>Imagine a planning problem that involves putting two batteries into a flashlight, as shown in Figure <A href="http://planning.cs.uiuc.edu/node59.html#fig:flashlight">2.17</A>. The set of instances are 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
I = \{ Battery1, Battery2, Cap, Flashlight\} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle I = \{ Battery1, Battery2, Cap, Flashlight\} .$" src="http://planning.cs.uiuc.edu/img518.gif" width=363 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>21</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>Two different predicates will be defined, <SPAN class=MATH><IMG height=17 alt="$ On$" src="http://planning.cs.uiuc.edu/img519.gif" width=31 align=bottom border=0></SPAN> and <SPAN class=MATH><IMG height=17 alt="$ In$" src="http://planning.cs.uiuc.edu/img520.gif" width=26 align=bottom border=0></SPAN>, each of which is a partial function on <SPAN class=MATH><IMG height=17 alt="$ I$" src="http://planning.cs.uiuc.edu/img507.gif" width=14 align=bottom border=0></SPAN>. The predicate <SPAN class=MATH><IMG height=17 alt="$ On$" src="http://planning.cs.uiuc.edu/img519.gif" width=31 align=bottom border=0></SPAN> may only be applied to evaluate whether the <SPAN class=MATH><IMG height=34 alt="$ Cap$" src="http://planning.cs.uiuc.edu/img521.gif" width=39 align=middle border=0></SPAN> is <SPAN class=MATH><IMG height=17 alt="$ On$" src="http://planning.cs.uiuc.edu/img519.gif" width=31 align=bottom border=0></SPAN> the <!-- MATH
 $Flashlight$
 --><SPAN class=MATH><IMG height=34 alt="$ Flashlight$" src="http://planning.cs.uiuc.edu/img522.gif" width=94 align=middle border=0></SPAN> and is written as <!-- MATH
 $On(Cap,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ On(Cap,Flashlight)$" src="http://planning.cs.uiuc.edu/img523.gif" width=177 align=middle border=0></SPAN>. The predicate <SPAN class=MATH><IMG height=17 alt="$ In$" src="http://planning.cs.uiuc.edu/img520.gif" width=26 align=bottom border=0></SPAN> may be applied in the following two ways: <!-- MATH
 $In(Battery1,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ In(Battery1,Flashlight)$" src="http://planning.cs.uiuc.edu/img524.gif" width=213 align=middle border=0></SPAN>, <!-- MATH
 $In(Battery2,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ In(Battery2,Flashlight)$" src="http://planning.cs.uiuc.edu/img525.gif" width=213 align=middle border=0></SPAN>, to indicate whether either battery is in the flashlight. Recall that predicates are only partial functions in general. For the predicate <SPAN class=MATH><IMG height=17 alt="$ In$" src="http://planning.cs.uiuc.edu/img520.gif" width=26 align=bottom border=0></SPAN>, it is not desirable to apply any instance to any argument. For example, it is meaningless to define <!-- MATH
 $In(Battery1,Battery1)$
 --><SPAN class=MATH><IMG height=37 alt="$ In(Battery1,Battery1)$" src="http://planning.cs.uiuc.edu/img526.gif" width=199 align=middle border=0></SPAN> and <!-- MATH
 $In(Flashlight,Battery2)$
 --><SPAN class=MATH><IMG height=37 alt="$ In(Flashlight,Battery2)$" src="http://planning.cs.uiuc.edu/img527.gif" width=213 align=middle border=0></SPAN> (they could be included in the model, always retaining a negative value, but it is inefficient). 
<P>The initial set is 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
\begin{split}
S = \{ & On(Cap,Flashlight)\}.
\end{split}
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=38 alt="\begin{displaymath}\begin{split}S = \{ &amp; On(Cap,Flashlight)\}. \end{split}\end{displaymath}" src="http://planning.cs.uiuc.edu/img528.gif" width=232 border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>22</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>Based on <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN>, both <!-- MATH
 $\neg In(Battery1,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ \neg In(Battery1,Flashlight)$" src="http://planning.cs.uiuc.edu/img529.gif" width=226 align=middle border=0></SPAN> and <!-- MATH
 $\neg
In(Battery2,Flashlight)$
 --><SPAN class=MATH><IMG height=37 alt="$ \neg&#10;In(Battery2,Flashlight)$" src="http://planning.cs.uiuc.edu/img530.gif" width=226 align=middle border=0></SPAN> are assumed to hold. Thus, <SPAN class=MATH><IMG height=17 alt="$ S$" src="http://planning.cs.uiuc.edu/img78.gif" width=17 align=bottom border=0></SPAN> indicates that the cap is on the flashlight, but the batteries are outside. 
<P>The goal state is 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
\begin{split}
G = \{ & On(Cap,Flashlight), In(Battery1,Flashlight), \\
       & In(Battery2,Flashlight)\} ,
\end{split}
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=58 alt="\begin{displaymath}\begin{split}G = \{ &amp; On(Cap,Flashlight), In(Battery1,Flashlight),  &amp; In(Battery2,Flashlight)\} , \end{split}\end{displaymath}" src="http://planning.cs.uiuc.edu/img531.gif" width=442 border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>23</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>which means that both batteries must be in the flashlight, and the cap must be on. 
<P>
<DIV align=center><A name=fig:threeops></A><A name=3360></A>
<TABLE>
<CAPTION align=bottom><STRONG>Figure 2.18:</STRONG> Three operators for the flashlight problem. Note that an operator can be expressed with variable argument(s) for which different instances could be substituted.</CAPTION>
<TBODY>
<TR>
<TD><IMG height=83 alt="\begin{figure}\noindent {\small&#10;\begin{tabular}{lll}\&#10;Name &amp; Preconditions &amp; Eff...&#10;...n(i,Flashlight) \}$ &amp;&#10;$\{In(i,Flashlight)\}$ \\&#10;\end{tabular} }\end{figure}" src="http://planning.cs.uiuc.edu/img532.gif" width=681 border=0></TD></TR></TBODY></TABLE></DIV>
<P>The set <SPAN class=MATH><IMG height=17 alt="$ O$" src="http://planning.cs.uiuc.edu/img130.gif" width=20 align=bottom border=0></SPAN> consists of the four operators, which are shown in Figure <A href="http://planning.cs.uiuc.edu/node59.html#fig:threeops">2.18</A>. Here is a plan that reaches the goal state in the smallest number of steps: 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:flashplan></A><!-- MATH
 \begin{equation}
(RemoveCap,Insert(Battery1),Insert(Battery2),PlaceCap) .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle (RemoveCap,Insert(Battery1),Insert(Battery2),PlaceCap) .$" src="http://planning.cs.uiuc.edu/img533.gif" width=519 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>24</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>In words, the plan simply says to take the cap off, put the batteries in, and place the cap back on. 
<P>This example appears quite simple, and one would expect a planning algorithm to easily find such a solution. It can be made more challenging by adding many more instances to <SPAN class=MATH><IMG height=17 alt="$ I$" src="http://planning.cs.uiuc.edu/img507.gif" width=14 align=bottom border=0></SPAN>, such as more batteries, more flashlights, and a bunch of objects that are irrelevant to achieving the goal. Also, many other predicates and operators can be added so that the different combinations of operators become overwhelming. <!-- MATH
 $\blacksquare$
 --><SPAN class=MATH><IMG height=16 alt="$ \blacksquare$" src="http://planning.cs.uiuc.edu/img282.gif" width=20 align=bottom border=0></SPAN> <BR><A name=3046></A></P></DIV>
<P></P>
<P>A large number of complexity results exist for planning expressed using logic. The graph search problem is solved efficiently in polynomial time; however, a state transition graph is not given as the input. An input that is expressed using Formulation <A href="http://planning.cs.uiuc.edu/node59.html#for:strips">2.4</A> may describe an enormous state transition graph using very few instances, predicates, and operators. In a sense, the model is highly compressed when using some logic-based formulations. This brings it closer to the <EM>Kolmogorov complexity</EM><A name=4107></A> [<A href="http://planning.cs.uiuc.edu/node858.html#CovTho91">248</A>,<A href="http://planning.cs.uiuc.edu/node858.html#LiVit97">630</A>] of the state transition graph, which is the shortest bit size to which it can possibly be compressed and then fully recovered by a Turing machine. This has the effect of making the planning problem appear more difficult. Concise inputs may encode very challenging planning problems. Most of the known hardness results are surveyed in Chapter 3 of [<A href="http://planning.cs.uiuc.edu/node858.html#GhaNauTra04">382</A>]. Under most formulations, logic-based planning is NP-hard. The particular level of hardness (NP, PSPACE, EXPTIME, etc.) depends on the precise problem conditions. For example, the complexity depends on whether the operators are fixed in advance or included in the input. The latter case is much harder. Separate complexities are also obtained based on whether negative literals are allowed in the operator effects and also whether they are allowed in preconditions. The problem is generally harder if both positive and negative literals are allowed in these cases.<A name=3052></A>