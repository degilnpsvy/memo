<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN> Using Logic to Formulate Discrete Planning 
<P>For many discrete planning problems that we would like a computer to solve, the state space is enormous (e.g., <SPAN class=MATH><IMG height=19 alt="$ 10^{100}$" src="http://planning.cs.uiuc.edu/img506.gif" width=45 align=bottom border=0></SPAN> states). Therefore, substantial effort has been invested in constructing <EM>implicit</EM> encodings of problems in hopes that the entire state space does not have to be explored by the algorithm to solve the problem. This will be a recurring theme throughout this book; therefore, it is important to pay close attention to representations. Many planning problems can appear trivial once everything has been explicitly given. 
<P>Logic-based representations have been popular for constructing such implicit representations of discrete planning. One historical reason is that such representations were the basis of the majority of artificial intelligence research during the 1950s-1980s. Another reason is that they have been useful for representing certain kinds of planning problems very compactly. It may be helpful to think of these representations as compression schemes. A string such as 010101010101... may compress very nicely, but it is impossible to substantially compress a random string of bits. Similar principles are true for discrete planning. Some problems contain a kind of regularity that enables them to be expressed compactly, whereas for others it may be impossible to find such representations. This is why there has been a variety of representation logics proposed through decades of planning research. 
<P>Another reason for using logic-based representations is that many discrete planning algorithms are implemented in large software systems. At some point, when these systems solve a problem, they must provide the complete plan to a user, who may not care about the internals of planning. Logic-based representations have seemed convenient for producing output that logically explains the steps involved to arrive at some goal. Other possibilities may exist, but logic has been a first choice due to its historical popularity. 
<P>In spite of these advantages, one shortcoming with logic-based representations is that they are difficult to generalize. It is important in many applications to enable concepts such as continuous spaces, unpredictability, sensing uncertainty, and multiple decision makers to be incorporated into planning. This is the main reason why the state-space representation has been used so far: It will be easy to extend and adapt to the problems covered throughout this book. Nevertheless, it is important to study logic-based representations to understand the relationship between the vast majority of discrete planning research and other problems considered in this book, such as motion planning and planning under differential constraints. There are many recurring themes throughout these different kinds of problems, even though historically they have been investigated by separate research communities. Understanding these connections well provides powerful insights into planning issues across all of these areas. 
<P><BR>
<HR>
<!--Table of Child-Links--><A name=CHILD_LINKS><STRONG>Subsections</STRONG></A> 
<UL class=ChildLinks>
<LI><A href="http://planning.cs.uiuc.edu/node59.html" name=tex2html2159><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN>.<SPAN class=arabic>1</SPAN> A STRIPS-Like Representation</A> 
<LI><A href="http://planning.cs.uiuc.edu/node60.html" name=tex2html2160><SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN>.<SPAN class=arabic>2</SPAN> Converting to the State-Space Representation</A> </LI></UL><!--End of Table of Child-Links-->