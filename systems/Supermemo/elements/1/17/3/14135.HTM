<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>4</SPAN>.<SPAN class=arabic>2</SPAN> Converting to the State-Space Representation 
<P><A name=3055></A>It is useful to characterize the relationship between Formulation <A href="http://planning.cs.uiuc.edu/node59.html#for:strips">2.4</A> and the original formulation of discrete feasible planning, Formulation <A href="http://planning.cs.uiuc.edu/node37.html#for:dfp">2.1</A>. One benefit is that it immediately shows how to adapt the search methods of Section <A href="http://planning.cs.uiuc.edu/node39.html#sec:search">2.2</A> to work for logic-based representations. It is also helpful to understand the relationships between the algorithmic complexities of the two representations. 
<P>Up to now, the notion of ``state'' has been only vaguely mentioned in the context of the STRIPS-like<A name=3059></A> representation. Now consider making this more concrete. Suppose that every predicate has <SPAN class=MATH><IMG height=17 alt="$ k$" src="http://planning.cs.uiuc.edu/img91.gif" width=15 align=bottom border=0></SPAN> arguments, and any instance could appear in each argument. This means that there are <!-- MATH
 $|P|\,|I|^k$
 --><SPAN class=MATH><IMG height=39 alt="$ \vert P\vert \vert I\vert^k$" src="http://planning.cs.uiuc.edu/img534.gif" width=62 align=middle border=0></SPAN> complementary pairs, which corresponds to all of the ways to substitute instances into all arguments of all predicates. To express the state, a positive or negative literal must be selected from every complementary pair. For convenience, this selection can be encoded as a binary string by imposing a linear ordering on the instances and predicates. Using Example <A href="http://planning.cs.uiuc.edu/node59.html#exa:flashlight">2.6</A>, the state might be specified in order as 
<P></P>
<DIV class=mathdisplay align=center><A name=eqn:flstring></A><!-- MATH
 \begin{equation}
(On(Cap,Flashlight), \neg In(Battery1,Flashlight1), 
In(Battery2,Flashlight)).
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=37 alt="$\displaystyle (On(Cap,Flashlight), \neg In(Battery1,Flashlight1), In(Battery2,Flashlight)).$" src="http://planning.cs.uiuc.edu/img535.gif" width=650 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>25</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>Using a binary string, each element can be ``0'' to denote a negative literal or ``1'' to denote positive literal. The encoded state is <SPAN class=MATH><IMG height=17 alt="$ x&#10;= 101$" src="http://planning.cs.uiuc.edu/img536.gif" width=69 align=bottom border=0></SPAN> for (<A href="http://planning.cs.uiuc.edu/node60.html#eqn:flstring">2.25</A>). If any instance can appear in the argument of any predicate, then the length of the string is <!-- MATH
 $|P|\,|I|^k$
 --><SPAN class=MATH><IMG height=39 alt="$ \vert P\vert \vert I\vert^k$" src="http://planning.cs.uiuc.edu/img534.gif" width=62 align=middle border=0></SPAN>. The total number of possible states of the world that could possibly be distinguished corresponds to the set of all possible bit strings. This set has size 
<P></P>
<DIV class=mathdisplay align=center><!-- MATH
 \begin{equation}
2^{|P|\,|I|^k} .
\end{equation}
 -->
<TABLE class=equation cellPadding=0 width="100%" align=center>
<TBODY>
<TR vAlign=center>
<TD noWrap align=middle><SPAN class=MATH><IMG height=46 alt="$\displaystyle 2^{\vert P\vert \vert I\vert^k} .$" src="http://planning.cs.uiuc.edu/img537.gif" width=62 align=middle border=0></SPAN></TD>
<TD class=eqno noWrap align=right width=10>(<SPAN class=arabic>2</SPAN>.<SPAN class=arabic>26</SPAN>)</TD></TR></TBODY></TABLE></DIV><BR clear=all>
<P></P>The implication is that with a very small number of instances and predicates, an enormous state space can be generated. Even though the search algorithms of Section <A href="http://planning.cs.uiuc.edu/node39.html#sec:search">2.2</A> may appear efficient with respect to the size of the search graph (or the number of states), the algorithms appear horribly inefficient with respect to the sizes of <SPAN class=MATH><IMG height=17 alt="$ P$" src="http://planning.cs.uiuc.edu/img508.gif" width=19 align=bottom border=0></SPAN> and <SPAN class=MATH><IMG height=17 alt="$ I$" src="http://planning.cs.uiuc.edu/img507.gif" width=14 align=bottom border=0></SPAN>. This has motivated substantial efforts on the development of techniques to help guide the search by exploiting the structure of specific representations. This is the subject of Section <A href="http://planning.cs.uiuc.edu/node61.html#sec:logplan">2.5</A>. 
<P>The next step in converting to a state-space representation is to encode the initial state <SPAN class=MATH><IMG height=33 alt="$ {x_{I}}$" src="http://planning.cs.uiuc.edu/img261.gif" width=23 align=middle border=0></SPAN> as a string. The goal set, <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN>, is the set of all strings that are consistent with the positive and negative goal literals. This can be compressed by extending the string alphabet to include a ``don't care'' symbol, <SPAN class=MATH><IMG height=17 alt="$ \delta$" src="http://planning.cs.uiuc.edu/img538.gif" width=14 align=bottom border=0></SPAN>. A single string that has a ``0'' for each negative literal, a ``1'' for each positive literal, and a ``<SPAN class=MATH><IMG height=17 alt="$ \delta$" src="http://planning.cs.uiuc.edu/img538.gif" width=14 align=bottom border=0></SPAN>'' for all others would suffice in representing any <SPAN class=MATH><IMG height=34 alt="$ {X_{G}}$" src="http://planning.cs.uiuc.edu/img140.gif" width=32 align=middle border=0></SPAN> that is expressed with positive and negative literals. 
<P>Now convert the operators. For each state, <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>, the set <SPAN class=MATH><IMG height=37 alt="$ U(x)$" src="http://planning.cs.uiuc.edu/img256.gif" width=45 align=middle border=0></SPAN> represents the set of operators with preconditions that are satisfied by <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN>. To apply the search techniques of Section <A href="http://planning.cs.uiuc.edu/node39.html#sec:search">2.2</A>, note that it is not necessary to determine <SPAN class=MATH><IMG height=37 alt="$ U(x)$" src="http://planning.cs.uiuc.edu/img256.gif" width=45 align=middle border=0></SPAN> explicitly in advance for all <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>. Instead, <SPAN class=MATH><IMG height=37 alt="$ U(x)$" src="http://planning.cs.uiuc.edu/img256.gif" width=45 align=middle border=0></SPAN> can be computed whenever each <SPAN class=MATH><IMG height=17 alt="$ x$" src="http://planning.cs.uiuc.edu/img86.gif" width=15 align=bottom border=0></SPAN> is encountered for the first time in the search. The effects of the operator are encoded by the state transition equation. From a given <SPAN class=MATH><IMG height=34 alt="$ x \in X$" src="http://planning.cs.uiuc.edu/img228.gif" width=56 align=middle border=0></SPAN>, the next state, <SPAN class=MATH><IMG height=37 alt="$ f(x,u)$" src="http://planning.cs.uiuc.edu/img539.gif" width=60 align=middle border=0></SPAN>, is obtained by flipping the bits as prescribed by the effects part of the operator. 
<P>All of the components of Formulation <A href="http://planning.cs.uiuc.edu/node37.html#for:dfp">2.1</A> have been derived from the components of Formulation <A href="http://planning.cs.uiuc.edu/node59.html#for:strips">2.4</A>. Adapting the search techniques of Section <A href="http://planning.cs.uiuc.edu/node39.html#sec:search">2.2</A> is straightforward. It is also straightforward to extend Formulation <A href="http://planning.cs.uiuc.edu/node59.html#for:strips">2.4</A> to represent optimal planning. A cost can be associated with each operator and set of literals that capture the current state. This would express <SPAN class=MATH><IMG height=37 alt="$ l(x,u)$" src="http://planning.cs.uiuc.edu/img301.gif" width=55 align=middle border=0></SPAN> of the cost functional, <SPAN class=MATH><IMG height=17 alt="$ L$" src="http://planning.cs.uiuc.edu/img83.gif" width=18 align=bottom border=0></SPAN>, from Section <A href="http://planning.cs.uiuc.edu/node52.html#sec:disopt">2.3</A>. Thus, it is even possible to adapt the value-iteration method to work under the logic-based representation, yielding optimal plans. <A name=3076></A><A name=3077></A>