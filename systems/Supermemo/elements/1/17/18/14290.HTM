<H3 class=section>10.2 Catalogue of Implicit Rules</H3>
<P><A name=index-implicit-rule_002c-predefined-814></A><A name=index-rule_002c-implicit_002c-predefined-815></A>Here is a catalogue of predefined implicit rules which are always available unless the makefile explicitly overrides or cancels them. See <A href="https://www.gnu.org/software/make/manual/make.html#Canceling-Rules">Canceling Implicit Rules</A>, for information on canceling or overriding an implicit rule. <FONT class=extract>The &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--no-builtin-rules</SPAN></SAMP>&#8217; option cancels all predefined rules.</FONT> 
<P>This manual only documents the default rules available on POSIX-based operating systems. Other operating systems, such as VMS, Windows, OS/2, etc. may have different sets of default rules. <FONT class=extract>To see the full list of default rules and variables available in your version of GNU <CODE>make</CODE>, run &#8216;<SAMP><SPAN class=samp>make -p</SPAN></SAMP>&#8217; in a directory with no makefile.</FONT> 
<P><FONT class=extract>Not all of these rules will always be defined, even when the &#8216;<SAMP><SPAN class=samp>-r</SPAN></SAMP>&#8217; option is not given. Many of the predefined implicit rules are implemented in <CODE>make</CODE> as suffix rules, so which ones will be defined depends on the <DFN>suffix list</DFN> (the list of prerequisites of the special target <CODE>.SUFFIXES</CODE>). The default suffix list is: <CODE>.out</CODE>, <CODE>.a</CODE>, <CODE>.ln</CODE>, <CODE>.o</CODE>, <CODE>.c</CODE>, <CODE>.cc</CODE>, <CODE>.C</CODE>, <CODE>.cpp</CODE>, <CODE>.p</CODE>, <CODE>.f</CODE>, <CODE>.F</CODE>, <CODE>.m</CODE>, <CODE>.r</CODE>, <CODE>.y</CODE>, <CODE>.l</CODE>, <CODE>.ym</CODE>, <CODE>.lm</CODE>, <CODE>.s</CODE>, <CODE>.S</CODE>, <CODE>.mod</CODE>, <CODE>.sym</CODE>, <CODE>.def</CODE>, <CODE>.h</CODE>, <CODE>.info</CODE>, <CODE>.dvi</CODE>, <CODE>.tex</CODE>, <CODE>.texinfo</CODE>, <CODE>.texi</CODE>, <CODE>.txinfo</CODE>, <CODE>.w</CODE>, <CODE>.ch</CODE> <CODE>.web</CODE>, <CODE>.sh</CODE>, <CODE>.elc</CODE>, <CODE>.el</CODE>. All of the implicit rules described below whose prerequisites have one of these suffixes are actually suffix rules. If you modify the suffix list, the only predefined suffix rules in effect will be those named by one or two of the suffixes that are on the list you specify; rules whose suffixes fail to be on the list are disabled. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Suffix-Rules"><FONT class=extract>Old-Fashioned Suffix Rules</FONT></A><FONT class=extract>, for full details on suffix rules.</FONT> 
<DL>
<DT><FONT class=extract>Compiling C programs </FONT>
<DD><A name=index-C_002c-rule-to-compile-816></A><A name=index-cc-817></A><A name=index-gcc-818></A><A name=index-g_t_002eo-819></A><A name=index-g_t_002ec-820></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(CC) $(CPPFLAGS) $(CFLAGS) -c</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Compiling C++ programs </FONT>
<DD><A name=index-C_002b_002b_002c-rule-to-compile-821></A><A name=index-g_002b_002b-822></A><A name=index-g_t_002ecc-823></A><A name=index-g_t_002ecpp-824></A><A name=index-g_t_002eC-825></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.cc</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.cpp</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.C</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c</SPAN></SAMP>&#8217;. We encourage you to use the suffix &#8216;<SAMP><SPAN class=samp>.cc</SPAN></SAMP>&#8217; for C++ source files instead of &#8216;<SAMP><SPAN class=samp>.C</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Compiling Pascal programs </FONT>
<DD><A name=index-Pascal_002c-rule-to-compile-826></A><A name=index-pc-827></A><A name=index-g_t_002ep-828></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.p</SPAN></SAMP> with the recipe &#8216;<SAMP><SPAN class=samp>$(PC) $(PFLAGS) -c</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Compiling Fortran and Ratfor programs </FONT>
<DD><A name=index-Fortran_002c-rule-to-compile-829></A><A name=index-Ratfor_002c-rule-to-compile-830></A><A name=index-f77-831></A><A name=index-g_t_002ef-832></A><A name=index-g_t_002er-833></A><A name=index-g_t_002eF-834></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.F</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.f</SPAN></SAMP> by running the Fortran compiler. The precise recipe used is as follows: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.f</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.F</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(CPPFLAGS) -c</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.r</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(RFLAGS) -c</SPAN></SAMP>&#8217;.</FONT> </DD></DL><BR>
<DT><FONT class=extract>Preprocessing Fortran and Ratfor programs </FONT>
<DD><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.f</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.F</SPAN></SAMP>. This rule runs just the preprocessor to convert a Ratfor or preprocessable Fortran program into a strict Fortran program. The precise recipe used is as follows: </FONT>
<DL>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.F</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(CPPFLAGS) $(FFLAGS) -F</SPAN></SAMP>&#8217;. <BR></FONT>
<DT><FONT class=extract>&#8216;<SAMP><SPAN class=samp>.r</SPAN></SAMP>&#8217; </FONT>
<DD><FONT class=extract>&#8216;<SAMP><SPAN class=samp>$(FC) $(FFLAGS) $(RFLAGS) -F</SPAN></SAMP>&#8217;.</FONT> </DD></DL><BR>
<DT><FONT class=extract>Compiling Modula-2 programs </FONT>
<DD><A name=index-Modula_002d2_002c-rule-to-compile-835></A><A name=index-m2c-836></A><A name=index-g_t_002esym-837></A><A name=index-g_t_002edef-838></A><A name=index-g_t_002emod-839></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.sym</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.def</SPAN></SAMP> with a recipe of the form &#8216;<SAMP><SPAN class=samp>$(M2C) $(M2FLAGS) $(DEFFLAGS)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.mod</SPAN></SAMP>; the form is: &#8216;<SAMP><SPAN class=samp>$(M2C)&nbsp;$(M2FLAGS)&nbsp;$(MODFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->.</FONT> <BR>
<DT><FONT class=extract>Assembling and preprocessing assembler programs </FONT>
<DD><A name=index-assembly_002c-rule-to-compile-840></A><A name=index-as-841></A><A name=index-g_t_002es-842></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.s</SPAN></SAMP> by running the assembler, <CODE>as</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(AS) $(ASFLAGS)</SPAN></SAMP>&#8217;. </FONT>
<P><A name=index-g_t_002eS-843></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.s</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.S</SPAN></SAMP> by running the C preprocessor, <CODE>cpp</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(CPP)&nbsp;$(CPPFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->.</FONT> <BR></P>
<DT><FONT class=extract>Linking a single object file </FONT>
<DD><A name=index-linking_002c-predefined-rule-for-844></A><A name=index-ld-845></A><A name=index-g_t_002eo-846></A><FONT class=extract><SAMP><VAR>n</VAR></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.o</SPAN></SAMP> by running the linker (usually called <CODE>ld</CODE>) via the C compiler. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(CC)&nbsp;$(LDFLAGS)&nbsp;</SPAN><VAR>n</VAR><SPAN class=samp>.o&nbsp;$(LOADLIBES)&nbsp;$(LDLIBS)</SPAN></SAMP>&#8217;<!-- /@w -->. </FONT>
<P><FONT class=extract>This rule does the right thing for a simple program with only one source file. It will also do the right thing if there are multiple object files (presumably coming from various other source files), one of which has a name matching that of the executable file. Thus, </FONT><PRE class=example><FONT class=extract>          x: y.o z.o
</FONT></PRE>
<P class=noindent><FONT class=extract>when <SAMP><SPAN class=file>x.c</SPAN></SAMP>, <SAMP><SPAN class=file>y.c</SPAN></SAMP> and <SAMP><SPAN class=file>z.c</SPAN></SAMP> all exist will execute: </FONT><PRE class=example><FONT class=extract>          cc -c x.c -o x.o
          cc -c y.c -o y.o
          cc -c z.c -o z.o
          cc x.o y.o z.o -o x
          rm -f x.o
          rm -f y.o
          rm -f z.o
</FONT></PRE>
<P class=noindent><FONT class=extract>In more complicated cases, such as when there is no object file whose name derives from the executable file name, you must write an explicit recipe for linking. </FONT>
<P><FONT class=extract>Each kind of file automatically made into &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files will be automatically linked by using the compiler (&#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>$(FC)</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>$(PC)</SPAN></SAMP>&#8217;; the C compiler &#8216;<SAMP><SPAN class=samp>$(CC)</SPAN></SAMP>&#8217; is used to assemble &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217; files) without the &#8216;<SAMP><SPAN class=samp>-c</SPAN></SAMP>&#8217; option. This could be done by using the &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; object files as intermediates, but it is faster to do the compiling and linking in one step, so that's how it's done.</FONT> <BR></P>
<DT><FONT class=extract>Yacc for C programs </FONT>
<DD><A name=index-yacc-847></A><A name=index-Yacc_002c-rule-to-run-848></A><A name=index-g_t_002ey-849></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP> by running Yacc with the recipe &#8216;<SAMP><SPAN class=samp>$(YACC) $(YFLAGS)</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Lex for C programs </FONT>
<DD><A name=index-lex-850></A><A name=index-Lex_002c-rule-to-run-851></A><A name=index-g_t_002el-852></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP> by running Lex. The actual recipe is &#8216;<SAMP><SPAN class=samp>$(LEX) $(LFLAGS)</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Lex for Ratfor programs </FONT>
<DD><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> is made automatically from <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP> by running Lex. The actual recipe is &#8216;<SAMP><SPAN class=samp>$(LEX) $(LFLAGS)</SPAN></SAMP>&#8217;. </FONT>
<P><FONT class=extract>The convention of using the same suffix &#8216;<SAMP><SPAN class=samp>.l</SPAN></SAMP>&#8217; for all Lex files regardless of whether they produce C code or Ratfor code makes it impossible for <CODE>make</CODE> to determine automatically which of the two languages you are using in any particular case. If <CODE>make</CODE> is called upon to remake an object file from a &#8216;<SAMP><SPAN class=samp>.l</SPAN></SAMP>&#8217; file, it must guess which compiler to use. It will guess the C compiler, because that is more common. If you are using Ratfor, make sure <CODE>make</CODE> knows this by mentioning <SAMP><VAR>n</VAR><SPAN class=file>.r</SPAN></SAMP> in the makefile. Or, if you are using Ratfor exclusively, with no C files, remove &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; from the list of implicit rule suffixes with: </FONT><PRE class=example><FONT class=extract>          .SUFFIXES:
          .SUFFIXES: .o .r .f .l ...</FONT>
</PRE><BR>
<DT><FONT class=extract>Making Lint Libraries from C, Yacc, or Lex programs </FONT>
<DD><A name=index-lint-853></A><A name=index-g_t_0040code_007blint_007d_002c-rule-to-run-854></A><A name=index-g_t_002eln-855></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.ln</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> by running <CODE>lint</CODE>. The precise recipe is &#8216;<SAMP><SPAN class=samp>$(LINT)&nbsp;$(LINTFLAGS)&nbsp;$(CPPFLAGS)&nbsp;-i</SPAN></SAMP>&#8217;<!-- /@w -->. The same recipe is used on the C code produced from <SAMP><VAR>n</VAR><SPAN class=file>.y</SPAN></SAMP> or <SAMP><VAR>n</VAR><SPAN class=file>.l</SPAN></SAMP>.</FONT> <BR>
<DT><FONT class=extract>TeX and Web </FONT>
<DD><A name=index-g_t_0040TeX_007b_007d_002c-rule-to-run-856></A><A name=index-Web_002c-rule-to-run-857></A><A name=index-tex-858></A><A name=index-cweave-859></A><A name=index-weave-860></A><A name=index-tangle-861></A><A name=index-ctangle-862></A><A name=index-g_t_002edvi-863></A><A name=index-g_t_002etex-864></A><A name=index-g_t_002eweb-865></A><A name=index-g_t_002ew-866></A><A name=index-g_t_002ech-867></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.dvi</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.tex</SPAN></SAMP> with the recipe &#8216;<SAMP><SPAN class=samp>$(TEX)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.tex</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.web</SPAN></SAMP> with &#8216;<SAMP><SPAN class=samp>$(WEAVE)</SPAN></SAMP>&#8217;, or from <SAMP><VAR>n</VAR><SPAN class=file>.w</SPAN></SAMP> (and from <SAMP><VAR>n</VAR><SPAN class=file>.ch</SPAN></SAMP> if it exists or can be made) with &#8216;<SAMP><SPAN class=samp>$(CWEAVE)</SPAN></SAMP>&#8217;. <SAMP><VAR>n</VAR><SPAN class=file>.p</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.web</SPAN></SAMP> with &#8216;<SAMP><SPAN class=samp>$(TANGLE)</SPAN></SAMP>&#8217; and <SAMP><VAR>n</VAR><SPAN class=file>.c</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.w</SPAN></SAMP> (and from <SAMP><VAR>n</VAR><SPAN class=file>.ch</SPAN></SAMP> if it exists or can be made) with &#8216;<SAMP><SPAN class=samp>$(CTANGLE)</SPAN></SAMP>&#8217;.</FONT> <BR>
<DT><FONT class=extract>Texinfo and Info </FONT>
<DD><A name=index-Texinfo_002c-rule-to-format-868></A><A name=index-Info_002c-rule-to-format-869></A><A name=index-texi2dvi-870></A><A name=index-makeinfo-871></A><A name=index-g_t_002etexinfo-872></A><A name=index-g_t_002einfo-873></A><A name=index-g_t_002etexi-874></A><A name=index-g_t_002etxinfo-875></A><FONT class=extract><SAMP><VAR>n</VAR><SPAN class=file>.dvi</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.texinfo</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.texi</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.txinfo</SPAN></SAMP>, with the recipe &#8216;<SAMP><SPAN class=samp>$(TEXI2DVI)&nbsp;$(TEXI2DVI_FLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <SAMP><VAR>n</VAR><SPAN class=file>.info</SPAN></SAMP> is made from <SAMP><VAR>n</VAR><SPAN class=file>.texinfo</SPAN></SAMP>, <SAMP><VAR>n</VAR><SPAN class=file>.texi</SPAN></SAMP>, or <SAMP><VAR>n</VAR><SPAN class=file>.txinfo</SPAN></SAMP>, with the recipe &#8216;<SAMP><SPAN class=samp>$(MAKEINFO)&nbsp;$(MAKEINFO_FLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->.</FONT> <BR>
<DT><FONT class=extract>RCS </FONT>
<DD><A name=index-RCS_002c-rule-to-extract-from-876></A><A name=index-co-877></A><A name=index-g_t_002cv-_0040r_007b_0028RCS-file-extension_0029_007d-878></A><FONT class=extract>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from an RCS file named either <SAMP><VAR>n</VAR><SPAN class=file>,v</SPAN></SAMP> or <SAMP><SPAN class=file>RCS/</SPAN><VAR>n</VAR><SPAN class=file>,v</SPAN></SAMP>. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(CO)&nbsp;$(COFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. <SAMP><VAR>n</VAR></SAMP> will not be extracted from RCS if it already exists, even if the RCS file is newer. The rules for RCS are terminal (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>), so RCS files cannot be generated from another source; they must actually exist.</FONT> <BR>
<DT><FONT class=extract>SCCS </FONT>
<DD><A name=index-SCCS_002c-rule-to-extract-from-879></A><A name=index-get-880></A><A name=index-s_002e-_0040r_007b_0028SCCS-file-prefix_0029_007d-881></A><FONT class=extract>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from an SCCS file named either <SAMP><SPAN class=file>s.</SPAN><VAR>n</VAR></SAMP> or <SAMP><SPAN class=file>SCCS/s.</SPAN><VAR>n</VAR></SAMP>. The precise recipe used is &#8216;<SAMP><SPAN class=samp>$(GET)&nbsp;$(GFLAGS)</SPAN></SAMP>&#8217;<!-- /@w -->. The rules for SCCS are terminal (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Match_002dAnything-Rules"><FONT class=extract>Match-Anything Pattern Rules</FONT></A><FONT class=extract>), so SCCS files cannot be generated from another source; they must actually exist. </FONT>
<P><A name=index-g_t_002esh-882></A><FONT class=extract>For the benefit of SCCS, a file <SAMP><VAR>n</VAR></SAMP> is copied from <SAMP><VAR>n</VAR><SPAN class=file>.sh</SPAN></SAMP> and made executable (by everyone). This is for shell scripts that are checked into SCCS. Since RCS preserves the execution permission of a file, you do not need to use this feature with RCS. </FONT>
<P><FONT class=extract>We recommend that you avoid using of SCCS. RCS is widely held to be superior, and is also free. By choosing free software in place of comparable (or inferior) proprietary software, you support the free software movement.</FONT> </P></DD></DL>
<P><FONT class=extract>Usually, you want to change only the variables listed in the table above, which are documented in the following section. </FONT>
<P><FONT class=extract>However, the recipes in built-in implicit rules actually use variables such as <CODE>COMPILE.c</CODE>, <CODE>LINK.p</CODE>, and <CODE>PREPROCESS.S</CODE>, whose values contain the recipes listed above. </FONT>
<P><FONT class=extract><CODE>make</CODE> follows the convention that the rule to compile a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> source file uses the variable <CODE>COMPILE.</CODE><VAR>x</VAR>. Similarly, the rule to produce an executable from a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> file uses <CODE>LINK.</CODE><VAR>x</VAR>; and the rule to preprocess a <SAMP><SPAN class=file>.</SPAN><VAR>x</VAR></SAMP> file uses <CODE>PREPROCESS.</CODE><VAR>x</VAR>.</FONT> 
<P><A name=index-OUTPUT_005fOPTION-883></A><FONT class=extract>Every rule that produces an object file uses the variable <CODE>OUTPUT_OPTION</CODE>. <CODE>make</CODE> defines this variable either to contain &#8216;<SAMP><SPAN class=samp>-o $@</SPAN></SAMP>&#8217;, or to be empty, depending on a compile-time option. You need the &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; option to ensure that the output goes into the right file when the source file is in a different directory, as when using <CODE>VPATH</CODE> (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Directory-Search"><FONT class=extract>Directory Search</FONT></A><FONT class=extract>). However, compilers on some systems do not accept a &#8216;<SAMP><SPAN class=samp>-o</SPAN></SAMP>&#8217; switch for object files. If you use such a system, and use <CODE>VPATH</CODE>, some compilations will put their output in the wrong place. A possible workaround for this problem is to give <CODE>OUTPUT_OPTION</CODE> the value &#8216;<SAMP><SPAN class=samp>;&nbsp;mv&nbsp;$*.o&nbsp;$@</SPAN></SAMP>&#8217;<!-- /@w -->.</FONT>