<H3 class=section>10.1 Using Implicit Rules</H3>
<P><A name=index-implicit-rule_002c-how-to-use-812></A><A name=index-rule_002c-implicit_002c-how-to-use-813></A><FONT class=extract>To allow <CODE>make</CODE> to find a customary method for updating a target file, all you have to do is refrain from specifying recipes yourself. Either write a rule with no recipe, or don't write a rule at all. Then <CODE>make</CODE> will figure out which implicit rule to use based on which kind of source file exists or can be made.</FONT> 
<P>For example, suppose the makefile looks like this: <PRE class=example>     foo : foo.o bar.o
             cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)
</PRE>
<P class=noindent>Because you mention <SAMP><SPAN class=file>foo.o</SPAN></SAMP> but do not give a rule for it, <CODE>make</CODE> will automatically look for an implicit rule that tells how to update it. This happens whether or not the file <SAMP><SPAN class=file>foo.o</SPAN></SAMP> currently exists. 
<P><FONT class=extract>If an implicit rule is found, it can supply both a recipe and one or more prerequisites (the source files). You would want to write a rule for <SAMP><SPAN class=file>foo.o</SPAN></SAMP> with no recipe if you need to specify additional prerequisites, such as header files, that the implicit rule cannot supply.</FONT> 
<P><FONT class=extract>Each implicit rule has a target pattern and prerequisite patterns. There may be many implicit rules with the same target pattern. For example, numerous rules make &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217; files: one, from a &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217; file with the C compiler; another, from a &#8216;<SAMP><SPAN class=samp>.p</SPAN></SAMP>&#8217; file with the Pascal compiler; and so on. The rule that actually applies is the one whose prerequisites exist or can be made. So, if you have a file <SAMP><SPAN class=file>foo.c</SPAN></SAMP>, <CODE>make</CODE> will run the C compiler; otherwise, if you have a file <SAMP><SPAN class=file>foo.p</SPAN></SAMP>, <CODE>make</CODE> will run the Pascal compiler; and so on. </FONT>
<P>Of course, when you write the makefile, you know which implicit rule you want <CODE>make</CODE> to use, and you know it will choose that one because you know which possible prerequisite files are supposed to exist. See <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Implicit Rules</A>, for a catalogue of all the predefined implicit rules. 
<P><FONT class=extract>Above, we said an implicit rule applies if the required prerequisites &#8220;exist or can be made&#8221;. A file &#8220;can be made&#8221; if it is mentioned explicitly in the makefile as a target or a prerequisite, or if an implicit rule can be recursively found for how to make it. When an implicit prerequisite is the result of another implicit rule, we say that <DFN>chaining</DFN> is occurring. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Chained-Rules"><FONT class=extract>Chains of Implicit Rules</FONT></A><FONT class=extract>.</FONT> 
<P><FONT class=extract>In general, <CODE>make</CODE> searches for an implicit rule for each target, and for each double-colon rule, that has no recipe. A file that is mentioned only as a prerequisite is considered a target whose rule specifies nothing, so implicit rule search happens for it. See </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Implicit-Rule-Search"><FONT class=extract>Implicit Rule Search Algorithm</FONT></A><FONT class=extract>, for the details of how the search is done.</FONT> 
<P><FONT class=extract>Note that explicit prerequisites do not influence implicit rule search. For example, consider this explicit rule: </FONT><PRE class=example><FONT class=extract>     foo.o: foo.p
</FONT></PRE>
<P class=noindent><FONT class=extract>The prerequisite on <SAMP><SPAN class=file>foo.p</SPAN></SAMP> does not necessarily mean that <CODE>make</CODE> will remake <SAMP><SPAN class=file>foo.o</SPAN></SAMP> according to the implicit rule to make an object file, a <SAMP><SPAN class=file>.o</SPAN></SAMP> file, from a Pascal source file, a <SAMP><SPAN class=file>.p</SPAN></SAMP> file. For example, if <SAMP><SPAN class=file>foo.c</SPAN></SAMP> also exists, the implicit rule to make an object file from a C source file is used instead, because it appears before the Pascal rule in the list of predefined implicit rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules"><FONT class=extract>Catalogue of Implicit Rules</FONT></A><FONT class=extract>).</FONT> 
<P><FONT class=extract>If you do not want an implicit rule to be used for a target that has no recipe, you can give that target an empty recipe by writing a semicolon (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Defining Empty Recipes</FONT></A><FONT class=extract>).</FONT>