<H3 class=section>5.4 Parallel Execution</H3>
<P><A name=index-recipes_002c-execution-in-parallel-343></A><A name=index-parallel-execution-344></A><A name=index-execution_002c-in-parallel-345></A><A name=index-job-slots-346></A><A name=index-g_t_0040code_007b_002dj_007d-347></A><A name=index-g_t_0040code_007b_002d_002djobs_007d-348></A>GNU <CODE>make</CODE> knows how to execute several recipes at once. Normally, <CODE>make</CODE> will execute only one recipe at a time, waiting for it to finish before executing the next. However, the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--jobs</SPAN></SAMP>&#8217; option tells <CODE>make</CODE> to execute many recipes simultaneously. You can inhibit parallelism in a particular makefile with the <CODE>.NOTPARALLEL</CODE> pseudo-target (see <A href="https://www.gnu.org/software/make/manual/make.html#Special-Targets">Special Built-in Target Names</A>). 
<P>On MS-DOS, the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option has no effect, since that system doesn't support multi-processing. 
<P>If the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option is followed by an integer, this is the number of recipes to execute at once; this is called the number of <DFN>job slots</DFN>. If there is nothing looking like an integer after the &#8216;<SAMP><SPAN class=samp>-j</SPAN></SAMP>&#8217; option, there is no limit on the number of job slots. The default number of job slots is one, which means serial execution (one thing at a time). 
<P>Handling recursive <CODE>make</CODE> invocations raises issues for parallel execution. For more information on this, see <A href="https://www.gnu.org/software/make/manual/make.html#Options_002fRecursion">Communicating Options to a Sub-<CODE>make</CODE></A>. 
<P>If a recipe fails (is killed by a signal or exits with a nonzero status), and errors are not ignored for that recipe (see <A href="https://www.gnu.org/software/make/manual/make.html#Errors">Errors in Recipes</A>), the remaining recipe lines to remake the same target will not be run. If a recipe fails and the &#8216;<SAMP><SPAN class=samp>-k</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--keep-going</SPAN></SAMP>&#8217; option was not given (see <A href="https://www.gnu.org/software/make/manual/make.html#Options-Summary">Summary of Options</A>), <CODE>make</CODE> aborts execution. If make terminates for any reason (including a signal) with child processes running, it waits for them to finish before actually exiting. 
<P><A name=index-load-average-349></A><A name=index-limiting-jobs-based-on-load-350></A><A name=index-jobs_002c-limiting-based-on-load-351></A><A name=index-g_t_0040code_007b_002dl_007d-_0028load-average_0029-352></A><A name=index-g_t_0040code_007b_002d_002dmax_002dload_007d-353></A><A name=index-g_t_0040code_007b_002d_002dload_002daverage_007d-354></A><FONT class=extract>When the system is heavily loaded, you will probably want to run fewer jobs than when it is lightly loaded. You can use the &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option to tell <CODE>make</CODE> to limit the number of jobs to run at once, based on the load average. The &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>--max-load</SPAN></SAMP>&#8217; option is followed by a floating-point number. For example, </FONT><PRE class=example><FONT class=extract>     -l 2.5
</FONT></PRE>
<P class=noindent><FONT class=extract>will not let <CODE>make</CODE> start more than one job if the load average is above 2.5. The &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option with no following number removes the load limit, if one was given with a previous &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; option. </FONT>
<P><FONT class=extract>More precisely, when <CODE>make</CODE> goes to start up a job, and it already has at least one job running, it checks the current load average; if it is not lower than the limit given with &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217;, <CODE>make</CODE> waits until the load average goes below that limit, or until all the other jobs finish. </FONT>
<P>By default, there is no load limit. 
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Parallel-Output">Parallel Output</A>: Handling output during parallel execution 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Parallel-Input">Parallel Input</A>: Handling input during parallel execution </LI></UL>