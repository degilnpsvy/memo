<H3 class=section>5.1 Recipe Syntax</H3>
<P><A name=index-recipe-syntax-292></A><A name=index-syntax-of-recipe-293></A><FONT class=extract>Makefiles have the unusual property that there are really two distinct syntaxes in one file. Most of the makefile uses <CODE>make</CODE> syntax (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Makefiles"><FONT class=extract>Writing Makefiles</FONT></A><FONT class=extract>). However, recipes are meant to be interpreted by the shell and so they are written using shell syntax.</FONT> The <CODE>make</CODE> program does not try to understand shell syntax: it performs only a very few specific translations on the content of the recipe before handing it to the shell. 
<P><FONT class=extract>Each line in the recipe must start with a tab (or the first character in the value of the <CODE>.RECIPEPREFIX</CODE> variable; see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Special-Variables"><FONT class=extract>Special Variables</FONT></A><FONT class=extract>), except that the first recipe line may be attached to the target-and-prerequisites line with a semicolon in between. <EM>Any</EM> line in the makefile that begins with a tab and appears in a &#8220;rule context&#8221; (that is, after a rule has been started until another rule or variable definition) will be considered part of a recipe for that rule. Blank lines and lines of just comments may appear among the recipe lines; they are ignored. </FONT>
<P><FONT class=extract>Some consequences of these rules include: </FONT>
<UL>
<LI><FONT class=extract>A blank line that begins with a tab is not blank: it's an empty recipe (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Empty-Recipes"><FONT class=extract>Empty Recipes</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-comments_002c-in-recipes-294></A><A name=index-recipes_002c-comments-in-295></A><A name=index-g_t_0040code_007b_0023_007d-_0028comments_0029_002c-in-recipes-296></A></P>
<LI><FONT class=extract>A comment in a recipe is not a <CODE>make</CODE> comment; it will be passed to the shell as-is. Whether the shell treats it as a comment or not depends on your shell. </FONT>
<LI><FONT class=extract>A variable definition in a &#8220;rule context&#8221; which is indented by a tab as the first character on the line, will be considered part of a recipe, not a <CODE>make</CODE> variable definition, and passed to the shell. </FONT>
<LI><FONT class=extract>A conditional expression (<CODE>ifdef</CODE>, <CODE>ifeq</CODE>, etc. see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Conditional-Syntax"><FONT class=extract>Syntax of Conditionals</FONT></A><FONT class=extract>) in a &#8220;rule context&#8221; which is indented by a tab as the first character on the line, will be considered part of a recipe and be passed to the shell.</FONT> </LI></UL>
<UL class=menu>
<LI><A accessKey=1 href="https://www.gnu.org/software/make/manual/make.html#Splitting-Recipe-Lines">Splitting Recipe Lines</A>: Breaking long recipe lines for readability. 
<LI><A accessKey=2 href="https://www.gnu.org/software/make/manual/make.html#Variables-in-Recipes">Variables in Recipes</A>: Using <CODE>make</CODE> variables in recipes. </LI></UL>