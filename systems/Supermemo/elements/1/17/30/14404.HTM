<H4 class=subsection>5.1.2 Using Variables in Recipes</H4>
<P><A name=index-variable-references-in-recipes-305></A><A name=index-recipes_002c-using-variables-in-306></A>The other way in which <CODE>make</CODE> processes recipes is by expanding any variable references in them (see <A href="https://www.gnu.org/software/make/manual/make.html#Reference">Basics of Variable References</A>). This occurs after make has finished reading all the makefiles and the target is determined to be out of date; so, the recipes for targets which are not rebuilt are never expanded. 
<P><FONT class=extract>Variable and function references in recipes have identical syntax and semantics to references elsewhere in the makefile. They also have the same quoting rules: if you want a dollar sign to appear in your recipe, you must double it (&#8216;<SAMP><SPAN class=samp>$$</SPAN></SAMP>&#8217;). For shells like the default shell, that use dollar signs to introduce variables, it's important to keep clear in your mind whether the variable you want to reference is a <CODE>make</CODE> variable (use a single dollar sign) or a shell variable (use two dollar signs).</FONT> <FONT class=extract>For example: </FONT><PRE class=example><FONT class=extract>     LIST = one two three
     all:
             for i in $(LIST); do \
                 echo $$i; \
             done
</FONT></PRE>
<P class=noindent><FONT class=extract>results in the following command being passed to the shell: </FONT><PRE class=example><FONT class=extract>     for i in one two three; do \
         echo $i; \
     done
</FONT></PRE>
<P class=noindent><FONT class=extract>which generates the expected result: </FONT><PRE class=example><FONT class=extract>     one
     two
     three
</FONT></PRE>