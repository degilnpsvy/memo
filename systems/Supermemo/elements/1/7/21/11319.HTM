<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>15.7 # Transaction Sequences </FONT></EM></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In many systems today, test teams are faced with the obstacle of verifying complex designs. In some cases, the testbench itself requires a great deal of work, including code partitioning, design for reusability, and flexibility. In many cases, you can use the concept of transaction-based testing to help achieve these goals. Throughout the book, you have been exposed to various SystemC constructs that let you design a transaction-based testbench.</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>A transaction is a set of activities defined by a start and finish and lasting a certain duration. For example, a read or write to memory is considered a transaction, including arbitration and transfer of data. </FONT></SPAN>