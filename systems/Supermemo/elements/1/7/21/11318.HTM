<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>15.6 # Sparse Arrays </FONT></EM></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Almost a seemingly unrelated topic, a model for a sparse array is included in the SCV, but it is not completely unrelated. Memories and large memories are a part of almost every electronic system today. When simulating memories in a system, it is not possible to simulate a 4 GB memory while running on a 2 GB simulation computer without some compromises. </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fortunately, most of the time, simulations only use a tiny fraction of a large memory. For that reason, it makes sense to model memories as sparsely populated. Although, one could use a standard STL map&lt;&gt; container for this purpose; there are several useful extensions that make the scv_sparse_array a better choice. For one, reading anunwritten location returns a default value. Another aid is the definition of memory bounds (i.e., upper and lower limits for the address). Fig. 15.21 is the constructor syntax. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"><FONT face=&#23435;&#20307;>1scv_sparse_array&lt;T1, T2&gt; NAME( </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>const char *name, </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>3<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>const T2 &amp;default_value, </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>const T1 &amp;indexLB = 0, </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>const T1 &amp;indexUB = INT_MAX </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>6); </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 15.21<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Creating a sparse array </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">The first typename, T1, designates the type of the index for the sparse array. The second typename, T2, designates the data value types. Accessing the memory is straightforward. Here is an example: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1scv_sparse_array&lt;unsigned, short&gt; mem(&#8220;mem&#8221;, 0, 0, 1e6); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2scv_smart_ ptr&lt;unsigned&gt; a_ptr; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3scv_smart_ptr&lt;short&gt; d_ptr; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4a_ptr-&gt;keep_only(0, 1e6); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5d_ptr-&gt;keep_out(0); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6for (unsigned count = 0; count != 30; ++count) </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>a_ptr-&gt;next(); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>d_ptr-&gt;next(); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>mem[*a_ptr] = *d_ptr; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>} </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>12for (unsigned count = 0; count != 30; ++count) </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>13<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>14<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>a_ptr-&gt;next(); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>15<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>*d_ptr = mem[*a_ptr]; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>16<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>cout &lt;&lt; *d_ptr &lt;&lt; endl; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>17<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>} </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 15.22<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Sparse array example </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>One thought that comes to mind when modeling a system that may use consistently sized chunks of memory (e.g., a 256 or 1024 block of data), suggests deriving a custom sparse array that contains blocks of data (e.g., a vector&lt;T&gt;) sized to contain the data. Using a custom sparse array may prove more efficient when treating small groups of locations repeatedly. </FONT></SPAN>