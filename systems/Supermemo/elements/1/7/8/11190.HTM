<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>6.4 # The SystemC Thread Process </FONT></EM></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>SystemC has two basic types of simulation processes: thread processes and method processes.</FONT> Thread processes are the easiest to code and are the most popular for SystemC applications. They are named thread processes because their behavior most closely models the usual software connotation of a thread of execution. We look at the SystemC method processes later in this chapter. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SystemC thread processes begin execution at the start of simulation and typically continue in an endless loop until the simulation ends. SystemC thread processes are started once and only once by the simulator.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>As we have noted, a running thread process has complete control of the simulation until it decides to yield control to the simulator kernel. A thread process can return control in two ways. First, by waiting, which suspends the process to be resumed later, and second, by simply exiting (returning). A thread that exits cannot be resumed and will not be restarted for the duration of the simulation. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Thread processes that implement endless loops must have at least one explicit or implicit call to the wait() function. One or more calls to wait() may be included in the endless loop; these calls are explicit waits. A wait call may be contained in a function called from the threads; this is called an implicit wait. For instance, a blocking read() call to an instance of the sc_fifo&lt;T&gt; invokes wait() when the FIFO is empty. </FONT></SPAN>