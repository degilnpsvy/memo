<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>14.1 # Error and Message Reporting </FONT></EM></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Reporting information about the state and status of a simulation as it progresses is an important art. Many teams create utilities to standardize this reporting within the project because of the large volume of data from reporting. Many a project has seen thousands, if not millions of lines of output from simulations. In fact, controlling output can have a significant effect on run-time performance. At the same time, it is crucial that engineers have a solid handle on any errors that are produced and have enough information to efficiently debug the problems that arise. </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Messages have classifications including informational, warning, error, and fatal. Additionally, messages usually apply to a variety of areas and need to be isolated to their source to aid debugging. For simulations, it is also important to identify the time that a message occurs. Because simulations provide a tremendous amount of output data, it is important that messages be standardized and easy to identify. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SystemC has an error reporting system that greatly simplifies this task. Throughout our examples thus far, you have seen a stylized format of error management. In this short section, we will examine a subset of the error-reporting facilities in SystemC. For more information, you are referred to the SystemC LRM and the example documentation that accompanies the release. </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">We need a few definitions first. Every message is associated with an identifying name. This labeling is used to keep messages from different parts of the design properly identified. It can be anything; however, we recommend something along</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">the lines of &#8220;/COMPANY/PROJECT_OR_IP/FUNCTIONAL_AREA&#8221;. A message identifier is simply a character string (Fig. 14.1): </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>const char* MSGID = "UNIQUE_STRING"; </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.1<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of message identifier </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Next, all messages need to be classified. SystemC has the following classifications (Fig. 14.2): </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_INFO - informational only &#8211; this includes debug</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_WARNING - possible problem, possibly harmless </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_ERROR - problem identified probably serious </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_FATAL - extremely serious problem probably ending simulation </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Error classifications </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>For each classification, a variety of actions may be taken. For the most part, defaults are sufficient. Possible actions include the following actions taken from the </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SystemC example documentation (Table 14.1): </FONT></SPAN></P>
<TABLE class=MsoNormalTable style="MARGIN: auto auto auto 2.75pt; BORDER-COLLAPSE: collapse; mso-table-layout-alt: fixed; mso-padding-alt: 2.75pt 2.75pt 2.75pt 2.75pt" cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR style="mso-yfti-irow: 0; mso-yfti-firstrow: yes">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: black 1pt solid; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-top-alt: hairline black .1pt; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Error Classification </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: black 1pt solid; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Action</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 1">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_UNSPECIFIED </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Take the action specified by a configuration rule of a lower precedence.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 2">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_DO_NOTHING </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Don&#8217;t take any actions for the report. The action will be ignored, if other actions are given.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 3">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_THROW </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Throw a C++ exception (sc_exception) that represents the report. The method sc_exception::get_report () can be used to access the report instance later.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 4">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_LOG </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Print the report into the report log, which is typically a file on disk. The actual behavior is defined by the report handler function.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 5">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_DISPLAY </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Display the report to the screen, which is typically done by writing it into the standard output channel using std::cout.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 6">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_INTERRUPT </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Interrupt simulation if simulation is not being run in batch mode. Actual behavior is implementation-defined; the default configuration calls sc_interrupt_here(...) debugging hook and has no further side effects.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 7">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_CACHE_REPORT </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Save a copy of the report for the current process. The report could be read later using sc_report_handler::get_cached_ report(). The reports saved by different processes do not overwrite each other; however, the default behavior is to save only one cached report per process.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 8">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_STOP </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Call sc_stop(). See sc_stop() manual for further detail.</FONT></SPAN></P></TD></TR>
<TR style="mso-yfti-irow: 9; mso-yfti-lastrow: yes">
<TD style="BORDER-RIGHT: #ffffff; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 166.2pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt" vAlign=top width=222>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SC_ABORT </FONT></SPAN></P></TD>
<TD style="BORDER-RIGHT: black 1pt solid; PADDING-RIGHT: 2.75pt; BORDER-TOP: #ffffff; PADDING-LEFT: 2.75pt; PADDING-BOTTOM: 2.75pt; BORDER-LEFT: black 1pt solid; WIDTH: 332.4pt; PADDING-TOP: 2.75pt; BORDER-BOTTOM: black 1pt solid; BACKGROUND-COLOR: transparent; mso-border-left-alt: hairline black .1pt; mso-border-bottom-alt: hairline black .1pt; mso-border-right-alt: hairline black .1pt" vAlign=top width=443>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The action requests the report handler to call abort().</FONT></SPAN></P></TD></TR></TBODY></TABLE>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Table 14.1<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Error actions</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">SystemC has a large class of setup that may be specified for message reporting. For basic designs, the following syntax should suffice (Fig. 14.3): </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>sc_report_handler::set_log_file_name("filename"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>sc_report_handler::stop_after(SC_ERROR, MAXERRORS); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>sc_report_handler::set_actions(MSGID,CLASS,ACTIONS); </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.3<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax for basic message setup </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">The following code, named report, illustrates the basics of message handling (Figs. 14.4 and 14.5): </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1const char *MSGID = "/ESLX/Examples/mysim"; </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR">2const char *sim_vers = "Version 5.2"; // Code version<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></FONT></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">3int sc_main(int argc, char *argv[]) </SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_report rp; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_report_handler::set_log_file_name("run.log"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_report_handler::stop_after(SC_ERROR, 100); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_report_handler::set_actions( </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>MSGID, SC_INFO, SC_DISPLAY | SC_LOG </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>SC_REPORT_INFO(MSGID, sim_vers); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>12<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>.../* Body of main */ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>13<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_start(); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>14<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>if (sc_report_handler::get_count(SC_ERROR) &gt; 0 </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>15<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>|| sc_report_handler::get_count(SC_FATAL) </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>16<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>) </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>17<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>18<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>cout &lt;&lt; rp.-&gt;get_msg() &lt;&lt; endl; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>19<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>cout &lt;&lt; MSGID &lt;&lt; " FAILED" &lt;&lt; endl; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>20<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>return 1; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>21<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>} </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>22<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>else </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>23<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>24<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>cout &lt;&lt; MSGID &lt;&lt; " PASSED" &lt;&lt; endl; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>25<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>return 0; </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>26<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>} </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>27} </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of main.cpp with SystemC error reporting </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">1extern char *MSGID; </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>2void mymod::some_thread() </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>3{ </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(2, SC_NS); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>SC_REPORT_INFO(MSGID, "Sample info"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>SC_REPORT_WARNING(MSGID, "Sample warning"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>SC_REPORT_ERROR(MSGID, "Sample error"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>SC_REPORT_FATAL(MSGID, "Sample fatal"); </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>9} </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of reporting in a module</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Here is a sample of the log file output (Fig. 14.6): </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>0 s: Info: /ESLX/Examples/mysim: Version 5.2 </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>2 ns: Info: /ESLX/Examples/mysim: Sample info </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>2 ns: Warning: /ESLX/Examples/mysim: Sample warning </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In file: mymod.cpp:21 </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In process: mymod_i.some_thread @ 2 ns </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>2 ns: Error: /ESLX/Examples/mysim: Sample error </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In file: mymod.cpp:22 </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In process: mymod _i.some_thread @ 2 ns </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>... </FONT></SPAN></P>
<p><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 14.6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of output messages </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Notice that all the messages have a standard format. SystemC has added some useful information to the messages: the simulated time, filename, line number, and process identification. Also notice that the Info messages do not include module name and line number information by default. This is controlled by the sc_report_handler. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>You can enhance the output by using a syntax-highlighting editor and setting up a coloring scheme for log files. A slightly more involved route involves supplanting the default report handler with your own. An advantage to this is that you can enhance the output options including perhaps providing an XML output as we have done for some of our customers. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Along the line of enhancing reporting, it is useful to have standard preludes and summaries. In the prelude, it is nice to specify such things as the versions of files, the name of the running host computer, and date of execution. In the summary, it is essential to know if the simulation passed or failed. It is also useful to know the clock wall time (i.e., how long did it take to simulate), and how many errors, warnings, etc. (i.e., statistics) were encountered. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>All of this information can be reported by creating an object in the topmost design as the first instance in the module. The object should be a class that issues the prelude in the constructor and the summary in the destructor. This approach will guarantee execution at the correct times in the simulation lifetime. Other things should happen outside of simulation and they are discussed in the next section. </FONT></SPAN>