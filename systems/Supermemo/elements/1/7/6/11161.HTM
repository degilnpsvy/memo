<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>4.4 # The Basic Unit of Execution: Simulation Process </FONT></EM></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The SystemC simulation process is the basic unit of execution. All simulation processes are registered with the SystemC simulation kernel and are called by the kernel, and only from the SystemC simulation kernel. We discuss the SystemC simulation kernel in excruciating detail in a following chapter on concurrency. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>From the time the simulator begins until simulation ends, all executing code is initiated from one or more processes. Simulation processes appear to execute concurrently. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>DEFINITION: A SystemC simulation process is a method (member function) of an SC_MODULE that is invoked by the scheduler in the SystemC simulation kernel. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">The prototype of a basic simulation process for SystemC is: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>void PROCESS_NAME(void); </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Fig. 4.8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of SystemC process</FONT> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>There are several kinds of simulation processes, and we will discuss all of them eventually. For the purpose of simplification, we will look only at the most basic simulation process type in this chapter. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The most straightforward type of process to understand is the SystemC thread, SC_THREAD. Conceptually, a SystemC thread is similar to a single software thread. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>A SystemC simulation is a simple C/C++ program. There is only one thread running for the entire program. The SystemC simulation kernel, on the other hand, allows the illusion that many SystemC simulation threads are executing in parallel, as we shall learn in the chapters on concurrency. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>A simple SC_THREAD begins execution when the scheduler calls it. An SC_THREAD may also suspend itself, but we will discuss that topic in the next two chapters.</FONT></SPAN>