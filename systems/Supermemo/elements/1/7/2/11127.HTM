<H3 style="MARGIN: 12pt 0cm 6pt 36pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><FONT face=&#23435;&#20307;>2.3.1 # Modules and Hierarchy </FONT></SPAN></H3>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Hardware designs typically contain hierarchy to reduce complexity. Each level of hierarchy represents a block. VHDL refers to blocks as entity/architecture pairs, which separate an interface specification from the body of code for each block. In Verilog, blocks are called modules and contain both interface and implementation in the same code. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>SystemC separates the interface and implementation similar to VHDL. The C++ notion of header (.h file) is used for the entity and the notion of implementation (.cpp file) is used for the architecture. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Design components are encapsulated as &#8220;modules&#8221;. Modules are classes that inherit from the sc_module base class. As a simplification, the SC_MODULE macro is provided. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Modules may contain other modules, processes, and channels and ports for connectivity. </FONT></SPAN>