<HEAD></HEAD>
<BODY>
<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>9.1 # Completed Simulation Engine </FONT></EM></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>To solve this problem, simulators have a feature known as the evaluate-update paradigm. The next diagram (Fig. 9.4) is the complete SystemC simulation kernel with the added update state. It is possible to go from evaluate to update and back. This cycle is known as the delta-cycle. Even when the simulator moves from evaluate to update to advance time, we say that at least one delta-cycle has occurred. Let&#8217;s see how the delta-cycle is used.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 498pt; HEIGHT: 284.25pt; mso-wrap-distance-left: 0; mso-wrap-distance-right: 0; mso-position-horizontal: left; mso-position-vertical: top; mso-position-vertical-relative: line" filled="t" type="#_x0000_t75" o:allowoverlap="f"><FONT face=&#23435;&#20307;><v:fill color2="black"></v:fill><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.png" o:title=""></v:imagedata></FONT></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Fig. 9.4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Full SystemC simulation engine </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Referring back to Chapter 6 on Concurrency, you&#8217;ll recall that we discussed the notions of immediate notification, delayed notification, and timed notification. In the preceding diagram (Fig. 9.4) you will notice we&#8217;ve annotated the state bubble to indicate where each of these event notifications actually occur. It is important to realize that in the case of notify(SC_ZERO_TIME), the notification occurs in the update phase after evaluation has completed. This means that processes waiting on events notified in this manner, will all see the event at the same instant. This contrasts starkly with immediate notification that uses the notify(void) syntax. Immediate notification may cause some processes to miss the event if they are not already waiting for it. These processes may miss the event because they have not run in the current evaluate phase. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Special channels, known as signal channels, use this update phase as a point of data synchronization. To accomplish this synchronization, every channel has two storage locations: the current value and the new value. Visually, there are two sets of data: new and current.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><v:shape id=_x0000_i1026 style="WIDTH: 260.25pt; HEIGHT: 215.25pt; mso-wrap-distance-left: 0; mso-wrap-distance-right: 0; mso-position-horizontal: center; mso-position-vertical: top" filled="t" type="#_x0000_t75"><FONT face=&#23435;&#20307;><v:fill color2="black"></v:fill><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image003.png" o:title=""></v:imagedata></FONT></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Fig. 9.5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Signal channel data storage</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Referring to the preceding figure (Fig. 9.5), when a process writes to a signal channel, the process stores into the new value rather than into the current value. The process then calls request_update() to notify the simulation kernel. When the update phase occurs, the simulation kernel calls the update() methods of all channels that requested update during the preceding evaluate phase.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The update() method may do more than simply copy the new value into the current value. It may resolve contentions and, most importantly, notify sc_event&#8217;s (e.g., to indicate a change and wake up a process in the waiting state). </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>An important aspect of this paradigm is the current value remains unchanged until the end of the update phase. If a process writes to an evaluate-update channel and then immediately (i.e., without suspending) accesses the channel, it will find the current value unchanged. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>This behavior is a frequent cause for confusion for simulation neophytes. Those familiar with HDLs should not be surprised. Shortly, we will discuss techniques to make this behavior less of a surprise. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Another consideration is that the new value will contain only the last value written to a signal channel during the evaluate phase. Thus, writing repeatedly overwrites the previous new value. </FONT></SPAN></P></BODY>