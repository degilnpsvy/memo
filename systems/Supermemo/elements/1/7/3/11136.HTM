<H1 style="PAGE-BREAK-BEFORE: always; MARGIN: 12pt 0cm 6pt 21.6pt"><SPAN lang=EN-US style="FONT-SIZE: 22pt; mso-bidi-font-size: 16.0pt"><FONT face=&#23435;&#20307;>Chapter 3 Data Types</FONT></SPAN></H1>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>This chapter provides an overview of the data types available to a user creating SystemC simulation models. The SystemC <FONT class=extract>Language Reference Manual (LRM)</FONT> IEEE Standard 1666 uses over 190 pages to specify the SystemC data types. We have attempted to be considerably briefer. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The reader will consequently need to refer to the SystemC LRM for a full definition of the SystemC data types and other resources for the C++ data types and other libraries. The SystemC library provides integer, logic, and fixed-point data types designed for modeling hardware. In addition to the SystemC data types, SystemC simulations may use native C++ data types, other library data types, and user-defined data types. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The use of SystemC data types is not restricted to models using the simulation kernel; they may be used in non-simulation applications as other data types would be used. Though simulation models may be created using any of the available data types, the choice of data types affects simulation speed, synthesizability, and synthesis results. The use of the native C++ data types can maximize simulation performance, at the cost of hardware fidelity and synthesizability. </FONT></SPAN>