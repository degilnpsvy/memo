<H3 style="MARGIN: 12pt 0cm 6pt 36pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><FONT face=&#23435;&#20307;>2.3.5 # Ports, Interfaces, and Channels </FONT></SPAN></H3>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>Processes need to communicate with other processes both locally and in other modules. In traditional HDLs, processes communicate via ports/pins and signals or wires. In SystemC, processes communicate using channels or events. Processes may also communicate across module boundaries. Modules may interconnect using channels, and connect via ports. The powerful ability to have interchangeable channels is implemented through a component called an interface. SystemC uses the constructs sc_port&lt;T&gt;, sc_export&lt;T&gt;, and the base classes sc_interface, and sc_channel to implement connectivity.</FONT> </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>SystemC provides some standard channels and interfaces that are derived from these base types. The provided channels include the synchronization primitives sc_mutex and sc_semaphore, and the communication channels sc_fifo&lt;T&gt;, sc_signal&lt;T&gt;, and others. These channels implement the SystemC-provided interfaces sc_mutex_if, sc_semaphore_if, sc_fifo_in_if&lt;T&gt;, sc_fifo_out_if&lt;T&gt;, sc_signal_in_if&lt;T&gt;, and sc_signal_inout_if&lt;T&gt;.</FONT> </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>Interestingly, module interconnection happens programmatically in SystemC during the elaboration phase. This interconnection lets designers build regular structures using loops and conditional statements. From a software perspective, elaboration is simply the period of time when modules invoke their constructor methods.</FONT></SPAN>