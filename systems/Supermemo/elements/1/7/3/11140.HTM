<H3 style="MARGIN: 12pt 0cm 6pt 36pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><FONT face=&#23435;&#20307;>3.3.1 # sc_bv&lt;W&gt; </FONT></SPAN></H3>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">The SystemC bit vector data type sc_bv&lt;W&gt; has the same capabilities as the sc_lv&lt;W&gt; with the bit values restricted to logic zero or logic one. The sc_bv&lt;W&gt; is a templated class where T specifies bit width.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">sc_bv&lt;BITWIDTH&gt; NAME...;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"></SPAN></FONT></FONT></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Fig. 3.2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of Boolean data types</FONT> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">SystemC bit vector operations include all the common bitwise-and, bitwise-or, and bitwise-xor operators (i.e., &amp;, |, ^). In addition to bit selection and bit ranges (i.e., [] and range ()), sc_bv&lt;W&gt; also supports and_reduce (), or_reduce (), nand_reduce (), nor_reduce (), xor_reduce (), and xnor_reduce () operations. Reduction operations place the operator between all adjacent bits. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT class=extract face=&#23435;&#20307;>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_bv&lt;5&gt; positions = "01101"; </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_bv&lt;6&gt; mask = "100111"; </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_bv&lt;5&gt; active = positions &amp; mask;// 00101 </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_bv&lt;1&gt; all = active.and_reduce(); // SC_LOGIC_0 </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"><FONT class=extract face=&#23435;&#20307;>positions.range(3,2) = "00";// 00001 </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=SourceText><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR">positions[2] = active[0] ^ flag; </SPAN></SPAN><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>Fig. 3.3<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Examples of bit operations</FONT></SPAN>