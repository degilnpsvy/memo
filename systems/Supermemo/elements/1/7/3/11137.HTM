<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>3.1 # Native C++ Data Types </FONT></EM></SPAN></H2>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The native C++ data types available on most systems include the logic data type bool, and signed and unsigned versions of the following arithmetic data types in Table 3.1. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Table 3.1<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of C++ built-in data type on a 32-bit architecture</SPAN><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"></SPAN></SPAN></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>// Example native C++ data types </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>const bool <SPAN style="mso-tab-count: 2">&nbsp;&nbsp; </SPAN>WARNING_LIGHT(true);// Status </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>int <SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>spark_offset; // Adjust ignition </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">unsigned <SPAN style="mso-tab-count: 2">&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><SPAN style="mso-tab-count: 1">&nbsp; </SPAN></SPAN></SPAN><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">repairs(0); // # of repairs </SPAN></SPAN></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>unsigned long <SPAN style="mso-tab-count: 1">&nbsp; </SPAN>mileage; // Miles driven </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>short int <SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp; </SPAN>speedometer; // -20..0..100 MPH </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">float <SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></SPAN><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><SPAN style="mso-tab-count: 1">&nbsp; </SPAN></SPAN></SPAN><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">temperature; // Engine temp in C </SPAN></SPAN></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>double <SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>time_of_last_request; // bus activity </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>string <SPAN style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>license_plate;// license plate text </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>enum <SPAN style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Direction { N,NE,E,SE,S,SW,W,NW }; </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Direction <SPAN style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp; </SPAN>compass</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Fig. 3.1<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of C++ built-in data types </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The Standard Template Library (STL) has a rich set of additional data types. The beginner will want to become familiar with string from the STL. The string data type provides operators for appending (+=, +, and assign()) and comparison (==, !=, &lt;, &lt;=, &gt;, &gt;=, and compare()) as well as many others including a conversion to a c-string (c_str()). </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>For many SystemC models, the native C++ data type in Fig. 3.1 are more than sufficient. The native C++ data types are most efficient in terms of memory usage and simulator execution speed because they can be mapped directly to processor instructions. </FONT></SPAN>