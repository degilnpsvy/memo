<H3 style="MARGIN: 12pt 0cm 6pt 36pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><FONT face=&#23435;&#20307;>3.3.2 # sc_logic and sc_lv&lt;W&gt; </FONT></SPAN></H3>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>More interesting than the Boolean data types are the four-value data types used to represent unknown and high impedance (tri-state) conditions. SystemC uses sc_logic and sc_lv&lt;W&gt; to represent these data types (Fig. 3.4). The logic state of these data types are represented as: </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>logic 0 - SC_LOGIC_0, Log_0, or &#8216;0&#8217; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>logic 1 - SC_LOGIC_1, Log_1, or &#8216;1&#8217; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>high-impedance - SC_LOGIC_Z, Log_Z, &#8216;Z&#8217; or &#8216;z&#8217; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>&#8226;<SPAN style="mso-tab-count: 1"> </SPAN>unknown - SC_LOGIC_X, Log_X, &#8216;X&#8217; or &#8216;x&#8217; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Because of their overhead, these data types are considerably slower than bool and sc_bv. The sc_logic data type is a single-bit version of the templated sc_lv&lt;W&gt; class where the single template parameter is the bit width. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">SystemC does not have representations for other multi-level data types or drive strengths like Verilog&#8217;s 12-level logic values or VHDL&#8217;s 9-level std_logic values. However, you can create custom data types if truly necessary, and you can manipulate them by operator overloading in C++.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_logic NAME[,NAME]...; </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">sc_lv&lt;BITWIDTH&gt; NAME[,NAME]...;</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"></SPAN></FONT></FONT></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 3.4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of multi-value data types </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">SystemC logic vector operations (Fig. 3.5) include all the common bitwise-and, bitwise-or, and bitwise-xor operators (i.e., &amp;, |, ^). In addition to bit selection and bit ranges (i.e., [] and range()), sc_lv&lt;W&gt; also supports and_reduce(), or_reduce(), nand_reduce(),nor_reduce(), xor_reduce(), and xnor_reduce() operations. Reduction operations place the operator between all adjacent bits.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT class=extract face=&#23435;&#20307;>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_lv&lt;5&gt; positions = "01xz1"; </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_lv&lt;6&gt; mask = "10ZX11"; </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_lv&lt;5&gt; active = positions &amp; mask; //0xxx1 </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_lv&lt;1&gt; all = active.and_reduce(); //SC_LOGIC_0 </FONT></SPAN></SPAN></P>
<P><SPAN class=SourceText><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"><FONT class=extract face=&#23435;&#20307;>positions.range(3,2) = "00"; //000Z1 </FONT></SPAN></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN class=SourceText><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR">positions[2] = active[0] ^ flag; //!flag</SPAN></SPAN><SPAN lang=FR style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>Fig. 3.5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Examples of bit operations </FONT></SPAN>