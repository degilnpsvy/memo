<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt" lang=EN-US><EM><FONT face=&#23435;&#20307;>6.6 # Catching Events for Thread Processes </FONT></EM></SPAN></H2>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>Thread processes rely on the wait() method to suspend their execution. The wait() method supplied by SystemC has several syntaxes shown in the next figure, Fig 6.16. When the wait function is called, control is returned to the simulator kernel, the state of the current thread process is saved, and eventually a new process is allowed to run. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>When a suspended thread process is selected to run, the simulation kernel restores the calling context, and the process resumes execution at the statement following the call to wait(). </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(time); // timeout is the event </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(double,time_unit); // convenience </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(event); // single event </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(event1 | eventn...); // any of these </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(event1 &amp; eventn...); // all of these </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(time,event); // event or timeout </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(time,event1 | eventn...);// any event or timeout </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(time,event1 &amp; eventn...);// all events or timeout </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>wait(); // static sensitivity &#8211; discussed later </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Fig. 6.16<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of SC_THREAD wait() </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>The first two syntaxes for wait (time) provide a delay for a period of simulation time as described in the Chapter 5. </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>The next several forms specify events and suspend execution until one or all the events have occurred. The operator | is defined to mean any of these events; whichever one happens first will cause a return to wait. The operator &amp; is defined to mean all of these events in any order must occur before wait returns. The last syntax, wait(), will be deferred to a joint discussion with static sensitivity later in this chapter. </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>The three forms that have time with a second argument constitute a time-out. This result is really just the logical or of a time event with other events. Use of a time-out is handy when testing protocols and various error conditions and an example is given in Fig. 6.17.</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>1... </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>2sc_event ack_event, bus_error_event; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>3... </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>4sc_time start_time(sc_time_stamp()); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>5wait(t_MAX_DELAY, ack_event | bus_error_event); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>6if (sc_time_stamp() - start_time == t_MAX_DELAY) </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>{ </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>8<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>break; // path for a time out<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>9<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>... </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Fig. 6.17<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example using time-out variation of wait() </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>Notice when multiple events are or&#8217;ed, it is not possible to know which event occurred in a multiple event wait situation as events have no value. Thus (Fig. 6.18), </FONT></SPAN><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>it is illegal to test an event for true or false. </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>if (ack_event) do_something; // syntax error! </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Fig. 6.18<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of illegal Boolean compare of sc_event </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract>It is legal to test a flag that is set by the process that caused an event; however, it is problematic to clear this flag properly.</FONT> </FONT></SPAN>