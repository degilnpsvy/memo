<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>7.2 # sc_spawn </FONT></EM></SPAN></H2>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Let&#8217;s look at the syntax and requirements that enable dynamic processes. First, to enable dynamic processes, it is necessary to use a pre-processor macro prior to the invocation of the SystemC header file. Figure 7.1 is one way to do this:</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>#define SC_INCLUDE_DYNAMIC_PROCESSES </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>#include &lt;systemc&gt; </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Fig. 7.1<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax to enable dynamic threads</FONT> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>Other mechanisms involve the C++ compilation tools. For example, GNU gcc has a &#8211;D option (e.g., &#8211;DSC_INCLUDE_DYNAMIC_PROCESSES), which predefines the macro. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Next, declare the functions to be spawned as processes. Functions may be either normal functions or methods (i.e., member functions of a class). The dynamic facilities of SystemC allow for either SC_THREAD or SC_METHOD style processes. Unlike static processes, dynamic processes may have up to eight arguments and a return value. The return value will be provided via a reference variable in the actual spawn function. For example, consider the declarations in Fig. 7.2. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1// Ordinary function declarations<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2void inject(void); // no args or return<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3int count_changes(sc_signal&lt;int&gt;&amp; sig); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4// Method function declarations<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5class TestChan : public sc_module </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6{ </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>... </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>bool Track(sc_signal&lt;packet&gt;&amp; pkt); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>void Errors(int maxwarn, int maxerr); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>void Speed(void); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>... </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>12}; </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example functions used as dynamic processes </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Having declared a function (possibly a member function) to be used as spawned process, you need to define the implementation and register the function with the kernel. You can register the dynamic processes within an SC_THREAD or with restrictions within an SC_METHOD. The basic syntax is shown in Fig. 7.3 and Fig. 7.4. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>&nbsp;1sc_process_handle hname = // ordinary function<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn( </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>sc_bind(&amp;funcName, ARGS...)//no return value<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, processName </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, spawnOptions </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>); </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7sc_process_handle hname = // member function<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn( </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>sc_bind(&amp;methName, object, ARGS...)//no return<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, processName </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, spawnOptions </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>12<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>); </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.3<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax to register dynamic processes with void return</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1sc_process_handle hname = // ordinary function<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn( </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>&amp;returnVar </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, sc_bind(&amp;funcName, ARGS...) </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, processName </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, spawnOptions </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>); </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8sc_process_handle hname = // member function<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn( </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>&amp;returnVar </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, sc_bind(&amp;methodName, object, ARGS ...) </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>12<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, processName </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>13<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>, spawnOptions </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>14<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>); </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax to register dynamic processes with return values </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Note in the preceding that object is a reference to the calling module, and normally we just use the C++ keyword this, which refers to the calling object itself. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">By default, arguments are passed by value. To pass by reference or by constant reference, a special syntax is required. This syntax is required to make sc_bind() practical. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT class=extract face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_ref(var) // reference </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>sc_cref(var) // constant reference </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax to pass process arguments by reference </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">The processName and spawnOptions are optional; however, if spawn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Options are used, then a processName is mandatory. All processes should have unique names. Fortunately, uniqueness of a process name includes the hierarchical instance as a prefix (i.e., name()). If a process spawns a process, then its name is used to prefix the spawned process name. </SPAN></FONT></FONT>