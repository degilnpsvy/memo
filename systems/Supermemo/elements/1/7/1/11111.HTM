<H3 style="MARGIN: 12pt 0cm 6pt 36pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><FONT face=&#23435;&#20307;>1.4.4 # Proper Simulation Performance and Features </FONT></SPAN></H3>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Obviously models need to execute swiftly. Not so obviously to some, the language needs to support concurrent simulation (we will talk about this extensively later in the book). The language must also support a series of additional productivity features. These features include the ability to manage the model complexity through hierarchy, debug features, and a list of other features discussed throughout this book. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>Any model needs to execute relatively swiftly. A model is never fast enough, so what is fast enough. One can look at the requirements for model speed when used for common ESL purposes like early software development. To keep software developers from extreme frustration, the model needs to boot its operating system in just a couple of minutes or close to &#8220;real time&#8221;. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>No modeling language can make up for inefficient modeling practices. The compiled nature of SystemC coupled with the availability of very good C++ compilers complemented with good modeling practices can produce a model that meets the speed requirements for all but the very largest systems. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">As the reader may have guessed by now, developing a model is different than developing an application program. The difference is that in an ESL model, the</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"> c</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">ode modules need to appear as if they are executing in parallel or concurrently. When a digital system is running, then many, many computations are running at the same time or are running concurrently. SystemC provides a simulation kernel to give this illusion of concurrency. This feature, as well as several others, helps manage the complexity of the model. These features are discussed in detail in &shy;subsequent chapters. </SPAN></FONT>