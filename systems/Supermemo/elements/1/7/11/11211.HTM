<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>7.4 # A Spawned Process Example </FONT></EM></SPAN></H2>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">That&#8217;s a lot of syntax. Fortunately, you don&#8217;t need to use all of it. Let&#8217;s take a look at an example of the simplest case in Fig. 7.7. <FONT class=extract>This example is an SC_THREAD that contains no parameters and returns no result. In other words, it looks like an SC_THREAD that just happens to be dynamically spawned. We highlight the important points. </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT class=extract face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1#define SC_INCLUDE_DYNAMIC_PROCESSES </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2#include &lt;systemc&gt; </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3... </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4void spawned_thread()<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>// This will be spawned<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5{ </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "INFO: spawned_thread " </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; sc_get_current_process_handle().name() </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; " @ " &lt;&lt; sc_time_stamp() &lt;&lt; endl; </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(10, SC_NS); </FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "INFO: Exiting" &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>11} </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>12void simple_spawn::main_thread() </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>13{ </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>14<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(15, SC_NS); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>15<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>// Unused handle discarded<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>16<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn(sc_bind(&amp;spawned_thread)); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>17<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "INFO: main_thread " &lt;&lt; name() </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>18<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; " @ " &lt;&lt; sc_time_stamp() &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>19<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(15, SC_NS); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>20<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "INFO: main_thread stopping " </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>21<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; " @ " &lt;&lt; sc_time_stamp() &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>22} </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of a simple thread spawn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">If you keep a handle on the spawned process, then it is also possible to await the termination of the process via the sc_process_handle::terminated_event() method. For example: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT class=extract face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>1sc_process_handle h = </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>2<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_spawn(sc_bind(&amp;spawned_thread)); </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>3// Do some work<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>4... </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>5// Wait for spawned thread to return<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract face=&#23435;&#20307;>6wait(h.terminated_event()); </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt">Fig. 7.8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of waiting on a spawned process </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"></SPAN></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Be careful not to wait() on an SC_METHOD process; currently, there is no way to terminate an SC_METHOD.[1However, see the last section of this chapter for a preview of upcoming features. ]</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;"> </SPAN><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>An interesting observation about sc_spawn is that it may also be used within the constructor, and it may be used with the same member function multiple times as long as the process name is unique. This capability also means there is now a way to pass arguments to SC_THREAD and SC_METHOD as long as you are willing to use the longer syntax.</FONT> </SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;><FONT class=extract>A dangerous aspect of spawned threads relates to the return value. If you pass a function or method that returns a value, it is critical that the referenced return location remains valid throughout the lifetime of the process. The result will be written without respect to whether the location is valid upon exit, possibly resulting in a really nasty bug.</FONT> </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The creation and management of dynamic processes is not for the faint of heart. On the other hand, learning to manage dynamic processes has great rewards. One of the simpler ways to manage dynamic processes is discussed in the next section on fork/join. </FONT></SPAN>