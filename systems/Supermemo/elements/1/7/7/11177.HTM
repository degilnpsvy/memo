<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt" lang=EN-US><EM><FONT face=&#23435;&#20307;>5.4 # wait(sc_time) </FONT></EM></SPAN></H2>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Simulations use delays in simulated time to model real world behaviors, mechanical actions, chemical reaction times, or signal propagation. The wait() method provides a syntax to allow this delay in SC_THREAD processes. When a wait() is invoked, the SC_THREAD process blocks itself and is resumed by the scheduler after the requested delay in simulated time. The SC_THREAD processes will be discussed in detail in the next chapter and will include additional syntaxes for wait(). </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>wait(delay_sc_time); // wait specified amount of time </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Fig. 5.10<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Syntax of wait() with a timed delay </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract>When the resolution of sc_time used in a wait request is finer than the current time resolution, rounding must occur.</FONT> The rounding of sc_time is not specified. This lack of rounding specification lets different simulators implement different rounding algorithms. The algorithms may vary from vendor to vendor. For example, if the specified time resolution is 100 ps and the request wait time is 20 ps, one simulator could round to zero resulting in an effective 0 ps delay. Another simulator could round to the minimum delay possible for the time resolution resulting in an effective delay of 100 ps. </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>The examples in Figs. 5.11 and 5.12 use the sc_time data type and several of the methods discussed in this chapter. </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>In the Fig. 5.11 example wait() is used to let simulated time advance. Other methods and overloaded operators are used to modify the display of simulated time. </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1//FILE: wait_ex.cpp<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2void wait_ex::my_thread_process(void) </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3{ </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(10, SC_NS); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "Now at " &lt;&lt; sc_time_stamp() &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_time t_DELAY(2, SC_MS); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>t_DELAY *= 2; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "Delaying " &lt;&lt; t_DELAY &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>wait(t_DELAY); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; "Now at " &lt;&lt; sc_time_stamp() &lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>11} </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>output: </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>Now at 10 ns </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>Delaying 4 ms </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;>Now at 4000010 ns </FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>Fig. 5.11<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of wait()</SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><FONT face=&#23435;&#20307;><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US>For the Fig. 5.12 example, we know that the simulation will not run for more than two simulated hours (or 7200 seconds) as implied from the line containing sc_start(7200, SC_SEC). The initial value of t will be between 0.000 and 7200000.000 since the resolution is in milliseconds. </SPAN><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US></SPAN></FONT></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-fareast-font-family: &#23435;&#20307;" lang=EN-US><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>1//FILE: main.cpp<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>2int sc_main(int argc, char *argv[])<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>// args unused<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>3{ </FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>4<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_set_time_resolution(1, SC_MS); </FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>5<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>basic_process_ex my_instance("my_instance"); </FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>6<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>sc_start(7200, SC_SEC); // Limit simulation to 2 hours (or 7200 secs.)<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>7<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>double t = sc_time_stamp(); //max is 7200 x 10**3<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>8<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>unsigned hours = int(t / 3600.0); </FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>9<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>t -= 3600.0 * hours; </FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR" lang=FR><FONT class=extract face=&#23435;&#20307;>10<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>unsigned minutes = int(t / 60.0); </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR" lang=FR><FONT class=extract face=&#23435;&#20307;>11<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>t -= 60.0 * minutes; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt; mso-ansi-language: FR" lang=FR><FONT class=extract face=&#23435;&#20307;>12<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>double seconds = t; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>13<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>cout &lt;&lt; hours &lt;&lt; " hours " </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>14<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; minutes &lt;&lt; " minutes " </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract>15<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; seconds &lt;&lt; " seconds" //to the nearest ms<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>16<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>&lt;&lt; endl; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>17<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>return 0; </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT class=extract face=&#23435;&#20307;>18} </FONT></SPAN></P>
<P><SPAN style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt" lang=EN-US><FONT face=&#23435;&#20307;><FONT class=extract>Fig. 5.12<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>Example of sc_time data type</FONT> </FONT></SPAN>