<H2 style="MARGIN: 12pt 0cm 6pt 28.8pt"><SPAN lang=EN-US style="FONT-SIZE: 20pt; mso-bidi-font-size: 14.0pt"><EM><FONT face=&#23435;&#20307;>15.1 # Introduction </FONT></EM></SPAN></H2>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>In the course of this book, we have covered the SystemC language and its many uses. We have explored the SystemC constructs that let us model hardware easily, including clocks, hardware data types, concurrency constructs, threads, etc. With this knowledge, you are equipped with the ability to construct a sophisticated system model and most of the features required to develop a robust testbench. There is an additional library, the SystemC Verification Library (SCV), which provides much of the features required to implement a robust reusable testbench without having to develop these on your own. This library is described in detail in the downloadable PDF document &#8220;SystemC Verification Standard Specification [Version 1.0b]&#8221; from &lt;www.systemc.org&gt;. Please note that the document references some aspects of SystemC that have changed from version 2.0.1 upon which it was originally based. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>The SCV library includes many add-on features to SystemC including data introspection, extended data types, random data types, transaction monitoring, and transaction recording. </FONT></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 12.0pt"><FONT face=&#23435;&#20307;>It is beyond the scope of this book to cover specific verification methodologies. We will, however, lightly touch on the topic of developing transaction-based verification and how this allows for higher levels of abstraction test cases, promotes reusable verification IP, and shortens the overall verification cycle. </FONT></SPAN>