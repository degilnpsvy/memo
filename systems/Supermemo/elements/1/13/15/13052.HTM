<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>5.4.&nbsp;MAL: MIPS Assembly Language</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;5.&nbsp;The MIPS Architecture</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s05.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="5.4.&nbsp;MAL: MIPS Assembly Language" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286958470></A>5.4.&nbsp;MAL: MIPS Assembly Language</H2></DIV></DIV></DIV>
<DIV class=section title="5.4.1.&nbsp;A Simple Example Program">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958475></A>5.4.1.&nbsp;A Simple Example Program</H3></DIV></DIV></DIV><PRE class=programlisting>	#########################################################################
	#   Description:
	#       Simple example program
	#
	#   Modification history:
	#   Date        Name        Modification
	#   2010-12-16  Jason Bacon Begin
	#########################################################################
	
	#########################################################################
	#   System call constants
	#########################################################################
	
	SYS_PRINT_STRING    =   4
	
	#########################################################################
	#   Main program
	#########################################################################
	
	# Variables for main
		.data
	main_hello: .asciiz "Hello, world!\n"
	
	# Main body
		.text
	main:
		li      $v0, SYS_PRINT_STRING
		la      $a0, main_hello
		syscall
		
		# Return to calling program
		jr      $ra
	</PRE></DIV>
<DIV class=section title="5.4.2.&nbsp;Memory Segments">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958485></A>5.4.2.&nbsp;Memory Segments</H3></DIV></DIV></DIV>
<P>In Von Neumann architectures, such as the MIPS, both the program (machine code) and data reside in the same memory while the program is running.</P>
<P>In MAL, we must mark each part of the program as text (code) or data using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>.text</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>.data</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives.</P><PRE class=programlisting>	# Main program
	
		.data
		# Variables for main
		
		.text
		# Main body
		
		ret
	</PRE>
<P>The .text segments can contain only instructions, while the .data segments contain only variable definitions.</P></DIV>
<DIV class=section title="5.4.3.&nbsp;MAL Instruction Format">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958513></A>5.4.3.&nbsp;MAL Instruction Format</H3></DIV></DIV></DIV>
<P>An instruction in MAL source code has the following structure:</P><PRE class=programlisting>	label:  opcode/directive    operand[, operand[, operand]]   # comment
	</PRE>
<P>MAL, like most assembly languages is line-oriented. With the exception of the label, most components of an instruction must be on the same line, and the end of the line marks the end of the instruction.</P></DIV>
<DIV class=section title=5.4.4.&nbsp;Comments>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958529></A>5.4.4.&nbsp;Comments</H3></DIV></DIV></DIV>
<P>A comment is anything from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=quote>&#8220;<SPAN class=quote>#</SPAN>&#8221;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the end of the line.</P><PRE class=programlisting>	# This is a comment
	</PRE>
<P>Block comments are simply formed from multiple line comments.</P><PRE class=programlisting>	###############################################################
	# This is a block comment
	###############################################################
	</PRE></DIV>
<DIV class=section title=5.4.5.&nbsp;Labels>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958551></A>5.4.5.&nbsp;Labels</H3></DIV></DIV></DIV>
<DIV class=note title=Note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>The label portion of a statement must begin in column 1 and must end with a ':'. The ':' is not part of the label. It only serves to visually distinguish a new label definition from other program elements.</DIV>
<P>Each label represents a memory address in assembly language. It could be the address of data or the address of an instruction (i.e. labels can appear in both .text and .data sections).</P>
<P>A label represents the address of the instruction or data element that immediately follows it, whether it follows on the same line or a subsequent line.</P>
<P>Labels defined in a .data section are like variable names in HLLs, and follow the same naming rules. They must begin with a letter or underscore, and can contains letters, underscores, and digits.</P>
<DIV class=caution title=Caution style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Caution</H3>
<P>Variable names cannot be keywords such as MAL opcodes.</P></DIV>
<P>Labels defined in a .text section represent the address of an instruction, and are used as arguments by jump and branch instructions to "go to" that instruction.</P></DIV>
<DIV class=section title=5.4.6.&nbsp;Directives>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958615></A>5.4.6.&nbsp;Directives</H3></DIV></DIV></DIV>
<P>See appendix A for full listing.</P>
<P>Directives do not represent machine instructions, hence they are not executed at run-time. They direct the assembler to do something while translating the program to machine language, such as allocate space for a variable and give it an initial value, which it will have when the program begins executing.</P>
<P>Directives in MAL can be distinguished from instructions by the fact that they begin with a '.'.</P>
<P>Directives must be indented (they cannot begin in column 1).</P>
<P>Data allocation directives are somewhat like variable definitions in high-level languages, but are not quite as meaningful. They usually, but not necessarily, follow a newly defined label (variable) and must be followed by one or more initial values.</P><PRE class=programlisting>		.data
	age:    .word   30      # 32-bit word initialized with decimal
	gpa:    .half   0x10    # 16-bit word initialized with hex
	nl:     .byte   012     # 8-bit word initialized with octal
		.align  2       # Aligns next element to multiple of 2^2
	height: .word   70
	gpa:    .float  3.65    # 32-bit floating point
	
	# Lookup-table for factorials
	fact:   .word   1, 1, 2, 6, 24, 120
	
	# Uninitialized space for a keyboard buffer
	keyb:   .space  1024    # 1 KB buffer
	
	# Null-terminated string
	hello:  .asciiz "Hello, world!\n"
	
	# Non-terminated string.  Not very useful unless followed
	# by a null-terminated string.
	bug:    .ascii  "This string is a time bomb without a null byte"
	
	bigmsg: .ascii  "This string is part of a longer message that"
		.asciiz "was too big to fit on a single line.\n"
		.text
	</PRE>
<DIV class=table><A name=data_directives></A>
<P class=title><B>Table&nbsp;5.4.&nbsp;Data Allocation Directives</B></P>
<DIV class=table-contents>
<TABLE summary="Data Allocation Directives" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Directive</TH>
<TH align=left>Type</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>.word</TD>
<TD align=left>32-bit integer</TD></TR>
<TR>
<TD align=left>.half</TD>
<TD align=left>16-bit integer</TD></TR>
<TR>
<TD align=left>.byte</TD>
<TD align=left>8-bit integer</TD></TR>
<TR>
<TD align=left>.float</TD>
<TD align=left>32-bit IEEE floating point</TD></TR>
<TR>
<TD align=left>.double</TD>
<TD align=left>64-bit IEEE floating point</TD></TR>
<TR>
<TD align=left>.space</TD>
<TD align=left>Uninitialized memory block</TD></TR>
<TR>
<TD align=left>.ascii</TD>
<TD align=left>ASCII string</TD></TR>
<TR>
<TD align=left>.asciiz</TD>
<TD align=left>Null-terminated ASCII string</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>These directives define the type of the value stored there, but only for the sake of converting the initial value(s) to the proper format. The data type is used only during processing of the initial value, and is ignored by the rest of the program.</P>
<P>Variables are added to the data segment in the order they appear in the assembly source. If the variable "age" above has address 4000, then gpa will be at 4004, and nl at 4006.</P>
<P>The two strings following the label bigmsg are contiguous in memory, and therefore can be treated as one string. This method works for any data type. If you want to define an array, and the initializer doesn't fit on one line, simply repeat the directive below without another label.</P><PRE class=programlisting>	# Array spread across multiple lines
	bigarray:   .word   4, 3, 1, 7, 9, 3, 6, 7, 2, 6
		    .word   8, 2, 5, 6, 0, 1, 1, 5, 8, 2
	</PRE>
<P>What will the address of height be?</P>
<DIV class=note title=Note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>Variable definition directives normally go on the same line as the label, regardless of how much indentation is required. All variable definitions within a block should use the same indentation.</P><PRE class=programlisting>	a_very_long_variable_name:  .word   0
	age:                        .word   0
	</PRE>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=xref title="Chapter&nbsp;7.&nbsp;Code Quality Standards" href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch07.html">Chapter&nbsp;7,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Code Quality Standards</I></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information.</DIV>
<P>A string defined with .ascii or .asciiz is an array of characters initialized using character literals and escape sequences such as '\n'. The .asciiz directive adds a null byte to the end of the string. For example, the following two directives are equivalent:</P><PRE class=programlisting>	string: .asciiz "Hello!\n"
	string: .byte   72,101,108,108,111,33,10,0
	</PRE>
<P>The .asciiz directive is an unnecessary convenience, since the following are equivalent:</P><PRE class=programlisting>	string: .asciiz "Hello!\n"
	string: .ascii  "Hello!\n\0"
	</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>.align num</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directive aligns the next variable on an address which is a multiple of 2<SUP>num</SUP>. Hence,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>.align 2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>aligns the next variable on an address which is a multiple of 4, which is known as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>word boundary</EM>. In the MIPS architecture, variables that occupy multiple bytes should not cross a word boundary. Doing so causes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>unaligned memory reference</EM>, which may be an error, or may slow down memory access, depending on the details of the access.</P>
<P>Hence, .word variables should always start on a word boundary, and .half variables should start on an address that is a multiple of 2. .double variables require 8 bytes, and therefore must cross a word boundary. However, they should always start on a word boundary so that they don't cross multiple word boundaries.</P></DIV>
<DIV class=section title=5.4.7.&nbsp;Constants>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958852></A>5.4.7.&nbsp;Constants</H3></DIV></DIV></DIV>
<P>Numeric constants in MAL use the same syntax as C, C++, and Java.</P><PRE class=programlisting>	0x100   Hexadecimal integer
	0100    Octal integer
	100     Decimal integer
	1.0     Decimal float or double
	</PRE>
<P>Labels can also be used as numeric constants, in which case their value is the memory address they represent. Suppose again that the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>age</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>resides at memory address 4000:</P><PRE class=programlisting>		.data
	age:    .word   30      # 32-bit word initialized with decimal
	gpa:    .half   0x10    # 16-bit word initialized with hex
	nl:     .byte   012     # 8-bit word initialized with octal
	ptr:    .word   age     # Same as .word 4000
	</PRE>
<P>The variable ptr initially contains the address of age.</P>
<P>SPIM has the ability to define integer constants, which can be used as immediate operands:</P><PRE class=programlisting>	ISO_LF = 10
	
		li  $v0, ISO_LF     # Same as li    $v0, 10
	</PRE>
<P>With very few exceptions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>every</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>constant used in a program should be given a name. This has two effects:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>
<P>It makes the program easier to read. Consider the following two statements, which are equivalent:</P><PRE class=programlisting>	    li      $v0, ISO_LF
	    li      $v0, 10
	    </PRE>
<P>The name ISO_LF tells the reader the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>purpose</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of loading this value into $v0. The constant 10 leaves the reader wondering, unless they study the surrounding code and decipher what it's doing. A programmer will look at hundreds or thousands of such statements in a typical day, so the ability to understand them quickly and easily is paramount. Even 10 seconds examining code is too long. Make it obvious at a glance whenever possible.</P></LI>
<LI class=listitem>
<P>Naming constants makes it easy and safe to change them. Suppose we use the constant 5.25, which represents the state sales tax rate, in several places in the program. If a law is passed changing the tax rate, we will have to carefully go through the code and change all of them.</P>
<P>We cannot simply change every occurrence of 5.25, because some of them might not represent the tax rate. We must carefully examine each one and decide whether to change it. This is a lot of work, and a great opportunity to introduce bugs into the code.</P>
<P>If, instead, we define a constant called STATE_TAX and use this throughout the program instead, then our code is more readable, and only ONE change to the code is necessary if the tax rate changes.</P></LI></UL></DIV></DIV>
<DIV class=section title=5.4.8.&nbsp;Instructions>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958995></A>5.4.8.&nbsp;Instructions</H3></DIV></DIV></DIV>
<P>The complete MAL instruction set is shown in Appendix C and Appendix D.</P>
<DIV class=note title=Note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>All instructions must be indented. A single tab (column 8) is typical for opcodes and directives. These are normally placed below labels to avoid excessive indentation of code, and leave room for comments to the right of the instruction.</P><PRE class=programlisting>	a_long_label:
		addi    $t0, $t5, $s2   # $t0 = $t5 + $s2
	</PRE></DIV>
<P>By convention, the first operand is the destination for MAL instructions. This makes the operands appear in the same order they would in a HLL assignment statement. A small number of instructions, such as the store instructions, violate this convention.</P>
<DIV class=section title="Integer Arithmetic and Logic Instructions">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959016></A>Integer Arithmetic and Logic Instructions</H4></DIV></DIV></DIV>
<P>Below are some sample integer arithmetic instructions. Most of these instructions can only use CPU registers for operands (source and destination). A few instructions take one immediate value as a source operand.</P>
<P>In any case, arithmetic instructions such as add, sub, mul, etc. assume that the register contains a binary integer (either unsigned or two's complement).</P>
<P>Logic instructions such as and, or, xor, etc. treat the register contents as independent bits, so the binary encoding is irrelevant to the instruction.</P><PRE class=programlisting>	    add     $t0, $t1, $t2   # $t0 = $t1 + $t2   Exception for signed overflow
	    addu    $t0, $t1, $t2   # $t0 = $t1 + $t2   No exception
	    sub     $s0, $s0, $t4   # $s0 = $s0 - $t4
	    mul     $t0, $a0, $s3   # $t0 = $a0 * $s3
	    move    $t0, $a0        # $t0 = $a0
	    addi    $t0, $t2, 4     # $t0 = $t2 + 4
	    
	    ori     $t0, $t0, 0x000000ff    # Set rightmost 8 bits to 1
	    andi    $t0, $t0, 0xffff0000    # Clear rightmost 16 bits
	    </PRE></DIV>
<DIV class=section title="Integer Load and Store Instructions">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959070></A>Integer Load and Store Instructions</H4></DIV></DIV></DIV>
<P>Load and store instructions are the only instructions that can access memory. Their purpose is to move data between a memory location and a CPU register. They are not interchangeable with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>move</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</P>
<P>Load and store instructions take one register operand and one memory address or immediate operand.</P><PRE class=programlisting>	    lw      $t0, label  # Load 32-bit word at label to $t0
	    lb      $t0, label  # Load sign-extended byte at label to $t0
	    lbu     $t0, label  # Load 0-extended byte at label to $t0
	    lh      $t0, label  # Load sign-extended halfword (16 bits)
	    lhu     $t0, label  # Load 0-extended halfword (16 bits)
	    li      $t0, value  # Load 32-bit constant to $t0
				# Pseudo-instruction for lui + ori
				# Immediate values are 16 bits!
				# Same syntax as C/C++/Java for bases.
	    la      $t0, label  # Load ADDRESS of label
	    sw      $t0, label  # The only instruction that has destination last!
	    </PRE></DIV>
<DIV class=section title="Jump and Branch Instructions">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959091></A>Jump and Branch Instructions</H4></DIV></DIV></DIV>
<P>Jump and branch instructions take an address within a .text segment as the target address. Conditional branch instructions also take two register operands to compare.</P><PRE class=programlisting>	    j       label           # Unconditional jump
	    beq     $t0, $t4, label # Branch if $t0 == $t4
	    blt     $s4, $a0, label # Branch if $s4 &lt; $a0
	    </PRE></DIV>
<DIV class=section title="Floating Point Instructions">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959104></A>Floating Point Instructions</H4></DIV></DIV></DIV>
<DIV class=caution title=Caution style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Caution</H3>Britton's book lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>mdc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the instruction to move a value from coprocessor 1, while the correct instruction in SPIM is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>mfc1</CODE>. It also shows both single and double store instructions as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>s.d</CODE>, whereas the single should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>s.s</CODE>.</DIV>
<P>Floating point operations are carried out by a separate set of instructions and operate on a separate register file, all of which are part of the floating point coprocessor (an extension to the base CPU).</P>
<P>There are single precision instructions, which end in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=quote>&#8220;<SPAN class=quote>.s</SPAN>&#8221;</SPAN>, and double precision instructions which end in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=quote>&#8220;<SPAN class=quote>.d</SPAN>&#8221;</SPAN>.</P>
<P>The MIPS floating point coprocessor has 32 32-bit registers, called $f0 through $f31.</P>
<P>Double precision instructions use pairs of adjacent registers such as $f0 and $f1, $f2 and $f3, etc. Therefore, the arguments to double precision instructions must be even-numbered registers. The odd-numbered register that follows is assumed to be the other half of the operand.</P><PRE class=programlisting>	    .data
    x:      .double 1.0
    y:      .float  2.5
    
	    .text
	    l.d     $f0, x          # $f0,$f1 &#8592; x
	    l.d     $f1, x          # Error!  Must use even registers with double
	    l.s     $f1, y          # $f1 &#8592; y
	    
	    add.s   $f0, $f1, $f7   # $f0 &#8592; $f1 + $f7
	    add.d   $f0, $f2, $f6   # $f0,$f1 &#8592; $f2,$f3 + $f6,$f7
	    </PRE><PRE class=programlisting>	    c.lt.d  $f0, $f4        # if $f0,$f1 &lt; $f4,$f5 then
				    #   condition flag &#8592; true
				    # else
				    #   condition flag &#8592; false
	    bc1t    label           # Branch if condition flag is true
	    bc1f    label           # Branch if condition flag is false
	    </PRE>
<P>Data type conversions involve two kinds of instructions:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>Conversion instructions change the binary format of the data<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>within the floating point coprocessor</EM></SPAN>. Conversion instructions support converting between word (32-bit two's complement), single (32-bit IEEE floating point), and double (64-bit IEEE floating point). Hence, a floating point register, at any given moment, may contain an integer, a single precision floating point value, or half of a double precision floating point value. It is the programmer's responsibility to keep track!</LI>
<LI class=listitem>Transfer instructions for moving data between the floating point coprocessor registers ($f0, $f1, ...) and either CPU registers ($t0, $s3, $a1, ...) or memory.</LI></OL></DIV><PRE class=programlisting>	    # Convert integer to double
	    mtc1    $t0, $f0        # $f0 &#8592; $t0 (no format change!)
				    # $f0 now contains an integer!
	    cvt.d.w $f0, $f0        # $f0,$f1 &#8592; (double)$f0
	    
	    # Another way to convert integer to double
	    lwc1    $f5, intvar     # Load integer into $f5 (no format change!)
	    cvt.d.w $f0, $f5        # $f0,$f1 &#8592; (double)$f5
	    
	    # Another way to convert integer to double
	    # Note that load and store instructions are oblivious to
	    # the binary data format (they only need to know how many bits
	    # to transfer).  Hence, l.s (load single) does the same
	    # thing as lwc1 (load word to coprocessor 1).  The following
	    # will work, but is misleading.  Using lwc1 is better
	    # self-documentation.
	    l.s     $f5, intvar     # Load integer into $f5 (no format change!)
	    cvt.d.w $f0, $f5        # $f0,$f1 &#8592; (double)$f5
	    
	    # Convert double to integer
	    cvt.w.d $f3, $f4        # $f3 &#8592; (int)$f4,$f5
				    # $f3 now contains an integer!
	    mfc1    $t0, $f3        # $t0 &#8592; $f3 (no format change!)

	    # Another way to convert double to integer
	    cvt.w.d $f3, $f4        # $f3 &#8592; (int)$f4,$f5
				    # $f3 now contains an integer!
	    swc1    $f3, intvar     # Store integer from $f3 to mem
	    
	    # Convert single precision to double precision
	    cvt.d.s $f0, $f3        # $f0,$f1 &#8592; (double)$f3
	    </PRE></DIV>
<DIV class=section title="Data Types">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959173></A>Data Types</H4></DIV></DIV></DIV>
<P>Assembly language is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>typeless</EM></SPAN>. This means data type is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>instruction</EM></SPAN>, not the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>variable</EM></SPAN>. The type (.word, .half, .byte) used to define the variable only tells the assembler how much memory to allocate, and to what binary format to convert the initial values in the directive. It has no impact on any other part of the program.</P>
<P>Machine instructions are aware only of the location of an operand by the instruction code, and they assume the binary data format. For example, and "add" instruction assumes all operands are binary integers in either unsigned or two's complement format, and it is the programmer's responsibility to ensure that integer data is stored in them. Likewise, an "add.s" instruction assumes that operands are 32-bit floating point values.</P><PRE class=programlisting>		    .data
	    # Allocate 32 bits and store 3.5 there in floating point format.
	    gpa:    .float  3.5
	    
		    .text
		    lw      $a0, gpa        # Copies 32 bits, format is irrelevant
		    addi    $a0, $a0, 1     # Treats $a0 as an integer!
	    </PRE>
<P>The value 3.5 is stored in IEEE floating point format, which contains a sign bit, an 8-bit bias-127 exponent, and a 23-bit fractional binary mantissa. The IEEE binary encoding of 3.5 looks like this:</P><PRE class=screen>	    01000000011000000000000000000000
	    </PRE>
<P>Naturally, taking this 32-bit package and interpreting it as an integer is going to produce garbage. In fact, the decimal value when viewed as an integer is 1080033280. Adding one to it yields 01000000011000000000000000000001, which is 1080033281 if viewed as an integer, or 3.500000238 if viewed as IEEE floating point.</P></DIV>
<DIV class=section title=Pseudo-instructions>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286959209></A>Pseudo-instructions</H4></DIV></DIV></DIV>
<P>Some MAL instructions do not correspond to real machine instructions. This is one of the minor benefits of assembly language over machine language. These instructions are known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>pseudo instructions</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>macro instructions</EM>.</P><PRE class=programlisting>	    move    $t0, $t1        # addi  $t0, $zero, $t1
	    
	    li      $t0, 50         # ori   $t0, $zero, 50
	    
	    la      $t0, label      # lui   $at, upper 16 bits of address
				    # ori   $t0, $at, lower 16 bits of address
				    
	    mul     $s0, $a0, $t4   # mult  $a0, $t4
				    # mflo  $s0
				    # High word is discarded!
	    </PRE>
<P>The mul and div instructions in MAL are pseudo-instructions with limited capability. The product of two 32-bit values can require up to 64 bits, so a mul instruction cannot always capture the complete result. The MIPS uses special registers for multiplication and division.</P><PRE class=programlisting>	    mult    $a1, $s1    # Stores results in "high" and "low" registers
	    mfhi    $v0         # Move low 32 bits to $v0
	    mflo    $v1         # Move high 32 bits to $v1
	    
	    div     $a1, $s1    # Stores quotient in 
	    mflo    $v0         # Quotient
	    mfhi    $v1         # Remainder
	    </PRE></DIV></DIV>
<DIV class=section title="5.4.9.&nbsp;Input/Output: System Calls">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286959236></A>5.4.9.&nbsp;Input/Output: System Calls</H3></DIV></DIV></DIV>
<P>Input and output in SPIM is performed by system calls, which are calls to operating system kernel subprograms. To initiate a system call, we load the system call function code into $v0. If the function requires arguments, they go into the argument registers, starting with $a0. The system call function codes are as follows:</P>
<DIV class=table><A name=id286959244></A>
<P class=title><B>Table&nbsp;5.5.&nbsp;Syscall Codes</B></P>
<DIV class=table-contents>
<TABLE summary="Syscall Codes" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Function</TH>
<TH align=left>Code in $v0</TH>
<TH align=left>Argument or Return Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>PRINT_INT</TD>
<TD align=left>1</TD>
<TD align=left>$a0 = value</TD></TR>
<TR>
<TD align=left>PRINT_FLOAT</TD>
<TD align=left>2</TD>
<TD align=left>$f12 = value</TD></TR>
<TR>
<TD align=left>PRINT_DOUBLE</TD>
<TD align=left>3</TD>
<TD align=left>$f12 = value</TD></TR>
<TR>
<TD align=left>PRINT_STRING</TD>
<TD align=left>4</TD>
<TD align=left>$a0 = address of string</TD></TR>
<TR>
<TD align=left>READ_INT</TD>
<TD align=left>5</TD>
<TD align=left>Result placed in $v0</TD></TR>
<TR>
<TD align=left>READ_FLOAT</TD>
<TD align=left>6</TD>
<TD align=left>Result placed in $f0</TD></TR>
<TR>
<TD align=left>READ_DOUBLE</TD>
<TD align=left>7</TD>
<TD align=left>Result placed in $f0</TD></TR>
<TR>
<TD align=left>READ_STRING</TD>
<TD align=left>8</TD>
<TD align=left>$a0 = address, $a1 = maximum length</TD></TR>
<TR>
<TD align=left>SBRK (Mem allocate)</TD>
<TD align=left>9</TD>
<TD align=left>$a0 = number of bytes</TD></TR>
<TR>
<TD align=left>EXIT</TD>
<TD align=left>10</TD>
<TD align=left>None</TD></TR>
<TR>
<TD align=left>PRINT_CHAR</TD>
<TD align=left>11</TD>
<TD align=left>$a0 low byte = character</TD></TR>
<TR>
<TD align=left>READ_CHAR</TD>
<TD align=left>12</TD>
<TD align=left>Character returned in low byte of $v0</TD></TR>
<TR>
<TD align=left>OPEN_FILE</TD>
<TD align=left>13</TD>
<TD align=left>$a0 = address of filename, $a1 = flags, $a2 = mode. File descriptor returned in $v0. (negative if error occurred)</TD></TR>
<TR>
<TD align=left>READ</TD>
<TD align=left>14</TD>
<TD align=left>$a0 = file descriptor, $a1 = address of buffer, $a2 = buffer length. Number of characters actually read returned in $v0.</TD></TR>
<TR>
<TD align=left>WRITE</TD>
<TD align=left>15</TD>
<TD align=left>$a0 = file descriptor, $a1 = address of buffer, $a2 = number of bytes to write. Number of bytes actually written returned in $v0.</TD></TR>
<TR>
<TD align=left>CLOSE</TD>
<TD align=left>16</TD>
<TD align=left>$a0 = file descriptor</TD></TR>
<TR>
<TD align=left>EXIT2</TD>
<TD align=left>17</TD>
<TD align=left>$a0 = exit code</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<DIV class=note title=Note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>The system call facility in SPIM is poorly implemented. They do not provide any error indication for bad input, so there is no way of knowing where a user entered valid data. In addition, many of the system calls should not be system calls to begin with, but would be better handled as user-level subprograms.</P></DIV>
<DIV class=caution title=Caution style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Caution</H3>Note that the syscall instruction calls a subprogram, and subprograms are not obligated to restore the values of temporary registers. Hence, you cannot assume that the contents of temporary registers will be the same following a syscall.</DIV></DIV>
<DIV class=section title="5.4.10.&nbsp;A Complete Example Program">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286959513></A>5.4.10.&nbsp;A Complete Example Program</H3></DIV></DIV></DIV><PRE class=programlisting>#########################################################################
#   Description:
#
#   Modification history:
#   Date        Name        Modification
#   2010-12-16  Jason Bacon Begin
#########################################################################

#########################################################################
#   System call constants
#########################################################################

SYS_PRINT_INT       =   1
SYS_PRINT_FLOAT     =   2
SYS_PRINT_DOUBLE    =   3
SYS_PRINT_STRING    =   4
SYS_READ_INT        =   5
SYS_READ_FLOAT      =   6
SYS_READ_DOUBLE     =   7
SYS_READ_STRING     =   8
SYS_SBRK            =   9
SYS_EXIT            =   10
SYS_PRINT_CHAR      =   11
SYS_READ_CHAR       =   12

#########################################################################
#   Main program
#########################################################################

# Variables for main
	.data
	.align 2    # Put next label on a word boundary
length:         .word   0
width:          .word   0
area:           .word   0

length_prompt:  .asciiz "Please enter the length of the rectangle: "
width_prompt:   .asciiz "Please enter the width of the rectangle: "
area_msg:       .asciiz "The area of the rectangle is "
period_nl:      .asciiz ".\n"

# Main body
	.text
main:
	# Input length
	li      $v0, SYS_PRINT_STRING
	la      $a0, length_prompt
	syscall
	
	li      $v0, SYS_READ_INT
	syscall
	sw      $v0, length
	
	# Input width
	li      $v0, SYS_PRINT_STRING
	la      $a0, width_prompt
	syscall
	
	li      $v0, SYS_READ_INT
	syscall
	sw      $v0, width
	
	# Compute area
	lw      $t0, length
	lw      $t1, width
	mul     $t0, $t0, $t1
	sw      $t0, area
	
	# Print area
	li      $v0, SYS_PRINT_STRING
	la      $a0, area_msg
	syscall
	
	li      $v0, SYS_PRINT_INT
	lw      $a0, area
	syscall
	
	li      $v0, SYS_PRINT_STRING
	la      $a0, period_nl
	syscall
	
	# Return to calling program
	jr      $ra
	</PRE></DIV>
<DIV class=section title="5.4.11.&nbsp;Addressing Modes">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286959523></A>5.4.11.&nbsp;Addressing Modes</H3></DIV></DIV></DIV>
<P>An addressing mode is simply a way of specifying a memory address. MAL offers several addressing modes for use in load and store instructions.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>effective address</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286959537></A>is the actual address of the data. Understanding addressing modes is a matter of understanding how effective addresses are calculated.</P>
<DIV class=table><A name=addressing_modes></A>
<P class=title><B>Table&nbsp;5.6.&nbsp;Addressing Modes</B></P>
<DIV class=table-contents>
<TABLE summary="Addressing Modes" border=1>
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Mode</TH>
<TH align=left>Example</TH>
<TH align=left>Effective address</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>Memory Direct</TD>
<TD align=left>lw $t0, age</TD>
<TD align=left>Address represented by label</TD></TR>
<TR>
<TD align=left>Register Indirect</TD>
<TD align=left>lw $t0, ($s3)</TD>
<TD align=left>Contents of register in ()</TD></TR>
<TR>
<TD align=left>Immediate Offset</TD>
<TD align=left>lw $t0, 4($s3)</TD>
<TD align=left>Contents of register in () + offset</TD></TR>
<TR>
<TD align=left>Symbol Offset</TD>
<TD align=left>lw $t0, list($s3)</TD>
<TD align=left>Contents of register in () + address of label</TD></TR>
<TR>
<TD align=left>Symbol + Immediate</TD>
<TD align=left>lw $t0, list+4</TD>
<TD align=left>Address of label + offset</TD></TR>
<TR>
<TD align=left>Symbol + Immediate Offset</TD>
<TD align=left>lw $t0, list+4($s3)</TD>
<TD align=left>Address of label + offset + contents of register in ()</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>Immediate addressing can also be considered an addressing mode, but it is special in that it doesn't specify an address, but instead embeds the operand in the instruction code itself.</P>
<P>Examples:</P><PRE class=programlisting>	Assume $t0 contains 1000
	Address of "list" is 2000
	
	lw  $a0, ($t0)          $a0 &#8592; contents of address 1000
	lw  $a0, 4($t0)         $a0 &#8592; contents of address 1004
	lw  $a0, list           $a0 &#8592; contents of address 2000
	la  $a0, list           $a0 &#8592; 2000
	lw  $a0, list+4         $a0 &#8592; contents of address 2004
	lw  $a0, list($t0)      $a0 &#8592; contents of address 3000
	lw  $a0, list+4($t0)    $a0 &#8592; contents of address 3004
	li  $a0, 5              $a0 &#8592; 5
	</PRE>
<P>Interestingly, only "base address plus displacement" (a.k.a. offset) mode is actually implemented in the MIPS hardware. The assembler (or simulator) translates all other modes into offset mode. For example, since the assembler knows the address of every label, it can easily perform additions such as "list+4". Direct addressing such as "age" can be represented as age($zero).</P>
<P>This illustrates some of the advantages of assembly language over machine language, besides just being mnemonic.</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s05.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">5.3.&nbsp;The MIPS Register Files&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;5.5.&nbsp;Architecture Classifications</TD></TR></TBODY></TABLE></DIV>