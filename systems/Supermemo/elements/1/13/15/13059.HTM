<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>6.3.&nbsp;Using SPIM</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch06s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;6.&nbsp;SPIM, the MIPS Simulator</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch06s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="6.3.&nbsp;Using SPIM" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286960780></A>6.3.&nbsp;Using SPIM</H2></DIV></DIV></DIV>
<P>SPIM is an assembly language interpreter. Hence, we do not need to assemble the source code to machine language before running it. This is somewhat unfortunate for students, as they miss out on learning about machine language and object file format. C'est la vie...</P>
<P>As such, programs run in SPIM are far slower than programs run natively on a MIPS processor. ( The SPIM slogan is "1/25 the speed for none of the price" )</P>
<P>However, we do have a preprocessor for performing includes and expanding macros before handing the code to SPIM. These features are discussed later.</P>
<DIV class=section title="6.3.1.&nbsp;APP, the Assembly Preprocessor">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286960790></A>6.3.1.&nbsp;APP, the Assembly Preprocessor</H3></DIV></DIV></DIV>
<P>In addition to the SPIM simulator, we have a preprocessor called APP (Assembly PreProcessor) that gives the MAL programmer some additional capabilities not supported by SPIM:</P>
<DIV class=section title=Macros>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286960795></A>Macros</H4></DIV></DIV></DIV>
<P>Using APP, the MAL programmer can create and use assembly language<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>macros</EM>, which are analogous to small subprograms. (the difference is explained in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=xref title="Chapter&nbsp;10.&nbsp;Subprogram Calls and the Stack" href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10.html">Chapter&nbsp;10,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Subprogram Calls and the Stack</I></A>.) These should not be confused with other kinds of macros, such as the editor macros supported by APE.</P><PRE class=programlisting>		# Push contents of a register
		.macro  push($register)
		sw      $register, ($sp)
		addi    $sp, $sp, -4
		.end_macro
		
		...
		
		push($s0)
		</PRE></DIV>
<DIV class=section title=Includes>
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A name=id286960811></A>Includes</H4></DIV></DIV></DIV>
<P>Using APP's .include directive, we can automatically insert commonly used MAL code into a program, without having to look at it all the time. This can be especially useful for common constants and macros.</P><PRE class=programlisting>		.include "macros.mal"
		.include "iso_chars.mal"
		</PRE></DIV></DIV>
<DIV class=section title="6.3.2.&nbsp;Programming the Primitive Way">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286960820></A>6.3.2.&nbsp;Programming the Primitive Way</H3></DIV></DIV></DIV>
<P>This section outlines the steps for running MAL assembly language code. Performing these steps manually is not an intelligent way to program, but it is important to understand what the steps are, and describing them in a familiar way will help.</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>
<P>Write MAL code in a text editor.</P></LI>
<LI class=listitem>
<P>Preprocess the code if necessary. (This is necessary when using macros or includes in the code.)</P></LI>
<LI class=listitem>
<P>Run the code in SPIM.</P><PRE class=screen>	    miller: pico prog.mal
	    miller: app prog.mal &gt; prog.out
	    miller: spim -file prog.out
	    </PRE></LI></OL></DIV></DIV>
<DIV class=section title="6.3.3.&nbsp;Programming the Modern Way">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286960839></A>6.3.3.&nbsp;Programming the Modern Way</H3></DIV></DIV></DIV>
<P>Programming with a minimalist text editor like pico is OK for a first semester programming course, but students should learn to use an Integrated Development Environment (IDE) as soon as possible. It is not possible to be productive with tools as primitive as pico. An integrated development environment allows you to edit, compile, and test without ever leaving the editor. It allows you to edit multiple files at the same time, and provides access to many other useful programming tools.</P>
<P>For CS 315, we use APE (Another Programmer's Editor), which can be run on miller/weise in a regular terminal window, and is preconfigured for running MAL programs.</P>
<P>There are many other IDEs available, most of which have a GUI (Graphical User Interface). Unfortunately, GUI applications are inconvenient to use remotely, and very slow over a typical home Internet connection. APE, on the other hand, can be used in a PuTTY window over a slow network with no discernible difference from its behavior in the computer labs on campus.</P><PRE class=screen>	    miller: ape prog01.mal
	    </PRE>
<P>You can run your program from APE via the Build menu. APE will run the preprocessor (app) and SPIM for you using reasonable default command-line flags. You can change the commands via the Options menu if necessary.</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch06s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch06.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch06s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">6.2.&nbsp;The Normal Assembly Process&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;6.4.&nbsp;SPIM Features</TD></TR></TBODY></TABLE></DIV>