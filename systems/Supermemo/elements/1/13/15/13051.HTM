<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>5.3.&nbsp;The MIPS Register Files</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;5.&nbsp;The MIPS Architecture</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="5.3.&nbsp;The MIPS Register Files" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=mips_regs></A>5.3.&nbsp;The MIPS Register Files</H2></DIV></DIV></DIV>
<P>Although called a "file", a register file is not related to disk files. A register file is a small set of high-speed storage cells inside the CPU. There are special-purpose registers such as the IR and PC, and also general-purpose registers for storing operands of instructions such as add, sub, mul, etc.</P>
<P>A CPU register can generally be accessed in a single clock cycle, whereas main memory may require dozens of CPU clock cycles to read or write.</P>
<P>Since there are very few registers compared to memory cells, registers also require far fewer bits to specify which register to use. This in turn allows for smaller instruction codes.</P>
<P>For example, the MIPS processor has 32 general-purpose registers, so it takes 5 bits to specify which one to use. In contrast, the MIPS has a 4 gibibyte memory capacity, so it takes 32 bits to specify which memory cell to use. An instruction with 3 operands will require 15 bits if they are all registers, and 96 bits if they are all memory addresses.</P>
<P>MIPS is a load-store architecture, which means that only load and store instructions can access memory. All other instructions (add, sub, mul, div, and, or, etc.) must get their operands from registers and store their results in a register.</P>
<P>Suppose x, y, and sum are variables in a program, and we want to translate the following statement to MAL:</P><PRE class=programlisting>    sum = x + y
    </PRE>
<P>Since variables represent memory locations, the MIPS processor can only use them in load and store instructions. The values must be first loaded into CPU registers using load instructions. We can then add the values in the CPU registers using an add instruction, which must also put the result in a register. Finally, we must use a store instruction to place the result in the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>sum</CODE>.</P><PRE class=programlisting>    # sum = x + y
    lw      $t0, x          # Load x from memory into a CPU register
    lw      $t1, y          # Load y from memory into a CPU register
    add     $t0, $t0, $t1   # Add x and y
    sw      $t0, sum        # Store the result from the CPU register to memory
    </PRE>
<P>The MIPS processor has one standard register file containing 32 32-bit registers for use by integer and logic instructions. These registers are called $0 through $31.<A class=xref title="Table&nbsp;5.3.&nbsp;MIPS Registers" href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html#mips_regs_convention">Table&nbsp;5.3, &#8220;MIPS Registers&#8221;</A>.</P>
<P>The MIPS processor has a separate register file for floating point instructions, which contains another 32 32-bit registers called $f0 through $f31.</P>
<P>MIPS assembly language employs a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>convention</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>for use of registers. This convention is not enforced by the assembler or the hardware, but it<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>must</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>be followed by all MIPS assembly language programmers in order to avoid unexpected behavior of modules written by different people.</P>
<DIV class=table><A name=mips_regs_convention></A>
<P class=title><B>Table&nbsp;5.3.&nbsp;MIPS Registers</B></P>
<DIV class=table-contents>
<TABLE summary="MIPS Registers" border=1>
<COLGROUP>
<COL>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Register Number</TH>
<TH align=left>Conventional Name</TH>
<TH align=left>Usage</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>$0</TD>
<TD align=left>$zero</TD>
<TD align=left>Hard-wired to 0</TD></TR>
<TR>
<TD align=left>$1</TD>
<TD align=left>$at</TD>
<TD align=left>Reserved for pseudo-instructions</TD></TR>
<TR>
<TD align=left>$2 - $3</TD>
<TD align=left>$v0, $v1</TD>
<TD align=left>Return values from functions</TD></TR>
<TR>
<TD align=left>$4 - $7</TD>
<TD align=left>$a0 - $a3</TD>
<TD align=left>Arguments to functions - not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$8 - $15</TD>
<TD align=left>$t0 - $t7</TD>
<TD align=left>Temporary data, not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$16 - $23</TD>
<TD align=left>$s0 - $s7</TD>
<TD align=left>Saved registers, preserved by subprograms</TD></TR>
<TR>
<TD align=left>$24 - $25</TD>
<TD align=left>$t8 - $t9</TD>
<TD align=left>More temporary registers, not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$26 - $27</TD>
<TD align=left>$k0 - $k1</TD>
<TD align=left>Reserved for kernel. Do not use.</TD></TR>
<TR>
<TD align=left>$28</TD>
<TD align=left>$gp</TD>
<TD align=left>Global Area Pointer (base of global data segment)</TD></TR>
<TR>
<TD align=left>$29</TD>
<TD align=left>$sp</TD>
<TD align=left>Stack Pointer</TD></TR>
<TR>
<TD align=left>$30</TD>
<TD align=left>$fp</TD>
<TD align=left>Frame Pointer</TD></TR>
<TR>
<TD align=left>$31</TD>
<TD align=left>$ra</TD>
<TD align=left>Return Address</TD></TR>
<TR>
<TD align=left>$f0 - $f3</TD>
<TD align=left>-</TD>
<TD align=left>Floating point return values</TD></TR>
<TR>
<TD align=left>$f4 - $f10</TD>
<TD align=left>-</TD>
<TD align=left>Temporary registers, not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$f12 - $f14</TD>
<TD align=left>-</TD>
<TD align=left>First two arguments to subprograms, not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$f16 - $f18</TD>
<TD align=left>-</TD>
<TD align=left>More temporary registers, not preserved by subprograms</TD></TR>
<TR>
<TD align=left>$f20 - $f31</TD>
<TD align=left>-</TD>
<TD align=left>Saved registers, preserved by subprograms</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">5.2.&nbsp;Hardware and Program Execution&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;5.4.&nbsp;MAL: MIPS Assembly Language</TD></TR></TBODY></TABLE></DIV>