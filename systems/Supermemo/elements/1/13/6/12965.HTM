<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Programming in Scala, First Edition</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<H1 style="FONT-WEIGHT: normal; FONT-SIZE: 28px"><A name=TOC>Table of Contents</A></H1>
<DIV id=toc><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/index.html#TOC">Table of Contents</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/index.html#front1">Foreword</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/index.html#front2">Acknowledgments</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/index.html#front3">Introduction</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/a-scalable-language.html">1. A Scalable Language</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html">2. First Steps in Scala</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/next-steps-in-scala.html">3. Next Steps in Scala</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html">4. Classes and Objects</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/basic-types-and-operations.html">5. Basic Types and Operations</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html">6. Functional Objects</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html">7. Built-in Control Structures</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functions-and-closures.html">8. Functions and Closures</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/control-abstraction.html">9. Control Abstraction</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html">10. Composition and Inheritance</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/scalas-hierarchy.html">11. Scala's Hierarchy</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/traits.html">12. Traits</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/packages-and-imports.html">13. Packages and Imports</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html">14. Assertions and Unit Testing</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html">15. Case Classes and Pattern Matching</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-lists.html">16. Working with Lists</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/collections.html">17. Collections</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/stateful-objects.html">18. Stateful Objects</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/type-parameterization.html">19. Type Parameterization</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/abstract-members.html">20. Abstract Members</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implicit-conversions-and-parameters.html">21. Implicit Conversions and Parameters</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implementing-lists.html">22. Implementing Lists</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/for-expressions-revisited.html">23. For Expressions Revisited</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/extractors.html">24. Extractors</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html">25. Annotations</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-xml.html">26. Working with XML</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html">27. Modular Programming Using Objects</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/object-equality.html">28. Object Equality</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html">29. Combining Scala and Java</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/actors-and-concurrency.html">30. Actors and Concurrency</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combinator-parsing.html">31. Combinator Parsing</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html">32. GUI Programming</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/the-scells-spreadsheet.html">33. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SCells</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>Spreadsheet</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/scala-scripts-on-unix-and-windows.html">A. Scala scripts on Unix and Windows</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#glossaryanchor">Glossary</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/bibliography.html#biblioanchor">Bibliography</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/about-the-authors.html">About the Authors</A><BR><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/book-index.html#indexanchor">Index</A><BR></DIV>
<P><A name=tocpage></A></P>
<H2 style="FONT-WEIGHT: normal; FONT-SIZE: 24px"><A name=front1></A></H2>
<H1 style="FONT-WEIGHT: normal; FONT-SIZE: 28px">Foreword</H1>
<P>Martin Odersky made a huge impact on the Java world with his design of the Pizza language.<A id=i-1058604016-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Although Pizza itself never became popular, it demonstrated that object-oriented and functional language features, when combined with skill and taste, form a natural and powerful combination. Pizza's design became the basis for generics in Java, and Martin's GJ (Generic Java) compiler was Sun Microsystem's standard compiler starting in 1.3 (though with generics disabled). I had the pleasure of maintaining this compiler for a number of years, so I can report from first-hand experience that Martin's skill in language design extends to language implementation.</P>
<P>Since that time, we at Sun tried to simplify program development by extending the language with piecemeal solutions to particular problems, like the for-each loop, enums, and autoboxing. Meanwhile, Martin continued his work on more powerful orthogonal language primitives that allow programmers to provide solutions in libraries.</P>
<P>Lately, there has been a backlash against statically typed languages.<A id=i716433724-1></A><A id=i2012339474-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Experience with Java has shown that programming in a static language results in an abundance of boilerplate. The common wisdom is that one must abandon static typing to eliminate the boilerplate, and there is a rising interest in dynamic languages such as Python,<A id=i-1190645252-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Ruby,<A id=i-1999895874-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and Groovy.<A id=i-2114578678-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This common wisdom is debunked by the existence of Martin's latest brainchild, Scala.</P>
<P>Scala is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">tastefully typed</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>language: it is statically typed, but explicit types appear in just the right places. Scala takes powerful features from object-oriented and functional languages, and combines them with a few novel ideas in a beautifully coherent whole. The syntax is so lightweight, and its primitives so expressive, that APIs can be used with virtually no syntactic overhead at all. Examples can be found in standard libraries such as parser combinators and actors. In this sense Scala supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">embedded domain-specific languages</EM>.<A id=i243410717-1></A></P>
<P>Will Scala be the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">next great language</EM>? Only time will tell. Martin Odersky's team certainly has the taste and skill for the job. One thing is sure: Scala sets a new standard against which future languages will be measured.</P>
<P>Neal Gafter<BR>San Jose, California<BR>September 3, 2008</P>
<H2 style="FONT-WEIGHT: normal; FONT-SIZE: 24px"><A name=front2></A></H2>
<H1 style="FONT-WEIGHT: normal; FONT-SIZE: 28px">Acknowledgments</H1>
<P>Many people have contributed to this book and to the material it covers. We are grateful to all of them.</P>
<P>Scala itself has been a collective effort of many people. The design and the implementation of version 1.0 was helped by Philippe Altherr, Vincent Cremet, Gilles Dubochet, Burak Emir, Stephane Micheloud, Nikolay Mihaylov, Michel Schinz, Erik Stenman, and Matthias Zenger. Iulian Dragos, Gilles Dubochet, Philipp Haller, Sean McDirmid, Ingo Maier, and Adriaan Moors joined in the effort to develop the second and current version of the language and tools.</P>
<P>Gilad Bracha, Craig Chambers, Erik Ernst, Matthias Felleisen, Shriram Krishnamurti, Gary Leavens, Sebastian Maneth, Erik Meijer, David Pollak, Jon Pretty, Klaus Ostermann, Didier Remy, Vijay Saraswat, Don Syme, Mads Torgersen, Philip Wadler, Jamie Webb, and John Williams have shaped the design of the language by graciously sharing their ideas with us in lively and inspiring discussions, as well as through comments on previous versions of this document. The contributors to the Scala mailing list have also given very useful feedback that helped us improve the language and its tools.</P>
<P>George Berger has worked tremendously to make the build process and the web presence for the book work smoothly. As a result this project has been delightfully free of technical snafus.</P>
<P>Many people gave us valuable feedback on early versions of the text.<SPAN class=Apple-converted-space>&nbsp;</SPAN>Thanks goes to Eric Armstrong, George Berger, Alex Blewitt, Gilad Bracha, William Cook, Bruce Eckel, Stephane Micheloud, Todd Millstein, David Pollak, Frank Sommers, Philip Wadler, and Matthias Zenger. Thanks also to the Silicon Valley Patterns group for their very helpful review: Dave Astels, Tracy Bialik, John Brewer, Andrew Chase, Bradford Cross, Raoul Duke, John P. Eurich, Steven Ganz, Phil Goodwin, Ralph Jocham, Yan-Fa Li, Tao Ma, Jeffery Miller, Suresh Pai, Russ Rufer, Dave W. Smith, Scott Turnquest, Walter Vannini, Darlene Wallach, and Jonathan Andrew Wolter. And we'd like to thank Dewayne Johnson and Kim Leedy for their help with the cover art, and Frank Sommers for his work on the index.</P>
<P>We'd also like to extend a special thanks to all of our readers who contributed comments. Your comments were very helpful to us in shaping this into an even better book. We couldn't print the names of everyone who contributed comments, but here are the names of readers who submitted at least five comments during the eBook PrePrint&#174; stage by clicking on the Suggest link, sorted first by the highest total number of comments submitted, then alphabetically. Thanks goes to: David Biesack, Donn Stephan, Mats Henricson, Rob Dickens, Blair Zajac, Tony Sloane, Nigel Harrison, Javier Diaz Soto, William Heelan, Justin Forder, Gregor Purdy, Colin Perkins, Bjarte S. Karlsen, Ervin Varga, Eric Willigers, Mark Hayes, Martin Elwin, Calum MacLean, Jonathan Wolter, Les Pruszynski, Seth Tisue, Andrei Formiga, Dmitry Grigoriev, George Berger, Howard Lovatt, John P. Eurich, Marius Scurtescu, Jeff Ervin, Jamie Webb, Kurt Zoglmann, Dean Wampler, Nikolaj Lindberg, Peter McLain, Arkadiusz Stryjski, Shanky Surana, Craig Bordelon, Alexandre Patry, Filip Moens, Fred Janon, Jeff Heon, Boris Lorbeer, Jim Menard, Tim Azzopardi, Thomas Jung, Walter Chang, Jeroen Dijkmeijer, Casey Bowman, Martin Smith, Richard Dallaway, Antony Stubbs, Lars Westergren, Maarten Hazewinkel, Matt Russell, Remigiusz Michalowski, Andrew Tolopko, Curtis Stanford, Joshua Cough, Zemian Deng, Christopher Rodrigues Macias, Juan Miguel Garcia Lopez, Michel Schinz, Peter Moore, Randolph Kahle, Vladimir Kelman, Daniel Gronau, Dirk Detering, Hiroaki Nakamura, Ole Hougaard, Bhaskar Maddala, David Bernard, Derek Mahar, George Kollias, Kristian Nordal, Normen Mueller, Rafael Ferreira, Binil Thomas, John Nilsson, Jorge Ortiz, Marcus Schulte, Vadim Gerassimov, Cameron Taggart, Jon-Anders Teigen, Silvestre Zabala, Will McQueen, and Sam Owen.</P>
<P>Lastly, Bill would also like to thank Gary Cornell, Greg Doench, Andy Hunt, Mike Leonard, Tyler Ortman, Bill Pollock, Dave Thomas, and Adam Wright for providing insight and advice on book publishing.</P>
<H2 style="FONT-WEIGHT: normal; FONT-SIZE: 24px"><A name=front3></A></H2>
<H1 style="FONT-WEIGHT: normal; FONT-SIZE: 28px">Introduction</H1>
<P>This book is a tutorial for the Scala programming language, written by people directly involved in the development of Scala. Our goal is that by reading this book, you can learn everything you need to be a productive Scala programmer. All examples in this book compile with Scala version 2.7.2.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Who should read this book</H3>
<P>The main target audience for this book is programmers who want to learn to program in Scala. If you want to do your next software project in Scala, then this is the book for you. In addition, the book should be interesting to programmers wishing to expand their horizons by learning new concepts. If you're a Java programmer, for example, reading this book will expose you to many concepts from functional programming as well as advanced object-oriented ideas. We believe learning about Scala, and the ideas behind it, can help you become a better programmer in general.</P>
<P>General programming knowledge is assumed. While Scala is a fine first programming language, this is not the book to use to learn programming.</P>
<P>On the other hand, no specific knowledge of programming languages is required. Even though most people use Scala on the Java platform, this book does not presume you know anything about Java. However, we expect many readers to be familiar with Java, and so we sometimes compare Scala to Java to help such readers understand the differences.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">How to use this book</H3>
<P>Because the main purpose of this book is to serve as a tutorial, the recommended way to read this book is in chapter order, from front to back. We have tried hard to introduce one topic at a time, and explain new topics only in terms of topics we've already introduced. Thus, if you skip to the back to get an early peek at something, you may find it explained in terms of concepts you don't quite understand. To the extent you read the chapters in order, we think you'll find it quite straightforward to gain competency in Scala, one step at a time.</P>
<P>If you see a term you do not know, be sure to check the glossary and the index. Many readers will skim parts of the book, and that is just fine. The glossary and index can help you backtrack whenever you skim over something too quickly.</P>
<P>After you have read the book once, it should also serve as a language reference. There is a formal specification of the Scala language, but<A id=i1552805019-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>the language specification tries for precision at the expense of readability. Although this book doesn't cover every detail of Scala, it is quite comprehensive and should serve as an approachable language reference as you become more adept at programming in Scala.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">How to learn Scala</H3>
<P>You will learn a lot about Scala simply by reading this book from cover to cover. You can learn Scala faster and more thoroughly, though, if you do a few extra things.</P>
<P>First of all, you can take advantage of the many program examples included in the book. Typing them in yourself is a way to force your mind through each line of code. Trying variations is a way to make them more fun and to make sure you really understand how they work.</P>
<P>Second, keep in touch with the numerous online forums. That way, you and other Scala enthusiasts can help each other. There are numerous mailing lists, discussion forums, a chat room, a wiki, and multiple Scala-specific article feeds. Take some time to find ones that fit your information needs. You will spend a lot less time stuck on little problems, so you can spend your time on deeper, more important questions.</P>
<P>Finally, once you have read enough, take on a programming project of your own. Work on a small program from scratch, or develop an add-in to a larger program. You can only go so far by reading.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">EBook features</H3>
<P>This book is available in both paper and PDF eBook form. The eBook is not simply an electronic copy of the paper version of the book. While the content is the same as in the paper version, the eBook has been carefully designed and optimized for reading on a computer screen.</P>
<P>The first thing to notice is that most references within the eBook are hyperlinked. If you select a reference to a chapter, figure, or glossary entry, your PDF viewer should take you immediately to the selected item so that you do not have to flip around to find it.</P>
<P>Additionally, at the bottom of each page in the eBook are a number of navigation links. The "Cover," "Overview," and "Contents" links take you to the front matter of the book. The "Glossary" and "Index" links take you to reference parts of the book. Finally, the "Discuss" link takes you to an online forum where you discuss questions with other readers, the authors, and the larger Scala community. If you find a typo, or something you think could be explained better, please click on the "Suggest" link, which will take you to an online web application where you can give the authors feedback.</P>
<P>Although the same pages appear in the eBook as the printed book, blank pages are removed and the remaining pages renumbered. The pages are numbered differently so that it is easier for you to determine PDF page numbers when printing only a portion of the eBook. The pages in the eBook are, therefore, numbered exactly as your PDF viewer will number them.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Typographic conventions</H3>
<P>The first time a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">term</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, it is italicized. Small code examples, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>1</SPAN>, are written inline with a mono-spaced font. Larger code examples are put into mono-spaced quotation blocks like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;hello()&nbsp;{
  &nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Hello,&nbsp;world!"</SPAN>)
  }
</PRE>When interactive shells are shown, responses from the shell are shown in a lighter font.<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">4</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;Int&nbsp;=&nbsp;7</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Content overview</H3>
<UL>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/a-scalable-language.html">Chapter 1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"A Scalable Language," gives an overview of Scala's design as well as the reasoning, and history, behind it.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html">Chapter 2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"First Steps in Scala," shows you how to do a number of basic programming tasks in Scala, without going into great detail about how they work. The goal of this chapter is to get your fingers started typing and running Scala code.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/next-steps-in-scala.html">Chapter 3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Next Steps in Scala," shows you several more basic programming tasks that will help you get up to speed quickly in Scala. After completing this chapter, you should be able to start using Scala for simple scripting tasks.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html">Chapter 4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Classes and Objects," starts the in-depth coverage of Scala with a description of its basic object-oriented building blocks and instructions on how to compile and run a Scala application.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/basic-types-and-operations.html">Chapter 5</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Basic Types and Operations," covers Scala's basic types, their literals, the operations you can perform on them, how precedence and associativity works, and what rich wrappers are.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html">Chapter 6</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Functional Objects," dives more deeply into the object-oriented features of Scala, using functional (<I>i.e.</I>, immutable) rational numbers as an example.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html">Chapter 7</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Built-in Control Structures," shows you how to use Scala's built-in control structures:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN>.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functions-and-closures.html">Chapter 8</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Functions and Closures," provides in-depth coverage of functions, the basic building block of functional languages.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/control-abstraction.html">Chapter 9</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Control Abstraction," shows how to augment Scala's basic control structures by defining your own control abstractions.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html">Chapter 10</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Composition and Inheritance," discusses more of Scala's support for object-oriented programming. The topics are not as fundamental as those in Chapter 4, but they frequently arise in practice.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/scalas-hierarchy.html">Chapter 11</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Scala's Hierarchy," explains Scala's inheritance hierarchy and discusses its universal methods and bottom types.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/traits.html">Chapter 12</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Traits," covers Scala's mechanism for mixin composition. The chapter shows how traits work, describes common uses, and explains how traits improve on traditional multiple inheritance.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/packages-and-imports.html">Chapter 13</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Packages and Imports," discusses issues with programming in the large, including top-level packages, import statements, and access control modifiers like<SPAN class=code>protected</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>private</SPAN>.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html">Chapter 14</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Assertions and Unit Testing," shows Scala's assertion mechanism and gives a tour of the various tools available for writing tests in Scala.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html">Chapter 15</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Case Classes and Pattern Matching," introduces twin constructs that support you when writing regular, non-encapsulated data structures. Case classes and pattern matching are particularly helpful for tree-like recursive data.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-lists.html">Chapter 16</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Working with Lists," explains in detail lists, which are probably the most commonly used data structure in Scala programs.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/collections.html">Chapter 17</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Collections," shows you how to use the basic Scala collections, such as lists, arrays, tuples, sets, and maps.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/stateful-objects.html">Chapter 18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Stateful Objects," explains stateful (<I>i.e.</I>, mutable) objects, and the syntax Scala provides to express them. The chapter concludes with a case study on discrete event simulation, which shows some stateful objects in action.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/type-parameterization.html">Chapter 19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Type Parameterization," explains some of the techniques for information hiding introduced in Chapter 13 by means of a concrete example: the design of a class for purely functional queues. The chapter builds up to a description of variance of type parameters and how it interacts with information hiding.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/abstract-members.html">Chapter 20</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Abstract Members," describes all kinds of abstract members that Scala supports. Not only methods, but also fields and types can be declared abstract.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implicit-conversions-and-parameters.html">Chapter 21</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Implicit Conversions and Parameters," covers two constructs that can help you omit tedious details from source code, letting the compiler supply them instead.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implementing-lists.html">Chapter 22</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Implementing Lists," describes the implementation of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>List</SPAN>. It is important to understand how lists work in Scala, and furthermore the implementation demonstrates the use of several of Scala's features.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/for-expressions-revisited.html">Chapter 23</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"For Expressions Revisited," shows how<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions are translated to invocations of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>map</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>flatMap</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filter</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>foreach</SPAN>.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/extractors.html">Chapter 24</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Extractors," shows how to pattern match against arbitrary classes, not just case classes.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html">Chapter 25</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Annotations," shows how to work with language extension via annotation. The chapter describes several standard annotations and shows you how to make your own.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-xml.html">Chapter 26</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Working with XML," explains how to process XML in Scala. The chapter shows you idioms for generating XML, parsing it, and processing it once it is parsed.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html">Chapter 27</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Objects As Modules," shows how Scala's objects are rich enough to remove the need for a separate modules system.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/object-equality.html">Chapter 28</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Object Equality," points out several issues to consider when writing an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>equals</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. There are several pitfalls to avoid.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html">Chapter 29</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Combining Scala and Java," discusses issues that arise when combining Scala and Java together in the same project, and suggests ways to deal with them.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/actors-and-concurrency.html">Chapter 30</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Actors and Concurrency," shows you how to use Scala's actors concurrency library. Although you use the Java Platform's concurrency primitives and libraries from Scala programs, actors can help you avoid the deadlocks and race conditions that plague the traditional "threads and locks" approach to concurrency.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combinator-parsing.html">Chapter 31</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Combinator Parsing," shows how to build parsers using Scala's library of parser combinators.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html">Chapter 32</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"GUI Programming," gives a quick tour of a Scala library that simplifies GUI programming with Swing.<BR><BR>
<LI><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/the-scells-spreadsheet.html">Chapter 33</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SCells</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>Spreadsheet," ties everything together by showing a complete spreadsheet application written in Scala.<BR><BR></LI></UL>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Resources</H3>
<P>At<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://www.scala-lang.org</SPAN>, the main website for Scala, you'll find the latest Scala release and links to documentation and community resources. For a more condensed page of links to Scala resources, visit the website for this book:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://booksites.artima.com/programming_in_scala</SPAN>. To interact with other readers of this book, check out the Programming in Scala Forum, at:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://www.artima.com/forums/forum.jsp?forum=282</SPAN>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Source code</H3>
<P>You can download a ZIP file containing the source code of this book, which is released under the Apache 2.0 open source license, from the book's website:<A id=i742232475-1></A><A id=i1840350167-1></A><A id=i1878821113-1></A><SPAN class=code>http://booksites.artima.com/programming_in_scala</SPAN>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Errata</H3>
<P>Although this book has been heavily reviewed and checked, errors will<A id=i-1149733563-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>inevitably slip through. To see a (hopefully short) list of errata for this book, visit<SPAN class=code>http://booksites.artima.com/programming_in_scala/errata</SPAN>. If you find an error, please report it at the above URL, so that we can be sure to fix it in a future printing or edition of this book.</P></DIV>