<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 4 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Classes and Objects</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>You've already seen the basics of classes and objects in Scala in the previous two chapters. In this chapter, we'll take you a bit deeper. You'll learn more about classes, fields, and methods, and get an overview of semicolon inference. You'll learn more about singleton objects, including how to use them to write and run a Scala application. If you are familiar with Java, you'll find the concepts in Scala are similar, but not exactly the same. So even if you're a Java guru, it will pay to read on.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.1></A>4.1 Classes, fields, and methods<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.1">link</A>]</SPAN></H3>
<P><A name=sec:classes-fields-methods></A></P>
<P>A class is a blueprint for objects<A id=i853620774-1></A>. Once you define a class, you can create objects from the class blueprint with the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>new</SPAN>.<A id=i313049961-1></A><A id=i-1663070161-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, given the class definition:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;class&nbsp;definition&nbsp;goes&nbsp;here</SPAN>
  }
</PRE>
<P>You can create<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects with:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
</PRE>
<P>Inside a class definition, you place fields and methods, which are collectively called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">members</EM>.<A id=i1842841433-1></A><A id=i1490663010-1></A><A id=i-1274708295-1></A><A id=i1074702876-1></A><A id=i955534258-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Fields, which you define with either<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>, are variables that refer to objects<A id=i521418335-1></A><A id=i1295914649-1></A>. Methods, which you define with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>def</SPAN>, contain executable code.<A id=i1764649166-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The fields hold the state, or data, of an object, whereas the methods use that data to do the computational work of the object. When you instantiate a class, the runtime sets aside some memory to hold the image of that object's state&#8212;<I>i.e.</I>, the content of its variables. For example, if you defined a<SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class and gave it a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>field named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN>:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  }
</PRE>
<P></P>
<P>and you instantiated it twice with:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;acc&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;csa&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
</PRE>
<P>The image of the objects in memory might look like:</P>
<DIV align=center><IMG alt="image images/cc0dd0.jpg" src="http://www.artima.com/pins1ed/images/cc0dd0.jpg"></DIV>
<P>Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN>, a field declared inside class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>, is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>, not a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>, you can later reassign to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>a different<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  acc.sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>
</PRE>
<P>Now the picture would look like:</P>
<DIV align=center><IMG alt="image images/cc3dd0.jpg" src="http://www.artima.com/pins1ed/images/cc3dd0.jpg"></DIV>
<P>One thing to notice about this picture is that there are two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, one in the object referenced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the other in the object referenced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>csa</SPAN>. Fields are also known as<EM style="FONT-STYLE: italic">instance variables</EM>,<A id=i-1571995732-1></A><A id=i-813534408-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>because every instance gets its own set of the variables. Collectively, an object's instance variables make up the memory image of the object. You can see this illustrated here not only in that you see two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, but also that when you changed one, the other was unaffected.</P>
<P>Another thing to note in this example is that you were able to mutate the object<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>referred to, even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>. What you can't do with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>csa</SPAN>), given that they are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s, not<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s, is reassign a different object to them. For example, the following attempt would fail:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Won't&nbsp;compile,&nbsp;because&nbsp;acc&nbsp;is&nbsp;a&nbsp;val</SPAN>
  acc&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
</PRE>What you can count on, therefore, is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will always refer to the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object with which you initialize it, but the fields contained inside that object might change over time. 
<P></P>
<P>One important way to pursue robustness of an object is to ensure that the object's state&#8212;the values of its instance variables&#8212;remains valid during its entire lifetime. The first step is to prevent outsiders from accessing the fields directly by making the fields<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">private</EM>.<A id=i694224322-1></A><A id=i1692219636-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Because private fields can only be accessed by methods defined in the same class, all the code that can update the state will be localized to the class. To declare a field private, you place a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>private</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>access modifier in front of the field, like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  }
</PRE>
<P>Given this definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>, any attempt to access<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the outside of the class would fail:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;acc&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
  acc.sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Won't&nbsp;compile,&nbsp;because&nbsp;sum&nbsp;is&nbsp;private</SPAN>
</PRE>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>The way you make members public in Scala is by not explicitly specifying any access modifier<A id=i807441147-1></A>. Put another way, where you'd say "public" in Java, you simply say nothing in Scala. Public is Scala's default access level.</P></DIV>
<P>Now that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is private, the only code that can access<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is code defined inside the body of the class itself. Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>won't be of much use to anyone unless we define some methods in it:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Byte</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Unit</SPAN>&nbsp;=&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;b
  &nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;checksum():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">return</SPAN>&nbsp;<SPAN style="FONT-SIZE: large">~</SPAN>(sum&nbsp;&amp;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0xFF</SPAN>)&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;}
  }
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>now has two methods,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>checksum</SPAN>, both of which exhibit the basic form of a function definition, shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html#fig:method-form">Figure 2.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html#fig:method-form">here</A>.</P>
<P>Any parameters to a method can be used inside the method. One important characteristic of method parameters in Scala is that they are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s, not<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-1">[1]</A><A id=i1448353285-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If you attempt to reassign a parameter inside a method in Scala, therefore, it won't compile:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Byte</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Unit</SPAN>&nbsp;=&nbsp;{
  &nbsp;&nbsp;b&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;This&nbsp;won't&nbsp;compile,&nbsp;because&nbsp;b&nbsp;is&nbsp;a&nbsp;val</SPAN>
  &nbsp;&nbsp;sum&nbsp;+=&nbsp;b
  }
</PRE>
<P></P>
<P>Although<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>checksum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>correctly implement the desired functionality, you can express them using a more concise style. First, the<SPAN class=code>return</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the end of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>checksum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method is superfluous and can be dropped. In the absence of any explicit return statement, a Scala method returns the last value computed by the method.<A id=i-2127509767-1></A><A id=i119623890-1></A></P>
<P>The recommended style for methods is in fact to avoid having explicit, and especially multiple, return statements. Instead, think of each method as an expression that yields one value, which is returned. This philosophy will encourage you to make methods quite small, to factor larger methods into multiple smaller ones. On the other hand, design choices depend on the design context, and Scala makes it easy to write methods that have multiple, explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>return</SPAN>s if that's what you desire.</P>
<P>Because all<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>checksum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does is calculate a value, it does not need an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>return</SPAN>. Another shorthand for methods is that you can leave off the curly braces if a method computes only a single result expression. If the result expression is short, it can even be placed on the same line as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>def</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself. With these changes, class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>looks like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Byte</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Unit</SPAN>&nbsp;=&nbsp;sum&nbsp;+=&nbsp;b
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;checksum():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;<SPAN style="FONT-SIZE: large">~</SPAN>(sum&nbsp;&amp;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0xFF</SPAN>)&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  }
</PRE>
<P></P>
<P>Methods with a result type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>'s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, are executed for their side effects. A side effect is generally defined as mutating state somewhere external to the method or performing an I/O action. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN>'s case, for example, the side effect is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>sum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reassigned. Another way to express such methods is to leave off the result type and the equals sign, and enclose the body of the method in curly braces. In this form, the method looks like a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">procedure</EM>, a method that is executed only for its side effects.<A id=i-163214618-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:checksum-class">Listing 4.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>illustrates this style:<A id=i408410112-1></A><A id=i-1220669121-1></A></P>
<P><A name=lst:checksum-class></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;In&nbsp;file&nbsp;ChecksumAccumulator.scala</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;sum&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Byte</SPAN>)&nbsp;{&nbsp;sum&nbsp;+=&nbsp;b&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;checksum():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;<SPAN style="FONT-SIZE: large">~</SPAN>(sum&nbsp;&amp;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0xFF</SPAN>)&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 4.1 - Final version of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>.</H5>
<P>One puzzler to watch out for is that whenever you leave off the equals sign before the body of a function, its result type will definitely be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>.<A id=i-1454060797-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This is true no matter what the body contains, because the Scala compiler can convert any type to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>. For example, if the last result of a method is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN>, but the method's result type is declared to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>, the<SPAN class=code>String</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be converted to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and its value lost. Here's an example:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;f():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Unit</SPAN>&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"this&nbsp;String&nbsp;gets&nbsp;lost"</SPAN>&nbsp;&nbsp;&nbsp;&nbsp;
  <SPAN class=output style="COLOR: rgb(90,0,0)">f:&nbsp;()Unit</SPAN>
</PRE>In this example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is converted to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the declared result type of function<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>f</SPAN>. The Scala compiler treats a function defined in the procedure style,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>i.e.</I>, with curly braces but no equals sign, essentially the same as a function that explicitly declares its result type to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;g()&nbsp;{&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"this&nbsp;String&nbsp;gets&nbsp;lost&nbsp;too"</SPAN>&nbsp;}
  <SPAN class=output style="COLOR: rgb(90,0,0)">g:&nbsp;()Unit</SPAN>
</PRE>The puzzler occurs, therefore, if you intend to return a non-<SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, but forget the equals sign. To get what you want, you'll need to insert the missing equals sign:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;h()&nbsp;=&nbsp;{&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"this&nbsp;String&nbsp;gets&nbsp;returned!"</SPAN>&nbsp;}
  <SPAN class=output style="COLOR: rgb(90,0,0)">h:&nbsp;()java.lang.String</SPAN>
  <BR>  scala&gt;&nbsp;h
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;java.lang.String&nbsp;=&nbsp;this&nbsp;String&nbsp;gets&nbsp;returned!</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.2></A>4.2 Semicolon inference<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.2">link</A>]</SPAN></H3>
<P><A name=sec:semicolon-inf></A></P>
<P>In a Scala program, a semicolon<A id=i1984943760-1></A><A id=i794983274-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the end of a statement is usually optional<A id=i-491339878-1></A>. You can type one if you want but you don't have to if the statement appears by itself on a single line. On the other hand, a semicolon is required if you write multiple statements on a single line:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;s&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"hello"</SPAN>;&nbsp;println(s)
</PRE>If you want to enter a statement that spans multiple lines, most of the time you can simply enter it and Scala will separate the statements in the correct place. For example, the following is treated as one four-line statement:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(x&nbsp;&lt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"too&nbsp;small"</SPAN>)
  <SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>
  &nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"ok"</SPAN>)
</PRE>Occasionally, however, Scala will split a statement into two parts against your wishes:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  x
  +&nbsp;y
</PRE>This parses as two statements<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+y</SPAN>. If you intend it to parse as one statement<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>y</SPAN>, you can always wrap it in parentheses:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  (x
  +&nbsp;y)
</PRE>Alternatively, you can put the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the end of a line.<A id=i-1344376109-1></A><A id=i1115343227-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For just this reason, whenever you are chaining an infix operation such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN>, it is a common Scala style to put the operators at the end of the line instead of the beginning:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  x&nbsp;+
  y&nbsp;+
  z
</PRE>
<P></P>
<DIV class=aside style="BORDER-RIGHT: black thin solid; PADDING-RIGHT: 20px; BORDER-TOP: black thin solid; PADDING-LEFT: 20px; PADDING-BOTTOM: 10px; MARGIN: 25px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px; BORDER-BOTTOM: black thin solid">
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">The rules of semicolon inference</H3>
<P>The precise rules for statement separation<A id=i1984943760-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>are surprisingly simple for how well they work. In short, a line ending is treated as a semicolon unless one of the following conditions is true:</P>
<OL>
<LI>The line in question ends in a word that would not be legal as the end of a statement, such as a period or an infix operator. 
<LI>The next line begins with a word that cannot start a statement. 
<LI>The line ends while inside parentheses<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>(...)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or brackets<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>[...]</SPAN>, because these cannot contain multiple statements anyway.</LI></OL></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.3></A>4.3 Singleton objects<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.3">link</A>]</SPAN></H3>
<P><A name=sec:singleton-objects></A></P>
<P><A name=lst:checksum-obj></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;In&nbsp;file&nbsp;ChecksumAccumulator.scala</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.collection.mutable.Map
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;cache&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Map[String, Int]</SPAN>()
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;calculate(s:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(cache.contains(s))
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache(s)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;acc&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ChecksumAccumulator</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(c&nbsp;&lt;-&nbsp;s)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acc.add(c.toByte)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;cs&nbsp;=&nbsp;acc.checksum()
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache&nbsp;+=&nbsp;(s&nbsp;-&gt;&nbsp;cs)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cs
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 4.2 - Companion object for class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>.</H5>
<P>As mentioned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/a-scalable-language.html">Chapter 1</A>, one way in which Scala is more object-oriented than Java is that classes in Scala cannot have static members.<A id=i-100664180-1></A><A id=i-1455692441-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Instead, Scala has<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g775061748"><EM style="FONT-STYLE: italic">singleton objects</EM></A>.<A id=i-1742889473-1></A><A id=i-1642091000-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>A singleton object definition looks like a class definition, except instead of the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>class</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>you use the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>object</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:checksum-obj">Listing 4.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example.</P>
<P>The singleton object in this figure is named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>, the same name as the class in the previous example. When a singleton object shares the same name with a class, it is called that class's<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g423027411"><EM style="FONT-STYLE: italic">companion object</EM></A>.<A id=i541826262-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You must define both the class and its companion object in the same source file. The class is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-828430492"><EM style="FONT-STYLE: italic">companion class</EM></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the singleton object. A class and its companion object can access each other's private members.<A id=i-1552749806-1></A><A id=i-216316744-1></A></P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>singleton object has one method, named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>calculate</SPAN>, which takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and calculates a checksum for the characters in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN>. It also has one private field,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>cache</SPAN>, a mutable map in which previously calculated checksums are cached.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-2">[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The first line of the method, "<SPAN class=code>if</SPAN>&nbsp;<SPAN class=code>(cache.contains(s))</SPAN>", checks the cache to see if the passed string is already contained as a key in the map. If so, it just returns the mapped value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>cache(s)</SPAN>. Otherwise, it executes the else clause, which calculates the checksum. The first line of the else clause defines a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and initializes it with a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instance.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-3">[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The next line is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, which cycles through each character in the passed string, converts the character to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Byte</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toByte</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on it, and passes that to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instances to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN>refers. After the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression completes, the next line of the method invokes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>checksum</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>acc</SPAN>, which gets the checksum for the passed<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN>, and stores it into a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>cs</SPAN>. In the next line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>cache</SPAN>&nbsp;<SPAN class=code>+=</SPAN>&nbsp;<SPAN class=code>(s</SPAN>&nbsp;<SPAN class=code>-&gt;</SPAN>&nbsp;<SPAN class=code>cs)</SPAN>, the passed string key is mapped to the integer checksum value, and this key-value pair is added to the cache map. The last expression of the method,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>cs</SPAN>, ensures the checksum is the result of the method.</P>
<P>If you are a Java programmer, one way to think of singleton objects is as the home for any static methods you might have written in Java. You can invoke methods on singleton objects using a similar syntax: the name of the singleton object, a dot, and the name of the method. For example, you can invoke the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>calculate</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of singleton object<SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  ChecksumAccumulator.calculate(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Every&nbsp;value&nbsp;is&nbsp;an&nbsp;object."</SPAN>)
</PRE>A singleton object is more than a holder of static methods, however. It is a first-class object. 
<P>You can think of a singleton object's name, therefore, as a "name tag" attached to the object:</P>
<DIV align=center><IMG alt="image images/csaObject.jpg" src="http://www.artima.com/pins1ed/images/csaObject.jpg"></DIV>
<P>Defining a singleton object doesn't define a type (at the Scala level of abstraction). Given just a definition of object<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>, you can't make a variable of type<SPAN class=code>ChecksumAccumulator</SPAN>. Rather, the type named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined by the singleton object's companion class. However, singleton objects extend a superclass and can mix in traits. Given each singleton object is an instance of its superclasses and mixed-in traits, you can invoke its methods via these types, refer to it from variables of these types, and pass it to methods expecting these types. We'll show some examples of singleton objects inheriting from classes and traits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/traits.html">Chapter 12</A>.</P>
<P>One difference between classes and singleton objects is that singleton<A id=i-614433232-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects cannot take parameters, whereas classes can. Because you can't instantiate a singleton object with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>new</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword, you have no way to pass parameters to it. Each singleton object is implemented as<A id=i-1705632190-1></A><A id=i1357897992-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>an instance of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g1908038877"><EM style="FONT-STYLE: italic">synthetic class</EM></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>referenced from a static variable, so they have the same initialization semantics as Java statics.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-4">[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In particular, a singleton object is initialized the first time some code accesses it.</P>
<P>A singleton object that does not share the same name with a companion class is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g1856979834"><EM style="FONT-STYLE: italic">standalone object</EM></A>.<A id=i1181640299-1></A><A id=i1731800121-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can use standalone objects for many purposes, including collecting related utility methods together, or defining an entry point to a Scala application. This use case is shown in the next section.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.4></A>4.4 A Scala application<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.4">link</A>]</SPAN></H3>
<P><A name=sec:a-scala-application></A></P>
<P>To run a Scala program, you must supply the name of a standalone singleton object<SPAN class=Apple-converted-space>&nbsp;</SPAN>with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that takes one parameter, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[String]</SPAN>, and has a result type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>.<A id=i40729076-1></A>Any standalone object with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of the proper signature can be used as the entry point into an application. An example is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:summer-app">Listing 4.3</A>:<A id=i558250415-1></A></P>
<P><A name=lst:summer-app></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;In&nbsp;file&nbsp;Summer.scala</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;ChecksumAccumulator.calculate
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Summer</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;main(args:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Array[String]</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(arg&nbsp;&lt;-&nbsp;args)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(arg&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">":&nbsp;"</SPAN>+&nbsp;calculate(arg))
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 4.3 - The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application.</H5>
<P>The name of the singleton object in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:summer-app">Listing 4.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN>. Its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method has the proper signature, so you can use it as an application. The first statement in the file is an import of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>calculate</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method defined in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object in the previous example. This import statement allows you to use the method's simple name in the rest of the file.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-5">[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method simply prints out each argument and the checksum for the argument, separated by a colon.</P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>Scala implicitly imports members of packages<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>java.lang</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala</SPAN>, as well as the members of a singleton object named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN>, into every Scala source file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN>, which resides in package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala</SPAN>, contains many useful methods. For example, when you say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a Scala source file, you're actually invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN>. (<SPAN class=code>Predef.println</SPAN>turns around and invokes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Console.println</SPAN>, which does the real work.) When you say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert</SPAN>, you're invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef.assert</SPAN>.<A id=i-783142358-1></A><A id=i586706545-1></A></P></DIV>
<P>To run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application, place the code from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:summer-app">Listing 4.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer.scala</SPAN>. Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN>, place the code for<SPAN class=code>ChecksumAccumulator</SPAN>, both the class shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:checksum-class">Listing 4.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and its companion object shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:checksum-obj">Listing 4.2</A>, into a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator.scala</SPAN>.</P>
<P>One difference between Scala and Java is that whereas Java requires you to put a public class in a file named after the class&#8212;for example, you'd put class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SpeedRacer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in file<SPAN class=code>SpeedRacer.java</SPAN>&#8212;in Scala, you can name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>files anything you want, no matter what Scala classes or code you put in them.<A id=i-1061147639-1></A><A id=i982997419-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In general in the case of non-scripts, however, it is recommended style to name files after the classes they contain as is done in Java, so that programmers can more easily locate classes by looking at file names. This is the approach we've taken with the two files in this example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator.scala</SPAN>.</P>
<P>Neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are scripts, because they end in a definition. A script, by contrast, must end in a result expression.<A id=i1047419434-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Thus if you try to run<SPAN class=code>Summer.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a script, the Scala interpreter will complain that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not end in a result expression (assuming of course you didn't add any expression of your own after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object definition). Instead, you'll need to actually compile these files with the Scala compiler, then run the resulting class files. One way to do this is to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scalac</SPAN>, which is the basic Scala compiler, like this:<A id=i-674656853-1></A><A id=i-2092005582-1></A><A id=i-1405503952-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  $&nbsp;scalac&nbsp;ChecksumAccumulator.scala&nbsp;Summer.scala
</PRE>This compiles your source files, but there may be a perceptible delay before the compilation finishes. The reason is that every time the compiler starts up, it spends time scanning the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>jar</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>files and doing other initial work before it even looks at the fresh source files you submit to it. For this reason, the Scala distribution also includes a Scala compiler<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">daemon</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for fast Scala compiler).<A id=i1477728746-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You use it like this: 
<P></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  $&nbsp;fsc&nbsp;ChecksumAccumulator.scala&nbsp;Summer.scala
</PRE>The first time you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN>, it will create a local server daemon attached to a port on your computer. It will then send the list of files to compile to the daemon via the port, and the daemon will compile the files. The next time you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN>, the daemon will already be running, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will simply send the file list to the daemon, which will immediately compile the files. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN>, you only need to wait for the Java runtime to startup the first time. If you ever want to stop the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>daemon, you can do so with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN>&nbsp;<SPAN class=code>-shutdown</SPAN>. 
<P>Running either of these<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scalac</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fsc</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands will produce Java class files that you can then run via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>command, the same command you used to invoke the interpreter in previous examples.<A id=i1944711780-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>However, instead of giving it a filename with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>extension containing Scala code to interpret as you did in every previous example,<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#footnote4-6">[6]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this case you'll give it the name of a standalone object containing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of the proper signature. You can run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application, therefore, by typing:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  $&nbsp;scala&nbsp;Summer&nbsp;of&nbsp;love
</PRE>
<P></P>
<P>You will see checksums printed for the two command line arguments:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=output style="COLOR: rgb(90,0,0)">of:&nbsp;-213</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">love:&nbsp;-182</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.5></A>4.5 The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.5">link</A>]</SPAN></H3>
<P><A name=sec:application-trait></A></P>
<P>Scala provides a trait,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.Application</SPAN>, that can save you some finger typing.<A id=i-2135552226-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Although we haven't yet covered everything you'll need to understand exactly how this trait works, we figured you'd want to know about it now anyway.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:season-app">Listing 4.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example:</P>
<P><A name=lst:season-app></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;ChecksumAccumulator.calculate
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FallWinterSpringSummer</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Application</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(season&nbsp;&lt;-&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fall"</SPAN>,&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"winter"</SPAN>,&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"spring"</SPAN>))
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(season&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">":&nbsp;"</SPAN>+&nbsp;calculate(season))
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 4.4 - Using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait.</H5>
<P>To use the trait, you first write<SPAN class=Apple-converted-space>&nbsp;</SPAN>"<SPAN class=code>extends</SPAN>&nbsp;<SPAN class=code>Application</SPAN>" after the name of your singleton object. Then instead of writing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, you place the code you would have put in the<SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method<SPAN class=Apple-converted-space>&nbsp;</SPAN>directly between the curly braces of the singleton object. That's it. You can compile and run this application just like any other.</P>
<P>The way this works is that trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>declares a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of the appropriate signature, which your singleton object inherits, making it usable as a Scala application. The code between the curly braces is collected into a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-1733976356"><EM style="FONT-STYLE: italic">primary constructor</EM></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the singleton object, and is executed when the class is initialized. Don't worry if you don't understand what all this means. It will be explained in later chapters, and in the meantime you can use the trait without fully understanding the details.</P>
<P>Inheriting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is shorter than writing an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, but it also has some shortcomings. First, you can't use this trait if you need to access command-line arguments, because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>args</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>array isn't available. For example, because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Summer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application uses command-line arguments, it must be written with an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#lst:summer-app">Listing 4.3</A>. Second, because of some restrictions in the JVM threading model, you need an explicit main method if your program is multi-threaded. Finally, some implementations of the JVM do not optimize the initialization code of an object which is executed by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait. So you should inherit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Application</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>only when your program is relatively simple and single-threaded.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=4.6></A>4.6 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#4.6">link</A>]</SPAN></H3>
<P>This chapter has given you the basics of classes and objects in Scala, and shown you how to compile and run applications. In the next chapter, you'll learn about Scala's basic types and how to use them.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 4:</H4>
<P><A name=footnote4-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The reason parameters are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s are easier to reason about. You needn't look further to determine if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reassigned, as you must do with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>.</P>
<P><A name=footnote4-2>[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>We used a cache here to show a singleton object with a field. A cache such as this is a performance optimization that trades off memory for computation time. In general, you would likely use such a cache only if you encountered a performance problem that the cache solves, and might use a weak map, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>WeakHashMap</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.collection.jcl</SPAN>, so that entries in the cache could be garbage collected if memory becomes scarce.</P>
<P><A name=footnote4-3>[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Because the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>new</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only used to instantiate classes, the new object created here is an instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, not the singleton object of the same name.</P>
<P><A name=footnote4-4>[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The name of the synthetic class is the object name plus a dollar sign. Thus the synthetic class for the singleton object named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ChecksumAccumulator$</SPAN>.</P>
<P><A name=footnote4-5>[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If you're a Java programmer, you can think of this import as similar to the static import feature introduced in Java 5. One difference in Scala, however, is that you can import members from any object, not just singleton objects.</P>
<P><A name=footnote4-6>[6]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The actual mechanism that the scala program uses to "interpret" a Scala source file is that it compiles the Scala source code to Java bytecodes, loads them immediately via a class loader, and executes them.</P></DIV>