<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 6 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Functional Objects</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>With the understanding of Scala basics you gained in previous chapters, you're ready to see how to design more full-featured classes in Scala. The emphasis in this chapter is on classes that define functional objects, that is, objects that do not have any mutable state.<A id=i47852440-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>As a running example, we'll create several variants of a class that models rational numbers as immutable objects. Along the way, we'll show you more aspects of object-oriented programming in Scala: class parameters and constructors, methods and operators, private members, overriding, checking preconditions, overloading, and self references<A id=i1689782844-2></A><A id=i-2121954815-1></A>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.1></A>6.1 A specification for class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.1">link</A>]</SPAN></H3>
<P><A name=sec:class-for-rational-numbers></A></P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">rational number</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a number that can be expressed as a ratio<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>n</SUP>/<SUB>d</SUB>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>n</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>d</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>d</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>n</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">numerator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>d</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">denominator</SPAN>. Examples of rational numbers are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>2</SUB>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>2</SUP>/<SUB>3</SUB>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>112</SUP>/<SUB>239</SUB>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>2</SUP>/<SUB>1</SUB>. Compared to floating-point numbers, rational numbers have the advantage that fractions are represented exactly, without rounding or approximation.</P>
<P>The class we'll design in this chapter must model the behavior of rational numbers, including allowing them to be added, subtracted, multiplied, and divided. To add two rationals, you must first obtain a common denominator, then add the two numerators. For example, to add<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>2</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>2</SUP>/<SUB>3</SUB>, you multiply both parts of the left operand by 3 and both parts of the right operand by 2, which gives you<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>3</SUP>/<SUB>6</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>4</SUP>/<SUB>6</SUB>. Adding the two numerators yields the result,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>7</SUP>/<SUB>6</SUB>. To multiply two rational numbers, you can simply multiply their numerators and multiply their denominators. Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>2</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>*<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>2</SUP>/<SUB>5</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>2</SUP>/<SUB>10</SUB>, which can be represented more compactly in its "normalized" form as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>5</SUB>. You divide by swapping the numerator and denominator of the right operand and then multiplying. For instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>2</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>/<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>3</SUP>/<SUB>5</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>1</SUP>/<SUB>2</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>*<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>5</SUP>/<SUB>3</SUB>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>5</SUP>/<SUB>6</SUB>.</P>
<P>One, maybe rather trivial, observation is that in mathematics, rational numbers do not have mutable state. You can add one rational number to another, but the result will be a new rational number. The original numbers will not have "changed." The immutable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class we'll design in this chapter will have the same property. Each rational number will be represented by one<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. When you add two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects, you'll create a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object to hold the sum.</P>
<P>This chapter will give you a glimpse of some of the ways Scala enables you to write libraries that feel like native language support. For example, at the end of this chapter you'll be able to do this with class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;oneHalf&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <SPAN class=output style="COLOR: rgb(90,0,0)">oneHalf:&nbsp;Rational&nbsp;=&nbsp;1/2</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;twoThirds&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <SPAN class=output style="COLOR: rgb(90,0,0)">twoThirds:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;(oneHalf&nbsp;/&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">7</SPAN>)&nbsp;+&nbsp;(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;-&nbsp;twoThirds)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;Rational&nbsp;=&nbsp;17/42</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.2></A>6.2 Constructing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.2">link</A>]</SPAN></H3>
<P>A good place to start designing class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to consider how client programmers will create a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. Given we've decided to make<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects immutable, we'll require that clients provide all data needed by an instance (in this case, a numerator and a denominator) when they construct the instance. Thus, we will start the design with this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)
</PRE>One of the first things to note about this line of code is that if a class doesn't have a body, you don't need to specify empty curly braces (though you could, of course, if you wanted to).<A id=i-1274918996-1></A><A id=i-1738295964-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The identifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the parentheses after the class name,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">class parameters</EM><A id=i177886610-1></A>. The Scala compiler will gather up these two class parameters and create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">primary constructor</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes the same two parameters.<A id=i2081307927-1></A><A id=i161912641-1></A> 
<P></P>
<DIV class=aside style="BORDER-RIGHT: black thin solid; PADDING-RIGHT: 20px; BORDER-TOP: black thin solid; PADDING-LEFT: 20px; PADDING-BOTTOM: 10px; MARGIN: 25px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px; BORDER-BOTTOM: black thin solid">
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Immutable object trade-offs</H3>
<P>Immutable objects offer several advantages over mutable objects, and one potential disadvantage.<A id=i1835948581-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>First, immutable objects are often easier to reason about than mutable ones, because they do not have complex state spaces that change over time. Second, you can pass immutable objects around quite freely, whereas you may need to make defensive copies<A id=i-1422525536-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of mutable objects before passing them to other code. Third, there is no way for two threads concurrently accessing an immutable to corrupt its state once it has been properly constructed, because no thread can change the state of an immutable. Fourth, immutable objects make safe hashtable keys. If a mutable object is mutated after it is placed into a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>HashSet</SPAN>, for example, that object may not be found the next time you look into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>HashSet</SPAN>.</P>
<P>The main disadvantage of immutable objects is that they sometimes require that a large object graph be copied where otherwise an update could be done in place. In some cases this can be awkward to express and might also cause a performance bottleneck. As a result, it is<A id=i-222173474-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>not uncommon for libraries to provide mutable alternatives to immutable classes. For example, class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>StringBuilder</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a mutable alternative to the immutable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN>. We'll give you more information on designing mutable objects in Scala in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/stateful-objects.html">Chapter 18</A>.</P></DIV>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>This initial<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>example highlights a difference between Java and Scala.<A id=i263298648-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In Java, classes have constructors, which can take parameters, whereas in Scala, classes can take parameters directly. The Scala notation is more concise&#8212;class parameters can be used directly in the body of the class; there's no need to define fields and write assignments that copy constructor parameters into fields. This can yield substantial savings in boilerplate code, especially for small classes.</P></DIV>
<P>The Scala compiler will compile any code you place in the class body, which isn't part of a field or a method definition, into the primary constructor. For example, you could print a debug message like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  &nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Created&nbsp;"</SPAN>+&nbsp;n&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;d)
  }
</PRE>Given this code, the Scala compiler would place the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>'s primary constructor. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>call will, therefore, print its debug message whenever you create a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instance:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">Created&nbsp;1/2</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;Rational&nbsp;=&nbsp;Rational@90110a</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.3></A>6.3 Reimplementing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.3">link</A>]</SPAN></H3>
<P><A name=sec:reimp-tostring></A></P>
<P>When we created an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the previous example, the interpreter printed "Rational@90110a". The interpreter obtained this somewhat funny looking string by calling<SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. By default, class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>inherits the implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>java.lang.Object</SPAN>, which just prints the class name, an @ sign, and a hexadecimal number. The result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is primarily intended to help programmers by providing information that can be used in debug print statements, log messages, test failure reports, and interpreter and debugger output. The result currently provided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not especially helpful, because it doesn't give any clue about the rational number's value. A more useful implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>would print out the values of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>'s numerator and denominator. You can<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">override</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the default implementation by adding a method<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, like this:<A id=i-189935346-1></A><A id=i-720005867-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;n&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;d
  }
</PRE>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>override</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier in front of a method definition signals that a previous method definition is overridden; more on this in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html">Chapter 10</A>. Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>numbers will display nicely now, we removed the debug<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement we put into the body of previous version of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>.<A id=i1201360043-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can test the new behavior of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the interpreter:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;x&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">x:&nbsp;Rational&nbsp;=&nbsp;1/3</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;y&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">7</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">y:&nbsp;Rational&nbsp;=&nbsp;5/7</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.4></A>6.4 Checking preconditions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.4">link</A>]</SPAN></H3>
<P><A name=sec:checking-preconditions></A></P>
<P>As a next step, we will turn our attention to a problem with the<A id=i1294809499-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>current behavior of the primary constructor. As mentioned at the beginning of this chapter, rational numbers may not have a zero in the denominator. Currently, however, the primary constructor accepts a zero passed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res1:&nbsp;Rational&nbsp;=&nbsp;5/0</SPAN>
</PRE>One of the benefits of object-oriented programming is that it allows you to encapsulate data inside objects so that you can ensure the data is valid throughout its lifetime. In the case of an immutable object such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, this means that you should ensure the data is valid when the object is constructed. Given that a zero denominator is an invalid state for a<SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>number, you should not let a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>be constructed if a zero is passed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter. 
<P></P>
<P>The best way to approach this problem is to define as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">precondition</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the primary constructor that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero. A precondition is a constraint on values passed into a method or constructor, a requirement which callers must fulfill. One way to do that is to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>require</SPAN>,<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-1">[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  &nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;n&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;d
  }
</PRE>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>require</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method takes one boolean parameter. If the passed value is true,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>require</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return normally<A id=i-2113140869-1></A>. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>require</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will prevent the object from being constructed by throwing an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>IllegalArgumentException</SPAN>. 
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.5></A>6.5 Adding fields<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.5">link</A>]</SPAN></H3>
<P><A name=sec:adding-fields></A></P>
<P>Now that the primary constructor is properly enforcing its precondition, we will turn our attention to supporting addition. To do so, we'll define a public<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method on class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>that takes another<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a parameter. To keep<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>immutable, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method must not add the passed rational number to itself. Rather, it must create and return a new<SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that holds the sum. You might think you could write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>this way:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;This&nbsp;won't&nbsp;compile</SPAN>
  &nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;n&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;d
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n&nbsp;*&nbsp;that.d&nbsp;+&nbsp;that.n&nbsp;*&nbsp;d,&nbsp;d&nbsp;*&nbsp;that.d)
  }
</PRE>However, given this code the compiler will complain:<A id=i988779894-1></A><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &lt;console&gt;:11:&nbsp;error:&nbsp;value&nbsp;d&nbsp;is&nbsp;not&nbsp;a&nbsp;member&nbsp;of&nbsp;Rational
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Rational(n&nbsp;*&nbsp;that.d&nbsp;+&nbsp;that.n&nbsp;*&nbsp;d,&nbsp;d&nbsp;*&nbsp;that.d)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
  &lt;console&gt;:11:&nbsp;error:&nbsp;value&nbsp;d&nbsp;is&nbsp;not&nbsp;a&nbsp;member&nbsp;of&nbsp;Rational
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Rational(n&nbsp;*&nbsp;that.d&nbsp;+&nbsp;that.n&nbsp;*&nbsp;d,&nbsp;d&nbsp;*&nbsp;that.d)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
</PRE>
<P>Although class parameters<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are in scope in the code of your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, you can only access their value on the object on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>was invoked. Thus, when you say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN>'s implementation, the compiler is happy to provide you with the values for these class parameters. But it won't let you say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that.n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that.d</SPAN>, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not refer to the<SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>was invoked.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-2">[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>To access the numerator and denominator on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that</SPAN>, you'll need to make them into fields.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:rational-fields">Listing 6.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows how you could add these fields to class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-3">[3]</A><A id=i2138903369-1></A><A id=i-590826255-1></A></P>
<P><A name=lst:rational-fields></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;numer:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;n
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;denom:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;d
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;numer&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;denom
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;+&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 6.1 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with fields.</H5>
<P>In the<SPAN class=Apple-converted-space>&nbsp;</SPAN>version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:rational-fields">Listing 6.1</A>, we added two fields named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN>, and initialized them with the values of class parameters<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-4">[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>We also changed the implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that they use the fields, not the class parameters. This version of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>compiles. You can test it by adding some rational numbers:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;oneHalf&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">oneHalf:&nbsp;Rational&nbsp;=&nbsp;1/2</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;twoThirds&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">twoThirds:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;oneHalf&nbsp;add&nbsp;twoThirds
  <SPAN class=output style="COLOR: rgb(90,0,0)">res3:&nbsp;Rational&nbsp;=&nbsp;7/6</SPAN>
</PRE>
<P></P>
<P>One other thing you can do now that you couldn't do before is access the numerator and denominator values from outside the object. Simply access the public<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN>fields, like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;r&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">r:&nbsp;Rational&nbsp;=&nbsp;1/2</SPAN>
  <BR>  scala&gt;&nbsp;r.numer
  <SPAN class=output style="COLOR: rgb(90,0,0)">res4:&nbsp;Int&nbsp;=&nbsp;1</SPAN>
  <BR>  scala&gt;&nbsp;r.denom
  <SPAN class=output style="COLOR: rgb(90,0,0)">res5:&nbsp;Int&nbsp;=&nbsp;2</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.6></A>6.6 Self references<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.6">link</A>]</SPAN></H3>
<P><A name=sec:self-references></A></P>
<P>The keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the<A id=i3559070-1></A><A id=i423816156-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>object instance on which the currently executing method was invoked, or if used in a constructor, the object instance being constructed. As an example, consider adding a method,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>lessThan</SPAN>, which tests whether the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is smaller than a parameter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;lessThan(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>)&nbsp;=&nbsp;
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>.numer&nbsp;*&nbsp;that.denom&nbsp;&lt;&nbsp;that.numer&nbsp;*&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>.denom
</PRE>Here,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this.numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the numerator of the object on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>lessThan</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>was invoked. You can also leave off the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix and write just<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN>; the two notations are equivalent. 
<P></P>
<P>As an example where you can't do without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN>, consider adding a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>max</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method to class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that returns the greater of the given rational number and an argument:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;max(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>)&nbsp;=&nbsp;
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>.lessThan(that))&nbsp;that&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>
</PRE>Here, the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is redundant. You could have equally well left it off and written:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>lessThan(that)</SPAN>. But the second<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents the result of the method in the case where the test returns false; were you to omit it, there would be nothing left to return! 
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.7></A>6.7 Auxiliary constructors<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.7">link</A>]</SPAN></H3>
<P><A name=sec:multicons></A></P>
<P>Sometimes you need multiple constructors in a class. In Scala, constructors other than the primary constructor are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g729406368"><EM style="FONT-STYLE: italic">auxiliary constructors</EM></A>.<A id=i-717257147-1></A><A id=i1136761043-1></A><A id=i-1656673269-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, a rational number with a denominator of 1 can be written more succinctly as simply the numerator. Instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>5</SUP>/<SUB>1</SUB>, for example, you can just write 5. It might be nice, therefore, if instead of writing<SPAN class=code>new</SPAN>&nbsp;<SPAN class=code>Rational(5,</SPAN>&nbsp;<SPAN class=code>1)</SPAN>, client programmers could simply write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>new</SPAN>&nbsp;<SPAN class=code>Rational(5)</SPAN>. This would require adding an auxiliary constructor to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes only one argument, the numerator, with the denominator predefined to be 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:aux-constructor">Listing 6.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows what that would look like.</P>
<P><A name=lst:aux-constructor></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;numer:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;n
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;denom:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;d
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;auxiliary&nbsp;constructor</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;numer&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;denom
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;+&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 6.2 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an auxiliary constructor.</H5>
<P>Auxiliary constructors in Scala start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>def</SPAN>&nbsp;<SPAN class=code>this(...)</SPAN>. The body of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>'s auxiliary constructor merely invokes the primary constructor, passing along its lone argument,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN>, as the numerator and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the denominator. You can see the auxiliary constructor in action by typing the following into the interpreter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;y&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">y:&nbsp;Rational&nbsp;=&nbsp;3/1</SPAN>
</PRE>
<P></P>
<P>In Scala, every auxiliary constructor must invoke another constructor of the same class as its first action. In other words, the first statement in every auxiliary constructor in every Scala class will have the form "<SPAN class=code>this(</SPAN>...<SPAN class=code>)</SPAN>". The invoked constructor is either the primary constructor (as in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>example), or another auxiliary constructor that comes textually before the calling constructor. The net effect of this rule is that every constructor invocation in Scala will end up eventually calling the primary constructor of the class. The primary constructor is thus the single point of entry of a class.</P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>If you're familiar with Java, you may wonder why Scala's rules for constructors are a bit more restrictive than Java's. In Java, a constructor must either invoke another constructor of the same class, or directly invoke a constructor of the superclass, as its first action. In a Scala class, only the primary constructor can invoke a superclass constructor. The increased restriction in Scala is really a design trade-off that needed to be paid in exchange for the greater conciseness and simplicity of Scala's constructors compared to Java's. Superclasses and the details of how constructor invocation and inheritance interact will be explained in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html">Chapter 10</A>.</P></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.8></A>6.8 Private fields and methods<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.8">link</A>]</SPAN></H3>
<P>In the previous version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, we simply initialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>. As a result, the numerator and denominator of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be larger than needed. For example, the fraction<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>66</SUP>/<SUB>42</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>could be normalized to an equivalent reduced form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>11</SUP>/<SUB>7</SUB>, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>'s primary constructor doesn't currently do this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">66</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">42</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res6:&nbsp;Rational&nbsp;=&nbsp;66/42</SPAN>
</PRE>To normalize in this way, you need to divide the numerator and denominator by their<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">greatest common divisor</EM>. For example, the greatest common divisor of 66 and 42 is 6. (In other words, 6 is the largest integer that divides evenly into both 66 and 42.) Dividing both the numerator and denominator of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>66</SUP>/<SUB>42</SUB><SPAN class=Apple-converted-space>&nbsp;</SPAN>by 6 yields its reduced form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP>11</SUP>/<SUB>7</SUB>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:private-members">Listing 6.3</A>shows one way to do this: 
<P></P>
<P><A name=lst:private-members></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;g&nbsp;=&nbsp;gcd(n.abs,&nbsp;d.abs)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;numer&nbsp;=&nbsp;n&nbsp;/&nbsp;g
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;denom&nbsp;=&nbsp;d&nbsp;/&nbsp;g
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;add(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;+&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;numer&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;denom
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;gcd(a:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(b&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;a&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;gcd(b,&nbsp;a&nbsp;%&nbsp;b)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 6.3 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a private field and method.<A id=i694224322-2></A><A id=i1692219636-2></A><A id=i-1558980393-1></A><A id=i-1621898821-1></A></H5>
<P>In this version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, we added a private field,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN>, and modified the initializers<SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN>. (An<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">initializer</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the code that initializes a variable, for example, the "<SPAN class=code>n</SPAN>&nbsp;<SPAN class=code>/</SPAN>&nbsp;<SPAN class=code>g</SPAN>" that initializes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN>.) Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is private, it can be accessed inside the body of the class, but not outside<A id=i1857067865-1></A>. We also added a private method,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN>, which calculates the greatest common divisor of two passed<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN>s. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd(12,</SPAN>&nbsp;<SPAN class=code>8)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>4</SPAN>. As you saw in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#sec:classes-fields-methods">Section 4.1</A>, to make a field or method private you simply place the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>private</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword in front of its definition. The purpose of the private "helper method"<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to factor out code needed by some other part of the class, in this case, the primary constructor. To ensure<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always positive, we pass the absolute value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>, which we obtain by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>abs</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on them, a method you can invoke on any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get its absolute value.<A id=i-1171773097-1></A></P>
<P>The Scala compiler will place the code for the initializers of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>'s three fields into the primary constructor in the order in which they appear in the source code.<A id=i-400083503-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN>'s initializer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd(n.abs,</SPAN>&nbsp;<SPAN class=code>d.abs)</SPAN>, will execute before the other two, because it appears first in the source. Field<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be initialized with the result, the greatest common divisor of the absolute value of the class parameters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN>. Field<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is then used in the initializers of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN>. By dividing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by their greatest common divisor,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g</SPAN>, every<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>will be constructed in its normalized form:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">66</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">42</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res7:&nbsp;Rational&nbsp;=&nbsp;11/7</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.9></A>6.9 Defining operators<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.9">link</A>]</SPAN></H3>
<P>The current implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>addition is OK, but could be made more convenient to use. You might ask yourself why you can write:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  x&nbsp;+&nbsp;y
</PRE>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>y</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers or floating-point numbers, but you have to write:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  x.add(y)
</PRE>or at least:<SPAN style="COLOR: rgb(255,255,255)">$sn8978$</SPAN><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  x&nbsp;add&nbsp;y
</PRE>if they are rational numbers. There's no convincing reason why this should be so. Rational numbers are numbers just like other numbers. In a mathematical sense they are even more natural than, say, floating-point numbers. Why should you not use the natural arithmetic operators on them? In Scala you can do this. In the rest of this chapter, we'll show you how. 
<P></P>
<P>The first step is to replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the usual mathematical symbol. This is straightforward, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a legal identifier in Scala. We can simply define a method with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its name. While we're at it, you may as well implement a method named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that performs multiplication. The result is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:operator-methods">Listing 6.4</A>:</P>
<P><A name=lst:operator-methods></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;g&nbsp;=&nbsp;gcd(n.abs,&nbsp;d.abs)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;numer&nbsp;=&nbsp;n&nbsp;/&nbsp;g
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;denom&nbsp;=&nbsp;d&nbsp;/&nbsp;g
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;+&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;+&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;*&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;*&nbsp;that.numer,&nbsp;denom&nbsp;*&nbsp;that.denom)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;numer&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;denom
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;gcd(a:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(b&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;a&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;gcd(b,&nbsp;a&nbsp;%&nbsp;b)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 6.4 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with operator methods.</H5>
<P>With class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in this manner, you can now write:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;x&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">x:&nbsp;Rational&nbsp;=&nbsp;1/2</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;y&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">y:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;x&nbsp;+&nbsp;y
  <SPAN class=output style="COLOR: rgb(90,0,0)">res8:&nbsp;Rational&nbsp;=&nbsp;7/6</SPAN>
</PRE>As always, the operator syntax on the last input line is equivalent to a method call.<A id=i-614149608-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You could also write:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;x.+(y)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res9:&nbsp;Rational&nbsp;=&nbsp;7/6</SPAN>
</PRE>but this is not as readable. 
<P></P>
<P>Another thing to note is that given Scala's rules for operator precedence, which were described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/basic-types-and-operations.html#sec:precedence">Section 5.8</A>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method will bind more tightly than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>s. In other words, expressions involving<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>s will behave as expected.<A id=i1955596960-2></A><A id=i2084616098-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>y</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will execute as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>(x</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>y)</SPAN>, not<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>(x</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>x)</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>y</SPAN>:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;x&nbsp;+&nbsp;x&nbsp;*&nbsp;y
  <SPAN class=output style="COLOR: rgb(90,0,0)">res10:&nbsp;Rational&nbsp;=&nbsp;5/6</SPAN>
  <BR>  scala&gt;&nbsp;(x&nbsp;+&nbsp;x)&nbsp;*&nbsp;y
  <SPAN class=output style="COLOR: rgb(90,0,0)">res11:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;x&nbsp;+&nbsp;(x&nbsp;*&nbsp;y)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res12:&nbsp;Rational&nbsp;=&nbsp;5/6</SPAN>
</PRE>
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.10></A>6.10 Identifiers in Scala<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.10">link</A>]</SPAN></H3>
<P>You have now seen the two most important ways to form an identifier in Scala: alphanumeric and operator. Scala has very flexible rules for forming identifiers. Besides the two forms you have seen there are also two others. All four forms of identifier formation are described in this section.<A id=i1368189162-1></A></P>
<P>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">alphanumeric identifier</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts with a letter or underscore, which can be followed by further letters, digits, or underscores. The `$' character also counts as a letter, however it is reserved for identifiers generated by the Scala compiler. Identifiers in user programs should not contain `$' characters, even though it will compile; if they do this might lead to name clashes with identifiers generated by the Scala compiler.<A id=i-890920833-1></A></P>
<P>Scala follows Java's convention of using camel-case<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-5">[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>identifiers,<A id=i81954455-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>HashSet</SPAN>.<A id=i857734909-1></A><A id=i-917788527-1></A><A id=i350029111-1></A><A id=i-1611050102-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Although underscores are legal in identifiers, they are not used that often in Scala programs, in part to be consistent with Java, but also because underscores have many other non-identifier uses in Scala code<A id=i1978221382-1></A>. As a result, it is best to avoid identifiers like<SPAN class=code>to_string</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>__init__</SPAN>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>name_</SPAN>. Camel-case names of fields, method parameters, local variables, and functions should start with lower case letter, for example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>length</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>flatMap</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>s</SPAN>. Camel-case names of classes and traits should start with an upper case letter, for example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>BigInt</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>List</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>UnbalancedTreeMap</SPAN>.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-6">[6]</A></P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>One consequence of using a trailing underscore in an identifier is that if you attempt, for example, to write a declaration like this, "<SPAN class=code>val</SPAN>&nbsp;<SPAN class=code>name_:</SPAN>&nbsp;<SPAN class=code>Int</SPAN>&nbsp;<SPAN class=code>=</SPAN>&nbsp;<SPAN class=code>1</SPAN>", you'll get a compiler error. The compiler will think you are trying to declare a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named "<SPAN class=code>name_:</SPAN>". To get this to compile, you would need to insert an extra space before the colon, as in: "<SPAN class=code>val</SPAN>&nbsp;<SPAN class=code>name_</SPAN>&nbsp;<SPAN class=code>:</SPAN>&nbsp;<SPAN class=code>Int</SPAN>&nbsp;<SPAN class=code>=</SPAN>&nbsp;<SPAN class=code>1</SPAN>".</P></DIV>
<P>One way in which Scala's conventions depart from Java's involves constant names.<A id=i-422276785-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In Scala, the word<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">constant</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not just mean<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>. Even though a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does remain constant after it is initialized, it is still a variable. For example, method parameters are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s, but each time the method is called those<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s can hold different values. A constant is more permanent. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.Math.Pi</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to be the double value closest to the real value of &#960;, the ratio of a circle's circumference to its diameter. This value is unlikely to change ever, thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Pi</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is clearly a constant. You can also use constants to give names to values that would otherwise be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">magic numbers</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your code:<A id=i1838929623-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>literal values with no explanation, which in the worst case appear in multiple places. You may also want to define constants for use in pattern matching, a use case that will be described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html#subsec:kinds-of-patterns-variables">Section 15.2</A>. In Java, the convention is to give constants names that are all upper case, with underscores separating the words, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>MAX_VALUE</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>PI</SPAN>. In Scala, the convention is merely that the first character should<SPAN class=Apple-converted-space>&nbsp;</SPAN>be upper case. Thus, constants named in the Java style, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>X_OFFSET</SPAN>, will work as Scala constants, but the Scala convention is to use camel case for constants, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>XOffset</SPAN>.</P>
<P>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">operator identifier</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>consists of one or more operator characters.<A id=i1206563604-1></A><A id=i-12268236-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Operator characters are printable ASCII characters such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>:</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>?</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code><SPAN style="FONT-SIZE: large">~</SPAN></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>#</SPAN>.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#footnote6-7">[7]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Here are some examples of operator identifiers:</P>
<DIV align=center><SPAN class=code>+</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>++</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>:::</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>&lt;?&gt;</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>:-&gt;</SPAN></DIV>
<P>The Scala compiler will internally "mangle" operator identifiers to turn them into legal Java identifiers with embedded<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>$</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters. For instance, the identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>:-&gt;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be represented internally as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>$colon$minus$greater</SPAN>. If you ever wanted to access this identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN>from Java code, you'd need to use this internal representation.</P>
<P>Because operator identifiers in Scala can become arbitrarily long, there is a small difference between Java and Scala. In Java, the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x&lt;-y</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be parsed as four lexical symbols, so it would be equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>&lt;</SPAN>&nbsp;<SPAN class=code>-</SPAN>&nbsp;<SPAN class=code>y</SPAN>. In Scala,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>&lt;-</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be parsed as a single identifier, giving<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN>&nbsp;<SPAN class=code>&lt;-</SPAN>&nbsp;<SPAN class=code>y</SPAN>. If you want the first interpretation, you need to separate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>&lt;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-</SPAN>characters by a space. This is unlikely to be a problem in practice, as very few people would write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x&lt;-y</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Java without inserting spaces or parentheses between the operators.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">mixed identifier</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>consists of an alphanumeric identifier, which is followed by an underscore and an operator identifier.<A id=i-1955463099-1></A><A id=i1641787755-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>unary_+</SPAN><A id=i-1088310403-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>used as a method name defines a unary<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator. Or,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>myvar_=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>used as method name defines an assignment operator. In addition, the mixed identifier form<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>myvar_=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is generated by the Scala compiler to support<SPAN style="FONT-STYLE: italic">properties</SPAN>; more on that in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/stateful-objects.html">Chapter 18</A><A id=i-926053069-1></A>.</P>
<P><A name=sec:literal-identifier></A>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">literal identifier</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an arbitrary string enclosed in back ticks (<SPAN class=code>`</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>...<SPAN class=code>`</SPAN>).<A id=i-144177089-1></A><A id=i-1241489226-1></A><A id=i1204364761-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Some examples of literal identifiers are:</P>
<DIV align=center><SPAN class=code>`x`</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>`&lt;clinit&gt;`</SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code></SPAN>&nbsp;<SPAN class=code>`yield`</SPAN></DIV>
<P>The idea is that you can put any string that's accepted by the runtime as an identifier between back ticks. The result is always a Scala identifier. This works even if the name contained in the back ticks would be a Scala reserved word<A id=i1517246665-1></A>. A typical use case is accessing the static<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method in Java's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Thread</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class. You cannot write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Thread.yield()</SPAN>because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a reserved word in Scala. However, you can still name the method in back ticks,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>e.g.</I>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Thread.`yield`()</SPAN>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.11></A>6.11 Method overloading<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.11">link</A>]</SPAN></H3>
<P><A name=sec:method-overloading></A></P>
<P>Back to class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>. With the latest changes, you can now do<A id=i-1178969056-1></A><A id=i1636832800-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>addition and multiplication operations in a natural style on rational numbers. But one thing still missing is mixed arithmetic. For instance, you cannot multiply a rational number by an integer, because the operands of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>always have to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>s. So for a rational number<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>r</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>you can't write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>r</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>2</SPAN>. You must write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>r</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>new</SPAN>&nbsp;<SPAN class=code>Rational(2)</SPAN>, which is not as nice.</P>
<P>To make<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>even more convenient, we'll add new methods to the class that perform mixed addition and multiplication on rational numbers and integers. While we're at it, we'll add methods for subtraction and division too. The result is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:overloaded-methods">Listing 6.5</A>.</P>
<P><A name=lst:overloaded-methods></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;d:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;require(d&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;g&nbsp;=&nbsp;gcd(n.abs,&nbsp;d.abs)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;numer&nbsp;=&nbsp;n&nbsp;/&nbsp;g
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;denom&nbsp;=&nbsp;d&nbsp;/&nbsp;g
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>(n,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;+&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;+&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;+&nbsp;(i:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;+&nbsp;i&nbsp;*&nbsp;denom,&nbsp;denom)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;-&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numer&nbsp;*&nbsp;that.denom&nbsp;-&nbsp;that.numer&nbsp;*&nbsp;denom,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom&nbsp;*&nbsp;that.denom
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;-&nbsp;(i:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;-&nbsp;i&nbsp;*&nbsp;denom,&nbsp;denom)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;*&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;*&nbsp;that.numer,&nbsp;denom&nbsp;*&nbsp;that.denom)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;*&nbsp;(i:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;*&nbsp;i,&nbsp;denom)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;/&nbsp;(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer&nbsp;*&nbsp;that.denom,&nbsp;denom&nbsp;*&nbsp;that.numer)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;/&nbsp;(i:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(numer,&nbsp;denom&nbsp;*&nbsp;i)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;numer&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"/"</SPAN>+&nbsp;denom
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;gcd(a:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>,&nbsp;b:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(b&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;a&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;gcd(b,&nbsp;a&nbsp;%&nbsp;b)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 6.5 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with overloaded methods.<A id=i-1789856-1></A></H5>
<P>There are now two versions each of the arithmetic methods: one that takes a rational as its argument and another that takes an integer. In other words, each of these method names is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">overloaded</EM>, because each name is now being used by multiple methods. For example, the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used by one method that takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and another that takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN>. In a method call, the compiler picks the version of an overloaded method that correctly matches the types of the arguments. For instance, if the argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>y</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x.+(y)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=code>Rational</SPAN>, the compiler will pick the method<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter. But if the argument is an integer, the compiler will pick the method<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter instead. If you try this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;x&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">x:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;x&nbsp;*&nbsp;x
  <SPAN class=output style="COLOR: rgb(90,0,0)">res13:&nbsp;Rational&nbsp;=&nbsp;4/9</SPAN>
  <BR>  scala&gt;&nbsp;x&nbsp;*&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">res14:&nbsp;Rational&nbsp;=&nbsp;4/3</SPAN>
</PRE>You'll see that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method invoked is determined in each case by the type of the right operand. 
<P></P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>Scala's process of overloaded method resolution is very similar to Java's. In every case, the chosen overloaded version is the one that best matches the static types of the arguments. Sometimes there is no unique best matching version; in that case the compiler will give you an "ambiguous reference" error.</P></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.12></A>6.12 Implicit conversions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.12">link</A>]</SPAN></H3>
<P>Now that you can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>r</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>2</SPAN>, you might also want to swap the operands, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>2</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>r</SPAN>. Unfortunately this does not work yet:<A id=i869323971-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;*&nbsp;r
  <SPAN class=output style="COLOR: rgb(90,0,0)">&lt;console&gt;:7:&nbsp;error:&nbsp;overloaded&nbsp;method&nbsp;value&nbsp;*&nbsp;with&nbsp;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">alternatives&nbsp;(Double)Double&nbsp;&lt;and&gt;&nbsp;(Float)Float&nbsp;&lt;and&gt;&nbsp;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">(Long)Long&nbsp;&lt;and&gt;&nbsp;(Int)Int&nbsp;&lt;and&gt;&nbsp;(Char)Int&nbsp;&lt;and&gt;&nbsp;(Short)Int&nbsp;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&lt;and&gt;&nbsp;(Byte)Int&nbsp;cannot&nbsp;be&nbsp;applied&nbsp;to&nbsp;(Rational)</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;*&nbsp;r</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</SPAN>
</PRE>
<P></P>
<P>The problem here is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>2</SPAN>&nbsp;<SPAN class=code>*</SPAN>&nbsp;<SPAN class=code>r</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>2.*(r)</SPAN>, so it is a method call on the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>2</SPAN>, which is an integer. But the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class contains no multiplication method that takes a<SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument&#8212;it couldn't because class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a standard class in the Scala library.</P>
<P>However, there is another way to solve this problem in Scala: You can create an implicit conversion that automatically converts integers to rational numbers when needed.<A id=i-2127602858-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Try adding this line in the interpreter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">implicit</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;intToRational(x:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(x)
</PRE>This defines a conversion method from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>implicit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier in front of the method tells the compiler to apply it automatically in a number of situations<A id=i-425423387-1></A>. With the conversion defined, you can now retry the example that failed before:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;r&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Rational</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  <SPAN class=output style="COLOR: rgb(90,0,0)">r:&nbsp;Rational&nbsp;=&nbsp;2/3</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;*&nbsp;r
  <SPAN class=output style="COLOR: rgb(90,0,0)">res16:&nbsp;Rational&nbsp;=&nbsp;4/3</SPAN>
</PRE>Note that for an implicit conversion to work, it needs to be in scope. If you place the implicit method definition inside class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, it won't be in scope in the interpreter. For now, you'll need to define it directly in the interpreter. 
<P></P>
<P>As you can glimpse from this example, implicit conversions are a very powerful technique for making libraries more flexible and more convenient to use. Because they are so powerful, they can also be easily misused. You'll find out more on implicit conversions, including ways to bring them into scope where they are needed, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implicit-conversions-and-parameters.html">Chapter 21</A>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.13></A>6.13 A word of caution<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.13">link</A>]</SPAN></H3>
<P>As this chapter has demonstrated, creating methods with operator names<A id=i771080752-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and defining implicit conversions can help you design libraries for which client code is concise and easy to understand. Scala gives you a great deal of power to design such easy-to-use libraries, but please bear in mind that with power comes responsibility.</P>
<P>If used unartfully, both operator methods and implicit conversions can give rise to client code that is hard to read and understand. Because implicit conversions are applied implicitly by the compiler, not explicitly written down in the source code, it can be non-obvious to client programmers what implicit conversions are being applied. And although operator methods will usually make client code more concise, they will only make it more readable to the extent client programmers will be able to recognize and remember the meaning of each operator.</P>
<P>The goal you should keep in mind as you design libraries is not merely<A id=i-506868082-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>enabling concise client code, but readable, understandable client code. Conciseness will often be a big part of that readability, but you can take conciseness too far. By designing libraries that enable tastefully concise and at the same time understandable client code, you can help those client programmers work productively.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=6.14></A>6.14 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#6.14">link</A>]</SPAN></H3>
<P>In this chapter, you saw more aspects of classes in Scala. You saw how to add parameters to a class, define several constructors, define operators as methods, and customize classes so that they are natural to use. Maybe most importantly, you saw that defining and using immutable objects is a quite natural way to code in Scala.</P>
<P>Although the final version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>shown in this chapter fulfills the requirements set forth at the beginning of the chapter, it could still be improved. We will in fact return to this example later in the book. For example, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/object-equality.html">Chapter 28</A>, you'll learn how to override<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>equals</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>hashcode</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allow<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>s to behave better when compared with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>==</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or placed into hash tables. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/implicit-conversions-and-parameters.html">Chapter 21</A>, you'll learn how to place implicit method definitions in a companion object for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>, so they can be more easily placed into scope when client programmers are working with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN>s.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 6:</H4>
<P><A name=footnote6-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>require</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method is defined in standalone object,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN>. As mentioned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/classes-and-objects.html#sec:a-scala-application">Section 4.4</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN>'s members are imported automatically into every Scala source file.</P>
<P><A name=footnote6-2>[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Actually, you could add a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to itself, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>would refer to the object on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>was invoked. But because you can pass any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Rational</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>add</SPAN>, the compiler still won't let you say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>that.n</SPAN>.</P>
<P><A name=footnote6-3>[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html#sec:parametric-fields">Section 10.6</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>you'll find out about<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">parametric fields</EM>, which provide a shorthand for writing the same code.</P>
<P><A name=footnote6-4>[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>d</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used in the body of the class, given they are only used inside constructors, the Scala compiler will not emit fields for them. Thus, given this code the Scala compiler will generate a class with two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields, one for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>numer</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and one for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>denom</SPAN>.</P>
<P><A name=footnote6-5>[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This style of naming identifiers is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">camel case</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>because the identifiersHaveHumps consisting of the embedded capital letters.</P>
<P><A name=footnote6-6>[6]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-lists.html#sec:list-patterns">Section 16.5</A>, you'll see that sometimes you may want to give a special kind of class known as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">case class</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a name consisting solely of operator characters. For example, the Scala API contains a class named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>::</SPAN>, which facilitates pattern matching on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>List</SPAN>s.</P>
<P><A name=footnote6-7>[7]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>More precisely, an operator character belongs to the Unicode set of mathematical symbols(Sm) or other symbols(So), or to the 7-bit ASCII characters that are not letters, digits, parentheses, square brackets, curly braces, single or double quote, or an underscore, period, semi-colon, comma, or back tick character.</P></DIV>