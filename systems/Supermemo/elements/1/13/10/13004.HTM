<A style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" name=Unit-Testing-in-C-1></A><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium Simsun; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H1 class=chapter style="FONT-FAMILY: Simsun; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">2. Unit Testing in C</H1>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&nbsp;C unit testing</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The approach to unit testing frameworks used for Check originated with Smalltalk, which is a late binding object-oriented language supporting reflection. Writing a framework for C requires solving some special problems that frameworks for Smalltalk, Java or Python don&#8217;t have to face. In all of those language, the worst that a unit test can do is fail miserably, throwing an exception of some sort. In C, a unit test is just as likely to trash its address space as it is to fail to meet its test requirements, and if the test framework sits in the same address space, goodbye test framework.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>To solve this problem, Check uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fork()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call to create a new address space in which to run each unit test, and then uses message queues to send information on the testing process back to the test framework. That way, your unit test can do all sorts of nasty things with pointers, and throw a segmentation fault, and the test framework will happily note a unit test error, and chug along.</FONT></P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>The Check framework is also designed to play happily with common development environments for C programming. The author designed Check around Autoconf/Automake (thus the name Check:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the idiom used for testing with Autoconf/Automake), and the test failure messages thrown up by Check use the common idiom of &#8216;<SAMP>filename:linenumber:message</SAMP>&#8217; used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and family to report problems in source code. With (X)Emacs, the output of Check allows one to quickly navigate to the location of the unit test that failed; presumably that also works in VI and IDEs.</FONT></P>
<TABLE class=menu style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" cellSpacing=0 border=0>
<TBODY>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_2.html#Other-Frameworks-for-C">2.1 Other Frameworks for C</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" name=Other-Frameworks-for-C></A><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium Simsun; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=middle align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_2.html#Unit-Testing-in-C"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=middle align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=middle align=left>&nbsp;</TD>
<TD vAlign=middle align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_2.html#Unit-Testing-in-C"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=middle align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_2.html#Unit-Testing-in-C"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=middle align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=middle align=left>&nbsp;</TD>
<TD vAlign=middle align=left>&nbsp;</TD>
<TD vAlign=middle align=left>&nbsp;</TD>
<TD vAlign=middle align=left>&nbsp;</TD>
<TD vAlign=middle align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=middle align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=middle align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=middle align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" name=Other-Frameworks-for-C-1></A><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium Simsun; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="FONT-FAMILY: Simsun; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">2.1 Other Frameworks for C</H2><A style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" name=index-other-frameworks></A><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium Simsun; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" name=index-frameworks></A><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium Simsun; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The authors know of the following additional unit testing frameworks for C:</P>
<DL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" compact>
<DT>AceUnit 
<DD>
<P>AceUnit (Advanced C and Embedded Unit) bills itself as a comfortable C code unit test framework. It tries to mimick JUnit 4.x and includes reflection-like capabilities. AceUnit can be used in resource constraint environments, e.g. embedded software development, and importantly it runs fine in environments where you cannot include a single standard header file and cannot invoke a single standard C function from the ANSI / ISO C libraries. It also has a Windows port. It does not use forks to trap signals, although the authors have expressed interest in adding such a feature. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://aceunit.sourceforge.net/">AceUnit homepage</A>.</P>
<DT>GNU Autounit 
<DD>
<P>Much along the same lines as Check, including forking to run unit tests in a separate address space (in fact, the original author of Check borrowed the idea from<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>GNU</ACRONYM>Autounit).<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>GNU</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>Autounit uses GLib extensively, which means that linking and such need special options, but this may not be a big problem to you, especially if you are already using GTK or GLib. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://autounit.tigris.org/">GNU Autounit homepage</A>.</P>
<DT>cUnit 
<DD>
<P>Also uses GLib, but does not fork to protect the address space of unit tests. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://web.archive.org/web/*/http://people.codefactory.se/~spotty/cunit/">archived cUnit homepage</A>.</P>
<DT>CUnit 
<DD>
<P>Standard C, with plans for a Win32 GUI implementation. Does not currently fork or otherwise protect the address space of unit tests. In early development. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://cunit.sourceforge.net/">CUnit homepage</A>.</P>
<DT>CuTest 
<DD>
<P>A simple framework with just one .c and one .h file that you drop into your source tree. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://cutest.sourceforge.net/">CuTest homepage</A>.</P>
<DT><FONT class=extract>CppUnit </FONT>
<DD>
<P><FONT class=extract>The premier unit testing framework for C++; you can also use it to test C code. It is stable, actively developed, and has a GUI interface. The primary reasons not to use CppUnit for C are first that it is quite big, and second you have to write your tests in C++, which means you need a C++ compiler. If these don&#8217;t sound like concerns, it is definitely worth considering, along with other C++ unit testing frameworks. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><A href="http://cppunit.sourceforge.net/cppunit-wiki"><FONT class=extract>CppUnit homepage</FONT></A><FONT class=extract>.</FONT></P>
<DT>embUnit 
<DD>
<P>embUnit (Embedded Unit) is another unit test framework for embedded systems. This one appears to be superseded by AceUnit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceforge.net/projects/embunit/">Embedded Unit homepage</A>.</P>
<DT>MinUnit 
<DD>
<P>A minimal set of macros and that&#8217;s it! The point is to show how easy it is to unit test your code. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.jera.com/techinfo/jtns/jtn002.html">MinUnit homepage</A>.</P>
<DT>CUnit for Mr. Ando 
<DD>
<P>A CUnit implementation that is fairly new, and apparently still in early development. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://park.ruru.ne.jp/ando/work/CUnitForAndo/html/">CUnit for Mr. Ando homepage</A>.</P></DD></DL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This list was last updated in March 2008. If you know of other C unit test frameworks, please send an email plus description to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="mailto:check-devel%20AT%20lists.sourceforge.net">check-devel AT lists.sourceforge.net</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and we will add the entry to this list.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">It is the authors&#8217; considered opinion that forking or otherwise trapping and reporting signals is indispensable for unit testing (but it probably wouldn&#8217;t be hard to add that to frameworks without that feature). Try &#8217;em all out: adapt this tutorial to use all of the frameworks above, and use whichever you like. Contribute, spread the word, and make one a standard. Languages such as Java and Python are fortunate to have standard unit testing frameworks; it would be desirable that C have one as well.