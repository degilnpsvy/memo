<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Advanced-Features-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H1 class=chapter style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4. Advanced Features</H1>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">What you&#8217;ve seen so far is all you need for basic unit testing. The features described in this section are additions to Check that make it easier for the developer to write, run, and analyze tests.</P>
<TABLE class=menu style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=0 border=0>
<TBODY>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Convenience-Test-Functions">4.1 Convenience Test Functions</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Running-Multiple-Cases">4.2 Running Multiple Cases</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#No-Fork-Mode">4.3 No Fork Mode</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixtures">4.4 Test Fixtures</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Multiple-Suites-in-one-SRunner">4.5 Multiple Suites in one SRunner</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Selective-Running-of-Tests">4.6 Selective Running of Tests</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Testing-Signal-Handling-and-Exit-Values">4.7 Testing Signal Handling and Exit Values</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Looping-Tests">4.8 Looping Tests</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Timeouts">4.9 Test Timeouts</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Determining-Test-Coverage">4.10 Determining Test Coverage</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Logging">4.11 Test Logging</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Subunit-Support">4.12 Subunit Support</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Convenience-Test-Functions></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Running-Multiple-Cases"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Convenience-Test-Functions-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.1 Convenience Test Functions</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function for all tests can lead to lot of repetitive code that is hard to read. For your convenience Check provides a set of functions (actually macros) for testing often used conditions.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>ck_abort</CODE><A name=index-ck_005fabort-1></A> 
<DD>
<P>Unconditionally fails test with default message.</P>
<DT><CODE>ck_abort_msg</CODE><A name=index-ck_005fabort_005fmsg-1></A> 
<DD>
<P>Unconditionally fails test with user supplied message.</P>
<DT><CODE>ck_assert</CODE><A name=index-ck_005fassert-1></A> 
<DD>
<P>Fails test if supplied condition evaluates to false.</P>
<DT><CODE>ck_assert_msg</CODE><A name=index-ck_005fassert_005fmsg-1></A> 
<DD>
<P>Fails test if supplied condition evaluates to false and displays user provided message.</P>
<DT><CODE>ck_assert_int_eq</CODE><A name=index-ck_005fassert_005fint_005feq-1></A> 
<DT><CODE>ck_assert_int_ne</CODE><A name=index-ck_005fassert_005fint_005fne></A> 
<DT><CODE>ck_assert_int_lt</CODE><A name=index-ck_005fassert_005fint_005flt></A> 
<DT><CODE>ck_assert_int_le</CODE><A name=index-ck_005fassert_005fint_005fle></A> 
<DT><CODE>ck_assert_int_gt</CODE><A name=index-ck_005fassert_005fint_005fgt></A> 
<DT><CODE>ck_assert_int_ge</CODE><A name=index-ck_005fassert_005fint_005fge></A> 
<DD>
<P>Compares two signed integer values (<CODE>intmax_t</CODE>) and displays predefined message with condition and values of both input parameters on failure. The operator used for comparison is different for each function and is indicated by the last two letters of the function name. The abbreviations<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ne</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>le</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gt</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ge</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>correspond to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>==</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!=</CODE>,<CODE>&lt;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;=</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively.</P>
<DT><CODE>ck_assert_uint_eq</CODE><A name=index-ck_005fassert_005fuint_005feq></A> 
<DT><CODE>ck_assert_uint_ne</CODE><A name=index-ck_005fassert_005fuint_005fne></A> 
<DT><CODE>ck_assert_uint_lt</CODE><A name=index-ck_005fassert_005fuint_005flt></A> 
<DT><CODE>ck_assert_uint_le</CODE><A name=index-ck_005fassert_005fuint_005fle></A> 
<DT><CODE>ck_assert_uint_gt</CODE><A name=index-ck_005fassert_005fuint_005fgt></A> 
<DT><CODE>ck_assert_uint_ge</CODE><A name=index-ck_005fassert_005fuint_005fge></A> 
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_int_*</CODE>, but compares two unsigned integer values (<CODE>uintmax_t</CODE>) instead.</P>
<DT><CODE>ck_assert_str_eq</CODE><A name=index-ck_005fassert_005fstr_005feq-1></A> 
<DT><CODE>ck_assert_str_ne</CODE><A name=index-ck_005fassert_005fstr_005fne></A> 
<DT><CODE>ck_assert_str_lt</CODE><A name=index-ck_005fassert_005fstr_005flt></A> 
<DT><CODE>ck_assert_str_le</CODE><A name=index-ck_005fassert_005fstr_005fle></A> 
<DT><CODE>ck_assert_str_gt</CODE><A name=index-ck_005fassert_005fstr_005fgt></A> 
<DT><CODE>ck_assert_str_ge</CODE><A name=index-ck_005fassert_005fstr_005fge></A> 
<DD>
<P>Compares two null-terminated<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>string values, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcmp()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function internally, and displays predefined message with condition and input parameter values on failure. The comparison operator is again indicated by last two letters of the function name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_str_lt(a, b)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will pass if the unsigned numerical value of the character string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than that of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>.</P>
<DT><CODE>ck_assert_ptr_eq</CODE><A name=index-ck_005fassert_005fptr_005feq></A> 
<DT><CODE>ck_assert_ptr_ne</CODE><A name=index-ck_005fassert_005fptr_005fne></A> 
<DD>
<P>Compares two pointers and displays predefined message with condition and values of both input parameters on failure. The operator used for comparison is different for each function and is indicated by the last two letters of the function name. The abbreviations<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ne</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>correspond to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>==</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively.</P>
<DT><CODE>fail</CODE><A name=index-fail></A> 
<DD>
<P>(Deprecated) Unconditionally fails test with user supplied message.</P>
<DT><CODE>fail_if</CODE><A name=index-fail_005fif></A> 
<DD>
<P>(Deprecated) Fails test if supplied condition evaluates to false and displays user provided message.</P>
<DT><CODE>fail_unless</CODE><A name=index-fail_005funless></A> 
<DD>
<P>(Deprecated) Fails test if supplied condition evaluates to true and displays user provided message.</P></DD></DL>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Running-Multiple-Cases></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Convenience-Test-Functions"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#No-Fork-Mode"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Running-Multiple-Cases-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.2 Running Multiple Cases</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">What happens if we pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>amount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_create()</CODE>? What should happen? Let&#8217;s write a unit test. Since we are now testing limits, we should also test what happens when we create<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Money</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>amount == 0</CODE>. Let&#8217;s put these in a separate test case called &#8220;Limits&#8221; so that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_suite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is changed like so:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- tests/check_money.3.c	2013-09-20 23:37:40.309738005 -0400
+++ tests/check_money.6.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,38 +1,63 @@
 #include &lt;stdlib.h&gt;
 #include &lt;check.h&gt;
 #include "../src/money.h"
 
 START_TEST (test_money_create)
 {
   Money *m;
   m = money_create (5, "USD");
   ck_assert_int_eq (money_amount (m), 5);
   ck_assert_str_eq (money_currency (m), "USD");
   money_free (m);
 }
 END_TEST
 
+START_TEST (test_money_create_neg)
+{
+  Money *m = money_create (-1, "USD");
+  ck_assert_msg (m == NULL,
+	       "NULL should be returned on attempt to create with "
+	       "a negative amount");
+}
+END_TEST
+
+START_TEST (test_money_create_zero)
+{
+  Money *m = money_create (0, "USD");
+  if(money_amount (m) != 0)
+  {
+    ck_abort_msg("Zero is a valid amount of money");
+  }
+}
+END_TEST
+
 Suite *
 money_suite (void)
 {
   Suite *s = suite_create ("Money");
 
   /* Core test case */
   TCase *tc_core = tcase_create ("Core");
   tcase_add_test (tc_core, test_money_create);
   suite_add_tcase (s, tc_core);
 
+  /* Limits test case */
+  TCase *tc_limits = tcase_create ("Limits");
+  tcase_add_test (tc_limits, test_money_create_neg);
+  tcase_add_test (tc_limits, test_money_create_zero);
+  suite_add_tcase (s, tc_limits);
+
   return s;
 }
 
 int
 main (void)
 {
   int number_failed;
   Suite *s = money_suite ();
   SRunner *sr = srunner_create (s);
   srunner_run_all (sr, CK_NORMAL);
   number_failed = srunner_ntests_failed (sr);
   srunner_free (sr);
   return (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Now we can rerun our suite, and fix the problem(s). Note that errors in the &#8220;Core&#8221; test case will be reported as &#8220;Core&#8221;, and errors in the &#8220;Limits&#8221; test case will be reported as &#8220;Limits&#8221;, giving you additional information about where things broke.</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- src/money.5.c	2013-09-20 23:37:40.309738005 -0400
+++ src/money.6.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,41 +1,46 @@
 #include &lt;stdlib.h&gt;
 #include "money.h"
 
 struct Money
 {
   int amount;
   char *currency;
 };
 
 Money *
 money_create (int amount, char *currency)
 {
+  if (amount &lt; 0)
+    {
+      return NULL;
+    }
+
   Money *m = malloc (sizeof (Money));
   if (m == NULL)
     {
       return NULL;
     }
 
   m-&gt;amount = amount;
   m-&gt;currency = currency;
   return m;
 }
 
 int
 money_amount (Money * m)
 {
   return m-&gt;amount;
 }
 
 char *
 money_currency (Money * m)
 {
   return m-&gt;currency;
 }
 
 void
 money_free (Money * m)
 {
   free (m);
   return;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=No-Fork-Mode></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Running-Multiple-Cases"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=No-Fork-Mode-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.3 No Fork Mode</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Check normally forks to create a separate address space. This allows a signal or early exit to be caught and reported, rather than taking down the entire test program, and is normally very useful. However, when you are trying to debug why the segmentation fault or other program error occurred, forking makes it difficult to use debugging tools. To define fork mode for an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, you can do one of the following:</P><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-CK_005fFORK></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fset_005ffork_005fstatus></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<OL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>Define the CK_FORK environment variable to equal &#8220;no&#8221;. 
<LI>Explicitly define the fork status through the use of the following function:<PRE class=verbatim>void srunner_set_fork_status (SRunner * sr, enum fork_status fstat);
</PRE></LI></OL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The enum<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fork_status</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to assume the following values:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_FORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NOFORK</CODE>. An explicit call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_fork_status()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>overrides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_FORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Fixtures></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#No-Fork-Mode"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixture-Examples"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Fixtures-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.4 Test Fixtures</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">We may want multiple tests that all use the same Money. In such cases, rather than setting up and tearing down objects for each unit test, it may be convenient to add some setup that is constant across all the tests in a test case. Each such setup/teardown pair is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test fixture</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in test-driven development jargon.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">A fixture is created by defining a setup and/or a teardown function, and associating it with a test case. There are two kinds of test fixtures in Check: checked and unchecked fixtures. These are defined as follows:</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT>Checked fixtures 
<DD>
<P>are run inside the address space created by the fork to create the unit test. Before each unit test in a test case, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is run, if defined. After each unit test, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is run, if defined. Since they run inside the forked address space, if checked fixtures signal or otherwise fail, they will be caught and reported by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE>. A checked<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fixture will not run if the unit test fails.</P>
<DT>Unchecked fixtures 
<DD>
<P>are run in the same address space as the test program. Therefore they may not signal or exit, but may use the fail functions. The unchecked<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE>, if defined, is run before the test case is started. The unchecked<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE>, if defined, is run after the test case is done. An unchecked<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fixture will run even if a unit test fails.</P></DD></DL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">An important difference is that the checked fixtures are run once per unit test and the unchecked fixtures are run once per test case. So for a test case that contains<CODE>check_one()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_two()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>unit tests,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>checked_setup()</CODE>/<CODE>checked_teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>checked fixtures, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unchecked_setup()</CODE>/<CODE>unchecked_teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>unchecked fixtures, the control flow would be:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>unchecked_setup();
fork();
checked_setup();
check_one();
checked_teardown();
wait();
fork();
checked_setup();
check_two();
checked_teardown();
wait();
unchecked_teardown();
</PRE></TD></TR></TBODY></TABLE>
<TABLE class=menu style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=0 border=0>
<TBODY>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixture-Examples">4.4.1 Test Fixture Examples</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Checked-vs-Unchecked-Fixtures">4.4.2 Checked vs Unchecked Fixtures</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Fixture-Examples></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Checked-vs-Unchecked-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Fixture-Examples-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H3 class=subsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.4.1 Test Fixture Examples</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">We create a test fixture in Check as follows:</P>
<OL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>Define global variables, and functions to setup and teardown the globals. The functions both take<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>. In our example, we&#8217;ll make<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>five_dollars</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>be a global created and freed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively. 
<LI><A name=index-tcase_005fadd_005fchecked_005ffixture></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Add the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions to the test case with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_checked_fixture()</CODE>. In our example, this belongs in the suite setup function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_suite</CODE>. 
<LI>Rewrite tests to use the globals. We&#8217;ll rewrite our first to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>five_dollars</CODE>.</LI></OL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that the functions used for setup and teardown do not need to be named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE>, but they must take<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>. We&#8217;ll update &#8216;<TT>check_money.c</TT>&#8217; with the following patch:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- tests/check_money.6.c	2013-09-20 23:37:40.309738005 -0400
+++ tests/check_money.7.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,63 +1,75 @@
 #include &lt;stdlib.h&gt;
 #include &lt;check.h&gt;
 #include "../src/money.h"
 
+Money *five_dollars;
+
+void
+setup (void)
+{
+  five_dollars = money_create (5, "USD");
+}
+
+void
+teardown (void)
+{
+  money_free (five_dollars);
+}
+
 START_TEST (test_money_create)
 {
-  Money *m;
-  m = money_create (5, "USD");
-  ck_assert_int_eq (money_amount (m), 5);
-  ck_assert_str_eq (money_currency (m), "USD");
-  money_free (m);
+  ck_assert_int_eq (money_amount (five_dollars), 5);
+  ck_assert_str_eq (money_currency (five_dollars), "USD");
 }
 END_TEST
 
 START_TEST (test_money_create_neg)
 {
   Money *m = money_create (-1, "USD");
   ck_assert_msg (m == NULL,
 	       "NULL should be returned on attempt to create with "
 	       "a negative amount");
 }
 END_TEST
 
 START_TEST (test_money_create_zero)
 {
   Money *m = money_create (0, "USD");
   if(money_amount (m) != 0)
   {
     ck_abort_msg("Zero is a valid amount of money");
   }
 }
 END_TEST
 
 Suite *
 money_suite (void)
 {
   Suite *s = suite_create ("Money");
 
   /* Core test case */
   TCase *tc_core = tcase_create ("Core");
+  tcase_add_checked_fixture (tc_core, setup, teardown);
   tcase_add_test (tc_core, test_money_create);
   suite_add_tcase (s, tc_core);
 
   /* Limits test case */
   TCase *tc_limits = tcase_create ("Limits");
   tcase_add_test (tc_limits, test_money_create_neg);
   tcase_add_test (tc_limits, test_money_create_zero);
   suite_add_tcase (s, tc_limits);
 
   return s;
 }
 
 int
 main (void)
 {
   int number_failed;
   Suite *s = money_suite ();
   SRunner *sr = srunner_create (s);
   srunner_run_all (sr, CK_NORMAL);
   number_failed = srunner_ntests_failed (sr);
   srunner_free (sr);
   return (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Checked-vs-Unchecked-Fixtures></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixture-Examples"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Multiple-Suites-in-one-SRunner"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Checked-vs-Unchecked-Fixtures-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H3 class=subsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.4.2 Checked vs Unchecked Fixtures</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Checked fixtures run once for each unit test in a test case, and so they should not be used for expensive setup. However, if a checked fixture fails and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_FORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode is being used, it will not bring down the entire framework.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">On the other hand, unchecked fixtures run once for an entire test case, as opposed to once per unit test, and so can be used for expensive setup. However, since they may take down the entire test program, they should only be used if they are known to be safe.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Additionally, the isolation of objects created by unchecked fixtures is not guaranteed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NOFORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode. Normally, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_FORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode, unit tests may abuse the objects created in an unchecked fixture with impunity, without affecting other unit tests in the same test case, because the fork creates a separate address space. However, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NOFORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode, all tests live in the same address space, and side effects in one test will affect the unchecked fixture for the other tests.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">A checked fixture will generally not be affected by unit test side effects, since the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is run before each unit test. There is an exception for side effects to the total environment in which the test program lives: for example, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function initializes a file that a unit test then changes, the combination of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function and<CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function must be able to restore the environment for the next unit test.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function in a fixture fails, in either checked or unchecked fixtures, the unit tests for the test case, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>teardown()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function for the fixture will not be run. A fixture error will be created and reported to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE>.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Multiple-Suites-in-one-SRunner></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Checked-vs-Unchecked-Fixtures"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Selective-Running-of-Tests"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Multiple-Suites-in-one-SRunner-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.5 Multiple Suites in one SRunner</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In a large program, it will be convenient to create multiple suites, each testing a module of the program. While one can create several test programs, each running one<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Suite</CODE>, it may be convenient to create one main test program, and use it to run multiple suites. The Check test suite provides an example of how to do this. The main testing program is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_check</CODE>, and has a header file that declares suite creation functions for all the module tests:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>Suite *make_sub_suite (void);
Suite *make_sub2_suite (void);
Suite *make_master_suite (void);
Suite *make_list_suite (void);
Suite *make_msg_suite (void);
Suite *make_log_suite (void);
Suite *make_limit_suite (void);
Suite *make_fork_suite (void);
Suite *make_fixture_suite (void);
Suite *make_pack_suite (void);
</PRE></TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fadd_005fsuite></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_add_suite()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to add additional suites to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE>. Here is the code that sets up and runs the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function in &#8216;<TT>check_check_main.c</TT>&#8217;:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>SRunner *sr;
sr = srunner_create (make_master_suite ());
srunner_add_suite (sr, make_list_suite ());
srunner_add_suite (sr, make_msg_suite ());
srunner_add_suite (sr, make_log_suite ());
srunner_add_suite (sr, make_limit_suite ());
srunner_add_suite (sr, make_fork_suite ());
srunner_add_suite (sr, make_fixture_suite ());
srunner_add_suite (sr, make_pack_suite ());
</PRE></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Selective-Running-of-Tests></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Multiple-Suites-in-one-SRunner"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Testing-Signal-Handling-and-Exit-Values"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Selective-Running-of-Tests-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.6 Selective Running of Tests</H2><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-CK_005fRUN_005fSUITE></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-CK_005fRUN_005fCASE></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">After adding a couple of suites and some test cases in each, it is sometimes practical to be able to run only one suite, or one specific test case, without recompiling the test code. There are two environment variables available that offers this ability,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_RUN_SUITE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_RUN_CASE</CODE>. Just set the value to the name of the suite and/or test case you want to run. These environment variables can also be a good integration tool for running specific tests from within another tool, e.g. an IDE.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Testing-Signal-Handling-and-Exit-Values></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Selective-Running-of-Tests"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Looping-Tests"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Testing-Signal-Handling-and-Exit-Values-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.7 Testing Signal Handling and Exit Values</H2><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-tcase_005fadd_005ftest_005fraise_005fsignal></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">To enable testing of signal handling, there is a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_test_raise_signal()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is used instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_test()</CODE>. This function takes an additional signal argument, specifying a signal that the test expects to receive. If no signal is received this is logged as a failure. If a different signal is received this is logged as an error.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The signal handling functionality only works in CK_FORK mode.</P><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-tcase_005fadd_005fexit_005ftest></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">To enable testing of expected exits, there is a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_exit_test()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is used instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_test()</CODE>. This function takes an additional expected exit value argument, specifying a value that the test is expected to exit with. If the test exits with any other value this is logged as a failure. If the test exits early this is logged as an error.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The exit handling functionality only works in CK_FORK mode.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Looping-Tests></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Testing-Signal-Handling-and-Exit-Values"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Timeouts"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Looping-Tests-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.8 Looping Tests</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Looping tests are tests that are called with a new context for each loop iteration. This makes them ideal for table based tests. If loops are used inside ordinary tests to test multiple values, only the first error will be shown before the test exits. However, looping tests allow for all errors to be shown at once, which can help out with debugging.</P><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-tcase_005fadd_005floop_005ftest></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Adding a normal test with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_loop_test()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_add_test()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will make the test function the body of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, with the addition of a fork before each call. The loop variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available for use inside the test function; for example, it could serve as an index into a table. For failures, the iteration which caused the failure is available in error messages and logs.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Start and end values for the loop are supplied when adding the test. The values are used as in a normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop. Below is some pseudo-code to show the concept:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>for (_i = tfun-&gt;loop_start; _i &lt; tfun-&gt;loop_end; _i++)
{
  fork();      /* New context */
  tfun-&gt;f(_i);  /* Call test function */
  wait();      /* Wait for child to terminate */
}
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">An example of looping test usage follows:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>static const int primes[5] = {2,3,5,7,11};

START_TEST (check_is_prime)
{
  ck_assert (is_prime (primes[_i]));
}
END_TEST

...

tcase_add_loop_test (tcase, check_is_prime, 0, 5);
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Looping tests work in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NOFORK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode as well, but without the forking. This means that only the first error will be shown.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Timeouts></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Looping-Tests"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Determining-Test-Coverage"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Timeouts-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.9 Test Timeouts</H2><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-tcase_005fset_005ftimeout></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-CK_005fDEFAULT_005fTIMEOUT></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-CK_005fTIMEOUT_005fMULTIPLIER></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">To be certain that a test won&#8217;t hang indefinitely, all tests are run with a timeout, the default being 4 seconds. If the test is not finished within that time, it is killed and logged as an error.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The timeout for a specific test case, which may contain multiple unit tests, can be changed with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_set_timeout()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. The default timeout used for all test cases can be changed with the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_DEFAULT_TIMEOUT</CODE>, but this will not override an explicitly set timeout. Another way to change the timeout length is to use the<CODE>CK_TIMEOUT_MULTIPLIER</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable, which multiplies all timeouts, including those set with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcase_set_timeout()</CODE>, with the supplied integer value. All timeout arguments are in seconds and a timeout of 0 seconds turns off the timeout functionality. On systems that support it, the timeout can be specified using a nanosecond precision. Otherwise, second precision is used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Test timeouts are only available in CK_FORK mode.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Determining-Test-Coverage></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Timeouts"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Logging"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Determining-Test-Coverage-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.10 Determining Test Coverage</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The term<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>code coverage</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the extent that the statements of a program are executed during a run. Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test coverage</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to code coverage when executing unit tests. This information can help you to do two things:</P>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>Write better tests that more fully exercise your code, thereby improving confidence in it. 
<LI>Detect dead code that could be factored away.</LI></UL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Check itself does not provide any means to determine this test coverage; rather, this is the job of the compiler and its related tools. In the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>this information is easy to obtain, and other compilers should provide similar facilities.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gcc</CODE>, first enable test coverage profiling when building your source by specifying the &#8216;<SAMP>-fprofile-arcs</SAMP>&#8217; and &#8216;<SAMP>-ftest-coverage</SAMP>&#8217; switches:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>$ gcc -g -Wall -fprofile-arcs -ftest-coverage -o foo foo.c foo_check.c
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You will see that an additional &#8216;<TT>.gcno</TT>&#8217; file is created for each &#8216;<TT>.c</TT>&#8217; input file. After running your tests the normal way, a &#8216;<TT>.gcda</TT>&#8217; file is created for each &#8216;<TT>.gcno</TT>&#8217; file. These contain the coverage data in a raw format. To combine this information and a source file into a more readable format you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gcov</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utility:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>$ gcov foo.c
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This will produce the file &#8216;<TT>foo.c.gcov</TT>&#8217; which looks like this:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>     -:   41:     * object */
    18:   42:    if (ht-&gt;table[p] != NULL) {
     -:   43:        /* replaces the current entry */
 #####:   44:        ht-&gt;count--;
 #####:   45:        ht-&gt;size -= ht-&gt;table[p]-&gt;size +
 #####:   46:          sizeof(struct hashtable_entry);   
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As you can see this is an annotated source file with three columns: usage information, line numbers, and the original source. The usage information in the first column can either be &#8217;-&#8217;, which means that this line does not contain code that could be executed; &#8217;#####&#8217;, which means this line was never executed although it does contain code&#8212;these are the lines that are probably most interesting for you; or a number, which indicates how often that line was executed.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is of course only a very brief overview, but it should illustrate how determining test coverage generally works, and how it can help you. For more information or help with other compilers, please refer to the relevant manuals.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Logging></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Determining-Test-Coverage"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#XML-Logging"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Test-Logging-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.11 Test Logging</H2><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fset_005flog></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Check supports an operation to log the results of a test run. To use test logging, call the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_log()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function with the name of the log file you wish to create:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>SRunner *sr;
sr = srunner_create (make_s1_suite ());
srunner_add_suite (sr, make_s2_suite ());
srunner_set_log (sr, "test.log");
srunner_run_all (sr, CK_NORMAL);
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In this example, Check will write the results of the run to &#8216;<TT>test.log</TT>&#8217;. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print_mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_run_all()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is ignored during test logging; the log will contain a result entry, organized by suite, for every test run. Here is an example of test log output:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>Running suite S1 
ex_log_output.c:8:P:Core:test_pass: Test passed
ex_log_output.c:14:F:Core:test_fail: Failure
ex_log_output.c:18:E:Core:test_exit: (after this point) Early exit
with return value 1
Running suite S2 
ex_log_output.c:26:P:Core:test_pass2: Test passed
Results for all suites run:
50%: Checks: 4, Failures: 1, Errors: 1
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Another way to enable test logging is to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_LOG_FILE_NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable. When set tests will be logged to the specified file name. If log file is specified with both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_LOG_FILE_NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_log()</CODE>, the name provided to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_log()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be used.</P>
<TABLE class=menu style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=0 border=0>
<TBODY>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_4.html#XML-Logging">4.11.1 XML Logging</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=XML-Logging></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Logging"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Subunit-Support"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Logging"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=XML-Logging-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H3 class=subsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.11.1 XML Logging</H3><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fset_005fxml></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fhas_005fxml></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=index-srunner_005fxml_005ffname></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The log can also be written in XML. The following functions define the interface for XML logs:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>void srunner_set_xml (SRunner *sr, const char *fname);
int srunner_has_xml (SRunner *sr);
const char *srunner_xml_fname (SRunner *sr);
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">XML output is enabled by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_xml()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before the tests are run. Here is an example of an XML log:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="http://check.sourceforge.net/xml/check_unittest.xslt"?&gt;
&lt;testsuites xmlns="http://check.sourceforge.net/ns"&gt;
  &lt;datetime&gt;2012-10-19 09:56:06&lt;/datetime&gt;
  &lt;suite&gt;
    &lt;title&gt;S1&lt;/title&gt;
    &lt;test result="success"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:10&lt;/fn&gt;
      &lt;id&gt;test_pass&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;0.000013&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Passed&lt;/message&gt;
    &lt;/test&gt;
    &lt;test result="failure"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:16&lt;/fn&gt;
      &lt;id&gt;test_fail&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;-1.000000&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Failure&lt;/message&gt;
    &lt;/test&gt;
    &lt;test result="error"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:20&lt;/fn&gt;
      &lt;id&gt;test_exit&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;-1.000000&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Early exit with return value 1&lt;/message&gt;
    &lt;/test&gt;
  &lt;/suite&gt;
  &lt;suite&gt;
    &lt;title&gt;S2&lt;/title&gt;
    &lt;test result="success"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:28&lt;/fn&gt;
      &lt;id&gt;test_pass2&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;0.000011&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Passed&lt;/message&gt;
    &lt;/test&gt;
    &lt;test result="failure"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:34&lt;/fn&gt;
      &lt;id&gt;test_loop&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;-1.000000&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Iteration 0 failed&lt;/message&gt;
    &lt;/test&gt;
    &lt;test result="success"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:34&lt;/fn&gt;
      &lt;id&gt;test_loop&lt;/id&gt;
      &lt;iteration&gt;1&lt;/iteration&gt;
      &lt;duration&gt;0.000010&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Passed&lt;/message&gt;
    &lt;/test&gt;
    &lt;test result="failure"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:34&lt;/fn&gt;
      &lt;id&gt;test_loop&lt;/id&gt;
      &lt;iteration&gt;2&lt;/iteration&gt;
      &lt;duration&gt;-1.000000&lt;/duration&gt;
      &lt;description&gt;Core&lt;/description&gt;
      &lt;message&gt;Iteration 2 failed&lt;/message&gt;
    &lt;/test&gt;
  &lt;/suite&gt;
  &lt;suite&gt;
    &lt;title&gt;XML escape &amp;quot; &amp;apos; &amp;lt; &amp;gt; &amp;amp; tests&lt;/title&gt;
    &lt;test result="failure"&gt;
      &lt;path&gt;.&lt;/path&gt;
      &lt;fn&gt;ex_xml_output.c:40&lt;/fn&gt;
      &lt;id&gt;test_xml_esc_fail_msg&lt;/id&gt;
      &lt;iteration&gt;0&lt;/iteration&gt;
      &lt;duration&gt;-1.000000&lt;/duration&gt;
      &lt;description&gt;description &amp;quot; &amp;apos; &amp;lt; &amp;gt; &amp;amp;&lt;/description&gt;
      &lt;message&gt;fail &amp;quot; &amp;apos; &amp;lt; &amp;gt; &amp;amp; message&lt;/message&gt;
    &lt;/test&gt;
  &lt;/suite&gt;
  &lt;duration&gt;0.001610&lt;/duration&gt;
&lt;/testsuites&gt;
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">XML logging can be enabled by an environment variable as well. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_XML_LOG_FILE_NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable is set, the XML test log will be written to specified file name. If XML log file is specified with both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_XML_LOG_FILE_NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_xml()</CODE>, the name provided to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srunner_set_xml()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If both plain text and XML log files are specified, by any of above methods, then check will log to both files. In other words logging in plain text and XML format simultaneously is supported.</P>
<HR style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Subunit-Support></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" cellSpacing=1 cellPadding=1 border=0>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#XML-Logging"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_5.html#Conclusion-and-References"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" name=Subunit-Support-1></A><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"></SPAN>
<H2 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.12 Subunit Support</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Check supports running test suites with subunit output. This can be useful to combine test results from multiple languages, or to perform programmatic analysis on the results of multiple check test suites or otherwise handle test results in a programmatic manner. Using subunit with check is very straight forward. There are two steps: 1) In your check test suite driver pass &#8217;CK_SUBUNIT&#8217; as the output mode for your srunner.</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>SRunner *sr;
sr = srunner_create (make_s1_suite ());
srunner_add_suite (sr, make_s2_suite ());
srunner_run_all (sr, CK_SUBUNIT);
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2) Setup your main language test runner to run your check based test executable. For instance using python:</P>
<TABLE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>import subunit

class ShellTests(subunit.ExecTestCase):
    """Run some tests from the C codebase."""

    def test_group_one(self):
        """./foo/check_driver"""

    def test_group_two(self):
        """./foo/other_driver"""
</PRE></TD></TR></TBODY></TABLE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In this example, running the test suite ShellTests in python (using any test runner - unittest.py, tribunal, trial, nose or others) will run ./foo/check_driver and ./foo/other_driver and report on their result.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Subunit is hosted on launchpad - the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://launchpad.net/subunit/">subunit</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>project there contains bug tracker, future plans, and source code control details.