<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Tutorial_003a-Basic-Unit-Testing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H1 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=chapter>3. Tutorial: Basic Unit Testing</H1>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This tutorial will use the JUnit<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://junit.sourceforge.net/doc/testinfected/testing.htm">Test Infected</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>article as a starting point. We will be creating a library to represent money,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libmoney</CODE>, that allows conversions between different currency types. The development style will be &#8220;test a little, code a little&#8221;, with unit test writing preceding coding. This constantly gives us insights into module usage, and also makes sure we are constantly thinking about how to test our code.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_3.html#How-to-Write-a-Test">3.1 How to Write a Test</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_3.html#Setting-Up-the-Money-Build">3.2 Setting Up the Money Build</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_3.html#Test-a-Little">3.3 Test a Little, Code a Little</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_3.html#Creating-a-Suite">3.4 Creating a Suite</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left><A href="http://check.sourceforge.net/doc/check_html/check_3.html#SRunner-Output">3.5 SRunner Output</A></TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=How-to-Write-a-Test></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=0 cellSpacing=1 cellPadding=1>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Setting-Up-the-Money-Build"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=How-to-Write-a-Test-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.1 How to Write a Test</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Test writing using Check is very simple. The file in which the checks are defined must include &#8216;<TT>check.h</TT>&#8217; as so:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>#include &lt;check.h&gt;
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The basic unit test looks as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>START_TEST (test_name)
{
  /* unit test code */
}
END_TEST
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>START_TEST</CODE>/<CODE>END_TEST</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair are macros that setup basic structures to permit testing. It is a mistake to leave off the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>END_TEST</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>marker; doing so produces all sorts of strange errors when the check is compiled.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Setting-Up-the-Money-Build></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=0 cellSpacing=1 cellPadding=1>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#How-to-Write-a-Test"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Test-a-Little"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Setting-Up-the-Money-Build-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.2 Setting Up the Money Build</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Since we are creating a library to handle money, we will first create an interface in &#8216;<TT>money.h</TT>&#8217;, an implementation in &#8216;<TT>money.c</TT>&#8217;, and a place to store our unit tests, &#8216;<TT>check_money.c</TT>&#8217;. We want to integrate these core files into our build system, and will need some additional structure. To manage everything we&#8217;ll use Autoconf, Automake, and friends (collectively known as Autotools) for this example. One could do something similar with ordinary Makefiles, but in the authors&#8217; opinion, it is generally easier to use Autotools than bare Makefiles, and they provide built-in support for running tests.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that this is not the place to explain how Autotools works. If you need help understanding what&#8217;s going on beyond the explanations here, the best place to start is probably Alexandre Duret-Lutz&#8217;s excellent<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.lrde.epita.fr/~adl/autotools.html">Autotools tutorial</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The examples in this section are part of the Check distribution; you don&#8217;t need to spend time cutting and pasting or (worse) retyping them. Locate the Check documentation on your system and look in the &#8216;<SAMP>example</SAMP>&#8217; directory. The standard directory for GNU/Linux distributions should be &#8216;<SAMP>/usr/share/doc/check/example</SAMP>&#8217;. This directory contains the final version reached the end of the tutorial. If you want to follow along, create backups of &#8216;<TT>money.h</TT>&#8217;, &#8216;<TT>money.c</TT>&#8217;, and &#8216;<TT>check_money.c</TT>&#8217;, and then delete the originals.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>We set up a directory structure as follows:</FONT></P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD><FONT class=extract>&nbsp;</FONT></TD>
<TD><PRE class=verbatim><FONT class=extract>.
|-- Makefile.am
|-- README
|-- configure.ac
|-- src
|   |-- Makefile.am
|   |-- main.c
|   |-- money.c
|   `-- money.h
`-- tests
    |-- Makefile.am
    `-- check_money.c
</FONT></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>Note that this is the output of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tree</CODE>, a great directory visualization tool.</FONT> The top-level &#8216;<TT>Makefile.am</TT>&#8217; is simple; it merely tells Automake how to process sub-directories:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>SUBDIRS = src . tests
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tests</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>comes last, because the code should be testing an already compiled library. &#8216;<TT>configure.ac</TT>&#8217; is standard Autoconf boilerplate, as specified by the Autotools tutorial and as suggested by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>autoscan</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AM_PATH_CHECK()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the only line particular to Check see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://check.sourceforge.net/doc/check_html/check_6.html#AM_005fPATH_005fCHECK">AM_PATH_CHECK</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8216;<TT>src/Makefile.am</TT>&#8217; builds &#8216;<SAMP>libmoney</SAMP>&#8217; as a Libtool archive, and links it to an application simply called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>. The application&#8217;s behavior is not important to this tutorial; what&#8217;s important is that none of the functions we want to unit test appear in &#8216;<TT>main.c</TT>&#8217;; this probably means that the only function in &#8216;<TT>main.c</TT>&#8217; should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself. In order to test the whole application, unit testing is not appropriate: you should use a system testing tool like Autotest. If you really want to test<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>using Check, rename it to something like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_myproject_main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and write a wrapper around it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The primary build instructions for our unit tests are in &#8216;<TT>tests/Makefile.am</TT>&#8217;:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>## Process this file with automake to produce Makefile.in

TESTS = check_money
check_PROGRAMS = check_money
check_money_SOURCES = check_money.c $(top_builddir)/src/money.h
check_money_CFLAGS = @CHECK_CFLAGS@
check_money_LDADD = $(top_builddir)/src/libmoney.la @CHECK_LIBS@
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>TESTS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells Automake which test programs to run for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE>. Similarly, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_PROGRAMS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>actually comes from Automake; it says to build these programs only when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is run. (Recall that Automake&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>target is the origin of Check&#8217;s name.) The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_money</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>test is a program that we will build from &#8216;<TT>tests/check_money.c</TT>&#8217;, linking it against both &#8216;<TT>src/libmoney.la</TT>&#8217; and the installed &#8216;<TT>libcheck.la</TT>&#8217; on our system. The appropriate compiler and linker flags for using Check are found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@CHECK_CFLAGS@</CODE>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@CHECK_LIBS@</CODE>, values defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AM_PATH_CHECK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now that all this infrastructure is out of the way, we can get on with development. &#8216;<TT>src/money.h</TT>&#8217; should only contain standard C header boilerplate:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>#ifndef MONEY_H
#define MONEY_H

#endif /* MONEY_H */
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8216;<TT>src/money.c</TT>&#8217; should be empty, and &#8216;<TT>tests/check_money.c</TT>&#8217; should only contain an empty<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>int
main (void)
{
  return 0;
}
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Create the GNU Build System for the project and then build &#8216;<TT>main</TT>&#8217; and &#8216;<TT>libmoney.la</TT>&#8217; as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>$ autoreconf --install
$ ./configure
$ make
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(<CODE>autoreconf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines which commands are needed in order for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>configure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be created or brought up to date. Previously one would use a script called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>autogen.sh</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bootstrap</CODE>, but that practice is unnecessary now.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now build and run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_money</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>test with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE>. If all goes well,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should report that our tests passed. No surprise, because there aren&#8217;t any tests to fail. If you have problems, make sure to see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://check.sourceforge.net/doc/check_html/check_6.html#AM_005fPATH_005fCHECK">AM_PATH_CHECK</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This was tested on the isadora distribution of Linux Mint GNU/Linux in November 2012, using Autoconf 2.65, Automake 1.11.1, and Libtool 2.2.6b. Please report any problems to<A href="mailto:check-devel%20AT%20lists.sourceforge.net">check-devel AT lists.sourceforge.net</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Test-a-Little></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=0 cellSpacing=1 cellPadding=1>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Setting-Up-the-Money-Build"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Creating-a-Suite"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Test-a-Little_002c-Code-a-Little></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.3 Test a Little, Code a Little</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://junit.sourceforge.net/doc/testinfected/testing.htm">Test Infected</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>article starts out with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Money</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, and so will we. Of course, we can&#8217;t do classes with C, but we don&#8217;t really need to. The Test Infected approach to writing code says that we should write the unit test<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>before</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>we write the code, and in this case, we will be even more dogmatic and doctrinaire than the authors of Test Infected (who clearly don&#8217;t really get this stuff, only being some of the originators of the Patterns approach to software development and OO design).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here are the changes to &#8216;<TT>check_money.c</TT>&#8217; for our first unit test:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- tests/check_money.1.c	2013-09-20 23:37:40.309738005 -0400
+++ tests/check_money.2.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,5 +1,18 @@
+#include &lt;check.h&gt;
+#include "../src/money.h"
+
+START_TEST (test_money_create)
+{
+  Money *m;
+  m = money_create (5, "USD");
+  ck_assert_int_eq (money_amount (m), 5);
+  ck_assert_str_eq (money_currency (m), "USD");
+  money_free (m);
+}
+END_TEST
+
 int
 main (void)
 {
   return 0;
 }
</PRE></PRE></TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fassert_005fint_005feq></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fassert_005fstr_005feq></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A unit test should just chug along and complete. If it exits early, or is signaled, it will fail with a generic error message. (Note: it is conceivable that you expect an early exit, or a signal and there is functionality in Check to specifically assert that we should expect a signal or an early exit.) If we want to get some information about what failed, we need to use some calls that will point out a failure. Two such calls are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_int_eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(used to determine if two integers are equal) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_str_eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(used to determine if two null terminated strings are equal). Both of these functions (actually macros) will signal an error if their arguments are not equal.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fassert></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An alternative to using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_int_eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_str_eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to write the expression under test directly using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert</CODE>. This takes one Boolean argument which must be True for the check to pass. The second test could be rewritten as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>ck_assert(strcmp (money_currency (m), "USD") == 0);
</PRE></TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fassert_005fmsg></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>ck_assert</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will find and report failures, but will not print any user supplied message in the unit test result. To print a user defined message along with any failures found, use<CODE>ck_assert_msg</CODE>. The first argument is a Boolean argument. The remaining arguments support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>varargs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and accept<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>-style format strings and arguments. This is especially useful while debugging. For example, the second test could be rewritten as:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>ck_assert_msg(strcmp (money_currency (m), "USD") == 0,
         "Was expecting a currency of USD, but found %s", money_currency (m));
</PRE></TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fabort></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ck_005fabort_005fmsg></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the Boolean argument is too complicated to elegantly express within<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert()</CODE>, there are the alternate functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_abort()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_abort_msg()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that unconditionally fail. The second test inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>test_money_create</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above could be rewritten as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>if (strcmp (money_currency (m), "USD") != 0) 
  {
    ck_abort_msg ("Currency not set correctly on creation");
  }
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For your convenience ck_assert, which does not accept a user supplied message, substitutes a suitable message for you. (This is also equivalent to passing a NULL message to ck_assert_msg). So you could also write a test as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>ck_assert (money_amount (m) == 5);
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is equivalent to:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>ck_assert_msg (money_amount (m) == 5, NULL);
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">which will print the file, line number, and the message<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"Assertion 'money_amount (m) == 5' failed"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_amount (m) != 5</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When we try to compile and run the test suite now using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE>, we get a whole host of compilation errors. It may seem a bit strange to deliberately write code that won&#8217;t compile, but notice what we are doing: in creating the unit test, we are also defining requirements for the money interface. Compilation errors are, in a way, unit test failures of their own, telling us that the implementation does not match the specification. If all we do is edit the sources so that the unit test compiles, we are actually making progress, guided by the unit tests, so that&#8217;s what we will now do.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We will patch our header &#8216;<TT>money.h</TT>&#8217; as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- src/money.1.h	2013-09-20 23:37:40.309738005 -0400
+++ src/money.2.h	2013-09-20 23:37:40.309738005 -0400
@@ -1,4 +1,11 @@
 #ifndef MONEY_H
 #define MONEY_H
 
+typedef struct Money Money;
+
+Money *money_create (int amount, char *currency);
+int money_amount (Money * m);
+char *money_currency (Money * m);
+void money_free (Money * m);
+
 #endif /* MONEY_H */
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Our code compiles now, and again passes all of the tests. However, once we try to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>use</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libmoney</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_money</CODE>, we&#8217;ll run into more problems, as they haven&#8217;t actually been implemented yet.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-a-Suite></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=0 cellSpacing=1 cellPadding=1>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Test-a-Little"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#SRunner-Output"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-a-Suite-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.4 Creating a Suite</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To run unit tests with Check, we must create some test cases, aggregate them into a suite, and run them with a suite runner. That&#8217;s a bit of overhead, but it is mostly one-off. Here&#8217;s a diff for the new version of &#8216;<TT>check_money.c</TT>&#8217;. Note that we include stdlib.h to get the definitions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EXIT_SUCCESS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EXIT_FAILURE</CODE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- tests/check_money.2.c	2013-09-20 23:37:40.309738005 -0400
+++ tests/check_money.3.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,18 +1,38 @@
+#include &lt;stdlib.h&gt;
 #include &lt;check.h&gt;
 #include "../src/money.h"
 
 START_TEST (test_money_create)
 {
   Money *m;
   m = money_create (5, "USD");
   ck_assert_int_eq (money_amount (m), 5);
   ck_assert_str_eq (money_currency (m), "USD");
   money_free (m);
 }
 END_TEST
 
+Suite *
+money_suite (void)
+{
+  Suite *s = suite_create ("Money");
+
+  /* Core test case */
+  TCase *tc_core = tcase_create ("Core");
+  tcase_add_test (tc_core, test_money_create);
+  suite_add_tcase (s, tc_core);
+
+  return s;
+}
+
 int
 main (void)
 {
-  return 0;
+  int number_failed;
+  Suite *s = money_suite ();
+  SRunner *sr = srunner_create (s);
+  srunner_run_all (sr, CK_NORMAL);
+  number_failed = srunner_ntests_failed (sr);
+  srunner_free (sr);
+  return (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_suite()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code should be self-explanatory. We are creating a suite, creating a test case, adding the test case to the suite, and adding the unit test we created above to the test case. Why separate this off into a separate function, rather than inline it in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE>? Because any new tests will get added in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_suite()</CODE>, but nothing will need to change in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the rest of this example, so main will stay relatively clean and simple.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unit tests are internally defined as static functions. This means that the code to add unit tests to test cases must be in the same compilation unit as the unit tests themselves. This provides another reason to put the creation of the test suite in a separate function: you may later want to keep one source file per suite; defining a uniquely named suite creation function allows you later to define a header file giving prototypes for all the suite creation functions, and encapsulate the details of where and how unit tests are defined behind those functions. See the test program defined for Check itself for an example of this strategy.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bears some explanation. We are creating a suite runner object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Suite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>we created in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_suite()</CODE>. We then run the suite, using the<CODE>CK_NORMAL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag to specify that we should print a summary of the run, and list any failures that may have occurred. We capture the number of failures that occurred during the run, and use that to decide how to return. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>target created by Automake uses the return value to decide whether the tests passed or failed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now that the tests are actually being run by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_money</CODE>, we encounter linker errors again we try out<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE>. Try it for yourself and see. The reason is that the &#8216;<TT>money.c</TT>&#8217; implementation of the &#8216;<TT>money.h</TT>&#8217; interface hasn&#8217;t been created yet. Let&#8217;s go with the fastest solution possible and implement stubs for each of the functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money.c</CODE>. Here is the diff:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- src/money.1.c	2013-09-20 23:37:40.309738005 -0400
+++ src/money.3.c	2013-09-20 23:37:40.309738005 -0400
@@ -0,0 +1,26 @@
+#include &lt;stdlib.h&gt;
+#include "money.h"
+
+Money *
+money_create (int amount, char *currency)
+{
+  return NULL;
+}
+
+int
+money_amount (Money * m)
+{
+  return 0;
+}
+
+char *
+money_currency (Money * m)
+{
+  return NULL;
+}
+
+void
+money_free (Money * m)
+{
+  return;
+}
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that we<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include &lt;stdlib.h&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. Now, the code compiles and links when we run<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make check</CODE>, but our unit test fails. Still, this is progress, and we can focus on making the test pass.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" SIZE=6>
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRunner-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" border=0 cellSpacing=1 cellPadding=1>
<TBODY>
<TR>
<TD vAlign=center align=left>[<A title="Previous section in reading order" href="http://check.sourceforge.net/doc/check_html/check_3.html#Creating-a-Suite"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next section in reading order" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Beginning of this chapter or previous chapter" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Up section" href="http://check.sourceforge.net/doc/check_html/check_3.html#Tutorial"><SPAN class=Apple-converted-space>&nbsp;</SPAN>Up<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>[<A title="Next chapter" href="http://check.sourceforge.net/doc/check_html/check_4.html#Advanced-Features"><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt;&gt;<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>&nbsp;</TD>
<TD vAlign=center align=left>[<A title="Cover (top) of document" href="http://check.sourceforge.net/doc/check_html/index.html#Top">Top</A>]</TD>
<TD vAlign=center align=left>[<A title="Table of contents" href="http://check.sourceforge.net/doc/check_html/check_toc.html#SEC_Contents">Contents</A>]</TD>
<TD vAlign=center align=left>[<A title=Index href="http://check.sourceforge.net/doc/check_html/check_8.html#Index">Index</A>]</TD>
<TD vAlign=center align=left>[<A title="About (help)" href="http://check.sourceforge.net/doc/check_html/check_abt.html#SEC_About"><SPAN class=Apple-converted-space>&nbsp;</SPAN>?<SPAN class=Apple-converted-space>&nbsp;</SPAN></A>]</TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRunner-Output-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.5 SRunner Output</H2><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-srunner_005frun_005fall></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-srunner_005frun></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions to run tests in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SRunner</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>void srunner_run_all (SRunner * sr, enum print_output print_mode);

void srunner_run (SRunner *sr, const char *sname, const char *tcname,
                  enum print_output print_mode);
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Those functions do two things:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>They run all of the unit tests for the selected test cases defined for the selected suites in the SRunner, and collect the results in the SRunner. The determination of the selected test cases and suites depends on the specific function used. 
<P><CODE>srunner_run_all</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will run all the defined test cases of all defined suites except if the environment variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_RUN_CASE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_RUN_SUITE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined. If defined, those variables shall contain the name of a test suite or a test case, defining in that way the selected suite/test case.</P>
<P><CODE>srunner_run</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will run the suite/case selected by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tcname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters. A value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in some of those parameters means &#8220;any suite/case&#8221;.</P>
<LI>They print the results according to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print_mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specified.</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For SRunners that have already been run, there is also a separate printing function defined as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>void srunner_print (SRunner *sr, enum print_output print_mode);
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The enumeration values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print_output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in Check that parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print_mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can assume are as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-CK_005fSILENT></A>
<DT><CODE>CK_SILENT</CODE> 
<DD>
<P>Specifies that no output is to be generated. If you use this flag, you either need to programmatically examine the SRunner object, print separately, or use test logging (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://check.sourceforge.net/doc/check_html/check_4.html#Test-Logging">Test Logging</A>.)</P><A name=index-CK_005fMINIMAL></A>
<DT><CODE>CK_MINIMAL</CODE> 
<DD>
<P>Only a summary of the test run will be printed (number run, passed, failed, errors).</P><A name=index-CK_005fNORMAL></A>
<DT><CODE>CK_NORMAL</CODE> 
<DD>
<P>Prints the summary of the run, and prints one message per failed test.</P><A name=index-CK_005fVERBOSE></A>
<DT><CODE>CK_VERBOSE</CODE> 
<DD>
<P>Prints the summary, and one message per test (passed or failed)</P><A name=index-CK_005fENV></A><A name=index-CK_005fVERBOSITY></A>
<DT><CODE>CK_ENV</CODE> 
<DD>
<P>Gets the print mode from the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_VERBOSITY</CODE>, which can have the values "silent", "minimal", "normal", "verbose". If the variable is not found or the value is not recognized, the print mode is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NORMAL</CODE>.</P><A name=index-CK_005fSUBUNIT></A>
<DT><CODE>CK_SUBUNIT</CODE> 
<DD>
<P>Prints running progress through the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://launchpad.net/subunit/">subunit</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>test runner protocol. See &#8217;subunit support&#8217; under the Advanced Features section for more information.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CK_NORMAL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag specified in our<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main()</CODE>, let&#8217;s rerun make check now. As before, we get the following satisfying output:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>Running suite(s): Money
0%: Checks: 1, Failures: 1, Errors: 0
check_money.c:9:F:Core:test_money_create:0: Assertion 'money_amount (m)==5' failed: 
money_amount (m)==0, 5==5
FAIL: check_money
=====================================================
1 of 1 test failed
Please report to check-devel AT lists.sourceforge.net
=====================================================
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first number in the summary line tells us that 0% of our tests passed, and the rest of the line tells us that there was one check in total, and of those checks, one failure and zero errors. The next line tells us exactly where that failure occurred, and what kind of failure it was (P for pass, F for failure, E for error).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">After that we have some higher level output generated by Automake: the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>check_money</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program failed, and the bug-report address given in &#8216;<TT>configure.ac</TT>&#8217; is printed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Let&#8217;s implement the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_amount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, so that it will pass its tests. We first have to create a Money structure to hold the amount, and then implement the function to return the correct amount:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- src/money.3.c	2013-09-20 23:37:40.309738005 -0400
+++ src/money.4.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,26 +1,31 @@
 #include &lt;stdlib.h&gt;
 #include "money.h"
 
+struct Money
+{
+  int amount;
+};
+
 Money *
 money_create (int amount, char *currency)
 {
   return NULL;
 }
 
 int
 money_amount (Money * m)
 {
-  return 0;
+  return m-&gt;amount;
 }
 
 char *
 money_currency (Money * m)
 {
   return NULL;
 }
 
 void
 money_free (Money * m)
 {
   return;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We will now rerun make check and&#8230; what&#8217;s this? The output is now as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>Running suite(s): Money
0%: Checks: 1, Failures: 0, Errors: 1
check_money.c:5:E:Core:test_money_create:0: (after this point) 
Received signal 11 (Segmentation fault)
</PRE></TD></TR></TBODY></TABLE><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-mark_005fpoint></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">What does this mean? Note that we now have an error, rather than a failure. This means that our unit test either exited early, or was signaled. Next note that the failure message says &#8220;after this point&#8221;; This means that somewhere after the point noted (&#8216;<TT>check_money.c</TT>&#8217;, line 5) there was a problem: signal 11 (a.k.a. segmentation fault). The last point reached is set on entry to the unit test, and after every call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_abort()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_int_*()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ck_assert_str_*()</CODE>, or the special function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mark_point()</CODE>. For example, if we wrote some test code as follows:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=verbatim>stuff_that_works ();
mark_point ();
stuff_that_dies ();
</PRE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">then the point returned will be that marked by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mark_point()</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The reason our test failed so horribly is that we haven&#8217;t implemented<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_create()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create any<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Money</CODE>. We&#8217;ll go ahead and implement that, the symmetric<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>money_free()</CODE>, and<CODE>money_currency()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>too, in order to make our unit test pass again, here is a diff:</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD><PRE class=example><PRE class=verbatim>--- src/money.4.c	2013-09-20 23:37:40.309738005 -0400
+++ src/money.5.c	2013-09-20 23:37:40.309738005 -0400
@@ -1,31 +1,41 @@
 #include &lt;stdlib.h&gt;
 #include "money.h"
 
 struct Money
 {
   int amount;
+  char *currency;
 };
 
 Money *
 money_create (int amount, char *currency)
 {
-  return NULL;
+  Money *m = malloc (sizeof (Money));
+  if (m == NULL)
+    {
+      return NULL;
+    }
+
+  m-&gt;amount = amount;
+  m-&gt;currency = currency;
+  return m;
 }
 
 int
 money_amount (Money * m)
 {
   return m-&gt;amount;
 }
 
 char *
 money_currency (Money * m)
 {
-  return NULL;
+  return m-&gt;currency;
 }
 
 void
 money_free (Money * m)
 {
+  free (m);
   return;
 }
</PRE></PRE></TD></TR></TBODY></TABLE>