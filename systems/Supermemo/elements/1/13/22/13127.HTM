<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>15.8.&nbsp;The Exception Handler</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s07.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;15.&nbsp;Exceptions</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s09.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="15.8.&nbsp;The Exception Handler" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286966563></A>15.8.&nbsp;The Exception Handler</H2></DIV></DIV></DIV>
<P>As mentioned earlier, the exception handler is a subprogram that isn't called by software, but is branched to when the hardware detects an exception of some sort.</P>
<P>SPIM emulates the MIPS R3000 processor, which has a single exception handler that must be located at address 0x80000180. This is near the beginning of the kernel segment, which begins at 0x80000000. Addresses 0x00000000 to 0x7fffffff are the user segment, where user programs are loaded.</P>
<P>The exception handler is structured much like a regular subprogram, but of course does things that ordinary subprograms cannot do. Like other subprograms, it must save and restore registers that are modified, and return to where it was called (although it was called by hardware, not a jal instruction).</P>
<P>The handler provided with SPIM is not reentrant since it saves $a0 and $v0 in static variables. Note that it uses registers $k0 and $k1, which are reserved for operating system. They need not be saved and restored, since the operating system treats them as temporary registers.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>eret</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction restores the status register and returns to the address in the EPC register, much like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>jr $ra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns from a normal subprogram.</P></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s07.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s09.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">15.7.&nbsp;CPU Exception Response&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;15.9.&nbsp;Enabling I/O Interrupts</TD></TR></TBODY></TABLE></DIV>