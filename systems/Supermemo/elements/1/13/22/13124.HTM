<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>15.5.&nbsp;MIPS Exception Handling</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s04.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;15.&nbsp;Exceptions</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s06.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="15.5.&nbsp;MIPS Exception Handling" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286966461></A>15.5.&nbsp;MIPS Exception Handling</H2></DIV></DIV></DIV>
<P>MIPS exceptions are handled by a peripheral device to the CPU called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>coprocessor 0</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(cp0). Coprocessor 0 contains a number of registers used to configure exception handling and to report the status of current exceptions.</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>The EPC register, cp0 register 14, is the exception program counter. It contains the address of the instruction that was running when the exception occurred. It serves the same purpose for the exception handler that CPU register $ra serves for ordinary subprograms. When the exception handler completes, the EPC register allows the program that was interrupted to be resumed.</LI>
<LI class=listitem>The cause register, cp0 register 13, contains bits that identify the cause of the exception.</LI>
<LI class=listitem>The badvaddress register, cp0 register 8, contains the address that caused a bad address exception.</LI>
<LI class=listitem>The status register, cp0 register 12, is used both to configure interrupts, and get more information about the exception that occurred.</LI></UL></DIV>
<P>MAL has no aliases for the cp0 registers, so they must be referred to as register numbers. For example, the status register is referred to as $12.</P>
<P>Registers in coprocessor 0 cannot be used directly by MIPS instructions. Instead, there are two instructions that work much like load and store instructions. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>mfc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(move from coprocessor 0) instruction loads data from a coprocessor 0 register into a CPU register. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>mtc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>likewise stores data in a cp0 register.</P>
<DIV class=note title=Note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>The mtc0 instruction, like the store instruction has the destination<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>last</EM></SPAN>. This is especially important to note, since the syntax for cp0 registers looks the same as the syntax for CPU registers. For example, the following copies the contents of CPU register 13 to cp0 register 12.<PRE class=programlisting>	mtc0    $13, $12
	</PRE></DIV>
<P>Since cp0 registers cannot be accessed by most instructions, changing their values requires using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>read-modify-write</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>cycle.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286966504></A>This means we must</P>
<DIV class=procedure>
<OL class=procedure type=1>
<LI class=step title="Step 1">Read the cp0 register into a CPU register</LI>
<LI class=step title="Step 2">Modify the contents of the CPU register</LI>
<LI class=step title="Step 3">Write the modified value back to the cp0 register</LI></OL></DIV>
<P>The read-modify-write cycle is extremely common in interacting with I/O devices and other system hardware.</P></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s04.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch15s06.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">15.4.&nbsp;Interrupts&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;15.6.&nbsp;Exceptions in SPIM</TD></TR></TBODY></TABLE></DIV>