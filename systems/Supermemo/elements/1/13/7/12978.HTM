<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 14 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Assertions and Unit Testing</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>Two important ways to check that the behavior of the software you write is as you expect are assertions and unit tests. In this chapter, we'll show you several options you have in Scala to write and run them.<A id=i2091567537-1></A></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.1></A>14.1 Assertions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.1">link</A>]</SPAN></H3>
<P><A name=sec:assert></A></P>
<P>Assertions in Scala are written as calls of a predefined method<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert</SPAN>.<A id=i1445339835-2></A><A id=i-176392533-2></A><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-1">[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert(condition)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>throws an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>AssertionError</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>condition</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not hold.<A id=i-1578657506-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>There's also a two-argument version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert</SPAN>. The expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert(condition,</SPAN>&nbsp;<SPAN class=code>explanation)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>tests<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>condition</SPAN>, and, if it does not hold, throws an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>AssertionError</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that contains the given explanation. The type of explanation is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Any</SPAN>, so you can pass any object as the explanation. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method will call<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on it to get a string explanation to place inside the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>AssertionError</SPAN>.</P>
<P>For example, in the method named "<SPAN class=code>above</SPAN>" of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN>, shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html#lst:widen-heighten-methods">Listing 10.13</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/composition-and-inheritance.html#lst:widen-heighten-methods">here</A>, you might place an assert after the calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to make sure that the widened elements have equal widths. This is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:using-an-assert">Listing 14.1</A>.</P>
<P><A name=lst:using-an-assert></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;above(that:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Element</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Element</SPAN>&nbsp;=&nbsp;{&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;this1&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>&nbsp;widen&nbsp;that.width&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;that1&nbsp;=&nbsp;that&nbsp;widen&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>.width&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;assert(this1.width&nbsp;==&nbsp;that1.width)
  &nbsp;&nbsp;&nbsp;&nbsp;elem(this1.contents&nbsp;++&nbsp;that1.contents)&nbsp;
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.1 - Using an assertion.</H5>
<P>Another way you might choose to do this is to check the widths at the end of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, right before you return the value. You can accomplish this by storing the result in a<SPAN class=code>val</SPAN>, performing an assertion on the result, then mentioning the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>last so the result is returned if the assertion succeeds. You can do this more concisely, however, with a convenience method in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN>, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:using-ensuring">Listing 14.2</A>.<A id=i1797680614-1></A><A id=i538992544-1></A></P>
<P><A name=lst:using-ensuring></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;widen(w:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Element</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(w&nbsp;&lt;=&nbsp;width)&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;{&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;left&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'&nbsp;'</SPAN>,&nbsp;(w&nbsp;-&nbsp;width)&nbsp;/&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;height)&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;right&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'&nbsp;'</SPAN>,&nbsp;w&nbsp;-&nbsp;width&nbsp;-&nbsp;left.width,&nbsp;height)&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left&nbsp;beside&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>&nbsp;beside&nbsp;right&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;ensuring&nbsp;(w&nbsp;&lt;=&nbsp;_.width)
</PRE>
<H5>Listing 14.2 - Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to assert a function's result.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method can be used with any result type because of an implicit conversion.<A id=i456777265-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Although it looks in this code as if we're invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN>'s result, which is type<SPAN class=code>Element</SPAN>, we're actually invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a type to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly converted. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method takes one argument, a predicate function that takes a result type and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Boolean</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will pass the result to the predicate. If the predicate returns true,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the result. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will throw an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>AssertionError</SPAN>.</P>
<P>In this example, the predicate is "<SPAN class=code>w</SPAN>&nbsp;<SPAN class=code>&lt;=</SPAN>&nbsp;<SPAN class=code>_.width</SPAN>". The underscore is a placeholder for the one argument passed to the predicate, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. If the width passed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>w</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than or equal to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>width</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the result<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN>, the predicate will result in true, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will result in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on which it was invoked. Because this is the last expression of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>widen</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself will then result in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN>.</P>
<P>Assertions (and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ensuring</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>checks) can be enabled and disabled using the JVM's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-ea</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-da</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line flags. When enabled, each assertion serves as a little test that uses the actual data encountered as the software runs. In the remainder of this chapter, we'll focus on the writing of external unit tests, which provide their own test data and run independently from the application.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.2></A>14.2 Unit testing in Scala<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.2">link</A>]</SPAN></H3>
<P>You have many options for unit testing in Scala, from established Java tools,<A id=i-1422446064-2></A><A id=i2091567537-2></A><A id=i-2030836876-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>such as JUnit and TestNG, to new tools written in Scala, such as ScalaTest, specs, and ScalaCheck.<A id=i-517954686-1></A><A id=i122343128-1></A><A id=i109641752-1></A>In the remainder of this chapter, we'll give you a quick tour of these tools. We'll start with ScalaTest.</P>
<P>ScalaTest provides several ways to write tests, the simplest of which is to create classes that extend<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>org.scalatest.Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and define test methods in those classes. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>represents a suite of tests. Test methods start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"test"</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:test-method">Listing 14.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example:</P>
<P><A name=lst:test-method></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.Suite
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Suite</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;testUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.width&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.3 - Writing a test method with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>.</H5>
<P>Although ScalaTest includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Runner</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application, you can also run a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly from the Scala interpreter by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>execute</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on it. Trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>'s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>execute</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method uses reflection to discover its test methods and invokes them. Here's an example:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;(<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>).execute()
  <SPAN class=output style="COLOR: rgb(90,0,0)">Test&nbsp;Starting&nbsp;-&nbsp;ElementSuite.testUniformElement</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Test&nbsp;Succeeded&nbsp;-&nbsp;ElementSuite.testUniformElement</SPAN>
</PRE>
<P></P>
<P>ScalaTest facilitates different styles of testing, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>execute</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be overridden in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>subtypes. For example, ScalaTest offers a trait called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FunSuite</SPAN>, which overrides<SPAN class=code>execute</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that you can define tests as function values rather than methods.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:test-function">Listing 14.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example:</P>
<P><A name=lst:test-function></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.FunSuite
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FunSuite</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;test(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"elem&nbsp;result&nbsp;should&nbsp;have&nbsp;passed&nbsp;width"</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.width&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.4 - Writing a test function with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FunSuite</SPAN>.</H5>
<P>The "<SPAN class=code>Fun</SPAN>" in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FunSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>stands for function. "<SPAN class=code>test</SPAN>" is a method defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FunSuite</SPAN>, which will be invoked by the primary constructor of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ElementSuite</SPAN>. You specify the name of the test as a string between the parentheses, and the test code itself between curly braces. The test code is a function passed as a by-name parameter to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>test</SPAN>, which registers it for later execution. One benefit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FunSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is you need not name all your tests starting with "<SPAN class=code>test</SPAN>". In addition, you can more easily give long names to your tests, because you need not encode them in camel case, as you must do with test methods.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-2">[2]</A></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.3></A>14.3 Informative failure reports<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.3">link</A>]</SPAN></H3>
<P>The tests in the previous two examples attempt to create an element of width 2 and assert that the width of the resulting element is indeed 2. Were this assertion to fail, you would see a message that indicated an assertion failed. You'd be given a line number, but wouldn't know the two values that were unequal. You could find out by placing a string message in the assertion that includes both values, but a more concise approach is to use the triple-equals operator, which ScalaTest provides for this purpose:<A id=i-1828469615-1></A><A id=i-1929417832-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  assert(ele.width&nbsp;===&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
</PRE>Were this assertion to fail, you would see a message such as "3 did not equal 2" in the failure report. This would tell you that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ele.width</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>wrongly returned 3. The triple-equals operator does not differentiate between the actual and expected result. It just indicates that the left operand did not equal the right operand. If you wish to emphasize this distinction, you could alternatively use ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>expect</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, like this:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  expect(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)&nbsp;{
  &nbsp;&nbsp;ele.width
  }
</PRE>With this expression you indicate that you expect the code between the curly braces to result in 2. Were the code between the braces to result in 3, you'd see the message, "Expected 2, but got 3" in the test failure report. 
<P></P>
<P>If you want to check that a method throws an expected exception, you can use ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>intercept</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, like this:<A id=i1433885554-1></A><A id=i385195690-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  intercept[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>]&nbsp;{
  &nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  }
</PRE>If the code between the curly braces completes abruptly with an instance of the passed exception class,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>intercept</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the caught exception, in case you want to inspect it further. Most often, you'll probably only care that the expected exception was thrown, and ignore the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>intercept</SPAN>, as is done in this example. On the other hand, if the code does not throw an exception, or throws a different exception, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>intercept</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method will throw a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestFailedException</SPAN>, and you'll get a helpful error message in the failure report, such as:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  Expected&nbsp;IllegalArgumentException&nbsp;to&nbsp;be&nbsp;thrown,
  &nbsp;&nbsp;but&nbsp;NegativeArraySizeException&nbsp;was&nbsp;thrown.
</PRE>
<P></P>
<P>The goal of ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>===</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator and its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>expect</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>intercept</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods is to help you write assertion-based tests that are clear and concise. In the next section, we'll show you how to use this syntax in JUnit and TestNG tests written in Scala.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.4></A>14.4 Using JUnit and TestNG<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.4">link</A>]</SPAN></H3>
<P>The most popular unit testing framework on the Java platform is JUnit, an open source tool written by Kent Beck and Erich Gamma.<A id=i255451135-1></A><A id=i1607862342-1></A><A id=i70981870-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can write JUnit tests in Scala quite easily. Here's an example using JUnit 3.8.1:<A id=i70981870-2></A><A id=i-1793303061-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;junit.framework.TestCase
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;junit.framework.Assert.assertEquals
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;junit.framework.Assert.fail
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementTestCase</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">TestCase</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;testUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;assertEquals(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;ele.width)
  &nbsp;&nbsp;&nbsp;&nbsp;assertEquals(<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>,&nbsp;ele.height)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail()
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">catch</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;e:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;expected</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
  }
</PRE>Once you compile this class, JUnit will run it like any other<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestCase</SPAN>. JUnit doesn't care that it was written in Scala. If you wish to use ScalaTest's assertion syntax in your JUnit 3 test, however, you can instead subclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN>, as shown<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:junit3-test-method">Listing 14.5</A>. 
<P></P>
<P><A name=lst:junit3-test-method></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.junit.JUnit3Suite
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">JUnit3Suite</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;testUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.width&nbsp;===&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expect(<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)&nbsp;{&nbsp;ele.height&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intercept[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>]&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.5 - Writing a JUnit test with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN>.</H5>
<P>Trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>extends<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestCase</SPAN>, so once you compile this class, JUnit will run it just fine, even though it uses ScalaTest's more concise assertion syntax. Moreover, because<SPAN class=code>JUnit3Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>mixes in ScalaTest's trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>, you can alternatively run this test class with ScalaTest's runner. The goal is to provide a gentle migration path to enable JUnit users to start writing JUnit tests in Scala that take advantage of the conciseness afforded by Scala. ScalaTest also has a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnitWrapperSuite</SPAN>, which enables you to run existing JUnit tests written in Java with ScalaTest's runner.</P>
<P>ScalaTest offers similar integration classes for JUnit 4 and TestNG,<A id=i-1793303061-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>both of which make heavy use of annotations.<A id=i-178828245-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>We'll show an example using TestNG, an open source framework written by Cedric Beust and Alexandru Popescu.<A id=i898040326-1></A><A id=i203352055-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>As with JUnit, you can simply write TestNG tests in Scala, compile them, and run them with TestNG's runner. Here's an example:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.testng.annotations.Test
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.testng.Assert.assertEquals
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementTests</SPAN>&nbsp;{
  &nbsp;&nbsp;@<SPAN class=typename style="COLOR: rgb(103,0,154)">Test</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;verifyUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;assertEquals(ele.width,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;assertEquals(ele.height,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;}
  &nbsp;&nbsp;@<SPAN class=typename style="COLOR: rgb(103,0,154)">Test</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;expectedExceptions&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Array</SPAN>(classOf[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>])
  &nbsp;&nbsp;}
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;elemShouldThrowIAE()&nbsp;{&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)&nbsp;}
  }
</PRE>If you prefer to use ScalaTest's assertion syntax in your TestNG tests, however, you can extend trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestNGSuite</SPAN>, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:testng-test">Listing 14.6</A>:<A id=i-1278827628-1></A><A id=i-126685847-1></A> 
<P></P>
<P><A name=lst:testng-test></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.testng.TestNGSuite
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.testng.annotations.Test
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">TestNGSuite</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;@<SPAN class=typename style="COLOR: rgb(103,0,154)">Test</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;verifyUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.width&nbsp;===&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expect(<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)&nbsp;{&nbsp;ele.height&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intercept[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>]&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.6 - Writing a TestNG test with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestNGSuite</SPAN>.</H5>
<P>As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN>, you can run a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestNGSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with either TestNG or ScalaTest, and ScalaTest also provides a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestNGWrapperSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that enables you to run existing TestNG tests written in Java with ScalaTest. To see an example of JUnit 4 tests written in Scala, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html#sec:annotations">Section 29.2</A>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.5></A>14.5 Tests as specifications<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.5">link</A>]</SPAN></H3>
<P>In the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">behavior-driven development</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(BDD) testing style, the emphasis is on writing human-readable specifications of the expected behavior of code, and accompanying tests that verify the code has the specified behavior.<A id=i2079947888-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>ScalaTest includes a trait,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Spec</SPAN>, which facilitates this style of testing. An example is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:scalatest-spec-example">Listing 14.7</A>.</P>
<P><A name=lst:scalatest-spec-example></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.Spec
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSpec</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Spec</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;describe(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"A&nbsp;UniformElement"</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"should&nbsp;have&nbsp;a&nbsp;width&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value"</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.width&nbsp;===&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"should&nbsp;have&nbsp;a&nbsp;height&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value"</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(ele.height&nbsp;===&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"should&nbsp;throw&nbsp;an&nbsp;IAE&nbsp;if&nbsp;passed&nbsp;a&nbsp;negative&nbsp;width"</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intercept[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>]&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.7 - Specifying and testing behavior with a ScalaTest<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Spec</SPAN>.</H5>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Spec</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains "describers" and "specifiers." A describer, written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>describe</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by a string in parentheses and then a block, describes the "subject" being specified and tested. A specifier, written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>it</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by a string in parentheses and a block, specifies a small bit of behavior of that subject (in the string) and provides code that verifies that behavior (in the block). When a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Spec</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is executed, it will run each specifier as a ScalaTest test. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Spec</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can generate output when it is executed that reads more like a specification. For example, here's what the output will look like if you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ElementSpec</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:scalatest-spec-example">Listing 14.7</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the interpreter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;(<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSpec</SPAN>).execute()
  <SPAN class=output style="COLOR: rgb(90,0,0)">A&nbsp;UniformElement</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">-&nbsp;should&nbsp;have&nbsp;a&nbsp;width&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">-&nbsp;should&nbsp;have&nbsp;a&nbsp;height&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">-&nbsp;should&nbsp;throw&nbsp;an&nbsp;IAE&nbsp;if&nbsp;passed&nbsp;a&nbsp;negative&nbsp;width</SPAN>
</PRE>
<P></P>
<P>The specs testing framework, an open source tool written in Scala by Eric Torreborre<A id=i774197993-1></A>, also supports the BDD style of testing but with a different syntax.<A id=i109641752-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, you could use specs to write the test shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:specs-example">Listing 14.8</A>.</P>
<P><A name=lst:specs-example></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.specs._
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSpecification</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Specification</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"A&nbsp;UniformElement"</SPAN>&nbsp;should&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"have&nbsp;a&nbsp;width&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value"</SPAN>&nbsp;in&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ele.width&nbsp;must&nbsp;be_==(<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"have&nbsp;a&nbsp;height&nbsp;equal&nbsp;to&nbsp;the&nbsp;passed&nbsp;value"</SPAN>&nbsp;in&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ele&nbsp;=&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ele.height&nbsp;must&nbsp;be_==(<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"throw&nbsp;an&nbsp;IAE&nbsp;if&nbsp;passed&nbsp;a&nbsp;negative&nbsp;width"</SPAN>&nbsp;in&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>)&nbsp;must
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throwA[<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>]
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.8 - Specifying and testing behavior with the specs framework.</H5>
<P>One goal of specs is to enable you to write assertions that read more like natural language and generate descriptive failure messages. Specs provides a large number of<EM style="FONT-STYLE: italic">matchers</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this purpose. You can also create your own matchers. You can see some examples of matchers in action in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:specs-example">Listing 14.8</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the lines that contain "<SPAN class=code>must</SPAN>&nbsp;<SPAN class=code>be_==</SPAN>" and "<SPAN class=code>must</SPAN>&nbsp;<SPAN class=code>throwA</SPAN>". You can also use specs matchers in ScalaTest, JUnit, or TestNG tests written in Scala by mixing trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>org.specs.SpecsMatchers</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>into your test classes. You can use specs standalone, but it is also integrated with ScalaTest and JUnit, so you can run specs tests with those tools as well.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-3">[3]</A></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.6></A>14.6 Property-based testing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.6">link</A>]</SPAN></H3>
<P>Another useful testing tool for Scala is ScalaCheck, an open source framework written by Rickard Nilsson. ScalaCheck enables you to specify properties that the code under test must obey.<A id=i568084816-1></A><A id=i-517954686-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For each property, ScalaCheck will generate test data and run tests that check whether the property holds.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:property-based-tests">Listing 14.9</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>show an example of using ScalaCheck from a ScalaTest suite.</P>
<P><A name=lst:property-based-tests></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.prop.FunSuite
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalacheck.Prop._
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FunSuite</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;test(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"elem&nbsp;result&nbsp;should&nbsp;have&nbsp;passed&nbsp;width"</SPAN>,&nbsp;(w:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;==&gt;&nbsp;(elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;w,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>).width&nbsp;==&nbsp;w)
  &nbsp;&nbsp;&nbsp;&nbsp;)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;test(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"elem&nbsp;result&nbsp;should&nbsp;have&nbsp;passed&nbsp;height"</SPAN>,&nbsp;(h:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;==&gt;&nbsp;(elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;h).height&nbsp;==&nbsp;h)
  &nbsp;&nbsp;&nbsp;&nbsp;)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 14.9 - Writing property-based tests with ScalaCheck.</H5>
<P>In this example, we check two properties that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>elem</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>factory should obey. ScalaCheck properties are expressed as function values that take as parameters the required test data, which will be generated by ScalaCheck. In the first property shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:property-based-tests">Listing 14.9</A>, the test data is an integer named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>w</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that represents a width. Inside the body of the function, you see:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  w&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;==&gt;&nbsp;(elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;w,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>).width&nbsp;==&nbsp;w)
</PRE>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>==&gt;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">implication operator</EM>. It implies that whenever the left hand expression is true, the expression on the right must hold true. Thus in this case, the expression on the right of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>==&gt;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>must hold true whenever<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>w</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than 0. The right-hand expression in this case will yield true if the width passed to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>elem</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>factory is the same as the width of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Element</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>returned by the factory. 
<P></P>
<P>With this small amount of code, ScalaCheck will generate possibly hundreds of values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>w</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and test each one, looking for a value for which the property doesn't hold. If the property holds true for every value ScalaCheck tries, the test will pass. Otherwise, the test will complete abruptly with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>AssertionError</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that contains information including the value that caused the failure.</P>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:property-based-tests">Listing 14.9</A>, each test was composed of a single property. Sometimes, however, you may want to make multiple property checks within a single test, or perform both property checks and assertions in the same test. ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Checkers</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait makes this easy. Simply mix<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Checkers</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>into your test class, and pass properties to one of several "<SPAN class=code>check</SPAN>" methods. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#lst:trait-checkers">Listing 14.10</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>performing the same two ScalaCheck property checks shown in the previous example, but this time in a single test. As with all<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>JUnit3Suite</SPAN>s, this class is a JUnit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestCase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and can therefore be run with either ScalaTest or JUnit.<A id=i-1082654974-1></A><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-4">[4]</A><A name=lst:trait-checkers></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.junit.JUnit3Suite
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalatest.prop.Checkers
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;org.scalacheck.Prop._
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;Element.elem
  <BR>  <SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ElementSuite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">JUnit3Suite</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">with</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Checkers</SPAN>&nbsp;{
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;testUniformElement()&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;check((w:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&gt;&nbsp;w&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;==&gt;&nbsp;(elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;w,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">3</SPAN>).width&nbsp;==&nbsp;w))
  &nbsp;&nbsp;&nbsp;&nbsp;check((h:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&gt;&nbsp;h&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;==&gt;&nbsp;(elem(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">'x'</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>,&nbsp;h).height&nbsp;==&nbsp;h))
  &nbsp;&nbsp;}
  }
</PRE>
<H5>Listing 14.10 - Checking properties from a JUnit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TestCase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Checkers</SPAN>.</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.7></A>14.7 Organizing and running tests<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.7">link</A>]</SPAN></H3>
<P>Each framework mentioned in this chapter provides some mechanism for organizing and running tests. In this section, we'll give a quick overview of ScalaTest's approach. To get the full story on any of these frameworks, however, you'll need to consult their documentation.</P>
<P>In ScalaTest, you organize large test suites by nesting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s.<A id=i-318258231-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>When a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is executed, it will execute its nested<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s as well as its tests. The nested<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s will in turn execute their nested<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s, and so on. A large test suite, therefore, is represented as a tree of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects. When you execute the root<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the tree, all<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s in the tree will be executed.</P>
<P>You can nest suites manually or automatically. To nest manually, you either override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>nestedSuites</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method on your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s, or pass the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s you want to nest to the constructor of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SuperSuite</SPAN>, which ScalaTest provides for this purpose. To nest automatically, you provide package names to ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Runner</SPAN>, which will discover<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>s automatically, nest them under a root<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>, and execute the root<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN>.</P>
<P>You can invoke ScalaTest's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Runner</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application from the command line or an ant task. You must specify which suites you want to run, either by naming the suites explicitly or indicating name prefixes with which you want<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Runner</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to perform automatic discovery. You can optionally specify a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">runpath</EM>, a list of directories and JAR files from with to load class files for the tests and the code they exercise.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-5">[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can also specify one or more reporters, which will determine how test results will be presented.</P>
<DIV class=figure style="MARGIN-TOP: 0.75em; TEXT-ALIGN: center"><A name=fig:scalatest-gui></A>
<P><IMG alt="image images/scalaTestGUI40.jpg" src="http://www.artima.com/pins1ed/images/scalaTestGUI40.jpg"></P></DIV>
<H5>Figure 14.1 - ScalaTest's graphical reporter.</H5>
<P>For example, the ScalaTest distribution includes the suites that test ScalaTest itself. You can run one of these suites,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SuiteSuite</SPAN>,<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#footnote14-6">[6]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the following command:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  $&nbsp;scala&nbsp;-cp&nbsp;scalatest-0.9.4.jar&nbsp;org.scalatest.tools.Runner
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-p&nbsp;"scalatest-0.9.4-tests.jar"&nbsp;-s&nbsp;org.scalatest.SuiteSuite
</PRE>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-cp</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>you place ScalaTest's JAR file on the class path. The next token,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>org.scalatest.tools.Runner</SPAN>, is the fully qualified name of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Runner</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>application. Scala will run this application and pass the remaining tokens as command line arguments. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-p</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the runpath, which in this case is a JAR file that contains the suite classes:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scalatest-0.9.4-tests.jar</SPAN>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-s</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SuiteSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the suite to execute. Because you don't explicitly specify a reporter, you will by default get the graphical reporter. The result is shown in<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#fig:scalatest-gui">Figure 14.1</A>. 
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=14.8></A>14.8 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/assertions-and-unit-testing.html#14.8">link</A>]</SPAN></H3>
<P>In this chapter you saw examples of mixing assertions directly in production code as well as writing them externally in unit tests. You saw that as a Scala programmer, you can take advantage of popular testing tools from the Java community, such as JUnit and TestNG, as well as newer tools designed explicitly for Scala, such as ScalaTest, ScalaCheck, and specs. Both in-code assertions and unit testing can help you achieve your software quality goals. We felt that these techniques are important enough to justify the short detour from the Scala tutorial that this chapter represented. In the next chapter, however, we'll return to the language tutorial and cover a very useful aspect of Scala: pattern matching.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 14:</H4>
<P><A name=footnote14-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>assert</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method is defined in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Predef</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>singleton object, whose members are automatically imported into every Scala source file.</P>
<P><A name=footnote14-2>[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can download ScalaTest from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://www.scalatest.org/</SPAN>.</P>
<P><A name=footnote14-3>[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can download specs from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://code.google.com/p/specs/</SPAN>.</P>
<P><A name=footnote14-4>[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can download ScalaCheck from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>http://code.google.com/p/scalacheck/</SPAN>.</P>
<P><A name=footnote14-5>[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Tests can be anywhere on the runpath or classpath, but typically you would keep your tests separate from your production code, in a separate directory hierarchy that mirrors your source tree's directory hierarchy.</P>
<P><A name=footnote14-6>[6]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SuiteSuite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is so-named because it is a suite of tests that test trait<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Suite</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself.</P></DIV>