<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 7 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Built-in Control Structures</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>Scala has only a handful of built-in control structures. The only control structures are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN>, and function calls. The reason Scala has so few is that it has included function literals since its inception. Instead of accumulating one higher-level control structure after another in the base syntax, Scala accumulates them in libraries.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/control-abstraction.html">Chapter 9</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>will show precisely how that is done. This chapter will show those few control structures that are built in.</P>
<P>One thing you will notice is that almost all of Scala's control structures result in some value. This is the approach taken by functional languages, in which programs are viewed as computing a value, thus the components of a program should also compute values. You can also view this approach as the logical conclusion of a trend already present in imperative languages. In imperative languages, function calls can return a value, even though having the called function update an output variable passed as an argument would work just as well. In addition, imperative languages often have a ternary operator (such as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>?:</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator of C, C++, and Java), which behaves exactly like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN>, but results in a value. Scala adopts this ternary operator model, but calls it<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN>. In other words, Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can result in a value. Scala then continues this trend by having<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>also result in values.</P>
<P>Programmers can use these result values to simplify their code, just as they use return values of functions. Without this facility, the programmer must create temporary variables just to hold results that are calculated inside a control structure. Removing these temporary variables makes the code a little simpler, and it also prevents many bugs where you set the variable in one branch but forget to set it in another.</P>
<P>Overall, Scala's basic control structures, minimal as they are, are sufficient to provide all of the essentials from imperative languages. Further, they allow you to shorten your code by consistently having result values. To show you how all of this works, this chapter takes a closer look at each of Scala's basic control structures.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.1></A>7.1 If expressions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.1">link</A>]</SPAN></H3>
<P><A name=sec:if-expressions></A></P>
<P>Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>works just like in many other languages.<A id=i-1395149224-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>It tests a condition and then executes one of two code branches depending on whether the condition holds true. Here is a common example, written in an imperative style:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;filename&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"default.txt"</SPAN>
  <SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(!args.isEmpty)
  &nbsp;&nbsp;filename&nbsp;=&nbsp;args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
</PRE>This code declares a variable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filename</SPAN>, and initializes it to a default value. It then uses an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression to check whether any arguments were supplied to the program. If so, it changes the variable to hold the value specified in the argument list. If no arguments were supplied, it leaves the variable set to the default value. 
<P></P>
<P>This code can be written more nicely, because as mentioned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html#step3">Step 3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/first-steps-in-scala.html">Chapter 2</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN>Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression that results in a value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:if-else-init">Listing 7.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows how you can accomplish the same effect as the previous example, but without using any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s:<A id=i1218979943-1></A></P>
<P><A name=lst:if-else-init></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;filename&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(!args.isEmpty)&nbsp;args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"default.txt"</SPAN>
</PRE>
<H5>Listing 7.1 - Scala's idiom for conditional initialization.</H5>
<P>This time, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>has two branches. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>args</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not empty, the initial element,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>args(0)</SPAN>, is chosen. Else, the default value is chosen.<A id=i1150746877-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression results in the chosen value, and the<SPAN class=code>filename</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable is initialized with that value. This code is slightly shorter, but its real advantage is that it uses a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>. Using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the functional style, and it helps you in much the same way as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>final</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable in Java<A id=i-168967627-1></A>. It tells readers of the code that the variable will never change, saving them from scanning all code in the variable's scope to see if it ever changes.</P>
<P>A second advantage to using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is that it better supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">equational reasoning</EM>. The introduced variable is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">equal</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the expression that computes it, assuming that expression has no side effects. Thus, any time you are about to write the variable name, you could instead write the expression. Instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println(filename)</SPAN>, for example, you could just as well write this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  println(<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(!args.isEmpty)&nbsp;args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"default.txt"</SPAN>)
</PRE>The choice is yours. You can write it either way. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s helps you safely make this kind of refactoring as your code evolves<A id=i204271861-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>over time. 
<P></P>
<DIV class=callout style="BORDER-RIGHT: rgb(153,153,153) groove; PADDING-RIGHT: 49px; BORDER-TOP: rgb(153,153,153) groove; PADDING-LEFT: 49px; PADDING-BOTTOM: 0.5em; MARGIN-LEFT: 49px; BORDER-LEFT: rgb(153,153,153) groove; MARGIN-RIGHT: 49px; PADDING-TOP: 0.5em; BORDER-BOTTOM: rgb(153,153,153) groove; BACKGROUND-COLOR: rgb(248,248,248)">
<P><BR>Look for opportunities to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s.<SPAN class=Apple-converted-space>&nbsp;</SPAN>They can make your code both easier to read and easier to refactor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.2></A>7.2 While loops<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.2">link</A>]</SPAN></H3>
<P><A name=sec:while-loops></A></P>
<P>Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop behaves as in other languages.<A id=i852231328-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>It has a condition and a body, and the body is executed over and over as long as the condition holds true.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcdloop">Listing 7.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example:</P>
<P><A name=lst:gcdloop></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;gcdLoop(x:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>,&nbsp;y:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>&nbsp;=&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;a&nbsp;=&nbsp;x
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;b&nbsp;=&nbsp;y
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(a&nbsp;!=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;temp&nbsp;=&nbsp;a
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;b&nbsp;%&nbsp;a
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;=&nbsp;temp
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;b
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.2 - Calculating greatest common divisor with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop.</H5>
<P>Scala also has a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>do</SPAN>-<SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop. This works like the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop except that it tests the condition after the loop body instead of before.<A id=i846768734-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:do-while">Listing 7.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows a Scala script that uses a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>do-while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to echo lines read from the standard input, until an empty line is entered:<A name=lst:do-while></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;line&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">do</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;=&nbsp;readLine()
  &nbsp;&nbsp;&nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Read:&nbsp;"</SPAN>+&nbsp;line)
  &nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(line&nbsp;!=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>)
</PRE>
<H5>Listing 7.3 - Reading from the standard input with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>do-while</SPAN>.<A id=i-504023058-1></A><A id=i-379989681-1></A></H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>do-while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>constructs are called "loops," not expressions, because they don't result in an interesting value. The type of the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>. It turns out that a value (and in fact, only one value) exists whose type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>. It is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">unit value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is written<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN>.<A id=i737037269-1></A><A id=i-1932805493-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The existence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is how Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>differs from Java's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>void</SPAN>. Try this in the interpreter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;greet()&nbsp;{&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"hi"</SPAN>)&nbsp;}
  <SPAN class=output style="COLOR: rgb(90,0,0)">greet:&nbsp;()Unit</SPAN>
  <BR>  scala&gt;&nbsp;greet()&nbsp;==&nbsp;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <SPAN class=output style="COLOR: rgb(90,0,0)">hi</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;Boolean&nbsp;=&nbsp;true</SPAN>
</PRE>
<P>Because no equals sign precedes its body,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>greet</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to be a procedure with a result type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN>. Therefore,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>greet</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the unit value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN>. This is confirmed in the next line: comparing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>greet</SPAN>'s result for equality with the unit value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN>, yields<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>true</SPAN>.</P>
<P>One other construct that results in the unit value, which is relevant here, is reassignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s. For example, were you to attempt to read lines in Scala using the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN>loop idiom from Java (and C and C++), you'll run into trouble:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;line&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>
  <SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;((line&nbsp;=&nbsp;readLine())&nbsp;!=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>)&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;This&nbsp;doesn't&nbsp;work!</SPAN>
  &nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Read:&nbsp;"</SPAN>+&nbsp;line)
</PRE>When you compile this code, Scala will give you a warning that comparing values of<SPAN class=Apple-converted-space>&nbsp;</SPAN>type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Unit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>String</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>!=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will always yield true. Whereas in Java, assignment results in the value assigned, in this case a line from the standard input, in Scala assignment<A id=i1918232661-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>always results in the unit value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN>. Thus, the value of the assignment "<SPAN class=code>line</SPAN>&nbsp;<SPAN class=code>=</SPAN>&nbsp;<SPAN class=code>readLine()</SPAN>" will always be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and never be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>""</SPAN>. As a result, this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop's condition will never be false, and the loop will, therefore, never terminate. 
<P></P>
<P>Because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop results in no value, it is often left out of pure functional languages. Such languages have expressions, not loops. Scala includes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop nonetheless, because sometimes an imperative solution can be more readable, especially to programmers with a predominantly imperative background. For example, if you want to code an algorithm that repeats a process until some condition changes, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop can express it directly while the functional alternative, which likely uses recursion, may be less obvious to some readers of the code.</P>
<P>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcd-recursive">Listing 7.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an alternate way to determine a greatest common divisor of two numbers.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#footnote7-1">[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Given the same two values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>y</SPAN>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function shown in<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcd-recursive">Listing 7.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the same result as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcdLoop</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcdloop">Listing 7.2</A>. The difference between these two approaches is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcdLoop</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is written in an imperative style, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s and and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is written in a more functional style that involves recursion (<SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls itself) and requires no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s.</P>
<P><A name=lst:gcd-recursive></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;gcd(x:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>,&nbsp;y:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Long</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(y&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;x&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;gcd(y,&nbsp;x&nbsp;%&nbsp;y)&nbsp;
</PRE>
<H5>Listing 7.4 - Calculating greatest common divisor with recursion.</H5>
<P>In general, we recommend you challenge<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loops in your code in the same way you challenge<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s. In fact,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loops and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s often go hand in hand. Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loops don't result in a value, to make any kind of difference to your program, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop will usually either need to update<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s or perform I/O. You can see this in action in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcdLoop</SPAN>example shown previously. As that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop does its business, it updates<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>a</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>b</SPAN>. Thus, we suggest you be a bit suspicious of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loops in your code. If there isn't a good justification for a particular<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>do-while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, try to find a way to do the same thing without it.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.3></A>7.3 For expressions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.3">link</A>]</SPAN></H3>
<P><A name=sec:for-expressions></A></P>
<P>Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is a Swiss army knife of iteration<A id=i-207940604-2></A>. It lets you combine a few simple ingredients in different ways to express a wide variety of iterations. Simple uses enable common tasks such as iterating through a sequence of integers. More advanced expressions can iterate over multiple collections of different kinds, can filter out elements based on arbitrary conditions, and can produce new collections.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Iteration through collections</H4>
<P>The simplest thing you can do with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to iterate through all the elements of a collection. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:listing-file-names">Listing 7.5</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows some code that prints out all files in the current directory. The I/O is performed using the Java API. First, we create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>java.io.File</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the current directory,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"."</SPAN>, and call its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>listFiles</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. This method returns an array of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>File</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects, one per directory and file contained in the current directory. We store the resulting array in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable.</P>
<P><A name=lst:listing-file-names></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;filesHere&nbsp;=&nbsp;(<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">java.io.File</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"."</SPAN>)).listFiles
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(file&nbsp;&lt;-&nbsp;filesHere)
  &nbsp;&nbsp;&nbsp;&nbsp;println(file)
</PRE>
<H5>Listing 7.5 - Listing files in a directory with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</H5>
<P>With the "<SPAN class=code>file</SPAN>&nbsp;<SPAN class=code>&lt;-</SPAN>&nbsp;<SPAN class=code>filesHere</SPAN>" syntax, which is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g286956243"><EM style="FONT-STYLE: italic">generator</EM></A>, we iterate through the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN>. In each iteration, a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>file</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is initialized with an element value. The compiler infers the type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>file</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>File</SPAN>, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[File]</SPAN>. For each iteration, the body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println(file)</SPAN>, will be executed. Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>File</SPAN>'s<SPAN class=code>toString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method yields the name of the file or directory, the names of all the files and directories in the current directory will be printed.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression syntax works for any kind of collection, not just arrays.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#footnote7-2">[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>One convenient special case is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Range</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>type, which you briefly saw in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/basic-types-and-operations.html#tab:richops">Table 5.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/basic-types-and-operations.html#tab:richops">here</A>. You can create<SPAN class=code>Range</SPAN>s using syntax like "<SPAN class=code>1</SPAN>&nbsp;<SPAN class=code>to</SPAN>&nbsp;<SPAN class=code>5</SPAN>" and can iterate through them with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>. Here is a simple example:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(i&nbsp;&lt;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;to&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">4</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Iteration&nbsp;"</SPAN>+&nbsp;i)
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;1</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;2</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;3</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;4</SPAN>
</PRE>If you don't want to include the upper bound of the range in the values that are iterated over, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>until</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>to</SPAN>:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(i&nbsp;&lt;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;until&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">4</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Iteration&nbsp;"</SPAN>+&nbsp;i)
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;1</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;2</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">Iteration&nbsp;3</SPAN>
</PRE>Iterating through integers like this is common in Scala, but not nearly as much as in other languages. In other languages, you might use this facility to iterate through an array, like this:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Not&nbsp;common&nbsp;in&nbsp;Scala...</SPAN>
  <SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(i&nbsp;&lt;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>&nbsp;to&nbsp;filesHere.length&nbsp;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)
  &nbsp;&nbsp;println(filesHere(i))
</PRE>This<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression introduces a variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN>, sets it in turn to each integer between<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>0</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere.length</SPAN>&nbsp;<SPAN class=code>-</SPAN>&nbsp;<SPAN class=code>1</SPAN>, and executes the body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression for each setting of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN>. For each setting of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN>'th element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is extracted and processed. 
<P></P>
<P>The reason this kind of iteration is less common in Scala is that you can just as well iterate over the collection directly. If you do, your code becomes shorter and you sidestep many of the off-by-one errors that can arise when iterating through arrays. Should you start at 0 or 1? Should you add -1, +1, or nothing to the final index? Such questions are easily answered, but easily answered wrongly. It is safer to avoid such questions entirely.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Filtering</H4>
<P>Sometimes you do not want to iterate through a collection in its entirety.<A id=i1946581356-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You want to filter it down to some subset. You can do this with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression by adding a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-1274492040"><EM style="FONT-STYLE: italic">filter</EM></A>: an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN>clause inside the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>'s parentheses. For example, the code shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:list-scala-files">Listing 7.6</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>lists only those files in the current directory whose names end with "<SPAN class=texttt>.scala</SPAN>":</P>
<P><A name=lst:list-scala-files></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;filesHere&nbsp;=&nbsp;(<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">java.io.File</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"."</SPAN>)).listFiles
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(file&nbsp;&lt;-&nbsp;filesHere&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>))
  &nbsp;&nbsp;&nbsp;&nbsp;println(file)
</PRE>
<H5>Listing 7.6 - Finding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>files using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a filter.</H5>
<P>You could alternatively accomplish the same goal with this code:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(file&nbsp;&lt;-&nbsp;filesHere)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>))
  &nbsp;&nbsp;&nbsp;&nbsp;println(file)
</PRE>This code yields the same output as the previous code, and likely looks more familiar to programmers with an imperative background. The imperative form, however, is only an option because this particular<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is executed for its printing side-effects and results in the unit value<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>()</SPAN>. As will be demonstrated later in this section, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is called an "expression" because it can result in an interesting value, a collection whose type is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>&lt;-</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses. 
<P></P>
<P>You can include more filters if you want. Just keep adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses. For example, to be extra defensive, the code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:list-only-files">Listing 7.7</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints only files and not directories. It does so by adding a filter that checks the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>file</SPAN>'s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>isFile</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method.</P>
<P><A name=lst:list-only-files></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(
  &nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&lt;-&nbsp;filesHere
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.isFile;
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>)
  &nbsp;&nbsp;)&nbsp;println(file)
</PRE>
<H5>Listing 7.7 - Using multiple filters in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</H5>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>If you add more than one filter on a generator, the filter's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses must be separated by semicolons. This is why there's a semicolon after the "<SPAN class=code>if</SPAN>&nbsp;<SPAN class=code>file.isFile</SPAN>" filter in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:list-only-files">Listing 7.7</A>.</P></DIV>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Nested iteration</H4>
<P>If you add multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>&lt;-</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses, you will get nested "loops." For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:nested-iteration">Listing 7.8</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>has two nested loops. The outer loop iterates through<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN>, and the inner loop iterates through<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fileLines(file)</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>for any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>file</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that ends with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=texttt>.scala</SPAN>.</P>
<P><A name=lst:nested-iteration></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;fileLines(file:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">java.io.File</SPAN>)&nbsp;=&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;scala.io.Source.fromFile(file).getLines.toList
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;grep(pattern:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&lt;-&nbsp;filesHere
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>);
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;&lt;-&nbsp;fileLines(file)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;line.trim.matches(pattern)&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;println(file&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">":&nbsp;"</SPAN>+&nbsp;line.trim)
  <BR>  &nbsp;&nbsp;grep(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".*gcd.*"</SPAN>)
</PRE>
<H5>Listing 7.8 - Using multiple generators in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</H5>
<P>If you prefer, you can use curly braces instead of parentheses to surround the generators and filters. One advantage to using curly braces is that you can leave off some of the semicolons that are needed when you use parentheses.<A id=i-597205837-1></A><A id=i-1905470655-1></A></P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Mid-stream variable bindings</H4>
<P>Note that the previous code repeats the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>line.trim</SPAN>. This is a non-trivial computation, so you might want to only compute it once. You can do this by binding the result to a new variable using an equals sign (<SPAN class=code>=</SPAN>). The bound variable is introduced and used just like a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>, only with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword left out.<A id=i1392088405-1></A><A id=i31167931-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:mid-stream-assignment">Listing 7.9</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example.</P>
<P><A name=lst:mid-stream-assignment></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;grep(pattern:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&lt;-&nbsp;filesHere
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;&lt;-&nbsp;fileLines(file)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trimmed&nbsp;=&nbsp;line.trim
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;trimmed.matches(pattern)&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;println(file&nbsp;+<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">":&nbsp;"</SPAN>+&nbsp;trimmed)
  <BR>  &nbsp;&nbsp;grep(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".*gcd.*"</SPAN>)
</PRE>
<H5>Listing 7.9 - Mid-stream assignment in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</H5>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:mid-stream-assignment">Listing 7.9</A>, a variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>trimmed</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is introduced halfway through the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. That variable is initialized to the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>line.trim</SPAN>. The rest of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression then uses the new variable in two places, once in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and once in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN>.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Producing a new collection</H4>
<P>While all of the examples so far have operated on the iterated values and then forgotten them, you can also generate a value to remember for each iteration. To do so, you prefix the body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression by the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN>.<A id=i1145887345-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, here is a function that identifies the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>.scala</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>files and stores them in an array:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;scalaFiles&nbsp;=
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&lt;-&nbsp;filesHere
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>)
  &nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;file
</PRE>Each time the body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression executes it produces one value, in this case simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>file</SPAN>. When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression completes, the result will include all of the yielded values contained in a single collection. The type of the resulting collection is based on the kind of collections processed in the iteration clauses. In this case the result is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[File]</SPAN>, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array and the type of the yielded expression is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>File</SPAN>. 
<P></P>
<P>Be careful, by the way, where you place the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword. The syntax of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>-<SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;<I>clauses</I>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;<I>body</I>
</PRE>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>goes before the entire body. Even if the body is a block surrounded by curly braces, put the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>yield</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>before the first curly brace, not before the last expression of the block. Avoid the temptation to write things like this:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(file&nbsp;&lt;-&nbsp;filesHere&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>))&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;file&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Syntax&nbsp;error!</SPAN>
  }
</PRE>
<P></P>
<P>For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:transforming-an-array">Listing 7.10</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>first transforms the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[File]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>filesHere</SPAN>, which contains all files in the current directory, to one that contains only<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>.scala</SPAN>files. For each of these it generates an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Iterator[String]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fileLines</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, whose definition is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:nested-iteration">Listing 7.8</A>). An<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Iterator</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>offers methods<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>next</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>hasNext</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that allow you to iterate over a collection of elements. This initial iterator is transformed into another<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Iterator[String]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing only trimmed lines that include the substring<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"for"</SPAN>. Finally, for each of these, an integer length is yielded. The result of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[Int]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing those lengths.</P>
<P><A name=lst:transforming-an-array></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;forLineLengths&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;&lt;-&nbsp;filesHere
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;file.getName.endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line&nbsp;&lt;-&nbsp;fileLines(file)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trimmed&nbsp;=&nbsp;line.trim
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;trimmed.matches(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".*for.*"</SPAN>)&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;trimmed.length
</PRE>
<H5>Listing 7.10 - Transforming an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[File]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Array[Int]</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN>.</H5>
<P>At this point, you have seen all the major features of Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. This section went through them rather quickly, however. A more thorough coverage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions is given in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/for-expressions-revisited.html">Chapter 23</A>.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.4></A>7.4 Exception handling with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.4">link</A>]</SPAN></H3>
<P><A name=sec:try-expressions></A></P>
<P>Scala's exceptions behave just like in many other<SPAN class=Apple-converted-space>&nbsp;</SPAN>languages.<A id=i668047766-1></A><A id=i-60007022-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Instead<A id=i147418614-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of returning a value in the normal way, a method can terminate by throwing an exception. The method's caller can either catch and handle that exception, or it can itself simply terminate, in which case the exception propagates to the caller's caller. The exception propagates in this way, unwinding the call stack, until a method<A id=i2050330638-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>handles it or there are no more methods left.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Throwing exceptions</H4>
<P>Throwing an exception looks the same as in Java. You create an exception object and then you throw it with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>throw</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">throw</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">IllegalArgumentException</SPAN>
</PRE>
<P></P>
<P>Although it may seem somewhat paradoxical, in Scala,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>throw</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression that has a result type.<A id=i44952225-1></A><A id=i958036312-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Here is an example in which that result type matters:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;half&nbsp;=
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(n&nbsp;%&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;==&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;/&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">throw</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">RuntimeException</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"n&nbsp;must&nbsp;be&nbsp;even"</SPAN>)
</PRE>What happens here is that if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is even,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>half</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be initialized to half of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>n</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not even, an exception will be thrown before<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>half</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be initialized to anything at all. Because of this, it is safe to treat a thrown exception as any kind of value whatsoever. Any context that tries to use the return from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>throw</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will never get to do so, and thus no harm will come. 
<P></P>
<P>Technically, an exception throw has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Nothing</SPAN>. You can use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>throw</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an expression even though it will never actually evaluate to anything. This little bit of technical gymnastics might sound weird, but is frequently useful in cases like the previous example. One branch of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes a value, while the other throws an exception and computes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Nothing</SPAN>. The type of the whole<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is then the type of that branch which does compute something. Type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Nothing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is discussed further in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/scalas-hierarchy.html#sec:bottom-types">Section 11.3</A>.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Catching exceptions</H4>
<P>You catch exceptions using the syntax shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:try-catch-syntax">Listing 7.11</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The syntax for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses was chosen for its consistency with an important part of Scala:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">pattern matching</EM>.<A id=i-2116566913-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Pattern matching, a powerful feature, is described briefly in this chapter and in more detail in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html">Chapter 15</A><A id=i692796846-1></A>.</P>
<P><A name=lst:try-catch-syntax></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.io.FileReader
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.io.FileNotFoundException
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.io.IOException
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;f&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FileReader</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"input.txt"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Use&nbsp;and&nbsp;close&nbsp;file</SPAN>
  &nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">catch</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;ex:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FileNotFoundException</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Handle&nbsp;missing&nbsp;file</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;ex:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">IOException</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Handle&nbsp;other&nbsp;I/O&nbsp;error</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.11 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try-catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause in Scala.</H5>
<P>The behavior of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>-<SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is the same as in other<A id=i-1329663144-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>languages with exceptions. The body is executed, and if it throws an exception, each<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause is tried in turn. In this example, if the exception is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FileNotFoundException</SPAN>, the first clause will execute. If it is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>IOException</SPAN>, the second clause will execute. If the exception is of neither type, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>-<SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will terminate and the exception will propagate further.</P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>One difference from Java that you'll quickly notice in Scala is that unlike Java, Scala does not require you to catch checked exceptions, or declare them in a throws clause. You can declare a throws clause if you wish with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@</SPAN><SPAN class=code>throws</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation, but it is not required. See<A id=i1490895901-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html#sec:annotations">Section 29.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@</SPAN><SPAN class=code>throws</SPAN>.</DIV>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause</H4>
<P>You can wrap an expression with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause if you want to cause some code to execute no matter how the expression terminates.<A id=i-86518969-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, you might want to be sure an open file gets closed even if a method exits by throwing an exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:try-finally-syntax">Listing 7.12</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows an example.</P>
<P><A name=lst:try-finally-syntax></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.io.FileReader
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;file&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FileReader</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"input.txt"</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Use&nbsp;the&nbsp;file</SPAN>
  &nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">finally</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;file.close()&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Be&nbsp;sure&nbsp;to&nbsp;close&nbsp;the&nbsp;file</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.12 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try-finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause in Scala.</H5>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:try-finally-syntax">Listing 7.12</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows the idiomatic way to ensure a non-memory resource, such as a file, socket, or database connection is closed. First you acquire the resource. Then you start a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>block in which you use the resource. Lastly, you close the resource in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>block. This idiom is the same in Scala as in Java, however, in Scala you can alternatively employ a technique called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">loan pattern</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to achieve the same goal more concisely. The loan pattern will be described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/control-abstraction.html#sec:control-structures">Section 9.4</A>.<A id=i-1122723055-1></A><A id=i-330150415-1></A><A id=i193663324-1></A></P></DIV>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Yielding a value</H4>
<P>As with most other Scala control structures,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>-<SPAN class=code>catch</SPAN>-<SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>results in a value. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:catch-yielding-value">Listing 7.13</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows how you can try to parse a URL but use a default value if the URL is badly formed.<SPAN class=Apple-converted-space>&nbsp;</SPAN>The result is that of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause if no exception is thrown, or the relevant<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause if an exception is thrown and caught. If an exception is thrown but not caught, the expression has no result at all. The value computed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause, if there is one, is dropped. Usually<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses do some kind of clean up such as closing a file; they should not normally change the value computed in the main body or a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN>.</P>
<P><A name=lst:catch-yielding-value></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.net.URL
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;java.net.MalformedURLException
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;urlFor(path:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;URL(path)
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">catch</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;e:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MalformedURLException</SPAN>&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;URL(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"http://www.scala-lang.org"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;}
</PRE>
<H5>Listing 7.13 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause that yields a value.</H5>
<P>If you're familiar with Java, it's worth noting that Scala's behavior differs from Java only because Java's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try-finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not result in a value. As in Java, if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause includes an explicit return statement, or throws an exception, that return value or exception will "overrule" any previous one that originated in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>try</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>block or one of its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>catch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses. For example, given this, rather contrived, function definition:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;f():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">return</SPAN>&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">finally</SPAN>&nbsp;{&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">return</SPAN>&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;}
</PRE>calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>f()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>results in 2. By contrast, given:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;g():&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">try</SPAN>&nbsp;{&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;}&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">finally</SPAN>&nbsp;{&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;}
</PRE>calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>g()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>results in 1. Both of these functions exhibit behavior that could surprise most programmers, thus it's usually best to avoid returning values from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses. The best way to think of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>finally</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses is as a way to ensure some side effect happens, such as closing an open file. 
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.5></A>7.5 Match expressions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.5">link</A>]</SPAN></H3>
<P><A name=sec:match-expressions></A></P>
<P>Scala's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression lets you select from a number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-196794451"><EM style="FONT-STYLE: italic">alternatives</EM></A>,<A id=i1524854239-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>just like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>switch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements<A id=i-1502876100-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in other languages. In general a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression lets you select using arbitrary<EM style="FONT-STYLE: italic">patterns</EM>, which will be described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html">Chapter 15</A>. The general form can wait. For now, just consider using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to select among a number of alternatives.<A id=i-440612313-1></A><A id=i-1073471110-1></A></P>
<P>As an example, the script in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:match-with-side-effects">Listing 7.14</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>reads a food name from the argument list and prints a companion to that food. This<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression examines<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>firstArg</SPAN>, which has been set to the first argument out of the argument list. If it is the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"salt"</SPAN>, it prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"pepper"</SPAN>, while if it is the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"chips"</SPAN>, it prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"salsa"</SPAN>, and so on. The default case is specified with an underscore (<SPAN class=code>_</SPAN>), a wildcard symbol frequently used in Scala as a placeholder for a completely unknown value<A id=i2028498488-1></A>.</P>
<P><A name=lst:match-with-side-effects></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;firstArg&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(args.length&nbsp;&gt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>
  <BR>  &nbsp;&nbsp;firstArg&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">match</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"salt"</SPAN>&nbsp;=&gt;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"pepper"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"chips"</SPAN>&nbsp;=&gt;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"salsa"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"eggs"</SPAN>&nbsp;=&gt;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"bacon"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;_&nbsp;=&gt;&nbsp;println(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"huh?"</SPAN>)
  &nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</PRE>
<H5>Listing 7.14 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression with side effects.</H5>
<P>There are a few important differences from Java's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>switch</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement. One is that any kind of constant, as well as other things, can be used in cases in Scala, not just the integer-type and enum constants of Java's case statements. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:match-with-side-effects">Listing 7.14</A>, the alternatives are strings. Another difference is that there are no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN>s<A id=i544483331-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the end of each alternative. Instead the<SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicit, and there is no fall through from one alternative to the next. The common case&#8212;not falling through&#8212;becomes shorter, and a source of errors is avoided because programmers can no longer fall through by accident.<A id=i1010794660-1></A></P>
<P>The most significant difference from Java's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>switch</SPAN>, however, may be that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions result in a value. In the previous example, each alternative in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression prints out a value. It would work just as well to yield the value rather than printing it, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:match-expression">Listing 7.15</A>. The value that results from this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>friend</SPAN>variable. Aside from the code getting shorter (in number of tokens, anyway), the code now disentangles two separate concerns: first it chooses a food, and then it prints it.</P>
<P><A name=lst:match-expression></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;firstArg&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(!args.isEmpty)&nbsp;args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">""</SPAN>
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;friend&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;firstArg&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">match</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"salt"</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"pepper"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"chips"</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"salsa"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"eggs"</SPAN>&nbsp;=&gt;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"bacon"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;_&nbsp;=&gt;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"huh?"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <BR>  &nbsp;&nbsp;println(friend)
</PRE>
<H5>Listing 7.15 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression that yields a value.</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.6></A>7.6 Living without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.6">link</A>]</SPAN></H3>
<P><A id=i1665067476-1></A><A id=i656795516-1></A>You may have noticed that there has been no mention of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN>. Scala leaves out these commands because they do not mesh well with function literals, a feature described in the next chapter. It is clear what<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>means inside a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, but what would it mean inside a function literal? While Scala supports both imperative and functional styles of programming, in this case it leans slightly towards functional programming in exchange for simplifying the language. Do not worry, though. There are many ways to program without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN>, and if you take advantage of function literals, those alternatives can often be shorter than the original code.</P>
<P>The simplest approach is to replace every<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and every<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by a boolean variable. The boolean variable indicates whether the enclosing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop should continue. For example, suppose you are searching through an argument list for a string that ends with "<SPAN class=code>.scala</SPAN>" but does not start with a hyphen. In Java you could&#8212;if you were quite fond of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loops,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN>&#8212;write the following:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  int&nbsp;i&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;Java
  boolean&nbsp;foundIt&nbsp;=&nbsp;false;
  while&nbsp;(i&nbsp;&lt;&nbsp;args.length)&nbsp;{
  &nbsp;&nbsp;if&nbsp;(args[i].startsWith("-"))&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
  &nbsp;&nbsp;&nbsp;&nbsp;continue;
  &nbsp;&nbsp;}
  &nbsp;&nbsp;if&nbsp;(args[i].endsWith(".scala"))&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;foundIt&nbsp;=&nbsp;true;
  &nbsp;&nbsp;&nbsp;&nbsp;break;
  &nbsp;&nbsp;}
  &nbsp;&nbsp;i&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
  }
</PRE>
<P></P>
<P>To transliterate this Java code directly to Scala, instead of doing an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN>, you could write an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>if</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that surrounds the entire remainder of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop. To get rid of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN>, you would normally add a boolean variable indicating whether to keep going, but in this case you can reuse<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>foundIt</SPAN>. Using both of these tricks, the code ends up looking as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:looping-without">Listing 7.16</A>.</P>
<P><A name=lst:looping-without></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;i&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;foundIt&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">false</SPAN>
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(i&nbsp;&lt;&nbsp;args.length&nbsp;&amp;&amp;&nbsp;!foundIt)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(!args(i).startsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"-"</SPAN>))&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(args(i).endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>))
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foundIt&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">true</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;i&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.16 - Looping without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>break</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN>.</H5>
<P>This Scala code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:looping-without">Listing 7.16</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is quite similar to the original Java code. All the basic pieces are still there and in the same order. There are two reassignable variables and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN>loop. Inside the loop, there is a test that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>args.length</SPAN>, a check for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"-"</SPAN>, and a check for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>".scala"</SPAN>.</P>
<P>If you wanted to get rid of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:looping-without">Listing 7.16</A>, one approach you could try is to rewrite the loop as a recursive function. You could, for example, define a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>searchFrom</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function that takes an integer as an input, searches forward from there, and then returns the index of the desired argument. Using this technique the code would look as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:recursive-approach">Listing 7.17</A>:</P>
<P><A name=lst:recursive-approach></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;searchFrom(i:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(i&nbsp;&gt;=&nbsp;args.length)&nbsp;-<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(args(i).startsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"-"</SPAN>))&nbsp;searchFrom(i&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>&nbsp;(args(i).endsWith(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">".scala"</SPAN>))&nbsp;i
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>&nbsp;searchFrom(i&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;i&nbsp;=&nbsp;searchFrom(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)
</PRE>
<H5>Listing 7.17 - A recursive alternative to looping with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s.</H5>
<P>The version in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:recursive-approach">Listing 7.17</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives a human-meaningful name to what the function does, and it uses recursion to substitute for looping. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>continue</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is replaced by a recursive call with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN>&nbsp;<SPAN class=code>+</SPAN>&nbsp;<SPAN class=code>1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the argument, effectively skipping to the next integer. Many people find this style of programming easier to understand, once they get used to the recursion.</P>
<DIV class=note style="PADDING-RIGHT: 20px; PADDING-LEFT: 20px; PADDING-BOTTOM: 5px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px">
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Note</H4>
<P>The Scala compiler will not actually emit a recursive function for the code shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:recursive-approach">Listing 7.17</A>. Because all of the recursive calls are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">tail-call</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>position, the compiler will generate code similar to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop. Each recursive call will be implemented as a jump back to the beginning of the function. Tail-call optimization will be discussed in<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functions-and-closures.html#sec:tail-recursion">Section 8.9</A>.</P></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.7></A>7.7 Variable scope<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.7">link</A>]</SPAN></H3>
<P><A name=sec:variable-scope></A></P>
<P>Now that you've seen Scala's built-in<A id=i46504593-1></A><A id=i-250564140-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>control structures, we'll use them in this section to explain how scoping works in Scala.</P>
<DIV class=pointofinterest>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Fast track for Java programmers</H3>
<P>If you're a Java programmer, you'll find that Scala's scoping rules are almost identical to Java's. One difference between Java and Scala exists, however, in that Scala allows you to define variables of the same name in nested scopes. If you're a Java programmer, therefore, you may wish to at least skim this section.</P></DIV>
<P>Variable declarations in Scala programs have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">scope</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that defines where you can use the name. The most common example of scoping is that curly braces generally introduce a new<A id=i-1385018222-1></A><A id=i32772000-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>scope, so anything defined inside curly braces leaves scope after the final closing brace.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#footnote7-3">[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>As an illustration, consider the function shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:first-multi-table">Listing 7.18</A>.</P>
<P><A name=lst:first-multi-table></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;printMultiTable()&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;i&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;only&nbsp;i&nbsp;in&nbsp;scope&nbsp;here</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(i&nbsp;&lt;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;j&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;both&nbsp;i&nbsp;and&nbsp;j&nbsp;in&nbsp;scope&nbsp;here</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(j&nbsp;&lt;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;prod&nbsp;=&nbsp;(i&nbsp;*&nbsp;j).toString
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;i,&nbsp;j,&nbsp;and&nbsp;prod&nbsp;in&nbsp;scope&nbsp;here</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;k&nbsp;=&nbsp;prod.length
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;i,&nbsp;j,&nbsp;prod,&nbsp;and&nbsp;k&nbsp;in&nbsp;scope&nbsp;here</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(k&nbsp;&lt;&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">4</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"&nbsp;"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k&nbsp;+=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(prod)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;+=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;i&nbsp;and&nbsp;j&nbsp;still&nbsp;in&nbsp;scope;&nbsp;prod&nbsp;and&nbsp;k&nbsp;out&nbsp;of&nbsp;scope</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println()
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;+=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;i&nbsp;still&nbsp;in&nbsp;scope;&nbsp;j,&nbsp;prod,&nbsp;and&nbsp;k&nbsp;out&nbsp;of&nbsp;scope</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.18 - Variable scoping when printing a multiplication table.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:first-multi-table">Listing 7.18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints out a multiplication table.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#footnote7-4">[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The first statement of this function introduces a variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and initializes it to the integer 1. You can then use the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the remainder of the function.</P>
<P>The next statement in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">while</SPAN>&nbsp;(i&nbsp;&lt;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)&nbsp;{
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;j&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;...
  }
</PRE>You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>i</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>here because it is still in scope. In the first statement inside that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, you introduce another variable, this time named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>j</SPAN>, and again initialize it to 1. Because the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>j</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>was defined inside the open curly brace of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, it can be used only within that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop. If you were to attempt to do something with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>j</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>after the closing curly brace of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop, after the comment that says<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>j</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>prod</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>k</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are out of scope, your program would not compile. 
<P></P>
<P>All variables defined in this example&#8212;<SPAN class=code>i</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>j</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>prod</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>k</SPAN>&#8212;are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">local variables</EM>.<A id=i1400207106-1></A><A id=i40385448-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Such variables are "local" to the function in which they are defined. Each time a function is invoked, a new set of its local variables is used.</P>
<P>Once a variable is defined, you can't define a new variable with the same name in the same scope. For example, the following script would not compile:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Does&nbsp;not&nbsp;compile</SPAN>
  println(a)
</PRE>You can, on the other hand, define a variable in an inner scope that has the same name as a variable in an outer scope. The following script would compile and run:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>;
  {
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Compiles&nbsp;just&nbsp;fine</SPAN>
  &nbsp;&nbsp;println(a)
  }
  println(a)
</PRE>When executed, the script shown previously would print 2 then 1, because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>a</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined inside the curly braces is a different variable, which is in scope only until the closing curly brace.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#footnote7-5">[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>One difference to note between Scala and Java is that unlike Scala, Java will not let you create a variable in an inner scope that has the same name as a variable in an outer scope. In a Scala program, an inner variable is said to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">shadow</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a like-named outer variable, because the outer variable becomes invisible in the inner scope.<A id=i1857790361-1></A><A id=i-1451425665-1></A><A id=i-141883422-1></A> 
<P></P>
<P>You might have already noticed something that looks like shadowing in the interpreter:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">a:&nbsp;Int&nbsp;=&nbsp;1</SPAN>
  <BR>  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">a:&nbsp;Int&nbsp;=&nbsp;2</SPAN>
  <BR>  scala&gt;&nbsp;println(a)
  <SPAN class=output style="COLOR: rgb(90,0,0)">2</SPAN>
</PRE>In the interpreter, you can reuse variable names to your heart's content. Among other things, this allows you to change your mind if you made a mistake when you defined a variable the first time in the interpreter. The reason you can do this is that, conceptually, the interpreter creates a new nested scope for each new statement you type in. Thus, you could visualize the previous interpreted code like this:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>;
  {
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;a&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">2</SPAN>;
  &nbsp;&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;println(a)
  &nbsp;&nbsp;}
  }
</PRE>This code will compile and run as a Scala script, and like the code typed into the interpreter, will print 2. Keep in mind that such code can be very confusing to readers, because variable names adopt new meanings in nested scopes. It is usually better to choose a new, meaningful variable name rather than to shadow an outer variable. 
<P></P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.8></A>7.8 Refactoring imperative-style code<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.8">link</A>]</SPAN></H3>
<P><A name=sec:refactoring-imperative-code></A></P>
<P>To help you gain insight into the functional style, in this section we'll refactor the imperative approach to printing a multiplication table shown in<A id=i892284799-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:first-multi-table">Listing 7.18</A>.<A id=i-2064017764-1></A><A id=i-496550431-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Our functional alternative is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:second-multi-table">Listing 7.19</A>.</P>
<P><A name=lst:second-multi-table></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Returns&nbsp;a&nbsp;row&nbsp;as&nbsp;a&nbsp;sequence</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;makeRowSeq(row:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(col&nbsp;&lt;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;to&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;prod&nbsp;=&nbsp;(row&nbsp;*&nbsp;col).toString
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;padding&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"&nbsp;"</SPAN>&nbsp;*&nbsp;(<SPAN class=literal style="COLOR: rgb(205,123,0)">4</SPAN>&nbsp;-&nbsp;prod.length)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding&nbsp;+&nbsp;prod
  &nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Returns&nbsp;a&nbsp;row&nbsp;as&nbsp;a&nbsp;string</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;makeRow(row:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Int</SPAN>)&nbsp;=&nbsp;makeRowSeq(row).mkString
  <BR>  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Returns&nbsp;table&nbsp;as&nbsp;a&nbsp;string&nbsp;with&nbsp;one&nbsp;row&nbsp;per&nbsp;line</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;multiTable()&nbsp;=&nbsp;{
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;tableSeq&nbsp;=&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;a&nbsp;sequence&nbsp;of&nbsp;row&nbsp;strings</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(row&nbsp;&lt;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>&nbsp;to&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">yield</SPAN>&nbsp;makeRow(row)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;tableSeq.mkString(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"\n"</SPAN>)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 7.19 - A functional way to create a multiplication table.</H5>
<P>The imperative style reveals itself in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:first-multi-table">Listing 7.18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in two ways. First, invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a side effect: printing a multiplication table to the standard output. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:second-multi-table">Listing 7.19</A>, we refactored the function so that it returns the multiplication table as a string. Since the function no longer prints, we renamed it<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>multiTable</SPAN>. As mentioned previously, one advantage of side-effect-free functions is they are easier to unit test.<A id=i-2030836876-2></A><A id=i808305838-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>To test<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN>, you would need to somehow redefine<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>print</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>so you could check the output for correctness. You could test<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>multiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>more easily, by checking its string result.</P>
<P>The other telltale sign of the imperative style in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>while</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s. By contrast, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>multiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-59832310"><EM style="FONT-STYLE: italic">helper functions</EM></A>, and calls to<SPAN class=code>mkString</SPAN>.</P>
<P>We factored out the two helper functions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRow</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRowSeq</SPAN>, to make the code easier to read. Function<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRowSeq</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression whose generator iterates through column numbers 1 through 10. The body of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>calculates the product of row and column, determines the padding needed for the product, and yields the result of concatenating the padding and product strings. The result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression will be a sequence (some subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.Seq</SPAN>) containing these yielded strings as elements. The other helper function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRow</SPAN>, simply invokes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>mkString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the result returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRowSeq</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>mkString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will concatenate the strings in the sequence and return them as one string.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>multiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method first initializes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>tableSeq</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the result of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression whose generator iterates through row numbers 1 to 10, and for each calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>makeRow</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get the string for that row. This string is yielded, thus the result of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression will be a sequence of row strings. The only remaining task is to convert the sequence of strings into a single string. The call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>mkString</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>accomplishes this, and because we pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"\n"</SPAN>, we get an end of line character inserted between each string. If you pass the string returned by<SPAN class=code>multiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>println</SPAN>, you'll see the same output that's produced by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN>:</P>
<DIV align=center><SPAN class=code>&nbsp;1&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10</SPAN><BR><SPAN class=code>&nbsp;2&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;10&nbsp;&nbsp;12&nbsp;&nbsp;14&nbsp;&nbsp;16&nbsp;&nbsp;18&nbsp;&nbsp;20</SPAN><BR><SPAN class=code>&nbsp;3&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;12&nbsp;&nbsp;15&nbsp;&nbsp;18&nbsp;&nbsp;21&nbsp;&nbsp;24&nbsp;&nbsp;27&nbsp;&nbsp;30</SPAN><BR><SPAN class=code>&nbsp;4&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;12&nbsp;&nbsp;16&nbsp;&nbsp;20&nbsp;&nbsp;24&nbsp;&nbsp;28&nbsp;&nbsp;32&nbsp;&nbsp;36&nbsp;&nbsp;40</SPAN><BR><SPAN class=code>&nbsp;5&nbsp;&nbsp;10&nbsp;&nbsp;15&nbsp;&nbsp;20&nbsp;&nbsp;25&nbsp;&nbsp;30&nbsp;&nbsp;35&nbsp;&nbsp;40&nbsp;&nbsp;45&nbsp;&nbsp;50</SPAN><BR><SPAN class=code>&nbsp;6&nbsp;&nbsp;12&nbsp;&nbsp;18&nbsp;&nbsp;24&nbsp;&nbsp;30&nbsp;&nbsp;36&nbsp;&nbsp;42&nbsp;&nbsp;48&nbsp;&nbsp;54&nbsp;&nbsp;60</SPAN><BR><SPAN class=code>&nbsp;7&nbsp;&nbsp;14&nbsp;&nbsp;21&nbsp;&nbsp;28&nbsp;&nbsp;35&nbsp;&nbsp;42&nbsp;&nbsp;49&nbsp;&nbsp;56&nbsp;&nbsp;63&nbsp;&nbsp;70</SPAN><BR><SPAN class=code>&nbsp;8&nbsp;&nbsp;16&nbsp;&nbsp;24&nbsp;&nbsp;32&nbsp;&nbsp;40&nbsp;&nbsp;48&nbsp;&nbsp;56&nbsp;&nbsp;64&nbsp;&nbsp;72&nbsp;&nbsp;80</SPAN><BR><SPAN class=code>&nbsp;9&nbsp;&nbsp;18&nbsp;&nbsp;27&nbsp;&nbsp;36&nbsp;&nbsp;45&nbsp;&nbsp;54&nbsp;&nbsp;63&nbsp;&nbsp;72&nbsp;&nbsp;81&nbsp;&nbsp;90</SPAN><BR><SPAN class=code>10&nbsp;&nbsp;20&nbsp;&nbsp;30&nbsp;&nbsp;40&nbsp;&nbsp;50&nbsp;&nbsp;60&nbsp;&nbsp;70&nbsp;&nbsp;80&nbsp;&nbsp;90&nbsp;100</SPAN><BR></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=7.9></A>7.9 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#7.9">link</A>]</SPAN></H3>
<P>Scala's built-in control structures are minimal, but they do the job. They act much like their imperative equivalents, but because they tend to result in a value, they support a functional style, too. Just as important, they are careful in what they omit, thus leaving room for one of Scala's most powerful features, the function literal, which will be described in the next chapter.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 7:</H4>
<P><A name=footnote7-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcd-recursive">Listing 7.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the same approach used by the like-named function, first shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/functional-objects.html#lst:private-members">Listing 6.3</A>, to calculate greatest common divisors for class<SPAN class=code>Rational</SPAN>. The main difference is that instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN>s the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>gcd</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:gcd-recursive">Listing 7.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>works with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Long</SPAN>s.</P>
<P><A name=footnote7-2>[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>To be precise, the expression to the right of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>&lt;-</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression can be any type that has certain methods, in this case<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>foreach</SPAN>, with appropriate signatures. The details on how the Scala compiler processes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions are described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/for-expressions-revisited.html">Chapter 23</A>.</P>
<P><A name=footnote7-3>[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>There are a few exceptions to this rule, because in Scala you can sometimes use curly braces in place of parentheses. One example of this kind of curly-brace use is the alternative<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>for</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression syntax described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#sec:for-expressions">Section 7.3</A>.</P>
<P><A name=footnote7-4>[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>printMultiTable</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>function shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/builtin-control-structures.html#lst:first-multi-table">Listing 7.18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is written in an imperative style. We'll refactor it into a functional style in the next section.</P>
<P><A name=footnote7-5>[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>By the way, the semicolon is required in this case after the first definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>a</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>because Scala's semicolon inference mechanism will not place one there.</P></DIV>