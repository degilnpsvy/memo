<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>3.3.&nbsp;Engineering Product Life Cycle</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch03s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;3.&nbsp;Software Development</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch03s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="3.3.&nbsp;Engineering Product Life Cycle" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=life_cycle></A>3.3.&nbsp;Engineering Product Life Cycle</H2></DIV></DIV></DIV>
<P>Introduce now before developing bad habits. Should not wait until software engineering class and change the way we think.</P>
<P>This section introduces the product life cycle, which is used to assure quality in all fields of engineering, including software engineering. In software engineering, we refer to it as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>software life cycle.</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286954660></A>Although the software life cycle may not be the primary focus of this course, it should be practiced in all programming endeavors, including college courses, personal projects, and professional development.</P>
<P>The product life cycle has been extensively studied and refined over time, and is the topic of entire semester courses in most engineering disciplines. Our coverage here is a very brief overview, using a 4-step process which is outlined in the following sections.</P>
<DIV class=section title=3.3.1.&nbsp;Specification>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286954668></A>3.3.1.&nbsp;Specification</H3></DIV></DIV></DIV>
<P>Specification is understanding the essence of the problem to be solved in as much detail as possible. Specifications may evolve during design and implementation stages as new insights are gained from working on the solution. However, every effort should be made to write specifications that will require minimal change during later stages of development.</P></DIV>
<DIV class=section title=3.3.2.&nbsp;Design>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286954678></A>3.3.2.&nbsp;Design</H3></DIV></DIV></DIV>
<P>The design phase involves examining possible solutions to the problem with a completely open mind. The decision to write software or otherwise develop a new solution does not occur until<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>after</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>the design phase. Instead, the design phase focuses on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>process</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of solving the problem. This process could be carried out by hand, by existing equipment or technology, by a software solution, or a new hardware solution.</P>
<P>In the design stage, an engineer may develop flowcharts, equations, top-down designs, drawings, etc., but not program code or hardware prototypes. One should avoid any thoughts about how the solution will be implemented during the design phase. Such thoughts are a distraction from the purpose here, which is to develop theoretical solutions.</P>
<P>Failure to fully explore solutions in the design phase can lead to reinventing a wheel that does not need reinventing, or more commonly, unnecessary difficulties in the implementation stage. Developing a well-though-out design is the best investment of time you can make in the development of a product. Each hour invested in developing a good design could save 10 or 100 hours of aggravation during implementation.</P></DIV>
<DIV class=section title=3.3.3.&nbsp;Implementation>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286954872></A>3.3.3.&nbsp;Implementation</H3></DIV></DIV></DIV>
<P>Implementation involves building something to test the process developed in the design stage. If you developed a good design, the implementation stage will be relatively straightforward and uneventful. If you find yourself struggling during implementation, then you need to go back and correct deficiencies in the design.</P>
<P>If the best solution found during the design stage is to use existing hardware or software, there is little to do in this stage. If it involves developing new hardware or software, then implementation involves the following:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>Selecting the right tools and materials. For software, this means computer hardware, operating system, and programming language. For a hardware design, it means electronic or mechanical devices and fabrication techniques. A good choice here requires a solid understanding of the design, and knowledge of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>many</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>available tools. Far too often, software developers choose an operating system or language because it's the only one they know, leading to a poor quality product that does not serve the customers' needs very well.</LI>
<LI class=listitem>Performing the implementation. For software, this means writing the code. For hardware, it could mean building prototypes of the hardware or programming an FPGA.</LI></OL></DIV>
<P></P>
<P>During implementation, you may discover a need to alter the design or specification due to unforeseen difficulties with implementation. However, a good specification and design will require only minimal changes.</P></DIV>
<DIV class=section title=3.3.4.&nbsp;Testing>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286954901></A>3.3.4.&nbsp;Testing</H3></DIV></DIV></DIV>
<P>Testing is not a separate stage in the development time line, but occurs continuously starting at the beginning of the implementation stage, and continues indefinitely, long after implementation and product release.</P>
<P>Testing begins the moment there is something to test, and never ceases as long as the product remains available.</P>
<P>Testing should occur following each small change throughout the implementation process. This type of testing is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>integration testing</EM></SPAN>, since each new piece<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286954918></A>is tested the moment it is integrated into the product. In software development, integration testing occurs following each small change to the code, such as adding a new loop, if block, or subprogram stub.</P>
<P>Additional types of testing occur following completion of the product, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>alpha testing</EM></SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286954929></A>which refers to in-house testing of the complete product before releasing it to customers, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>beta testing</EM></SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286954937></A>which refers to testing performed by a limited group of customers before officially releasing the product for general use.</P>
<P>Integration testing should catch 99% of the bugs in a program. Alpha testing should catch almost all of the few remaining bugs before the program is released for beta testing.</P>
<P>Alpha testing follows implementation, and should use a significant fraction of the total project time (typically 1/4 to 1/2, depending on the reliability requirements). If the project duration is six months, you should aim to complete implementation in roughly four months to allow for thorough alpha testing and bug fixes. Bugs found after implementation is complete tend to be difficult to identify and resolve, so you must allocate a generous amount of time for alpha testing.</P>
<P><SPAN class=emphasis><EM>Customers should<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>never</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>be the ones to find bugs in your code!</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>This is bad for your reputation as a programmer or company. Beta testing should be viewed as an opportunity to showcase a new product and demonstrate the quality of your development process, not as an opportunity to get free testing from end-users.</P></DIV>
<DIV class=section title=3.3.5.&nbsp;Examples>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286954995></A>3.3.5.&nbsp;Examples</H3></DIV></DIV></DIV>
<P>Software Example: Find roots of a quadratic equation</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>What are the specifications?</LI>
<LI class=listitem>What are three possible designs that we could use to meet the specifications? What are the advantages of each?</LI>
<LI class=listitem>What would be required to implement each design?</LI>
<LI class=listitem>How would we go about testing each implementation?</LI></OL></DIV>
<P>When designing hardware, implementation is difficult, so we are highly motivated to invest in specification and design.</P>
<P>When designing software, implementation is easy, so we are tempted to short-change the specification and design phases. In order to program efficiently and produce quality code, we must learn to discipline ourselves to invest in specification and design. If we don't, the implementation stage will be far more difficult than necessary, and the code produced will be convoluted.</P></DIV>
<DIV class=section title=3.3.6.&nbsp;Bibliography>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286955028></A>3.3.6.&nbsp;Bibliography</H3></DIV></DIV></DIV>
<P>The Quest for Software Requirements</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch03s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch03.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch03s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">3.2.&nbsp;Language Types&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;3.4.&nbsp;Homework</TD></TR></TBODY></TABLE></DIV>