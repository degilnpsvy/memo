<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>5.2.&nbsp;Hardware and Program Execution</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;5.&nbsp;The MIPS Architecture</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="5.2.&nbsp;Hardware and Program Execution" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286958004></A>5.2.&nbsp;Hardware and Program Execution</H2></DIV></DIV></DIV>
<P><IMG src="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/Images/cpu_block.png"></P>
<P>All components of a computer are synchronized by a clock pulse, which is a logic signal that alternates between 0 and 1 at regular intervals. On most digital circuits such as computers, events are triggered when the clock transitions from 0 to 1 (leading edge) or when it transitions from 1 to 0 (trailing edge).</P><PRE class=screen>	  1   2   3   4   5
	__--__--__--__--__--__--__--__--__--__--__--__--__
	</PRE>
<P>The control unit sends out a batch of control signals at each clock pulse. These signals will take some time to propagate (travel) through the circuits to their destination.</P>
<P>Components being controlled by the these signals will then respond to those signals at the next clock pulse. For example, if the control unit sends out a signal at pulse 1 telling a register to load a new value, the register will load the value at pulse 2.</P>
<P>The clock speed of a processor is limited by how long it takes for signals to propagate. For instance, in a 3GHz computer, signals must propagate between the most basic CPU elements within 1 / 3,000,000,000 or a second.</P>
<DIV class=section title=5.2.1.&nbsp;Memory>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958025></A>5.2.1.&nbsp;Memory</H3></DIV></DIV></DIV>
<P>Most modern computers use byte-addressable memory, meaning that each memory address contains 8 bits of data. Hence, a 32-bit word occupies 4 memory addresses. A 32-bit word at memory address 1000 would actually occupy addresses 1000 through 1003.</P>
<P>When storing a single integer across multiple memory addresses, we must choose an order for the bytes.</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>Big-endian systems store the most significant byte (the big end) first. For example, the value 0xFF001155 would be stored at address 1000 as follows:
<DIV class=table><A name=big_endian></A>
<P class=title><B>Table&nbsp;5.1.&nbsp;Big Endian Long Word</B></P>
<DIV class=table-contents>
<TABLE summary="Big Endian Long Word" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Address</TH>
<TH align=left>Content</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>1000</TD>
<TD align=left>FF</TD></TR>
<TR>
<TD align=left>1001</TD>
<TD align=left>00</TD></TR>
<TR>
<TD align=left>1002</TD>
<TD align=left>11</TD></TR>
<TR>
<TD align=left>1003</TD>
<TD align=left>55</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break></LI>
<LI class=listitem>Little-endian systems store the least significant byte (the little end) first. For example, the value 0xFF001155 would be stored at address 1000 as follows:
<DIV class=table><A name=little_endian></A>
<P class=title><B>Table&nbsp;5.2.&nbsp;Little Endian Long Word</B></P>
<DIV class=table-contents>
<TABLE summary="Little Endian Long Word" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Address</TH>
<TH align=left>Content</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>1000</TD>
<TD align=left>55</TD></TR>
<TR>
<TD align=left>1001</TD>
<TD align=left>11</TD></TR>
<TR>
<TD align=left>1002</TD>
<TD align=left>00</TD></TR>
<TR>
<TD align=left>1003</TD>
<TD align=left>FF</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break></LI></UL></DIV>
<P>Memory on modern computers is far slower than the CPU, and takes many CPU clock cycles (or wait-states) to decode an address and read or write the data. If the CPU needs data from memory in order to complete an operation, it may spend many clock cycles doing nothing while it waits for memory to respond. For this reason, memory access is considered a performance bottleneck, and complex systems exist in both hardware and software to avoid memory access as much as possible.</P></DIV>
<DIV class=section title="5.2.2.&nbsp;Data Registers">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958121></A>5.2.2.&nbsp;Data Registers</H3></DIV></DIV></DIV>
<P>Most CPUs contain a small number (usually 8, 16, or 32) of registers for storing data. Registers are like memory cells, but are part of the CPU rather than on a separate chip. They can usually be accessed in a fraction of the time it takes to access RAM outside the CPU. Hence, assembly language programmers and compiler-writers try to utilize registers rather than memory in order to optimize for speed. As you will see, this often means sacrificing readability, and necessitating more comments, since register names are fixed, unlike memory locations which can be given descriptive variable names.</P></DIV>
<DIV class=section title="5.2.3.&nbsp;The Program Counter (PC)">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958126></A>5.2.3.&nbsp;The Program Counter (PC)</H3></DIV></DIV></DIV>
<P>The program counter (sometimes called instruction pointer) is a special-purpose register that contains the memory address of the next instruction to be executed. Every instruction is fetched from external memory at the address in the program counter, and stored in the instruction register.</P>
<P>When a computer is first powered on, the PC is loaded with the address of an instruction in ROM (BIOS or firmware), which begins the boot sequence. On a PC, the BIOS begins loading the operating system, which in turn loads and runs other programs.</P>
<P>When you run a program, the OS loads the machine code from the executable file into RAM, and sets the program counter to the memory address of the first instruction of the program.</P></DIV>
<DIV class=section title="5.2.4.&nbsp;The Instruction Register (IR)">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958136></A>5.2.4.&nbsp;The Instruction Register (IR)</H3></DIV></DIV></DIV>
<P>The instruction register is a special-purpose register that holds the instruction code while it's being decoded and executed.</P></DIV>
<DIV class=section title="5.2.5.&nbsp;The Control Unit (CU)">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958141></A>5.2.5.&nbsp;The Control Unit (CU)</H3></DIV></DIV></DIV>
<P>Depending on the operation code (opcode) and operands in the IR, generates a sequence of signals to control the other parts of the CPU and memory to execute the instruction.</P></DIV>
<DIV class=section title="5.2.6.&nbsp;The Arithmetic and Logic Unit (ALU)">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286958147></A>5.2.6.&nbsp;The Arithmetic and Logic Unit (ALU)</H3></DIV></DIV></DIV>
<P>Performs mathematical operations such as add, sub, and, or on one or more operands from registers (or memory in some architectures).</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">Chapter&nbsp;5.&nbsp;The MIPS Architecture&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;5.3.&nbsp;The MIPS Register Files</TD></TR></TBODY></TABLE></DIV>