<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>12.9.&nbsp;Cache</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s08.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;12.&nbsp;Memory and Arrays</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s10.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title=12.9.&nbsp;Cache style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286964601></A>12.9.&nbsp;Cache</H2></DIV></DIV></DIV>
<DIV class=section title=12.9.1.&nbsp;Overview>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286964603></A>12.9.1.&nbsp;Overview</H3></DIV></DIV></DIV>
<P><EM class=glossterm>Main memory</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>consists of large RAM chips outside the CPU, usually mounted in special slots on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>motherboard</EM>. Because main memory has a large number of addresses, it takes a long time to decode the address before it can read or write the memory cell. Also, RAM chips are designed to pack a large amount of memory into a small space, so power and heat dissipation take precedence over speed. This often results in the CPU sitting idle for many clock cycles while waiting for a response from the memory unit.</P>
<P>To reduce this memory bottleneck, most modern systems employ<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>cache</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>memory. The word cache comes from French, and means<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=quote>&#8220;<SPAN class=quote>hidden</SPAN>&#8221;</SPAN>.</P>
<P>The cache RAM is a small, very fast RAM unit that is managed entirely by the hardware. The full details of cache operation are left to a course in computer architecture.</P>
<P>Access to cache requires a fraction of the time it takes to access main memory. Neither user programs nor the operating system have direct access to cache memory, but knowing that it is there and how it works can help programmers take better advantage of it.</P><PRE class=screen>			+-------------------------------+
			|           +---------------+   |
			|   RAM     |               |   |
			|           |               |   |
			|           |               |   |
	+-------+       | +-------+ |               |   |
	|  CPU  |-------|-| cache |-|  main memory  |   |
	+-------+       | +-------+ |               |   |
			|           |               |   |
			|           |               |   |
			|           |               |   |
			|           +---------------+   |
			+-------------------------------+
    </PRE>
<P>Each time main memory is read, a copy of the data is stored in the cache. The next time that same main memory address is accessed, the cache is checked first. If the data is still in the cache, it is taken from there, and it is not necessary to access the main memory chips at all. Since cache is much smaller than main memory, only recently accessed data will be present in the cache. The cache fills quickly when programs are running, and when it is full, old data is overwritten by the most recent data read from main memory.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>hit ratio</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for cache is defined as the number of RAM references satisfied by the cache divided by the total number of RAM references. The cache hit ratio is not as critical as the virtual memory hit ratio, but a good hit ratio can double or triple program performance. It is common in well-designed software to see a cache hit-ratio around 0.9, even if the size of cache is 1/1000 the size of main memory.</P>
<P>If a cache hit ratio is 0.8, cache access take 3ns, and main memory access takes 10ns, what is the average memory access time?</P><PRE class=screen>    avg access time = 0.8 * 3ns + 0.2 * 10ns
		    = 4.4ns
    </PRE>
<P>With a fairly good hit ratio, cache can more than double average memory speed. Experience has shown that a hit ratio of 0.8 is achievable with a very small amount of cache, and well-written program code. Given that a large percentage of memory references by most subprograms are to the loop counters and a few other scalar variables, hit ratios tend to be high unless arrays larger than the cache memory are in heavy use.</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s08.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s10.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">12.8.&nbsp;Virtual Memory&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;12.10.&nbsp;Locality of Reference</TD></TR></TBODY></TABLE></DIV>