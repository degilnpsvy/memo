<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>12.3.&nbsp;Arrays in High-level Languages</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;12.&nbsp;Memory and Arrays</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="12.3.&nbsp;Arrays in High-level Languages" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286964169></A>12.3.&nbsp;Arrays in High-level Languages</H2></DIV></DIV></DIV>
<DIV class=section title="12.3.1.&nbsp;Address Calculation">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286964174></A>12.3.1.&nbsp;Address Calculation</H3></DIV></DIV></DIV>
<P>Every memory cell is identified by an address, and nothing more.</P>
<P>The array subscripts used in HLL programs are an abstraction for which there is no direct analogy in machine language. Each array reference must be translated to an addressing mode at the machine code level. The translation from array element to memory address requires two pieces of information:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>base address</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the address of the first element of the array, i.e. where the array begins in memory.</LI>
<LI class=listitem>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>data size</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of memory cells occupied by one element of the data type. For example, a 32-bit integer stored in byte-addressable memory occupies 4 cells (addresses).</LI></UL></DIV>
<P>The address of element<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=varname>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a 1-dimensional array, assuming the first subscript is 0, would be</P>
<DIV class=informalequation>address = base + subscript * size</DIV>
<P>Suppose an int uses 32 bits. This is usually the case in C, but is not a rule. Compilers for small embedded processors may use 16-bit ints, for example. ( "int" is a pseudo-type in C, which is used to select the fastest integer type for the processor, whatever the size is. )</P><PRE class=screen>	    /* C array definition */
	    int     list[10];
	    
	    Address Array element
	    ---------------------
	    2000    list[0]
	    2001       "
	    2002       "
	    2003       "
	    2004    list[1]
	    2005       "
	    2006       "
	    2007       "
	    2008    list[2]
	    2009       "
	    2010       "
	    2011       "
	    ...
	    </PRE>
<P>What if the first subscript is 1?</P>
<DIV class=informalequation>address = base + (subscript-1) * size</DIV>
<P>Consider the following Java array:</P><PRE class=programlisting>	    int [] age_list = new int[MAX_AGES];
	    </PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=code>new</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator allocates memory for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=varname>MAX_AGES</CODE>, and returns the base address of the allocated memory block.</P>
<P>If new returns the address 2000, what is the address of age_list[3]? age_list[5]?</P></DIV>
<DIV class=section title="12.3.2.&nbsp;Multidimensional Arrays">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286964246></A>12.3.2.&nbsp;Multidimensional Arrays</H3></DIV></DIV></DIV>
<P>Since memory is 1-dimensional, arrays with 2 or more dimensions must be rearranged into 1-dimensional space somehow. In other words, each pair of subscripts (row,column) must be mapped to a memory address. In the case of a 2-dimensional array, there are two simple ways to map array elements to memory addresses. We will assume the first subscript refers to the row and the second refers to the column in either case.</P>
<P>In row-major ordering, used by Java, C, and C++, the contents of each "row" are stored in consecutive addresses. In the 2D array below, note that elements of the first row (table[0][0], table[0][1], and table[0][2]) are adjacent in memory.</P><PRE class=programlisting>	    /* C 3x3 array definition */
	    short   table[3][3];

	    Address Array element
	    ---------------------
	    2000    table[0][0]
	    2001        "
	    2002    table[0][1]
	    2003        "
	    2004    table[0][2]
	    2005        "
	    2006    table[1][0]
	    2007        "
	    2008    table[1][1]
	    2009        "
	    2010    table[1][2]
	    2011        "
	    2012    table[2][0]
	    2013        "
	    2014    table[2][1]
	    2015        "
	    2016    table[2][2]
	    2017        "
	    
	    address = base + (r * cols + c) * sizeof(type)
	    </PRE>
<P>In column-major ordering, which is used by Fortran, the elements of a column are in consecutive addresses. For example, elements matrix(1,1), matrix(2,1), and matrix(3,1) (the first column of the matrix) occupy one contiguous block of memory from address 2000 to 2019 below.</P><PRE class=programlisting>	    ! Fortran 3x3 array definition
	    real    matrix(3,3)

	    Address Array element
	    ---------------------
	    2000    matrix(1,1)
	    2001        "
	    2002        "
	    2003        "
	    2004    matrix(2,1)
	    2005        "
	    2006        "
	    2007        "
	    2016    matrix(3,1)
	    2017        "
	    2018        "
	    2019        "
	    2020    matrix(1,2)
	    ...

	    address = base + ((c-1) * rows + (r-1)) * sizeof(type)
	    </PRE>
<P>Understanding major ordering is important to designing efficient programs, as discussed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=xref title="12.10.&nbsp;Locality of Reference" href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s10.html">Section&nbsp;12.10, &#8220;Locality of Reference&#8221;</A>.</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">12.2.&nbsp;When to use Arrays&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;12.4.&nbsp;Arrays in Assembly Language</TD></TR></TBODY></TABLE></DIV>