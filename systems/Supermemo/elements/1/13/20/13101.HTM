<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>12.2.&nbsp;When to use Arrays</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;12.&nbsp;Memory and Arrays</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s03.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="12.2.&nbsp;When to use Arrays" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286964125></A>12.2.&nbsp;When to use Arrays</H2></DIV></DIV></DIV>
<DIV class=section title="12.2.1.&nbsp;Can I Do This Without an Array?">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286964131></A>12.2.1.&nbsp;Can I Do This Without an Array?</H3></DIV></DIV></DIV><SPAN class=quote>&#8220;<SPAN class=quote>"Hey, I just developed a new application that can organize my sock drawer using template classes, multiple inheritance, and interprocess communication..."<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>&#8221;</SPAN>
<P>Many programmers have a tendency to write code that is far more sophisticated than necessary. Most often, it results from an attempt to show off their programming prowess. Good programmers are never impressed, but instead lose respect.</P>
<P>Peacocks make lousy engineers. If your goal in writing code is to impress other people with your advanced knowledge, you're only creating problems. The best thing for your code quality is to abandon your ego and focus on objective goals such as minimizing complexity, memory use, and CPU time. If you must take pride in your work, then take pride in how simple and elegant your solutions are rather than how much mastery you can demonstrate with the solution. Challenge yourself to write the shortest, fastest, cleanest, and most readable code anyone has ever seen.</P>
<P>A program that uses arrays is almost always more complex, more resource-intensive, and more limited than one that does not. Common misuses of arrays:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>Matrix addition. Matrix addition involves adding corresponding elements of two matrices. If the matrices are stored in separate files, this can be accomplished by reading one element from each matrix, adding them, outputting the sum, and then moving on to the next. Reading the matrices into arrays makes the code more complicated and limits the size of the matrices by the amount of memory available. Without arrays, the matrix size is limited only by disk space.</LI>
<LI class=listitem>Numeric output (e.g. fill an array with characters and then print them). The octal output example shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=xref title="10.9.&nbsp;Coding Practice" href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s09.html">Section&nbsp;10.9, &#8220;Coding Practice&#8221;</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>demonstrates a better solution. An inexperienced programmer might think that it's more efficient to buffer the characters in an array during processing, and then output the block all at once. However, this only duplicates buffering already provided by the operating system and standard libraries.</LI>
<LI class=listitem>Any processing of a list that involves a single sweep through the list. If you have to process each element once, you can do it while you read the list, and immediately produce the result for each element. The same scalar variables can be used to process each element. Reading into an array, and then sweeping the array again only makes the program slower and limits the size of the list to available memory.</LI></UL></DIV></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch12s03.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">Chapter&nbsp;12.&nbsp;Memory and Arrays&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;12.3.&nbsp;Arrays in High-level Languages</TD></TR></TBODY></TABLE></DIV>