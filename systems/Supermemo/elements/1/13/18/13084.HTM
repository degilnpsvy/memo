<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>10.2.&nbsp;Modular Design</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;10.&nbsp;Subprogram Calls and the Stack</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s03.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="10.2.&nbsp;Modular Design" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286961994></A>10.2.&nbsp;Modular Design</H2></DIV></DIV></DIV>
<P>Most of the thought about how a task should be broken down is done in the design stage. Regardless of the complexity of a design, implementation should remain a fairly straightforward translation process.</P>
<DIV class=section title="10.2.1.&nbsp;Abstraction and Layers">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286962001></A>10.2.1.&nbsp;Abstraction and Layers</H3></DIV></DIV></DIV>
<P><EM class=glossterm>Abstraction</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the ommision of detail for the sake of looking at the big picture. For example, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>abstract</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an overview of a book or paper that summarizes the whole story with very little detail.</P>
<P>Abstraction can have many levels. The highest level of abstraction covers the whole picture, and has the least detail.</P>
<P>When we go to lower levels of abstraction, we generally focus on only part of the picture. For example, we may have a more details abstract for each chapter of a book, and even more detailed abstracts for each section.</P>
<P>A table of contents is another form of abstraction, as is a review article, or an outline.</P>
<P><EM class=glossterm>Top-down design</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the process of looking at a problem first as a whole, with very little concern for detail, and then gradually increasing the level of detail, while focusing on smaller and smaller portions of the problem.</P>
<P>In other words, we start with a very distant, abstract view of the problem (the top level) and work our way down through various layers, taking increasingly less abstract and more narrow views of parts of the problem.</P>
<P>An analogy is the use of Google Earth. We begin with a view of the entire Earth, but we cannot see much detail. With the top-level view, we see continents and oceans, but not much else. This is a very abstract view of Earth. We can zoom in on one particular continent, and see the countries, and maybe a bit more. This is a slightly less abstract and more narrow view. We can then zoom in on a country, and see the states or provinces. We can zoom in on a state, and see the counties, major cities, and major landmarks like large lakes.</P>
<P>The important point is that the closer we get, the more detail we see, and the smaller portion of the whole we see.</P>
<P>This is the approach we use to deal with anything that is too large and complex to comphrehend, whether it be a planet, a field of study, or an engineering problem. We choose a balance between breadth and detail, taking more of one and less of the other, depending on the needs of the moment.</P>
<P>The most intuitive way to visualize a top-down design is using a Tree structure view:</P><IMG src="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/Common/Subprograms/Images/earth.png">
<P>The same structure can be represented as text using indentation to denote the level in the tree. This structure is more convenient to represent in documents, but is not quite as visually intuitive.</P><PRE class=screen>	Earth
	    Africa
	    Asia
	    Antarctica
	    Australia
	    N. America
		Canada
		Mexico
		USA
	    S. America
	    Europe
	</PRE>
<P>Top-down designs can be used to represent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>anything</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can be broken down. A design can reveal the organization of physical objects to as much detail as we want, even down to subatomic particles. Top-down designs can also show the structure of ideas and processes, which is how they are generally used in computer science. In this case, the tree or text diagram indicates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>sequence</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of steps. On the tree, the sequence goes from left to right, and in the text it goes from the top down.</P>
<DIV class=example><A name=id286962054></A>
<P class=title><B>Example&nbsp;10.1.&nbsp;Ordering Pizza</B></P>
<DIV class=example-contents><PRE class=screen>	    Order pizza
		Decide on toppings
		    Talk to pizza eaters
			Talk to mom
			Talk to dad
			Talk to brother
			    Wave at brother so he takes off headphones
			Talk to sister
			    Wave at sister so she gets off the phone
		    Write down toppings
		Decide on a pizza place
		    Talk to pizza eaters
			Same details as above
		Decide on pick-up or delivery
		    Talk to pizza eaters
			Same details as above
		Get phone number
		    Check Internet
		    Check phone book
		Call pizza place
		    Dial number
		    Wait for answer
		    Talk to pizza guy
	    </PRE></DIV></DIV><BR class=example-break>
<P>One thing you may notice in the pizza example is that some of the units we created when breaking down the process are used repeatedly. This is another benefit of breaking down a problem into layers and modules. In addition to simply making the problem manageble, if it turns out that some modules can be reused, you have effectively<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>reduced the size of the problem</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>by eliminating redundancy. This will reduce the amount of work necessary to implement the solution.</P>
<P>Identifying and separating out modules that can be used in multiple places is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM class=glossterm>factoring</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the design (or the code). It is akin to reducing an expression such as xy + xz to x(y + z). It's the same expression, but the latter only represents x once. By factoring a program design, you ensure that each module of code will only be implemented once, which results in a smaller program.</P>
<DIV class=example><A name=id286962070></A>
<P class=title><B>Example&nbsp;10.2.&nbsp;Sorting</B></P>
<DIV class=example-contents><PRE class=screen>	    Sort list of numbers
		Get list
		    Get number
		    If not end of list, repeat
		Sort list
		    Find smallest number in list
			Assume first is smallest
			Compare to next number
			If next is smaller, remember location
			Repeat compare until end of list
		    Swap with first
			Copy first to temporary location
			Copy second to first
			Copy temporary location to second
		    Repeat for remaining numbers
		    Repeat until only one number remains
		Output sorted list
		    Output number
		    If not end of list, repeat
	    </PRE></DIV></DIV><BR class=example-break>
<P><EM class=glossterm>Stepwise refinement</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the process of breaking down a large design into layers of increasing detail.</P>
<P>The key to stepwise refinement is avoiding the temptation to go into too much detail too quickly. At each step, we only break things down into<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>a few, slighlty smaller and less abstract</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>units. We then tackle each of these smaller units in the same way,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>one at a time</EM></SPAN>, until we have refined all the units<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>at that level</EM></SPAN>.</P>
<P>First level of refinement:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem><PRE class=screen>	    House
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    House
		Basement
		First floor
		Second floor
	    </PRE></LI></OL></DIV>
<P>Second level of refinement:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem><PRE class=screen>	    Basement
		Laundry room
		Furnace room
		Recreation room
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    First floor
		Kitchen
		Living room
		Dining room
		Bathroom
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    Second floor
		Bedroom 1
		Bedroom 2
		Bathroom
	    </PRE></LI></OL></DIV>
<P>Third level of refinement:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem><PRE class=screen>	    Laundry room
		Washer
		Dryer
		Basin
		Shelving
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    Furnace room
		Furnace
		Water heater
		Exhaust
	    </PRE></LI></OL></DIV>
<P>and so on...</P>
<P>First level of refinement:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem><PRE class=screen>	    Sort list of numbers
		Get list
		Sort list
		Output sorted list
	    </PRE></LI></OL></DIV>
<P>Second level of refinement:</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem><PRE class=screen>	    Get list
		Get number
		Repeat until end of list
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    Sort list
		Find smallest
		Swap with first
		Repeat previous two steps for remaining numbers
		Repeat previous three steps until only one number remains
	    </PRE></LI>
<LI class=listitem><PRE class=screen>	    Output list
		Output a number
		Repeat until end of list
	    </PRE></LI></OL></DIV>
<P>An important part of using top-down design and implementation is to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>stay focused on one layer and finish it before starting the next</EM></SPAN>. If you don't, you will find yourself redoing an entire subtree when you alter the design at a higher level.</P></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s03.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">Chapter&nbsp;10.&nbsp;Subprogram Calls and the Stack&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;10.3.&nbsp;MIPS Subprograms</TD></TR></TBODY></TABLE></DIV>