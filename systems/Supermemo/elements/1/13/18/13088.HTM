<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>10.6.&nbsp;Value and Reference Arguments</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s05.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;10.&nbsp;Subprogram Calls and the Stack</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s07.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="10.6.&nbsp;Value and Reference Arguments" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286962587></A>10.6.&nbsp;Value and Reference Arguments</H2></DIV></DIV></DIV>
<P>There are two ways to send information stored in a variable to a subprogram.</P>
<DIV class=orderedlist>
<OL class=orderedlist type=1>
<LI class=listitem>Send the value of the variable.</LI>
<LI class=listitem>Send the address of the variable.</LI></OL></DIV>
<DIV class=section title="10.6.1.&nbsp;Pass by Value">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286962598></A>10.6.1.&nbsp;Pass by Value</H3></DIV></DIV></DIV>
<P>Sending the value of a variable is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>pass by value</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286962606></A>since only the value of the argument, and not the address, is known to the callee.</P>
<P>Consider the following code segment:</P><PRE class=programlisting>	    void    subprog1(void)
	    {
		int     x = 5;
		
		subprog2(x);
	    }
	    
	    void    subprog2(int a)
	    {
		a = 1;
	    }
	    </PRE>
<P>The variable a in subprog2 is known as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>formal argument variable</EM></SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286962620></A>The variable x in the call to subprog2 is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>argument value</EM></SPAN>.<A class=indexterm name=id286962628></A></P>
<P>When subprog1 calls subprog2, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>value</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of x is copied into a, which is a distinct variable with its own memory location. Both x and a are automatic variables, which are created on the system stack when they come into scope (when the block containing them is executed). The memory map for this code when subprog2 begins execution might appear as follows:</P>
<DIV class=table><A name=pass_by_value_before></A>
<P class=title><B>Table&nbsp;10.1.&nbsp;Pass by Value</B></P>
<DIV class=table-contents>
<TABLE summary="Pass by Value" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x</TD>
<TD align=left>1000</TD>
<TD align=left>5</TD></TR>
<TR>
<TD align=left>a</TD>
<TD align=left>2000</TD>
<TD align=left>5</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>After subprog2 executes the statement</P><PRE class=programlisting>	    a = 1;
	    </PRE>
<P>The memory map would appear as follows:</P>
<DIV class=table><A name=pass_by_value_after></A>
<P class=title><B>Table&nbsp;10.2.&nbsp;After Pass by Value</B></P>
<DIV class=table-contents>
<TABLE summary="After Pass by Value" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x</TD>
<TD align=left>1000</TD>
<TD align=left>5</TD></TR>
<TR>
<TD align=left>a</TD>
<TD align=left>2000</TD>
<TD align=left>1</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>Modifying the formal argument variable has no effect on the argument value. This has the following consequences:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>The argument value can be a variable, a constant, or an expression.</LI>
<LI class=listitem>If the argument value is a variable, it is protected from modification (side effects).</LI></UL></DIV></DIV>
<DIV class=section title="10.6.2.&nbsp;Pass by Reference">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286962758></A>10.6.2.&nbsp;Pass by Reference</H3></DIV></DIV></DIV>
<P>Sending the address of a variable is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>pass by reference</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=indexterm name=id286962766></A>since the formal argument variable in the called subprogram<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>refers to</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>the argument passed by the caller. In other words, the formal argument and the argument passed are two names for the same memory address.</P>
<P>Consider the following C++ code segment, where the formal argument a is declared as a reference parameter by prepending the &amp; character:</P><PRE class=programlisting>	    void    subprog1(void)
	    {
		int     x = 5, y = 6;
		
		subprog2(x);
		subprog2(y);
	    }
	    
	    void    subprog2(int &amp;a)
	    {
		a = 1;
	    }
	    </PRE>
<P>When subprog1 calls subprog2 the first time, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>address</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of x is sent, and the formal argument variable a is bound to this address. The formal argument a now refers to x while subprog2 executes. The memory map for this code might appear as follows:</P>
<DIV class=table><A name=pass_by_reference_before></A>
<P class=title><B>Table&nbsp;10.3.&nbsp;Pass by Reference</B></P>
<DIV class=table-contents>
<TABLE summary="Pass by Reference" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x, a</TD>
<TD align=left>1000</TD>
<TD align=left>5</TD></TR>
<TR>
<TD align=left>y</TD>
<TD align=left>1004</TD>
<TD align=left>6</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>After subprog2 executes the statement</P><PRE class=programlisting>	    a = 1;
	    </PRE>
<P>The memory map would appear as follows:</P>
<DIV class=table><A name=pass_by_reference_after></A>
<P class=title><B>Table&nbsp;10.4.&nbsp;After Pass by Reference</B></P>
<DIV class=table-contents>
<TABLE summary="After Pass by Reference" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x, a</TD>
<TD align=left>1000</TD>
<TD align=left>1</TD></TR>
<TR>
<TD align=left>y</TD>
<TD align=left>1004</TD>
<TD align=left>6</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>When subprog1 calls subprog2 the second time, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>address</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of y is sent, and the formal argument variable a is bound to this address. The formal argument a now refers to y while subprog2 executes. The memory map for this code might appear as follows:</P>
<DIV class=table><A name=id286962969></A>
<P class=title><B>Table&nbsp;10.5.&nbsp;Second Pass by Reference</B></P>
<DIV class=table-contents>
<TABLE summary="Second Pass by Reference" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x</TD>
<TD align=left>1000</TD>
<TD align=left>1</TD></TR>
<TR>
<TD align=left>y, a</TD>
<TD align=left>1004</TD>
<TD align=left>6</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>After subprog2 executes the statement</P><PRE class=programlisting>	    a = 1;
	    </PRE>
<P>The memory map would appear as follows:</P>
<DIV class=table><A name=id286963045></A>
<P class=title><B>Table&nbsp;10.6.&nbsp;After Second Pass by Reference</B></P>
<DIV class=table-contents>
<TABLE summary="After Second Pass by Reference" border=1>
<COLGROUP>
<COL>
<COL></COLGROUP>
<THEAD>
<TR>
<TH align=left>Variable</TH>
<TH align=left>Address</TH>
<TH align=left>Value</TH></TR></THEAD>
<TBODY>
<TR>
<TD align=left>x</TD>
<TD align=left>1000</TD>
<TD align=left>1</TD></TR>
<TR>
<TD align=left>y, a</TD>
<TD align=left>1004</TD>
<TD align=left>1</TD></TR></TBODY></TABLE></DIV></DIV><BR class=table-break>
<P>Since the formal argument variable refers to the argument, changes to the formal argument variable are reflected in the argument value. This has the following consequences:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>The argument value must be a variable, since constants and expressions cannot have their value modified.</LI>
<LI class=listitem>The argument value is susceptible to side-effects, since it can be altered by the subprogram. Sometimes we<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=emphasis><EM>want</EM></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>an argument modified by a subprogram, but if we don't, then it should be passed by value to avoid surprises.</LI></UL></DIV></DIV>
<P>In C, C++, and Java, scalar values are passed by value by default. C and C++ allow them to be passed by reference (using pointers or references), but Java does not. Arrays are always passed by reference in C, C++, and Java. Structures and class objects are passed by reference in Java. In C and C++, they are passed by value by default, but can be passed by reference using pointers or references. Fortran passes all arguments by reference, but provides another mechanism for protecting arguments from side effects.</P>
<DIV class=section title="10.6.3.&nbsp;Value and Reference Arguments in MAL">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id286963095></A>10.6.3.&nbsp;Value and Reference Arguments in MAL</H3></DIV></DIV></DIV>
<P>You've already seen examples of both pass by value and pass by reference in MAL. Consider the following two code segments. Which one uses pass by value, and which uses pass by reference?</P><PRE class=programlisting>		    lw      $v0, SYS_PRINT_INT
		    lw      $a0, sum
		    syscall
	    </PRE><PRE class=programlisting>		    lw      $v0, SYS_PRINT_STRING
		    la      $a0, age_prompt
		    syscall
	    </PRE>
<P>Choosing whether to pass by value or reference in assembly language is a m</P></DIV></DIV>