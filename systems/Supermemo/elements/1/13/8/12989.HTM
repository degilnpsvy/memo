<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 25 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Annotations</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>Annotations are structured information added to program source code. Like comments, they can be sprinkled throughout a program and attached to any variable, method, expression, or other program element. Unlike comments, they have structure, thus making them easier to machine process.</P>
<P>This chapter shows how to use annotations in Scala. It shows their general syntax and how to use several standard annotations.</P>
<P>This chapter does not show how to write new annotation processing tools, because it is beyond the scope of this book.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html">Chapter 29</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows one technique, but not the only one. Instead, this chapter focuses on how to use annotations, because it is more common to use annotations than to define new annotation processors.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=25.1></A>25.1 Why have annotations?<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html#25.1">link</A>]</SPAN></H3>
<P>There are many things you can do with a program other than compiling and running it. Some examples are:</P>
<OL>
<LI>Automatic generation of documentation as with Scaladoc<A id=i-827321774-1></A>. 
<LI>Pretty printing code so that it matches your preferred style. 
<LI>Checking code for common errors such as opening a file but, on some control paths, never closing it. 
<LI>Experimental type checking, for example to manage side effects or ensure ownership properties.</LI></OL>
<P>Such tools are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-850220783"><EM style="FONT-STYLE: italic">meta-programming</EM></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>tools, because they are programs that take other programs as input.<A id=i-850220783-1></A><A id=i544128342-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Annotations support these tools by letting the programmer sprinkle directives to the tool throughout their source code. Such directives let the tools be more effective than if they could have no user input. For example, annotations can improve the previously listed tools as follows:</P>
<OL>
<LI>A documentation generator could be instructed to document certain methods as deprecated. 
<LI>A pretty printer could be instructed to skip over parts of the program that have been carefully hand formatted. 
<LI>A checker for non-closed files could be instructed to ignore a particular file that has been manually verified to be closed. 
<LI>A side-effects checker could be instructed to verify that a specified method has no side effects.</LI></OL>
<P>In all of these cases, it would in theory be possible for the programming language to provide ways to insert the extra information. In fact, most of these are directly supported in some language or another. However, there are too many such tools for one language to directly support them all. Further, all of this information is completely ignored by the compiler, which after all just wants to make the code run.</P>
<P>Scala's philosophy in cases like this is to include the minimum, orthogonal support in the core language such that a wide variety of meta-programming tools can be written. In this case, that minimum support is a system of annotations. The compiler understands just one feature, annotations, but it doesn't attach any meaning to individual annotations. Each meta-programming tool can then define and use its own specific annotations.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=25.2></A>25.2 Syntax of annotations<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html#25.2">link</A>]</SPAN></H3>
<P>A typical use of an annotation looks like this:<A id=i526469630-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  @deprecated&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;bigMistake()&nbsp;=&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//...</SPAN>
</PRE>The annotation<A id=i-1632344653-1></A><A id=i86494153-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@deprecated</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>part, and it applies to the entirety of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>bigMistake</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method (not shown&#8212;it's too embarrassing). In this case, the method is being marked as something the author of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>bigMistake</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>wishes you not to use. Maybe<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>bigMistake</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be removed entirely from a future version of the code. 
<P></P>
<P>In the previous example, a method is annotated as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@deprecated</SPAN>. Annotations are allowed in other places too. Annotations are allowed on any kind of declaration or definition, including<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>var</SPAN>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>def</SPAN>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>class</SPAN>es,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>object</SPAN>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>trait</SPAN>s, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>type</SPAN>s.<A id=i1935725073-1></A><A id=i175307031-1></A><A id=i1767118133-1></A><A id=i1177206493-1></A><A id=i911241519-1></A><A id=i-1756036738-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The annotation applies to the entirety of the declaration or definition that follows it:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  @deprecated&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">QuickAndDirty</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//...</SPAN>
  }
</PRE>Annotations can also be applied to an expression<A id=i726662607-1></A>, as with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@unchecked</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation<A id=i-1840852242-3></A><A id=i-815574504-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for pattern matching (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html">Chapter 15</A>). To do so, place a colon (<SPAN class=code>:</SPAN>) after the expression and then write the annotation. Syntactically, it looks like the annotation is being used as a type:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  (e:&nbsp;@unchecked)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">match</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;non-exhaustive&nbsp;cases...</SPAN>
  }
</PRE>Finally, annotations can be placed on types. Annotated types are described later in this chapter. 
<P></P>
<P>So far the annotations shown have been simply an at sign followed by an annotation class. Such simple annotations are common and useful, but annotations have a richer general form:<A id=i2008427102-1></A></P>
<DIV align=center><SPAN class=code>@</SPAN><EM style="FONT-STYLE: italic">annot</EM><SPAN class=code>(</SPAN><EM style="FONT-STYLE: italic">exp_{1}, exp_{2}, ...</EM><SPAN class=code>)</SPAN>&nbsp;<SPAN class=code></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>{val</SPAN>&nbsp;<SPAN class=code></SPAN><EM style="FONT-STYLE: italic">name_{1}</EM><SPAN class=code>=</SPAN><EM style="FONT-STYLE: italic">const_{1}</EM><SPAN class=code>,</SPAN>&nbsp;<SPAN class=code></SPAN>...<SPAN class=code>,</SPAN>&nbsp;<SPAN class=code>val</SPAN>&nbsp;<SPAN class=code></SPAN><EM style="FONT-STYLE: italic">name_{<I>n</I>}</EM><SPAN class=code>=</SPAN><EM style="FONT-STYLE: italic">const_{<I>n</I>}</EM><SPAN class=code>}</SPAN></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">annot</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the class of annotation. All annotations must include that much. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">exp</EM><A id=i-1204896229-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>parts are arguments to the annotation. For annotations like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@deprecated</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that do not need any arguments, you would normally leave off the parentheses, but you can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@deprecated()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you like. For annotations that do have arguments, place the arguments in parentheses, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@serial(1234)</SPAN>.</P>
<P>The precise form of the arguments you may give to an annotation depends on the particular annotation class. Most annotation processors only let you supply immediate constants such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>123</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>"hello"</SPAN>. The compiler itself supports arbitrary expressions, however, so long as they type check. Some annotation classes can make use of this, for example, to let you refer to other variables that are in scope:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  @cool&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;normal&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Hello"</SPAN>
  @coolerThan(normal)&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;fonzy&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Heeyyy"</SPAN>
</PRE>
<P></P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">name</EM><SPAN class=code>=</SPAN><EM style="FONT-STYLE: italic">const</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>pairs in the general syntax are available for more complicated annotations that have optional arguments. These arguments are optional, and they can be specified in any order. To keep things simple, the part to the right-hand side of the equals sign must be a constant.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=25.3></A>25.3 Standard annotations<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html#25.3">link</A>]</SPAN></H3>
<P>Scala includes several standard annotations.<A id=i-178318765-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>They are for features that are used widely enough to merit putting in the language specification, but that are not fundamental enough to merit their own syntax. Over time, there should be a trickle of new annotations that are added to the standard in just the same way.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Deprecation</H4>
<P>Sometimes you write a class or method that you later wish you had not. Once it is available, though, code written by other people might call the method. Thus, you cannot simply delete the method, because this would cause other people's code to stop compiling.</P>
<P>Deprecation lets you gracefully remove a method or class that turns out to be a mistake. You mark the method or class as deprecated, and then anyone who calls that method or class will get a deprecation warning. They had better heed this warning and update their code! The idea is that after a suitable amount of time has passed, you feel safe in assuming that all reasonable clients will have stopped accessing the deprecated class or method and thus that you can safely remove it.</P>
<P>You mark a method as deprecated simply by writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@deprecated</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>before it. For example:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  @deprecated&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;bigMistake()&nbsp;=&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//...</SPAN>
</PRE>Such an annotation will cause the Scala compiler to emit deprecation warnings whenever Scala code accesses the method. 
<P></P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Volatile fields</H4>
<P>Concurrent programming does not mix well with shared mutable state. For this reason, the focus of Scala's concurrency support is message passing and a minimum of shared mutable state. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/actors-and-concurrency.html">Chapter 30</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the details.</P>
<P>Nonetheless, sometimes programmers want to use mutable state in their concurrent programs. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@volatile</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation<A id=i-882906061-1></A><A id=i915992882-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>helps in such cases. It informs the compiler that the variable in question will be used by multiple threads. Such variables are implemented so that reads and writes to the variable are slower, but accesses from multiple threads behave more predictably.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@volatile</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword gives different guarantees on different platforms. On the Java platform, however, you get the same behavior as if you wrote the field in Java code and marked it with the Java<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>volatile</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Binary serialization</H4>
<P>Many languages include a framework for binary<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g922807280"><EM style="FONT-STYLE: italic">serialization</EM></A>.<A id=i-1448460597-1></A><A id=i2082703927-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>A serialization framework helps you convert objects into a stream of bytes and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>vice versa</I>. This is useful if you want to save objects to disk or send them over the network. XML can help with the same goals (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/working-with-xml.html">Chapter 26</A>), but it has different trade offs regarding speed, space usage, flexibility, and portability.</P>
<P>Scala does not have its own serialization framework. Instead, you should use a framework from your underlying platform. What Scala does is provide three annotations that are useful for a variety of frameworks. Also, the Scala compiler for the Java platform interprets these annotations in the Java way (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html">Chapter 29</A>).</P>
<P>The first annotation indicates whether a class is serializable at all. Most classes are serializable, but not all. A handle to a socket or GUI window, for example, cannot be serialized. By default, a class is not considered serializable. You should add a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@serializable</SPAN><A id=i-534731536-1></A><A id=i-897281643-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation to any class you would like to be serializable.</P>
<P>The second annotation helps deal with serializable classes changing as time goes by. You can attach a serial number to the current version of a class by adding an annotation like<A id=i-744810718-1></A><A id=i-1236272573-1></A><SPAN class=code>@SerialVersionUID(1234)</SPAN>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>1234</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be replaced by your serial number of choice. The framework should store this number in the generated byte stream. When you later reload that byte stream and try to convert it to an object, the framework can check that the current version of the class has the same version number as the version in the byte stream. If you want to make a serialization-incompatible change to your class, then you can change the version number. The framework will then automatically refuse to load old instances of the class.</P>
<P>Finally, Scala provides a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@transient</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation<A id=i875595397-1></A><A id=i2078024116-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for fields that should not be serialized at all. If you mark a field as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@transient</SPAN>, then the framework should not save the field even when the surrounding object is serialized. When the object is loaded, the field will be restored to the default value for the type of the field annotated as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@transient</SPAN>.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Automatic<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods</H4>
<P>Scala code normally does not need explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods for fields, because Scala blends the syntax for field access and method invocation. Some platform-specific frameworks do expect<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods, however. For that purpose, Scala provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@scala.reflect.BeanProperty</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation.<A id=i732073940-1></A><A id=i1595748955-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If you add this annotation to a field, the compiler will automatically generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods for you. If you annotate a field named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>crazy</SPAN>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method will be named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>getCrazy</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method will be named<SPAN class=code>setCrazy</SPAN>.</P>
<P>The generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods are only available after a compilation pass completes. Thus, you cannot call these<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods from code you compile at the same time as the annotated fields. This should not be a problem in practice, because in Scala code you can access the fields directly. This feature is intended to support frameworks that expect regular<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>get</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>set</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods, and typically you do not compile the framework and the code that uses it at the same time.</P>
<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Unchecked</H4>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@unchecked</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation is interpreted by the compiler during pattern matches. It tells the compiler not to worry if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>match</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression seems to leave out some cases. See<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html#sec:sealed-classes">Section 15.5</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=25.4></A>25.4 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/annotations.html#25.4">link</A>]</SPAN></H3>
<P>This chapter described the platform-independent aspects of annotations that you will most commonly need to know about. First of all it covered the syntax of annotations, because using annotations is far more common than defining new ones. Second it showed how to use several annotations that are supported by the standard Scala compiler, including<SPAN class=code>@deprecated</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@volatile</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@serializable</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@BeanProperty</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>@unchecked</SPAN>.</P>
<P><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/combining-scala-and-java.html">Chapter 29</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives additional, Java-specific information on annotations. It covers annotations only available when targeting Java, additional meanings of standard annotations when targeting Java, how to interoperate with Java-based annotations, and how to use Java-based mechanisms to define and process annotations in Scala.</P></DIV>