<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>13.3.&nbsp;Shift Operations</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch13s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;13.&nbsp;Logic and Shift Operations</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch13s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="13.3.&nbsp;Shift Operations" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286965424></A>13.3.&nbsp;Shift Operations</H2></DIV></DIV></DIV>
<P>Shift operations involve moving the bits in a word to the left or right.</P>
<P>There are three types of shift operations:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>
<P>A logical shift places a 0 in the vacated bit on either end.</P><PRE class=screen>	    1010 logical shifted right 1 bit = ?
	    0111 logical shifted left 3 bits = ?
	    </PRE>
<P>What effect does a logical shift left have on a binary integer? Logical shift right?</P></LI>
<LI class=listitem>
<P>An arithmetic shift right preserves the sign bit.</P><PRE class=screen>	    1010 arithmetic shifted right 1 bit = ?
	    1010 arithmetic shifted right 2 bits = ?
	    </PRE>
<P>What effect does this have on a binary integer?</P>
<P>Is there an arithmetic shift left?</P></LI>
<LI class=listitem>
<P>A circular shift, or rotate, places the bit shifted out of one end into the vacated position on the other end.</P><PRE class=screen>	    0110 rotated left 1 bit = ?
	    1001 rotated right 2 bits = ?
	    0xFC32 rotated left 4 bits = ?
	    </PRE>
<P>What effect does this have on a binary integer?</P></LI></UL></DIV>
<P>Some shifters, particularly in older or cheaper processors, might perform a multiple-bit shift using a series of one-bit shifts, one per clock cycle. Hence, shifting a value one bit left or right would take one clock cycle, and shifting 5 bits left or right would take 5 clock cycles. Most modern ALUs have shift hardware that can shift a value by any number of bit positions in a single clock cycle, so the execution time does not depend on how many bit positions the value is shifted.</P>
<P>Using shift instructions instead of multiply and divide instructions can have an enormous impact on performance. A MIPS shift instruction executes in 1 clock cycle, while a mult takes up to 32, and a div up to 38.</P><PRE class=screen>	// C
	// Arithmetic/logic shift determined by type of variable
	// If x is signed (e.g. int), arithmetic shift is used
	// If x is unsigned (e.g. unsigned in), logical shift is used
	x = x &gt;&gt; 5;
	x &gt;&gt;= 5;
	</PRE>
<P>MAL shift instructions follow a different naming convention than other instructions. Unlike math instructions, which use a suffix of 'i' to indicate an immediate operand (e.g. add, addi), the basic shift instructions are immediate instructions, and the non-immediate instructions use a suffix of 'v'.</P><PRE class=screen>	# MAL
	
	sll     $t0, $t1, 2     # Shift left logical 2 positions
	sllv    $t0, $t5, $t2   # Shift left logical by count in $t2
	sra     $t5, $t1, 1     # Shift right arithmetic 1 position
	srav    $t0, $t7, $t2   # Shift right arithmetic by count in $t2
	srl     $t6, $t1, -4    # Shift right logical by -4 (shift left 4)
	srlv    $t5, $t4, $t1   # Shift right logical by count in $t1
	rol     $t4, $t2, 3     # Rotate left 3 bits
	rol     $t3, $t0, 16    # Swap 16-bit words within a 32-bit word
	ror     $t8, $t0, 16    # Swap 16-bit words within a 32-bit word
	</PRE></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch13s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch13.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch13s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">13.2.&nbsp;Logic Operations&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;13.4.&nbsp;Homework</TD></TR></TBODY></TABLE></DIV>