<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 27 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">Modular Programming Using Objects</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/a-scalable-language.html">Chapter 1</A>, we claimed that one way Scala is a scalable language is that you can use the same techniques to construct small as well as large programs. Up to now in this book we've focused primarily on<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">programming in the small</EM><A id=i-908480700-1></A>: designing and implementing the smaller program pieces out of which you can construct a larger program.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#footnote27-1">[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The other side of the story is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">programming in the large</EM><A id=i-915286664-1></A>: organizing and assembling the smaller pieces into larger programs, applications, or systems. We touched on this subject when we discussed packages and access modifiers in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/packages-and-imports.html">Chapter 13</A>. In short, packages and access modifiers enable you to<A id=i-1777778106-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>organize a large program using packages as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">modules</EM>, where a module is a "smaller program piece" with a well defined interface and a hidden implementation.<A id=i1227433863-1></A></P>
<P>While the division of programs into packages is already quite helpful, it is limited because it provides no way to abstract. You cannot reconfigure a package two different ways within the same program, and you cannot inherit between packages. A package always includes one precise list of contents, and that list is fixed until you change the code.</P>
<P>In this chapter, we'll discuss how you can use Scala's object-oriented features to make a program more modular.<A id=i1528987536-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>We'll first show how a simple singleton object can be used as a module,<A id=i1060016990-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then we'll show how you can use traits and classes as abstractions over modules. These abstractions can be reconfigured into multiple modules, even multiple times within the same program. Finally, we'll show a pragmatic technique for using traits to divide a module across multiple files.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.1></A>27.1 The problem<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.1">link</A>]</SPAN></H3>
<P>As a program grows in size, it becomes increasingly important to organize it in a modular way. First, being able to compile different modules that make up the system separately helps different teams work independently.<A id=i1145716472-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In addition, being able to unplug one implementation of a module and plug in another is useful, because it allows different configurations of a system to be used in different contexts, such as unit testing on a developer's desktop, integration testing, staging, and deployment.<A id=i324568938-1></A></P>
<P>For example, you may have an application that uses a database and a message service. As you write code, you may want to run unit tests on your desktop that use mock versions of both the database and message service, which simulate these services sufficiently for testing without needing to talk across the network to a shared resource. During integration testing, you may want to use a mock message service but a live developer database. During staging and certainly during deployment, your organization will likely want to use live versions of both the database and message service.</P>
<P>Any technique that aims to facilitate this kind of modularity needs to provide a few essentials. First, there should be a module construct that provides a good separation of interface and implementation. Second, there should be a way to replace one module with another that has the same interface without changing or recompiling the modules that depend on the replaced one. Lastly, there should be a way to wire modules together. This wiring task can by thought of as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">configuring</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the system.<A id=i2145337984-1></A></P>
<P>One approach to solving this problem is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">dependency injection</EM><A id=i10210882-1></A><A id=i1768195241-1></A>, a technique supported on the Java platform by frameworks such as Spring<A id=i844238763-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and Guice,<A id=i69159613-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are popular in the enterprise Java community.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#footnote27-2">[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Spring, for example, essentially allows you to represent the interface of a module as a Java interface and implementations of the module as Java classes. You can specify dependencies between modules and "wire" an application together via external XML configuration files.<A id=i1866586400-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Although you can use Spring with Scala and thereby use Spring's approach to achieving system-level modularity of your Scala programs, with Scala you have some alternatives enabled by the language itself. In the remainder of this chapter, we'll show how to use objects as modules to achieve the desired "in the large" modularity without using an external framework.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.2></A>27.2 A recipe application<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.2">link</A>]</SPAN></H3>
<P>Imagine you are building an enterprise web application that will allow users to manage recipes. You want to partition the software into layers, including a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">domain layer</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and an<EM style="FONT-STYLE: italic">application layer</EM>.<A id=i701062634-1></A><A id=i-679595592-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In the domain layer, you'll define<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">domain objects</EM>, which will capture business concepts and rules and encapsulate state that will be persisted to an external relational database. In the application layer, you'll provide an API organized in terms of the services the application offers to clients (including the user interface layer). The application layer will implement these services by coordinating tasks and delegating the work to the objects of the domain layer.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#footnote27-3">[3]</A></P>
<P>Imagine also that you want to be able to plug in real or mock versions of certain objects in each of these layers, so that you can more easily write unit tests for your application. To achieve this goal, you can treat the objects you want to mock as modules. In Scala, there is no need for objects to be "small" things, no need to use some other kind of construct for "big" things like modules. One of the ways Scala is a scalable language is that the same constructs are used for structures both small and large.<A id=i-885663216-2></A><A id=i741587120-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, since one of the "things" you want to mock in the domain layer is the object that represents the relational database, you'll make that one of the modules. In the application layer, you'll treat a "database browser" object as a module. The database will hold all of the recipes that a person has collected. The browser will help search and browse that database, for example, to find every recipe that includes an ingredient you have on hand.</P>
<P>The first thing to do is to model foods and recipes. To keep things simple, a food will simply have a name, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:food-entity">Listing 27.1</A>. A recipe will simply have a name, a list of ingredients, and some instructions, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:recipe-entity">Listing 27.2</A>.</P>
<P><A name=lst:food-entity></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">package</SPAN>&nbsp;org.stairwaybook.recipe
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">abstract</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;name
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.1 - A simple<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Food</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>entity class.</H5>
<P><A name=lst:recipe-entity></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">package</SPAN>&nbsp;org.stairwaybook.recipe
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Recipe</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;ingredients:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;instructions:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>
  &nbsp;&nbsp;)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">override</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;toString&nbsp;=&nbsp;name
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.2 - Simple<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Recipe</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>entity class.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Food</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Recipe</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>classes shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:food-entity">Listings 27.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:recipe-entity">and 27.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>represent<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">entities</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will be persisted in the database.<A id=i-2102114367-1></A><A id=i728984841-1></A><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#footnote27-4">[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:example-foods-recipe">Listing 27.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows some singleton instances of these classes, which can be used when writing tests:<A id=i181822064-1></A><A id=i534212600-1></A></P>
<P><A name=lst:example-foods-recipe></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">package</SPAN>&nbsp;org.stairwaybook.recipe
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Apple"</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Orange"</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Cream"</SPAN>)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Sugar"</SPAN>)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Recipe</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fruit&nbsp;salad"</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>),
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Stir&nbsp;it&nbsp;all&nbsp;together."</SPAN>
  &nbsp;&nbsp;)
</PRE>
<H5>Listing 27.3 -<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Food</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Recipe</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>examples for use in tests.</H5>
<P><A name=lst:mock-implementations></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">package</SPAN>&nbsp;org.stairwaybook.recipe
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;foodNamed(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Option[Food]</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allFoods.find(_.name&nbsp;==&nbsp;name)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Recipe]</SPAN>&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>)
  &nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleBrowser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;recipesUsing(food:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleDatabase.allRecipes.filter(recipe&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recipe.ingredients.contains(food))
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.4 - Mock database and browser modules.</H5>
<P>Scala uses objects for modules, so you can start modularizing your program by making two singleton<A id=i-1006990674-1></A><A id=i955954873-1></A><A id=i-536383362-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects to serve as the mock implementations of the database and browser modules during testing. Because it is a mock, the database module is backed by a simple in-memory list. Implementations of these objects are shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:mock-implementations">Listing 27.4</A>. You can use this database and browser as follows:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;apple&nbsp;=&nbsp;SimpleDatabase.foodNamed(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Apple"</SPAN>).get
  <SPAN class=output style="COLOR: rgb(90,0,0)">apple:&nbsp;Food&nbsp;=&nbsp;Apple</SPAN>
  <BR>  scala&gt;&nbsp;SimpleBrowser.recipesUsing(apple)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res0:&nbsp;List[Recipe]&nbsp;=&nbsp;List(fruit&nbsp;salad)</SPAN>
</PRE>
<P></P>
<P>To make things a little more interesting, suppose the database sorts foods into categories. To implement this, you can add a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class and a list of all categories in the database, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:categories-added">Listing 27.5</A>. Notice in this last example that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>private</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword, so useful for implementing classes, is also useful for implementing modules.<A id=i-107999758-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Items marked<SPAN class=code>private</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are part of the implementation of a module, and thus are particularly easy to change without affecting other modules.</P>
<P>At this point, many more facilities could be added, but you get the idea. Programs can be divided into singleton objects, which you can think of as modules. This is no big news, but it becomes very useful when you consider abstraction.</P>
<P><A name=lst:categories-added></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">package</SPAN>&nbsp;org.stairwaybook.recipe
  <BR>  <SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;foodNamed(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>):&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Option[Food]</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;allFoods.find(_.name&nbsp;==&nbsp;name)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Recipe]</SPAN>&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>,&nbsp;foods:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>)
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;categories&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fruits"</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>)),
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"misc"</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>)))
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories&nbsp;=&nbsp;categories
  }
  <BR>  <SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleBrowser</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;recipesUsing(food:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;SimpleDatabase.allRecipes.filter(recipe&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recipe.ingredients.contains(food))
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;displayCategory(category:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase.FoodCategory</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;println(category)
  &nbsp;&nbsp;}
  }
</PRE>
<H5>Listing 27.5 - Database and browser modules with categories added.</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.3></A>27.3 Abstraction<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.3">link</A>]</SPAN></H3>
<P>Although the examples shown so far did manage to partition your application into separate database and browser modules, the design is not yet very "modular." The problem is that there is essentially a "hard link" from the browser module to the database modules:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  SimpleDatabase.allRecipes.filter(recipe&nbsp;=&gt;&nbsp;...
</PRE>Because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleBrowser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>module mentions the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>module by name, you won't be able to plug in a different implementation of the database module without modifying and recompiling the browser module. In addition, although there's no hard link from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>module to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleBrowser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>module,<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#footnote27-5">[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>there's no clear way to enable the user interface layer, for example, to be configured to use different implementations of the browser module. 
<P></P>
<P>When making these modules more pluggable, however, it is important to avoid duplicating code, because much code can likely be shared by different implementations of the same module. For example, suppose you want the same code base to support multiple recipe databases, and you want to be able to create a separate browser for each of these databases. You would like to reuse the browser code for each of the instances, because the only thing different about the browsers is which database they refer to. Except for the database implementation, the rest of the code can be reused character for character. How can the program be arranged to minimize repetitive code? How can the code be made reconfigurable, so that you can configure it using either database implementation?</P>
<P>The answer is a familiar one: if a module is an object, then a template for a module is a class. Just like a class describes the common parts of all its instances, a class can describe the parts of a module that are common to all of its possible configurations.</P>
<P>The browser definition therefore becomes a class, instead of an object, and the database to use is specified as an abstract member of the class, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:browser-as-class">Listing 27.6</A>.<A name=lst:browser-as-class></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">abstract</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Browser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;database:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;recipesUsing(food:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;database.allRecipes.filter(recipe&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recipe.ingredients.contains(food))
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;displayCategory(category:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">database.FoodCategory</SPAN>)&nbsp;{&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(category)
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.6 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Browser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class with an abstract database<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>val</SPAN>.</H5>
<P>The database also becomes a class, including as much as possible that is common between all databases, and declaring the missing parts that a database must define. In this case, all database modules must define methods for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>allFoods</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>allRecipes</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>allCategories</SPAN>, but since they can use an arbitrary definition, the methods must be left abstract in the<SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>foodNamed</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, by contrast, can be defined in the abstract<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:database-as-class">Listing 27.7</A>:<A name=lst:database-as-class></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">abstract</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Recipe]</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;foodNamed(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allFoods.find(f&nbsp;=&gt;&nbsp;f.name&nbsp;==&nbsp;name)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>,&nbsp;foods:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[FoodCategory]</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.7 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class with abstract methods.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object must be updated to inherit from the abstract<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:new-simple-database">Listing 27.8</A>:<A name=lst:new-simple-database></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Recipe]</SPAN>&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">private</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;categories&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fruits"</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Orange</SPAN>)),
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"misc"</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Cream</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Sugar</SPAN>)))
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories&nbsp;=&nbsp;categories
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.8 - The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>subclass.</H5>
<P>Then, a specific browser module is made by instantiating the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Browser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class and specifying which database to use, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:new-simple-browser">Listing 27.9</A>.<A name=lst:new-simple-browser></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleBrowser</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Browser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;database&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.9 - The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleBrowser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Browser</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>subclass.</H5>
<P>You can use these more pluggable modules the same as before:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;apple&nbsp;=&nbsp;SimpleDatabase.foodNamed(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Apple"</SPAN>).get
  <SPAN class=output style="COLOR: rgb(90,0,0)">apple:&nbsp;Food&nbsp;=&nbsp;Apple</SPAN>
  <BR>  scala&gt;&nbsp;SimpleBrowser.recipesUsing(apple)
  <SPAN class=output style="COLOR: rgb(90,0,0)">res1:&nbsp;List[Recipe]&nbsp;=&nbsp;List(fruit&nbsp;salad)</SPAN>
</PRE>Now, however, you can create a second mock database, and use the same browser class with it, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:student-database">Listing 27.10</A>:<A name=lst:student-database></A> 
<P></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">StudentDatabase</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FrozenFood</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"FrozenFood"</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">HeatItUp</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Recipe</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"heat&nbsp;it&nbsp;up"</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FrozenFood</SPAN>),
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Microwave&nbsp;the&nbsp;'food'&nbsp;for&nbsp;10&nbsp;minutes."</SPAN>)
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FrozenFood</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">HeatItUp</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"edible"</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FrozenFood</SPAN>)))
  &nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">StudentBrowser</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Browser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;database&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">StudentDatabase</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.10 - A student database and browser.</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.4></A>27.4 Splitting modules into traits<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.4">link</A>]</SPAN></H3>
<P><A name=sec:modules-traits></A></P>
<P>Often a module is too large to fit comfortably into a single file. When that happens, you can use traits to split a module into separate files.<A id=i-865710043-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example, suppose you wanted to move categorization code out of the main<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>file and into its own. You could create a trait for the code as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:trait-food-categories">Listing 27.11</A>.<A name=lst:trait-food-categories></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">trait</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategories</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategory</SPAN>(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>,&nbsp;foods:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[FoodCategory]</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.11 - A trait for food categories.</H5>
<P>Now class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>can mix in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategories</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait instead of defining<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>allCategories</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:database-mixes-in">Listing 27.12</A>:<A name=lst:database-mixes-in></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">abstract</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FoodCategories</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Food]</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List[Recipe]</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;foodNamed(name:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allFoods.find(f&nbsp;=&gt;&nbsp;f.name&nbsp;==&nbsp;name)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.12 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class that mixes in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategories</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait.</H5>
<P>Continuing in this way, you might try and divide<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>into two traits, one for foods and one for recipes. This would allow you to define<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN>, for example, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:simple-traits">Listing 27.13</A>:<A name=lst:simple-traits></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">with</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleFoods</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">with</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleRecipes</SPAN>
</PRE>
<H5>Listing 27.13 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object composed solely of mixins.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleFoods</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait could look as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:simple-foods-trait">Listing 27.14</A>:<A name=lst:simple-foods-trait></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">trait</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleFoods</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Pear</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Food</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Pear"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allFoods&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Pear</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allCategories&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Nil</SPAN>
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.14 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleFoods</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait.</H5>
<P>So far so good, but unfortunately, a problem arises if you try to define a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleRecipe</SPAN>s trait like this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">trait</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleRecipes</SPAN>&nbsp;{&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Does&nbsp;not&nbsp;compile</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Recipe</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fruit&nbsp;salad"</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Pear</SPAN>),&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Uh&nbsp;oh</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Mix&nbsp;it&nbsp;all&nbsp;together."</SPAN>
  &nbsp;&nbsp;)
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>)
  }
</PRE>The problem here is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Pear</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is located in a different trait from the one that uses it, so it is out of scope. The compiler has no idea that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleRecipes</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only ever mixed together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleFoods</SPAN>. 
<P></P>
<P>There is a way you can tell this to the compiler, however. Scala provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/glossary.html#g-1749196914"><EM style="FONT-STYLE: italic">self type</EM></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for precisely this situation.<A id=i979629307-1></A><A id=i-560124499-1></A><A id=i823112238-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Technically, a self type is an assumed type for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>whenever<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mentioned within the class.<A id=i-1139406016-1></A><A id=i1634645853-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Pragmatically, a self type specifies the requirements on any concrete class the trait is mixed into. If you have a trait that is only ever used when mixed in with another trait or traits, then you can specify that those other traits should be assumed. In the present case, it is enough to specify a self type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleFoods</SPAN>, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:simple-recipes-trait">Listing 27.15</A>:<A name=lst:simple-recipes-trait></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">trait</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleRecipes</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">this</SPAN>:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleFoods</SPAN>&nbsp;=&gt;
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Recipe</SPAN>(
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"fruit&nbsp;salad"</SPAN>,
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Apple</SPAN>,&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Pear</SPAN>),&nbsp;&nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;Now&nbsp;Pear&nbsp;is&nbsp;in&nbsp;scope</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Mix&nbsp;it&nbsp;all&nbsp;together."</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;)
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;allRecipes&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">List</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">FruitSalad</SPAN>)
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.15 - A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleRecipes</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>trait with a self type.</H5>
<P>Given the new self type,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Pear</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is now available. Implicitly, the reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Pear</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is thought of as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this.Pear</SPAN>. This is safe, because any<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">concrete</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>class that mixes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleRecipes</SPAN>must also be a subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleFoods</SPAN>, which means that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Pear</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be a member. Abstract subclasses and traits do not have to follow this restriction, but since they cannot be instantiated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>new</SPAN>, there is no risk that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>this.Pear</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>reference will fail.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.5></A>27.5 Runtime linking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.5">link</A>]</SPAN></H3>
<P>One final feature of Scala modules is worth emphasizing: they can be linked together at runtime, and you can decide which modules will link to which depending on runtime computations.<A id=i775929709-1></A><A id=i1259075515-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:got-apples">Listing 27.16</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows a small program that chooses a database at runtime and then prints out all the apple recipes in it:<A name=lst:got-apples></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">GotApples</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;main(args:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Array[String]</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;db:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Database</SPAN>&nbsp;=
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">if</SPAN>(args(<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>)&nbsp;==&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"student"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">StudentDatabase</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">else</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleDatabase</SPAN>
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;browser&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Browser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;database&nbsp;=&nbsp;db
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;apple&nbsp;=&nbsp;SimpleDatabase.foodNamed(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Apple"</SPAN>).get
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>(recipe&nbsp;&lt;-&nbsp;browser.recipesUsing(apple))
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(recipe)
  &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.16 - An app that dynamically selects a module implementation.</H5>
<P>Now, if you use the simple database, you will find a recipe for fruit salad. If you use the student database, you will find no recipes at all using apples:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  $&nbsp;scala&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">GotApples</SPAN>&nbsp;simple
  <SPAN class=output style="COLOR: rgb(90,0,0)">fruit&nbsp;salad</SPAN>
  $&nbsp;scala&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">GotApples</SPAN>&nbsp;student
  $
</PRE>
<P></P>
<DIV class=aside style="BORDER-RIGHT: black thin solid; PADDING-RIGHT: 20px; BORDER-TOP: black thin solid; PADDING-LEFT: 20px; PADDING-BOTTOM: 10px; MARGIN: 25px; BORDER-LEFT: black thin solid; PADDING-TOP: 0px; BORDER-BOTTOM: black thin solid">
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Configuring with Scala code</H3>
<P>You may wonder if you are not backsliding to the hard links problem of the original examples in this chapter, because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>GotApples</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:got-apples">Listing 27.16</A>contains hard links to both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>StudentDatabase</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN>. The difference here is that the hard links are localized in one file that can be replaced.<A id=i475125994-1></A><A id=i-578074568-1></A></P>
<P>Every modular application needs some way to specify the actual module implementations to use in a particular situation. This act of "configuring" the application will by definition involve the naming of concrete module implementations. For example, in a Spring application, you configure by naming implementations in an external XML file.<A id=i872568577-1></A><A id=i-1798539574-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In Scala, you can configure via Scala code itself. One advantage to using Scala source over XML for configuration is that the process of running your configuration file through the Scala compiler should uncover any misspellings in it prior to its actual use.</P></DIV>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.6></A>27.6 Tracking module instances<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.6">link</A>]</SPAN></H3>
<P>Despite using the same code, the different browser and database modules created in the previous section really are separate modules. This means that each module has its own contents, including any nested classes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleDatabase</SPAN>, for example, is a different class from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>StudentDatabase</SPAN>!<A id=i-677980410-10></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  scala&gt;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;category&nbsp;=&nbsp;StudentDatabase.allCategories.head
  <SPAN class=output style="COLOR: rgb(90,0,0)">category:&nbsp;StudentDatabase.FoodCategory&nbsp;=&nbsp;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">FoodCategory(edible,List(FrozenFood))</SPAN>
  <BR>  scala&gt;&nbsp;SimpleBrowser.displayCategory(category)
  <SPAN class=output style="COLOR: rgb(90,0,0)">&lt;console&gt;:12:&nbsp;error:&nbsp;type&nbsp;mismatch;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;found&nbsp;&nbsp;&nbsp;:&nbsp;StudentDatabase.FoodCategory</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;required:&nbsp;SimpleBrowser.database.FoodCategory</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleBrowser.displayCategory(category)</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</SPAN>
</PRE>
<P></P>
<P>If instead you prefer all<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN>s to be the same, you can accomplish this by moving the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>outside of any class or trait. The choice is yours, but as it is written, each<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>gets its own, unique<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class.</P>
<P>The two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FoodCategory</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>classes shown in the previous example really are different, so the compiler is correct to complain. Sometimes, though, you may encounter a case where two types are the same but the compiler can't verify it. You will see the compiler complaining that two types are not the same, even though you as the programmer know they perfectly well are.</P>
<P>In such cases you can often fix the problem using<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">singleton types</EM>. For example, in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>GotApples</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>program, the type checker does not know that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>db</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>browser.database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same. This will cause type errors if you try to pass categories between the two objects:<A id=i-677980410-11></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">GotApples</SPAN>&nbsp;{
  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;same&nbsp;definitions...</SPAN>
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">for</SPAN>&nbsp;(category&nbsp;&lt;-&nbsp;db.allCategories)
  &nbsp;&nbsp;&nbsp;&nbsp;browser.displayCategory(category)
  &nbsp;&nbsp;<SPAN class=comment style="COLOR: rgb(76,76,76)">//&nbsp;...</SPAN>
  }
  <SPAN class=output style="COLOR: rgb(90,0,0)">GotApples2.scala:14:&nbsp;error:&nbsp;type&nbsp;mismatch;</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;found&nbsp;&nbsp;&nbsp;:&nbsp;db.FoodCategory</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;required:&nbsp;browser.database.FoodCategory</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;browser.displayCategory(category)</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</SPAN>
  <SPAN class=output style="COLOR: rgb(90,0,0)">one&nbsp;error&nbsp;found</SPAN>
</PRE>To avoid this error, you need to inform the type checker that they are the same object.<A id=i-677980410-12></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>You can do this by changing the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>browser.database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#lst:db-type">Listing 27.17</A>:<A name=lst:db-type></A> 
<P></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;browser&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Browser</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;database:&nbsp;db.type&nbsp;=&nbsp;db
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 27.17 - Using a singleton type.</H5>
<P>This definition is the same as before except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the<A id=i-1431142691-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>funny-looking type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>db.type</SPAN>. The "<SPAN class=code>.type</SPAN>" on the end means that this is a singleton type.<A id=i-108236764-1></A><A id=i-1108021686-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>A singleton type is extremely specific and holds only one object, in this case, whichever object is referred to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>db</SPAN>. Usually such types are too specific to be useful, which is why the compiler is reluctant to insert them automatically. In this case, though, the singleton type allows the compiler to know that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>db</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>browser.database</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same object, enough information to eliminate the type error.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=27.7></A>27.7 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/modular-programming-using-objects.html#27.7">link</A>]</SPAN></H3>
<P>This chapter has shown how to use Scala's objects as modules. In addition to simple static modules, this approach gives you a variety of ways to create abstract, reconfigurable modules. There are actually even more abstraction techniques than shown, because anything that works on a class, also works on a class used to implement a module. As always, how much of this power you use should be a matter of taste.</P>
<P>Modules are part of programming in the large, and thus are hard to experiment with. You need a large program before it really makes a difference. Nonetheless, after reading this chapter you know which Scala features to think about when you want to program in a modular style. Think about these techniques when you write your own large programs, and recognize these coding patterns when you see them in other people's code.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 27:</H4>
<P><A name=footnote27-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This terminology was introduced in DeRemer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>et. al.</I>, "Programming-in-the-large versus programming-in-the-small."<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/bibliography.html#deremer:large-small">deremer:large-small</A><A id=i1056566638-1></A></P>
<P><A name=footnote27-2>[2]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Fowler,<A id=i-110883654-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Inversion of control containers and the dependency injection pattern."<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/bibliography.html#fowler:dependency">fowler:dependency</A></P>
<P><A name=footnote27-3>[3]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The naming of these layers follows that of Evans,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">Domain-Driven Design</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/bibliography.html#evans:domain-driven-design">evans:domain-driven-design</A><A id=i-1668052528-1></A><A id=i-1497241897-1></A></P>
<P><A name=footnote27-4>[4]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>These entity classes are simplified to keep the example uncluttered with too much real-world detail. Nevertheless, transforming these classes into entities that could be persisted with Hibernate<A id=i1100003378-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the Java Persistence Architecture,<A id=i-1968727662-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for example, would require only a few modifications, such as adding a private<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Long</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>id</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>field and a no-arg constructor, placing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.reflect.BeanProperty</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotations on the fields, specifying appropriate mappings via annotations or a separate XML file, and so on.<A id=i-146150294-1></A></P>
<P><A name=footnote27-5>[5]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This is good, because each of these architectural layers should depend only on layers below them.</P></DIV>