<DIV class=vegies style="WORD-SPACING: 0px; FONT: medium Arial, Helvetica, sans-serif; MARGIN-LEFT: 27px; TEXT-TRANSFORM: none; COLOR: rgb(33,35,36); TEXT-INDENT: 0px; MARGIN-RIGHT: 139px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=tc><SPAN class=sts style="FONT-WEIGHT: normal; FONT-SIZE: 20px">Chapter 32 of Programming in Scala, First Edition</SPAN><BR><SPAN class=ts style="FONT-WEIGHT: normal; FONT-SIZE: 32px">GUI Programming</SPAN><BR><SPAN class=as style="FONT-SIZE: 18px">by Martin Odersky, Lex Spoon, and Bill Venners</SPAN><BR><SPAN class=pd style="FONT-SIZE: 15px">December 10, 2008</SPAN><BR></DIV>
<P>In this chapter you'll learn how to develop in Scala applications that use a graphical user interface (GUI). The applications we'll develop are based on a Scala library that provides access to Java's Swing framework of GUI classes.<A id=i80301790-1></A><A id=i1756438818-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Conceptually, the Scala library resembles the underlying Swing classes, but hides much of their complexity. You'll find out that developing GUI applications using the framework is actually quite easy.<A id=i1275390415-1></A></P>
<P>Even with Scala's simplifications, a framework like Swing is quite rich, with many different classes and many methods in each class. To find your way in such a rich library, it helps to use an IDE such as Scala's Eclipse plugin.<A id=i-1327804143-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The advantage is that the IDE can show you interactively with its command completion which classes are available in a package and which methods are available for objects you reference. This speeds up your learning considerably when you first explore an unknown library space.</P>
<DIV class=figure style="MARGIN-TOP: 0.75em; TEXT-ALIGN: center"><A name=fig:swing1></A>
<TABLE style="BORDER-COLLAPSE: collapse">
<TBODY>
<TR class="">
<TD><IMG alt="image images/firstSwingAppLittleGray60.jpg" src="http://www.artima.com/pins1ed/images/firstSwingAppLittleGray60.jpg"></TD>
<TD><IMG alt="image images/firstSwingAppBigGray60.jpg" src="http://www.artima.com/pins1ed/images/firstSwingAppBigGray60.jpg"></TD></TR></TBODY></TABLE></DIV>
<H5>Figure 32.1 - A simple Swing application: initial (left) and resized (right).</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=32.1></A>32.1 A first Swing application<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#32.1">link</A>]</SPAN></H3>
<P>As a first Swing application, we'll start with a window containing a single button. To program with Swing, you need to import various classes from Scala's Swing API package:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing._
</PRE><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app">Listing 32.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows the code of your first Swing application in Scala. If you compile and run that file, you should see a window as shown on the left of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#fig:swing1">Figure 32.1</A>. The window can be resized to a larger size as shown on the right of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#fig:swing1">Figure 32.1</A>.<A name=lst:first-swing-app></A> 
<P></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing._
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FirstSwingApp</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleGUIApplication</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;top&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MainFrame</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"First&nbsp;Swing&nbsp;App"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Button</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Click&nbsp;me"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 32.1 - A simple Swing application in Scala.</H5>
<P>If you analyze the code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app">Listing 32.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>line by line, you'll notice the following elements:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FirstSwingApp</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleGUIApplication</SPAN>&nbsp;{
</PRE>
<P></P>
<P>In the first line after the import, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FirstSwingApp</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing.SimpleGUIApplication</SPAN>.<A id=i1631071135-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This is different from traditional command-line applications, which may inherit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.Application</SPAN>.<A id=i-2135552226-2></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>SimpleGUIApplication</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>class already defines a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that contains some setup code for Java's Swing framework. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>main</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method then proceeds to call the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, which you supply:<A id=i673279455-1></A><A id=i1812323130-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;top&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MainFrame</SPAN>&nbsp;{
</PRE>
<P></P>
<P>The next line implements the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. This method contains the code that defines your top-level GUI component. This is usually some kind of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN>&#8212;<I>i.e.</I>, a window that can contain arbitrary data. In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app">Listing 32.1</A>, we chose a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>MainFrame</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the top-level component. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>MainFrame</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like a normal Swing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>except that closing it will also close the whole GUI application.<A id=i1729789716-1></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  title&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"First&nbsp;Swing&nbsp;App"</SPAN>
</PRE>
<P>Frames have a number of attributes. Two of the most important are the frame's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>title</SPAN>, which will be written in the title bar, and its<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN>, which will be displayed in the window itself.<A id=i-1539619709-1></A><A id=i872532101-1></A>In Scala's Swing API, such attributes are modeled as properties. You know from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/stateful-objects.html#sec:properties">Section 18.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>that properties are encoded in Scala as pairs of getter and setter methods. For instance, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>title</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object is modeled as a getter method:<A id=i553650449-3></A><A id=i-1969580643-4></A><A id=i-926053069-3></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;title:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>
</PRE>and a setter method:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;title_=(s:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">String</SPAN>)
</PRE>It is this setter method that gets invoked by the above assignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>title</SPAN>. The effect of the assignment is that the chosen title is shown in the header of the window. If you leave it out, the window will have an empty title. 
<P></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Button</SPAN>&nbsp;{
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame is the root component of the Swing application. It is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Container</SPAN>, which means that further components can be defined in it.<A id=i-2044598897-1></A><A id=i1014658637-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Every Swing container has a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN>property, which allows you to get and set the components it contains. The getter<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of this property has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Seq[Component]</SPAN>,<A id=i1009131637-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicating that a component can in general have several objects as its contents. Frames, however, always have just a single component as their<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN>. This component is set and potentially changed using the setter<SPAN class=code>contents_=</SPAN>. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app">Listing 32.1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Button</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>constitutes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame.</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Click&nbsp;me"</SPAN>
</PRE>
<P>The button also gets a title, in this case "Click me."</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=32.2></A>32.2 Panels and layouts<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#32.2">link</A>]</SPAN></H3>
<P>As next step, we'll add some text as a second content element to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame of the application. The left part of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#fig:swing2">Figure 32.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows what the application should look like.</P>
<DIV class=figure style="MARGIN-TOP: 0.75em; TEXT-ALIGN: center"><A name=fig:swing2></A>
<TABLE style="BORDER-COLLAPSE: collapse">
<TBODY>
<TR class="">
<TD><IMG alt="image images/noClicks2Gray60.jpg" src="http://www.artima.com/pins1ed/images/noClicks2Gray60.jpg"></TD>
<TD><IMG alt="image images/sevenClicks2Gray60.jpg" src="http://www.artima.com/pins1ed/images/sevenClicks2Gray60.jpg"></TD></TR></TBODY></TABLE></DIV>
<H5>Figure 32.2 - A reactive Swing application: initial (left) after clicks (right).</H5>
<P><A name=lst:first-swing-app-modified></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing._
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SecondSwingApp</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleGUIApplication</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;top&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MainFrame</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Second&nbsp;Swing&nbsp;App"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;button&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Button</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Click&nbsp;me"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;label&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Label</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"No&nbsp;button&nbsp;clicks&nbsp;registered"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}	
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">BoxPanel</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Orientation.Vertical</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;button
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;label
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Swing.EmptyBorder</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}&nbsp;&nbsp;
</PRE>
<H5>Listing 32.2 - Component assembly on a panel.</H5>
<P>You saw in the last section that a frame contains exactly one child component. Hence, to make a frame with both a button and a label, you need to create a different container component that holds both. That's what<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">panels</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used for.<A id=i76880356-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Panel</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a container that displays all the components it contains according to some fixed layout rules. There are a number of different possible layouts that are implemented by various subclasses of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Panel</SPAN>, ranging from simple to quite intricate. In fact, one of the hardest parts of a complex GUI application can be getting the layouts right&#8212;it's not easy to come up with something that displays reasonably well on all sorts of devices and for all window sizes.<A id=i51441782-1></A></P>
<P><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app-modified">Listing 32.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows a complete implementation. In this class, the two sub-components of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame are named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>button</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>label</SPAN>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>button</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined as before. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>label</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a displayed text field that can't be edited:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;label&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Label</SPAN>&nbsp;{
  &nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"No&nbsp;button&nbsp;clicks&nbsp;registered"</SPAN>
  }	
</PRE>The code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app-modified">Listing 32.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>picks a simple vertical layout where components are stacked on top of each other in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>BoxPanel</SPAN>:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">BoxPanel</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Orientation.Vertical</SPAN>)&nbsp;{
</PRE>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>BoxPanel</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an (initially empty) buffer, to which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>button</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>label</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements are added with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;contents&nbsp;+=&nbsp;button
  &nbsp;&nbsp;contents&nbsp;+=&nbsp;label
</PRE>We also add a border around the two objects by assigning to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>border</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property of the panel:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;border&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Swing.EmptyBorder</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>)
</PRE>As is the case with other GUI components, borders are represented as objects.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>EmptyBorder</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a factory method in object<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Swing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes four parameters indicating the width of the borders on the top, right, bottom, and left sides of the objects to be drawn.<A id=i80301790-2></A><A id=i1673765513-1></A> 
<P></P>
<P>Simple as it is, the example has already shown the basic way to structure a GUI application. It is built from components, which are instances of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>classes such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN>,<SPAN class=code>Panel</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Label</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Button</SPAN>. Components have properties, which can be customized by the application.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Panel</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>components can contain several other components in their<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN>property, so that in the end a GUI application consists of a tree of components.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=32.3></A>32.3 Handling events<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#32.3">link</A>]</SPAN></H3>
<P>On the other hand, the application still misses an essential property.<A id=i1245010859-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If you run the code<SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#lst:first-swing-app-modified">Listing 32.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and click on the displayed button, nothing happens. In fact, the application is completely static; it does not react in any way to user events except for the close button of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame, which terminates the application. So as a next step, we'll refine the application so that it displays together with the button a label that indicates how often the button was clicked. The right part of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#fig:swing2">Figure 32.2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains a snapshot of what the application should look like after a few button clicks.</P>
<P>To achieve this behavior, you need to connect a user-input event (the button was clicked) with an action (the displayed label is updated). Java and Scala have fundamentally the same "publish/subscribe" approach to event handling: Components may be publishers and/or subscribers. A publisher publishes events. A subscriber subscribes with a publisher to be notified of any published events. Publishers are also called "event sources," and subscribers are also called "event listeners".<A id=i-1342345159-1></A><A id=i547853576-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For instance a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Button</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an event source, which publishes an event,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked</SPAN>, indicating that the button was clicked.<A id=i-1378806667-1></A></P>
<P>In Scala, subscribing to an event source<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>source</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is done by the call<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>listenTo(source)</SPAN>. There's also a way to unsubscribe from an event source using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>deafTo(source)</SPAN>.<A id=i-1549919358-1></A><A id=i-2118281873-1></A><A id=i-1623449564-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>In the current example application, the first thing to do is to get the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame to listen to its button, so that it gets notified of any events that the button issues. To do that you need to add the following call to the body of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  listenTo(button)
</PRE>Being notified of events is only half the story; the other half is handling them. It is here that the Scala Swing framework is most different from (and radically simpler than) the Java Swing API's. In Java, signaling an event means calling a "notify" method in an object that has to implement some<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Listener</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>interfaces. Usually, this involves a fair amount of indirection and boiler-plate code, which makes event-handling applications hard to write and read. By contrast, in Scala, an event is a real object that gets sent to subscribing components much like messages are sent to actors. For instance, pressing a button will create an event which is an instance of the following case class:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">class</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ButtonClicked</SPAN>(source:&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Button</SPAN>)
</PRE>The parameter of the case class refers to the button that was clicked. As with all other Scala Swing events, this event class is contained in a package named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing.event</SPAN>. 
<P></P>
<P>To have your component react to incoming events you need to add a handler to a property called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN>.<A id=i-49046473-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Here's the code that does this:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;nClicks&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  reactions&nbsp;+=&nbsp;{
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ButtonClicked</SPAN>(b)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;nClicks&nbsp;+=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;label.text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Number&nbsp;of&nbsp;button&nbsp;clicks:&nbsp;"</SPAN>+&nbsp;nClicks
  }
</PRE>The first line above defines a variable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>nClicks</SPAN>, which holds the number of times a button was clicked. The remaining lines add the code between braces as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-STYLE: italic">handler</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame. Handlers are functions defined by pattern matching on events, much like an actor's receive blocks are defined by pattern matching on messages.<A id=i-729007015-1></A><A id=i-1422944994-4></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The handler above matches events of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked(b)</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>i.e.</I>, any event which is an instance of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked</SPAN>. The pattern variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>b</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the actual button that was clicked. The action that corresponds to this event in the code above increments<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>nClicks</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and updates the text of the label. 
<P></P>
<P>Generally, a handler is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>PartialFunction</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>that matches on events and performs some actions.<A id=i-33298553-3></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>It is also possible to match on more than one kind of event in a single handler by using multiple cases.</P>
<P><A name=listing:reactive-swing-app></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing._
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing.event._
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ReactiveSwingApp</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleGUIApplication</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;top&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MainFrame</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Reactive&nbsp;Swing&nbsp;App"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;button&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Button</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Click&nbsp;me"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;label&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Label</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"No&nbsp;button&nbsp;clicks&nbsp;registered"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}	
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">BoxPanel</SPAN>(<SPAN class=typename style="COLOR: rgb(103,0,154)">Orientation.Vertical</SPAN>)&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;button
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;label
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Swing.EmptyBorder</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">30</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listenTo(button)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">var</SPAN>&nbsp;nClicks&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">0</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reactions&nbsp;+=&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">ButtonClicked</SPAN>(b)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nClicks&nbsp;+=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">1</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label.text&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Number&nbsp;of&nbsp;button&nbsp;clicks:&nbsp;"</SPAN>+&nbsp;nClicks
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}&nbsp;&nbsp;
</PRE>
<H5>Listing 32.3 - Implementing a reactive Swing application.</H5>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property implements a collection, just like the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property does. Some components come with predefined reactions. For instance, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a predefined reaction that it will close if the user presses the close button on the upper right. If you install your own reactions by adding them with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property, the reactions you define will be considered in addition to the standard ones. Conceptually, the handlers installed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>form a stack. In the current example, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame receives an event, the first handler tried will be the one that matches on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked</SPAN>, because it was the last handler installed for the frame. If the received event is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked</SPAN>, the code associated with the pattern will be invoked. After that code has completed, the system will search for further handlers in the event stack that might also be applicable. If the received event is not of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>ButtonClicked</SPAN>, the event is immediately propagated to the rest of the installed handler stack. It's also possible to remove handlers from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reaction</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>-=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator.</P>
<P><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#listing:reactive-swing-app">Listing 32.3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows the completed application, including reactions. The code illustrates the essential elements of a GUI application in Scala's Swing framework: The application consists of a tree of components, starting with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>top</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>frame. The components shown in the code are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Frame</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>BoxPanel</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Button</SPAN>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Label</SPAN>, but there are many other kinds of components defined in the Swing libraries. Each component is customized by setting attributes. Two important attributes are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN>, which fixes the children of a component in the tree, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN>, which determines how the component reacts to events.</P>
<DIV class=figure style="MARGIN-TOP: 0.75em; TEXT-ALIGN: center"><A name=fig:swing3></A>
<P><IMG alt="image images/tempConverterGray70.jpg" src="http://www.artima.com/pins1ed/images/tempConverterGray70.jpg"></P></DIV>
<H5>Figure 32.3 - A converter between degrees Celsius and Fahrenheit.</H5>
<P><A name=listing:converter></A></P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;swing._
  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;event._
  <BR>  &nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">TempConverter</SPAN>&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">SimpleGUIApplication</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">def</SPAN>&nbsp;top&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">MainFrame</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;=&nbsp;<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"Celsius/Fahrenheit&nbsp;Converter"</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;celsius&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">TextField</SPAN>&nbsp;{&nbsp;columns&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">object</SPAN>&nbsp;fahrenheit&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">extends</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">TextField</SPAN>&nbsp;{&nbsp;columns&nbsp;=&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">FlowPanel</SPAN>&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;celsius
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Label</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"&nbsp;Celsius&nbsp;&nbsp;=&nbsp;&nbsp;"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;fahrenheit
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contents&nbsp;+=&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">new</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Label</SPAN>(<SPAN class=quotedstring style="COLOR: rgb(205,123,0)">"&nbsp;Fahrenheit"</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border&nbsp;=&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">Swing.EmptyBorder</SPAN>(<SPAN class=literal style="COLOR: rgb(205,123,0)">15</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>,&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">10</SPAN>)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listenTo(celsius,&nbsp;fahrenheit)
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reactions&nbsp;+=&nbsp;{
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">EditDone</SPAN>(`fahrenheit`)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;f&nbsp;=&nbsp;fahrenheit.text.toInt
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;c&nbsp;=&nbsp;(f&nbsp;-&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">32</SPAN>)&nbsp;*&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>&nbsp;/&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">9</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;celsius.text&nbsp;=&nbsp;c.toString
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">EditDone</SPAN>(`celsius`)&nbsp;=&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;c&nbsp;=&nbsp;celsius.text.toInt
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=vem style="COLOR: rgb(0,0,230)">val</SPAN>&nbsp;f&nbsp;=&nbsp;c&nbsp;*&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">9</SPAN>&nbsp;/&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">5</SPAN>&nbsp;+&nbsp;<SPAN class=literal style="COLOR: rgb(205,123,0)">32</SPAN>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fahrenheit.text&nbsp;=&nbsp;f.toString
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;}
  &nbsp;&nbsp;}
</PRE>
<H5>Listing 32.4 - An implementation of the temperature converter.</H5>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=32.4></A>32.4 Example: Celsius/Fahrenheit converter<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#32.4">link</A>]</SPAN></H3>
<P>As another example, we'll write a GUI program that converts between temperature degrees in Celsius and Fahrenheit. The user interface of the program is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#fig:swing3">Figure 32.3</A>. It consists of two text fields (shown in white) with a label following each. One text field shows temperatures in degrees Celsius, the other in degrees Fahrenheit. Each of the two fields can be edited by the user of the application. Once the user has changed the temperature in either field, the temperature in the other field should automatically update.</P>
<P><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#listing:converter">Listing 32.4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows the complete code that implements this application. The imports at the top of the code use a short-hand:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;swing._
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;event._
</PRE>This is in fact equivalent to the imports used before:<PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing._
  <SPAN class=vem style="COLOR: rgb(0,0,230)">import</SPAN>&nbsp;scala.swing.event._
</PRE>The reason you can use the shorthand is that packages nest in Scala. Because package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is contained in package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala</SPAN>, and everything in that package imported automatically, you can write just<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>swing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to the package. Likewise, package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing.event</SPAN>, is contained as subpackage<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>event</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing</SPAN>. Because you have imported everything in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the first import, you can refer to the event package with just<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>event</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>thereafter. 
<P></P>
<P>The two components<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>celsius</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>fahrenheit</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TempConverter</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are objects of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TextField</SPAN>. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TextField</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Swing is a component that lets you edit a single line of text. It has a default width, which is given in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>columns</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>property measured in characters (set to 5 for both fields).</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>contents</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TempConverter</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are assembled into a panel, which includes the two text fields and two labels that explain what the fields are. The panel is of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>FlowPanel</SPAN>, which means it displays all its elements one after another, in one or more rows, depending on the width of the frame.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TempConverter</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined by a handler that contains two cases. Each case matches an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>EditDone</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>event for one of the two text fields.<A id=i1666208972-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Such an event gets issued when a text field has been edited by the user. Note the form of the patterns, which include back ticks around the element names:</P><PRE style="FONT-SIZE: 0.88em; FONT-FAMILY: 'Lucida Console', 'American Typewriter', 'Courier New', Courier, monospace">  <SPAN class=vem style="COLOR: rgb(0,0,230)">case</SPAN>&nbsp;<SPAN class=typename style="COLOR: rgb(103,0,154)">EditDone</SPAN>(`celsius`)
</PRE>As was explained in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html#sec:kinds-of-patterns">Section 15.2</A>, the back ticks around<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>celsius</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>ensure that the pattern matches only if the source of the event was the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>celsius</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. If you had omitted the back ticks and just written<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>case</SPAN>&nbsp;<SPAN class=code>EditDone(celsius)</SPAN>, the pattern would have matched every event of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>EditDone</SPAN>. The changed field would then be stored in the pattern variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>celsius</SPAN>. Obviously, this is not what you want. Alternatively, you could have defined the two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>TextField</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects starting with upper case characters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>i.e.</I>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Celsius</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Fahrenheit</SPAN>. In that case you could have matched them directly without back ticks, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>case</SPAN>&nbsp;<SPAN class=code>EditDone(Celsius)</SPAN>. 
<P></P>
<P>The two actions of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>EditDone</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>events convert one quantity to another. Each starts by reading out the contents of the modified field and converting it to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>Int</SPAN>. It then applies the formula for converting one temperature degree to the other, and stores the result back as a string in the other text field.</P>
<H3 style="FONT-WEIGHT: normal; FONT-SIZE: 20px"><A name=32.5></A>32.5 Conclusion<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-SIZE: 0.5em">[<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#32.5">link</A>]</SPAN></H3>
<P>This chapter has given you a first taste of GUI programming, using Scala's wrappers for the Swing framework. It has shown how to assemble GUI components, how to customize their properties, and how to handle events. For space reasons, we could discuss only a small number of simple components. There are many more kinds of components. You can find out about them by consulting the Scala documentation of the package<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>scala.swing</SPAN>. The next section will develop an example of a more complicated Swing application.</P>
<P>There are also many tutorials on the original Java Swing framework, on which the Scala wrapper is based.<A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/gui-programming.html#footnote32-1">[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The Scala wrappers resemble the underlying Swing classes, but try to simplify concepts where possible and make them more uniform. The simplification makes extensive use of the properties of the Scala language. For instance, Scala's emulation of properties and its operator overloading allow convenient property definitions using assignments and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>+=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations. Its "everything is an object" philosophy makes it possible to inherit the main method of a GUI application. The method can thus be hidden from user applications, including the boilerplate code for setting things up that comes with it. Finally, and most importantly, Scala's first-class functions and pattern matching make it possible to formulate event handling as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=code>reactions</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>component property, which greatly simplifies life for the application developer.</P>
<HR>

<H4 style="FONT-WEIGHT: normal; FONT-SIZE: 18px; FONT-STYLE: italic">Footnotes for Chapter 32:</H4>
<P><A name=footnote32-1>[1]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>See, for instance,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM style="FONT-STYLE: italic">The Java Tutorials</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="COLOR: rgb(128,0,128); TEXT-DECORATION: none" href="http://www.artima.com/pins1ed/bibliography.html#JavaTutorials">JavaTutorials</A></P></DIV>