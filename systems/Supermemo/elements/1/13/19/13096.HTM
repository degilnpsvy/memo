<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>11.3.&nbsp;Reentrance in Assembly Language</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch11s02.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;11.&nbsp;Reentrant and Recursive Subprograms</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch11s04.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="11.3.&nbsp;Reentrance in Assembly Language" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id286963955></A>11.3.&nbsp;Reentrance in Assembly Language</H2></DIV></DIV></DIV>
<P>To make a subprogram reentrant in assembly language, the subprogram must not use any static variables (i.e. variables defined in a .data section). All variables used must be allocated when the subprogram is called and freed when it returns. The simplest approach is to allocate them as part of the stack frame.</P>
<P>It might be tempting to think of registers as static modifiable data, and hence think that they cannot be used in reentrant subprograms. However, use of registers is acceptable, because:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist type=disc>
<LI class=listitem>In multicore systems, each core has its own set of registers. Hence, two copies of the subprogram running on different cores will not be using the same registers.</LI>
<LI class=listitem>If a process is preempted in the middle of a subprogram, the entire CPU context (including the contents of all registers) is saved by the operating system, and is restored before the process is resumed. Hence, if a subprogram is preempted, and another copy is entered by the preempting process, the CPU context of the preempted copy will be restored before it is resumed.</LI></UL></DIV></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch11s02.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch11.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch11s04.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">11.2.&nbsp;Introduction&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;11.4.&nbsp;Recursion</TD></TR></TBODY></TABLE></DIV>