<DIV class=navheader style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE width="100%" summary="Navigation header">
<TBODY>
<TR>
<TH align=middle colSpan=3>10.9.&nbsp;Coding Practice</TH></TR>
<TR>
<TD align=left width="20%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s08.html">Prev</A>&nbsp;</TD>
<TH align=middle width="60%">Chapter&nbsp;10.&nbsp;Subprogram Calls and the Stack</TH>
<TD align=right width="20%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s10.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section title="10.9.&nbsp;Coding Practice" style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=octal_io></A>10.9.&nbsp;Coding Practice</H2></DIV></DIV></DIV>
<P>Subprograms to input and output octal values:</P><PRE class=programlisting>	/**
	 *  Description:
	 *      Octal input/output example.
	 *
	 *  Author:
	 *      J Bacon
	 */
	 
	import java.io.*;
	
	class octal
	{
	    public static void main(String args[])
	    {
		// Test octal input
		int     num = read_octal();
		
		// Debug code
		System.out.printf("%d\n", num);
		System.out.printf("%o\n", num);
		
		// Test octal output
		print_octal(num);
		return;
	    }
	    
	    /**
	     *  Description:
	     *      Read a positive integer in octal.
	     *
	     *  Returns:    The number if successful
	     *              -1 if an input error occurs
	     *              -2 if an invalid digit is encountered
	     *              (In Java, throwing an exception is preferred
	     *              to returning error codes, but exceptions may
	     *              be beyond some 315 students.)
	     *
	     *  Author:
	     *      J Bacon
	     *
	     *  History:
	     *      Nov 2010
	     */
	    
	    public static int read_octal()
	    {
		/*
		 *  This code is meant to be generalized to work with other
		 *  bases.  There are more efficient ways to input/output
		 *  octal values using direct bit manipulation, if octal
		 *  is all you want.
		 */
		 
		int     num,        // Number entered in octal
			digit,      // Most recently entered digit
			ch;         // Most recently entered character
		
		// Create standard input stream
		BufferedReader br = 
		    new BufferedReader(new InputStreamReader(System.in));
		
		/*
		 *  Prime the loop immediately before the loop.  Relying on
		 *  initializers for num and ch would not be cohesive code.
		 */
		num = 0;
		ch = '0';
		while ( ch != '\n' )
		{
		    // Insert digit (adds 0 digit to 0 the first time)
		    if ( (ch &gt;= '0') &amp;&amp; (ch &lt;= '7') )
		    {
			digit = ch - '0';
			num = num * 8 + digit;
		    }
		    else
			return -2;
		    
		    // Read next digit
		    try
		    {
			ch = br.read();
		    }
		    catch(Exception e)
		    {
			return -1;  // Return error flag
		    }
		}
		return num;
	    }
	    
	    /**
	     *  Description:
	     *      Print value of num in octal
	     *
	     *  Author:
	     *      J Bacon
	     *
	     *  History:
	     *      Nov 2010    Create
	     */
	    
	    public static void print_octal(int num)
	    {
		int     power;
		char    digit;
		
		/*
		 *  This code is meant to be generalized to work with other
		 *  bases.  There are more efficient ways to input/output
		 *  octal values using direct bit manipulation, if octal
		 *  is all you want.
		 */
		
		/*
		 *  Find largest power of 8 that fits in num
		 */
		
		power = 1;
		while ( power &lt;= num )
		    power *= 8;
		
		/*
		 *  Print octal digits from left to right
		 */
		power /= 8;
		while ( power &gt; 0 )
		{
		    // Extract leftmost digit
		    digit = Character.forDigit(num / power, 8);
		    System.out.print(digit);
		    
		    // Remove leftmost digit from num
		    num %= power;
		    
		    // Prepare to extract new leftmost digit
		    power /= 8;
		}
	    }
	}
	</PRE>
<P>MAL equivalent of Java code above:</P><PRE class=programlisting>#########################################################################
#   Description:
#       Test driver for octal input subprogram
#########################################################################

#########################################################################
#   Modification history:
#   Date        Name        Modification
#   11-3-2010   J Bacon     Created
#########################################################################

#########################################################################
#   Global constants (do not use global variables!)
#   By convention, constant names use all capital letters.
#########################################################################

# Common ASCII/ISO control characters

ISO_LF              =   10  # Line feed (newline)

# System call constants

SYS_PRINT_INT       =   1
SYS_PRINT_FLOAT     =   2
SYS_PRINT_DOUBLE    =   3
SYS_PRINT_STRING    =   4
SYS_READ_INT        =   5
SYS_READ_FLOAT      =   6
SYS_READ_DOUBLE     =   7
SYS_READ_STRING     =   8
SYS_SBRK            =   9
SYS_EXIT            =   10
SYS_PRINT_CHAR      =   11
SYS_READ_CHAR       =   12

# Program-specific constants
BASE                =   8
INVALID_DIGIT       =   -1  # Sentinal value returned by read_num


#########################################################################
#   Sample macros
#   Use these as models to create others, such as print_word_reg,
#   read_word_reg, etc.
#########################################################################

	# Save contents of an integer register on the stack
	.macro  pushw($register)
	addi    $sp, $sp, -4
	sw      $register, ($sp)
	.end_macro
	
	# Retrieve top of stack to an integer register
	.macro  popw($register)
	lw      $register, ($sp)
	addi    $sp, $sp, 4
	.end_macro
	
#########################################################################
#   Subprograms
#########################################################################

######################################################################### 
#   Subprogram Description:
#       Read an integer value in octal
#
#   Arguments: None
#
#   Returns:
#       $v0 = integer value
#########################################################################

#########################################################################
#   Modification history:
#   Date        Name        Modification
#   11-3-2010   J Bacon     Created.
#########################################################################

# Subprogram body
	.text
read_num:
	# Push stack frame
	addi    $sp, $sp, -12
	sw      $ra, 0($sp)
	sw      $s0, 4($sp)
	sw      $s1, 8($sp)
	
	# $s0 = the number being entered
	li      $s0, 0

read_num_next_char:
	# Read next character
	li      $v0, SYS_READ_CHAR
	syscall
	
	# Quit if linefeed
	beq     $v0, ISO_LF, read_num_done
	
	# Convert to digit
	addi    $s1, $v0, -48
	
	# Make sure character entered was between '0' and '7'
	bgeu    $s1, BASE, read_num_invalid_digit
	
	# Shift existing octal digits to the left
	mul     $s0, $s0, BASE
	
	# Insert new digit into number
	addu    $s0, $s0, $s1
	j       read_num_next_char

read_num_done:
	move    $v0, $s0
	
	# Pop stack frame
	lw      $ra, 0($sp)
	lw      $s0, 4($sp)
	lw      $s1, 8($sp)
	addi    $sp, $sp, 12
	
	# Return to caller
	jr      $ra

read_num_invalid_digit:
	li      $s0, INVALID_DIGIT
	j       read_num_done
	

######################################################################### 
#   Subprogram Description:
#       Print a number in octal
#
#   Arguments:
#       $a0 = number
#
#   Returns: Nothing
#########################################################################

#########################################################################
#   Modification history:
#   Date        Name        Modification
#   11-3-2010   J Bacon     Created.
#########################################################################

# Local variables
	.data 
	.align 2
# $s0 = num
# $s1 = power of 8

# Subprogram body
	.text
print_num:
	# Push stack frame
	addi    $sp, $sp, -20
	sw      $ra, 0($sp)
	sw      $s0, 4($sp)
	sw      $s1, 8($sp)
	sw      $a0, 12($sp)
	sw      $v0, 16($sp)
	
	move    $s0, $a0
	
	# Find largest power of 8 that fits in num
	li      $s1, 1
print_num_find_power:
	bgt     $s1, $s0, print_num_next_digit
	mul     $s1, $s1, BASE
	j       print_num_find_power
	
print_num_next_digit:
	# Reduce power.  When power reaches 0, we're done printing.
	div     $s1, $s1, BASE
	beqz    $s1, print_num_done
	
	# Extract leftmost digit from num by dividing by power.
	div     $a0, $s0, $s1
	
	# Convert to ASCII and print
	addi    $a0, $a0, 48
	li      $v0, SYS_PRINT_CHAR
	syscall
	
	# Remove leftmost digit from number
	rem     $s0, $s0, $s1
	j       print_num_next_digit

print_num_done:

	# Pop stack frame
	sw      $ra, 0($sp)
	sw      $s0, 4($sp)
	sw      $s1, 8($sp)
	sw      $a0, 12($sp)
	sw      $v0, 16($sp)
	addi    $sp, $sp, 20
	
	# Return to caller
	jr      $ra


#########################################################################
#   Main program
#########################################################################

	.data
num:            .word   0
invalid_msg:    .asciiz "Invalid input.\n"

# Main body
	.text
main:
	# Save registers modified here
	pushw($ra)

	# Read an integer in octal and test by printing
	jal     read_num
	sw      $v0, num
	beq     $v0, INVALID_DIGIT, invalid_number
	
	lw      $a0, num
	jal     print_num
	
	li      $a0, ISO_LF
	li      $v0, SYS_PRINT_CHAR
	syscall
	
	lw      $a0, num
	li      $v0, SYS_PRINT_INT
	syscall
	
	li      $a0, ISO_LF
	li      $v0, SYS_PRINT_CHAR
	syscall

done:
	# Restore registers modified here
	popw($ra)
	
	# Return to system
	jr      $ra

invalid_number:
	la      $a0, invalid_msg
	li      $v0, SYS_PRINT_STRING
	syscall
	j       done

</PRE></DIV>
<DIV class=navfooter style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<TABLE width="100%" summary="Navigation footer">
<TBODY>
<TR>
<TD align=left width="40%"><A accessKey=p href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s08.html">Prev</A>&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=u href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10.html">Up</A></TD>
<TD align=right width="40%">&nbsp;<A accessKey=n href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s10.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="40%">10.8.&nbsp;Macros vs. Subprograms&nbsp;</TD>
<TD align=middle width="20%"><A accessKey=h href="http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/index.html">Home</A></TD>
<TD vAlign=top align=right width="40%">&nbsp;10.10.&nbsp;Top-down Programming and Stubs</TD></TR></TBODY></TABLE></DIV>