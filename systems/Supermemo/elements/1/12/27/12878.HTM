<DIV class=NAVHEADER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TH align=middle colSpan=3>Secure Programming for Linux and Unix HOWTO</TH></TR>
<TR>
<TD vAlign=bottom align=left width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/use-pam.html">Prev</A></TD>
<TD vAlign=bottom align=middle width="80%">Chapter 11. Special Topics</TD>
<TD vAlign=bottom align=right width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/windows-ce.html">Next</A></TD></TR></TBODY></TABLE>
<HR align=left width="100%">
</DIV>
<DIV class=SECT1 style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<H1 class=SECT1><A name=TOOLS>11.7. Tools</A></H1>
<P>Some tools may help you detect security problems before you field the result. They can't find all such problems, of course, but they can help catch problems that would overwise slip by. Here are a few tools, emphasizing open source / free software tools.</P>
<P>One obvious type of tool is a program to examine the source code to search for patterns of known potential security problems (e.g., calls to library functions in ways are often the source of security vulnerabilities). These kinds of programs are called ``source code scanners''. Here are a few such tools:</P>
<P></P>
<UL>
<LI>
<P>Flawfinder, which I've developed; it's available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/flawfinder" target=_top>http://www.dwheeler.com/flawfinder</A>. This is also a program that scans C/C++ source code for common problems, and is also licensed under the GPL. Unlike RATS, flawfinder is implemented in Python. The developers of RATS and Flawfinder have agreed to find a way to work together to create a single ``best of breed'' open source program.</P></LI>
<LI>
<P>RATS (Rough Auditing Tool for Security) from Secure Software Solutions is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.securesw.com/rats" target=_top>http://www.securesw.com/rats</A>. This program scans C/C++ source code for common problems, and is licensed under the GPL.</P></LI>
<LI>
<P>ITS4 from Cigital (formerly Reliable Software Technologies, RST) also statically checks C/C++ code. It is available free for non-commercial use, including its source code and with certain modification and redistribution rights. Note that this isn't released as ``open source'' as defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.opensource.org/osd.html" target=_top>Open Source Definition</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(OSD) - In particular, OSD point 6 forbids ``non-commercial use only'' clauses in open source licenses. ITS4 is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.rstcorp.com/its4" target=_top>http://www.rstcorp.com/its4</A>.</P></LI>
<LI>
<P>Splint (formerly named LCLint) is a tool for statically checking C programs. With minimal effort, splint can be used as a better lint. If additional effort is invested adding annotations to programs, splint can perform stronger checking than can be done by any standard lint. For example, it can be used to statically detect likely buffer overflows. The software is licensed under the GPL and is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.splint.org/" target=_top>http://www.splint.org</A>.</P></LI>
<LI>
<P>cqual is a type-based analysis tool for finding bugs in C programs. cqual extends the type system of C with extra user-defined type qualifiers, e.g., it can note that values are ``tainted'' or ``untainted'' (similar to Perl's taint checking). The programmer annotates their program in a few places, and cqual performs qualifier inference to check whether the annotations are correct. cqual presents the analysis results using Program Analysis Mode, an emacs-based interface. The current version of cqual can detect potential format-string vulnerabilities in C programs. A previous incarnation of cqual, Carillon, has been used to find Y2K bugs in C programs. The software is licensed under the GPL and is available from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.cs.berkeley.edu/Research/Aiken/cqual" target=_top>http://www.cs.berkeley.edu/Research/Aiken/cqual</A>.</P></LI>
<LI>
<P>Cyclone is a C-like language intended to remove C's security weaknesses. In theory, you can always switch to a language that is ``more secure,'' but this doesn't always help (a language can help you avoid common mistakes but it can't read your mind).<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.securityfocus.com/guest/9094" target=_top>John Viega has reviewed Cyclone</A>, and in December 2001 he said: ``Cyclone is definitely a neat language. It's a C dialect that doesn't feel like it's taking away any power, yet adds strong safety guarantees, along with numerous features that can be a real boon to programmers. Unfortunately, Cyclone isn't yet ready for prime time. Even with crippling limitations aside, it doesn't yet offer enough advantages over Java (or even C with a good set of tools) to make it worth the risk of using what is still a very young technology. Perhaps in a few years, Cyclone will mature into a robust, widely supported language that comes dangerously close to C in terms of efficiency. If that day comes, you'll certainly see me abandoning C for good.'' The Cyclone compiler has been released under the GPL and LGPL. You can get more information from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.research.att.com/projects/cyclone" target=_top>Cyclone web site</A>.</P></LI></UL>
<P></P>
<P>Some tools try to detect potential security flaws at run-time, either to counter them or at least to warn the developer about them. Much of Crispen Cowan's work, such as StackGuard, fits here.</P>
<P>There are several tools that try to detect various C/C++ memory-management problems; these are really general-purpose software quality improvement tools, and not specific to security, but memory management problems can definitely cause security problems. An especially capable tool is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://developer.kde.org/~sewardj" target=_top>Valgrind</A>, which detects various memory-management problems (such as use of uninitialized memory, reading/writing memory after it's been free'd, reading/writing off the end of malloc'ed blocks, and memory leaks). Another such tool is Electric Fence (efence) by Bruce Perens, which can detect certain memory management errors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.linkdata.se/sourcecode.html" target=_top>Memwatch</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(public domain) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://odin.ac.hmc.edu/~neldredge/yamd/" target=_top>YAMD</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(GPL) can detect memory allocation problems for C and C++. You can even use the built-in capabilities of the GNU C library's malloc library, which has the MALLOC_CHECK_ environment variable (see its manual page for more information). There are many others.</P>
<P>Another approach is to create test patterns and run the program, in attempt to find weaknesses in the program. Here are a few such tools:</P>
<P></P>
<UL>
<LI>
<P>BFBTester, the Brute Force Binary Tester, is licensed under the GPL. This program does quick security checks of binary programs. BFBTester performs checks of single and multiple argument command line overflows and environment variable overflows. Version 2.0 and higher can also watch for tempfile creation activity (to check for using unsafe tempfile names). At one time BFBTester didn't run on Linux (due to a technical issue in Linux's POSIX threads implementation), but this has been fixed as of version 2.0.1. More information is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://bfbtester.sourceforge.net/" target=_top>http://bfbtester.sourceforge.net/</A></P></LI>
<LI>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://fuzz.sourceforge.net/" target=_top>fuzz</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>program is a tool for testing other software. It tests programs by bombarding the program being evaluated with random data. This tool isn't really specific to security.</P></LI>
<LI>
<P><A href="http://www.immunitysec.com/spike.html" target=_top>SPIKE</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a "fuzzer creation kit", i.e., it's a toolkit designed to create "random" tests to find security problems. The SPIKE toolkit is particularly designed for protocol analysis by simulating network protocol clients, and SPIKE proXy is a tool built on SPIKE to test web applications. SPIKE includes a few pre-canned tests. SPIKE is licensed under the GPL.</P></LI></UL>
<P></P>
<P>There are a number tools that try to give you insight into running programs that can also be useful when trying to find security problems in your code. This includes symbolic debuggers (such as gdb) and trace programs (such as strace and ltrace). One interesting program to support analysis of running code is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://razor.bindview.com/tools/fenris" target=_top>Fenris</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(GPL license). Its documentation describes Fenris as a ``multipurpose tracer, stateful analyzer and partial decompiler intended to simplify bug tracking, security audits, code, algorithm or protocol analysis - providing a structural program trace, general information about internal constructions, execution path, memory operations, I/O, conditional expressions and much more.'' Fenris actually supplies a whole suite of tools, including extensive forensics capabilities and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://lcamtuf.coredump.cx/fdesk.jpg" target=_top>a nice debugging GUI for Linux</A>. A list of other promising open source tools that can be suitable for debugging or code analysis is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://lcamtuf.coredump.cx/fenris/debug-tools.html" target=_top>http://lcamtuf.coredump.cx/fenris/debug-tools.html</A>. Another interesting program along these lines is Subterfugue, which allows you to control what happens in every system call made by a program.</P>
<P>If you're building a common kind of product where many standard potential flaws exist (like an ftp server or firewall), you might find standard security scanning tools useful. One good one is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.nessus.org/" target=_top>Nessus</A>; there are many others. These kinds of tools are very useful for doing regression testing, but since they essentially use a list of past specific vulnerabilities and common configuration errors, they may not be very helpful in finding problems in new programs.</P>
<P>Often, you'll need to call on other tools to implement your secure infrastructure. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://ospkibook.sourceforge.net/" target=_top>Open-Source PKI Book</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>describes a number of open source programs for implmenting a public key infrastructure (PKI).</P>
<P>Of course, running a ``secure'' program on an insecure platform configuration makes little sense. You may want to examine hardening systems, which attempt to configure or modify systems to be more resistant to attacks. For Linux, one hardening system is Bastille Linux, available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.bastille-linux.org/" target=_top>http://www.bastille-linux.org</A>.</P></DIV>
<DIV class=NAVFOOTER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR align=left width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD vAlign=top align=left width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/use-pam.html">Prev</A></TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Home</A></TD>
<TD vAlign=top align=right width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/windows-ce.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="33%">Using PAM</TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/special.html">Up</A></TD>
<TD vAlign=top align=right width="33%">Windows CE</TD></TR></TBODY></TABLE></DIV>