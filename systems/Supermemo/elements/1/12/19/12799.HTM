<DIV class=NAVHEADER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TH align=middle colSpan=3>Secure Programming for Linux and Unix HOWTO</TH></TR>
<TR>
<TD vAlign=bottom align=left width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/quotas.html">Prev</A></TD>
<TD vAlign=bottom align=middle width="80%">Chapter 3. Summary of Linux and Unix Security Features</TD>
<TD vAlign=bottom align=right width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/audit.html">Next</A></TD></TR></TBODY></TABLE>
<HR align=left width="100%">
</DIV>
<DIV class=SECT1 style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<H1 class=SECT1><A name=DLLS>3.7. Dynamically Linked Libraries</A></H1>
<P>Practically all programs depend on libraries to execute. In most modern Unix-like systems, including Linux, programs are by default compiled to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynamically linked libraries</EM>(DLLs). That way, you can update a library and all the programs using that library will use the new (hopefully improved) version if they can.</P>
<P>Dynamically linked libraries are typically placed in one a few special directories. The usual directories include<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/lib</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/usr/lib</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/lib/security</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>for PAM modules,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/usr/X11R6/lib</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>for X-windows, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/usr/local/lib</TT>. You should use these standard conventions in your programs, in particular, except during debugging you shouldn't use value computed from the current directory as a source for dynamically linked libraries (an attacker may be able to add their own choice ``library'' values).</P>
<P>There are special conventions for naming libraries and having symbolic links for them, with the result that you can update libraries and still support programs that want to use old, non-backward-compatible versions of those libraries. There are also ways to override specific libraries or even just specific functions in a library when executing a particular program. This is a real advantage of Unix-like systems over Windows-like systems; I believe Unix-like systems have a much better system for handling library updates, one reason that Unix and Linux systems are reputed to be more stable than Windows-based systems.</P>
<P>On GNU glibc-based systems, including all Linux systems, the list of directories automatically searched during program start-up is stored in the file /etc/ld.so.conf. Many Red Hat-derived distributions don't normally include<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/usr/local/lib</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/etc/ld.so.conf</TT>. I consider this a bug, and adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/usr/local/lib</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/etc/ld.so.conf</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a common ``fix'' required to run many programs on Red Hat-derived systems. If you want to just override a few functions in a library, but keep the rest of the library, you can enter the names of overriding libraries (.o files) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=FILENAME>/etc/ld.so.preload</TT>; these ``preloading'' libraries will take precedence over the standard set. This preloading file is typically used for emergency patches; a distribution usually won't include such a file when delivered. Searching all of these directories at program start-up would be too time-consuming, so a caching arrangement is actually used. The program ldconfig(8) by default reads in the file /etc/ld.so.conf, sets up the appropriate symbolic links in the dynamic link directories (so they'll follow the standard conventions), and then writes a cache to /etc/ld.so.cache that's then used by other programs. So, ldconfig has to be run whenever a DLL is added, when a DLL is removed, or when the set of DLL directories changes; running ldconfig is often one of the steps performed by package managers when installing a library. On start-up, then, a program uses the dynamic loader to read the file /etc/ld.so.cache and then load the libraries it needs.</P>
<P>Various environment variables can control this process, and in fact there are environment variables that permit you to override this process (so, for example, you can temporarily substitute a different library for this particular execution). In Linux, the environment variable LD_LIBRARY_PATH is a colon-separated set of directories where libraries are searched for first, before the standard set of directories; this is useful when debugging a new library or using a nonstandard library for special purposes, but be sure you trust those who can control those directories. The variable LD_PRELOAD lists object files with functions that override the standard set, just as /etc/ld.so.preload does. The variable LD_DEBUG, displays debugging information; if set to ``all'', voluminous information about the dynamic linking process is displayed while it's occurring.</P>
<P>Permitting user control over dynamically linked libraries would be disastrous for setuid/setgid programs if special measures weren't taken. Therefore, in the GNU glibc implementation, if the program is setuid or setgid these variables (and other similar variables) are ignored or greatly limited in what they can do. The GNU glibc library determines if a program is setuid or setgid by checking the program's credentials; if the UID and EUID differ, or the GID and the EGID differ, the library presumes the program is setuid/setgid (or descended from one) and therefore greatly limits its abilities to control linking. If you load the GNU glibc libraries, you can see this; see especially the files elf/rtld.c and sysdeps/generic/dl-sysdep.c. This means that if you cause the UID and GID to equal the EUID and EGID, and then call a program, these variables will have full effect. Other Unix-like systems handle the situation differently but for the same reason: a setuid/setgid program should not be unduly affected by the environment variables set. Note that graphical user interface toolkits generally do permit user control over dynamically linked libraries, because executables that directly invoke graphical user inteface toolkits should never, ever, be setuid (or have other special privileges) at all. For more about how to develop secure GUI applications, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/minimize-privileges.html#MINIMIZE-PRIVILEGED-MODULES">Section 7.4.4</A>.</P>
<P>For Linux systems, you can get more information from my document, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/program-library" target=_top><EM>Program Library HOWTO</EM></A>.</P></DIV>
<DIV class=NAVFOOTER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR align=left width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD vAlign=top align=left width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/quotas.html">Prev</A></TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Home</A></TD>
<TD vAlign=top align=right width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/audit.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="33%">Quotas and Limits</TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/features.html">Up</A></TD>
<TD vAlign=top align=right width="33%">Audit</TD></TR></TBODY></TABLE></DIV>