<DIV class=NAVHEADER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TH align=middle colSpan=3>Secure Programming for Linux and Unix HOWTO</TH></TR>
<TR>
<TD vAlign=bottom align=left width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/why-write.html">Prev</A></TD>
<TD vAlign=bottom align=middle width="80%">Chapter 2. Background</TD>
<TD vAlign=bottom align=right width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/other-sources.html">Next</A></TD></TR></TBODY></TABLE>
<HR align=left width="100%">
</DIV>
<DIV class=SECT1 style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<H1 class=SECT1><A name=SOURCES-OF-GUIDELINES>2.8. Sources of Design and Implementation Guidelines</A></H1>
<P>Several documents help describe how to write secure programs (or, alternatively, how to find security problems in existing programs), and were the basis for the guidelines highlighted in the rest of this book. </P>
<P>For general-purpose servers and setuid/setgid programs, there are a number of valuable documents (though some are difficult to find without having a reference to them).</P>
<P>Matt Bishop [1996, 1997] has developed several extremely valuable papers and presentations on the topic, and in fact he has a web page dedicated to the topic at<A href="http://olympus.cs.ucdavis.edu/~bishop/secprog.html" target=_top>http://olympus.cs.ucdavis.edu/~bishop/secprog.html</A>. AUSCERT has released a programming checklist<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="ftp://ftp.auscert.org.au/pub/auscert/papers/secure_programming_checklist" target=_top>[AUSCERT 1996]</A>, based in part on chapter 23 of Garfinkel and Spafford's book discussing how to write secure SUID and network programs<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.oreilly.com/catalog/puis" target=_top>[Garfinkel 1996]</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.sunworld.com/swol-04-1998/swol-04-security.html" target=_top>Galvin [1998a]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>described a simple process and checklist for developing secure programs; he later updated the checklist in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.sunworld.com/sunworldonline/swol-08-1998/swol-08-security.html" target=_top>Galvin [1998b]</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.pobox.com/~kragen/security-holes.html" target=_top>Sitaker [1999]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>presents a list of issues for the ``Linux security audit'' team to search for.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.homeport.org/~adam/review.html" target=_top>Shostack [1999]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines another checklist for reviewing security-sensitive code. The NCSA<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.ncsa.uiuc.edu/General/Grid/ACES/security/programming" target=_top>[NCSA]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a set of terse but useful secure programming guidelines. Other useful information sources include the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Secure Unix Programming FAQ</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.whitefang.com/sup/" target=_top>[Al-Herbish 1999]</A>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Security-Audit's Frequently Asked Questions</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://lsap.org/faq.txt" target=_top>[Graham 1999]</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.clark.net/pub/mjr/pubs/pdf/" target=_top>Ranum [1998]</A>. Some recommendations must be taken with caution, for example, the BSD setuid(7) man page<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.homeport.org/~adam/setuid.7.html" target=_top>[Unknown]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>recommends the use of access(3) without noting the dangerous race conditions that usually accompany it. Wood [1985] has some useful but dated advice in its ``Security for Programmers'' chapter.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.research.att.com/~smb/talks" target=_top>Bellovin [1994]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>includes useful guidelines and some specific examples, such as how to restructure an ftpd implementation to be simpler and more secure. FreeBSD provides some guidelines<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.freebsd.org/security/security.html" target=_top>FreeBSD [1999]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://developer.gnome.org/doc/guides/programming-guidelines/book1.html" target=_top>[Quintero 1999]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is primarily concerned with GNOME programming guidelines, but it includes a section on security considerations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.fish.com/security/murphy.html" target=_top>[Venema 1996]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a detailed discussion (with examples) of some common errors when programming secure programs (widely-known or predictable passwords, burning yourself with malicious data, secrets in user-accessible data, and depending on other programs).<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.fish.com/security/maldata.html" target=_top>[Sibert 1996]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>describes threats arising from malicious data. Michael Bacarella's article<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://m.bacarella.com/papers/secsoft/html" target=_top>The Peon's Guide To Secure System Development</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a nice short set of guidelines.</P>
<P>There are many documents giving security guidelines for programs using the Common Gateway Interface (CGI) to interface with the web. These include<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.csclub.uwaterloo.ca/u/mlvanbie/cgisec" target=_top>Van Biesbrouck [1996]</A>,<A href="http://language.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html" target=_top>Gundavaram [unknown]</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://webreview.com/wr/pub/97/08/08/bookshelf" target=_top>[Garfinkle 1997]</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.eekim.com/pubs/cgibook" target=_top>Kim [1996]</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt" target=_top>Phillips [1995]</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.w3.org/Security/Faq/www-security-faq.html" target=_top>Stein [1999]</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://members.home.net/razvan.peteanu" target=_top>[Peteanu 2000]</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://advosys.ca/tips/web-security.html" target=_top>[Advosys 2000]</A>.</P>
<P>There are many documents specific to a language, which are further discussed in the language-specific sections of this book. For example, the Perl distribution includes<A href="http://www.perl.com/pub/doc/manual/html/pod/perlsec.html" target=_top>perlsec(1)</A>, which describes how to use Perl more securely. The Secure Internet Programming site at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.cs.princeton.edu/sip" target=_top>http://www.cs.princeton.edu/sip</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interested in computer security issues in general, but focuses on mobile code systems such as Java, ActiveX, and JavaScript; Ed Felten (one of its principles) co-wrote a book on securing Java (<A href="http://www.securingjava.com/" target=_top>[McGraw 1999]</A>) which is discussed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/java.html">Section 10.6</A>. Sun's security code guidelines provide some guidelines primarily for Java and C; it is available at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://java.sun.com/security/seccodeguide.html" target=_top>http://java.sun.com/security/seccodeguide.html</A>.</P>
<P>Yoder [1998] contains a collection of patterns to be used when dealing with application security. It's not really a specific set of guidelines, but a set of commonly-used patterns for programming that you may find useful. The Schmoo group maintains a web page linking to information on how to write secure code at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.shmoo.com/securecode" target=_top>http://www.shmoo.com/securecode</A>.</P>
<P>There are many documents describing the issue from the other direction (i.e., ``how to crack a system''). One example is McClure [1999], and there's countless amounts of material from that vantage point on the Internet. There are also more general documents on computer architectures on how attacks must be developed to exploit them, e.g., [LSD 2001]. The Honeynet Project has been collecting information (including statistics) on how attackers actually perform their attacks; see their website at<A href="http://project.honeynet.org/" target=_top>http://project.honeynet.org</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information.</P>
<P>There's also a large body of information on vulnerabilities already identified in existing programs. This can be a useful set of examples of ``what not to do,'' though it takes effort to extract more general guidelines from the large body of specific examples. There are mailing lists that discuss security issues; one of the most well-known is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://securityfocus.com/forums/bugtraq/faq.html" target=_top>Bugtraq</A>, which among other things develops a list of vulnerabilities. The CERT Coordination Center (CERT/CC) is a major reporting center for Internet security problems which reports on vulnerabilities. The CERT/CC occasionally produces advisories that provide a description of a serious security problem and its impact, along with instructions on how to obtain a patch or details of a workaround; for more information see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.cert.org/" target=_top>http://www.cert.org</A>. Note that originally the CERT was a small computer emergency response team, but officially ``CERT'' doesn't stand for anything now. The Department of Energy's<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://ciac.llnl.gov/ciac" target=_top>Computer Incident Advisory Capability (CIAC)</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>also reports on vulnerabilities. These different groups may identify the same vulnerabilities but use different names. To resolve this problem, MITRE supports the Common Vulnerabilities and Exposures (CVE) list which creates a single unique identifier (``name'') for all publicly known vulnerabilities and security exposures identified by others; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.cve.mitre.org/" target=_top>http://www.cve.mitre.org</A>. NIST's ICAT is a searchable catalog of computer vulnerabilities, categorizing each CVE vulnerability so that they can be searched and compared later; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://csrc.nist.gov/icat" target=_top>http://csrc.nist.gov/icat</A>.</P>
<P>This book is a summary of what I believe are the most useful and important guidelines. My goal is a book that a good programmer can just read and then be fairly well prepared to implement a secure program. No single document can really meet this goal, but I believe the attempt is worthwhile. My objective is to strike a balance somewhere between a ``complete list of all possible guidelines'' (that would be unending and unreadable) and the various ``short'' lists available on-line that are nice and short but omit a large number of critical issues. When in doubt, I include the guidance; I believe in that case it's better to make the information available to everyone in this ``one stop shop'' document. The organization presented here is my own (every list has its own, different structure), and some of the guidelines (especially the Linux-unique ones, such as those on capabilities and the FSUID value) are also my own. Reading all of the referenced documents listed above as well is highly recommended, though I realize that for many it's impractical.</P></DIV>
<DIV class=NAVFOOTER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR align=left width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD vAlign=top align=left width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/why-write.html">Prev</A></TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Home</A></TD>
<TD vAlign=top align=right width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/other-sources.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="33%">Why Did I Write This Document?</TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/background.html">Up</A></TD>
<TD vAlign=top align=right width="33%">Other Sources of Security Information</TD></TR></TBODY></TABLE></DIV>