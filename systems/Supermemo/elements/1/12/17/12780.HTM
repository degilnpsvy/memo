<DIV class=NAVHEADER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TH align=middle colSpan=3>Secure Programming for Linux and Unix HOWTO</TH></TR>
<TR>
<TD vAlign=bottom align=left width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Prev</A></TD>
<TD vAlign=bottom align=middle width="80%"></TD>
<TD vAlign=bottom align=right width="10%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/background.html">Next</A></TD></TR></TBODY></TABLE>
<HR align=left width="100%">
</DIV>
<DIV class=CHAPTER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<H1><A name=INTRODUCTION>Chapter 1. Introduction</A></H1>
<TABLE class=EPIGRAPH cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top align=left width="45%"><I>
<P><I>A wise man attacks the city of the mighty and pulls down the stronghold in which they trust.</I></P></I></TD></TR>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top align=right width="45%"><I><SPAN class=ATTRIBUTION>Proverbs 21:22 (NIV)</SPAN></I></TD></TR></TBODY></TABLE>
<P>This book describes a set of guidelines for writing secure programs on Linux and Unix systems. For purposes of this book, a ``secure program'' is a program that sits on a security boundary, taking input from a source that does not have the same access rights as the program. Such programs include application programs used as viewers of remote data, web applications (including CGI scripts), network servers, and setuid/setgid programs. This book does not address modifying the operating system kernel itself, although many of the principles discussed here do apply. These guidelines were developed as a survey of ``lessons learned'' from various sources on how to create such programs (along with additional observations by the author), reorganized into a set of larger principles. This book includes specific guidance for a number of languages, including C, C++, Java, Perl, PHP, Python, Tcl, and Ada95.</P>
<P>You can find the master copy of this book at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs" target=_top>http://www.dwheeler.com/secure-programs</A>. This book is also part of the Linux Documentation Project (LDP) at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.tldp.org/" target=_top>http://www.tldp.org</A>It's also mirrored in several other places. Please note that these mirrors, including the LDP copy and/or the copy in your distribution, may be older than the master copy. I'd like to hear comments on this book, but please do not send comments until you've checked to make sure that your comment is valid for the latest version.</P>
<P>This book does not cover assurance measures, software engineering processes, and quality assurance approaches, which are important but widely discussed elsewhere. Such measures include testing, peer review, configuration management, and formal methods. Documents specifically identifying sets of development assurance measures for security issues include the Common Criteria (CC, [CC 1999]) and the Systems Security Engineering Capability Maturity Model [SSE-CMM 1999]. Inspections and other peer review techniques are discussed in [Wheeler 1996]. This book does briefly discuss ideas from the CC, but only as an organizational aid to discuss security requirements. More general sets of software engineering processes are defined in documents such as the Software Engineering Institute's Capability Maturity Model for Software (SW-CMM) [Paulk 1993a, 1993b] and ISO 12207 [ISO 12207]. General international standards for quality systems are defined in ISO 9000 and ISO 9001 [ISO 9000, 9001]. </P>
<P>This book does not discuss how to configure a system (or network) to be secure in a given environment. This is clearly necessary for secure use of a given program, but a great many other documents discuss secure configurations. An excellent general book on configuring Unix-like systems to be secure is Garfinkel [1996]. Other books for securing Unix-like systems include Anonymous [1998]. You can also find information on configuring Unix-like systems at web sites such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.unixtools.com/security.html" target=_top>http://www.unixtools.com/security.html</A>. Information on configuring a Linux system to be secure is available in a wide variety of documents including Fenzi [1999], Seifried [1999], Wreski [1998], Swan [2001], and Anonymous [1999]. Geodsoft [2001] describes how to harden OpenBSD, and many of its suggestions are useful for any Unix-like system. Information on auditing existing Unix-like systems are discussed in Mookhey [2002]. For Linux systems (and eventually other Unix-like systems), you may want to examine the Bastille Hardening System, which attempts to ``harden'' or ``tighten'' the Linux operating system. You can learn more about Bastille at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.bastille-linux.org/" target=_top>http://www.bastille-linux.org</A>; it is available for free under the General Public License (GPL). Other hardening systems include<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.grsecurity.net/" target=_top>grsecurity</A>. For Windows 2000, you might want to look at Cox [2000]. The U.S. National Security Agency (NSA) maintains a set of security recommendation guides at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://nsa1.www.conxion.com/" target=_top>http://nsa1.www.conxion.com</A>, including the ``60 Minute Network Security Guide.'' If you're trying to establish a public key infrastructure (PKI) using open source tools, you might want to look at the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://ospkibook.sourceforge.net/" target=_top>Open Source PKI Book.</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>More about firewalls and Internet security is found in [Cheswick 1994].</P>
<P>Configuring a computer is only part of Security Management, a larger area that also covers how to deal with viruses, what kind of organizational security policy is needed, business continuity plans, and so on. There are international standards and guidance for security management. ISO 13335 is a five-part technical report giving guidance on security management [ISO 13335]. ISO/IEC 17799:2000 defines a code of practice [ISO 17799]; its stated purpose is to give high-level and general ``recommendations for information security management for use by those who are responsible for initiating, implementing or maintaining security in their organization.'' The document specifically identifies itself as "a starting point for developing organization specific guidance." It also states that not all of the guidance and controls it contains may be applicable, and that additional controls not contained may be required. Even more importantly, they are intended to be broad guidelines covering a number of areas. and not intended to give definitive details or "how-tos". It's worth noting that the original signing of ISO/IEC 17799:2000 was controversial; Belgium, Canada, France, Germany, Italy, Japan and the US voted<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>against</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>its adoption. However, it appears that these votes were primarily a protest on parliamentary procedure, not on the content of the document, and certainly people are welcome to use ISO 17799 if they find it helpful. More information about ISO 17799 can be found in NIST's<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://csrc.nist.gov/publications/secpubs/otherpubs/reviso-faq.pdf" target=_top>ISO/IEC 17799:2000 FAQ</A>. ISO 17799 is highly related to BS 7799 part 1 and 2; more information about BS 7799 can be found at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.xisec.com/faq.htm" target=_top>http://www.xisec.com/faq.htm</A>. ISO 17799 is currently under revision. It's important to note that none of these standards (ISO 13335, ISO 17799, or BS 7799 parts 1 and 2) are intended to be a detailed set of technical guidelines for software developers; they are all intended to provide broad guidelines in a number of areas. This is important, because software developers who simply only follow (for example) ISO 17799 will generally<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>produce secure software - developers need much, much, much more detail than ISO 17799 provides.</P>
<P>The Commonly Accepted Security Practices &amp; Recommendations (CASPR) project at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.caspr.org/" target=_top>http://www.caspr.org</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is trying to distill information security knowledge into a series of papers available to all (under the GNU FDL license, so that future document derivatives will continue to be available to all). Clearly, security management needs to include keeping with patches as vulnerabilities are found and fixed. Beattie [2002] provides an interesting analysis on how to determine when to apply patches contrasting risk of a bad patch to the risk of intrusion (e.g., under certain conditions, patches are optimally applied 10 or 30 days after they are released).</P>
<P>If you're interested in the current state of vulnerabilities, there are other resources available to use. The CVE at http://cve.mitre.org gives a standard identifier for each (widespread) vulnerability. The paper<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://securitytracker.com/learn/securitytracker-stats-2002.pdf" target=_top>SecurityTracker Statistics</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>analyzes vulnerabilities to determine what were the most common vulnerabilities. The Internet Storm Center at http://isc.incidents.org/ shows the prominence of various Internet attacks around the world.</P>
<P>This book assumes that the reader understands computer security issues in general, the general security model of Unix-like systems, networking (in particular TCP/IP based networks), and the C programming language. This book does include some information about the Linux and Unix programming model for security. If you need more information on how TCP/IP based networks and protocols work, including their security protocols, consult general works on TCP/IP such as [Murhammer 1998].</P>
<P>When I first began writing this document, there were many short articles but no books on writing secure programs. There are now two other books on writing secure programs. One is ``Building Secure Software'' by John Viega and Gary McGraw [Viega 2002]; this is a very good book that discusses a number of important security issues, but it omits a large number of important security problems that are instead covered here. Basically, this book selects several important topics and covers them well, but at the cost of omitting many other important topics. The Viega book has a little more information for Unix-like systems than for Windows systems, but much of it is independent of the kind of system. The other book is ``Writing Secure Code'' by Michael Howard and David LeBlanc [Howard 2002]. The title of this other book is misleading; the book is solely about writing secure programs for Windows, and is basically worthless if you are writing programs for any other system. This shouldn't be surprising; it's published by Microsoft press, and its copyright is owned by Microsoft. If you are trying to write secure programs for Microsoft's Windows systems, it's a good book. Another useful source of secure programming guidance is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.owasp.org/guide" target=_top>The Open Web Application Security Project (OWASP) Guide to Building Secure Web Applications and Web Services</A>; it has more on process, and less specifics than this book, but it has useful material in it.</P>
<P>This book covers all Unix-like systems, including Linux and the various strains of Unix, and it particularly stresses Linux and provides details about Linux specifically. There's some material specifically on Windows CE, and in fact much of this material is not limited to a particular operating system. If you know relevant information not already included here, please let me know.</P>
<P>This book is copyright (C) 1999-2002 David A. Wheeler and is covered by the GNU Free Documentation License (GFDL); see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/about-license.html">Appendix C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/fdl.html">Appendix D</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information.</P>
<P><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/background.html">Chapter 2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>discusses the background of Unix, Linux, and security.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/features.html">Chapter 3</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>describes the general Unix and Linux security model, giving an overview of the security attributes and operations of processes, filesystem objects, and so on. This is followed by the meat of this book, a set of design and implementation guidelines for developing applications on Linux and Unix systems. The book ends with conclusions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/conclusion.html">Chapter 12</A>, followed by a lengthy bibliography and appendixes.</P>
<P>The design and implementation guidelines are divided into categories which I believe emphasize the programmer's viewpoint. Programs accept inputs, process data, call out to other resources, and produce output, as shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/introduction.html#ABSTRACT-PROGRAM">Figure 1-1</A>; notionally all security guidelines fit into one of these categories. I've subdivided ``process data'' into structuring program internals and approach, avoiding buffer overflows (which in some cases can also be considered an input issue), language-specific information, and special topics. The chapters are ordered to make the material easier to follow. Thus, the book chapters giving guidelines discuss validating all input (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/input.html">Chapter 5</A>), avoiding buffer overflows (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/buffer-overflow.html">Chapter 6</A>), structuring program internals and approach (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/internals.html">Chapter 7</A>), carefully calling out to other resources (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/call-out.html">Chapter 8</A>), judiciously sending information back (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/output.html">Chapter 9</A>), language-specific information (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/language-specific.html">Chapter 10</A>), and finally information on special topics such as how to acquire random numbers (<A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/special.html">Chapter 11</A>).</P>
<DIV class=FIGURE><A name=ABSTRACT-PROGRAM></A>
<P><B>Figure 1-1. Abstract View of a Program</B></P>
<DIV class=MEDIAOBJECT>
<P><IMG alt="A program accepts inputs, processes data,&#10;possibly calls out to other programs, and produces output.&#10;          " src="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/program.png"></P></DIV></DIV></DIV>
<DIV class=NAVFOOTER style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR align=left width="100%">

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD vAlign=top align=left width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Prev</A></TD>
<TD vAlign=top align=middle width="34%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">Home</A></TD>
<TD vAlign=top align=right width="33%"><A href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/background.html">Next</A></TD></TR>
<TR>
<TD vAlign=top align=left width="33%">Secure Programming for Linux and Unix HOWTO</TD>
<TD vAlign=top align=middle width="34%">&nbsp;</TD>
<TD vAlign=top align=right width="33%">Background</TD></TR></TBODY></TABLE></DIV>