<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">4.2.3 get_direct_mem_ptr method </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) The <B>get_direct_mem_ptr </B>method shall only be called by an initiator or by an interconnect component, not by a target. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) The trans argument shall pass a reference to a DMI transaction object constructed by the initiator. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) The dmi_data argument shall be a reference to a DMI descriptor constructed by the initiator. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) Any interconnect component should pass the get_direct_mem_ptr call along the forward path from initiator to target. In other words, the implementation of get_direct_mem_ptr for the target socket of the interconnect component may call the <B>get_direct_mem_ptr </B>method of an initiator socket. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) Each <B>get_direct_mem_ptr </B>call shall follow exactly the same path from initiator to target as a corresponding set of transport calls. In other words, each DMI request shall involve an interaction between one initiator and one target, where those two components also serve the role of initiator and target for a single transaction object passed through the transport interface. DMI cannot be used on a path through a component that initiates a second transaction object, such as a non-trivial width converter. (If DMI is an absolute requirement for simulation speed, the simulation model may need to be restructured to permit it.) </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) Any interconnect components shall pass on the <B>trans </B>and <B>dmi_data </B>arguments in the forward direction, the only permitted modification being to the value of the address attribute of the DMI transaction object as described below. The address attribute of the transaction and the DMI descriptor may both be modified on return from the <B>get_direct_mem_ptr </B>method, that is, when unwinding the function calls from target back to initiator. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) If the target is able to support DMI access to the given address, it shall set the members of the DMI descriptor as described below and set the return value of the function to <B>true</B>. When a target grants DMI access, the DMI descriptor is used to indicate the details of the access being granted. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) If the target is not able to support DMI access to the given address, it need set only the address range and type members of the DMI descriptor as described below and set the return value of the function to <B>false</B>. When a target denies DMI access, the DMI descriptor is used to indicate the details of the access being denied. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) A target may grant or deny DMI access to any part or parts of its memory region, including non-contiguous regions, subject to the rules given in this clause. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) In the case that a target has granted DMI access and has set the return value of the function to <B>true</B>, an interconnect component may deny DMI access by setting the return value of the function to <B>false </B>on return from the <B>get_direct_mem_ptr </B>method. The reverse is not permitted; in the case that a target has denied DMI access, an interconnect component shall not grant DMI access. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) Given multiple calls to <B>get_direct_mem_ptr</B>, a target may grant DMI access to multiple initiators for the same memory region at the same time. The application is responsible for synchronization and coherency. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">l) Since each call to <B>get_direct_mem_ptr </B>can only return a single DMI pointer to a contiguous memory region, each DMI request can only be fulfilled by a single target in practice. In other words, if a memory region is scattered across multiple targets, then even though the address range is contiguous, each target will likely require a separate DMI request. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">m) If read or write access to a certain region of memory causes side effects in a target (that is, causes some other change to the state of the target over and above the state of the memory), the target should not grant DMI access of the given type to that memory region. But if, for example, only write access causes side effects in a target, the target may still grant DMI read access to a given region. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">n) The implementation of <B>get_direct_mem_ptr </B>may call <B>invalidate_direct_mem_ptr</B>. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">o) The implementation of <B>get_direct_mem_ptr </B>shall not call <B>wait</B>, directly or indirectly. </SPAN>