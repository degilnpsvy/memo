<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">6.2.1 Introduction </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">A socket combines a port with an export. An initiator socket has a port for the forward path and an export for the backward path, whilst a target socket has an export for the forward path and a port for the backward path. The sockets also overload the SystemC port binding operators to bind both the port and export to the export and port in the opposing socket. When binding sockets hierarchically, parent to child or child to parent, it is important to carefully consider the binding order. Both the initiator and target sockets are coded using a C++ inheritance hierarchy. Only the most derived classes <B>tlm_initiator_socket </B>and <B>tlm_target_socket </B>are typically used directly by applications. These two sockets are parameterized with a <I>protocol traits class </I>that defines the types used by the forward and backward interfaces. Sockets can only be bound together if they have the identical protocol type. The default protocol type is the class <B>tlm_base_protocol_types</B>. If an application defines a new protocol it should instantiate combined interface templates with a new protocol traits class, whether or not the new protocol is based on the generic payload. The initiator and target sockets provide the following benefits: </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) They group the transport, direct memory and debug transport interfaces for both the forward and backward paths together into a single object. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) They provide methods to bind port and export of both the forward and backward paths in a single call. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) They offer strong type checking when binding sockets parameterized with incompatible protocol types. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) They include a bus width parameter that may be used to interpret the transaction. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">The socket classes <B>tlm_initiator_socket </B>and <B>tlm_target_socket </B>belong to the interoperability layer of the TLM-2.0 standard. In addition, there is a family of derived socket classes provided in the utilities namespace, collectively known as <I>convenience sockets</I>. </SPAN>