<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">4.2.6 invalidate_direct_mem_ptr method </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) The <B>invalidate_direct_mem_ptr </B>method shall only be called by a target or an interconnect component. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) A target is obliged to call <B>invalidate_direct_mem_ptr </B>before any change that would modify the validity or the access type of any existing DMI region. For example, before restricting the address range of an existing DMI region, before changing the access type from read/write to read, or before re-mapping the address space. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) The <B>start_range </B>and <B>end_range </B>arguments shall be the first and last addresses of the address range for which DMI access is to be invalidated. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) An initiator receiving an incoming call to <B>invalidate_direct_mem_ptr </B>shall immediately invalidate and discard any DMI region (previously received from a call to <B>get_direct_mem_ptr</B>) that overlaps with the given address range. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) In the case of a partial overlap, that is, only part of an existing DMI region is invalidated, an initiator may adjust the boundaries of the existing region or may invalidate the entire region. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) Each DMI region shall remain valid until it is explicitly invalidated by a target using a call to <B>invalidate_direct_mem_ptr</B>. Each initiator may maintain a table of valid DMI regions, and continue to use each region until it is invalidated. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) Any interconnect components are obliged to pass on the <B>invalidate_direct_mem_ptr </B>call along the backward path from target to initiator, decoding and where necessary modifying the address arguments as they would for the corresponding transport interface. Because the transport interface transforms the address on the forward path and DMI on the backward path, the transport and DMI transformations should be the inverse of one another. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) Given a single <B>invalidate_direct_mem_ptr </B>call from a target, an interconnect component may make multiple <B>invalidate_direct_mem_ptr </B>calls to initiators. Since there may be multiple initiators each getting direct memory pointers to the same target, a safe implementation is for an interconnect component to call <B>invalidate_direct_mem_ptr </B>for every initiator. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) An interconnect component can invalidate all direct memory pointers in an initiator by setting <B>start_range </B>to 0 and <B>end_range </B>to the maximum value of the type <B>sc_dt::uint64</B>. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">j) The implementation of any TLM-2.0 core interface method may call <B>invalidate_direct_mem_ptr</B>. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">k) The implementation of <B>invalidate_direct_mem_ptr </B>shall not call <B>get_direct_mem_ptr</B>, directly or indirectly. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">l) The implementation of <B>invalidate_direct_mem_ptr </B>shall not call <B>wait</B>, directly or indirectly. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">&nbsp;</SPAN>