<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">4.2.7 DMI versus transport </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) By definition, the direct memory interface provides a direct interface between initiator and target that bypasses any interconnect components. The transport interfaces, on the other hand, cannot bypass interconnect components. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) Care must be taken to ensure correct behavior when an interconnect component retains state or has side effects, such as buffered interconnects or interconnects modeling cache memory. The transport interfaces may access and update the state of the interconnect component, whereas the direct memory interface will bypass the interconnect component. The safest alternative is for such interconnect components always to deny DMI access. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) It is possible for an initiator to switch back and forth between calling the transport interfaces and using a direct memory pointer. It is also possible that one initiator may use DMI while another initiator is using the transport interfaces. Care must be taken to ensure correct behavior, particularly considering that transport calls may carry a timing annotation. This is the responsibility of the application. For example, a given target could support DMI and transport simultaneously, or could invalidate every DMI pointer whenever transport is called. </SPAN>