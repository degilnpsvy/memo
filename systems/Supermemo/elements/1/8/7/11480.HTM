<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">4.1.2.4 The nb_transport_fw and nb_transport_bw calls </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) There are two non-blocking transport methods, <B>nb_transport_fw </B>for use on the forward path, and <B>nb_transport_bw </B>for use on the backward path. Aside from their names and calling direction these two methods have similar semantics. In this document, the italicized term <I>nb_transport </I>is used to describe both methods in situations where there is no need to distinguish between them. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) In the case of the base protocol, the forward and backward paths should pass through exactly the same sequence of components and sockets in opposing order. It is the responsibility of each component to route any transaction returning toward the initiator using the target socket through which that transaction was first received. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) <B>nb_transport_fw </B>shall only be called on the forward path, and <B>nb_transport_bw </B>shall only be called on the backward path. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) An <B>nb_transport_fw </B>call on the forward path shall under no circumstances directly or indirectly make a call to <B>nb_transport_bw </B>on the backward path, and vice versa. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) The <I>nb_transport </I>methods shall not call <B>wait</B>, directly or indirectly. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) The <I>nb_transport </I>methods may be called from a thread process or from a method process. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) <I>nb_transport </I>is not permitted to call <B>b_transport</B>. One solution would be to call <B>b_transport </B>from a separate thread process, spawned or notified by the original <B>nb_transport_fw </B>method. For the base protocol, a convenience socket <B>simple_target_socket </B>is provided, which is able to make this conversion automatically. See 9.1.2 Simple sockets. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) The non-blocking transport interface is explicitly intended to support pipelined transactions. In other words, several successive calls to <B>nb_transport_fw </B>from the same process could each initiate separate transactions without having to wait for the first transaction to complete. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) In principle, the final timing point of a transaction may be marked by a call to or a return from <I>nb_transport </I>either on the forward path or the backward path. </SPAN>