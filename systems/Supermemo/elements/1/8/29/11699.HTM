<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">8.1.1 Introduction </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">Class <B>tlm_phase </B>is the default phase type used by the non-blocking transport interface class templates and the base protocol. A <B>tlm_phase </B>object represents the phase with an <B>unsigned int </B>value. Class <B>tlm_phase </B>is assignment compatible with type <B>unsigned int </B>and with an enumeration having values corresponding to the four phases of the base protocol, namely BEGIN_REQ, END_REQ, BEGIN_RESP, and END_RESP. Because type <B>tlm_phase </B>is a class rather than an enumeration, it is able to support an overloaded stream operator to display the value of the phase as ASCII text. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">The set of four phases provided by <B>tlm_phase_enum </B>can be extended using the macro DECLARE_EXTENDED_PHASE. This macro creates a singleton class derived from <B>tlm_phase </B>with a method <B>get_phase </B>that returns the corresponding object. That object can be used as a new phase. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">For maximal interoperability, an application should only use the four phases of <B>tlm_phase_enum</B>. If further phases are required in order to model the details of a specific protocol, the intent is that DECLARE_EXTENDED_PHASE should be used, since this retains assignment compatibility with type <B>tlm_phase</B>. </SPAN></P><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: 'Times New Roman'; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: &#23435;&#20307;; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA">The principle of ignorable versus non-ignorable or mandatory extensions applies to phases in the same way as to generic payload extensions. In other words, ignorable phases are permitted by the base protocol. An ignorable phase has to be ignorable by the recipient in the sense that the recipient can simply act as if it had not received the phase transition, and consequently the sender has to be able to continue in the absence of any response from the recipient. If a phase is not ignorable in this sense, a new protocol traits class should be defined. See 7.2.2 Define a new protocol traits class containing a typedef for tlm_generic_payload.</SPAN>