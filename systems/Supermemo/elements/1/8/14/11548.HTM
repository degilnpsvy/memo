<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">7.17.1 Introduction </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">When using the generic payload to transfer data between initiator and target, both the endianness of the host machine (host endianness) and the endianness of the initiator and target being modeled (modeled endianness) are relevant. This clause defines rules to ensure interoperability between initiators and targets using the generic payload, so is specifically concerned with the organization of the generic payload data array and byte enable array. However, the rules given here may have an impact on some of the choices made in modeling endianness beyond the immediate scope of the generic payload. A general principle in the TLM-2.0 approach to endianness is that the organization of the generic payload data array depends only on information known locally within each initiator, interconnect component or target. In particular, it depends on the width of the local socket through which the transaction is sent or received, the endianness of the host computer, and the endianness of the component being modeled. The organization of the generic payload and the approach to endianness has been chosen to maximize simulation efficiency in certain common system scenarios, particularly mixed-endian systems. The rules given below dictate the organization of the generic payload, and this is independent of the organization of the system being modeled. For example, a &#8213;word</SPAN><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: &#23435;&#20307;">&#8214;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"> within the generic payload need not necessarily correspond in internal representation with any &#8213;word</SPAN><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: &#23435;&#20307;">&#8214;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"> within the modeled architecture. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">At a macroscopic level, the main principle is that the generic payload assumes components in a mixed-endian system to be wired up MSB to MSB (most-significant byte), and LSB to LSB (least-significant byte). In other words, if a word is transferred between components of differing endianness, the MSB ... LSB relationship is preserved, but the <I>local address </I>of each byte as seen within each component will necessarily change using the transformation generally called <I>address swizzling</I>. This is true within both the modeled system and the TLM-2.0 model. On the other hand, if a mixed-endian system is wired such that the local addresses are invariant within each component (that is, each byte has the same local address when seen from any component), then an explicit byte swap would need to be inserted in the TLM-2.0 model. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">In order to achieve interoperability with respect to the endianness of the generic payload arrays, it is only necessary to obey the rules given in this clause. A set of helper functions is provided to assist with the organization of the data array. See 7.19 Helper functions for endianness conversion </SPAN>