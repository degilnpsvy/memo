<P class=Default style="MARGIN: 0cm 0cm 0pt"><FONT face=Arial><B><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt">4.1.1.1 Introduction </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt"></SPAN></FONT></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 15pt; FONT-FAMILY: 'Times New Roman'; mso-bidi-font-size: 10.0pt">The TLM-2.0 blocking transport interface is intended to support the loosely-timed coding style. The blocking transport interface is appropriate where an initiator wishes to complete a transaction with a target during the course of a single function call, the only timing points of interest being those that mark the start and the end of the transaction. The blocking transport interface only uses the forward path from initiator to target. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt">The TLM-2.0 blocking transport interface has deliberate similarities with the transport interface from TLM-1, which is still part of the TLM-2.0 standard, but the TLM-1 transport interface and the TLM-2.0 blocking transport interface are not identical. In particular, the new <B>b_transport </B>method has a single transaction argument passed by non-const reference and a second argument to annotate timing, whereas the TLM-1 <B>transport </B>method takes a request as a single const reference request argument, has no timing annotation, and returns a response by value. TLM-1 assumes separate request and response objects passed by value (or const reference), whereas TLM-2.0 assumes a single transaction object passed by reference, whether using the blocking or the non-blocking TLM-2.0 interfaces. The <B>b_transport </B>method has a timing annotation argument. This single argument is used on both the call to and the return from <B>b_transport </B>to indicate the time of the start and end of the transaction, respectively, relative to the current simulation time.</SPAN>