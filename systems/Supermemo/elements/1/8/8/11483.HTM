<B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">4.1.2.7 The tlm_sync_enum return value </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; FONT-FAMILY: Arial; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">a) The concept of sychronization is referred to in several places. To <I>synchronize </I>is to yield control to the SystemC scheduler in order that other processes may run, but has additional connotations for temporal decoupling. This is discussed more fully elsewhere. See 9.2.4 General guidelines for processes using temporal decoupling. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">b) In principle, synchronization can be accomplished by yielding (calling <B>wait </B>in the case of a thread process or returning to the kernel in the case of a method process), but a temporally decoupled initiator should synchronize by calling the <B>sync </B>method of class <B>tlm_quantum_keeper</B>. In general, it is necessary for an initiator to synchronize from time-to-time in order to allow other SystemC processes to run. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">c) The following rules apply to both the forward and backward paths. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">d) The meaning of the return value from <I>nb_transport </I>is fixed, and does not vary according to the transaction type or phase type. Hence the following rules are not restricted to the base protocol but apply to every transaction and phase type used to parameterize the non-blocking transport interface. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">e) <B>TLM_ACCEPTED</B>. The callee shall not have modified the state of the transaction object, the phase, or the time argument during the call. In other words, TLM_ACCEPTED indicates that the return path is not being used. The caller may ignore the values of the <I>nb_transport </I>arguments following the call, since the callee is obliged to leave them unchanged. In general, the caller will have to yield before the component containing the callee can respond to the transaction. For the base protocol, a callee that is ignoring an ignorable phase should return TLM_ACCEPTED. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">f) <B>TLM_UPDATED</B>. The callee has updated the transaction object. The callee may have modified the state of the phase argument, may have modified the state of the transaction object, and may have increased the value of the time argument during the call. In other words, TLM_UPDATED indicates that the return path is being used, and the callee has advanced the state of the protocol state machine associated with the transaction. Whether or not the callee is actually obliged to modify each of the arguments depends on the protocol. Following the call to <I>nb_transport</I>, the caller should inspect the phase, transaction and time arguments and take the appropriate action. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">g) <B>TLM_COMPLETED</B>. The callee has updated the transaction object, and the transaction is complete. The callee may have modified the state of the transaction object, and may have increased the value of the time argument during the call. The value of the phase argument is undefined. In other words, TLM_COMPLETED indicates that the return path is being used and the transaction is complete with respect to a particular socket. Following the call to <I>nb_transport</I>, the caller should inspect the transaction object and take the appropriate action, but should ignore the phase argument. There shall be no further transport calls associated with this particular transaction through the current socket along either the forward or backward paths. Completion in this sense does not necessarily imply successful completion, so depending on the transaction type, the caller may need to inspect a response status embedded in the transaction object. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">h) In general there is no obligation to complete a transaction by having nb_transport return TLM_COMPLETED. A transaction is in any case complete with respect to a particular socket when the final phase of the protocol is passed as an argument to nb_transport. (For the base protocol, the final phase is END_RESP.) In other words, TLM_COMPLETED is not mandatory. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 15pt; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">i) For any of the three return values, and depending on the protocol, following the call to nb_transport the caller may need to yield in order to allow the component containing the callee to generate a response or to release the transaction object. </SPAN>