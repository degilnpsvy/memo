<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.4 Initializing Guile</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Initializing-Guile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each thread that wants to use functions from the Guile API needs to put itself into guile mode with either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE>. The global state of Guile is initialized automatically when the first thread enters guile mode.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a thread wants to block outside of a Guile API function, it should leave guile mode temporarily with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_without_guile</CODE>, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Blocking">Blocking</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Threads that are created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-new-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_spawn_thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>start out in guile mode so you don&#8217;t need to initialize them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fwith_005fguile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_guile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *(*func)(void *), void *data)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return what<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns. While<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is running, the current thread is in guile mode and can thus use the Guile API.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from guile mode, the thread remains in guile mode when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns.</P>
<P>Otherwise, it puts the current thread into guile mode and, if needed, gives it a Scheme representation that is contained in the list returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>all-threads</CODE>, for example. This Scheme representation is not removed when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE>returns so that a given thread is always represented by the same Scheme value during its lifetime, if at all.</P>
<P>When this is the first thread that enters guile mode, the global state of Guile is initialized before calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>func</CODE>.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_continuation_barrier</CODE>; thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns exactly once.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, the thread is no longer in guile mode (except when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was called from guile mode, see above). Thus, only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can store<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables on the stack and be sure that they are protected from the garbage collector. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for another approach at initializing Guile that does not have this restriction.</P>
<P>It is OK to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>while a thread has temporarily left guile mode via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_without_guile</CODE>. It will then simply temporarily enter guile mode again.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005finit_005fguile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_init_guile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Arrange things so that all of the code in the current thread executes as if from within a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE>. That is, all functions called by the current thread can assume that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values on their stack frames are protected from the garbage collector (except when the thread has explicitly left guile mode, of course).</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from a thread that already has been in guile mode once, nothing happens. This behavior matters when you call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>while the thread has only temporarily left guile mode: in that case the thread will not be in guile mode after<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns. Thus, you should not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in such a scenario.</P>
<P>When a uncaught throw happens in a thread that has been put into guile mode via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE>, a short message is printed to the current error port and the thread is exited via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_pthread_exit (NULL)</CODE>. No restrictions are placed on continuations.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_init_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might not be available on all platforms since it requires some stack-bounds-finding magic that might not have been ported to all platforms that Guile runs on. Thus, if you can, it is better to use<CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or its variation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of this function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fboot_005fguile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_boot_guile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR>, char **<VAR>argv</VAR>, void (*<VAR>main_func</VAR>) (void *<VAR>data</VAR>, int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR>, char **<VAR>argv</VAR>), void *<VAR>data</VAR>)</EM></DT>
<DD>
<P>Enter guile mode as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>main_func</VAR>, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as indicated. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>main_func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit (0)</CODE>;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>never returns. If you want some other exit value, have<VAR>main_func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself. If you don&#8217;t want to exit at all, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE>.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arranges for the Scheme<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function to return the strings given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>main_func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR>, it should call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_program_arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the final list, so Scheme code will know which arguments have been processed (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment">Runtime Environment</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fshell></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_shell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR>, char **<VAR>argv</VAR>)</EM></DT>
<DD>
<P>Process command-line arguments in the manner of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>executable. This includes loading the normal Guile initialization files, interacting with the user or running any scripts or expressions specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, and then exiting. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile">Invoking Guile</A>, for more details.</P>
<P>Since this function does not return, you must do all application-specific initialization before calling this function.</P></DD></DL>