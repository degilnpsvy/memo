<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.5 Snarfing Macros</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guile_002dsnarf-recognized-macros></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guile_002dsnarf-deprecated-macros></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following macros do two different things: when compiled normally, they expand in one way; when processed during snarfing, they cause the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile-snarf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program to pick up some initialization code, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Function-Snarfing">Function Snarfing</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The descriptions below use the term &#8216;normally&#8217; to refer to the case when the code is compiled normally, and &#8216;while snarfing&#8217; when the code is processed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile-snarf</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSNARF_005fINIT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SNARF_INIT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(code)</EM></DT>
<DD>
<P>Normally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SNARF_INIT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expands to nothing; while snarfing, it causes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>code</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be included in the initialization action file, followed by a semicolon.</P>
<P>This is the fundamental macro for snarfing initialization actions. The more specialized macros below use it internally.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fDEFINE></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_DEFINE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name, req, opt, var, arglist, docstring)</EM></DT>
<DD>
<P>Normally, this macro expands into</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>static const char s_<VAR>c_name</VAR>[] = <VAR>scheme_name</VAR>;
SCM
<VAR>c_name</VAR> <VAR>arglist</VAR>
</PRE></DIV>
<P>While snarfing, it causes</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>scm_c_define_gsubr (s_<VAR>c_name</VAR>, <VAR>req</VAR>, <VAR>opt</VAR>, <VAR>var</VAR>,
                    <VAR>c_name</VAR>);
</PRE></DIV>
<P>to be added to the initialization actions. Thus, you can use it to declare a C function named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will be made available to Scheme with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme_name</VAR>.</P>
<P>Note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument must have parentheses around it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSYMBOL></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SYMBOL</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DT><A name=index-SCM_005fGLOBAL_005fSYMBOL></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_GLOBAL_SYMBOL</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DD>
<P>Normally, these macros expand into</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>static SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>or</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>respectively. While snarfing, they both expand into the initialization code</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample><VAR>c_name</VAR> = scm_permanent_object (scm_from_locale_symbol (<VAR>scheme_name</VAR>));
</PRE></DIV>
<P>Thus, you can use them declare a static or global variable of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will be initialized to the symbol named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme_name</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fKEYWORD></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_KEYWORD</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DT><A name=index-SCM_005fGLOBAL_005fKEYWORD></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_GLOBAL_KEYWORD</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DD>
<P>Normally, these macros expand into</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>static SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>or</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>respectively. While snarfing, they both expand into the initialization code</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample><VAR>c_name</VAR> = scm_permanent_object (scm_c_make_keyword (<VAR>scheme_name</VAR>));
</PRE></DIV>
<P>Thus, you can use them declare a static or global variable of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will be initialized to the keyword named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme_name</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fVARIABLE></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_VARIABLE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DT><A name=index-SCM_005fGLOBAL_005fVARIABLE></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_GLOBAL_VARIABLE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name)</EM></DT>
<DD>
<P>These macros are equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_VARIABLE_INIT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_GLOBAL_VARIABLE_INIT</CODE>, respectively, with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fVARIABLE_005fINIT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_VARIABLE_INIT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name, value)</EM></DT>
<DT><A name=index-SCM_005fGLOBAL_005fVARIABLE_005fINIT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_GLOBAL_VARIABLE_INIT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c_name, scheme_name, value)</EM></DT>
<DD>
<P>Normally, these macros expand into</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>static SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>or</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>SCM <VAR>c_name</VAR>
</PRE></DIV>
<P>respectively. While snarfing, they both expand into the initialization code</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample><VAR>c_name</VAR> = scm_permanent_object (scm_c_define (<VAR>scheme_name</VAR>, <VAR>value</VAR>));
</PRE></DIV>
<P>Thus, you can use them declare a static or global C variable of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that will be initialized to the object representing the Scheme variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current module. The variable will be defined when it doesn&#8217;t already exist. It is always set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>