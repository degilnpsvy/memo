<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.3 The SCM Type</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile represents all Scheme values with the single C type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>. For an introduction to this topic, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Types">Dynamic Types</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM</STRONG></DT>
<DD>
<P><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the user level abstract C type that is used to represent all of Guile&#8217;s Scheme objects, no matter what the Scheme object type is. No C operation except assignment is guaranteed to work with variables of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>, so you should only use macros and functions to work with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values. Values are converted between C data types and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type with utility functions and macros.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SCM-data-type></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fbits></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_bits</STRONG></DT>
<DD>
<P><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an unsigned integral data type that is guaranteed to be large enough to hold all information that is required to represent any Scheme object. While this data type is mostly used to implement Guile&#8217;s internals, the use of this type is also necessary to write certain kinds of extensions to Guile.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fsigned_005fbits></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_signed_bits</STRONG></DT>
<DD>
<P>This is a signed integral type of the same size as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fUNPACK></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_UNPACK</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Transforms the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into its representation as an integral type. Only after applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it is possible to access the bits and contents of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fPACK></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_PACK</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Takes a valid integral representation of a Scheme object and transforms it into its representation as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P></DD></DL>