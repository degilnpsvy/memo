<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.1 Overview of the Guile API</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s application programming interface (<EM>API</EM>) makes functionality available that an application developer can use in either C or Scheme programming. The interface consists of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elements</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that may be macros, functions or variables in C, and procedures, variables, syntax or other types of object in Scheme.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many elements are available to both Scheme and C, in a form that is appropriate. For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>Scheme procedure is also available as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to C code. These elements are documented only once, addressing both the Scheme and C aspects of them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Scheme name of an element is related to its C name in a regular way. Also, a C function takes its parameters in a systematic way.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Normally, the name of a C function can be derived given its Scheme name, using some simple textual transformations:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(hyphen) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(underscore).</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(question mark) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_p</CODE>.</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclamation point) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_x</CODE>.</LI>
<LI>Replace internal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_to_</CODE>.</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(less than or equal) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_leq</CODE>.</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(greater than or equal) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_geq</CODE>.</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(less than) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_less</CODE>.</LI>
<LI>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(greater than) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gr</CODE>.</LI>
<LI>Prefix with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_</CODE>.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A C function always takes a fixed number of arguments of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>, even when the corresponding Scheme function takes a variable number.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For some Scheme functions, some last arguments are optional; the corresponding C function must always be invoked with all optional arguments specified. To get the effect as if an argument has not been specified, pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its value. You can not do this for an argument in the middle; when one argument is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>all the ones following it must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some Scheme functions take an arbitrary number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rest</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments; the corresponding C function must be invoked with a list of all these arguments. This list is always the last argument of the C function.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These two variants can also be combined.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The type of the return value of a C function that corresponds to a Scheme function is always<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>. In the descriptions below, types are therefore often omitted but for the return value and for the arguments.