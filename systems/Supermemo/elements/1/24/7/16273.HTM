<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=chapter>4 Programming in Scheme</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s core language is Scheme, and a lot can be achieved simply by using Guile to write and run Scheme programs &#8212; as opposed to having to dive into C code. In this part of the manual, we explain how to use Guile in this mode, and describe the tools that Guile provides to help you with script writing, debugging, and packaging your programs for distribution.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For detailed reference information on the variables, functions, and so on that make up Guile&#8217;s application programming interface (API), see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#API-Reference">API Reference</A>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scheme">Guile Scheme</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile&#8217;s implementation of Scheme.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile">Invoking Guile</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Selecting optional features when starting Guile.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting">Guile Scripting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to write Guile scripts.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively">Using Guile Interactively</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile&#8217;s REPL features.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-in-Emacs">Using Guile in Emacs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile and Emacs.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Tools">Using Guile Tools</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A guild of scheming wizards.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Installing-Site-Packages">Installing Site Packages</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Installing Scheme code.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guile-Scheme></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile" rel=next>Invoking Guile</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guile_0027s-Implementation-of-Scheme></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.1 Guile&#8217;s Implementation of Scheme</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s core language is Scheme, which is specified and described in the series of reports known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>RnRS</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>RnRS</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is shorthand for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Revised^n Report on the Algorithmic Language Scheme</EM>. Guile complies fully with R5RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Top">Introduction</A>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>R5RS</CITE>), and implements some aspects of R6RS.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also has many extensions that go beyond these reports. Some of the areas where Guile extends R5RS are:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Guile&#8217;s interactive documentation system</LI>
<LI>Guile&#8217;s support for POSIX-compliant network programming</LI>
<LI>GOOPS &#8211; Guile&#8217;s framework for object oriented programming.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Invoking-Guile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=next>Guile Scripting</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scheme" rel=prev>Guile Scheme</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Invoking-Guile-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.2 Invoking Guile</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-invocation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many features of Guile depend on and can be changed by information that the user provides either before or when Guile is started. Below is a description of what information to provide and how to provide it.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Command_002dline-Options">Command-line Options</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Command-line options understood by Guile.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Environment-Variables">Environment Variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Variables that affect Guile&#8217;s behavior.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Command_002dline-Options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Environment-Variables" rel=next>Environment Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile" rel=up>Invoking Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Command_002dline-Options-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.2.1 Command-line Options</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Command_002dline-Options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-command_002dline-arguments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-arguments-_0028command-line_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-options-_0028command-line_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-switches-_0028command-line_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-startup-_0028command_002dline-arguments_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-invocation-_0028command_002dline-arguments_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here we describe Guile&#8217;s command-line processing in detail. Guile processes its arguments from left to right, recognizing the switches described below. For examples, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scripting-Examples">Scripting Examples</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE><VAR>script</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR></CODE></DT>
<DT><CODE>-s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR></CODE></DT>
<DD><A name=index-script-mode></A>
<P>By default, Guile will read a file named on the command line as a script. Any command-line arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>following<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>become the script&#8217;s arguments; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function returns a list of strings of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>script</VAR><VAR>arg...</VAR>)</CODE>.</P>
<P>It is possible to name a file using a leading hyphen, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-myfile.scm</SAMP>. In this case, the file name must be preceded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to tell Guile that a (script) file is being named.</P>
<P>Scripts are read and evaluated as Scheme source code just as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function would. After loading<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR>, Guile exits.</P></DD>
<DT><CODE>-c<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR></CODE></DT>
<DD><A name=index-evaluate-expression_002c-command_002dline-argument></A>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as Scheme code, and then exit. Any command-line arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>following<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>become command-line arguments; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function returns a list of strings of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>guile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the path of the Guile executable.</P></DD>
<DT><CODE>--<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR></CODE></DT>
<DD>
<P>Run interactively, prompting the user for expressions and evaluating them. Any command-line arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>become command-line arguments for the interactive session; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function returns a list of strings of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>guile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg...</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the path of the Guile executable.</P></DD>
<DT><CODE>-L<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR></CODE></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the front of Guile&#8217;s module load path. The given directories are searched in the order given on the command line and before any directories in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_LOAD_PATH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable. Paths added here are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in effect during execution of the user&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file.</P></DD>
<DT><CODE>-C<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR></CODE></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-L</SAMP>, but adjusts the load path for<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compiled</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>files.</P></DD>
<DT><CODE>-x<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>extension</VAR></CODE></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>extension</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the front of Guile&#8217;s load extension list (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths"><CODE>%load-extensions</CODE></A>). The specified extensions are tried in the order given on the command line, and before the default load extensions. Extensions added here are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in effect during execution of the user&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file.</P></DD>
<DT><CODE>-l<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR></CODE></DT>
<DD>
<P>Load Scheme source code from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>, and continue processing the command line.</P></DD>
<DT><CODE>-e<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR></CODE></DT>
<DD>
<P>Make<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>entry point</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the script. After loading the script file (with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP>) or evaluating the expression (with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-c</SAMP>), apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a list containing the program name and the command-line arguments&#8212;the list provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-e</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch can appear anywhere in the argument list, but Guile always invokes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>last</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>action it performs. This is weird, but because of the way script invocation works under POSIX, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option must always come last in the list.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is most often a simple symbol that names a function that is defined in the script. It can also be of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(@<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>)</CODE>, and in that case, the symbol is looked up in the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR>.</P>
<P>For compatibility with some versions of Guile 1.4, you can also use the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(symbol ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(that is, a list of only symbols that doesn&#8217;t start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE>), which is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(@ (symbol ...) main)</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(symbol ...) symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(that is, a list of only symbols followed by a symbol), which is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(@ (symbol ...) symbol)</CODE>. We recommend to use the equivalent forms directly since they correspond to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(@ ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read syntax that can be used in normal code. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules">Using Guile Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scripting-Examples">Scripting Examples</A>.</P></DD>
<DT><CODE>-ds</CODE></DT>
<DD>
<P>Treat a final<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option as if it occurred at this point in the command line; load the script here.</P>
<P>This switch is necessary because, although the POSIX script invocation mechanism effectively requires the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to appear last, the programmer may well want to run the script before other actions requested on the command line. For examples, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scripting-Examples">Scripting Examples</A>.</P></DD>
<DT><CODE>\</CODE></DT>
<DD>
<P>Read more command-line arguments, starting from the second line of the script file. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch">The Meta Switch</A>.</P></DD>
<DT><CODE>--use-srfi=<VAR>list</VAR></CODE></DT>
<DD><A name=index-loading-srfi-modules-_0028command-line_0029></A>
<P>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--use-srfi</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>expects a comma-separated list of numbers, each representing a SRFI module to be loaded into the interpreter before evaluating a script file or starting the REPL. Additionally, the feature identifier for the loaded SRFIs is recognized by the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond-expand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when this option is used.</P>
<P>Here is an example that loads the modules SRFI-8 (&#8217;receive&#8217;) and SRFI-13 (&#8217;string library&#8217;) before the GUILE interpreter is started:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>guile --use-srfi=8,13
</PRE></DIV></DD>
<DT><CODE>--debug</CODE></DT>
<DD><A name=index-debugging-virtual-machine-_0028command-line_0029></A>
<P>Start with the debugging virtual machine (VM) engine. Using the debugging VM will enable support for VM hooks, which are needed for tracing, breakpoints, and accurate call counts when profiling. The debugging VM is slower than the regular VM, though, by about ten percent. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#VM-Hooks">VM Hooks</A>, for more information.</P>
<P>By default, the debugging VM engine is only used when entering an interactive session. When executing a script with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-c</SAMP>, the normal, faster VM is used by default.</P></DD>
<DT><CODE>--no-debug</CODE></DT>
<DD><A name=index-debugging-virtual-machine-_0028command-line_0029-1></A>
<P>Do not use the debugging VM engine, even when entering an interactive session.</P>
<P>Note that, despite the name, Guile running with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--no-debug</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>does</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>support the usual debugging facilities, such as printing a detailed backtrace upon error. The only difference with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--debug</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lack of support for VM hooks and the facilities that build upon it (see above).</P></DD>
<DT><CODE>-q</CODE></DT>
<DD><A name=index-init-file_002c-not-loading></A><A name=index-_002eguile-file_002c-not-loading></A>
<P>Do not load the initialization file,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP>. This option only has an effect when running interactively; running scripts does not load the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Init-File">Init File</A>.</P></DD>
<DT><CODE>--listen[=<VAR>p</VAR>]</CODE></DT>
<DD>
<P>While this program runs, listen on a local port or a path for REPL clients. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts with a number, it is assumed to be a local port on which to listen. If it starts with a forward slash, it is assumed to be a path to a UNIX domain socket on which to listen.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given, the default is local port 37146. If you look at it upside down, it almost spells &#8220;Guile&#8221;. If you have netcat installed, you should be able to<SPAN class=Apple-converted-space>&nbsp;</SPAN><KBD style="FONT-STYLE: oblique">nc localhost 37146</KBD><SPAN class=Apple-converted-space>&nbsp;</SPAN>and get a Guile prompt. Alternately you can fire up Emacs and connect to the process; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-in-Emacs">Using Guile in Emacs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details.</P>
<P>Note that opening a port allows anyone who can connect to that port&#8212;in the TCP case, any local user&#8212;to do anything Guile can do, as the user that the Guile process is running as. Do not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--listen</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on multi-user machines. Of course, if you do not pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--listen</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to Guile, no port will be opened.</P>
<P>That said,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--listen</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is great for interactive debugging and development.</P></DD>
<DT><CODE>--auto-compile</CODE></DT>
<DD>
<P>Compile source files automatically (default behavior).</P></DD>
<DT><CODE>--fresh-auto-compile</CODE></DT>
<DD>
<P>Treat the auto-compilation cache as invalid, forcing recompilation.</P></DD>
<DT><CODE>--no-auto-compile</CODE></DT>
<DD>
<P>Disable automatic source file compilation.</P></DD>
<DT><CODE>--language=<VAR>lang</VAR></CODE></DT>
<DD>
<P>For the remainder of the command line arguments, assume that files mentioned with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and expressions passed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are written in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the name of one of the languages supported by the compiler (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compiler-Tower">Compiler Tower</A>). When run interactively, set the REPL&#8217;s language to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively">Using Guile Interactively</A>).</P>
<P>The default language is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme</CODE>; other interesting values include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>elisp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for Emacs Lisp), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ecmascript</CODE>.</P>
<P>The example below shows the evaluation of expressions in Scheme, Emacs Lisp, and ECMAScript:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>guile -c "(apply + '(1 2))"
guile --language=elisp -c "(= (funcall (symbol-function '+) 1 2) 3)"
guile --language=ecmascript -c '(function (x) { return x * x; })(2);'
</PRE></DIV>
<P>To load a file written in Scheme and one written in Emacs Lisp, and then start a Scheme REPL, type:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>guile -l foo.scm --language=elisp -l foo.el --language=scheme
</PRE></DIV></DD>
<DT><CODE>-h<SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>--help</CODE></DT>
<DD>
<P>Display help on invoking Guile, and then exit.</P></DD>
<DT><CODE>-v<SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>--version</CODE></DT>
<DD>
<P>Display the current version of Guile, and then exit.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Environment-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Command_002dline-Options" rel=prev>Command-line Options</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile" rel=up>Invoking Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Environment-Variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.2.2 Environment Variables</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-environment-variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-shell></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-initialization></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>environment</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a feature of the operating system; it consists of a collection of variables with names and values. Each variable is called an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>environment variable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or, sometimes, a &#8220;shell variable&#8221;); environment variable names are case-sensitive, and it is conventional to use upper-case letters only. The values are all text strings, even those that are written as numerals. (Note that here we are referring to names and values that are defined in the operating system shell from which Guile is invoked. This is not the same as a Scheme environment that is defined within a running instance of Guile. For a description of Scheme environments, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#About-Environments">About Environments</A>.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">How to set environment variables before starting Guile depends on the operating system and, especially, the shell that you are using. For example, here is how to tell Guile to provide detailed warning messages about deprecated features by setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_WARN_DEPRECATED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>using Bash:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ export GUILE_WARN_DEPRECATED="detailed"
$ guile
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Or, detailed warnings can be turned on for a single invocation using:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ env GUILE_WARN_DEPRECATED="detailed" guile
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you wish to retrieve or change the value of the shell environment variables that affect the run-time behavior of Guile from within a running instance of Guile, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment">Runtime Environment</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here are the environment variables that affect the run-time behavior of Guile:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>GUILE_AUTO_COMPILE</CODE></DT>
<DD><A name=index-GUILE_005fAUTO_005fCOMPILE></A>
<P>This is a flag that can be used to tell Guile whether or not to compile Scheme source files automatically. Starting with Guile 2.0, Scheme source files will be compiled automatically, by default.</P>
<P>If a compiled (<SAMP>.go</SAMP>) file corresponding to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is not found or is not newer than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file will be compiled on the fly, and the resulting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file stored away. An advisory note will be printed on the console.</P>
<P>Compiled files will be stored in the directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>$XDG_CACHE_HOME/guile/ccache</SAMP>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XDG_CACHE_HOME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>$HOME/.cache</SAMP>. This directory will be created if it does not already exist.</P>
<P>Note that this mechanism depends on the timestamp of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file being newer than that of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file; if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files are moved after installation, care should be taken to preserve their original timestamps.</P>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_AUTO_COMPILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to zero (0), to prevent Scheme files from being compiled automatically. Set this variable to &#8220;fresh&#8221; to tell Guile to compile Scheme files whether they are newer than the compiled files or not.</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>.</P></DD>
<DT><CODE>GUILE_HISTORY</CODE></DT>
<DD><A name=index-GUILE_005fHISTORY-1></A>
<P>This variable names the file that holds the Guile REPL command history. You can specify a different history file by setting this environment variable. By default, the history file is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>$HOME/.guile_history</SAMP>.</P></DD>
<DT><CODE>GUILE_INSTALL_LOCALE</CODE></DT>
<DD><A name=index-GUILE_005fINSTALL_005fLOCALE></A>
<P>This is a flag that can be used to tell Guile whether or not to install the current locale at startup, via a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(setlocale LC_ALL "")</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>, for more information on locales.</P>
<P>You may explicitly indicate that you do not want to install the locale by setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_INSTALL_LOCALE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, or explicitly enable it by setting the variable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>.</P>
<P>Usually, installing the current locale is the right thing to do. It allows Guile to correctly parse and print strings with non-ASCII characters. However, for compatibility with previous Guile 2.0 releases, this option is off by default. The next stable release series of Guile (the 2.2 series) will install locales by default.</P></DD>
<DT><CODE>GUILE_STACK_SIZE</CODE></DT>
<DD><A name=index-GUILE_005fSTACK_005fSIZE></A>
<P>Guile currently has a limited stack size for Scheme computations. Attempting to call too many nested functions will signal an error. This is good to detect infinite recursion, but sometimes the limit is reached for normal computations. This environment variable, if set to a positive integer, specifies the number of Scheme value slots to allocate for the stack.</P>
<P>In the future we will implement stacks that can grow and shrink, but for now this hack will have to do.</P></DD>
<DT><CODE>GUILE_LOAD_COMPILED_PATH</CODE></DT>
<DD><A name=index-GUILE_005fLOAD_005fCOMPILED_005fPATH></A>
<P>This variable may be used to augment the path that is searched for compiled Scheme files (<SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files) when loading. Its value should be a colon-separated list of directories. If it contains the special path component<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ellipsis), then the default path is put in place of the ellipsis, otherwise the default path is placed at the end. The result is stored in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>).</P>
<P>Here is an example using the Bash shell that adds the current directory,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.</SAMP>, and the relative directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>../my-library</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE>:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>$ export GUILE_LOAD_COMPILED_PATH=".:../my-library"
$ guile -c '(display %load-compiled-path) (newline)'
(. ../my-library /usr/local/lib/guile/2.0/ccache)
</PRE></DIV></DD>
<DT><CODE>GUILE_LOAD_PATH</CODE></DT>
<DD><A name=index-GUILE_005fLOAD_005fPATH></A>
<P>This variable may be used to augment the path that is searched for Scheme files when loading. Its value should be a colon-separated list of directories. If it contains the special path component<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ellipsis), then the default path is put in place of the ellipsis, otherwise the default path is placed at the end. The result is stored in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>).</P>
<P>Here is an example using the Bash shell that prepends the current directory to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>, and adds the relative directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>../srfi</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the end:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>$ env GUILE_LOAD_PATH=".:...:../srfi" \
guile -c '(display %load-path) (newline)'
(. /usr/local/share/guile/2.0 \
/usr/local/share/guile/site/2.0 \
/usr/local/share/guile/site \
/usr/local/share/guile \
../srfi)
</PRE></DIV>
<P>(Note: The line breaks, above, are for documentation purposes only, and not required in the actual example.)</P></DD>
<DT><CODE>GUILE_WARN_DEPRECATED</CODE></DT>
<DD><A name=index-GUILE_005fWARN_005fDEPRECATED></A>
<P>As Guile evolves, some features will be eliminated or replaced by newer features. To help users migrate their code as this evolution occurs, Guile will issue warning messages about code that uses features that have been marked for eventual elimination.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_WARN_DEPRECATED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be set to &#8220;no&#8221; to tell Guile not to display these warning messages, or set to &#8220;detailed&#8221; to tell Guile to display more lengthy messages describing the warning. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Deprecation">Deprecation</A>.</P></DD>
<DT><CODE>HOME</CODE></DT>
<DD><A name=index-HOME></A>
<P>Guile uses the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HOME</CODE>, the name of your home directory, to locate various files, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile_history</SAMP>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guile-Scripting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=next>Using Guile Interactively</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile" rel=prev>Invoking Guile</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guile-Scripting-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.3 Guile Scripting</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Like AWK, Perl, or any shell, Guile can interpret script files. A Guile script is simply a file of Scheme code with some extra information at the beginning which tells the operating system how to invoke Guile, and then tells Guile how to handle the Scheme code.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#The-Top-of-a-Script-File">The Top of a Script File</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to start a Guile script.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch">The Meta Switch</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Passing complex argument lists to Guile from shell scripts.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Handling">Command Line Handling</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing the command line from a script.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Scripting-Examples">Scripting Examples</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Top-of-a-Script-File></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch" rel=next>The Meta Switch</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=up>Guile Scripting</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Top-of-a-Script-File-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.3.1 The Top of a Script File</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first line of a Guile script must tell the operating system to use Guile to evaluate the script, and then tell Guile how to go about doing that. Here is the simplest case:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The first two characters of the file must be &#8216;<SAMP>#!</SAMP>&#8217;.
<P>The operating system interprets this to mean that the rest of the line is the name of an executable that can interpret the script. Guile, however, interprets these characters as the beginning of a multi-line comment, terminated by the characters &#8216;<SAMP>!#</SAMP>&#8217; on a line by themselves. (This is an extension to the syntax described in R5RS, added to support shell scripts.)</P></LI>
<LI>Immediately after those two characters must come the full pathname to the Guile interpreter. On most systems, this would be &#8216;<SAMP>/usr/local/bin/guile</SAMP>&#8217;.</LI>
<LI>Then must come a space, followed by a command-line argument to pass to Guile; this should be &#8216;<SAMP>-s</SAMP>&#8217;. This switch tells Guile to run a script, instead of soliciting the user for input from the terminal. There are more elaborate things one can do here; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch">The Meta Switch</A>.</LI>
<LI>Follow this with a newline.</LI>
<LI>The second line of the script should contain only the characters &#8216;<SAMP>!#</SAMP>&#8217; &#8212; just like the top of the file, but reversed. The operating system never reads this far, but Guile treats this as the end of the comment begun on the first line by the &#8216;<SAMP>#!</SAMP>&#8217; characters.</LI>
<LI>If this source code file is not ASCII or ISO-8859-1 encoded, a coding declaration such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coding: utf-8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should appear in a comment somewhere in the first five lines of the file: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files">Character Encoding of Source Files</A>.</LI>
<LI>The rest of the file should be a Scheme program.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile reads the program, evaluating expressions in the order that they appear. Upon reaching the end of the file, Guile exits.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Meta-Switch></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Handling" rel=next>Command Line Handling</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#The-Top-of-a-Script-File" rel=prev>The Top of a Script File</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=up>Guile Scripting</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Meta-Switch-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.3.2 The Meta Switch</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s command-line switches allow the programmer to describe reasonably complicated actions in scripts. Unfortunately, the POSIX script invocation mechanism only allows one argument to appear on the &#8216;<SAMP>#!</SAMP>&#8217; line after the path to the Guile executable, and imposes arbitrary limits on that argument&#8217;s length. Suppose you wrote a script starting like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile -e main -s
!#
(define (main args)
  (map (lambda (arg) (display arg) (display " "))
       (cdr args))
  (newline))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The intended meaning is clear: load the file, and then call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the command-line arguments. However, the system will treat everything after the Guile path as a single argument &#8212; the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"-e main -s"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; which is not what we want.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a workaround, the meta switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows the Guile programmer to specify an arbitrary number of options without patching the kernel. If the first argument to Guile is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE>, Guile will open the script file whose name follows the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE>, parse arguments starting from the file&#8217;s second line (according to rules described below), and substitute them for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Working in concert with the meta switch, Guile treats the characters &#8216;<SAMP>#!</SAMP>&#8217; as the beginning of a comment which extends through the next line containing only the characters &#8216;<SAMP>!#</SAMP>&#8217;. This sort of comment may appear anywhere in a Guile program, but it is most useful at the top of a file, meshing magically with the POSIX script invocation mechanism.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus, consider a script named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/u/jimb/ekko</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which starts like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile \
-e main -s
!#
(define (main args)
        (map (lambda (arg) (display arg) (display " "))
             (cdr args))
        (newline))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose a user invokes this script as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ /u/jimb/ekko a b c
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here&#8217;s what happens:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>the operating system recognizes the &#8216;<SAMP>#!</SAMP>&#8217; token at the top of the file, and rewrites the command line to:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>/usr/local/bin/guile \ /u/jimb/ekko a b c
</PRE></DIV>
<P>This is the usual behavior, prescribed by POSIX.</P></LI>
<LI>When Guile sees the first two arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\ /u/jimb/ekko</CODE>, it opens<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/u/jimb/ekko</SAMP>, parses the three arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from it, and substitutes them for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch. Thus, Guile&#8217;s command line now reads:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>/usr/local/bin/guile -e main -s /u/jimb/ekko a b c
</PRE></DIV></LI>
<LI>Guile then processes these switches: it loads<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/u/jimb/ekko</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a file of Scheme code (treating the first three lines as a comment), and then performs the application<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(main "/u/jimb/ekko" "a" "b" "c")</CODE>.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When Guile sees the meta switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE>, it parses command-line argument from the script file according to the following rules:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Each space character terminates an argument. This means that two spaces in a row introduce an argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>""</CODE>.</LI>
<LI>The tab character is not permitted (unless you quote it with the backslash character, as described below), to avoid confusion.</LI>
<LI>The newline character terminates the sequence of arguments, and will also terminate a final non-empty argument. (However, a newline following a space will not introduce a final empty-string argument; it only terminates the argument list.)</LI>
<LI>The backslash character is the escape character. It escapes backslash, space, tab, and newline. The ANSI C escape sequences like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also supported. These produce argument constituents; the two-character combination<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\n</CODE>doesn&#8217;t act like a terminating newline. The escape sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\<VAR>NNN</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for exactly three octal digits reads as the character whose ASCII code is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>NNN</VAR>. As above, characters produced this way are argument constituents. Backslash followed by other characters is not allowed.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Command-Line-Handling></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Scripting-Examples" rel=next>Scripting Examples</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch" rel=prev>The Meta Switch</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=up>Guile Scripting</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Command-Line-Handling-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.3.3 Command Line Handling</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The ability to accept and handle command line arguments is very important when writing Guile scripts to solve particular problems, such as extracting information from text files or interfacing with existing command line applications. This chapter describes how Guile makes command line arguments available to a Guile script, and the utilities that Guile provides to help with the processing of command line arguments.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a Guile script is invoked, Guile makes the command line arguments accessible via the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE>, which returns the arguments as a list of strings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, if the script</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#! /usr/local/bin/guile -s
!#
(write (command-line))
(newline)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is saved in a file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>cmdline-test.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and invoked using the command line<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>./cmdline-test.scm bar.txt -o foo -frumple grob</CODE>, the output is</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>("./cmdline-test.scm" "bar.txt" "-o" "foo" "-frumple" "grob")
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the script invocation includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, specifying a procedure to call after loading the script, Guile will call that procedure with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(command-line)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its argument. So a script that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t need to refer explicitly to<CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its code. For example, the script above would have identical behaviour if it was written instead like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#! /usr/local/bin/guile \
-e main -s
!#
(define (main args)
  (write args)
  (newline))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(Note the use of the meta switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that the script invocation can include more than one Guile option: See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Meta-Switch">The Meta Switch</A>.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These scripts use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>POSIX convention so that they can be executed using their own file names directly, as in the example command line<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>./cmdline-test.scm bar.txt -o foo -frumple grob</CODE>. But they can also be executed by typing out the implied Guile command line in full, as in:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ guile -s ./cmdline-test.scm bar.txt -o foo -frumple grob
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">or</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ guile -e main -s ./cmdline-test2.scm bar.txt -o foo -frumple grob
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Even when a script is invoked using this longer form, the arguments that the script receives are the same as if it had been invoked using the short form. Guile ensures that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(command-line)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments are independent of how the script is invoked, by stripping off the arguments that Guile itself processes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A script is free to parse and handle its command line arguments in any way that it chooses. Where the set of possible options and arguments is complex, however, it can get tricky to extract all the options, check the validity of given arguments, and so on. This task can be greatly simplified by taking advantage of the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 getopt-long)</CODE>, which is distributed with Guile, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong">getopt-long</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scripting-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Handling" rel=prev>Command Line Handling</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=up>Guile Scripting</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scripting-Examples-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.3.4 Scripting Examples</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To start with, here are some examples of invoking Guile directly:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>guile -- a b c</CODE></DT>
<DD>
<P>Run Guile interactively;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(command-line)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><CODE>("/usr/local/bin/guile" "a" "b" "c")</CODE>.</P></DD>
<DT><CODE>guile -s /u/jimb/ex2 a b c</CODE></DT>
<DD>
<P>Load the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/u/jimb/ex2</SAMP>;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(command-line)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><CODE>("/u/jimb/ex2" "a" "b" "c")</CODE>.</P></DD>
<DT><CODE>guile -c '(write %load-path) (newline)'</CODE></DT>
<DD>
<P>Write the value of the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>, print a newline, and exit.</P></DD>
<DT><CODE>guile -e main -s /u/jimb/ex4 foo</CODE></DT>
<DD>
<P>Load the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/u/jimb/ex4</SAMP>, and then call the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>, passing it the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>("/u/jimb/ex4" "foo")</CODE>.</P></DD>
<DT><CODE>guile -l first -ds -l last -s script</CODE></DT>
<DD>
<P>Load the files<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>first</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>script</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>last</SAMP>, in that order. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ds</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch says when to process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch. For a more motivated example, see the scripts below.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a very simple Guile script:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile -s
!#
(display "Hello, world!")
(newline)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first line marks the file as a Guile script. When the user invokes it, the system runs<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/local/bin/guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to interpret the script, passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-s</CODE>, the script&#8217;s filename, and any arguments given to the script as command-line arguments. When Guile sees<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR></CODE>, it loads<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR>. Thus, running this program produces the output:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>Hello, world!
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a script which prints the factorial of its argument:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile -s
!#
(define (fact n)
  (if (zero? n) 1
    (* n (fact (- n 1)))))

(display (fact (string-&gt;number (cadr (command-line)))))
(newline)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In action:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./fact 5
120
$
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, suppose we want to use the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this file from another script. We can&#8217;t simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the script file, and then use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fact</CODE>&#8217;s definition, because the script will try to compute and display a factorial when we load it. To avoid this problem, we might write the script this way:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile \
-e main -s
!#
(define (fact n)
  (if (zero? n) 1
    (* n (fact (- n 1)))))

(define (main args)
  (display (fact (string-&gt;number (cadr args))))
  (newline))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This version packages the actions the script should perform in a function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>. This allows us to load the file purely for its definitions, without any extraneous computation taking place. Then we used the meta switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the entry point switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to tell Guile to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>after loading the script.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./fact 50
30414093201713378043612608166064768844377641568960512000000000000
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose that we now want to write a script which computes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>choose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function: given a set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>distinct objects,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(choose<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of distinct subsets containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects each. It&#8217;s easy to write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>choose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>given<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fact</CODE>, so we might write the script this way:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#!/usr/local/bin/guile \
-l fact -e main -s
!#
(define (choose n m)
  (/ (fact m) (* (fact (- m n)) (fact n))))

(define (main args)
  (let ((n (string-&gt;number (cadr args)))
        (m (string-&gt;number (caddr args))))
    (display (choose n m))
    (newline)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The command-line arguments here tell Guile to first load the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>fact</SAMP>, and then run the script, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the entry point. In other words, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>choose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>script can use definitions made in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>script. Here are some sample runs:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./choose 0 4
1
$ ./choose 1 4
4
$ ./choose 2 4
6
$ ./choose 3 4
4
$ ./choose 4 4
1
$ ./choose 50 100
100891344545564193334812497256
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Interactively></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-in-Emacs" rel=next>Using Guile in Emacs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting" rel=prev>Guile Scripting</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Interactively-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.4 Using Guile Interactively</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you start up Guile by typing just<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile</CODE>, without a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument or the name of a script to execute, you get an interactive interpreter where you can enter Scheme expressions, and Guile will evaluate them and print the results for you. Here are some simple examples.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; (+ 3 4 5)
$1 = 12
scheme@(guile-user)&gt; (display "Hello world!\n")
Hello world!
scheme@(guile-user)&gt; (values 'a 'b)
$2 = a
$3 = b
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This mode of use is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>REPL</EM>, which is short for &#8220;Read-Eval-Print Loop&#8221;, because the Guile interpreter first reads the expression that you have typed, then evaluates it, and then prints the result.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The prompt shows you what language and module you are in. In this case, the current language is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme</CODE>, and the current module is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile-user)</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Other-Languages">Other Languages</A>, for more information on Guile&#8217;s support for languages other than Scheme.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Init-File">Init File</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Readline">Readline</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Value-History">Value History</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands">REPL Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Error-Handling">Error Handling</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Interactive-Debugging">Interactive Debugging</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Init-File></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Readline" rel=next>Readline</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Init-File_002c-_007e_002f_002eguile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.1 The Init File,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>~/.guile</SAMP></H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002eguile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When run interactively, Guile will load a local initialization file from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>~/.guile</SAMP>. This file should contain Scheme expressions for evaluation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This facility lets the user customize their interactive Guile environment, pulling in extra modules or parameterizing the REPL implementation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To run Guile without loading the init file, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-q</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Value-History" rel=next>Value History</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Init-File" rel=prev>Init File</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.2 Readline</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To make it easier for you to repeat and vary previously entered expressions, or to edit the expression that you&#8217;re typing in, Guile can use the GNU Readline library. This is not enabled by default because of licensing reasons, but all you need to activate Readline is the following pair of lines.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; (use-modules (ice-9 readline))
scheme@(guile-user)&gt; (activate-readline)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s a good idea to put these two lines (without the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme@(guile-user)&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prompts) in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Init-File">Init File</A>, for more on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile</SAMP>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Value-History></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=next>REPL Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Readline" rel=prev>Readline</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Value-History-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.3 Value History</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Just as Readline helps you to reuse a previous input line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value history</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows you to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>result</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a previous evaluation in a new expression. When value history is enabled, each evaluation result is automatically assigned to the next in the sequence of variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$2</CODE>, &#8230;. You can then use these variables in subsequent expressions.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; (iota 10)
$1 = (0 1 2 3 4 5 6 7 8 9)
scheme@(guile-user)&gt; (apply * (cdr $1))
$2 = 362880
scheme@(guile-user)&gt; (sqrt $2)
$3 = 602.3952191045344
scheme@(guile-user)&gt; (cons $2 $1)
$4 = (362880 0 1 2 3 4 5 6 7 8 9)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Value history is enabled by default, because Guile&#8217;s REPL imports the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 history)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. Value history may be turned off or on within the repl, using the options interface:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; ,option value-history #f
scheme@(guile-user)&gt; 'foo
foo
scheme@(guile-user)&gt; ,option value-history #t
scheme@(guile-user)&gt; 'bar
$5 = bar
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that previously recorded values are still accessible, even if value history is off. In rare cases, these references to past computations can cause Guile to use too much memory. One may clear these values, possibly enabling garbage collection, via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>clear-value-history!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, described below.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The programmatic interface to value history is in a module:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 history))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-value_002dhistory_002denabled_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>value-history-enabled?</STRONG></DT>
<DD>
<P>Return true if value history is enabled, or false otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enable_002dvalue_002dhistory_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enable-value-history!</STRONG></DT>
<DD>
<P>Turn on value history, if it was off.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-disable_002dvalue_002dhistory_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>disable-value-history!</STRONG></DT>
<DD>
<P>Turn off value history, if it was on.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-clear_002dvalue_002dhistory_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>clear-value-history!</STRONG></DT>
<DD>
<P>Clear the value history. If the stored values are not captured by some other data structure or closure, they may then be reclaimed by the garbage collector.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=REPL-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Error-Handling" rel=next>Error Handling</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Value-History" rel=prev>Value History</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=REPL-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.4 REPL Commands</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The REPL exists to read expressions, evaluate them, and then print their results. But sometimes one wants to tell the REPL to evaluate an expression in a different way, or to do something else altogether. A user can affect the way the REPL works with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>REPL command</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The previous section had an example of a command, in the form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,option</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; ,option value-history #t
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Commands are distinguished from expressions by their initial comma (&#8216;<SAMP>,</SAMP>&#8217;). Since a comma cannot begin an expression in most languages, it is an effective indicator to the REPL that the following text forms a command, not an expression.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">REPL commands are convenient because they are always there. Even if the current module doesn&#8217;t have a binding for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pretty-print</CODE>, one can always<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,pretty-print</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following sections document the various commands, grouped together by functionality. Many of the commands have abbreviations; see the online help (<CODE>,help</CODE>) for more information.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Help-Commands">Help Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Module-Commands">Module Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Language-Commands">Language Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Compile-Commands">Compile Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Profile-Commands">Profile Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Debug-Commands">Debug Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Inspect-Commands">Inspect Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#System-Commands">System Commands</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Help-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Module-Commands" rel=next>Module Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Help-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.1 Help Commands</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When Guile starts interactively, it notifies the user that help can be had by typing &#8216;<SAMP>,help</SAMP>&#8217;. Indeed,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>help</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a command, and a particularly useful one, as it allows the user to discover the rest of the commands.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-help></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>help</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[<CODE>all</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>| group |<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>[-c]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command]</EM></DT>
<DD>
<P>Show help.</P>
<P>With one argument, tries to look up the argument as a group name, giving help on that group if successful. Otherwise tries to look up the argument as a command, giving help on the command.</P>
<P>If there is a command whose name is also a group name, use the &#8216;<SAMP>-c<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>command</VAR></SAMP>&#8217; form to give help on the command instead of the group.</P>
<P>Without any argument, a list of help commands and command groups are displayed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-show></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>show</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[topic]</EM></DT>
<DD>
<P>Gives information about Guile.</P>
<P>With one argument, tries to show a particular piece of information; currently supported topics are &#8216;warranty&#8217; (or &#8216;w&#8217;), &#8216;copying&#8217; (or &#8216;c&#8217;), and &#8216;version&#8217; (or &#8216;v&#8217;).</P>
<P>Without any argument, a list of topics is displayed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apropos></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apropos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>regexp</EM></DT>
<DD>
<P>Find bindings/modules/packages.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-describe></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>describe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Show description/documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Module-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Language-Commands" rel=next>Language Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Help-Commands" rel=prev>Help Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Module-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.2 Module Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[module]</EM></DT>
<DD>
<P>Change modules / Show current module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-import></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>import</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module &#8230;</EM></DT>
<DD>
<P>Import modules / List those imported.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load-1></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file</EM></DT>
<DD>
<P>Load a file in the current module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reload></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reload</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[module]</EM></DT>
<DD>
<P>Reload the given module, or the current module if none was given.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-binding></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>binding</STRONG></DT>
<DD>
<P>List current bindings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-in></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>in</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module expression</EM></DT>
<DT><A name=index-in-1></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>in</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module command arg &#8230;</EM></DT>
<DD>
<P>Evaluate an expression, or alternatively, execute another meta-command in the context of a module. For example, &#8216;<SAMP>,in (foo bar) ,binding</SAMP>&#8217; will show the bindings in the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(foo bar)</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Language-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Compile-Commands" rel=next>Compile Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Module-Commands" rel=prev>Module Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Language-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.3 Language Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-language></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>language</EM></DT>
<DD>
<P>Change languages.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compile-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Profile-Commands" rel=next>Profile Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Language-Commands" rel=prev>Language Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compile-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.4 Compile Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compile></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Generate compiled code.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compile_002dfile></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compile-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file</EM></DT>
<DD>
<P>Compile a file.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-expand></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>expand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Expand any macros in a form.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-optimize></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>optimize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Run the optimizer on a piece of code and print the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-disassemble></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>disassemble</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Disassemble a compiled procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-disassemble_002dfile></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>disassemble-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file</EM></DT>
<DD>
<P>Disassemble a file.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Profile-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Debug-Commands" rel=next>Debug Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Compile-Commands" rel=prev>Compile Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Profile-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.5 Profile Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time-3></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Time execution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-profile></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>profile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Profile execution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-trace></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>trace</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp [#:width w] [#:max-indent i]</EM></DT>
<DD>
<P>Trace execution.</P>
<P>By default, the trace will limit its width to the width of your terminal, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if specified. Nested procedure invocations will be printed farther to the right, though if the width of the indentation passes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max-indent</VAR>, the indentation is abbreviated.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Debug-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Inspect-Commands" rel=next>Inspect Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Profile-Commands" rel=prev>Profile Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Debug-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.6 Debug Commands</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These debugging commands are only available within a recursive REPL; they do not work at the top level.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-backtrace></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>backtrace</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[count] [#:width w] [#:full? f]</EM></DT>
<DD>
<P>Print a backtrace.</P>
<P>Print a backtrace of all stack frames, or innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>frames. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is negative, the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>frames will be shown.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-up></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>up</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[count]</EM></DT>
<DD>
<P>Select a calling stack frame.</P>
<P>Select and print stack frames that called this one. An argument says how many frames up to go.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-down></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>down</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[count]</EM></DT>
<DD>
<P>Select a called stack frame.</P>
<P>Select and print stack frames called by this one. An argument says how many frames down to go.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-frame></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>frame</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[idx]</EM></DT>
<DD>
<P>Show a frame.</P>
<P>Show the selected frame. With an argument, select a frame by index, then show it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-procedure></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>procedure</STRONG></DT>
<DD>
<P>Print the procedure for the selected frame.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locals></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locals</STRONG></DT>
<DD>
<P>Show local variables.</P>
<P>Show locally-bound variables in the selected frame.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-error_002dmessage></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error-message</STRONG></DT>
<DT><A name=index-error></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error</STRONG></DT>
<DD>
<P>Show error message.</P>
<P>Display the message associated with the error that started the current debugging REPL.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-registers></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>registers</STRONG></DT>
<DD>
<P>Show the VM registers associated with the current frame.</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>, for more information on VM stack frames.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-width></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>width</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[cols]</EM></DT>
<DD>
<P>Sets the number of display columns in the output of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,backtrace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,locals</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cols</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cols</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given, the width of the terminal is used.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The next 3 commands work at any REPL.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-break></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD>
<P>Set a breakpoint at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-break_002dat_002dsource></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break-at-source</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file line</EM></DT>
<DD>
<P>Set a breakpoint at the given source location.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tracepoint></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tracepoint</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD>
<P>Set a tracepoint on the given procedure. This will cause all calls to the procedure to print out a tracing message. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Tracing-Traps">Tracing Traps</A>, for more information.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The rest of the commands in this subsection all apply only when the stack is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>continuable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; in other words when it makes sense for the program that the stack comes from to continue running. Usually this means that the program stopped because of a trap or a breakpoint.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-step></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>step</STRONG></DT>
<DD>
<P>Tell the debugged program to step to the next source location.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-next></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>next</STRONG></DT>
<DD>
<P>Tell the debugged program to step to the next source location in the same frame. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Traps">Traps</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the details of how this works.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-finish></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>finish</STRONG></DT>
<DD>
<P>Tell the program being debugged to continue running until the completion of the current stack frame, and at that time to print the result and reenter the REPL.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inspect-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#System-Commands" rel=next>System Commands</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Debug-Commands" rel=prev>Debug Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inspect-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.7 Inspect Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inspect></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inspect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Inspect the result(s) of evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pretty_002dprint></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pretty-print</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Pretty-print the result(s) of evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-Commands></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Inspect-Commands" rel=prev>Inspect Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=up>REPL Commands</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-Commands-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>4.4.4.8 System Commands</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gc></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gc</STRONG></DT>
<DD>
<P>Garbage collection.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-statistics></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>statistics</STRONG></DT>
<DD>
<P>Display statistics.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-option></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name] [exp]</EM></DT>
<DD>
<P>With no arguments, lists all options. With one argument, shows the current value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. With two arguments, sets the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to the result of evaluating the Scheme expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-quit></A>REPL Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quit</STRONG></DT>
<DD>
<P>Quit this session.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Current REPL options include:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>compile-options</CODE></DT>
<DD>
<P>The options used when compiling expressions entered at the REPL. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>, for more on compilation options.</P></DD>
<DT><CODE>interp</CODE></DT>
<DD>
<P>Whether to interpret or compile expressions given at the REPL, if such a choice is available. Off by default (indicating compilation).</P></DD>
<DT><CODE>prompt</CODE></DT>
<DD>
<P>A customized REPL prompt.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by default, indicating the default prompt.</P></DD>
<DT><CODE>print</CODE></DT>
<DD>
<P>A procedure of two arguments used to print the result of evaluating each expression. The arguments are the current REPL and the value to print. By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, to use the default procedure.</P></DD>
<DT><CODE>value-history</CODE></DT>
<DD>
<P>Whether value history is on or not. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Value-History">Value History</A>.</P></DD>
<DT><CODE>on-error</CODE></DT>
<DD>
<P>What to do when an error happens. By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>debug</CODE>, meaning to enter the debugger. Other values include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>backtrace</CODE>, to show a backtrace without entering the debugger, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>report</CODE>, to simply show a short error printout.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Default values for REPL options may be set using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>repl-default-option-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system repl common)</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-repl_002ddefault_002doption_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>repl-default-option-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key value</EM></DT>
<DD>
<P>Set the default value of a REPL option. This function is particularly useful in a user&#8217;s init file. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Init-File">Init File</A>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Error-Handling></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Interactive-Debugging" rel=next>Interactive Debugging</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Commands" rel=prev>REPL Commands</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Error-Handling-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.5 Error Handling</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When code being evaluated from the REPL hits an error, Guile enters a new prompt, allowing you to inspect the context of the error.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; (map string-append '("a" "b") '("c" #\d))
ERROR: In procedure string-append:
ERROR: Wrong type (expecting string): #\d
Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [1]&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new prompt runs inside the old one, in the dynamic context of the error. It is a recursive REPL, augmented with a reified representation of the stack, ready for debugging.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>,backtrace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(abbreviated<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,bt</CODE>) displays the Scheme call stack at the point where the error occurred:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; ,bt
           1 (map #&lt;procedure string-append _&gt; ("a" "b") ("c" #\d))
           0 (string-append "b" #\d)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the above example, the backtrace doesn&#8217;t have much source information, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-append</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are both primitives. But in the general case, the space on the left of the backtrace indicates the line and column in which a given procedure calls another.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can exit a recursive REPL in the same way that you exit any REPL: via &#8216;<SAMP>(quit)</SAMP>&#8217;, &#8216;<SAMP>,quit</SAMP>&#8217; (abbreviated &#8216;<SAMP>,q</SAMP>&#8217;), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><KBD style="FONT-STYLE: oblique">C-d</KBD>, among other options.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Interactive-Debugging></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Error-Handling" rel=prev>Error Handling</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=up>Using Guile Interactively</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Interactive-Debugging-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>4.4.6 Interactive Debugging</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A recursive debugging REPL exposes a number of other meta-commands that inspect the state of the computation at the time of the error. These commands allow you to</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>display the Scheme call stack at the point where the error occurred;</LI>
<LI>move up and down the call stack, to see in detail the expression being evaluated, or the procedure being applied, in each<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>frame</EM>; and</LI>
<LI>examine the values of variables and expressions in the context of each frame.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Debug-Commands">Debug Commands</A>, for documentation of the individual commands. This section aims to give more of a walkthrough of a typical debugging session.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">First, we&#8217;re going to need a good error. Let&#8217;s try to macroexpand the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(unquote foo)</CODE>, outside of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quasiquote</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, and see how the macroexpander reports this error.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user)&gt; (macroexpand '(unquote foo))
ERROR: In procedure macroexpand:
ERROR: unquote: expression not valid outside of quasiquote in (unquote foo)
Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [1]&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>backtrace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command, which can also be invoked as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bt</CODE>, displays the call stack (aka backtrace) at the point where the debugger was entered:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; ,bt
In ice-9/psyntax.scm:
  1130:21  3 (chi-top (unquote foo) () ((top)) e (eval) (hygiene #))
  1071:30  2 (syntax-type (unquote foo) () ((top)) #f #f (# #) #f)
  1368:28  1 (chi-macro #&lt;procedure de9360 at ice-9/psyntax.scm...&gt; ...)
In unknown file:
           0 (scm-error syntax-error macroexpand "~a: ~a in ~a" # #f)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A call stack consists of a sequence of stack<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>frames</EM>, with each frame describing one procedure which is waiting to do something with the values returned by another. Here we see that there are four frames on the stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>macroexpand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not on the stack &#8211; it must have made a tail call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chi-top</CODE>, as indeed we would find if we searched<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ice-9/psyntax.scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for its definition.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you enter the debugger, the innermost frame is selected, which means that the commands for getting information about the &#8220;current&#8221; frame, or for evaluating expressions in the context of the current frame, will do so by default with respect to the innermost frame. To select a different frame, so that these operations will apply to it instead, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>up</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>down</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>frame</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; ,up
In ice-9/psyntax.scm:
  1368:28  1 (chi-macro #&lt;procedure de9360 at ice-9/psyntax.scm...&gt; ...)
scheme@(guile-user) [1]&gt; ,frame 3
In ice-9/psyntax.scm:
  1130:21  3 (chi-top (unquote foo) () ((top)) e (eval) (hygiene #))
scheme@(guile-user) [1]&gt; ,down
In ice-9/psyntax.scm:
  1071:30  2 (syntax-type (unquote foo) () ((top)) #f #f (# #) #f)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Perhaps we&#8217;re interested in what&#8217;s going on in frame 2, so we take a look at its local variables:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; ,locals
  Local variables:
  $1 = e = (unquote foo)
  $2 = r = ()
  $3 = w = ((top))
  $4 = s = #f
  $5 = rib = #f
  $6 = mod = (hygiene guile-user)
  $7 = for-car? = #f
  $8 = first = unquote
  $9 = ftype = macro
  $10 = fval = #&lt;procedure de9360 at ice-9/psyntax.scm:2817:2 (x)&gt;
  $11 = fe = unquote
  $12 = fw = ((top))
  $13 = fs = #f
  $14 = fmod = (hygiene guile-user)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of the values are accessible by their value-history names (<CODE>$<VAR>n</VAR></CODE>):</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; $10
$15 = #&lt;procedure de9360 at ice-9/psyntax.scm:2817:2 (x)&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We can even invoke the procedure at the REPL directly:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [1]&gt; ($10 'not-going-to-work)
ERROR: In procedure macroexpand:
ERROR: source expression failed to match any pattern in not-going-to-work
Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Well at this point we&#8217;ve caused an error within an error. Let&#8217;s just quit back to the top level:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>scheme@(guile-user) [2]&gt; ,q
scheme@(guile-user) [1]&gt; ,q
scheme@(guile-user)&gt; 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, as a word to the wise: hackers close their REPL prompts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><KBD style="FONT-STYLE: oblique">C-d</KBD>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-in-Emacs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Tools" rel=next>Using Guile Tools</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Interactively" rel=prev>Using Guile Interactively</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-in-Emacs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.5 Using Guile in Emacs</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Emacs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Any text editor can edit Scheme, but some are better than others. Emacs is the best, of course, and not just because it is a fine text editor. Emacs has good support for Scheme out of the box, with sensible indentation rules, parenthesis-matching, syntax highlighting, and even a set of keybindings for structural editing, allowing navigation, cut-and-paste, and transposition operations that work on balanced S-expressions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As good as it is, though, two things will vastly improve your experience with Emacs and Guile.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Paredit></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first is Taylor Campbell&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.emacswiki.org/emacs/ParEdit">Paredit</A>. You should not code in any dialect of Lisp without Paredit. (They say that unopinionated writing is boring&#8212;hence this tone&#8212;but it&#8217;s the truth, regardless.) Paredit is the bee&#8217;s knees.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Geiser></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second is Jos&#233; Antonio Ortega Ruiz&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.nongnu.org/geiser/">Geiser</A>. Geiser complements Emacs&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme-mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with tight integration to running Guile processes via a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>comint-mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>REPL buffer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Of course there are keybindings to switch to the REPL, and a good REPL environment, but Geiser goes beyond that, providing:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Form evaluation in the context of the current file&#8217;s module.</LI>
<LI>Macro expansion.</LI>
<LI>File/module loading and/or compilation.</LI>
<LI>Namespace-aware identifier completion (including local bindings, names visible in the current module, and module names).</LI>
<LI>Autodoc: the echo area shows information about the signature of the procedure/macro around point automatically.</LI>
<LI>Jump to definition of identifier at point.</LI>
<LI>Access to documentation (including docstrings when the implementation provides it).</LI>
<LI>Listings of identifiers exported by a given module.</LI>
<LI>Listings of callers/callees of procedures.</LI>
<LI>Rudimentary support for debugging and error navigation.</LI>
<LI>Support for multiple, simultaneous REPLs.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See Geiser&#8217;s web page at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.nongnu.org/geiser/">http://www.nongnu.org/geiser/</A>, for more information.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Tools></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Installing-Site-Packages" rel=next>Installing Site Packages</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-in-Emacs" rel=prev>Using Guile in Emacs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Tools-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.6 Using Guile Tools</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guild></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guile_002dtools></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-wizards></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also comes with a growing number of command-line utilities: a compiler, a disassembler, some module inspectors, and in the future, a system to install Guile packages from the internet. These tools may be invoked using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild</CODE>program.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ guild compile -o foo.go foo.scm
wrote `foo.go'
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This program used to be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile-tools</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>up to Guile version 2.0.1, and for backward compatibility it still may be called as such. However we changed the name to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild</CODE>, not only because it is pleasantly shorter and easier to read, but also because this tool will serve to bind Guile wizards together, by allowing hackers to share code with each other using a CPAN-like system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>, for more on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild compile</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A complete list of guild scripts can be had by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild list</CODE>, or simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild</CODE>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Installing-Site-Packages></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Tools" rel=prev>Using Guile Tools</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Programming-in-Scheme" rel=up>Programming in Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Installing-Site-Packages-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.7 Installing Site Packages</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-site></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-site-path></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-load-path></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0025site_002ddir></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0025site_002dccache_002ddir></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At some point, you will probably want to share your code with other people. To do so effectively, it is important to follow a set of common conventions, to make it easy for the user to install and use your package.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first thing to do is to install your Scheme files where Guile can find them. When Guile goes to find a Scheme file, it will search a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>load path</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to find the file: first in Guile&#8217;s own path, then in paths for<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>site packages</EM>. A site package is any Scheme code that is installed and not part of Guile itself. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>, for more on load paths.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are several site paths, for historical reasons, but the one that should generally be used can be obtained by invoking the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%site-dir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Build-Config">Build Config</A>. If Guile 2.0 is installed on your system in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(%site-dir)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/share/guile/site/2.0</CODE>. Scheme files should be installed there.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you do not install compiled<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>files, Guile will compile your modules and programs when they are first used, and cache them in the user&#8217;s home directory. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>, for more on auto-compilation. However, it is better to compile the files before they are installed, and to just copy the files to a place that Guile can find them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with Scheme files, Guile searches a path to find compiled<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>files, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE>. By default, this path has two entries: a path for Guile&#8217;s files, and a path for site packages. You should install your<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>files into the latter directory, whose value is returned by invoking the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%site-ccache-dir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure. As in the previous example, if Guile 2.0 is installed on your system in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(%site-ccache-dir)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>site packages will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/lib/guile/2.0/site-ccache</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file will only be loaded in preference to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file if it is newer. For that reason, you should install your Scheme files first, and your compiled files second.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Load Paths</CODE>, for more on the loading process.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, although this section is only about Scheme, sometimes you need to install C extensions too. Shared libraries should be installed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>extensions dir</EM>. This value can be had from the build config (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Build-Config">Build Config</A>). Again, if Guile 2.0 is installed on your system in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/</CODE>, then the extensions dir will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/lib/guile/2.0/extensions</CODE>.