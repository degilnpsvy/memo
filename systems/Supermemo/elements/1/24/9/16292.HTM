<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.17 Reading and Evaluating Scheme Code</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This chapter describes Guile functions that are concerned with reading, loading, evaluating, and compiling Scheme code at run time.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax">Scheme Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Standard and extended Scheme syntax.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Reading Scheme code.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Write">Scheme Write</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Writing Scheme values to a port.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation">Fly Evaluation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures for on the fly evaluation.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to compile Scheme files and procedures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Loading">Loading</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Loading Scheme code from file.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Where Guile looks for code.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files">Character Encoding of Source Files</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Loading non-ASCII Scheme code from file.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Delayed-Evaluation">Delayed Evaluation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Postponing evaluation until it is needed.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Evaluation">Local Evaluation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Evaluation in a local lexical environment.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Inclusion">Local Inclusion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Compile-time inclusion of one file in another.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Servers">REPL Servers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Serving a REPL over a socket.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Cooperative-REPL-Servers">Cooperative REPL Servers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>REPL server for single-threaded applications.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scheme-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read" rel=next>Scheme Read</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scheme-Syntax_003a-Standard-and-Guile-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.1 Scheme Syntax: Standard and Guile Extensions</H4>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Expression-Syntax">Expression Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Comments">Comments</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Block-Comments">Block Comments</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Case-Sensitivity">Case Sensitivity</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Syntax">Keyword Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Reader-Extensions">Reader Extensions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Expression-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Comments" rel=next>Comments</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Expression-Syntax-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.1 Expression Syntax</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An expression to be evaluated takes one of the following forms.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE><VAR>symbol</VAR></CODE></DT>
<DD>
<P>A symbol is evaluated by dereferencing. A binding of that symbol is sought and the value there used. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x 123)
x &#8658; 123
</PRE></DIV></DD>
<DT><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>&#8230;)</CODE></DT>
<DD>
<P>A parenthesised expression is a function call.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and each argument are evaluated, then the function (which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluated to) is called with those arguments.</P>
<P>The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the arguments are evaluated is unspecified, so be careful when using expressions with side effects.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(max 1 2 3) &#8658; 3

(define (get-some-proc)  min)
((get-some-proc) 1 2 3) &#8658; 1
</PRE></DIV>
<P>The same sort of parenthesised form is used for a macro invocation, but in that case the arguments are not evaluated. See the descriptions of macros for more on this (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Macros">Macros</A>, and see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Syntax-Rules">Syntax Rules</A>).</P></DD>
<DT><CODE><VAR>constant</VAR></CODE></DT>
<DD>
<P>Number, string, character and boolean constants evaluate &#8220;to themselves&#8221;, so can appear as literals.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>123     &#8658; 123
99.9    &#8658; 99.9
"hello" &#8658; "hello"
#\z     &#8658; #\z
#t      &#8658; #t
</PRE></DIV>
<P>Note that an application must not attempt to modify literal strings, since they may be in read-only memory.</P></DD>
<DT><CODE>(quote<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>)</CODE></DT>
<DT><CODE>'<VAR>data</VAR></CODE></DT>
<DD><A name=index-quote></A><A name=index-_0027></A>
<P>Quoting is used to obtain a literal symbol (instead of a variable reference), a literal list (instead of a function call), or a literal vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simply a shorthand for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quote</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>'x                   &#8658; x
'(1 2 3)             &#8658; (1 2 3)
'#(1 (2 3) 4)        &#8658; #(1 (2 3) 4)
(quote x)            &#8658; x
(quote (1 2 3))      &#8658; (1 2 3)
(quote #(1 (2 3) 4)) &#8658; #(1 (2 3) 4)
</PRE></DIV>
<P>Note that an application must not attempt to modify literal lists or vectors obtained from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quote</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, since they may be in read-only memory.</P></DD>
<DT><CODE>(quasiquote<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>)</CODE></DT>
<DT><CODE>`<VAR>data</VAR></CODE></DT>
<DD><A name=index-quasiquote></A><A name=index-_0060></A>
<P>Backquote quasi-quotation is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quote</CODE>, but selected sub-expressions are evaluated. This is a convenient way to construct a list or vector structure most of which is constant, but at certain points should have expressions substituted.</P>
<P>The same effect can always be had with suitable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls, but quasi-quoting is often easier.</P>
<DL compact>
<DT><CODE>(unquote<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>)</CODE></DT>
<DT><CODE>,<VAR>expr</VAR></CODE></DT>
<DD><A name=index-unquote></A><A name=index-_002c></A>
<P>Within the quasiquote<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unquote</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates an expression to be evaluated and inserted. The comma syntax<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simply a shorthand for an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unquote</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>`(1 2 ,(* 9 9) 3 4)      &#8658; (1 2 81 3 4)
`(1 (unquote (+ 1 1)) 3) &#8658; (1 2 3)
`#(1 ,(/ 12 2))          &#8658; #(1 6)
</PRE></DIV></DD>
<DT><CODE>(unquote-splicing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>)</CODE></DT>
<DT><CODE>,@<VAR>expr</VAR></CODE></DT>
<DD><A name=index-unquote_002dsplicing></A><A name=index-_002c_0040></A>
<P>Within the quasiquote<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unquote-splicing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates an expression to be evaluated and the elements of the returned list inserted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must evaluate to a list. The &#8220;comma-at&#8221; syntax<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simply a shorthand for an<CODE>unquote-splicing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x '(2 3))
`(1 ,@x 4)                         &#8658; (1 2 3 4)
`(1 (unquote-splicing (map 1+ x))) &#8658; (1 3 4)
`#(9 ,@x 9)                        &#8658; #(9 2 3 9)
</PRE></DIV>
<P>Notice<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>differs from plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the way one level of nesting is stripped. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the elements of a returned list are inserted, whereas with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it would be the list itself inserted.</P></DD></DL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Block-Comments" rel=next>Block Comments</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Expression-Syntax" rel=prev>Expression Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Comments-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.2 Comments</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Comments in Scheme source files are written by starting them with a semicolon character (<CODE>;</CODE>). The comment then reaches up to the end of the line. Comments can begin at any column, and the may be inserted on the same line as Scheme code.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>; Comment
;; Comment too
(define x 1)        ; Comment after expression
(let ((y 1))
  ;; Display something.
  (display y)
;;; Comment at left margin.
  (display (+ y 1)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is common to use a single semicolon for comments following expressions on a line, to use two semicolons for comments which are indented like code, and three semicolons for comments which start at column 0, even if they are inside an indented code block. This convention is used when indenting code in Emacs&#8217; Scheme mode.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Block-Comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Case-Sensitivity" rel=next>Case Sensitivity</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Comments" rel=prev>Comments</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Block-Comments-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.3 Block Comments</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-multiline-comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-block-comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0023_0021></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0021_0023></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the standard line comments defined by R5RS, Guile has another comment type for multiline comments, called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>block comments</EM>. This type of comment begins with the character sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and ends with the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!#</CODE>, which must appear on a line of their own. These comments are compatible with the block comments in the Scheme Shell<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>scsh</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-shell-_0028scsh_0029">The Scheme shell (scsh)</A>). The characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were chosen because they are the magic characters used in shell scripts for indicating that the name of the program for executing the script follows on the same line.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus a Guile script often starts like this.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#! /usr/local/bin/guile -s
!#
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">More details on Guile scripting can be found in the scripting section (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Guile-Scripting">Guile Scripting</A>).</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-R6RS-block-comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d30-block-comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similarly, Guile (starting from version 2.0) supports nested block comments as specified by R6RS and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-30/srfi-30.html">SRFI-30</A>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(+ 1 #| this is a #| nested |# block comment |# 2)
&#8658; 3
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For backward compatibility, this syntax can be overridden with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-hash-extend</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reader-Extensions"><CODE>read-hash-extend</CODE></A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is one special case where the contents of a comment can actually affect the interpretation of code. When a character encoding declaration, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coding: utf-8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears in one of the first few lines of a source file, it indicates to Guile&#8217;s default reader that this source code file is not ASCII. For details see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files">Character Encoding of Source Files</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Case-Sensitivity></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Syntax" rel=next>Keyword Syntax</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Block-Comments" rel=prev>Block Comments</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Case-Sensitivity-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.4 Case Sensitivity</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fold_002dcase></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-no_002dfold_002dcase></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme as defined in R5RS is not case sensitive when reading symbols. Guile, on the contrary is case sensitive by default, so the identifiers</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>guile-whuzzy
Guile-Whuzzy
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">are the same in R5RS Scheme, but are different in Guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is possible to turn off case sensitivity in Guile by setting the reader option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-insensitive</CODE>. For more information on reader options, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(read-enable 'case-insensitive)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is also possible to disable (or enable) case sensitivity within a single file by placing the reader directives<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!fold-case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!no-fold-case</CODE>) within the file itself.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Reader-Extensions" rel=next>Reader Extensions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Case-Sensitivity" rel=prev>Case Sensitivity</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Syntax-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.5 Keyword Syntax</H4>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reader-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Syntax" rel=prev>Keyword Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=up>Scheme Syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reader-Extensions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.17.1.6 Reader Extensions</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dhash_002dextend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-hash-extend</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr proc</EM></DT>
<DT><A name=index-scm_005fread_005fhash_005fextend></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read_hash_extend</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr, proc)</EM></DT>
<DD>
<P>Install the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for reading expressions starting with the character sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be called with two arguments: the character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the port to read further data from. The object returned will be the return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>. Passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will remove a previous setting.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scheme-Read></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Write" rel=next>Scheme Write</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax" rel=prev>Scheme Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reading-Scheme-Code></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.2 Reading Scheme Code</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-read-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Read an s-expression from the input port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, or from the current input port if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified. Any whitespace before the next token is discarded.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The behaviour of Guile&#8217;s Scheme reader can be modified by manipulating its read options.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-options-_002d-read></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-read-options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002doptions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-options</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[setting]</EM></DT>
<DD>
<P>Display the current settings of the global read options. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setting</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, only a short form of the current read options is printed. Otherwise if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setting</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>help</CODE>, a complete options description is displayed.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The set of available options, and their default values, may be had by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the prompt.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smalllisp><PRE style="FONT-SIZE: smaller" class=smalllisp>scheme@(guile-user)&gt; (read-options)
(square-brackets keywords #f positions)
scheme@(guile-user)&gt; (read-options 'help)
copy              no    Copy source code expressions.
positions         yes   Record positions of source code expressions.
case-insensitive  no    Convert symbols to lower case.
keywords          #f    Style of keyword recognition: #f, 'prefix or 'postfix.
r6rs-hex-escapes  no    Use R6RS variable-length character and string hex escapes.
square-brackets   yes   Treat `[' and `]' as parentheses, for R6RS compatibility.
hungry-eol-escapes no   In strings, consume leading whitespace after an
                        escaped end-of-line.
curly-infix       no    Support SRFI-105 curly infix expressions.
r7rs-symbols      no    Support R7RS |...| symbol notation.
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that Guile also includes a preliminary mechanism for setting read options on a per-port basis. For instance, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-insensitive</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option is set (or unset) on the port when the reader encounters the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!fold-case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!no-fold-case</CODE>reader directives. Similarly, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reader directive sets the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option on the port, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!curly-infix-and-bracket-lists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and unsets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>square-brackets</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d105">SRFI-105</A>). There is currently no other way to access or set the per-port read options.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The boolean options may be toggled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-enable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-disable</CODE>. The non-boolean<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>keywords</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option must be set using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-set!</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002denable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-enable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name</EM></DT>
<DT><A name=index-read_002ddisable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-disable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name</EM></DT>
<DT><A name=index-read_002dset_0021></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name value</EM></DT>
<DD>
<P>Modify the read options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-enable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used with boolean options and switches them on,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-disable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switches them off.</P>
<P><CODE>read-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to set an option to a specific value. Due to historical oddities, it is a macro that expects an unquoted option name.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, to make<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fold all symbols to their lower case (perhaps for compatibility with older Scheme code), you can enter:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(read-enable 'case-insensitive)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on the effect of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r6rs-hex-escapes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hungry-eol-escapes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, see (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Syntax">String Syntax</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r7rs-symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, see (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Read-Syntax">Symbol Read Syntax</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scheme-Write></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation" rel=next>Fly Evaluation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read" rel=prev>Scheme Read</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing-Scheme-Values></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.3 Writing Scheme Values</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Any scheme value may be written to a port. Not all values may be read back in (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>), however.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-write-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-print></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [port]</EM></DT>
<DD>
<P>Send a representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to the current output port if not given.</P>
<P>The output is designed to be machine readable, and can be read back with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>). Strings are printed in double quotes, with escapes if necessary, and characters are printed in &#8216;<SAMP>#\</SAMP>&#8217; notation.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-display-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-display></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>display</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [port]</EM></DT>
<DD>
<P>Send a representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to the current output port if not given.</P>
<P>The output is designed for human readability, it differs from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in that strings are printed without double quotes and escapes, and characters are printed as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-char</CODE>, not in &#8216;<SAMP>#\</SAMP>&#8217; form.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As was the case with the Scheme reader, there are a few options that affect the behavior of the Scheme printer.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-options-_002d-print></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-print-options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-print_002doptions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>print-options</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[setting]</EM></DT>
<DD>
<P>Display the current settings of the read options. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setting</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, only a short form of the current read options is printed. Otherwise if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setting</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>help</CODE>, a complete options description is displayed.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The set of available options, and their default values, may be had by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print-options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the prompt.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smalllisp><PRE style="FONT-SIZE: smaller" class=smalllisp>scheme@(guile-user)&gt; (print-options)
(quote-keywordish-symbols reader highlight-suffix "}" highlight-prefix "{")
scheme@(guile-user)&gt; (print-options 'help)
highlight-prefix          {       The string to print before highlighted values.
highlight-suffix          }       The string to print after highlighted values.
quote-keywordish-symbols  reader  How to print symbols that have a colon
                                  as their first or last character. The
                                  value '#f' does not quote the colons;
                                  '#t' quotes them; 'reader' quotes them
                                  when the reader option 'keywords' is
                                  not '#f'.
escape-newlines           yes     Render newlines as \n when printing
                                  using `write'. 
r7rs-symbols              no      Escape symbols using R7RS |...| symbol
                                  notation.
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These options may be modified with the print-set! syntax.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-print_002dset_0021></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>print-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name value</EM></DT>
<DD>
<P>Modify the print options. Due to historical oddities,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a macro that expects an unquoted option name.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Fly-Evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Compilation" rel=next>Compilation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Write" rel=prev>Scheme Write</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Procedures-for-On-the-Fly-Evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.4 Procedures for On the Fly Evaluation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme has the lovely property that its expressions may be represented as data. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure takes a Scheme datum and evaluates it as code.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-eval-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eval></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp module_or_state</EM></DT>
<DT><A name=index-scm_005feval></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(exp, module_or_state)</EM></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>, a list representing a Scheme expression, in the top-level environment specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_or_state</VAR>. While<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-eval</CODE>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_or_state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is made the current module. The current module is reset to its previous value when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns. XXX - dynamic states. Example: (eval &#8217;(+ 1 2) (interaction-environment))</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-interaction_002denvironment-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-interaction_002denvironment></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>interaction-environment</STRONG></DT>
<DT><A name=index-scm_005finteraction_005fenvironment></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_interaction_environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a specifier for the environment that contains implementation&#8211;defined bindings, typically a superset of those listed in the report. The intent is that this procedure will return the environment in which the implementation would evaluate expressions dynamically typed by the user.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Environments">Environments</A>, for other environments.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One does not always receive code as Scheme data, of course, and this is especially the case for Guile&#8217;s other language implementations (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Other-Languages">Other Languages</A>). For the case in which all you have is a string, we have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval-string</CODE>. There is a legacy version of this procedure in the default environment, but you really want the one from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 eval-string)</CODE>, so load it up:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 eval-string))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eval_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eval-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string [#:module=#f] [#:file=#f] [#:line=#f] [#:column=#f] [#:lang=(current-language)] [#:compile?=#f]</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the current language, normally Scheme. Evaluate or compile the expressions it contains, in order, returning the last expression.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword argument is set, save a module excursion (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Module-System-Reflection">Module System Reflection</A>) and set the current module to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>before evaluation.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>line</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>column</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword arguments can be used to indicate that the source string begins at a particular source location.</P>
<P>Finally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a language, defaulting to the current language, and the expression is compiled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>compile?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true or there is no evaluator for the given language.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005feval_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eval_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string)</EM></DT>
<DT><A name=index-scm_005feval_005fstring_005fin_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eval_string_in_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string, module)</EM></DT>
<DD>
<P>These C bindings call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 eval-string)</CODE>, evaluating within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005feval_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_eval_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *string)</EM></DT>
<DD>
<P><CODE>scm_eval_string</CODE>, but taking a C string in locale encoding instead of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apply></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg &#8230; arglst</EM></DT>
<DT><A name=index-scm_005fapply_005f0></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_apply_0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arglst)</EM></DT>
<DT><A name=index-scm_005fapply_005f1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_apply_1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arglst)</EM></DT>
<DT><A name=index-scm_005fapply_005f2></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_apply_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arglst)</EM></DT>
<DT><A name=index-scm_005fapply_005f3></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_apply_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arglst)</EM></DT>
<DT><A name=index-scm_005fapply></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg, rest)</EM></DT>
<DD><A name=index-apply-3></A>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; and the elements of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list.</P>
<P><CODE>scm_apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes parameters corresponding to a Scheme level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (proc arg1 . rest) ...)</CODE>. So<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and all but the last element of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list make up<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, and the last element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list. Or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_EOL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then there&#8217;s no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, and (<VAR>arg1</VAR>) is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR>.</P>
<P><VAR>arglst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not modified, but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is modified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fcall_005f0></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DT><A name=index-scm_005fcall_005f1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1)</EM></DT>
<DT><A name=index-scm_005fcall_005f2></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2)</EM></DT>
<DT><A name=index-scm_005fcall_005f3></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3)</EM></DT>
<DT><A name=index-scm_005fcall_005f4></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_4</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4)</EM></DT>
<DT><A name=index-scm_005fcall_005f5></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_5</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4, arg5)</EM></DT>
<DT><A name=index-scm_005fcall_005f6></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_6</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4, arg5, arg6)</EM></DT>
<DT><A name=index-scm_005fcall_005f7></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_7</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</EM></DT>
<DT><A name=index-scm_005fcall_005f8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)</EM></DT>
<DT><A name=index-scm_005fcall_005f9></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_9</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the given arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fcall></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, ...)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with any number of arguments. The argument list must be terminated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>. For example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>scm_call (scm_c_public_ref ("guile", "+"),
          scm_from_int (1),
          scm_from_int (2),
          SCM_UNDEFINED);
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fcall_005fn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_n</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, argv, nargs)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the array of arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR>, as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM*</CODE>. The length of the arguments should be passed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR>, as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apply_003anconc2last></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apply:nconc2last</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005fnconc2last></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_nconc2last</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list (<VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR>), with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>being a list. This function returns a list comprising<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is modified to form the return.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not modified, though the return does share structure with it.</P>
<P>This operation collects up the arguments from a list which is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style parameters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002deval></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DT><A name=index-scm_005fprimitive_005feval></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive_eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(exp)</EM></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the top-level environment specified by the current module.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compilation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Loading" rel=next>Loading</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation" rel=prev>Fly Evaluation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compiling-Scheme-Code></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.5 Compiling Scheme Code</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure directly interprets the S-expression representation of Scheme. An alternate strategy for evaluation is to determine ahead of time what computations will be necessary to evaluate the expression, and then use that recipe to produce the desired results. This is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compilation</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">While it is possible to compile simple Scheme expressions such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(+ 2 2)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or even<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"Hello world!"</CODE>, compilation is most interesting in the context of procedures. Compiling a lambda expression produces a compiled procedure, which is just like a normal procedure except typically much faster, because it can bypass the generic interpreter.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Functions from system modules in a Guile installation are normally compiled already, so they load and run quickly.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-automatic-compilation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that well-written Scheme programs will not typically call the procedures in this section, for the same reason that it is often bad taste to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE>. By default, Guile automatically compiles any files it encounters that have not been compiled yet (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile"><CODE>--auto-compile</CODE></A>). The compiler can also be invoked explicitly from the shell as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild compile foo.scm</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(Why are calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>usually in bad taste? Because they are limited, in that they can only really make sense for top-level expressions. Also, most needs for &#8220;compile-time&#8221; computation are fulfilled by macros and closures. Of course one good counterexample is the REPL itself, or any code that reads expressions from a port.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Automatic compilation generally works transparently, without any need for user intervention. However Guile does not yet do proper dependency tracking, so that if file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>a</VAR>.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses macros from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>b</VAR>.scm</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR><VAR>b</VAR>.scm</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>changes,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>a</VAR>.scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would not be automatically recompiled. To forcibly invalidate the auto-compilation cache, pass the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--fresh-auto-compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to Guile, or set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_AUTO_COMPILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fresh</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(instead of to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on the compiler itself, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine">Compiling to the Virtual Machine</A>. For information on the virtual machine, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile">A Virtual Machine for Guile</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The command-line interface to Guile&#8217;s compiler is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-guild-compile></A>Command:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>guild compile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[<SAMP>option</SAMP>...]<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>...</EM></DT>
<DD>
<P>Compile<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>, a source file, and store bytecode in the compilation cache or in the file specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-o</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. The following options are available:</P>
<DL compact>
<DT><SAMP>-L<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR></SAMP></DT>
<DT><SAMP>--load-path=<VAR>dir</VAR></SAMP></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the front of the module load path.</P></DD>
<DT><SAMP>-o<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ofile</VAR></SAMP></DT>
<DT><SAMP>--output=<VAR>ofile</VAR></SAMP></DT>
<DD>
<P>Write output bytecode to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ofile</VAR>. By convention, bytecode file names end in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-o</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, the output file name is as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below).</P></DD>
<DT><SAMP>-W<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>warning</VAR></SAMP></DT>
<DT><SAMP>--warn=<VAR>warning</VAR></SAMP></DT>
<DD><A name=index-warnings_002c-compiler></A>
<P>Emit warnings of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>warning</VAR>; use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--warn=help</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a list of available warnings and their description. Currently recognized warnings include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unused-variable</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unused-toplevel</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unbound-variable</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arity-mismatch</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>duplicate-case-datum</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bad-case-datum</CODE>.</P></DD>
<DT><SAMP>-f<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR></SAMP></DT>
<DT><SAMP>--from=<VAR>lang</VAR></SAMP></DT>
<DD>
<P>Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the source language of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. If this option is omitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assumed.</P></DD>
<DT><SAMP>-t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR></SAMP></DT>
<DT><SAMP>--to=<VAR>lang</VAR></SAMP></DT>
<DD>
<P>Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the target language of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. If this option is omitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assumed.</P></DD>
<DT><SAMP>-T<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR></SAMP></DT>
<DT><SAMP>--target=<VAR>target</VAR></SAMP></DT>
<DD>
<P>Produce bytecode for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>%host-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Build-Config">%host-type</A>). Target must be a valid GNU triplet, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>armv5tel-unknown-linux-gnueabi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Specifying-Target-Triplets">Specifying Target Triplets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Autoconf Manual</CITE>).</P></DD></DL>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assumed to be UTF-8-encoded, unless it contains a coding declaration as recognized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files">Character Encoding of Source Files</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The compiler can also be invoked directly by Scheme code using the procedures below:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp [#:env=#f] [#:from=(current-language)] [#:to=value] [#:opts=()]</EM></DT>
<DD>
<P>Compile the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the environment<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure, the result will be a compiled procedure; otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mostly equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE>.</P>
<P>For a discussion of languages and compiler options, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine">Compiling to the Virtual Machine</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compile_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compile-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file [#:output-file=#f] [#:from=(current-language)] [#:to='objcode] [#:env=(default-environment from)] [#:opts='()] [#:canonicalization='relative]</EM></DT>
<DD>
<P>Compile the file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>.</P>
<P>Output will be written to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>output-file</VAR>. If you do not supply an output file name, output is written to a file in the cache directory, as computed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(compiled-file-name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>)</CODE>.</P>
<P><VAR>from</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>to</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specify the source and target languages. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine">Compiling to the Virtual Machine</A>, for more information on these options, and on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opts</VAR>.</P>
<P>As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild compile</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assumed to be UTF-8-encoded unless it contains a coding declaration.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compiled_002dfile_002dname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compiled-file-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file</EM></DT>
<DD>
<P>Compute a cached location for a compiled version of a Scheme file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>.</P>
<P>This file will usually be below the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>$HOME/.cache/guile/ccache</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>directory, depending on the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XDG_CACHE_HOME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable. The intention is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compiled-file-name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a fallback location for caching auto-compiled files. If you want to place a compile file in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE>, you should pass the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>output-file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-file</CODE>, explicitly.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025auto_002dcompilation_002doptions></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%auto-compilation-options</STRONG></DT>
<DD>
<P>This variable contains the options passed to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure when auto-compiling source files. By default, it enables useful compilation warnings. It can be customized from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>~/.guile</SAMP>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths" rel=next>Load Paths</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Compilation" rel=prev>Compilation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading-Scheme-Code-from-File></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.6 Loading Scheme Code from File</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-load-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename [reader]</EM></DT>
<DD>
<P>Load<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and evaluate its contents in the top-level environment.</P>
<P><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if provided should be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, or a procedure with the signature<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (port) &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which reads the next expression from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or absent, Guile&#8217;s built-in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>).</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument takes effect by setting the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fluid (see below) before loading the file, and restoring its previous value when loading is complete. The Scheme code inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can itself change the current reader procedure on the fly by setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fluid.</P>
<P>If the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined, it should be bound to a procedure that will be called before any code is loaded. See documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>later in this section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dcompiled></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-compiled</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DD>
<P>Load the compiled file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>.</P>
<P>Compiling a source file (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile">Read/Load/Eval/Compile</A>) and then calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-compiled</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the resulting file is equivalent to calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the source file.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dload-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-load</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-scm_005fprimitive_005fload></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive_load</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename)</EM></DT>
<DD>
<P>Load the file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and evaluate its contents in the top-level environment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must either be a full pathname or be a pathname relative to the current directory. If the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined, it should be bound to a procedure that will be called before any code is loaded. See the documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>later in this section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fprimitive_005fload></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_primitive_load</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *filename)</EM></DT>
<DD>
<P><CODE>scm_primitive_load</CODE>, but taking a C string instead of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dreader></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-reader</STRONG></DT>
<DD>
<P><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>holds the read procedure that is currently being used by the above loading procedures to read expressions (from the file that they are loading).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a fluid, so it has an independent value in each dynamic root and should be read and set using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>).</P>
<P>Changing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is typically useful to introduce local syntactic changes, such that code following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is read using the newly installed reader. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>change should take place at evaluation time when the code is evaluated, or at compilation time when the code is compiled:</P><A name=index-eval_002dwhen-1></A>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(eval-when (compile eval)
  (fluid-set! current-reader my-own-reader))
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval-when</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form above ensures that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>change occurs at the right time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025load_002dhook></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%load-hook</STRONG></DT>
<DD>
<P>A procedure to be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(%load-hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>whenever a file is loaded, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no such call.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used by all of the loading functions (<CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-from-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>documented in the next section).</P>
<P>For example an application can set this to show what&#8217;s loaded,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(set! %load-hook (lambda (filename)
                   (format #t "Loading ~a ...\n" filename)))
(load-from-path "foo.scm")
-| Loading /usr/local/share/guile/site/foo.scm ...
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dload_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-load-port</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005fload_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_load_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the current-load-port. The load port is used internally by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Load-Paths></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files" rel=next>Character Encoding of Source Files</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Loading" rel=prev>Loading</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Load-Paths-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.7 Load Paths</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedure in the previous section look for Scheme code in the file system at specific location. Guile also has some procedures to search the load path for code.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025load_002dpath></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%load-path</STRONG></DT>
<DD>
<P>List of directories which should be searched for Scheme modules and libraries. When Guile starts up,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is initialized to the default load path<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list (%library-dir) (%site-dir) (%global-site-dir) (%package-data-dir))</CODE>. The<CODE>GUILE_LOAD_PATH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable can be used to prepend or append additional directories (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Environment-Variables">Environment Variables</A>).</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Build-Config">Build Config</A>, for more on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%site-dir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and related procedures.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dfrom_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-from-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE>, but searches for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the load paths. Preferentially loads a compiled version of the file, if it is available and up-to-date.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A user can extend the load path by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-to-load-path</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dto_002dload_002dpath></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-to-load-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dir</EM></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the load path.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, a script might include this form to add the directory that it is in to the load path:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(add-to-load-path (dirname (current-filename)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s better to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-to-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>than to modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-to-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes care of modifying the path both at compile-time and at run-time.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dload_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-load-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename [exception-on-not-found]</EM></DT>
<DT><A name=index-scm_005fprimitive_005fload_005fpath></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive_load_path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename)</EM></DT>
<DD>
<P>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and load it into the top-level environment. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a relative pathname and is not found in the list of search paths, an error is signalled. Preferentially loads a compiled version of the file, if it is available and up-to-date.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a relative pathname and is not found in the list of search paths, one of three things may happen, depending on the optional second argument,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exception-on-not-found</VAR>. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be returned. If it is a procedure, it will be called with no arguments. (This allows a distinction to be made between exceptions raised by loading a file, and exceptions related to the loader itself.) Otherwise an error is signalled.</P>
<P>For compatibility with Guile 1.8 and earlier, the C function takes only one argument, which can be either a string (the file name) or an argument list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025search_002dload_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%search-load-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-scm_005fsys_005fsearch_005fload_005fpath></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sys_search_load_path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename)</EM></DT>
<DD>
<P>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>, which must be readable by the current user. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is found in the list of paths to search or is an absolute pathname, return its full pathname. Otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Filenames may have any of the optional extensions in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-extensions</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>list;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%search-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will try each extension automatically.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025load_002dextensions></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%load-extensions</STRONG></DT>
<DD>
<P>A list of default file extensions for files containing Scheme code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%search-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tries each of these extensions when looking for a file to load. By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-extensions</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>("" ".scm")</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As mentioned above, when Guile searches the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a source file, it will also search the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a corresponding compiled file. If the compiled file is as new or newer than the source file, it will be loaded instead of the source file, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-compiled</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025load_002dcompiled_002dpath></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%load-compiled-path</STRONG></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>, but for compiled files. By default, this path has two entries: one for compiled files from Guile itself, and one for site packages. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_LOAD_COMPILED_PATH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable can be used to prepend or append additional directories (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Environment-Variables">Environment Variables</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>searches the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a corresponding compiled file for a relative path it does so by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the relative path. For example, searching for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ice-9/popen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>could find<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/lib/guile/2.0/ccache/ice-9/popen.go</CODE>, and use it instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/usr/share/guile/2.0/ice-9/popen.scm</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not find a corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE>, or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is out of date, it will search for a corresponding auto-compiled file in the fallback path, possibly creating one if one does not exist.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Installing-Site-Packages">Installing Site Packages</A>, for more on how to correctly install site packages. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System">Modules and the File System</A>, for more on the relationship between load paths and modules. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>, for more on the fallback path and auto-compilation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, there are a couple of helper procedures for general path manipulation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path [tail]</EM></DT>
<DT><A name=index-scm_005fparse_005fpath></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_parse_path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, tail)</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>, which is expected to be a colon-separated string, into a list and return the resulting list with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>appended. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dpath_002dwith_002dellipsis></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-path-with-ellipsis</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path base</EM></DT>
<DT><A name=index-scm_005fparse_005fpath_005fwith_005fellipsis></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_parse_path_with_ellipsis</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, base)</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>, which is expected to be a colon-separated string, into a list and return the resulting list with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a list) spliced in place of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>path component, if present, or else<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is added to the end. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-search_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>search-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path filename [extensions [require-exts?]]</EM></DT>
<DT><A name=index-scm_005fsearch_005fpath></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_search_path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, filename, rest)</EM></DT>
<DD>
<P>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a directory containing a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>. The file must be readable, and not a directory. If we find one, return its full filename; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is absolute, return it unchanged. If given,<VAR>extensions</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of strings; for each directory in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>, we search for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>concatenated with each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>extension</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>require-exts?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, require that the returned file name have one of the given extensions; if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>require-exts?</VAR>is not given, it defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>For compatibility with Guile 1.8 and earlier, the C function takes only three arguments.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Encoding-of-Source-Files></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Delayed-Evaluation" rel=next>Delayed Evaluation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths" rel=prev>Load Paths</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Encoding-of-Source-Files-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.8 Character Encoding of Source Files</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-source-file-encoding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-primitive_002dload></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-load></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme source code files are usually encoded in ASCII or UTF-8, but the built-in reader can interpret other character encodings as well. When Guile loads Scheme source code, it uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure (described below) to try to guess the encoding of the file. In the absence of any hints, UTF-8 is assumed. One way to provide a hint about the encoding of a source file is to place a coding declaration in the top 500 characters of the file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A coding declaration has the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coding: XXXXXX</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XXXXXX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a character encoding in which the source code file has been encoded. The coding declaration must appear in a scheme comment. It can either be a semicolon-initiated comment, or the first block<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>comment in the file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The name of the character encoding in the coding declaration is typically lower case and containing only letters, numbers, and hyphens, as recognized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports"><CODE>set-port-encoding!</CODE></A>). Common examples of character encoding names are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>utf-8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iso-8859-1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.iana.org/assignments/character-sets">as defined by IANA</A>. Thus, the coding declaration is mostly compatible with Emacs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, there are some differences in encoding names recognized by Emacs and encoding names defined by IANA, the latter being essentially a subset of the former. For instance,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>latin-1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a valid encoding name for Emacs, but it&#8217;s not according to the IANA standard, which Guile follows; instead, you should use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iso-8859-1</CODE>, which is both understood by Emacs and dubbed by IANA (IANA writes it uppercase but Emacs wants it lowercase and Guile is case insensitive.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For source code, only a subset of all possible character encodings can be interpreted by the built-in source code reader. Only those character encodings in which ASCII text appears unmodified can be used. This includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ISO-8859-1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ISO-8859-15</CODE>. The multi-byte character encodings<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may not be used because they are not compatible with ASCII.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-read></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-encoding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-port-encoding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-set_002dport_002dencoding_0021-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There might be a scenario in which one would want to read non-ASCII code from a port, such as with the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>, instead of with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE>. If the port&#8217;s character encoding is the same as the encoding of the code to be read by the port, not other special handling is necessary. The port will automatically do the character encoding conversion. The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to set port encodings (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a port is used to read code of unknown character encoding, it can accomplish this in three steps. First, the character encoding of the port should be set to ISO-8859-1 using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE>. Then, the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE>, described below, is used to scan for a coding declaration when reading from the port. As a side effect, it rewinds the port after its scan is complete. After that, the port&#8217;s character encoding should be set to the encoding returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE>, if any, again by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE>. Then the code can be read as normal.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Alternatively, one can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:guess-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and related procedures. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005ffile_005fencoding></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_file_encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Attempt to scan the first few hundred bytes from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for hints about its character encoding. Return a string containing the encoding name or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the encoding cannot be determined. The port is rewound.</P>
<P>Currently, the only supported method is to look for an Emacs-like character coding declaration (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Recognize-Coding">how Emacs recognizes file encoding</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU Emacs Reference Manual</CITE>). The coding declaration is of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coding: XXXXX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and must appear in a Scheme comment. Additional heuristics may be added in the future.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Delayed-Evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Local-Evaluation" rel=next>Local Evaluation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files" rel=prev>Character Encoding of Source Files</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Delayed-Evaluation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.9 Delayed Evaluation</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-delayed-evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-promises></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Promises are a convenient way to defer a calculation until its result is actually needed, and to run such a calculation only once. Also see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d45">SRFI-45</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delay></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delay</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DD><A name=index-delay-3></A>
<P>Return a promise object which holds the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, ready to be evaluated by a later<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-promise_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>promise?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fpromise_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_promise_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a promise.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-force-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-force></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>force</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p</EM></DT>
<DT><A name=index-scm_005fforce></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_force</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(p)</EM></DT>
<DD>
<P>Return the value obtained from evaluating the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has previously been forced then its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not evaluated again, instead the value obtained at that time is simply returned.</P>
<P>During a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>again on its own promise, resulting in a recursive evaluation of that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>. The first evaluation to return gives the value for the promise. Higher evaluations run to completion in the normal way, but their results are ignored,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always returns the first value.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Local-Evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Local-Inclusion" rel=next>Local Inclusion</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Delayed-Evaluation" rel=prev>Delayed Evaluation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Local-Evaluation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.10 Local Evaluation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile includes a facility to capture a lexical environment, and later evaluate a new expression within that environment. This code is implemented in a module.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 local-eval))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-the_002denvironment></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>the-environment</STRONG></DT>
<DD>
<P>Captures and returns a lexical environment for use with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-compile</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-local_002deval></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp env</EM></DT>
<DT><A name=index-scm_005flocal_005feval></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_local_eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(exp, env)</EM></DT>
<DT><A name=index-local_002dcompile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-compile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp env [opts=()]</EM></DT>
<DD>
<P>Evaluate or compile the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the lexical environment<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a simple example, illustrating that it is the variable that gets captured, not just its value at one point in time.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define e (let ((x 100)) (the-environment)))
(define fetch-x (local-eval '(lambda () x) e))
(fetch-x)
&#8658; 100
(local-eval '(set! x 42) e)
(fetch-x)
&#8658; 42
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">While<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated within the lexical environment of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(the-environment)</CODE>, it has the dynamic environment of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-eval</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>local-eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can only evaluate expressions, not definitions.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(local-eval '(define foo 42)
            (let ((x 100)) (the-environment)))
&#8658; syntax error: definition in expression context
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the current implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(the-environment)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only captures &#8220;normal&#8221; lexical bindings, and pattern variables bound by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>syntax-case</CODE>. It does not currently capture local syntax transformers bound by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let-syntax</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec-syntax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or non-top-level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-syntax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms. Any attempt to reference such captured syntactic keywords via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces an error.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Local-Inclusion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Servers" rel=next>REPL Servers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Local-Evaluation" rel=prev>Local Evaluation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Local-Inclusion-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.11 Local Inclusion</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section has discussed various means of linking Scheme code together: fundamentally, loading up files at run-time using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-compiled</CODE>. Guile provides another option to compose parts of programs together at expansion-time instead of at run-time.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-include></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>include</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file-name</EM></DT>
<DD>
<P>Open<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-name</VAR>, at expansion-time, and read the Scheme forms that it contains, splicing them into the location of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE>, within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a relative path, it is searched for relative to the path that contains the file that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for appears in.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are a C programmer, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Scheme is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dlopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C, consider<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be like the C preprocessor&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include</CODE>. When you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE>, it is as if the contents of the included file were typed in instead of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because the code is included at compile-time, it is available to the macroexpander. Syntax definitions in the included file are available to later code in the form in which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears, without the need for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval-when</CODE>. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Eval-When">Eval When</A>.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For the same reason, compiling a form that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>results in one compilation unit, composed of multiple files. Loading the compiled file is one<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operation for the compilation unit, instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>2*<VAR>n</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(once for each loaded source file, and once each corresponding compiled file, in the best case).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also works within nested lexical contexts. It so happens that the optimizer works best within a lexical context, because all of the uses of bindings in a lexical context are visible, so composing files by including them within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(let () ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can sometimes lead to important speed improvements.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On the other hand,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does have all the disadvantages of early binding: once the code with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is compiled, no change to the included file is reflected in the future behavior of the including form.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also, the particular form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE>, which requires an absolute path, or a path relative to the current directory at compile-time, is not very amenable to compiling the source in one place, but then installing the source to another place. For this reason, Guile provides another form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include-from-path</CODE>, which looks for the source file to include within a load path.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-include_002dfrom_002dpath></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>include-from-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file-name</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>include</CODE>, but instead of expecting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be an absolute file name, it is expected to be a relative path to search in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>include-from-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is more useful when you want to install all of the source files for a package (as you should!). It makes it possible to evaluate an installed file from source, instead of relying on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.go</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file being up to date.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=REPL-Servers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Cooperative-REPL-Servers" rel=next>Cooperative REPL Servers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Local-Inclusion" rel=prev>Local Inclusion</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=REPL-Servers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.12 REPL Servers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-REPL-server></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures in this section are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (system repl server))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an application is written in Guile, it is often convenient to allow the user to be able to interact with it by evaluating Scheme expressions in a REPL.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures of this module allow you to spawn a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>REPL server</EM>, which permits interaction over a local or TCP connection. Guile itself uses them internally to implement the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--listen</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Command_002dline-Options">Command-line Options</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dtcp_002dserver_002dsocket></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-tcp-server-socket</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[#:host=#f] [#:addr] [#:port=37146]</EM></DT>
<DD>
<P>Return a stream socket bound to a given address<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>addr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and port number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>addr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string is converted to an address. If neither is given, we use the loopback address.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dunix_002ddomain_002dserver_002dsocket></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-unix-domain-server-socket</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[#:path="/tmp/guile-socket"]</EM></DT>
<DD>
<P>Return a UNIX domain socket, bound to a given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-run_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>run-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[server-socket]</EM></DT>
<DT><A name=index-spawn_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>spawn-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[server-socket]</EM></DT>
<DD>
<P>Create and run a REPL, making it available over the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server-socket</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server-socket</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not provided, it defaults to the socket created by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-tcp-server-socket</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments.</P>
<P><CODE>run-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>runs the server in the current thread, whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>spawn-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>runs the server in a new thread.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stop_002dserver_002dand_002dclients_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stop-server-and-clients!</STRONG></DT>
<DD>
<P>Closes the connection on all running server sockets.</P>
<P>Please note that in the current implementation, the REPL threads are cancelled without unwinding their stacks. If any of them are holding mutexes or are within a critical section, the results are unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Cooperative-REPL-Servers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Servers" rel=prev>REPL Servers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile" rel=up>Read/Load/Eval/Compile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Cooperative-REPL-Servers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.17.13 Cooperative REPL Servers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Cooperative-REPL-server></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures in this section are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (system repl coop-server))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Whereas ordinary REPL servers run in their own threads (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Servers">REPL Servers</A>), sometimes it is more convenient to provide REPLs that run at specified times within an existing thread, for example in programs utilizing an event loop or in single-threaded programs. This allows for safe access and mutation of a program&#8217;s data structures from the REPL, without concern for thread synchronization.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although the REPLs are run in the thread that calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>spawn-coop-repl-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>poll-coop-repl-server</CODE>, dedicated threads are spawned so that the calling thread is not blocked. The spawned threads read input for the REPLs and to listen for new connections.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Cooperative REPL servers must be polled periodically to evaluate any pending expressions by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>poll-coop-repl-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the object returned from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>spawn-coop-repl-server</CODE>. The thread that calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>poll-coop-repl-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be blocked for as long as the expression takes to be evaluated or if the debugger is entered.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-spawn_002dcoop_002drepl_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>spawn-coop-repl-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[server-socket]</EM></DT>
<DD>
<P>Create and return a new cooperative REPL server object, and spawn a new thread to listen for connections on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server-socket</VAR>. Proper functioning of the REPL server requires that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>poll-coop-repl-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>be called periodically on the returned server object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-poll_002dcoop_002drepl_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>poll-coop-repl-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>coop-server</EM></DT>
<DD>
<P>Poll the cooperative REPL server<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>coop-server</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and apply a pending operation if there is one, such as evaluating an expression typed at the REPL prompt. This procedure must be called from the same thread that called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>spawn-coop-repl-server</CODE>.</P></DD></DL>