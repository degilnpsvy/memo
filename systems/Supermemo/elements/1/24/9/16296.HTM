<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.21 Threads, Mutexes, Asyncs and Dynamic Roots</H3>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Arbiters">Arbiters</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Synchronization primitives.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs">Asyncs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Asynchronous procedure invocation.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Threads">Threads</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Multiple threads of execution.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables">Mutexes and Condition Variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Synchronization primitives.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Blocking">Blocking</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to block properly in guile mode.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Critical-Sections">Critical Sections</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Avoiding concurrency and reentries.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Thread-local variables, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Parameters">Parameters</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Dynamic scoping in Scheme.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Futures">Futures</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Fine-grain parallelism.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Parallel-Forms">Parallel Forms</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Parallel execution of forms.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arbiters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs" rel=next>Asyncs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arbiters-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.1 Arbiters</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-arbiters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Arbiters are synchronization objects, they can be used by threads to control access to a shared resource. An arbiter can be locked to indicate a resource is in use, and unlocked when done.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An arbiter is like a light-weight mutex (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables">Mutexes and Condition Variables</A>). It uses less memory and may be faster, but there&#8217;s no way for a thread to block waiting on an arbiter, it can only test and get the status returned.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002darbiter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DT><A name=index-scm_005fmake_005farbiter></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name)</EM></DT>
<DD>
<P>Return an object of type arbiter and name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. Its state is initially unlocked. Arbiters are a way to achieve process synchronization.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-try_002darbiter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>try-arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arb</EM></DT>
<DT><A name=index-scm_005ftry_005farbiter></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_try_arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(arb)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arb</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unlocked, then lock it and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arb</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already locked, then do nothing and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-release_002darbiter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>release-arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arb</EM></DT>
<DT><A name=index-scm_005frelease_005farbiter></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_release_arbiter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(arb)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arb</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is locked, then unlock it and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arb</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already unlocked, then do nothing and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>Typical usage is for the thread which locked an arbiter to later release it, but that&#8217;s not required, any thread can release it.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Threads" rel=next>Threads</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Arbiters" rel=prev>Arbiters</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Asyncs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.2 Asyncs</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-user-asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-system-asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Asyncs are a means of deferring the execution of Scheme code until it is safe to do so.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides two kinds of asyncs that share the basic concept but are otherwise quite different: system asyncs and user asyncs. System asyncs are integrated into the core of Guile and are executed automatically when the system is in a state to allow the execution of Scheme code. For example, it is not possible to execute Scheme code in a POSIX signal handler, but such a signal handler can queue a system async to be executed in the near future, when it is safe to do so.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">System asyncs can also be queued for threads other than the current one. This way, you can cause threads to asynchronously execute arbitrary code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">User asyncs offer a convenient means of queuing procedures for future execution and triggering this execution. They will not be executed automatically.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#System-asyncs">System asyncs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#User-asyncs">User asyncs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#User-asyncs" rel=next>User asyncs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs" rel=up>Asyncs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-asyncs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.21.2.1 System asyncs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To cause the future asynchronous execution of a procedure in a given thread, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-async-mark</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Automatic invocation of system asyncs can be temporarily disabled by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-blocked-asyncs</CODE>. This function works by temporarily increasing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>async blocking level</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the current thread while a given procedure is running. The blocking level starts out at zero, and whenever a safe point is reached, a blocking level greater than zero will prevent the execution of queued asyncs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Analogously, the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-unblocked-asyncs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will temporarily decrease the blocking level of the current thread. You can use it when you want to disable asyncs by default and only allow them temporarily.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the C versions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-blocked-asyncs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-unblocked-asyncs</CODE>, C code can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_block_asyncs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unblock_asyncs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inside a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynamic context</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>) to block or unblock system asyncs temporarily.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-system_002dasync_002dmark></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>system-async-mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc [thread]</EM></DT>
<DT><A name=index-scm_005fsystem_005fasync_005fmark></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_system_async_mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DT><A name=index-scm_005fsystem_005fasync_005fmark_005ffor_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_system_async_mark_for_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, thread)</EM></DT>
<DD>
<P>Mark<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a procedure with zero arguments) for future execution in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has already been marked for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but has not been executed yet, this call has no effect. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, the thread that called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-async-mark</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</P>
<P>This procedure is not safe to be called from signal handlers. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_sigaction_for_thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to install signal handlers.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dblocked_002dasyncs></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-blocked-asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-scm_005fcall_005fwith_005fblocked_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_with_blocked_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and block the execution of system asyncs by one level for the current thread while it is running. Return the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. For the first two variants, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments; for the third, call it with<VAR>data</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fcall_005fwith_005fblocked_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_call_with_blocked_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void * (*proc) (void *data), void *data)</EM></DT>
<DD>
<P>The same but with a C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of a Scheme thunk.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dunblocked_002dasyncs></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-unblocked-asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-scm_005fcall_005fwith_005funblocked_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_with_unblocked_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and unblock the execution of system asyncs by one level for the current thread while it is running. Return the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. For the first two variants, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments; for the third, call it with<VAR>data</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fcall_005fwith_005funblocked_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_call_with_unblocked_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *(*proc) (void *data), void *data)</EM></DT>
<DD>
<P>The same but with a C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of a Scheme thunk.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fblock_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_block_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>During the current dynwind context, increase the blocking of asyncs by one level. This function must be used inside a pair of calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005funblock_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_unblock_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>During the current dynwind context, decrease the blocking of asyncs by one level. This function must be used inside a pair of calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=User-asyncs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#System-asyncs" rel=prev>System asyncs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs" rel=up>Asyncs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=User-asyncs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.21.2.2 User asyncs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A user async is a pair of a thunk (a parameterless procedure) and a mark. Setting the mark on a user async will cause the thunk to be executed when the user async is passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-asyncs</CODE>. Setting the mark more than once is satisfied by one execution of the thunk.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">User asyncs are created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>async</CODE>. They are marked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>async-mark</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-async></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>async</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk</EM></DT>
<DT><A name=index-scm_005fasync></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_async</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thunk)</EM></DT>
<DD>
<P>Create a new user async for the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-async_002dmark></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>async-mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>a</EM></DT>
<DT><A name=index-scm_005fasync_005fmark></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_async_mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(a)</EM></DT>
<DD>
<P>Mark the user async<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for future execution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-run_002dasyncs></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>run-asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list_of_a</EM></DT>
<DT><A name=index-scm_005frun_005fasyncs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_run_asyncs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list_of_a)</EM></DT>
<DD>
<P>Execute all thunks from the marked asyncs of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list_of_a</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Threads></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables" rel=next>Mutexes and Condition Variables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs" rel=prev>Asyncs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Threads-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.3 Threads</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-threads></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Guile-threads></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-POSIX-threads></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile supports POSIX threads, unless it was configured with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--without-threads</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the host lacks POSIX thread support. When thread support is available, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>threads</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>feature is provided (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Feature-Manipulation"><CODE>provided?</CODE></A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures below manipulate Guile threads, which are wrappers around the system&#8217;s POSIX threads. For application-level parallelism, using higher-level constructs, such as futures, is recommended (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Futures">Futures</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-all_002dthreads></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>all-threads</STRONG></DT>
<DT><A name=index-scm_005fall_005fthreads></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_all_threads</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a list of all threads.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dthread></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-thread</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the thread that called this function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dnew_002dthread></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-new-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk [handler]</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a new thread and with a new dynamic state, returning the new thread. The procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-continuation-barrier</CODE>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that has<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its handler. This catch is established inside the continuation barrier.</P>
<P>Once<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, the return value is made the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exit value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the thread and the thread is terminated.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fspawn_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_spawn_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_catch_body body, void *body_data, scm_t_catch_handler handler, void *handler_data)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a new thread, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body_data</VAR>, returning the new thread. The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_with_continuation_barrier</CODE>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is non-<CODE>NULL</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_internal_catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that has<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler_data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the handler and its data. This catch is established inside the continuation barrier.</P>
<P>Once<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, the return value is made the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exit value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the thread and the thread is terminated.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fthread_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_thread_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ff<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a thread; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-join_002dthread></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>join-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread [timeout [timeoutval]]</EM></DT>
<DT><A name=index-scm_005fjoin_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_join_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread)</EM></DT>
<DT><A name=index-scm_005fjoin_005fthread_005ftimed></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_join_thread_timed</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread, timeout, timeoutval)</EM></DT>
<DD>
<P>Wait for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to terminate and return its exit value. Threads that have not been created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-new-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_spawn_thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have an exit value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies a point in time where the waiting should be aborted. It can be either an integer as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a pair as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettimeofday</CODE>. When the waiting is aborted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeoutval</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned (if it is specified;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned otherwise).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dexited_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-exited?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DT><A name=index-scm_005fthread_005fexited_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_thread_exited_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has exited, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-yield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>yield</STRONG></DT>
<DD>
<P>If one or more threads are waiting to execute, calling yield forces an immediate context switch to one of them. Otherwise, yield has no effect.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cancel_002dthread></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cancel-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DT><A name=index-scm_005fcancel_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cancel_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread)</EM></DT>
<DD>
<P>Asynchronously notify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to exit. Immediately after receiving this notification,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will call its cleanup handler (if one has been set) and then terminate, aborting any evaluation that is in progress.</P>
<P>Because Guile threads are isomorphic with POSIX threads,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not receive its cancellation signal until it reaches a cancellation point. See your operating system&#8217;s POSIX threading documentation for more information on cancellation points; note that in Guile, unlike native POSIX threads, a thread can receive a cancellation notification while attempting to lock a mutex.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dthread_002dcleanup_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-thread-cleanup!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread proc</EM></DT>
<DT><A name=index-scm_005fset_005fthread_005fcleanup_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_thread_cleanup_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread, proc)</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the cleanup handler for the thread<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, which must be a thunk, will be called when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exits, either normally or by being canceled. Thread cleanup handlers can be used to perform useful tasks like releasing resources, such as locked mutexes, when thread exit cannot be predicted.</P>
<P>The return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be set as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exit value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>.</P>
<P>To remove a cleanup handler, pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dcleanup></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-cleanup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DT><A name=index-scm_005fthread_005fcleanup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_thread_cleanup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(thread)</EM></DT>
<DD>
<P>Return the cleanup handler currently installed for the thread<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>. If no cleanup handler is currently installed, thread-cleanup returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Higher level thread procedures are available by loading the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 threads)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. These provide standardized thread creation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dthread></A>macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg &#8230;</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; in a new thread formed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-new-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>using a default error handler that display the error to the current error port. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; expressions are evaluated in the new thread.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-begin_002dthread></A>macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>begin-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr1 expr2 &#8230;</EM></DT>
<DD>
<P>Evaluate forms<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; in a new thread formed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-new-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>using a default error handler that display the error to the current error port.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Mutexes-and-Condition-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Blocking" rel=next>Blocking</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Threads" rel=prev>Threads</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Mutexes-and-Condition-Variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.4 Mutexes and Condition Variables</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-mutex></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-condition-variable></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A mutex is a thread synchronization object, it can be used by threads to control access to a shared resource. A mutex can be locked to indicate a resource is in use, and other threads can then block on the mutex to wait for the resource (or can just test and do something else if not available). &#8220;Mutex&#8221; is short for &#8220;mutual exclusion&#8221;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two types of mutexes in Guile, &#8220;standard&#8221; and &#8220;recursive&#8221;. They&#8217;re created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-recursive-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively, the operation functions are then common to both.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that for both types of mutex there&#8217;s no protection against a &#8220;deadly embrace&#8221;. For instance if one thread has locked mutex A and is waiting on mutex B, but another thread owns B and is waiting on A, then an endless wait will occur (in the current implementation). Acquiring requisite mutexes in a fixed order (like always A before B) in all threads is one way to avoid such problems.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dmutex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>flag &#8230;</EM></DT>
<DT><A name=index-scm_005fmake_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DT><A name=index-scm_005fmake_005fmutex_005fwith_005fflags></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_mutex_with_flags</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM flags)</EM></DT>
<DD>
<P>Return a new mutex. It is initially unlocked. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; is specified, it must be a list of symbols specifying configuration flags for the newly-created mutex. The supported flags are:</P>
<DL compact>
<DT><CODE>unchecked-unlock</CODE></DT>
<DD>
<P>Unless this flag is present, a call to &#8216;unlock-mutex&#8217; on the returned mutex when it is already unlocked will cause an error to be signalled.</P></DD>
<DT><CODE>allow-external-unlock</CODE></DT>
<DD>
<P>Allow the returned mutex to be unlocked by the calling thread even if it was originally locked by a different thread.</P></DD>
<DT><CODE>recursive</CODE></DT>
<DD>
<P>The returned mutex will be recursive.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fmutex_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mutex_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a mutex; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drecursive_002dmutex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-recursive-mutex</STRONG></DT>
<DT><A name=index-scm_005fmake_005frecursive_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_recursive_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Create a new recursive mutex. It is initially unlocked. Calling this function is equivalent to calling &#8216;make-mutex&#8217; and specifying the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>recursive</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lock_002dmutex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lock-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex [timeout [owner]]</EM></DT>
<DT><A name=index-scm_005flock_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lock_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex)</EM></DT>
<DT><A name=index-scm_005flock_005fmutex_005ftimed></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lock_mutex_timed</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex, timeout, owner)</EM></DT>
<DD>
<P>Lock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. If the mutex is already locked, then block and return only when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been acquired.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies a point in time where the waiting should be aborted. It can be either an integer as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a pair as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettimeofday</CODE>. When the waiting is aborted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>owner</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies an owner for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>other than the calling thread.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>owner</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may also be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, indicating that the mutex should be locked but left unowned.</P>
<P>For standard mutexes (<CODE>make-mutex</CODE>), and error is signalled if the thread has itself already locked<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>.</P>
<P>For a recursive mutex (<CODE>make-recursive-mutex</CODE>), if the thread has itself already locked<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>, then a further<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lock-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call increments the lock count. An additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unlock-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be required to finally release.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was locked by a thread that exited before unlocking it, the next attempt to lock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will succeed, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abandoned-mutex-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be signalled.</P>
<P>When a system async (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#System-asyncs">System asyncs</A>) is activated for a thread blocked in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lock-mutex</CODE>, the wait is interrupted and the async is executed. When the async returns, the wait resumes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005flock_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_lock_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM mutex)</EM></DT>
<DD>
<P>Arrange for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be locked whenever the current dynwind context is entered and to be unlocked when it is exited.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-try_002dmutex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>try-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mx</EM></DT>
<DT><A name=index-scm_005ftry_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_try_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mx)</EM></DT>
<DD>
<P>Try to lock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lock-mutex</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be acquired immediately then this is done and the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is locked by some other thread then nothing is done and the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unlock_002dmutex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unlock-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex [condvar [timeout]]</EM></DT>
<DT><A name=index-scm_005funlock_005fmutex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unlock_mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex)</EM></DT>
<DT><A name=index-scm_005funlock_005fmutex_005ftimed></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unlock_mutex_timed</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex, condvar, timeout)</EM></DT>
<DD>
<P>Unlock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. An error is signalled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not locked and was not created with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unchecked-unlock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag set, or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is locked by a thread other than the calling thread and was not created with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allow-external-unlock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag set.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condvar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies a condition variable upon which the calling thread will wait to be signalled before returning. (This behavior is very similar to that of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wait-condition-variable</CODE>, except that the mutex is left in an unlocked state when the function returns.)</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also given and not false, it specifies a point in time where the waiting should be aborted. It can be either an integer as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a pair as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettimeofday</CODE>. When the waiting is aborted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>is returned. Otherwise the function returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002downer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-owner</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DT><A name=index-scm_005fmutex_005fowner></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mutex_owner</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex)</EM></DT>
<DD>
<P>Return the current owner of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>, in the form of a thread or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(indicating no owner). Note that a mutex may be unowned but still locked.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dlevel></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-level</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DT><A name=index-scm_005fmutex_005flevel></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mutex_level</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex)</EM></DT>
<DD>
<P>Return the current lock level of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is currently unlocked, this value will be 0; otherwise, it will be the number of times<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been recursively locked by its current owner.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dlocked_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-locked?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DT><A name=index-scm_005fmutex_005flocked_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mutex_locked_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mutex)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is locked, regardless of ownership; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcondition_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-condition-variable</STRONG></DT>
<DT><A name=index-scm_005fmake_005fcondition_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_condition_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a new condition variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dvariable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fcondition_005fvariable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_condition_variable_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a condition variable; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-wait_002dcondition_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>wait-condition-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condvar mutex [time]</EM></DT>
<DT><A name=index-scm_005fwait_005fcondition_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_wait_condition_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(condvar, mutex, time)</EM></DT>
<DD>
<P>Wait until<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condvar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been signalled. While waiting,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is atomically unlocked (as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unlock-mutex</CODE>) and is locked again when this function returns. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies a point in time where the waiting should be aborted. It can be either a integer as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a pair as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettimeofday</CODE>. When the waiting is aborted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. When the condition variable has in fact been signalled,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. The mutex is re-locked in any case before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wait-condition-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns.</P>
<P>When a system async is activated for a thread that is blocked in a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wait-condition-variable</CODE>, the waiting is interrupted, the mutex is locked, and the async is executed. When the async returns, the mutex is unlocked again and the waiting is resumed. When the thread block while re-acquiring the mutex, execution of asyncs is blocked.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-signal_002dcondition_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>signal-condition-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condvar</EM></DT>
<DT><A name=index-scm_005fsignal_005fcondition_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_signal_condition_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(condvar)</EM></DT>
<DD>
<P>Wake up one thread that is waiting for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condvar</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-broadcast_002dcondition_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>broadcast-condition-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condvar</EM></DT>
<DT><A name=index-scm_005fbroadcast_005fcondition_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_broadcast_condition_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(condvar)</EM></DT>
<DD>
<P>Wake up all threads that are waiting for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condvar</VAR>.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following are higher level operations on mutexes. These are available from</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 threads))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dmutex></A>macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex body1 body2 &#8230;</EM></DT>
<DD>
<P>Lock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>, evaluate the body<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, then unlock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. The return value is that returned by the last body form.</P>
<P>The lock, body and unlock form the branches of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>), so<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is automatically unlocked if an error or new continuation exits the body, and is re-locked if the body is re-entered by a captured continuation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-monitor></A>macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>monitor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>body1 body2 &#8230;</EM></DT>
<DD>
<P>Evaluate the body form<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; with a mutex locked so only one thread can execute that code at any one time. The return value is the return from the last body form.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>monitor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form has its own private mutex and the locking and evaluation is as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. A standard mutex (<CODE>make-mutex</CODE>) is used, which means the body must not recursively re-enter the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>monitor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P>The term &#8220;monitor&#8221; comes from operating system theory, where it means a particular bit of code managing access to some resource and which only ever executes on behalf of one process at any one time.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Blocking></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Critical-Sections" rel=next>Critical Sections</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables" rel=prev>Mutexes and Condition Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Blocking-in-Guile-Mode></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.5 Blocking in Guile Mode</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Up to Guile version 1.8, a thread blocked in guile mode would prevent the garbage collector from running. Thus threads had to explicitly leave guile mode with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_without_guile ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before making a potentially blocking call such as a mutex lock, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>select ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call, etc. The following functions could be used to temporarily leave guile mode or to perform some common blocking operations in a supported way.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Starting from Guile 2.0, blocked threads no longer hinder garbage collection. Thus, the functions below are not needed anymore. They can still be used to inform the GC that a thread is about to block, giving it a (small) optimization opportunity for &#8220;stop the world&#8221; garbage collections, should they occur while the thread is blocked.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fwithout_005fguile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_without_guile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *(*func) (void *), void *data)</EM></DT>
<DD>
<P>Leave guile mode, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>, enter guile mode and return the result of calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>.</P>
<P>While a thread has left guile mode, it must not call any libguile functions except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_without_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and must not use any libguile macros. Also, local variables of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are allocated while not in guile mode are not protected from the garbage collector.</P>
<P>When used from non-guile mode, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_without_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is still allowed: it simply calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>. In that way, you can leave guile mode without having to know whether the current thread is in guile mode or not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpthread_005fmutex_005flock></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pthread_mutex_lock</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pthread_mutex_t *mutex)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pthread_mutex_lock</CODE>, but leaves guile mode while waiting for the mutex.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpthread_005fcond_005fwait></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pthread_cond_wait</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pthread_cond_t *cond, pthread_mutex_t *mutex)</EM></DT>
<DT><A name=index-scm_005fpthread_005fcond_005ftimedwait></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pthread_cond_timedwait</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pthread_cond_t *cond, pthread_mutex_t *mutex, struct timespec *abstime)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pthread_cond_wait</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pthread_cond_timedwait</CODE>, but leaves guile mode while waiting for the condition variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fstd_005fselect></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_std_select</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>select</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but leaves guile mode while waiting. Also, the delivery of a system async causes this function to be interrupted with error code<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EINTR</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fstd_005fsleep></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_std_sleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned int seconds)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sleep</CODE>, but leaves guile mode while sleeping. Also, the delivery of a system async causes this function to be interrupted.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fstd_005fusleep></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_std_usleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned long usecs)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>usleep</CODE>, but leaves guile mode while sleeping. Also, the delivery of a system async causes this function to be interrupted.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Critical-Sections></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States" rel=next>Fluids and Dynamic States</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Blocking" rel=prev>Blocking</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Critical-Sections-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.6 Critical Sections</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fCRITICAL_005fSECTION_005fSTART></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CRITICAL_SECTION_START</STRONG></DT>
<DT><A name=index-SCM_005fCRITICAL_005fSECTION_005fEND></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CRITICAL_SECTION_END</STRONG></DT>
<DD>
<P>These two macros can be used to delimit a critical section. Syntactically, they are both statements and need to be followed immediately by a semicolon.</P>
<P>Executing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CRITICAL_SECTION_START</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will lock a recursive mutex and block the executing of system asyncs. Executing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CRITICAL_SECTION_END</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will unblock the execution of system asyncs and unlock the mutex. Thus, the code that executes between these two macros can only be executed in one thread at any one time and no system asyncs will run. However, because the mutex is a recursive one, the code might still be reentered by the same thread. You must either allow for this or avoid it, both by careful coding.</P>
<P>On the other hand, critical sections delimited with these macros can be nested since the mutex is recursive.</P>
<P>You must make sure that for each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CRITICAL_SECTION_START</CODE>, the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CRITICAL_SECTION_END</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always executed. This means that no non-local exit (such as a signalled error) might happen, for example.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fcritical_005fsection></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_critical_section</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM mutex)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_lock_mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_block_asyncs</CODE>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false, a recursive mutex provided by Guile is used instead.</P>
<P>The effect of a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_critical_section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is that the current dynwind context (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>) turns into a critical section. Because of the locked mutex, no second thread can enter it concurrently and because of the blocked asyncs, no system async can reenter it from the current thread.</P>
<P>When the current thread reenters the critical section anyway, the kind of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines what happens: When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is recursive, the reentry is allowed. When it is a normal mutex, an error is signalled.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Fluids-and-Dynamic-States></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Parameters" rel=next>Parameters</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Critical-Sections" rel=prev>Critical Sections</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Fluids-and-Dynamic-States-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.7 Fluids and Dynamic States</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fluids></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an object that can store one value per<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynamic state</EM>. Each thread has a current dynamic state, and when accessing a fluid, this current dynamic state is used to provide the actual value. In this way, fluids can be used for thread local storage, but they are in fact more flexible: dynamic states are objects of their own and can be made current for more than one thread at the same time, or only be made current temporarily, for example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Fluids can also be used to simulate the desirable effects of dynamically scoped variables. Dynamically scoped variables are useful when you want to set a variable to a value during some dynamic extent in the execution of your program and have them revert to their original value when the control flow is outside of this dynamic extent. See the description of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-fluids</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below for details.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">New fluids are created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-fluid</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for testing whether an object is actually a fluid. The values stored in a fluid can be accessed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-set!</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dfluid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[dflt]</EM></DT>
<DT><A name=index-scm_005fmake_005ffluid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DT><A name=index-scm_005fmake_005ffluid_005fwith_005fdefault></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_fluid_with_default</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(dflt)</EM></DT>
<DD>
<P>Return a newly created fluid, whose initial value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dflt</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dflt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given. Fluids are objects that can hold one value per dynamic state. That is, modifications to this value are only visible to code that executes with the same dynamic state as the modifying code. When a new dynamic state is constructed, it inherits the values from its parent. Because each thread normally executes with its own dynamic state, you can use fluids for thread local storage.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dunbound_002dfluid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-unbound-fluid</STRONG></DT>
<DT><A name=index-scm_005fmake_005funbound_005ffluid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_unbound_fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a new fluid that is initially unbound (instead of being implicitly bound to some definite value).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005ffluid_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fluid_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a fluid; otherwise, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid</EM></DT>
<DT><A name=index-scm_005ffluid_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fluid_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluid)</EM></DT>
<DD>
<P>Return the value associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current dynamic root. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has not been set, then return its default value. Calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on an unbound fluid produces a runtime error.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid value</EM></DT>
<DT><A name=index-scm_005ffluid_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fluid_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluid, value)</EM></DT>
<DD>
<P>Set the value associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current dynamic root.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dunset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-unset!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid</EM></DT>
<DT><A name=index-scm_005ffluid_005funset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fluid_unset_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluid)</EM></DT>
<DD>
<P>Disassociate the given fluid from any value, making it unbound.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dbound_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-bound?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid</EM></DT>
<DT><A name=index-scm_005ffluid_005fbound_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fluid_bound_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluid)</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the given fluid is bound to a value, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>with-fluids*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>temporarily changes the values of one or more fluids, so that the given procedure and each procedure called by it access the given values. After the procedure returns, the old values are restored.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dfluid_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-fluid*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid value thunk</EM></DT>
<DT><A name=index-scm_005fwith_005ffluid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluid, value, thunk)</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>temporarily, and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure with no argument.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dfluids_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-fluids*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluids values thunk</EM></DT>
<DT><A name=index-scm_005fwith_005ffluids></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_fluids</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fluids, values, thunk)</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluids</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>values</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>temporary, and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluids</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a list of fluids and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>values</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the same number of their values to be applied. Each substitution is done in the order given.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure with no argument. It is called inside a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the fluids are set/restored when control enter or leaves the established dynamic extent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dfluids></A>Scheme Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-fluids</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((fluid value) &#8230;) body1 body2 &#8230;</EM></DT>
<DD>
<P>Execute body<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; while each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set to the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must yield a fluid. The body is executed inside a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the fluids are set/restored when control enter or leaves the established dynamic extent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fwith_005ffluids></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_with_fluids</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM fluids, SCM vals, SCM (*cproc)(void *), void *data)</EM></DT>
<DT><A name=index-scm_005fc_005fwith_005ffluid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_with_fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM fluid, SCM val, SCM (*cproc)(void *), void *data)</EM></DT>
<DD>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_with_fluids</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_fluids</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>except that it takes a C function to call instead of a Scheme thunk.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_with_fluid</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar but only allows one fluid to be set instead of a list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005ffluid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_fluid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM fluid, SCM val)</EM></DT>
<DD>
<P>This function must be used inside a pair of calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>). During the dynwind context, the fluid<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P>
<P>More precisely, the value of the fluid is swapped with a &#8216;backup&#8217; value whenever the dynwind context is entered or left. The backup value is initialized with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002ddynamic_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-dynamic-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[parent]</EM></DT>
<DT><A name=index-scm_005fmake_005fdynamic_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(parent)</EM></DT>
<DD>
<P>Return a copy of the dynamic state object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or of the current dynamic state when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dstate_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-state?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fdynamic_005fstate_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_state_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a dynamic state object; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fdynamic_005fstate></A>C Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return non-zero if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a dynamic state object; return zero otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002ddynamic_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-dynamic-state</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005fdynamic_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the current dynamic state object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dcurrent_002ddynamic_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-current-dynamic-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>state</EM></DT>
<DT><A name=index-scm_005fset_005fcurrent_005fdynamic_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_current_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Set the current dynamic state object to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the previous current dynamic state object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002ddynamic_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-dynamic-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>state proc</EM></DT>
<DT><A name=index-scm_005fwith_005fdynamic_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state, proc)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>while<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the current dynamic state object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fcurrent_005fdynamic_005fstate></A>C Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_current_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM state)</EM></DT>
<DD>
<P>Set the current dynamic state to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the current dynwind context.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fwith_005fdynamic_005fstate></A>C Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_with_dynamic_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM state, void *(*func)(void *), void *data)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_dynamic_state</CODE>, but call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Parameters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Futures" rel=next>Futures</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States" rel=prev>Fluids and Dynamic States</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Parameters-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.8 Parameters</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d39></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-parameter-object></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Parameter></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A parameter object is a procedure. Calling it with no arguments returns its value. Calling it with one argument sets the value.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define my-param (make-parameter 123))
(my-param) &#8658; 123
(my-param 456)
(my-param) &#8658; 456
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>special form establishes new locations for parameters, those new locations having effect within the dynamic scope of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>body. Leaving restores the previous locations. Re-entering (through a saved continuation) will again use the new locations.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(parameterize ((my-param 789))
  (my-param)) &#8658; 789
(my-param) &#8658; 456
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Parameters are like dynamically bound variables in other Lisp dialects. They allow an application to establish parameter settings (as the name suggests) just for the execution of a particular bit of code, restoring when done. Examples of such parameters might be case-sensitivity for a search, or a prompt for user input.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Global variables are not as good as parameter objects for this sort of thing. Changes to them are visible to all threads, but in Guile parameter object locations are per-thread, thereby truly limiting the effect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to just its dynamic execution.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Passing arguments to functions is thread-safe, but that soon becomes tedious when there&#8217;s more than a few or when they need to pass down through several layers of calls before reaching the point they should affect. And introducing a new setting to existing code is often easier with a parameter object than adding arguments.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dparameter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-parameter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init [converter]</EM></DT>
<DD>
<P>Return a new parameter object, with initial value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR>.</P>
<P>If a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>converter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, then a call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>converter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>val)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is made for each value set, its return is the value stored. Such a call is made for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>initial value too.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>converter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows values to be validated, or put into a canonical form. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define my-param (make-parameter 123
                   (lambda (val)
                     (if (not (number? val))
                         (error "must be a number"))
                     (inexact-&gt;exact val))))
(my-param 0.75)
(my-param) &#8658; 3/4
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parameterize></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parameterize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((param value) &#8230;) body1 body2 &#8230;</EM></DT>
<DD>
<P>Establish a new dynamic scope with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>param</VAR>s bound to new locations and set to the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>s.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; is evaluated in that environment. The value returned is that of last body form.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>param</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression which is evaluated to get the parameter object. Often this will just be the name of a variable holding the object, but it can be anything that evaluates to a parameter.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>param</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions are all evaluated before establishing the new dynamic bindings, and they&#8217;re evaluated in an unspecified order.</P>
<P>For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define prompt (make-parameter "Type something: "))
(define (get-input)
  (display (prompt))
  ...)

(parameterize ((prompt "Type a number: "))
  (get-input)
  ...)
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Parameter objects are implemented using fluids (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>), so each dynamic state has its own parameter locations. That includes the separate locations when outside any<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form. When a parameter is created it gets a separate initial location in each dynamic state, all initialized to the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">New code should probably just use parameters instead of fluids, because the interface is better. But for migrating old code or otherwise providing interoperability, Guile provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fluid-&gt;parameter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002d_003eparameter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-&gt;parameter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid [conv]</EM></DT>
<DD>
<P>Make a parameter that wraps a fluid.</P>
<P>The value of the parameter will be the same as the value of the fluid. If the parameter is rebound in some dynamic extent, perhaps via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE>, the new value will be run through the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>conv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, as with any parameter. Note that unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-parameter</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>conv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not applied to the initial value.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As alluded to above, because each thread usually has a separate dynamic state, each thread has its own locations behind parameter objects, and changes in one thread are not visible to any other. When a new dynamic state or thread is created, the values of parameters in the originating context are copied, into new locations.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d39-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s parameters conform to SRFI-39 (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d39">SRFI-39</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Futures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Parallel-Forms" rel=next>Parallel Forms</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Parameters" rel=prev>Parameters</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Futures-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.9 Futures</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-futures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fine_002dgrain-parallelism></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-parallelism></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 futures)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>futures</EM>, a construct for fine-grain parallelism. A future is a wrapper around an expression whose computation may occur in parallel with the code of the calling thread, and possibly in parallel with other futures. Like promises, futures are essentially proxies that can be queried to obtain the value of the enclosed expression:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(touch (future (+ 2 3)))
&#8658; 5
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, unlike promises, the expression associated with a future may be evaluated on another CPU core, should one be available. This supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fine-grain parallelism</EM>, because even relatively small computations can be embedded in futures. Consider this sequential code:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (find-prime lst1 lst2)
  (or (find prime? lst1)
      (find prime? lst2)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The two arms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are potentially computation-intensive. They are independent of one another, yet, they are evaluated sequentially when the first one returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Using futures, one could rewrite it like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (find-prime lst1 lst2)
  (let ((f (future (find prime? lst2))))
    (or (find prime? lst1)
        (touch f))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This preserves the semantics of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>find-prime</CODE>. On a multi-core machine, though, the computation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(find prime? lst2)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be done in parallel with that of the other<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>find</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, which can reduce the execution time of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>find-prime</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Futures may be nested: a future can itself spawn and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>other futures, leading to a directed acyclic graph of futures. Using this facility, a parallel<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure can be defined along these lines:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 futures) (ice-9 match))

(define (par-map proc lst)
  (match lst
    (()
     '())
    ((head tail ...)
     (let ((tail (future (par-map proc tail)))
           (head (proc head)))
       (cons head (touch tail))))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that futures are intended for the evaluation of purely functional expressions. Expressions that have side-effects or rely on I/O may require additional care, such as explicit synchronization (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables">Mutexes and Condition Variables</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s futures are implemented on top of POSIX threads (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Threads">Threads</A>). Internally, a fixed-size pool of threads is used to evaluate futures, such that offloading the evaluation of an expression to another thread doesn&#8217;t incur thread creation costs. By default, the pool contains one thread per available CPU core, minus one, to account for the main thread. The number of available CPU cores is determined using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-processor-count</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a thread touches a future that has not completed yet, it processes any pending future while waiting for it to complete, or just waits if there are no pending futures. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from within a future, the execution of the calling future is suspended, allowing its host thread to process other futures, and resumed when the touched future has completed. This suspend/resume is achieved by capturing the calling future&#8217;s continuation, and later reinstating it (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">delimited continuations</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>par-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above is not tail-recursive. This could lead to stack overflows when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is large compared to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-processor-count)</CODE>. To address that,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the suspend mechanism described above to limit the number of nested futures executing on the same stack. Thus, the above code should never run into stack overflows.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-future></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>future</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>Return a future for expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>. This is equivalent to:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(make-future (lambda () exp))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dfuture></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-future</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk</EM></DT>
<DD>
<P>Return a future for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>, a zero-argument procedure.</P>
<P>This procedure returns immediately. Execution of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may begin in parallel with the calling thread&#8217;s computations, if idle CPU cores are available, or it may start when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked on the returned future.</P>
<P>If the execution of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>throws an exception, that exception will be re-thrown when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked on the returned future.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-future_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>future?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a future.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-touch></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>touch</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f</EM></DT>
<DD>
<P>Return the result of the expression embedded in future<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR>.</P>
<P>If the result was already computed in parallel,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>touch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns instantaneously. Otherwise, it waits for the computation to complete, if it already started, or initiates it. In the former case, the calling thread may process other futures in the meantime.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Parallel-Forms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Futures" rel=prev>Futures</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling" rel=up>Scheduling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Parallel-forms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.21.10 Parallel forms</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-parallel-forms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions described in this section are available from</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 threads))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">They provide high-level parallel constructs. The following functions are implemented in terms of futures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Futures">Futures</A>). Thus they are relatively cheap as they re-use existing threads, and portable, since they automatically use one thread per available CPU core.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parallel></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parallel</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr &#8230;</EM></DT>
<DD>
<P>Evaluate each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression in parallel, each in its own thread. Return the results of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions as a set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>multiple values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-letpar></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>letpar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((var expr) &#8230;) body1 body2 &#8230;</EM></DT>
<DD>
<P>Evaluate each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in parallel, each in its own thread, then bind the results to the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, and then evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL></P>
<P><CODE>letpar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Bindings">Local Bindings</A>), but all the expressions for the bindings are evaluated in parallel.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-par_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>par-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc lst1 lst2 &#8230;</EM></DT>
<DT><A name=index-par_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>par-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the elements of the given lists.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>par-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a list comprising the return values from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>par-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an unspecified value, but waits for all calls to complete.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;)</CODE>, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the same length. The calls are potentially made in parallel, depending on the number of CPU cores available.</P>
<P>These functions are like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Mapping">List Mapping</A>), but make their<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls in parallel.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unlike those above, the functions described below take a number of threads as an argument. This makes them inherently non-portable since the specified number of threads may differ from the number of available CPU cores as returned by<CODE>current-processor-count</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>). In addition, these functions create the specified number of threads when they are called and terminate them upon completion, which makes them quite expensive.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Therefore, they should be avoided.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-n_002dpar_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>n-par-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n proc lst1 lst2 &#8230;</EM></DT>
<DT><A name=index-n_002dpar_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>n-par-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n proc lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the elements of the given lists, in the same way as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>par-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>par-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, but use no more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>threads at any one time. The order in which calls are initiated within that threads limit is unspecified.</P>
<P>These functions are good for controlling resource consumption if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls might be costly, or if there are many to be made. On a dual-CPU system for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>n</VAR>=4</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>might be enough to keep the CPUs utilized, and not consume too much memory.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-n_002dfor_002deach_002dpar_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>n-for-each-par-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n sproc pproc lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the elements of the given lists, and apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each result returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR>. The final return value is unspecified, but all calls will have been completed before returning.</P>
<P>The calls made are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elemN</VAR>))</CODE>, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the same number of elements.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls are made in parallel, in separate threads. No more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>threads are used at any one time. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls are initiated within that limit is unspecified.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls are made serially, in list element order, one at a time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls on later elements may execute in parallel with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls. Exactly which thread makes each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is unspecified.</P>
<P>This function is designed for individual calculations that can be done in parallel, but with results needing to be handled serially, for instance to write them to a file. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>limit on threads controls system resource usage when there are many calculations or when they might be costly.</P>
<P>It will be seen that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n-for-each-par-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like a combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n-par-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE>,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(for-each sproc (n-par-map n pproc lst1 ... lstN))
</PRE></DIV>
<P>But the actual implementation is more efficient since each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, in turn, can be initiated once the relevant<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pproc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call has completed, it doesn&#8217;t need to wait for all to finish.</P></DD></DL>