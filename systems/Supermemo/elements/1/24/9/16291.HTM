<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.16 LALR(1) Parsing</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system base lalr)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://code.google.com/p/lalr-scm/"><CODE>lalr-scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>LALR(1) parser generator by Dominique Boucher</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lalr-scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the same algorithm as GNU Bison (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/bison/manual/bison.html#Introduction">Introduction to Bison</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>Bison, The Yacc-compatible Parser Generator</CITE>). Parsers are defined using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lalr-parser</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lalr_002dparser></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lalr-parser</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[<VAR>options</VAR>]<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tokens</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rules</VAR>...</EM></DT>
<DD>
<P>Generate an LALR(1) syntax analyzer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tokens</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of symbols representing the terminal symbols of the grammar.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rules</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the grammar production rules.</P>
<P>Each rule has the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>non-terminal</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>rhs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>...) :<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>action</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>...)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>non-terminal</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the rule,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rhs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the right-hand sides, i.e., the production rule, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>action</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a semantic action associated with the rule.</P>
<P>The generated parser is a two-argument procedure that takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tokenizer</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>syntax error procedure</EM>. The tokenizer should be a thunk that returns lexical tokens as produced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-lexical-token</CODE>. The syntax error procedure may be called with at least an error message (a string), and optionally the lexical token that caused the error.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Please refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lalr-scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>documentation for details.