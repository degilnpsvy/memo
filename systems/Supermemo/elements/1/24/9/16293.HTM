<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.18 Memory Management and Garbage Collection</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile uses a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>garbage collector</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to manage most of its objects. While the garbage collector is designed to be mostly invisible, you sometimes need to interact with it explicitly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Garbage-Collection">Garbage Collection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a general discussion of how garbage collection relates to using Guile from C.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Garbage-Collection-Functions">Garbage Collection Functions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Blocks">Memory Blocks</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References">Weak References</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Guardians">Guardians</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Garbage-Collection-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Blocks" rel=next>Memory Blocks</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Management" rel=up>Memory Management</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Function-related-to-Garbage-Collection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.18.1 Function related to Garbage Collection</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gc-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gc</STRONG></DT>
<DT><A name=index-scm_005fgc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Scans all of SCM objects and reclaims for further use those that are no longer accessible. You normally don&#8217;t need to call this function explicitly. It is called automatically when appropriate.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005fprotect_005fobject></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_protect_object</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</EM></DT>
<DD>
<P>Protects<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from being freed by the garbage collector, when it otherwise might be. When you are done with the object, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_unprotect_object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the object. Calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_protect</CODE>/<CODE>scm_gc_unprotect_object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be nested, and the object remains protected until it has been unprotected as many times as it was protected. It is an error to unprotect an object more times than it has been protected. Returns the SCM object it was passed.</P>
<P>Note that storing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a C global variable has the same effect<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT15" name=DOCF15><SUP>15</SUP></A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005funprotect_005fobject></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_unprotect_object</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</EM></DT>
<DD>
<P>Unprotects an object from the garbage collector which was protected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_unprotect_object</CODE>. Returns the SCM object it was passed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpermanent_005fobject></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_permanent_object</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_protect_object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in that it causes the collector to always mark the object, except that it should not be nested (only call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_permanent_object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on an object once), and it has no corresponding unpermanent function. Once an object is declared permanent, it will never be freed. Returns the SCM object it was passed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fremember_005fupto_005fhere_005f1></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_remember_upto_here_1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-scm_005fremember_005fupto_005fhere_005f2></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_remember_upto_here_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj1, SCM obj2)</EM></DT>
<DD>
<P>Create a reference to the given object or objects, so they&#8217;re certain to be present on the stack or in a register and hence will not be freed by the garbage collector before this point.</P>
<P>Note that these functions can only be applied to ordinary C local variables (ie. &#8220;automatics&#8221;). Objects held in global or static variables or some malloced block or the like cannot be protected with this mechanism.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gc_002dstats></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gc-stats</STRONG></DT>
<DT><A name=index-scm_005fgc_005fstats></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_stats</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an association list of statistics about Guile&#8217;s current use of storage.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gc_002dlive_002dobject_002dstats></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gc-live-object-stats</STRONG></DT>
<DT><A name=index-scm_005fgc_005flive_005fobject_005fstats></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_live_object_stats</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an alist of statistics of the current live objects.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005fmark></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Mark the object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, and recurse on any objects<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>&#8217;s mark bit is already set, return immediately. This function must only be called during the mark-phase of garbage collection, typically from a smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mark</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Memory-Blocks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References" rel=next>Weak References</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Garbage-Collection-Functions" rel=prev>Garbage Collection Functions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Management" rel=up>Memory Management</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Memory-Blocks-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.18.2 Memory Blocks</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-automatically_002dmanaged-memory></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-GC_002dmanaged-memory></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-conservative-garbage-collection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C programs, dynamic management of memory blocks is normally done with the functions malloc, realloc, and free. Guile has additional functions for dynamic memory allocation that are integrated into the garbage collector and the error reporting system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Memory blocks that are associated with Scheme objects (for example a smob) should be allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE>. These two functions will either return a valid pointer or signal an error. Memory blocks allocated this way can be freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE>; however, this is not strictly needed: memory allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is automatically reclaimed when the garbage collector no longer sees any live reference to it<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT16" name=DOCF16><SUP>16</SUP></A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Memory allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is scanned for live pointers. This means that if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE>-allocated memory contains a pointer to some other part of the memory, the garbage collector notices it and prevents it from being reclaimed<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT17" name=DOCF17><SUP>17</SUP></A>. Conversely, memory allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assumed to be &#8220;pointer-less&#8221; and is not scanned.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For memory that is not associated with a Scheme object, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>. Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE>, it will either return a valid pointer or signal an error. However, it will not assume that the new memory block can be freed by a garbage collection. The memory must be explicitly freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_realloc</CODE>, to be used in place of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when appropriate, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_calloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_calloc</CODE>, to be used in place of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>calloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when appropriate.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be useful when memory should be freed with libc&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when leaving a dynwind context, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmalloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_malloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>)</EM></DT>
<DT><A name=index-scm_005fcalloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_calloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>)</EM></DT>
<DD>
<P>Allocate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of memory and return a pointer to it. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. When not enough memory is available, signal an error. This function runs the GC to free up some memory when it deems it appropriate.</P>
<P>The memory is allocated by the libc<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function and can be freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>. There is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function to go with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to make it easier to pass memory back and forth between different modules.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_calloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE>, but initializes the block of memory to zero as well.</P>
<P>These functions will (indirectly) call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_register_allocation</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005frealloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_realloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *<VAR>mem</VAR>, size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_size</VAR>)</EM></DT>
<DD>
<P>Change the size of the memory block at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return its new location. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, this is the same as calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, this function behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and allocates a new block of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_size</VAR>.</P>
<P>When not enough memory is available, signal an error. This function runs the GC to free up some memory when it deems it appropriate.</P>
<P>This function will call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_register_allocation</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005fmalloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_malloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, const char *<VAR>what</VAR>)</EM></DT>
<DT><A name=index-scm_005fgc_005fmalloc_005fpointerless></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_malloc_pointerless</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, const char *<VAR>what</VAR>)</EM></DT>
<DT><A name=index-scm_005fgc_005frealloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_realloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *<VAR>mem</VAR>, size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old_size</VAR>, size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_size</VAR>, const char *<VAR>what</VAR>);</EM></DT>
<DT><A name=index-scm_005fgc_005fcalloc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_calloc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, const char *<VAR>what</VAR>)</EM></DT>
<DD>
<P>Allocate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of automatically-managed memory. The memory is automatically freed when no longer referenced from any live memory block.</P>
<P>Memory allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_calloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is scanned for pointers. Memory allocated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not scanned.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call preserves the &#8220;pointerlessness&#8221; of the memory area pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR>. Note that you need to pass the old size of a reallocated memory block as well. See below for a motivation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005ffree></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_free</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *<VAR>mem</VAR>, size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, const char *<VAR>what</VAR>)</EM></DT>
<DD>
<P>Explicitly free the memory block pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR>, which was previously allocated by one of the above<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions.</P>
<P>Note that you need to explicitly pass the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter. This is done since it should normally be easy to provide this parameter (for memory that is associated with GC controlled objects) and help keep the memory management overhead very low. However, in Guile 2.x,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fgc_005fregister_005fallocation></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gc_register_allocation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>)</EM></DT>
<DD>
<P>Informs the garbage collector that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes have been allocated, which the collector would otherwise not have known about.</P>
<P>In general, Scheme will decide to collect garbage only after some amount of memory has been allocated. Calling this function will make the Scheme garbage collector know about more allocation, and thus run more often (as appropriate).</P>
<P>It is especially important to call this function when large unmanaged allocations, like images, may be freed by small Scheme allocations, like SMOBs.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005ffree-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_free</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *mem)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unwind_handler (free,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR>, SCM_F_WIND_EXPLICITLY)</CODE>. That is, the memory block at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be freed (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the C library) when the current dynwind is left.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-malloc_002dstats></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>malloc-stats</STRONG></DT>
<DD>
<P>Return an alist ((<VAR>what</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>) ...) describing number of malloced objects.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>what</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the second argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of objects of that type currently allocated.</P>
<P>This function is only available if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_DEBUG_MALLOC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>preprocessor macro was defined when Guile was compiled.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Upgrading-from-scm_005fmust_005fmalloc-et-al_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.18.2.1 Upgrading from scm_must_malloc et al.</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Version 1.6 of Guile and earlier did not have the functions from the previous section. In their place, it had the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_free</CODE>. This section explains why we want you to stop using them, and how to do this.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fmust_005fmalloc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fmust_005frealloc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fmust_005fcalloc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fmust_005ffree></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaved like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>do now, respectively. They would inform the GC about the newly allocated memory via the internal equivalent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_register_allocation</CODE>. However,<CODE>scm_must_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>did not unregister the memory it was about to free. The usual way to unregister memory was to return its size from a smob free function.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This disconnectedness of the actual freeing of memory and reporting this to the GC proved to be bad in practice. It was easy to make mistakes and report the wrong size because allocating and freeing was not done with symmetric code, and because it is cumbersome to compute the total size of nested data structures that were freed with multiple calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_free</CODE>. Additionally, there was no equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE>, and it was tempting to just use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and never to tell the GC that the memory has been freed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The effect was that the internal statistics kept by the GC drifted out of sync with reality and could even overflow in long running programs. When this happened, the result was a dramatic increase in (senseless) GC activity which would effectively stop the program dead.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fdone_005fmalloc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fdone_005ffree></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_done_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_done_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were introduced to help restore balance to the force, but existing bugs did not magically disappear, of course.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Therefore we decided to force everybody to review their code by deprecating the existing functions and introducing new ones in their place that are hopefully easier to use correctly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For every use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>you need to decide whether to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its place. When the memory block is not part of a smob or some other Scheme object whose lifetime is ultimately managed by the garbage collector, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>. When it is part of a smob, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and change the smob free function to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and make it return zero.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The important thing is to always pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>; and to always pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The same reasoning applies to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_must_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>versus<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_realloc</CODE>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-References></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Guardians" rel=next>Guardians</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Blocks" rel=prev>Memory Blocks</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Management" rel=up>Memory Management</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-References-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.18.3 Weak References</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">[FIXME: This chapter is based on Mikael Djurfeldt&#8217;s answer to a question by Michael Livshin. Any mistakes are not theirs, of course. ]</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Weak references let you attach bookkeeping information to data so that the additional information automatically disappears when the original data is no longer in use and gets garbage collected. In a weak key hash, the hash entry for that key disappears as soon as the key is no longer referenced from anywhere else. For weak value hashes, the same happens as soon as the value is no longer in use. Entries in a doubly weak hash disappear when either the key or the value are not used anywhere else anymore.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Object properties offer the same kind of functionality as weak key hashes in many situations. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Object-Properties">Object Properties</A>)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here&#8217;s an example (a little bit strained perhaps, but one of the examples is actually used in Guile):</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Assume that you&#8217;re implementing a debugging system where you want to associate information about filename and position of source code expressions with the expressions themselves.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hashtables can be used for that, but if you use ordinary hash tables it will be impossible for the scheme interpreter to "forget" old source when, for example, a file is reloaded.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To implement the mapping from source code expressions to positional information it is necessary to use weak-key tables since we don&#8217;t want the expressions to be remembered just because they are in our table.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To implement a mapping from source file line numbers to source code expressions you would use a weak-value table.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To implement a mapping from source code expressions to the procedures they constitute a doubly-weak table has to be used.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Weak-hash-tables">Weak hash tables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Weak-vectors">Weak vectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-hash-tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Weak-vectors" rel=next>Weak vectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References" rel=up>Weak References</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-hash-tables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.18.3.1 Weak hash tables</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dweak_002dkey_002dhash_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-weak-key-hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[size]</EM></DT>
<DT><A name=index-make_002dweak_002dvalue_002dhash_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-weak-value-hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[size]</EM></DT>
<DT><A name=index-make_002ddoubly_002dweak_002dhash_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-doubly-weak-hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[size]</EM></DT>
<DT><A name=index-scm_005fmake_005fweak_005fkey_005fhash_005ftable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_weak_key_hash_table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size)</EM></DT>
<DT><A name=index-scm_005fmake_005fweak_005fvalue_005fhash_005ftable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_weak_value_hash_table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size)</EM></DT>
<DT><A name=index-scm_005fmake_005fdoubly_005fweak_005fhash_005ftable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_doubly_weak_hash_table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size)</EM></DT>
<DD>
<P>Return a weak hash table with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>buckets. As with any hash table, choosing a good size for the table requires some caution.</P>
<P>You can modify weak hash tables in exactly the same way you would modify regular hash tables. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A>)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-weak_002dkey_002dhash_002dtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-key-hash-table?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-weak_002dvalue_002dhash_002dtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-value-hash-table?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-doubly_002dweak_002dhash_002dtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>doubly-weak-hash-table?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fweak_005fkey_005fhash_005ftable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_key_hash_table_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fweak_005fvalue_005fhash_005ftable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_value_hash_table_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fdoubly_005fweak_005fhash_005ftable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_doubly_weak_hash_table_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the specified weak hash table. Note that a doubly weak hash table is neither a weak key nor a weak value hash table.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Weak-hash-tables" rel=prev>Weak hash tables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References" rel=up>Weak References</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Weak-vectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.18.3.2 Weak vectors</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dweak_002dvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-weak-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size [fill]</EM></DT>
<DT><A name=index-scm_005fmake_005fweak_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_weak_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size, fill)</EM></DT>
<DD>
<P>Return a weak vector with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements. If the optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, all entries in the vector will be set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>. The default value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-weak_002dvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elem &#8230;</EM></DT>
<DT><A name=index-list_002d_003eweak_002dvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;weak-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>l</EM></DT>
<DT><A name=index-scm_005fweak_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(l)</EM></DT>
<DD>
<P>Construct a weak vector from a list:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak-vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the list of its arguments while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-&gt;weak-vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses its only argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>l</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a list) to construct a weak vector the same way<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-&gt;vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-weak_002dvector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fweak_005fvector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a weak vector.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-weak_002dvector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>wvect k</EM></DT>
<DT><A name=index-scm_005fweak_005fvector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(wvect, k)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th element of the weak vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>wvect</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if that element has been collected.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-weak_002dvector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>weak-vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>wvect k elt</EM></DT>
<DT><A name=index-scm_005fweak_005fvector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_weak_vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(wvect, k, elt)</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th element of the weak vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>wvect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guardians></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References" rel=prev>Weak References</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Management" rel=up>Memory Management</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Guardians-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.18.4 Guardians</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guardians provide a way to be notified about objects that would otherwise be collected as garbage. Guarding them prevents the objects from being collected and cleanup actions can be performed on them, for example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See R. Kent Dybvig, Carl Bruggeman, and David Eby (1993) "Guardians in a Generation-Based Garbage Collector". ACM SIGPLAN Conference on Programming Language Design and Implementation, June 1993.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dguardian></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-guardian</STRONG></DT>
<DT><A name=index-scm_005fmake_005fguardian></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_guardian</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Create a new guardian. A guardian protects a set of objects from garbage collection, allowing a program to apply cleanup or other actions.</P>
<P><CODE>make-guardian</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a procedure representing the guardian. Calling the guardian procedure with an argument adds the argument to the guardian&#8217;s set of protected objects. Calling the guardian procedure without an argument returns one of the protected objects which are ready for garbage collection, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no such object is available. Objects which are returned in this way are removed from the guardian.</P>
<P>You can put a single object into a guardian more than once and you can put a single object into more than one guardian. The object will then be returned multiple times by the guardian procedures.</P>
<P>An object is eligible to be returned from a guardian when it is no longer referenced from outside any guardian.</P>
<P>There is no guarantee about the order in which objects are returned from a guardian. If you want to impose an order on finalization actions, for example, you can do that by keeping objects alive in some global data structure until they are no longer needed for finalizing other objects.</P>
<P>Being an element in a weak vector, a key in a hash table with weak keys, or a value in a hash table with weak values does not prevent an object from being returned by a guardian. But as long as an object can be returned from a guardian it will not be removed from such a weak vector or hash table. In other words, a weak link does not prevent an object from being considered collectable, but being inside a guardian prevents a weak link from being broken.</P>
<P>A key in a weak key hash table can be thought of as having a strong reference to its associated value as long as the key is accessible. Consequently, when the key is only accessible from within a guardian, the reference from the key to the value is also considered to be coming from within a guardian. Thus, if there is no other reference to the value, it is eligible to be returned from a guardian.</P></DD></DL>