<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.19 Modules</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-modules></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When programs become large, naming conflicts can occur when a function or global variable defined in one file has the same name as a function or global variable in another file. Even just a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>similarity</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>between function names can cause hard-to-find bugs, since a programmer might type the wrong function name.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The approach used to tackle this problem is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>information encapsulation</EM>, which consists of packaging functional units into a given name space that is clearly separated from other name spaces.<A name=index-encapsulation></A><A name=index-information-encapsulation></A><A name=index-name-space></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The language features that allow this are usually called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>the module system</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>because programs are broken up into modules that are compiled separately (or loaded separately in an interpreter).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Older languages, like C, have limited support for name space manipulation and protection. In C a variable or function is public by default, and can be made local to a module with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword. But you cannot reference public variables and functions from another module with different names.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">More advanced module systems have become a common feature in recently designed languages: ML, Python, Perl, and Modula 3 all allow the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>renaming</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of objects from a foreign module, so they will not clutter the global name space.<A name=index-name-space-_002d-private></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, Guile offers variables as first-class objects. They can be used for interacting with the module system.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#General-Information-about-Modules">General Information about Modules</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile module basics.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules">Using Guile Modules</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to use existing modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules">Creating Guile Modules</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to package your code into modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System">Modules and the File System</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Installing modules in the file system.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References">R6RS Version References</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Using version numbers with modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries">R6RS Libraries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The library and import forms.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Variables">Variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>First-class variables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Module-System-Reflection">Module System Reflection</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>First-class modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Modules-from-C">Accessing Modules from C</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to work with modules with C code.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#provide-and-require">provide and require</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The SLIB feature mechanism.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Environments">Environments</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>R5RS top-level environments.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=General-Information-about-Modules></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules" rel=next>Using Guile Modules</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=General-Information-about-Modules-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.1 General Information about Modules</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A Guile module can be thought of as a collection of named procedures, variables and macros. More precisely, it is a set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of symbols (names) to Scheme objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Within a module, all bindings are visible. Certain bindings can be declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>public</EM>, in which case they are added to the module&#8217;s so-called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>export list</EM>; this set of public bindings is called the module&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>public interface</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules">Creating Guile Modules</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A client module<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uses</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a providing module&#8217;s bindings by either accessing the providing module&#8217;s public interface, or by building a custom interface (and then accessing that). In a custom interface, the client module can<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>select</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>which bindings to access and can also algorithmically<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rename</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>bindings. In contrast, when using the providing module&#8217;s public interface, the entire export list is available without renaming (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules">Using Guile Modules</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All Guile modules have a unique<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name</EM>, for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-11)</CODE>. Module names are lists of one or more symbols.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When Guile goes to use an interface from a module, for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE>, Guile first looks to see if it has loaded<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for any reason. If the module has not been loaded yet, Guile searches a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>load path</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a file that might define it, and loads that file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following subsections go into more detail on using, creating, installing, and otherwise manipulating modules and the module system.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Modules></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules" rel=next>Creating Guile Modules</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#General-Information-about-Modules" rel=prev>General Information about Modules</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-Guile-Modules-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.2 Using Guile Modules</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To use a Guile module is to access either its public interface or a custom interface (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#General-Information-about-Modules">General Information about Modules</A>). Both types of access are handled by the syntactic form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE>, which accepts one or more interface specifications and, upon evaluation, arranges for those interfaces to be available to the current module. This process may include locating and loading code for a given module if that code has not yet been loaded, following<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System">Modules and the File System</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>interface specification</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>has one of two forms. The first variation is simply to name the module, in which case its public interface is the one accessed. For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 popen))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here, the interface specification is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE>, and the result is that the current module now has access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-pipe</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-input-pipe</CODE>, and so on (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pipes">Pipes</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note in the previous example that if the current module had already defined<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE>, that definition would be overwritten by the definition in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE>. For this reason (and others), there is a second variation of interface specification that not only names a module to be accessed, but also selects bindings from it and renames them to suit the current module&#8217;s needs. For example:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-binding-renamer></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules ((ice-9 popen)
              #:select ((open-pipe . pipe-open) close-pipe)
              #:renamer (symbol-prefix-proc 'unixy:)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here, the interface specification is more complex than before, and the result is that a custom interface with only two bindings is created and subsequently accessed by the current module. The mapping of old to new names is as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>(ice-9 popen) sees:             current module sees:
open-pipe                       unixy:pipe-open
close-pipe                      unixy:close-pipe
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This example also shows how to use the convenience procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-prefix-proc</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can also directly refer to bindings in a module by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax. For example, instead of using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement from above and writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unixy:pipe-open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pipe-open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE>, you could also write<CODE>(@ (ice-9 popen) open-pipe)</CODE>. Thus an alternative to the complete<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement would be</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define unixy:pipe-open (@ (ice-9 popen) open-pipe))
(define unixy:close-pipe (@ (ice-9 popen) close-pipe))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE>, which can be used like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE>, but does not check whether the variable that is being accessed is actually exported. Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be thought of as the impolite version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and should only be used as a last resort or for debugging, for example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that just as with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement, any module that has not yet been loaded yet will be loaded when referenced by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can also use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntaxes as the target of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the binding refers to a variable.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dprefix_002dproc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-prefix-proc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>prefix-sym</EM></DT>
<DD>
<P>Return a procedure that prefixes its arg (a symbol) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prefix-sym</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-use_002dmodules></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>use-modules</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>spec &#8230;</EM></DT>
<DD>
<P>Resolve each interface specification<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into an interface and arrange for these to be accessible by the current module. The return value is unspecified.</P>
<P><VAR>spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a list of symbols, in which case it names a module whose public interface is found and used.</P>
<P><VAR>spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be of the form:</P><A name=index-binding-renamer-1></A>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp> (MODULE-NAME [#:select SELECTION] [#:renamer RENAMER])
</PRE></DIV>
<P>in which case a custom interface is newly created and used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of symbols, as above;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>selection</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of selection-specs; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>renamer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure that takes a symbol and returns its new name. A selection-spec is either a symbol or a pair of symbols<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ORIG . SEEN)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>orig</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name in the used module and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name in the using module. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also passed through<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>renamer</VAR>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:select</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:renamer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses are optional. If both are omitted, the returned interface has no bindings. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:select</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause is omitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>renamer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>operates on the used module&#8217;s public interface.</P>
<P>In addition to the above,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also include a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:version</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause, of the form:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp> #:version VERSION-SPEC
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>version-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an R6RS-compatible version reference. An error will be signaled in the case in which a module with the same name has already been loaded, if that module specifies a version and that version is not compatible with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>version-spec</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References">R6RS Version References</A>, for more on version references.</P>
<P>If the module name is not resolvable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will signal an error.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0040></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>@</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module-name binding-name</EM></DT>
<DD>
<P>Refer to the binding named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binding-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in module<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR>. The binding must have been exported by the module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0040-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>@</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>@ module-name binding-name</EM></DT>
<DD>
<P>Refer to the binding named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binding-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in module<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR>. The binding must not have been exported by the module. This syntax is only intended for debugging purposes or as a last resort.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-Guile-Modules></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System" rel=next>Modules and the File System</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules" rel=prev>Using Guile Modules</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-Guile-Modules-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.3 Creating Guile Modules</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you want to create your own modules, you have to take the following steps:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Create a Scheme source file and add all variables and procedures you wish to export, or which are required by the exported procedures.</LI>
<LI>Add a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form at the beginning.</LI>
<LI>Export all bindings which should be in the public interface, either by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-public</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>export</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(both documented below).</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dmodule></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module-name option &#8230;</EM></DT>
<DD>
<P><VAR>module-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of one or more symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-module (ice-9 popen))
</PRE></DIV>
<P><CODE>define-module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes this module available to Guile programs under the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module-name</VAR>.</P>
<P><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; are keyword/value pairs which specify more about the defined module. The recognized options and their meaning are shown in the following table.</P>
<DL compact>
<DT><CODE>#:use-module<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>interface-specification</VAR></CODE></DT>
<DD>
<P>Equivalent to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>interface-specification</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules">Using Guile Modules</A>).</P></DD>
<DT><CODE>#:autoload<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol-list</VAR></CODE></DT>
<DD><A name=index-autoload></A>
<P>Load<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when any of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are accessed. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-module (my mod)
  #:autoload (srfi srfi-1) (partition delete-duplicates))
...
(if something
    (set! foo (delete-duplicates ...)))
</PRE></DIV>
<P>When a module is autoloaded, all its bindings become available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is just those that will first trigger the load.</P>
<P>An autoload is a good way to put off loading a big module until it&#8217;s really needed, for instance for faster startup or if it will only be needed in certain circumstances.</P>
<P><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can do a similar thing (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Using-Guile-Modules">Using Guile Modules</A>), but in that case an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form must be written every time a binding from the module is used.</P></DD>
<DT><CODE>#:export<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR></CODE></DT>
<DD><A name=index-export></A>
<P>Export all identifiers in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which must be a list of symbols or pairs of symbols. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(export<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the module body.</P></DD>
<DT><CODE>#:re-export<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR></CODE></DT>
<DD><A name=index-re_002dexport></A>
<P>Re-export all identifiers in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which must be a list of symbols or pairs of symbols. The symbols in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be imported by the current module from other modules. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>re-export</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.</P></DD>
<DT><CODE>#:replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR></CODE></DT>
<DD><A name=index-replace></A><A name=index-replacing-binding></A><A name=index-overriding-binding></A><A name=index-duplicate-binding></A>
<P>Export all identifiers in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a list of symbols or pairs of symbols) and mark them as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>replacing bindings</EM>. In the module user&#8217;s name space, this will have the effect of replacing any binding with the same name that is not also &#8220;replacing&#8221;. Normally a replacement results in an &#8220;override&#8221; warning message,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>avoids that.</P>
<P>In general, a module that exports a binding for which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module already has a definition should use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:export</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE>, in a sense, lets Guile know that the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>purposefully</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>replaces a core binding. It is important to note, however, that this binding replacement is confined to the name space of the module user. In other words, the value of the core binding in question remains unchanged for other modules.</P>
<P>Note that although it is often a good idea for the replaced binding to remain compatible with a binding in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile)</CODE>, to avoid surprising the user, sometimes the bindings will be incompatible. For example, SRFI-19 exports its own version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time">SRFI-19 Time</A>) which is not compatible with the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>). Guile assumes that a user importing a module knows what she is doing, and uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this binding rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:export</CODE>.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(export!<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the module body.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:duplicates</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below) provides fine-grain control about duplicate binding handling on the module-user side.</P></DD>
<DT><CODE>#:version<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR></CODE></DT>
<DD><A name=index-module-version></A>
<P>Specify a version for the module in the form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>, a list of zero or more exact, nonnegative integers. The corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:version</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form allows callers to restrict the value of this option in various ways.</P></DD>
<DT><CODE>#:duplicates<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR></CODE></DT>
<DD><A name=index-duplicate-binding-handlers></A><A name=index-duplicate-binding-1></A><A name=index-overriding-binding-1></A>
<P>Tell Guile to handle duplicate bindings for the bindings imported by the current module according to the policy defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>, a list of symbols.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must contain symbols representing a duplicate binding handling policy chosen among the following:</P>
<DL compact>
<DT><CODE>check</CODE></DT>
<DD>
<P>Raises an error when a binding is imported from more than one place.</P></DD>
<DT><CODE>warn</CODE></DT>
<DD>
<P>Issue a warning when a binding is imported from more than one place and leave the responsibility of actually handling the duplication to the next duplicate binding handler.</P></DD>
<DT><CODE>replace</CODE></DT>
<DD>
<P>When a new binding is imported that has the same name as a previously imported binding, then do the following:</P>
<OL>
<LI><A name=index-replacing-binding-1></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If the old binding was said to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>replacing</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option above) and the new binding is not replacing, the keep the old binding.</LI>
<LI>If the old binding was not said to be replacing and the new binding is replacing, then replace the old binding with the new one.</LI>
<LI>If neither the old nor the new binding is replacing, then keep the old one.</LI></OL></DD>
<DT><CODE>warn-override-core</CODE></DT>
<DD>
<P>Issue a warning when a core binding is being overwritten and actually override the core binding with the new one.</P></DD>
<DT><CODE>first</CODE></DT>
<DD>
<P>In case of duplicate bindings, the firstly imported binding is always the one which is kept.</P></DD>
<DT><CODE>last</CODE></DT>
<DD>
<P>In case of duplicate bindings, the lastly imported binding is always the one which is kept.</P></DD>
<DT><CODE>noop</CODE></DT>
<DD>
<P>In case of duplicate bindings, leave the responsibility to the next duplicate handler.</P></DD></DL>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains more than one symbol, then the duplicate binding handlers which appear first will be used first when resolving a duplicate binding situation. As mentioned above, some resolution policies may explicitly leave the responsibility of handling the duplication to the next handler in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>.</P>
<P>If GOOPS has been loaded before the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:duplicates</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause is processed, there are additional strategies available for dealing with generic functions. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Merging-Generics">Merging Generics</A>, for more information.</P><A name=index-default_002dduplicate_002dbinding_002dhandler></A>
<P>The default duplicate binding resolution policy is given by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default-duplicate-binding-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, and is</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(replace warn-override-core warn last)
</PRE></DIV></DD>
<DT><CODE>#:pure</CODE></DT>
<DD><A name=index-pure-module></A>
<P>Create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pure</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, that is a module which does not contain any of the standard procedure bindings except for the syntax forms. This is useful if you want to create<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>safe</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>modules, that is modules which do not know anything about dangerous procedures.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-export-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>export</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable &#8230;</EM></DT>
<DD>
<P>Add all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>s (which must be symbols or pairs of symbols) to the list of exported bindings of the current module. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair, its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the name of the variable as seen by the current module and its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a name for the binding in the current module&#8217;s public interface.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dpublic></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-public</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>&#8230;</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(begin (define foo ...) (export foo))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-re_002dexport-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>re-export</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable &#8230;</EM></DT>
<DD>
<P>Add all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>s (which must be symbols or pairs of symbols) to the list of re-exported bindings of the current module. Pairs of symbols are handled as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>export</CODE>. Re-exported bindings must be imported by the current module from some other module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-export_0021></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>export!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>export</CODE>, but marking the exported variables as replacing. Using a module with replacing bindings will cause any existing bindings to be replaced without issuing any warnings. See the discussion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:replace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Modules-and-the-File-System></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References" rel=next>R6RS Version References</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules" rel=prev>Creating Guile Modules</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Modules-and-the-File-System-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.4 Modules and the File System</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Typical programs only use a small subset of modules installed on a Guile system. In order to keep startup time down, Guile only loads modules when a program uses them, on demand.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a program evaluates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules (ice-9 popen))</CODE>, and the module is not loaded, Guile searches for a conventionally-named file from in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>load path</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this case, loading<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will eventually cause Guile to run<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(primitive-load-path "ice-9/popen")</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will search for a file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>ice-9/popen</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>). For each directory in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE>, Guile will try to find the file name, concatenated with the extensions from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-extensions</CODE>. By default, this will cause Guile to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>ice-9/popen.scm</SAMP>, and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>ice-9/popen</SAMP>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>, for more on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-load-path</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a corresponding compiled<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is found in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-compiled-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or in the fallback path, and is as fresh as the source file, it will be loaded instead of the source file. If no compiled file is found, Guile may try to compile the source file and cache away the resulting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.go</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compilation">Compilation</A>, for more on compilation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once Guile finds a suitable source or compiled file is found, the file will be loaded. If, after loading the file, the module under consideration is still not defined, Guile will signal an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on where and how to install Scheme modules, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Installing-Site-Packages">Installing Site Packages</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Version-References></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries" rel=next>R6RS Libraries</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-the-File-System" rel=prev>Modules and the File System</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Version-References-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.5 R6RS Version References</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s module system includes support for locating modules based on a declared version specifier of the same form as the one described in R6RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r6rs.html#Library-form">R6RS Library Form</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^6 Report on the Algorithmic Language Scheme</CITE>). By using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:version</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, a module may specify a version as a list of zero or more exact, nonnegative integers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This version can then be used to locate the module during the module search process. Client modules and callers of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function may specify constraints on the versions of target modules by providing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>version reference</EM>, which has one of the following forms:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp> (<VAR>sub-version-reference</VAR> ...)
 (and <VAR>version-reference</VAR> ...)
 (or <VAR>version-reference</VAR> ...)
 (not <VAR>version-reference</VAR>)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-version-reference</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in turn one of:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp> (<VAR>sub-version</VAR>)
 (&gt;= <VAR>sub-version</VAR>)
 (&lt;= <VAR>sub-version</VAR>)
 (and <VAR>sub-version-reference</VAR> ...)
 (or <VAR>sub-version-reference</VAR> ...)
 (not <VAR>sub-version-reference</VAR>)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact, nonnegative integer as above. A version reference matches a declared module version if each element of the version reference matches a corresponding element of the module version, according to the following rules:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form matches a version or version element if every element in the tail of the sub-form matches the specified version or version element.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form matches a version or version element if any element in the tail of the sub-form matches the specified version or version element.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form matches a version or version element if the tail of the sub-form does not match the version or version element.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form matches a version element if the element is greater than or equal to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the tail of the sub-form.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form matches a version element if the version is less than or equal to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the tail of the sub-form.</LI>
<LI>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches a version element if one is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eqv?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the other.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, a module declared as:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp> (define-module (mylib mymodule) #:version (1 2 0))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">would be successfully loaded by any of the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp> (use-modules ((mylib mymodule) #:version (1 2 (&gt;= 0))))
 (use-modules ((mylib mymodule) #:version (or (1 2 0) (1 2 1))))
 (use-modules ((mylib mymodule) #:version ((and (&gt;= 1) (not 2)) 2 0)))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Libraries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Variables" rel=next>Variables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References" rel=prev>R6RS Version References</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Libraries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.6 R6RS Libraries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the API described in the previous sections, you also have the option to create modules using the portable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form described in R6RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r6rs.html#Library-form">R6RS Library Form</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^6 Report on the Algorithmic Language Scheme</CITE>), and to import libraries created in this format by other programmers. Guile&#8217;s R6RS library implementation takes advantage of the flexibility built into the module system by expanding the R6RS library form into a corresponding Guile<CODE>define-module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form that specifies equivalent import and export requirements and includes the same body expressions. The library expression:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  (library (mylib (1 2))
    (import (otherlib (3)))
    (export mybinding))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is equivalent to the module definition:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  (define-module (mylib)
    #:version (1 2)
    #:use-module ((otherlib) #:version (3))
    #:export (mybinding))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Central to the mechanics of R6RS libraries is the concept of import and export<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>levels</EM>, which control the visibility of bindings at various phases of a library&#8217;s lifecycle &#8212; macros necessary to expand forms in the library&#8217;s body need to be available at expand time; variables used in the body of a procedure exported by the library must be available at runtime. R6RS specifies the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>import set</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>specification (see below) as a mechanism by which a library author can indicate that a particular library import should take place at a particular phase with respect to the lifecycle of the importing library.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s library implementation uses a technique called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>implicit phasing</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(first described by Abdulaziz Ghuloum and R. Kent Dybvig), which allows the expander and compiler to automatically determine the necessary visibility of a binding imported from another library. As such, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form described below is ignored by Guile (but may be required by Schemes in which phasing is explicit).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-library></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>library</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name (export export-spec ...) (import import-spec ...) body ...</EM></DT>
<DD>
<P>Defines a new library with the specified name, exports, and imports, and evaluates the specified body expressions in this library&#8217;s environment.</P>
<P>The library<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a non-empty list of identifiers, optionally ending with a version specification of the form described above (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules">Creating Guile Modules</A>).</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>export-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a variable defined or imported by the library, or must take the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rename (internal-name external-name) ...)</CODE>, where the identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>internal-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>names a variable defined or imported by the library and<VAR>external-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name by which the variable is seen by importing libraries.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>import set</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below) or must be of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(for import-set import-level ...)</CODE>, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one of:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>  run
  expand
  (meta <VAR>level</VAR>)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer. Note that since Guile does not require explicit phase specification, any<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>s found inside of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-forms will be &#8220;unwrapped&#8221; during expansion and processed as if they had been specified directly.</P>
<P>Import sets in turn take one of the following forms:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>  <VAR>library-reference</VAR>
  (library <VAR>library-reference</VAR>)
  (only <VAR>import-set</VAR> <VAR>identifier</VAR> ...)
  (except <VAR>import-set</VAR> <VAR>identifier</VAR> ...)
  (prefix <VAR>import-set</VAR> <VAR>identifier</VAR>)
  (rename <VAR>import-set</VAR> (<VAR>internal-identifier</VAR> <VAR>external-identifier</VAR>) ...)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library-reference</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a non-empty list of identifiers ending with an optional version reference (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References">R6RS Version References</A>), and the other sub-forms have the following semantics, defined recursively on nested<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>s:</P>
<UL>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form is used to specify libraries for import whose names begin with the identifier &#8220;library.&#8221;</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>only</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form imports only the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>identifier</VAR>s from the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>except</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form imports all of the bindings exported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>except for those that appear in the specified list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>identifier</VAR>s.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>prefix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form imports all of the bindings exported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>, first prefixing them with the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>identifier</VAR>.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-form imports all of the identifiers exported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>. The binding for each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>internal-identifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>among these identifiers is made visible to the importing library as the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>external-identifier</VAR>; all other bindings are imported using the names provided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-set</VAR>.</LI></UL>
<P>Note that because Guile translates R6RS libraries into module definitions, an import specification may be used to declare a dependency on a native Guile module &#8212; although doing so may make your libraries less portable to other Schemes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-import-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>import</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>import-spec ...</EM></DT>
<DD>
<P>Import into the current environment the libraries specified by the given import specifications, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes the same form as in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form described above.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Module-System-Reflection" rel=next>Module System Reflection</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries" rel=prev>R6RS Libraries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.7 Variables</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each module has its own hash table, sometimes known as an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obarray</EM>, that maps the names defined in that module to their corresponding variable objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A variable is a box-like object that can hold any Scheme value. It is said to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>undefined</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>if its box holds a special Scheme value that denotes undefined-ness (which is different from all other Scheme values, including for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>); otherwise the variable is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>defined</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On its own, a variable object is anonymous. A variable is said to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bound</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>when it is associated with a name in some way, usually a symbol in a module obarray. When this happens, the name is said to be bound to the variable, in that module.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(That&#8217;s the theory, anyway. In practice, defined-ness and bound-ness sometimes get confused, because Lisp and Scheme implementations have often conflated &#8212; or deliberately drawn no distinction between &#8212; a name that is unbound and a name that is bound to a variable whose value is undefined. We will try to be clear about the difference and explain any confusion where it is unavoidable.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Variables do not have a read syntax. Most commonly they are created and bound implicitly by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions: a top-level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression of the form</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define <VAR>name</VAR> <VAR>value</VAR>)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">creates a variable with initial value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and binds it to the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current module. But they can also be created dynamically by calling one of the constructor procedures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-undefined-variable</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dundefined_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-undefined-variable</STRONG></DT>
<DT><A name=index-scm_005fmake_005fundefined_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_undefined_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a variable that is initially unbound.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init</EM></DT>
<DT><A name=index-scm_005fmake_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(init)</EM></DT>
<DD>
<P>Return a variable initialized to value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dbound_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-bound?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>var</EM></DT>
<DT><A name=index-scm_005fvariable_005fbound_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_variable_bound_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(var)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to a value, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. Throws an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a variable object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>var</EM></DT>
<DT><A name=index-scm_005fvariable_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_variable_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(var)</EM></DT>
<DD>
<P>Dereference<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return its value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a variable object; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-undefined-variable</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>var val</EM></DT>
<DT><A name=index-scm_005fvariable_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_variable_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(var, val)</EM></DT>
<DD>
<P>Set the value of the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a variable object,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any value. Return an unspecified value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dunset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-unset!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>var</EM></DT>
<DT><A name=index-scm_005fvariable_005funset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_variable_unset_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(var)</EM></DT>
<DD>
<P>Unset the value of the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR>, leaving<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>unbound.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fvariable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_variable_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variable object, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Module-System-Reflection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Modules-from-C" rel=next>Accessing Modules from C</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Variables" rel=prev>Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Module-System-Reflection-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.8 Module System Reflection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The previous sections have described a declarative view of the module system. You can also work with it programmatically by accessing and modifying various parts of the Scheme objects that Guile uses to implement the module system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At any time, there is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>current module</EM>. This module is the one where a top-level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and similar syntax will add new bindings. You can find other module objects with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>resolve-module</CODE>, for example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These module objects can be used as the second argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dmodule></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-module</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the current module object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dcurrent_002dmodule></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-current-module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module</EM></DT>
<DT><A name=index-scm_005fset_005fcurrent_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_current_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(module)</EM></DT>
<DD>
<P>Set the current module to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the previous current module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-save_002dmodule_002dexcursion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>save-module-excursion</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that the module that is current at invocation time is restored when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>&#8217;s dynamic extent is left (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>).</P>
<P>More precisely, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>escapes non-locally, the current module (at the time of escape) is saved, and the original current module (at the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>&#8217;s dynamic extent was last entered) is restored. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>&#8217;s dynamic extent is re-entered, then the current module is saved, and the previously saved inner module is set current again.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-resolve_002dmodule></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>resolve-module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name [autoload=#t] [version=#f] [#:ensure=#t]</EM></DT>
<DT><A name=index-scm_005fresolve_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_resolve_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name)</EM></DT>
<DD>
<P>Find the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return it. When it has not already been defined and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>autoload</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, try to auto-load it. When it can&#8217;t be found that way either, create an empty module if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ensure</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If<VAR>version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, ensure that the resulting module is compatible with the given version reference (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Version-References">R6RS Version References</A>). The name is a list of symbols.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-resolve_002dinterface></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>resolve-interface</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name [#:select=#f] [#:hide='()] [#:prefix=#f] [#:renamer=#f] [#:version=#f]</EM></DT>
<DD>
<P>Find the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>resolve-module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return its interface. The interface of a module is also a module object, but it contains only the exported bindings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002duses></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-uses</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module</EM></DT>
<DD>
<P>Return a list of the interfaces used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002duse_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-use!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module interface</EM></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>interface</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the front of the use-list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>. Both arguments should be module objects, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>interface</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should very likely be a module returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>resolve-interface</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reload_002dmodule></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reload-module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module</EM></DT>
<DD>
<P>Revisit the source file that corresponds to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>. Raises an error if no source file is associated with the given module.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As mentioned in the previous section, modules contain a mapping between identifiers (as symbols) and storage locations (as variables). Guile defines a number of procedures to allow access to this mapping. If you are programming in C,<A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Modules-from-C">Accessing Modules from C</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name</EM></DT>
<DD>
<P>Return the variable bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a symbol) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unbound.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002dadd_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-add!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name var</EM></DT>
<DD>
<P>Define a new binding between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a symbol) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a variable) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name</EM></DT>
<DD>
<P>Look up the value bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>. Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>module-variable</CODE>, but also does a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>variable-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the resulting variable, raising an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unbound.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002ddefine_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-define!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name value</EM></DT>
<DD>
<P>Locally bind<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was already locally bound in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, i.e., defined locally and not by an imported module, the value stored in the existing variable will be updated. Otherwise, a new variable will be added to the module, via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>module-add!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-module_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>module-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module name value</EM></DT>
<DD>
<P>Update the binding of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, raising an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not already bound in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are many other reflective procedures available in the default environment. If you find yourself using one of them, please contact the Guile developers so that we can commit to stability for that interface.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Modules-from-C></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#provide-and-require" rel=next>provide and require</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Module-System-Reflection" rel=prev>Module System Reflection</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Modules-from-C-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.9 Accessing Modules from C</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The last sections have described how modules are used in Scheme code, which is the recommended way of creating and accessing modules. You can also work with modules from C, but it is more cumbersome.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are available.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fcall_005fwith_005fcurrent_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_call_with_current_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM (*<VAR>func</VAR>)(void *), void *<VAR>data</VAR>)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and make<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the current module during the call. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>. The return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_call_with_current_module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpublic_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_public_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fpublic_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_public_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Find a the variable bound to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the public interface of the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>.</P>
<P><VAR>module_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of symbols, when represented as a Scheme object, or a space-separated string, in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>case. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_module</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below, for more examples.</P>
<P>Signals an error if no module was found with the given name. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not bound in the module, just returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fprivate_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_private_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fprivate_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_private_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_public_variable</CODE>, but looks in the internals of the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of the public interface. Logically, these procedures should only be called on modules you write.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpublic_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_public_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fpublic_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_public_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fprivate_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_private_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fprivate_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_private_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_public_variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_private_variable</CODE>, but if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not bound in the module, signals an error. Returns a variable, always.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>static SCM eval_string_var;

/* NOTE: It is important that the call to 'my_init'
   happens-before all calls to 'my_eval_string'. */
void my_init (void)
{
  eval_string_var = scm_c_public_lookup ("ice-9 eval-string",
                                         "eval-string");
}

SCM my_eval_string (SCM str)
{
  return scm_call_1 (scm_variable_ref (eval_string_var), str);
}
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fpublic_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_public_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fpublic_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_public_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fprivate_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_private_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fprivate_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_private_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>module_name</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_public_lookup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_private_lookup</CODE>, but additionally dereferences the variable. If the variable object is unbound, signals an error. Returns the value bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module_name</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, there are a number of other lookup-related procedures. We suggest that you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_public_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_private_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>family of procedures instead, if possible.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Return the variable bound to the symbol indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current module. If there is no such binding or the symbol is not bound to a variable, signal an error.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_lookup</CODE>, but the symbol is specified directly.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmodule_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_module_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, const char *<VAR>name</VAR>)</EM></DT>
<DT><A name=index-scm_005fmodule_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_module_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_lookup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_lookup</CODE>, but the specified module is used instead of the current one.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmodule_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_module_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_module_lookup</CODE>, but if the binding does not exist, just returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of raising an error.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To define a value, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_define</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fdefine-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>)</EM></DT>
<DD>
<P>Bind the symbol indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a variable in the current module and set that variable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already bound to a variable, use that. Else create a new variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdefine-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define</CODE>, but the symbol is specified directly.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmodule_005fdefine></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_module_define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, const char *<VAR>name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>)</EM></DT>
<DT><A name=index-scm_005fmodule_005fdefine></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_module_define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_define</CODE>, but the specified module is used instead of the current one.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In some rare cases, you may need to access the variable that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_module_define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would have accessed, without changing the binding of the existing variable, if one is present. In that case, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_module_ensure_local_variable</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmodule_005fensure_005flocal_005fvariable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_module_ensure_local_variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_module_define</CODE>, but if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already locally bound in that module, the variable&#8217;s existing binding is not reset. Returns a variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmodule_005freverse_005flookup></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_module_reverse_lookup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>)</EM></DT>
<DD>
<P>Find the symbol that is bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>module</VAR>. When no such binding is found, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fdefine_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_define_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>, void (*<VAR>init</VAR>)(void *), void *<VAR>data</VAR>)</EM></DT>
<DD>
<P>Define a new module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and make it current while<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>. Return the module.</P>
<P>The parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string with the symbols that make up the module name, separated by spaces. For example, &#8216;<SAMP>"foo bar"</SAMP>&#8217; names the module &#8216;<SAMP>(foo bar)</SAMP>&#8217;.</P>
<P>When there already exists a module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, it is used unchanged, otherwise, an empty module is created.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fresolve_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_resolve_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Find the module name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return it. When it has not already been defined, try to auto-load it. When it can&#8217;t be found that way either, create an empty module. The name is interpreted as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_module</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fuse_005fmodule></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_use_module</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>)</EM></DT>
<DD>
<P>Add the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the uses list of the current module, as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</CODE>. The name is interpreted as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_module</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fexport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_export</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>name</VAR>, ...)</EM></DT>
<DD>
<P>Add the bindings designated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, ... to the public interface of the current module. The list of names is terminated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=provide-and-require></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Environments" rel=next>Environments</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Modules-from-C" rel=prev>Accessing Modules from C</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=provide-and-require-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.10 provide and require</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Aubrey Jaffer, mostly to support his portable Scheme library SLIB, implemented a provide/require mechanism for many Scheme implementations. Library files in SLIB<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>provide</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a feature, and when user programs<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>require</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that feature, the library file is loaded in.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>random.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the SLIB package contains the line</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(provide 'random)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">so to use its procedures, a user would type</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(require 'random)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">and they would magically become available,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>but still have the same names!</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>So this method is nice, but not as good as a full-featured module system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When SLIB is used with Guile, provide and require can be used to access its facilities.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Environments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#provide-and-require" rel=prev>provide and require</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Modules" rel=up>Modules</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Environments-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.19.11 Environments</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-environment-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme, as defined in R5RS, does<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>have a full module system. However it does define the concept of a top-level<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>environment</EM>. Such an environment maps identifiers (symbols) to Scheme objects such as procedures and lists:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#About-Closure">About Closure</A>. In other words, it implements a set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Environments in R5RS can be passed as the second argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation">Fly Evaluation</A>). Three procedures are defined to return environments:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme-report-environment</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>null-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interaction-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation">Fly Evaluation</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, in Guile any module can be used as an R5RS environment, i.e., passed as the second argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note: the following two procedures are available only when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 r5rs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module is loaded:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 r5rs))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scheme_002dreport_002denvironment></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scheme-report-environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>version</EM></DT>
<DT><A name=index-null_002denvironment></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null-environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>version</EM></DT>
<DD>
<P><VAR>version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the exact integer &#8216;5&#8217;, corresponding to revision 5 of the Scheme report (the Revised^5 Report on Scheme).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme-report-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a specifier for an environment that is empty except for all bindings defined in the report that are either required or both optional and supported by the implementation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>null-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a specifier for an environment that is empty except for the (syntactic) bindings for all syntactic keywords defined in the report that are either required or both optional and supported by the implementation.</P>
<P>Currently Guile does not support values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for other revisions of the report.</P>
<P>The effect of assigning (through the use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE>) a variable bound in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme-report-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE>) is unspecified. Currently the environments specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scheme-report-environment</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not immutable in Guile.</P></DD></DL>