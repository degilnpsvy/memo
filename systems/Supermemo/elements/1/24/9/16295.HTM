<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.20 Foreign Function Interface</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-foreign-function-interface></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ffi></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The more one hacks in Scheme, the more one realizes that there are actually two computational worlds: one which is warm and alive, that land of parentheses, and one cold and dead, the land of C and its ilk.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But yet we as programmers live in both worlds, and Guile itself is half implemented in C. So it is that Guile&#8217;s living half pays respect to its dead counterpart, via a spectrum of interfaces to C ranging from dynamic loading of Scheme primitives to dynamic binding of stock C library procedures.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Libraries">Foreign Libraries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Dynamically linking to libraries.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Functions">Foreign Functions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Simple calls to C procedures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#C-Extensions">C Extensions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Extending Guile in C with loadable modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-Extensions">Modules and Extensions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Loading C extensions into modules.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers">Foreign Pointers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing global variables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-FFI">Dynamic FFI</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Calling arbitrary C functions.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Libraries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Functions" rel=next>Foreign Functions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Libraries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.1 Foreign Libraries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most modern Unices have something called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>shared libraries</EM>. This ordinarily means that they have the capability to share the executable image of a library between several running programs to save memory and disk space. But generally, shared libraries give a lot of additional flexibility compared to the traditional static libraries. In fact, calling them &#8216;dynamic&#8217; libraries is as correct as calling them &#8216;shared&#8217;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Shared libraries really give you a lot of flexibility in addition to the memory and disk space savings. When you link a program against a shared library, that library is not closely incorporated into the final executable. Instead, the executable of your program only contains enough information to find the needed shared libraries when the program is actually run. Only then, when the program is starting, is the final step of the linking process performed. This means that you need not recompile all programs when you install a new, only slightly modified version of a shared library. The programs will pick up the changes automatically the next time they are run.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now, when all the necessary machinery is there to perform part of the linking at run-time, why not take the next step and allow the programmer to explicitly take advantage of it from within his program? Of course, many operating systems that support shared libraries do just that, and chances are that Guile will allow you to access this feature from within your Scheme programs. As you might have guessed already, this feature is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynamic linking</EM>.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT18" name=DOCF18><SUP>18</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We titled this section &#8220;foreign libraries&#8221; because although the name &#8220;foreign&#8221; doesn&#8217;t leak into the API, the world of C really is foreign to Scheme &#8211; and that estrangement extends to components of foreign libraries as well, as we see in future sections.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dlink></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-link</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[library]</EM></DT>
<DT><A name=index-scm_005fdynamic_005flink></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_link</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(library)</EM></DT>
<DD>
<P>Find the shared library denoted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a string) and link it into the running Guile application. When everything works out, return a Scheme object suitable for representing the linked object file. Otherwise an error is thrown. How object files are searched is system dependent.</P>
<P>Normally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is just the name of some shared library file that will be searched for in the places where shared libraries usually reside, such as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/lib</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/local/lib</SAMP>.</P>
<P><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not contain an extension such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.so</CODE>. The correct file name extension for the host operating system is provided automatically, according to libltdl&#8217;s rules (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libtool/manual/libtool.html#Libltdl-interface"><CODE>lt_dlopenext</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>Shared Library Support for GNU</CITE>).</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>global symbol handle</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. This handle provides access to the symbols available to the program at run-time, including those exported by the program itself and the shared libraries already loaded.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dobject_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-object?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fdynamic_005fobject_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_object_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a dynamic library handle, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dunlink></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-unlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dobj</EM></DT>
<DT><A name=index-scm_005fdynamic_005funlink></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_unlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(dobj)</EM></DT>
<DD>
<P>Unlink the indicated object file from the application. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have been obtained by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-link</CODE>. After<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-unlink</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been called on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR>, its content is no longer accessible.</P></DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>(define libgl-obj (dynamic-link "libGL"))
libgl-obj
&#8658; #&lt;dynamic-object "libGL"&gt;
(dynamic-unlink libGL-obj)
libGL-obj
&#8658; #&lt;dynamic-object "libGL" (unlinked)&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As you can see, after calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-unlink</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a dynamically linked library, it is marked as &#8216;<SAMP>(unlinked)</SAMP>&#8217; and you are no longer able to use it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-call</CODE>, etc. Whether the library is really removed from you program is system-dependent and will generally not happen when some other parts of your program still use it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When dynamic linking is disabled or not supported on your system, the above functions throw errors, but they are still available.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#C-Extensions" rel=next>C Extensions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Libraries" rel=prev>Foreign Libraries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Functions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.2 Foreign Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The most natural thing to do with a dynamic library is to grovel around in it for a function pointer: a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>foreign function</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exists for that purpose.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dfunc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-func</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name dobj</EM></DT>
<DT><A name=index-scm_005fdynamic_005ffunc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_func</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name, dobj)</EM></DT>
<DD>
<P>Return a &#8220;handle&#8221; for the func<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the shared object referred to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR>. The handle can be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to actually call the function.</P>
<P>Regardless whether your C compiler prepends an underscore &#8216;<SAMP>_</SAMP>&#8217; to the global names in a program, you should<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>include this underscore in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>since it will be added automatically when necessary.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile has static support for calling functions with no arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-call</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dcall></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>func dobj</EM></DT>
<DT><A name=index-scm_005fdynamic_005fcall></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(func, dobj)</EM></DT>
<DD>
<P>Call the C function indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR>. The function is passed no arguments and its return value is ignored. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is something returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-func</CODE>, call that function and ignore<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string , look it up in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dynobj</VAR>; this is equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>(dynamic-call (dynamic-func <VAR>func</VAR> <VAR>dobj</VAR>) #f)
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>dynamic-call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not very powerful. It is mostly intended to be used for calling specially written initialization functions that will then add new primitives to Guile. For example, we do not expect that you will dynamically link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>libX11</SAMP>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then construct a beautiful graphical user interface just by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-call</CODE>. Instead, the usual way would be to write a special Guile-to-X11 glue library that has intimate knowledge about both Guile and X11 and does whatever is necessary to make them inter-operate smoothly. This glue library could then be dynamically linked into a vanilla Guile interpreter and activated by calling its initialization function. That function would add all the new types and primitives to the Guile interpreter that it has to offer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(There is actually another, better option: simply to create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>libX11</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>wrapper in Scheme via the dynamic FFI. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-FFI">Dynamic FFI</A>, for more information.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Given some set of C extensions to Guile, the next logical step is to integrate these glue libraries into the module system of Guile so that you can load new primitives into a running system just as you can load new Scheme code.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dextension></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-extension</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lib init</EM></DT>
<DT><A name=index-scm_005fload_005fextension></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_load_extension</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lib, init)</EM></DT>
<DD>
<P>Load and initialize the extension designated by LIB and INIT. When there is no pre-registered function for LIB/INIT, this is equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(dynamic-call INIT (dynamic-link LIB))
</PRE></DIV>
<P>When there is a pre-registered function, that function is called instead.</P>
<P>Normally, there is no pre-registered function. This option exists only for situations where dynamic linking is unavailable or unwanted. In that case, you would statically link your program with the desired library, and register its init function right after Guile has been initialized.</P>
<P>As for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-link</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lib</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not contain any suffix such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.so</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Libraries">dynamic-link</A>). It should also not contain any directory components. Libraries that implement Guile Extensions should be put into the normal locations for shared libraries. We recommend to use the naming convention<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>libguile-bla-blum</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a extension related to a module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(bla blum)</CODE>.</P>
<P>The normal way for a extension to be used is to write a small Scheme file that defines a module, and to load the extension into this module. When the module is auto-loaded, the extension is loaded as well. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-module (bla blum))

(load-extension "libguile-bla-blum" "bla_init_blum")
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-Extensions" rel=next>Modules and Extensions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Functions" rel=prev>Foreign Functions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Extensions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.3 C Extensions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The most interesting application of dynamically linked libraries is probably to use them for providing<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compiled code modules</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to Scheme programs. As much fun as programming in Scheme is, every now and then comes the need to write some low-level C stuff to make Scheme even more fun.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Not only can you put these new primitives into their own module (see the previous section), you can even put them into a shared library that is only then linked to your running Guile image when it is actually needed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An example will hopefully make everything clear. Suppose we want to make the Bessel functions of the C library available to Scheme in the module &#8216;<SAMP>(math bessel)</SAMP>&#8217;. First we need to write the appropriate glue code to convert the arguments and return values of the functions from Scheme to C and back. Additionally, we need a function that will add them to the set of Guile primitives. Because this is just an example, we will only implement this for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>#include &lt;math.h&gt;
#include &lt;libguile.h&gt;

SCM
j0_wrapper (SCM x)
{
  return scm_from_double (j0 (scm_to_double (x, "j0")));
}

void
init_math_bessel ()
{
  scm_c_define_gsubr ("j0", 1, 0, 0, j0_wrapper);
}
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We can already try to bring this into action by manually calling the low level functions for performing dynamic linking. The C source file needs to be compiled into a shared library. Here is how to do it on GNU/Linux, please refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libtool</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>documentation for how to create dynamically linkable libraries portably.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>gcc -shared -o libbessel.so -fPIC bessel.c
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now fire up Guile:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define bessel-lib (dynamic-link "./libbessel.so"))
(dynamic-call "init_math_bessel" bessel-lib)
(j0 2)
&#8658; 0.223890779141236
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The filename<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>./libbessel.so</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be pointing to the shared library produced with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command above, of course. The second line of the Guile interaction will call the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>init_math_bessel</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function which in turn will register the C function<CODE>j0_wrapper</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the Guile interpreter under the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE>. This function becomes immediately available and we can call it from Scheme.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Fun, isn&#8217;t it? But we are only half way there. This is what<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apropos</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has to say about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>(apropos "j0")
-| (guile-user): j0     #&lt;primitive-procedure j0&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As you can see,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is contained in the root module, where all the other Guile primitives like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>, etc live. In general, a primitive is put into whatever module is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>current module</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_gsubr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A compiled module should have a specially named<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>module init function</EM>. Guile knows about this special name and will call that function automatically after having linked in the shared library. For our example, we replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>init_math_bessel</CODE>with the following code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>bessel.c</SAMP>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>void
init_math_bessel (void *unused)
{
  scm_c_define_gsubr ("j0", 1, 0, 0, j0_wrapper);
  scm_c_export ("j0", NULL);
}

void
scm_init_math_bessel_module ()
{
  scm_c_define_module ("math bessel", init_math_bessel, NULL);   
}
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The general pattern for the name of a module init function is: &#8216;<SAMP>scm_init_</SAMP>&#8217;, followed by the name of the module where the individual hierarchical components are concatenated with underscores, followed by &#8216;<SAMP>_module</SAMP>&#8217;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">After<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>libbessel.so</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been rebuilt, we need to place the shared library into the right place.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once the module has been correctly installed, it should be possible to use it like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>guile&gt; (load-extension "./libbessel.so" "scm_init_math_bessel_module")
guile&gt; (use-modules (math bessel))
guile&gt; (j0 2)
0.223890779141236
guile&gt; (apropos "j0")
-| (math bessel): j0      #&lt;primitive-procedure j0&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">That&#8217;s it!</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Modules-and-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=next>Foreign Pointers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#C-Extensions" rel=prev>C Extensions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Modules-and-Extensions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.4 Modules and Extensions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new primitives that you add to Guile with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_gsubr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Primitive-Procedures">Primitive Procedures</A>) or with any of the other mechanisms are placed into the module that is current when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_define_gsubr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is executed. Extensions loaded from the REPL, for example, will be placed into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile-user)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, if the REPL module was not changed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To define C primitives within a specific module, the simplest way is:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-module (foo bar))
(load-extension "foobar-c-code" "foo_bar_init")
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-extensiondir-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When loaded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules (foo bar))</CODE>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-extension</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call looks for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>foobar-c-code.so</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc) object file in Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extensiondir</CODE>, which is usually a subdirectory of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libdir</CODE>. For example, if your libdir is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/lib</SAMP>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extensiondir</CODE>for the Guile 2.0.<VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>series will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/lib/guile/2.0/</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The extension path includes the major and minor version of Guile (the &#8220;effective version&#8221;), because Guile guarantees compatibility within a given effective version. This allows you to install different versions of the same extension for different versions of Guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the extension is not found in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extensiondir</CODE>, Guile will also search the standard system locations, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/lib</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/usr/local/lib</SAMP>. It is preferable, however, to keep your extension out of the system library path, to prevent unintended interference with other dynamically-linked C libraries.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If someone installs your module to a non-standard location then the object file won&#8217;t be found. You can address this by inserting the install location in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>foo/bar.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. This is convenient for the user and also guarantees the intended object is read, even if stray older or newer versions are in the loader&#8217;s path.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The usual way to specify an install location is with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>prefix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the configure stage, for instance &#8216;<SAMP>./configure prefix=/opt</SAMP>&#8217; results in library files as say<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/opt/lib/foobar-c-code.so</SAMP>. When using Autoconf (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/autoconf/manual/autoconf.html#Top">Introduction</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU Autoconf Manual</CITE>), the library location is in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libdir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable. Its value is intended to be expanded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE>, and can by substituted into a source file like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>foo.scm.in</SAMP></P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-module (foo bar))
(load-extension "XXextensiondirXX/foobar-c-code" "foo_bar_init")
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">with the following in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>Makefile</SAMP>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/sed/manual/sed.html#Top">Introduction</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>SED, A Stream Editor</CITE>),</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>foo.scm: foo.scm.in
        sed 's|XXextensiondirXX|$(libdir)/guile/2.0|' &lt;foo.scm.in &gt;foo.scm
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The actual pattern<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XXextensiondirXX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is arbitrary, it&#8217;s only something which doesn&#8217;t otherwise occur. If several modules need the value, it can be easier to create one<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>foo/config.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a define of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extensiondir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>location, and use that as required.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-module (foo config))
(define-public foo-config-extensiondir "XXextensiondirXX"")
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Such a file might have other locations too, for instance a data directory for auxiliary files, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localedir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the module has its own<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>message catalogue (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization">Internationalization</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It will be noted all of the above requires that the Scheme code to be found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%load-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Load-Paths">Load Paths</A>). Presently it&#8217;s left up to the system administrator or each user to augment that path when installing Guile modules in non-default locations. But having reached the Scheme code, that code should take care of hitting any of its own private files etc.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Pointers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-FFI" rel=next>Dynamic FFI</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Modules-and-Extensions" rel=prev>Modules and Extensions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Pointers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.5 Foreign Pointers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The previous sections have shown how Guile can be extended at runtime by loading compiled C extensions. This approach is all well and good, but wouldn&#8217;t it be nice if we didn&#8217;t have to write any C at all? This section takes up the problem of accessing C values from Scheme, and the next discusses C functions.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Types">Foreign Types</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Expressing C types in Scheme.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Variables">Foreign Variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Pointers to C symbols.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Void-Pointers-and-Byte-Access">Void Pointers and Byte Access</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Pointers into the ether.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Structs">Foreign Structs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Packing and unpacking structs.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Variables" rel=next>Foreign Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=up>Foreign Pointers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Types-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.20.5.1 Foreign Types</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first impedance mismatch that one sees between C and Scheme is that in C, the storage locations (variables) are typed, but in Scheme types are associated with values, not variables. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Values-and-Variables">Values and Variables</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So when describing a C function or a C structure so that it can be accessed from Scheme, the data types of the parameters or fields must be passed explicitly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These &#8220;C type values&#8221; may be constructed using the constants and procedures from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system foreign)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, which may be loaded like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (system foreign))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>(system foreign)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exports a number of values expressing the basic C types:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-int8></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>int8</STRONG></DT>
<DT><A name=index-uint8></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uint8</STRONG></DT>
<DT><A name=index-uint16></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uint16</STRONG></DT>
<DT><A name=index-int16></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>int16</STRONG></DT>
<DT><A name=index-uint32></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uint32</STRONG></DT>
<DT><A name=index-int32></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>int32</STRONG></DT>
<DT><A name=index-uint64></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uint64</STRONG></DT>
<DT><A name=index-int64></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>int64</STRONG></DT>
<DT><A name=index-float></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>float</STRONG></DT>
<DT><A name=index-double></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>double</STRONG></DT>
<DD>
<P>These values represent the C numeric types of the specified sizes and signednesses.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition there are some convenience bindings for indicating types of platform-dependent size:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-int></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>int</STRONG></DT>
<DT><A name=index-unsigned_002dint></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unsigned-int</STRONG></DT>
<DT><A name=index-long></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long</STRONG></DT>
<DT><A name=index-unsigned_002dlong></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unsigned-long</STRONG></DT>
<DT><A name=index-size_005ft-1></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>size_t</STRONG></DT>
<DT><A name=index-ssize_005ft></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ssize_t</STRONG></DT>
<DT><A name=index-ptrdiff_005ft></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ptrdiff_t</STRONG></DT>
<DD>
<P>Values exported by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system foreign)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, representing C numeric types. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a 64-bit platform.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-void-1></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>void</STRONG></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. It can be used as the first argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pointer-&gt;procedure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to wrap a C function that returns nothing.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used by convention to denote pointer types. Procedures detailed in the following sections, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pointer-&gt;procedure</CODE>, accept it as a type descriptor.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Void-Pointers-and-Byte-Access" rel=next>Void Pointers and Byte Access</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Types" rel=prev>Foreign Types</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=up>Foreign Pointers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.20.5.2 Foreign Variables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pointers to variables in the current address space may be looked up dynamically using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-pointer</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dpointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name dobj</EM></DT>
<DT><A name=index-scm_005fdynamic_005fpointer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name, dobj)</EM></DT>
<DD>
<P>Return a &#8220;wrapped pointer&#8221; for the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the shared object referred to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dobj</VAR>. The returned pointer points to a C object.</P>
<P>Regardless whether your C compiler prepends an underscore &#8216;<SAMP>_</SAMP>&#8217; to the global names in a program, you should<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>include this underscore in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>since it will be added automatically when necessary.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, currently Guile has a variable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_numptob</CODE>, as part of its API. It is declared as a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>. So, to create a handle pointing to that foreign value, we do:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (system foreign))
(define numptob (dynamic-pointer "scm_numptob" (dynamic-link)))
numptob
&#8658; #&lt;pointer 0x7fb35b1b4688&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(The next section discusses ways to dereference pointers.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-pointer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a Scheme wrapper for a C pointer.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_002daddress></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer-address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer</EM></DT>
<DT><A name=index-scm_005fpointer_005faddress></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pointer_address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pointer)</EM></DT>
<DD>
<P>Return the numerical value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(pointer-address numptob)
&#8658; 139984413364296 ; YMMV
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dpointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>address [finalizer]</EM></DT>
<DD>
<P>Return a foreign pointer object pointing to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>address</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>finalizer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed, it should be a pointer to a one-argument C function that will be called when the pointer object becomes unreachable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer object,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025null_002dpointer></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%null-pointer</STRONG></DT>
<DD>
<P>A foreign pointer whose value is 0.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-null_002dpointer_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null-pointer?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the null pointer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For the purpose of passing SCM values directly to foreign functions, and allowing them to return SCM values, Guile also supports some unsafe casting operators.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_002d_003epointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm-&gt;pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm</EM></DT>
<DD>
<P>Return a foreign pointer object with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>object-address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scm</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_002d_003escm></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer-&gt;scm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer</EM></DT>
<DD>
<P>Unsafely cast<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a Scheme object. Cross your fingers!</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Sometimes you want to give C extensions access to the dynamic FFI. At that point, the names get confusing, because &#8220;pointer&#8221; can refer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object that wraps a pointer, or to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. We will try to use &#8220;pointer object&#8221; to refer to Scheme objects, and &#8220;pointer value&#8221; to refer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fpointer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *ptr, void (*finalizer) (void*))</EM></DT>
<DD>
<P>Create a pointer object from a pointer value.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>finalizer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is non-null, Guile arranges to call it on the pointer value at some point after the pointer object becomes collectable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fpointer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void*</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Unpack the pointer value from a pointer object.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Void-Pointers-and-Byte-Access></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Structs" rel=next>Foreign Structs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Variables" rel=prev>Foreign Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=up>Foreign Pointers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Void-Pointers-and-Byte-Access-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.20.5.3 Void Pointers and Byte Access</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Wrapped pointers are untyped, so they are essentially equivalent to C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointers. As in C, the memory region pointed to by a pointer can be accessed at the byte level. This is achieved using<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytevectors</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>). The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs bytevectors)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module contains procedures that can be used to convert byte sequences to Scheme objects such as strings, floating point numbers, or integers.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_002d_003ebytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer len [offset [uvec_type]]</EM></DT>
<DT><A name=index-scm_005fpointer_005fto_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pointer_to_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pointer, len, offset, uvec_type)</EM></DT>
<DD>
<P>Return a bytevector aliasing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR>.</P>
<P>The user may specify an alternate default interpretation for the memory by passing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, to indicate that the memory is an array of elements of that type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be something that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would return, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s16</CODE>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed, it specifies the offset in bytes relative to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the memory region aliased by the returned bytevector.</P>
<P>Mutating the returned bytevector mutates the memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR>, so buckle your seatbelts.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003epointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv [offset]</EM></DT>
<DT><A name=index-scm_005fbytevector_005fto_005fpointer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_to_pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, offset)</EM></DT>
<DD>
<P>Return a pointer pointer aliasing the memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes after<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to these primitives, convenience procedures are available:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dereference_002dpointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dereference-pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer</EM></DT>
<DD>
<P>Assuming<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>points to a memory region that holds a pointer, return this pointer.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003epointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string [encoding]</EM></DT>
<DD>
<P>Return a foreign pointer to a nul-terminated copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, defaulting to the current locale encoding. The C string is freed when the returned foreign pointer becomes unreachable.</P>
<P>This is the Scheme equivalent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_stringn</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pointer [length] [encoding]</EM></DT>
<DD>
<P>Return the string representing the C string pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-1</CODE>, the string is assumed to be nul-terminated. Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of bytes in memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pointer</VAR>. The C string is assumed to be in the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, defaulting to the current locale encoding.</P>
<P>This is the Scheme equivalent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_stringn</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-wrapped-pointer-types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most object-oriented C libraries use pointers to specific data structures to identify objects. It is useful in such cases to reify the different pointer types as disjoint Scheme types. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-wrapped-pointer-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro simplifies this.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dwrapped_002dpointer_002dtype></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-wrapped-pointer-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type-name pred wrap unwrap print</EM></DT>
<DD>
<P>Define helper procedures to wrap pointer objects into Scheme objects with a disjoint type. Specifically, this macro defines:</P>
<UL>
<LI><VAR>pred</VAR>, a predicate for the new Scheme type;</LI>
<LI><VAR>wrap</VAR>, a procedure that takes a pointer object and returns an object that satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>;</LI>
<LI><VAR>unwrap</VAR>, which does the reverse.</LI></UL>
<P><VAR>wrap</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>preserves pointer identity, for two pointer objects<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(eq? (<VAR>wrap</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p1</VAR>) (<VAR>wrap</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p2</VAR>)) &#8658; #t</CODE>.</P>
<P>Finally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should name a user-defined procedure to print such objects. The procedure is passed the wrapped object and a port to write to.</P>
<P>For example, assume we are wrapping a C library that defines a type,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle_t</CODE>, and functions that can be passed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle_t *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointers to manipulate them. We could write:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-wrapped-pointer-type bottle
  bottle?
  wrap-bottle unwrap-bottle
  (lambda (b p)
    (format p "#&lt;bottle of ~a ~x&gt;"
            (bottle-contents b)
            (pointer-address (unwrap-bottle b)))))

(define grab-bottle
  ;; Wrapper for `bottle_t *grab (void)'.
  (let ((grab (pointer-&gt;procedure '*
                                  (dynamic-func "grab_bottle" libbottle)
                                  '())))
    (lambda ()
      "Return a new bottle."
      (wrap-bottle (grab)))))

(define bottle-contents
  ;; Wrapper for `const char *bottle_contents (bottle_t *)'.
  (let ((contents (pointer-&gt;procedure '*
                                      (dynamic-func "bottle_contents"
                                                     libbottle)
                                      '(*))))
    (lambda (b)
      "Return the contents of B."
      (pointer-&gt;string (contents (unwrap-bottle b))))))

(write (grab-bottle))
&#8658; #&lt;bottle of Ch&#226;teau Haut-Brion 803d36&gt;
</PRE></DIV>
<P>In this example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>grab-bottle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is guaranteed to return a genuine<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object satisfying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle?</CODE>. Likewise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle-contents</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>errors out when its argument is not a genuine<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bottle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Going back to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_numptob</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>example above, here is how we can read its value as a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>integer:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (rnrs bytevectors))

(bytevector-uint-ref (pointer-&gt;bytevector numptob (sizeof long))
                     0 (native-endianness)
                     (sizeof long))
&#8658; 8
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If we wanted to corrupt Guile&#8217;s internal state, we could set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_numptob</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to another value; but we shouldn&#8217;t, because that variable is not meant to be set. Indeed this point applies more widely: the C API is a dangerous place to be. Not only might setting a value crash your program, simply accessing the data pointed to by a dangling pointer or similar can prove equally disastrous.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Structs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Void-Pointers-and-Byte-Access" rel=prev>Void Pointers and Byte Access</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=up>Foreign Pointers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Foreign-Structs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.20.5.4 Foreign Structs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, one last note on foreign values before moving on to actually calling foreign functions. Sometimes you need to deal with C structs, which requires interpreting each element of the struct according to the its type, offset, and alignment. Guile has some primitives to support this.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sizeof></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sizeof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type</EM></DT>
<DT><A name=index-scm_005fsizeof></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sizeof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(type)</EM></DT>
<DD>
<P>Return the size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, in bytes.</P>
<P><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a valid C type, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. Alternately<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, in which case the size of a pointer is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may also be a list of types, in which case the size of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with ABI-conventional packing is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alignof></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alignof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type</EM></DT>
<DT><A name=index-scm_005falignof></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_alignof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(type)</EM></DT>
<DD>
<P>Return the alignment of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, in bytes.</P>
<P><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a valid C type, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. Alternately<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, in which case the alignment of a pointer is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may also be a list of types, in which case the alignment of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with ABI-conventional packing is returned.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also provides some convenience methods to pack and unpack foreign pointers wrapping C structs.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dc_002dstruct></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-c-struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>types vals</EM></DT>
<DD>
<P>Create a foreign pointer to a C struct containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>types</CODE>.</P>
<P><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>types</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be lists of the same length.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dc_002dstruct></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-c-struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>foreign types</EM></DT>
<DD>
<P>Parse a foreign pointer to a C struct, returning a list of values.</P>
<P><CODE>types</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of C types.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, to create and parse the equivalent of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct { int64_t a; uint8_t b; }</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(parse-c-struct (make-c-struct (list int64 uint8)
                               (list 300 43))
                (list int64 uint8))
&#8658; (300 43)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As yet, Guile only has convenience routines to support conventionally-packed structs. But given the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bytevector-&gt;pointer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pointer-&gt;bytevector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>routines, one can create and parse tightly packed structs and unions by hand. See the code for<CODE>(system foreign)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-FFI></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Pointers" rel=prev>Foreign Pointers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Function-Interface" rel=up>Foreign Function Interface</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-FFI-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.20.6 Dynamic FFI</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Of course, the land of C is not all nouns and no verbs: there are functions too, and Guile allows you to call them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pointer_002d_003eprocedure></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pointer-&gt;procedure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>return_type func_ptr arg_types</EM></DT>
<DT><A name=index-scm_005fpointer_005fto_005fprocedure></A>C Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pointer_to_procedure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(return_type, func_ptr, arg_types)</EM></DT>
<DD>
<P>Make a foreign function.</P>
<P>Given the foreign void pointer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func_ptr</VAR>, its argument and return types<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg_types</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>return_type</VAR>, return a procedure that will pass arguments to the foreign function and return appropriate values.</P>
<P><VAR>arg_types</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of foreign types.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a foreign type. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Types">Foreign Types</A>, for more information on foreign types.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a better definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math bessel)</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-module (math bessel)
  #:use-module (system foreign)
  #:export (j0))

(define libm (dynamic-link "libm"))

(define j0
  (pointer-&gt;procedure double
                      (dynamic-func "j0" libm)
                      (list double)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">That&#8217;s it! No C at all.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Numeric arguments and return values from foreign functions are represented as Scheme values. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the above example takes a Scheme number as its argument, and returns a Scheme number.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pointers may be passed to and returned from foreign functions as well. In that case the type of the argument or return value should be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, indicating a pointer. For example, the following code makes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>available to Scheme:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define memcpy
  (let ((this (dynamic-link)))
    (pointer-&gt;procedure '*
                        (dynamic-func "memcpy" this)
                        (list '* '* size_t))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE>, one must pass it foreign pointers:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (rnrs bytevectors))

(define src-bits
  (u8-list-&gt;bytevector '(0 1 2 3 4 5 6 7)))
(define src
  (bytevector-&gt;pointer src-bits))
(define dest
  (bytevector-&gt;pointer (make-bytevector 16 0)))

(memcpy dest src (bytevector-length src-bits))

(bytevector-&gt;u8-list (pointer-&gt;bytevector dest 16))
&#8658; (0 1 2 3 4 5 6 7 0 0 0 0 0 0 0 0)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One may also pass structs as values, passing structs as foreign pointers. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Foreign-Structs">Foreign Structs</A>, for more information on how to express struct types and struct values.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8220;Out&#8221; arguments are passed as foreign pointers. The memory pointed to by the foreign pointer is mutated in place.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>;; struct timeval {
;;      time_t      tv_sec;     /* seconds */
;;      suseconds_t tv_usec;    /* microseconds */
;; };
;; assuming fields are of type "long"

(define gettimeofday
  (let ((f (pointer-&gt;procedure
            int
            (dynamic-func "gettimeofday" (dynamic-link))
            (list '* '*)))
        (tv-type (list long long)))
    (lambda ()
      (let* ((timeval (make-c-struct tv-type (list 0 0)))
             (ret (f timeval %null-pointer)))
        (if (zero? ret)
            (apply values (parse-c-struct timeval tv-type))
            (error "gettimeofday returned an error" ret))))))

(gettimeofday)    
&#8658; 1270587589
&#8658; 499553
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As you can see, this interface to foreign functions is at a very low, somewhat dangerous level<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT19" name=DOCF19><SUP>19</SUP></A>.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-callbacks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The FFI can also work in the opposite direction: making Scheme procedures callable from C. This makes it possible to use Scheme procedures as &#8220;callbacks&#8221; expected by C function.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-procedure_002d_003epointer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>procedure-&gt;pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>return-type proc arg-types</EM></DT>
<DT><A name=index-scm_005fprocedure_005fto_005fpointer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_procedure_to_pointer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(return_type, proc, arg_types)</EM></DT>
<DD>
<P>Return a pointer to a C function of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>return-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>taking arguments of types<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg-types</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a list) and behaving as a proxy to procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. Thus<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>&#8217;s arity, supported argument types, and return type should match<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>return-type</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg-types</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an example, here&#8217;s how the C library&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>array sorting function can be made accessible to Scheme (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Array-Sort-Function"><CODE>qsort</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>):</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define qsort!
  (let ((qsort (pointer-&gt;procedure void
                                   (dynamic-func "qsort"
                                                 (dynamic-link))
                                   (list '* size_t size_t '*))))
    (lambda (bv compare)
      ;; Sort bytevector BV in-place according to comparison
      ;; procedure COMPARE.
      (let ((ptr (procedure-&gt;pointer int
                                     (lambda (x y)
                                       ;; X and Y are pointers so,
                                       ;; for convenience, dereference
                                       ;; them before calling COMPARE.
                                       (compare (dereference-uint8* x)
                                                (dereference-uint8* y)))
                                     (list '* '*))))
        (qsort (bytevector-&gt;pointer bv)
               (bytevector-length bv) 1 ;; we're sorting bytes
               ptr)))))

(define (dereference-uint8* ptr)
  ;; Helper function: dereference the byte pointed to by PTR.
  (let ((b (pointer-&gt;bytevector ptr 1)))
    (bytevector-u8-ref b 0)))

(define bv
  ;; An unsorted array of bytes.
  (u8-list-&gt;bytevector '(7 1 127 3 5 4 77 2 9 0)))

;; Sort BV.
(qsort! bv (lambda (x y) (- x y)))

;; Let's see what the sorted array looks like:
(bytevector-&gt;u8-list bv)
&#8658; (0 1 2 3 4 5 7 9 77 127)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">And voil&#224;!</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>procedure-&gt;pointer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supported (and not defined) on a few exotic architectures. Thus, user code may need to check<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(defined? 'procedure-&gt;pointer)</CODE>. Nevertheless, it is available on many architectures, including (as of libffi 3.0.9) x86, ia64, SPARC, PowerPC, ARM, and MIPS, to name a few.