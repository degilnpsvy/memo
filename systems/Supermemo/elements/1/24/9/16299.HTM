<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.24 Support for Internationalization</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-internationalization></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-i18n></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides internationalization<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT20" name=DOCF20><SUP>20</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>support for Scheme programs in two ways. First, procedures to manipulate text and data in a way that conforms to particular cultural conventions (i.e., in a &#8220;locale-dependent&#8221; way) are provided in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE>. Second, Guile allows the use of GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to translate program message strings.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#i18n-Introduction">i18n Introduction</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Introduction to Guile&#8217;s i18n support.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Text-Collation">Text Collation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sorting strings and characters.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Character-Case-Mapping">Character Case Mapping</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Case mapping.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output">Number Input and Output</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Parsing and printing numbers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Locale-Information">Accessing Locale Information</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Detailed locale information.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Gettext-Support">Gettext Support</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Translating message strings.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=i18n-Introduction></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Text-Collation" rel=next>Text Collation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=prev>Internationalization</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Internationalization-with-Guile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.1 Internationalization with Guile</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to make use of the functions described thereafter, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module must be imported in the usual way:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 i18n))
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cultural-conventions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides procedures to manipulate text and other data in a way that conforms to the cultural conventions chosen by the user. Each region of the world or language has its own customs to, for instance, represent real numbers, classify characters, collate text, etc. All these aspects comprise the so-called &#8220;cultural conventions&#8221; of that region or language.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale-category></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Computer systems typically refer to a set of cultural conventions as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>locale</EM>. For each particular aspect that comprise those cultural conventions, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>locale category</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined. For instance, the way characters are classified is defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LC_CTYPE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>category, while the language in which program messages are issued to the user is defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LC_MESSAGES</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>category (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">General Locale Information</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details).</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale-object></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures provided by this module allow the development of programs that adapt automatically to any locale setting. As we will see later, many of these procedures can optionally take a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>locale object</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument. This additional argument defines the locale settings that must be followed by the invoked procedure. When it is omitted, then the current locale settings of the process are followed (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales"><CODE>setlocale</CODE></A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures allow the manipulation of such locale objects.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dlocale></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-locale</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>category-list locale-name [base-locale]</EM></DT>
<DT><A name=index-scm_005fmake_005flocale></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_locale</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(category_list, locale_name, base_locale)</EM></DT>
<DD>
<P>Return a reference to a data structure representing a set of locale datasets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a string denoting a particular locale (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aa_DJ"</CODE>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be either a list of locale categories or a single category as used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales"><CODE>setlocale</CODE></A>). Optionally, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>base-locale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed, it should be a locale object denoting settings for categories not listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category-list</VAR>.</P>
<P>The following invocation creates a locale object that combines the use of Swedish for messages and character classification with the default settings for the other categories (i.e., the settings of the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>locale which usually represents conventions in use in the USA):</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-locale (list LC_MESSAGES LC_CTYPE) "sv_SE")
</PRE></DIV>
<P>The following example combines the use of Esperanto messages and conventions with monetary conventions from Croatia:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-locale LC_MONETARY "hr_HR"
             (make-locale LC_ALL "eo_EO"))
</PRE></DIV>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Errors">Handling Errors</A>) is raised by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not match any of the locales compiled on the system. Note that on non-GNU systems, this error may be raised later, when the locale object is actually used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005flocale_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_locale_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a locale object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025global_002dlocale></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%global-locale</STRONG></DT>
<DT><A name=index-scm_005fglobal_005flocale></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_global_locale</STRONG></DT>
<DD>
<P>This variable is bound to a locale object denoting the current process locale as installed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>). It may be used like any other locale object, including as a third argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>, for instance.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Text-Collation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Character-Case-Mapping" rel=next>Character Case Mapping</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#i18n-Introduction" rel=prev>i18n Introduction</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Text-Collation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.2 Text Collation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures provide support for text collation, i.e., locale-dependent string and character sorting.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlocale_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, locale)</EM></DT>
<DT><A name=index-string_002dlocale_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, locale)</EM></DT>
<DT><A name=index-string_002dlocale_002dci_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fci_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_ci_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, locale)</EM></DT>
<DT><A name=index-string_002dlocale_002dci_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fci_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_ci_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, locale)</EM></DT>
<DD>
<P>Compare strings<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a locale-dependent way. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, it should be locale object (as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>) and will be used to perform the comparison; otherwise, the current system locale is used. For the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants, the comparison is made in a case-insensitive way.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlocale_002dci_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fci_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_ci_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, locale)</EM></DT>
<DD>
<P>Compare strings<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a case-insensitive, and locale-dependent way. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, it should be a locale object (as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>) and will be used to perform the comparison; otherwise, the current system locale is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlocale_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c1 c2 [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c1, c2, locale)</EM></DT>
<DT><A name=index-char_002dlocale_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c1 c2 [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c1, c2, locale)</EM></DT>
<DT><A name=index-char_002dlocale_002dci_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c1 c2 [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fci_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_ci_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c1, c2, locale)</EM></DT>
<DT><A name=index-char_002dlocale_002dci_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c1 c2 [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fci_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_ci_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c1, c2, locale)</EM></DT>
<DD>
<P>Compare characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a locale object as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>) or the current locale. For the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants, the comparison is made in a case-insensitive way.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlocale_002dci_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c1 c2 [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fci_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_ci_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(c1, c2, locale)</EM></DT>
<DD>
<P>Return true if character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c2</VAR>, in a case insensitive way according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to the current locale.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Case-Mapping></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output" rel=next>Number Input and Output</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Text-Collation" rel=prev>Text Collation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Case-Mapping-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.3 Character Case Mapping</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures below provide support for &#8220;character case mapping&#8221;, i.e., to convert characters or strings to their upper-case or lower-case equivalent. Note that SRFI-13 provides procedures that look similar (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Alphabetic-Case-Mapping">Alphabetic Case Mapping</A>). However, the SRFI-13 procedures are locale-independent. Therefore, they do not take into account specificities of the customs in use in a particular language or region of the world. For instance, while most languages using the Latin alphabet map lower-case letter &#8220;i&#8221; to upper-case letter &#8220;I&#8221;, Turkish maps lower-case &#8220;i&#8221; to &#8220;Latin capital letter I with dot above&#8221;. The following procedures allow programmers to provide idiomatic character mapping.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlocale_002ddowncase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr, locale)</EM></DT>
<DD>
<P>Return the lowercase character that corresponds to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlocale_002dupcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr, locale)</EM></DT>
<DD>
<P>Return the uppercase character that corresponds to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlocale_002dtitlecase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-locale-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr [locale]</EM></DT>
<DT><A name=index-scm_005fchar_005flocale_005ftitlecase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_locale_titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr, locale)</EM></DT>
<DD>
<P>Return the titlecase character that corresponds to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlocale_002dupcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, locale)</EM></DT>
<DD>
<P>Return a new string that is the uppercase version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlocale_002ddowncase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, locale)</EM></DT>
<DD>
<P>Return a new string that is the down-case version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlocale_002dtitlecase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-locale-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [locale]</EM></DT>
<DT><A name=index-scm_005fstring_005flocale_005ftitlecase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_locale_titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, locale)</EM></DT>
<DD>
<P>Return a new string that is the titlecase version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Number-Input-and-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Locale-Information" rel=next>Accessing Locale Information</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Character-Case-Mapping" rel=prev>Character Case Mapping</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Number-Input-and-Output-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.4 Number Input and Output</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures allow programs to read and write numbers written according to a particular locale. As an example, in English, &#8220;ten thousand and a half&#8221; is usually written<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>10,000.5</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>while in French it is written<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>10 000,5</CODE>. These procedures allow such differences to be taken into account.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-strtod></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dstring_002d_003einteger></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-string-&gt;integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [base [locale]]</EM></DT>
<DT><A name=index-scm_005flocale_005fstring_005fto_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_locale_string_to_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, base, locale)</EM></DT>
<DD>
<P>Convert string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into an integer according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a locale object as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>) or the current process locale. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, then it determines the base of the integer being read (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an hexadecimal number,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>10</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a decimal number); by default, decimal numbers are read. Return two values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>): an integer (on success) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and the number of characters read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on failure).</P>
<P>This function is based on the C library&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-of-Integers"><CODE>strtol</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-strtod-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dstring_002d_003einexact></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-string-&gt;inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [locale]</EM></DT>
<DT><A name=index-scm_005flocale_005fstring_005fto_005finexact></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_locale_string_to_inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, locale)</EM></DT>
<DD>
<P>Convert string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into an inexact number according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a locale object as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE>) or the current process locale. Return two values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>): an inexact number (on success) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and the number of characters read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on failure).</P>
<P>This function is based on the C library&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-of-Floats"><CODE>strtod</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-number_002d_003elocale_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>number-&gt;locale-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>number [fraction-digits [locale]]</EM></DT>
<DD>
<P>Convert<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an inexact) into a string according to the cultural conventions of either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a locale object) or the current locale. Optionally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fraction-digits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be bound to an integer specifying the number of fractional digits to be displayed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-monetary_002damount_002d_003elocale_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>monetary-amount-&gt;locale-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>amount intl? [locale]</EM></DT>
<DD>
<P>Convert<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>amount</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an inexact denoting a monetary amount) into a string according to the cultural conventions of either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a locale object) or the current locale. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intl?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, then the international monetary format for the given locale is used (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Currency-Symbol">international and locale monetary formats</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Locale-Information></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Gettext-Support" rel=next>Gettext Support</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output" rel=prev>Number Input and Output</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Locale-Information-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.5 Accessing Locale Information</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-nl_005flanginfo></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-low_002dlevel-locale-information></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is sometimes useful to obtain very specific information about a locale such as the word it uses for days or months, its format for representing floating-point figures, etc. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides support for this in a way that is similar to the libc functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nl_langinfo ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localeconv ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Locale-Information">accessing locale information from C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>). The available functions are listed below.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>Return the name of the encoding (a string whose interpretation is system-dependent) of either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions deal with dates and times.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>day [locale]</EM></DT>
<DT><A name=index-locale_002dday_002dshort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-day-short</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>day [locale]</EM></DT>
<DT><A name=index-locale_002dmonth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-month</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>month [locale]</EM></DT>
<DT><A name=index-locale_002dmonth_002dshort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-month-short</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>month [locale]</EM></DT>
<DD>
<P>Return the word (a string) used in either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale to name the day (or month) denoted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>day</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>month</VAR>), an integer between 1 and 7 (or 1 and 12). The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-short</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants provide an abbreviation instead of a full name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dam_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-am-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dpm_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-pm-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>Return a (potentially empty) string that is used to denote<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>ante meridiem</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>post meridiem</I>) hours in 12-hour format.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002ddate_002btime_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-date+time-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002ddate_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-date-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dtime_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-time-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dtime_002bam_002fpm_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-time+am/pm-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dera_002ddate_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-era-date-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dera_002ddate_002btime_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-era-date+time-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dera_002dtime_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-era-time-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>These procedures return format strings suitable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>) that may be used to display (part of) a date/time according to certain constraints and to the conventions of either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#The-Elegant-and-Fast-Way">the<CODE>nl_langinfo ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>items</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dera></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-era</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dera_002dyear></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-era-year</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>These functions return, respectively, the era and the year of the relevant era used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale. Most locales do not define this value. In this case, the empty string is returned. An example of a locale that does define this value is the Japanese one.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures give information about number representation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002ddecimal_002dpoint></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-decimal-point</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dthousands_002dseparator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-thousands-separator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>These functions return a string denoting the representation of the decimal point or that of the thousand separator (respectively) for either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002ddigit_002dgrouping></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-digit-grouping</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>Return a (potentially circular) list of integers denoting how digits of the integer part of a number are to be grouped, starting at the decimal point and going to the left. The list contains integers indicating the size of the successive groups, from right to left. If the list is non-circular, then no grouping occurs for digits beyond the last group.</P>
<P>For instance, if the returned list is a circular list that contains only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the thousand separator is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>","</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(as is the case with English locales), then the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>12345678</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be printed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>12,345,678</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures deal with the representation of monetary amounts. Some of them take an additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intl?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument (a boolean) that tells whether the international or local monetary conventions for the given locale are to be used.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dmonetary_002ddecimal_002dpoint></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-decimal-point</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dmonetary_002dthousands_002dseparator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-thousands-separator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dmonetary_002dgrouping></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-grouping</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>These are the monetary counterparts of the above procedures. These procedures apply to monetary amounts.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dcurrency_002dsymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-currency-symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DD>
<P>Return the currency symbol (a string) of either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale.</P>
<P>The following example illustrates the difference between the local and international monetary formats:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define us (make-locale LC_MONETARY "en_US"))
(locale-currency-symbol #f us)
&#8658; "-$"
(locale-currency-symbol #t us)
&#8658; "USD "
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dmonetary_002dfractional_002ddigits></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-fractional-digits</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DD>
<P>Return the number of fractional digits to be used when printing monetary amounts according to either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the current locale. If the locale does not specify it, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dcurrency_002dsymbol_002dprecedes_002dpositive_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-currency-symbol-precedes-positive?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DT><A name=index-locale_002dcurrency_002dsymbol_002dprecedes_002dnegative_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-currency-symbol-precedes-negative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DT><A name=index-locale_002dpositive_002dseparated_002dby_002dspace_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-positive-separated-by-space?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DT><A name=index-locale_002dnegative_002dseparated_002dby_002dspace_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-negative-separated-by-space?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>intl? [locale]</EM></DT>
<DD>
<P>These procedures return a boolean indicating whether the currency symbol should precede a positive/negative number, and whether a whitespace should be inserted between the currency symbol and a positive/negative amount.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dmonetary_002dpositive_002dsign></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-positive-sign</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dmonetary_002dnegative_002dsign></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-monetary-negative-sign</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>Return a string denoting the positive (respectively negative) sign that should be used when printing a monetary amount.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dpositive_002dsign_002dposition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-positive-sign-position</STRONG></DT>
<DT><A name=index-locale_002dnegative_002dsign_002dposition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-negative-sign-position</STRONG></DT>
<DD>
<P>These functions return a symbol telling where a sign of a positive/negative monetary amount is to appear when printing it. The possible values are:</P>
<DL compact>
<DT><CODE>parenthesize</CODE></DT>
<DD>
<P>The currency symbol and quantity should be surrounded by parentheses.</P></DD>
<DT><CODE>sign-before</CODE></DT>
<DD>
<P>Print the sign string before the quantity and currency symbol.</P></DD>
<DT><CODE>sign-after</CODE></DT>
<DD>
<P>Print the sign string after the quantity and currency symbol.</P></DD>
<DT><CODE>sign-before-currency-symbol</CODE></DT>
<DD>
<P>Print the sign string right before the currency symbol.</P></DD>
<DT><CODE>sign-after-currency-symbol</CODE></DT>
<DD>
<P>Print the sign string right after the currency symbol.</P></DD>
<DT><CODE>unspecified</CODE></DT>
<DD>
<P>Unspecified. We recommend you print the sign after the currency symbol.</P></DD></DL></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, the two following procedures may be helpful when programming user interfaces:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-locale_002dyes_002dregexp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-yes-regexp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DT><A name=index-locale_002dno_002dregexp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>locale-no-regexp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[locale]</EM></DT>
<DD>
<P>Return a string that can be used as a regular expression to recognize a positive (respectively, negative) response to a yes/no question. For the C locale, the default values are typically<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"^[yY]"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"^[nN]"</CODE>, respectively.</P>
<P>Here is an example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(use-modules (ice-9 rdelim))
(format #t "Does Guile rock?~%")
(let lp ((answer (read-line)))
  (cond ((string-match (locale-yes-regexp) answer)
         (format #t "High fives!~%"))
        ((string-match (locale-no-regexp) answer)
         (format #t "How about now? Does it rock yet?~%")
         (lp (read-line)))
        (else
         (format #t "What do you mean?~%")
         (lp (read-line)))))
</PRE></DIV>
<P>For an internationalized yes/no string output,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Gettext-Support">Gettext Support</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Example uses of some of these functions are the implementation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>number-&gt;locale-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>monetary-amount-&gt;locale-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output">Number Input and Output</A>), as well as that the SRFI-19 date and time conversion to/from strings (see<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19">SRFI-19</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Gettext-Support></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Locale-Information" rel=prev>Accessing Locale Information</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization" rel=up>Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Gettext-Support-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.24.6 Gettext Support</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides an interface to GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for translating message strings (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gettext/manual/gettext.html#Introduction">Introduction</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utilities</CITE>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Messages are collected in domains, so different libraries and programs maintain different message catalogues. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter in the functions below is a string (it becomes part of the message catalog filename).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not available, or if Guile was configured &#8216;<SAMP>--without-nls</SAMP>&#8217;, dummy functions doing no translation are provided. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>support is available in Guile, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i18n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>feature is provided (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Feature-Tracking">Feature Tracking</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gettext></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gettext</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>msg [domain [category]]</EM></DT>
<DT><A name=index-scm_005fgettext></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gettext</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(msg, domain, category)</EM></DT>
<DD>
<P>Return the translation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is optional and defaults to the domain set through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>textdomain</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is optional and defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LC_MESSAGES</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>).</P>
<P>Normal usage is for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be a literal string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xgettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can extract those from the source to form a message catalogue ready for translators (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gettext/manual/gettext.html#xgettext-Invocation">Invoking the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xgettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>Program</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utilities</CITE>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(display (gettext "You are in a maze of twisty passages."))
</PRE></DIV>
<P><CODE>_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a commonly used shorthand, an application can make that an alias for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE>. Or a library can make a definition that uses its specific<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(so an application can change the default without affecting the library).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (_ msg) (gettext msg "mylibrary"))
(display (_ "File not found."))
</PRE></DIV>
<P><CODE>_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also a good place to perhaps strip disambiguating extra text from the message string, as for instance in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gettext/manual/gettext.html#GUI-program-problems">How to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in GUI programs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utilities</CITE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ngettext></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ngettext</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>msg msgplural n [domain [category]]</EM></DT>
<DT><A name=index-scm_005fngettext></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ngettext</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(msg, msgplural, n, domain, category)</EM></DT>
<DD>
<P>Return the translation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR>/<VAR>msgplural</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR>, with a plural form chosen appropriately for the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is optional and defaults to the domain set through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>textdomain</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is optional and defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LC_MESSAGES</CODE>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>).</P>
<P><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the singular form, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msgplural</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the plural. When no translation is available,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>= 1</EM>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msgplural</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. When translated, the message catalogue can have a different rule, and can have more than two possible forms.</P>
<P>As per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, normal usage is for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msgplural</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be literal strings, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xgettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can extract them from the source to build a message catalogue. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (done n)
  (format #t (ngettext "~a file processed\n"
                       "~a files processed\n" n)
             n))

(done 1) -| 1 file processed
(done 3) -| 3 files processed
</PRE></DIV>
<P>It&#8217;s important to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for plurals, since the rules for singular and plural forms in English are not the same in other languages. Only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will allow translators to give correct forms (see<A href="http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms">Additional functions for plural forms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>utilities</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-textdomain></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>textdomain</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[domain]</EM></DT>
<DT><A name=index-scm_005ftextdomain></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_textdomain</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(domain)</EM></DT>
<DD>
<P>Get or set the default gettext domain. When called with no parameter the current domain is returned. When called with a parameter,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set as the current domain, and that new value returned. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(textdomain "myprog")
&#8658; "myprog"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bindtextdomain></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bindtextdomain</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>domain [directory]</EM></DT>
<DT><A name=index-scm_005fbindtextdomain></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bindtextdomain</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(domain, directory)</EM></DT>
<DD>
<P>Get or set the directory under which to find message files for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR>. When called without a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the current setting is returned. When called with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>directory</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and that new setting returned. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bindtextdomain "myprog" "/my/tree/share/locale")
&#8658; "/my/tree/share/locale"
</PRE></DIV>
<P>When using Autoconf/Automake, an application should arrange for the configured<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localedir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get into the program (by substituting, or by generating a config file) and set that for its domain. This ensures the catalogue can be found even when installed in a non-standard location.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind_002dtextdomain_002dcodeset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-textdomain-codeset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>domain [encoding]</EM></DT>
<DT><A name=index-scm_005fbind_005ftextdomain_005fcodeset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bind_textdomain_codeset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(domain, encoding)</EM></DT>
<DD>
<P>Get or set the text encoding to be used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for messages from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string, the name of a coding system, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"8859_1"</CODE>. (On a Unix/POSIX system the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program can list all available encodings.)</P>
<P>When called without an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the current setting is returned, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if none yet set. When called with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, it is set for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>domain</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and that new setting returned. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bind-textdomain-codeset "myprog")
&#8658; #f
(bind-textdomain-codeset "myprog" "latin-9")
&#8658; "latin-9"
</PRE></DIV>
<P>The encoding requested can be different from the translated data file, messages will be recoded as necessary. But note that when there is no translation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>unchanged, ie. without any recoding. For that reason source message strings are best as plain ASCII.</P>
<P>Currently Guile has no understanding of multi-byte characters, and string functions won&#8217;t recognise character boundaries in multi-byte strings. An application will at least be able to pass such strings through to some output though. Perhaps this will change in the future.</P></DD></DL>