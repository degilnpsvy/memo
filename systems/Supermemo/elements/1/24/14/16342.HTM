<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>9.2 Data Representation</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme is a latently-typed language; this means that the system cannot, in general, determine the type of a given expression at compile time. Types only become apparent at run time. Variables do not have fixed types; a variable may hold a pair at one point, an integer at the next, and a thousand-element vector later. Instead, values, not variables, have fixed types.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to implement standard Scheme functions like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pair?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and provide garbage collection, the representation of every value must contain enough information to accurately determine its type at run time. Often, Scheme systems also use this information to determine whether a program has attempted to apply an operation to an inappropriately typed value (such as taking the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a string).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because variables, pairs, and vectors may hold values of any type, Scheme implementations use a uniform representation for values &#8212; a single type large enough to hold either a complete value or a pointer to a complete value, along with the necessary typing information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following sections will present a simple typing system, and then make some refinements to correct its major weaknesses. We then conclude with a discussion of specific choices that Guile has made regarding garbage collection and data representation.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#A-Simple-Representation">A Simple Representation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Faster-Integers">Faster Integers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Cheaper-Pairs">Cheaper Pairs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Conservative-GC">Conservative GC</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile">The SCM Type in Guile</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=A-Simple-Representation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Faster-Integers" rel=next>Faster Integers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Data-Representation" rel=up>Data Representation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=A-Simple-Representation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.2.1 A Simple Representation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The simplest way to represent Scheme values in C would be to represent each value as a pointer to a structure containing a type indicator, followed by a union carrying the real value. Assuming that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of our universal type, we can write:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>enum type { integer, pair, string, vector, ... };

typedef struct value *SCM;

struct value {
  enum type type;
  union {
    int integer;
    struct { SCM car, cdr; } pair;
    struct { int length; char *elts; } string;
    struct { int length; SCM  *elts; } vector;
    ...
  } value;
};
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">with the ellipses replaced with code for the remaining Scheme types.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This representation is sufficient to implement all of Scheme&#8217;s semantics. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;type == integer</CODE>.</LI>
<LI>To find its value, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.integer</CODE>.</LI>
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;type == vector</CODE>.</LI>
<LI>If we know<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.vector.elts[0]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to its first element.</LI>
<LI>If we know<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.pair.car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to extract its car.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Faster-Integers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Cheaper-Pairs" rel=next>Cheaper Pairs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#A-Simple-Representation" rel=prev>A Simple Representation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Data-Representation" rel=up>Data Representation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Faster-Integers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.2.2 Faster Integers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unfortunately, the above representation has a serious disadvantage. In order to return an integer, an expression must allocate a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct value</CODE>, initialize it to represent that integer, and return a pointer to it. Furthermore, fetching an integer&#8217;s value requires a memory reference, which is much slower than a register reference on most processors. Since integers are extremely common, this representation is too costly, in both time and space. Integers should be very cheap to create and manipulate.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One possible solution comes from the observation that, on many architectures, heap-allocated data (i.e., what you get when you call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>) must be aligned on an eight-byte boundary. (Whether or not the machine actually requires it, we can write our own allocator for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects that assures this is true.) In this case, the lower three bits of the structure&#8217;s address are known to be zero.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This gives us the room we need to provide an improved representation for integers. We make the following rules:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>If the lower three bits of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value are zero, then the SCM value is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct value</CODE>, and everything proceeds as before.</LI>
<LI>Otherwise, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value represents an integer, whose value appears in its upper bits.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is C code implementing this convention:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>enum type { pair, string, vector, ... };

typedef struct value *SCM;

struct value {
  enum type type;
  union {
    struct { SCM car, cdr; } pair;
    struct { int length; char *elts; } string;
    struct { int length; SCM  *elts; } vector;
    ...
  } value;
};

#define POINTER_P(x) (((int) (x) &amp; 7) == 0)
#define INTEGER_P(x) (! POINTER_P (x))

#define GET_INTEGER(x)  ((int) (x) &gt;&gt; 3)
#define MAKE_INTEGER(x) ((SCM) (((x) &lt;&lt; 3) | 1))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>no longer appears as an element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum type</CODE>, and the union has lost its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member. Instead, we use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>POINTER_P</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INTEGER_P</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macros to make a coarse classification of values into integers and non-integers, and do further type testing as before.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here&#8217;s how we would answer the questions posed above (again, assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value):</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INTEGER_P (<VAR>x</VAR>)</CODE>.</LI>
<LI>To find its value, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GET_INTEGER (<VAR>x</VAR>)</CODE>.</LI>
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>  <CODE>POINTER_P (<VAR>x</VAR>) &amp;&amp; <VAR>x</VAR>-&gt;type == vector</CODE>
</PRE></DIV>
<P>Given the new representation, we must make sure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is truly a pointer before we dereference it to determine its complete type.</P></LI>
<LI>If we know<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.vector.elts[0]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to its first element, as before.</LI>
<LI>If we know<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.pair.car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to extract its car, just as before.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This representation allows us to operate more efficiently on integers than the first. For example, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are known to be integers, we can compute their sum as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>MAKE_INTEGER (GET_INTEGER (<VAR>x</VAR>) + GET_INTEGER (<VAR>y</VAR>))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now, integer math requires no allocation or memory references. Most real Scheme systems actually implement addition and other operations using an even more efficient algorithm, but this essay isn&#8217;t about bit-twiddling. (Hint: how do you decide when to overflow to a bignum? How would you do it in assembly?)</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Cheaper-Pairs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Conservative-GC" rel=next>Conservative GC</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Faster-Integers" rel=prev>Faster Integers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Data-Representation" rel=up>Data Representation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Cheaper-Pairs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.2.3 Cheaper Pairs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, there is yet another issue to confront. Most Scheme heaps contain more pairs than any other type of object; Jonathan Rees said at one point that pairs occupy 45% of the heap in his Scheme implementation, Scheme 48. However, our representation above spends three<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>-sized words per pair &#8212; one for the type, and two for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CAR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CDR</SMALL>. Is there any way to represent pairs using only two words?</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Let us refine the convention we established earlier. Let us assert that:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>If the bottom three bits of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#b000</CODE>, then it is a pointer, as before.</LI>
<LI>If the bottom three bits are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#b001</CODE>, then the upper bits are an integer. This is a bit more restrictive than before.</LI>
<LI>If the bottom two bits are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#b010</CODE>, then the value, with the bottom three bits masked out, is the address of a pair.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is the new C code:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>enum type { string, vector, ... };

typedef struct value *SCM;

struct value {
  enum type type;
  union {
    struct { int length; char *elts; } string;
    struct { int length; SCM  *elts; } vector;
    ...
  } value;
};

struct pair {
  SCM car, cdr;
};

#define POINTER_P(x) (((int) (x) &amp; 7) == 0)

#define INTEGER_P(x)  (((int) (x) &amp; 7) == 1)
#define GET_INTEGER(x)  ((int) (x) &gt;&gt; 3)
#define MAKE_INTEGER(x) ((SCM) (((x) &lt;&lt; 3) | 1))

#define PAIR_P(x) (((int) (x) &amp; 7) == 2)
#define GET_PAIR(x) ((struct pair *) ((int) (x) &amp; ~7))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>now only contain provisions for vectors and strings; both integers and pairs have become special cases. The code above also assumes that an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is large enough to hold a pointer, which isn&#8217;t generally true.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Our list of examples is now as follows:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INTEGER_P (<VAR>x</VAR>)</CODE>; this is as before.</LI>
<LI>To find its value, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GET_INTEGER (<VAR>x</VAR>)</CODE>, as before.</LI>
<LI>To test if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>  <CODE>POINTER_P (<VAR>x</VAR>) &amp;&amp; <VAR>x</VAR>-&gt;type == vector</CODE>
</PRE></DIV>
<P>We must still make sure that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before dereferencing it to find its type.</P></LI>
<LI>If we know<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, we can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>x</VAR>-&gt;value.vector.elts[0]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to its first element, as before.</LI>
<LI>We can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PAIR_P (<VAR>x</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair, and then write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GET_PAIR (<VAR>x</VAR>)-&gt;car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to its car.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This change in representation reduces our heap size by 15%. It also makes it cheaper to decide if a value is a pair, because no memory references are necessary; it suffices to check the bottom two bits of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. This may be significant when traversing lists, a common activity in a Scheme system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Again, most real Scheme systems use a slightly different implementation; for example, if GET_PAIR subtracts off the low bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, instead of masking them off, the optimizer will often be able to combine that subtraction with the addition of the offset of the structure member we are referencing, making a modified pointer as fast to use as an unmodified pointer.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conservative-GC></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=next>The SCM Type in Guile</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Cheaper-Pairs" rel=prev>Cheaper Pairs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Data-Representation" rel=up>Data Representation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conservative-Garbage-Collection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.2.4 Conservative Garbage Collection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Aside from the latent typing, the major source of constraints on a Scheme implementation&#8217;s data representation is the garbage collector. The collector must be able to traverse every live object in the heap, to determine which objects are not live, and thus collectable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are many ways to implement this. Guile&#8217;s garbage collection is built on a library, the Boehm-Demers-Weiser conservative garbage collector (BDW-GC). The BDW-GC &#8220;just works&#8221;, for the most part. But since it is interesting to know how these things work, we include here a high-level description of what the BDW-GC does.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Garbage collection has two logical phases: a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mark</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>phase, in which the set of live objects is enumerated, and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sweep</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>phase, in which objects not traversed in the mark phase are collected. Correct functioning of the collector depends on being able to traverse the entire set of live objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the mark phase, the collector scans the system&#8217;s global variables and the local variables on the stack to determine which objects are immediately accessible by the C code. It then scans those objects to find the objects they point to, and so on. The collector logically sets a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mark bit</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>on each object it finds, so each object is traversed only once.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When the collector can find no unmarked objects pointed to by marked objects, it assumes that any objects that are still unmarked will never be used by the program (since there is no path of dereferences from any global or local variable that reaches them) and deallocates them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the above paragraphs, we did not specify how the garbage collector finds the global and local variables; as usual, there are many different approaches. Frequently, the programmer must maintain a list of pointers to all global variables that refer to the heap, and another list (adjusted upon entry to and exit from each function) of local variables, for the collector&#8217;s benefit.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The list of global variables is usually not too difficult to maintain, since global variables are relatively rare. However, an explicitly maintained list of local variables (in the author&#8217;s personal experience) is a nightmare to maintain. Thus, the BDW-GC uses a technique called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>conservative garbage collection</EM>, to make the local variable list unnecessary.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The trick to conservative collection is to treat the stack as an ordinary range of memory, and assume that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>every</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>word on the stack is a pointer into the heap. Thus, the collector marks all objects whose addresses appear anywhere in the stack, without knowing for sure how that word is meant to be interpreted.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the stack, the BDW-GC will also scan static data sections. This means that global variables are also scanned when looking for live Scheme objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Obviously, such a system will occasionally retain objects that are actually garbage, and should be freed. In practice, this is not a problem. The alternative, an explicitly maintained list of local variable addresses, is effectively much less reliable, due to programmer error. Interested readers should see the BDW-GC web page at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.hpl.hp.com/personal/Hans_Boehm/gc">http://www.hpl.hp.com/personal/Hans_Boehm/gc</A>, for more information.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-SCM-Type-in-Guile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Conservative-GC" rel=prev>Conservative GC</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Data-Representation" rel=up>Data Representation</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-SCM-Type-in-Guile-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.2.5 The SCM Type in Guile</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile classifies Scheme objects into two kinds: those that fit entirely within an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>, and those that require heap storage.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The former class are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>immediates</EM>. The class of immediates includes small integers, characters, boolean values, the empty list, the mysterious end-of-file object, and some others.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The remaining types are called, not surprisingly,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>non-immediates</EM>. They include pairs, procedures, strings, vectors, and all other data types in Guile. For non-immediates, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>word contains a pointer to data on the heap, with further information about the object in question is stored in that data.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes how the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type is actually represented and used at the C level. Interested readers should see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libguile/tags.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an exposition of how Guile stores type information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In fact, there are two basic C data types to represent objects in Guile:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Relationship-between-SCM-and-scm_005ft_005fbits">Relationship between SCM and scm_t_bits</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Immediate-objects">Immediate objects</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Non_002dimmediate-objects">Non-immediate objects</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Allocating-Cells">Allocating Cells</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Heap-Cell-Type-Information">Heap Cell Type Information</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Cell-Entries">Accessing Cell Entries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Relationship-between-SCM-and-scm_005ft_005fbits></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Immediate-objects" rel=next>Immediate objects</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Relationship-between-SCM-and-scm_005ft_005fbits-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.1 Relationship between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE></H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A variable of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is guaranteed to hold a valid Scheme object. A variable of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>, on the other hand, may hold a representation of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value as a C integral type, but may also hold any C value, even if it does not correspond to a valid Scheme object.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>, the Scheme object&#8217;s type information is stored in a form that is not directly usable. To be able to work on the type encoding of the scheme value, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>variable has to be transformed into the corresponding representation as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. Once this has been done, the type of the scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be derived from the content of the bits of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, in the way illustrated by the example earlier in this chapter (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Cheaper-Pairs">Cheaper Pairs</A>). Conversely, a valid bit encoding of a Scheme value as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable can be transformed into the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Immediate-objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Non_002dimmediate-objects" rel=next>Non-immediate objects</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Relationship-between-SCM-and-scm_005ft_005fbits" rel=prev>Relationship between SCM and scm_t_bits</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Immediate-objects-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.2 Immediate objects</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A Scheme object may either be an immediate, i.e. carrying all necessary information by itself, or it may contain a reference to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cell</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>with additional information on the heap. Although in general it should be irrelevant for user code whether an object is an immediate or not, within Guile&#8217;s own code the distinction is sometimes of importance. Thus, the following low level macro is provided:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fIMP></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_IMP</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>A Scheme object is an immediate if it fulfills the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_IMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate, otherwise it holds an encoded reference to a heap cell. The result of the predicate is delivered as a C style boolean value. User code and code that extends Guile should normally not be required to use this macro.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Summary:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Given a Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of unknown type, check first with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_IMP (<VAR>x</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it is an immediate object.</LI>
<LI>If so, all of the type and value information can be determined from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that is delivered by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK (<VAR>x</VAR>)</CODE>.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are a number of special values in Scheme, most of them documented elsewhere in this manual. It&#8217;s not quite the right place to put them, but for now, here&#8217;s a list of the C names given to some of these values:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fEOL></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_EOL</STRONG></DT>
<DD>
<P>The Scheme empty list object, or &#8220;End Of List&#8221; object, usually written in Scheme as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fEOF_005fVAL></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_EOF_VAL</STRONG></DT>
<DD>
<P>The Scheme end-of-file value. It has no standard written representation, for obvious reasons.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fUNSPECIFIED></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_UNSPECIFIED</STRONG></DT>
<DD>
<P>The value returned by some (but not all) expressions that the Scheme standard says return an &#8220;unspecified&#8221; value.</P>
<P>This is sort of a weirdly literal way to take things, but the standard read-eval-print loop prints nothing when the expression returns this value, so it&#8217;s not a bad idea to return this when you can&#8217;t think of anything else helpful.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fUNDEFINED></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_UNDEFINED</STRONG></DT>
<DD>
<P>The &#8220;undefined&#8221; value. Its most important property is that is not equal to any valid Scheme value. This is put to various internal uses by C code interacting with Guile.</P>
<P>For example, when you write a C function that is callable from Scheme and which takes optional arguments, the interpreter passes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for any arguments you did not receive.</P>
<P>We also use this to mark unbound variables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fUNBNDP></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_UNBNDP</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>. Note that this is not a check to see if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNBOUND</CODE>. History will not be kind to us.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Non_002dimmediate-objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Allocating-Cells" rel=next>Allocating Cells</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Immediate-objects" rel=prev>Immediate objects</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Non_002dimmediate-objects-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.3 Non-immediate objects</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A Scheme object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that does not fulfill the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_IMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate holds an encoded reference to a heap cell. This reference can be decoded to a C pointer to a heap cell using the<CODE>SCM2PTR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. The encoding of a pointer to a heap cell into a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is done using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PTR2SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM2PTR></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_cell *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM2PTR</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Extract and return the heap cell pointer from a non-immediate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-PTR2SCM></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>PTR2SCM</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_cell *<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Return a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that encodes a reference to the heap cell pointer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that it is also possible to transform a non-immediate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable. However, the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may not be used as a pointer to a<CODE>scm_t_cell</CODE>: only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM2PTR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is guaranteed to transform a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object into a valid pointer to a heap cell. Also, it is not allowed to apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PTR2SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to anything that is not a valid pointer to a heap cell.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Summary:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Only use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM2PTR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_IMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false!</LI>
<LI>Don&#8217;t use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(scm_t_cell *) SCM_UNPACK (<VAR>x</VAR>)</CODE>! Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM2PTR (<VAR>x</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead!</LI>
<LI>Don&#8217;t use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PTR2SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for anything but a cell pointer!</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Allocating-Cells></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Heap-Cell-Type-Information" rel=next>Heap Cell Type Information</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Non_002dimmediate-objects" rel=prev>Non-immediate objects</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Allocating-Cells-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.4 Allocating Cells</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides both ordinary cells with two slots, and double cells with four slots. The following two function are the most primitive way to allocate such cells.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the caller intends to use it as a header for some other type, she must pass an appropriate magic value in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_0</VAR>, to mark it as a member of that type, and pass whatever value as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_1</VAR>, etc that the type expects. You should generally not need these functions, unless you are implementing a new datatype, and thoroughly understand the code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;libguile/tags.h&gt;</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you just want to allocate pairs, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_cons</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fcell></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits word_0, scm_t_bits word_1)</EM></DT>
<DD>
<P>Allocate a new cell, initialize the two slots with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_1</VAR>, and return it.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>word_1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>. If you want to pass a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, you need to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdouble_005fcell></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_double_cell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits word_0, scm_t_bits word_1, scm_t_bits word_2, scm_t_bits word_3)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_cell</CODE>, but allocates a double cell with four slots.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Heap-Cell-Type-Information></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Cell-Entries" rel=next>Accessing Cell Entries</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Allocating-Cells" rel=prev>Allocating Cells</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Heap-Cell-Type-Information-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.5 Heap Cell Type Information</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Heap cells contain a number of entries, each of which is either a scheme object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a raw C value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>. Which of the cell entries contain Scheme objects and which contain raw C values is determined by the first entry of the cell, which holds the cell type information.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fCELL_005fTYPE></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CELL_TYPE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>For a non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, deliver the content of the first entry of the heap cell referenced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. This value holds the information about the cell type.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fCELL_005fTYPE></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_CELL_TYPE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, scm_t_bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t</VAR>)</EM></DT>
<DD>
<P>For a non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, write the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the first entry of the heap cell referenced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. The value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must hold a valid cell type.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Cell-Entries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Heap-Cell-Type-Information" rel=prev>Heap Cell Type Information</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type-in-Guile" rel=up>The SCM Type in Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Cell-Entries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.2.5.6 Accessing Cell Entries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, the object type can be determined by reading the cell type entry using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_TYPE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. For each different type of cell it is known which cell entries hold Scheme objects and which cell entries hold raw C data. To access the different cell entries appropriately, the following macros are provided.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fCELL_005fWORD></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CELL_WORD</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>)</EM></DT>
<DD>
<P>Deliver the cell entry<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the heap cell referenced by the non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as raw data. It is illegal, to access cell entries that hold Scheme objects by using these macros. For convenience, the following macros are also provided.</P>
<UL>
<LI>SCM_CELL_WORD_0 (<VAR>x</VAR>) &#8658; SCM_CELL_WORD (<VAR>x</VAR>, 0)</LI>
<LI>SCM_CELL_WORD_1 (<VAR>x</VAR>) &#8658; SCM_CELL_WORD (<VAR>x</VAR>, 1)</LI>
<LI>&#8230;</LI>
<LI>SCM_CELL_WORD_<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>x</VAR>) &#8658; SCM_CELL_WORD (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>)</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fCELL_005fOBJECT></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CELL_OBJECT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>)</EM></DT>
<DD>
<P>Deliver the cell entry<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the heap cell referenced by the non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a Scheme object. It is illegal, to access cell entries that do not hold Scheme objects by using these macros. For convenience, the following macros are also provided.</P>
<UL>
<LI>SCM_CELL_OBJECT_0 (<VAR>x</VAR>) &#8658; SCM_CELL_OBJECT (<VAR>x</VAR>, 0)</LI>
<LI>SCM_CELL_OBJECT_1 (<VAR>x</VAR>) &#8658; SCM_CELL_OBJECT (<VAR>x</VAR>, 1)</LI>
<LI>&#8230;</LI>
<LI>SCM_CELL_OBJECT_<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>x</VAR>) &#8658; SCM_CELL_OBJECT (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>)</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fCELL_005fWORD></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_CELL_WORD</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, scm_t_bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>)</EM></DT>
<DD>
<P>Write the raw C value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into entry number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the heap cell referenced by the non-immediate Scheme value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. Values that are written into cells this way may only be read from the cells using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_WORD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macros or, in case cell entry 0 is written, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_TYPE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. For the special case of cell entry 0 it has to be made sure that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains a cell type information which does not describe a Scheme object. For convenience, the following macros are also provided.</P>
<UL>
<LI>SCM_SET_CELL_WORD_0 (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>) &#8658; SCM_SET_CELL_WORD (<VAR>x</VAR>, 0,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>)</LI>
<LI>SCM_SET_CELL_WORD_1 (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>) &#8658; SCM_SET_CELL_WORD (<VAR>x</VAR>, 1,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>)</LI>
<LI>&#8230;</LI>
<LI>SCM_SET_CELL_WORD_<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>) &#8658; SCM_SET_CELL_WORD (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>w</VAR>)</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fCELL_005fOBJECT></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_CELL_OBJECT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>)</EM></DT>
<DD>
<P>Write the Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into entry number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the heap cell referenced by the non-immediate Scheme value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. Values that are written into cells this way may only be read from the cells using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_OBJECT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macros or, in case cell entry 0 is written, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_TYPE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. For the special case of cell entry 0 the writing of a Scheme object into this cell is only allowed if the cell forms a Scheme pair. For convenience, the following macros are also provided.</P>
<UL>
<LI>SCM_SET_CELL_OBJECT_0 (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>) &#8658; SCM_SET_CELL_OBJECT (<VAR>x</VAR>, 0,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>)</LI>
<LI>SCM_SET_CELL_OBJECT_1 (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>) &#8658; SCM_SET_CELL_OBJECT (<VAR>x</VAR>, 1,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>)</LI>
<LI>&#8230;</LI>
<LI>SCM_SET_CELL_OBJECT_<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>) &#8658; SCM_SET_CELL_OBJECT (<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>o</VAR>)</LI></UL></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Summary:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>For a non-immediate Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of unknown type, get the type information by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_CELL_TYPE (<VAR>x</VAR>)</CODE>.</LI>
<LI>As soon as the cell type information is available, only use the appropriate access methods to read and write data to the different cell entries.</LI></UL>