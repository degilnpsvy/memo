<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>9.3 A Virtual Machine for Guile</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile has both an interpreter and a compiler. To a user, the difference is transparent&#8212;interpreted and compiled procedures can call each other as they please.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The difference is that the compiler creates and interprets bytecode for a custom virtual machine, instead of interpreting the S-expressions directly. Loading and running compiled code is faster than loading and running source code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The virtual machine that does the bytecode interpretation is a part of Guile itself. This section describes the nature of Guile&#8217;s virtual machine.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Why-a-VM_003f">Why a VM?</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#VM-Concepts">VM Concepts</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Variables-and-the-VM">Variables and the VM</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#VM-Programs">VM Programs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set">Instruction Set</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Why-a-VM_003f></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#VM-Concepts" rel=next>VM Concepts</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Why-a-VM_003f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.1 Why a VM?</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-interpreter></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a long time, Guile only had an interpreter. Guile&#8217;s interpreter operated directly on the S-expression representation of Scheme source code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But while the interpreter was highly optimized and hand-tuned, it still performs many needless computations during the course of evaluating an expression. For example, application of a function to arguments needlessly consed up the arguments in a list. Evaluation of an expression always had to figure out what the car of the expression is &#8211; a procedure, a memoized form, or something else. All values have to be allocated on the heap. Et cetera.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The solution to this problem was to compile the higher-level language, Scheme, into a lower-level language for which all of the checks and dispatching have already been done&#8212;the code is instead stripped to the bare minimum needed to &#8220;do the job&#8221;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The question becomes then, what low-level language to choose? There are many options. We could compile to native code directly, but that poses portability problems for Guile, as it is a highly cross-platform project.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So we want the performance gains that compilation provides, but we also want to maintain the portability benefits of a single code path. The obvious solution is to compile to a virtual machine that is present on all Guile installations.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The easiest (and most fun) way to depend on a virtual machine is to implement the virtual machine within Guile itself. This way the virtual machine provides what Scheme needs (tail calls, multiple values,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE>) and can provide optimized inline instructions for Guile (<CODE>cons</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct-ref</CODE>, etc.).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So this is what Guile does. The rest of this section describes that VM that Guile implements, and the compiled procedures that run on it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Before moving on, though, we should note that though we spoke of the interpreter in the past tense, Guile still has an interpreter. The difference is that before, it was Guile&#8217;s main evaluator, and so was implemented in highly optimized C; now, it is actually implemented in Scheme, and compiled down to VM bytecode, just like any other program. (There is still a C interpreter around, used to bootstrap the compiler, but it is not normally used at runtime.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The upside of implementing the interpreter in Scheme is that we preserve tail calls and multiple-value handling between interpreted and compiled code. The downside is that the interpreter in Guile 2.0 is slower than the interpreter in 1.8. We hope the that the compiler&#8217;s speed makes up for the loss!</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also note that this decision to implement a bytecode compiler does not preclude native compilation. We can compile from bytecode to native code at runtime, or even do ahead of time compilation. More possibilities are discussed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Extending-the-Compiler">Extending the Compiler</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VM-Concepts></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout" rel=next>Stack Layout</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Why-a-VM_003f" rel=prev>Why a VM?</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VM-Concepts-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.2 VM Concepts</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compiled code is run by a virtual machine (VM). Each thread has its own VM. When a compiled procedure is run, Guile looks up the virtual machine for the current thread and executes the procedure using that VM.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s virtual machine is a stack machine&#8212;that is, it has few registers, and the instructions defined in the VM operate by pushing and popping values from a stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Stack memory is exclusive to the virtual machine that owns it. In addition to their stacks, virtual machines also have access to the global memory (modules, global bindings, etc) that is shared among other parts of Guile, including other VMs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A VM has generic instructions, such as those to reference local variables, and instructions designed to support Guile&#8217;s languages &#8211; mathematical instructions that support the entire numerical tower, an inlined implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>, etc.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The registers that a VM has are as follows:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>ip - Instruction pointer</LI>
<LI>sp - Stack pointer</LI>
<LI>fp - Frame pointer</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In other architectures, the instruction pointer is sometimes called the &#8220;program counter&#8221; (pc). This set of registers is pretty typical for stack machines; their exact meanings in the context of Guile&#8217;s VM are described in the next section.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Stack-Layout></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Variables-and-the-VM" rel=next>Variables and the VM</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#VM-Concepts" rel=prev>VM Concepts</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Stack-Layout-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.3 Stack Layout</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">While not strictly necessary to understand how to work with the VM, it is instructive and sometimes entertaining to consider the structure of the VM stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Logically speaking, a VM stack is composed of &#8220;frames&#8221;. Each frame corresponds to the application of one compiled procedure, and contains storage space for arguments, local variables, intermediate values, and some bookkeeping information (such as what to do after the frame computes its value).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">While the compiler is free to do whatever it wants to, as long as the semantics of a computation are preserved, in practice every time you call a function, a new frame is created. (The notable exception of course is the tail call case, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Tail-Calls">Tail Calls</A>.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Within a frame, you have the data associated with the function application itself, which is of a fixed size, and the stack space for intermediate values. Sometimes only the former is referred to as the &#8220;frame&#8221;, and the latter is the &#8220;stack&#8221;, although all pending application frames can have some intermediate computations interleaved on the stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The structure of the fixed part of an application frame is as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>             Stack
   | ...              |
   | Intermed. val. 0 | &lt;- fp + bp-&gt;nargs + bp-&gt;nlocs = SCM_FRAME_UPPER_ADDRESS (fp)
   +==================+
   | Local variable 1 |
   | Local variable 0 | &lt;- fp + bp-&gt;nargs
   | Argument 1       |
   | Argument 0       | &lt;- fp
   | Program          | &lt;- fp - 1
   +------------------+    
   | Return address   |
   | MV return address|
   | Dynamic link     | &lt;- fp - 4 = SCM_FRAME_DATA_ADDRESS (fp) = SCM_FRAME_LOWER_ADDRESS (fp)
   +==================+
   |                  |
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the above drawing, the stack grows upward. The intermediate values stored in the application of this frame are stored above<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FRAME_UPPER_ADDRESS (fp)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct scm_objcode</CODE>data associated with the program at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fp - 1</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nargs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nlocs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are properties of the compiled procedure, which will be discussed later.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The individual fields of the frame are as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT>Return address</DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that was in effect before this program was applied. When we return from this activation frame, we will jump back to this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE>.</P></DD>
<DT>MV return address</DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to return to if this application returns multiple values. For continuations that only accept one value, this value will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>; for others, it will be an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that points to a multiple-value return address in the calling code. That code will expect the top value on the stack to be an integer&#8212;the number of values being returned&#8212;and that below that integer there are the values being returned.</P></DD>
<DT>Dynamic link</DT>
<DD>
<P>This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in effect before this program was applied. In effect, this and the return address are the registers that are always &#8220;saved&#8221;. The dynamic link links the current frame to the previous frame; computing a stack trace involves traversing these frames.</P></DD>
<DT>Local variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR></DT>
<DD>
<P>Lambda-local variables that are all allocated as part of the frame. This makes access to variables very cheap.</P></DD>
<DT>Argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR></DT>
<DD>
<P>The calling convention of the VM requires arguments of a function application to be pushed on the stack, and here they are. References to arguments dispatch to these locations on the stack.</P></DD>
<DT>Program</DT>
<DD>
<P>This is the program being applied. For more information on how programs are implemented, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#VM-Programs">VM Programs</A>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Variables-and-the-VM></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#VM-Programs" rel=next>VM Programs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout" rel=prev>Stack Layout</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Variables-and-the-VM-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.4 Variables and the VM</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Consider the following Scheme code as an example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>  (define (foo a)
    (lambda (b) (list foo a b)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Within the lambda expression,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a top-level variable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a lexically captured variable, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a local variable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another way to refer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to say that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a &#8220;free&#8221; variable, since it is not defined within the lambda, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a &#8220;bound&#8221; variable. These are the terms used in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lambda calculus</EM>, a mathematical notation for describing functions. The lambda calculus is useful because it allows one to prove statements about functions. It is especially good at describing scope relations, and it is for that reason that we mention it here.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile allocates all variables on the stack. When a lexically enclosed procedure with free variables&#8212;a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>closure</EM>&#8212;is created, it copies those variables into its free variable vector. References to free variables are then redirected through the free variable vector.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a variable is ever<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>, however, it will need to be heap-allocated instead of stack-allocated, so that different closures that capture the same variable can see the same value. Also, this allows continuations to capture a reference to the variable, instead of to its value at one point in time. For these reasons,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables are allocated in &#8220;boxes&#8221;&#8212;actually, in variable cells. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Variables">Variables</A>, for more information. References to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables are indirected through the boxes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus perhaps counterintuitively, what would seem &#8220;closer to the metal&#8221;, viz<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>, actually forces an extra memory allocation and indirection.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Going back to our example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be allocated on the stack, as it is never mutated.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may also be allocated on the stack, as it too is never mutated. Within the enclosed lambda, its value will be copied into (and referenced from) the free variables vector.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a top-level variable, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not lexically bound in this example.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VM-Programs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=next>Instruction Set</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Variables-and-the-VM" rel=prev>Variables and the VM</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compiled-Procedures-are-VM-Programs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.5 Compiled Procedures are VM Programs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default, when you enter in expressions at Guile&#8217;s REPL, they are first compiled to VM object code, then that VM object code is executed to produce a value. If the expression evaluates to a procedure, the result of this process is a compiled procedure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A compiled procedure is a compound object, consisting of its bytecode, a reference to any captured lexical variables, an object array, and some metadata such as the procedure&#8217;s arity, name, and documentation. You can pick apart these pieces with the accessors in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system vm program)</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compiled-Procedures">Compiled Procedures</A>, for a full API reference.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-object-table></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-object-array></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The object array of a compiled procedure, also known as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object table</EM>, holds all Scheme objects whose values are known not to change across invocations of the procedure: constant strings, symbols, etc. The object table of a program is initialized right before a program is loaded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-program</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Instructions">Loading Instructions</A>, for more information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Variable objects are one such type of constant object: when a global binding is defined, a variable object is associated to it and that object will remain constant over time, even if the value bound to it changes. Therefore, toplevel bindings only need to be looked up once. Thereafter, references to the corresponding toplevel variables from within the program are then performed via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>toplevel-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction, which uses the object vector, and are almost as fast as local variable references.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We can see how these concepts tie together by disassembling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function we defined earlier to see what is going on:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample><PRE style="FONT-SIZE: smaller" class=smallexample>scheme@(guile-user)&gt; (define (foo a) (lambda (b) (list foo a b)))
scheme@(guile-user)&gt; ,x foo
   0    (assert-nargs-ee/locals 1)      
   2    (object-ref 1)                  ;; #&lt;procedure 8ebec20 at &lt;current input&gt;:0:17 (b)&gt;
   4    (local-ref 0)                   ;; `a'
   6    (make-closure 0 1)              
   9    (return)                        

----------------------------------------
Disassembly of #&lt;procedure 8ebec20 at &lt;current input&gt;:0:17 (b)&gt;:

   0    (assert-nargs-ee/locals 1)      
   2    (toplevel-ref 1)                ;; `foo'
   4    (free-ref 0)                    ;; (closure variable)
   6    (local-ref 0)                   ;; `b'
   8    (list 0 3)                      ;; 3 elements         at (unknown file):0:29
  11    (return)                        
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">First there&#8217;s some prelude, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>checks that it was called with only 1 argument. Then at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>2, we load up the compiled lambda.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>4 loads up &#8216;a&#8217;, so that it can be captured into a closure by at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>6&#8212;binding code (from the compiled lambda) with data (the free-variable vector). Finally we return the closure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second stanza disassembles the compiled lambda. After the prelude, we note that toplevel variables are resolved relative to the module that was current when the procedure was created. This lookup occurs lazily, at the first time the variable is actually referenced, and the location of the lookup is cached so that future references are very cheap. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Top_002dLevel-Environment-Instructions">Top-Level Environment Instructions</A>, for more details.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Then we see a reference to a free variable, corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>. The disassembler doesn&#8217;t have enough information to give a name to that variable, so it just marks it as being a &#8220;closure variable&#8221;. Finally we see the reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opcode, an inline implementation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>scheme routine.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instruction-Set></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#VM-Programs" rel=prev>VM Programs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#A-Virtual-Machine-for-Guile" rel=up>A Virtual Machine for Guile</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instruction-Set-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.3.6 Instruction Set</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are about 180 instructions in Guile&#8217;s virtual machine. These instructions represent atomic units of a program&#8217;s execution. Ideally, they perform one task without conditional branches, then dispatch to the next instruction in the stream.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Instructions themselves are one byte long. Some instructions take parameters, which follow the instruction byte in the instruction stream.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Sometimes the compiler can figure out that it is compiling a special case that can be run more efficiently. So, for example, while Guile offers a generic test-and-branch instruction, it also offers specific instructions for special cases, so that the following cases all have their own test-and-branch instructions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(if pred then else)
(if (not pred) then else)
(if (null? l) then else)
(if (not (null? l)) then else)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, some Scheme primitives have their own inline implementations, e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE>, as we saw in the previous section.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So Guile&#8217;s instruction set is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>complete</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction set, in that it provides the instructions that are suited to the problem, and is not concerned with making a minimal, orthogonal set of instructions. More instructions may be added over time.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Lexical-Environment-Instructions">Lexical Environment Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Top_002dLevel-Environment-Instructions">Top-Level Environment Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Call-and-Return-Instructions">Procedure Call and Return Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Function-Prologue-Instructions">Function Prologue Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Trampoline-Instructions">Trampoline Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Branch-Instructions">Branch Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Data-Constructor-Instructions">Data Constructor Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Instructions">Loading Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Environment-Instructions">Dynamic Environment Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-Instructions">Miscellaneous Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Scheme-Instructions">Inlined Scheme Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Mathematical-Instructions">Inlined Mathematical Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Bytevector-Instructions">Inlined Bytevector Instructions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Lexical-Environment-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Top_002dLevel-Environment-Instructions" rel=next>Top-Level Environment Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Lexical-Environment-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.1 Lexical Environment Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These instructions access and mutate the lexical environment of a compiled procedure&#8212;its free and bound variables.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of these instructions have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants, the difference being that they take 16-bit arguments, encoded in big-endianness, instead of the normal 8-bit range.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>, for more information on the format of stack frames.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-local_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-long_002dlocal_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-local-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Push onto the stack the value of the local variable located at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within the current stack frame.</P>
<P>Note that arguments and local variables are all in one block. Thus the first argument, if any, is at index 0, and local bindings follow the arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-local_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-long_002dlocal_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-local-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Pop the Scheme object located on top of the stack and make it the new value of the local variable located at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within the current stack frame.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-box-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>box</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Pop a value off the stack, and set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>nth local variable to a box containing that value. A shortcut for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-set</CODE>, used when binding boxed variables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-empty_002dbox></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>empty-box</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>th local variable to a box containing a variable whose value is unbound. Used when compiling some<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-local_002dboxed_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-boxed-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-local_002dboxed_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-boxed-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Get or set the value of the variable located at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within the current stack frame. A shortcut for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>variable-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>variable-set</CODE>, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-free_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>free-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Push the value of the captured variable located at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within the program&#8217;s vector of captured variables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-free_002dboxed_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>free-boxed-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-free_002dboxed_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>free-boxed-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Get or set a boxed free variable. A shortcut for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>variable-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>variable-set</CODE>, respectively.</P>
<P>Note that there is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction, as variables that are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be boxed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dclosure></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-closure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>num-free-vars</EM></DT>
<DD>
<P>Pop<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num-free-vars</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values and a program object off the stack in that order, and push a new program object closing over the given free variables.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num-free-vars</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded as a two-byte big-endian value.</P>
<P>The free variables are stored in an array, inline to the new program object, in the order that they were on the stack (not the order they are popped off). The new closure shares state with the original program. At the time of this writing, the space overhead of closures is 3 words, plus one word for each free variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fix_002dclosure></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fix-closure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Fix up the free variables array of the closure stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>th local variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a two-byte big-endian integer.</P>
<P>This instruction will pop as many values from the stack as are in the corresponding closure&#8217;s free variables array. The topmost value on the stack will be stored as the closure&#8217;s last free variable, with other values filling in free variable slots in order.</P>
<P><CODE>fix-closure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is part of a hack for allocating mutually recursive procedures. The hack is to store the procedures in their corresponding local variable slots, with space already allocated for free variables. Then once they are all in place, this instruction fixes up their procedures&#8217; free variable bindings in place. This allows most<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec</CODE>-bound procedures to be allocated unboxed on the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-local_002dbound_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>local-bound?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-long_002dlocal_002dbound_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-local-bound?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the stack if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE>th local variable has been assigned, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. Mostly useful for handling optional arguments in procedure prologues.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Top_002dLevel-Environment-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Call-and-Return-Instructions" rel=next>Procedure Call and Return Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Lexical-Environment-Instructions" rel=prev>Lexical Environment Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Top_002dLevel-Environment-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.2 Top-Level Environment Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These instructions access values in the top-level environment: bindings that were not lexically apparent at the time that the code in question was compiled.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The location in which a toplevel binding is stored can be looked up once and cached for later. The binding itself may change over time, but its location will stay constant.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Currently only toplevel references within procedures are cached, as only procedures have a place to cache them, in their object tables.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-toplevel_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>toplevel-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-long_002dtoplevel_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-toplevel-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Push the value of the toplevel binding whose location is stored in at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current procedure&#8217;s object table. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variant encodes the index over two bytes.</P>
<P>Initially, a cell in a procedure&#8217;s object table that is used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>toplevel-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is initialized to one of two forms. The normal case is that the cell holds a symbol, whose binding will be looked up relative to the module that was current when the current program was created.</P>
<P>Alternately, the lookup may be performed relative to a particular module, determined at compile-time (e.g. via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE>). In that case, the cell in the object table holds a list:<CODE>(<VAR>modname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>public?</VAR>)</CODE>. The symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be looked up in the module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a list of symbols). The lookup will be performed against the module&#8217;s public interface, unless<VAR>public?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, which it is for example when compiling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE>.</P>
<P>In any case, if the symbol is unbound, an error is signalled. Otherwise the initial form is replaced with the looked-up variable, an in-place mutation of the object table. This mechanism provides for lazy variable resolution, and an important cached fast-path once the variable has been successfully resolved.</P>
<P>This instruction pushes the value of the variable onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-toplevel_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>toplevel-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DT><A name=index-long_002dtoplevel_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-toplevel-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM></DT>
<DD>
<P>Pop a value off the stack, and set it as the value of the toplevel variable stored at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the object table. If the variable has not yet been looked up, we do the lookup as in<CODE>toplevel-ref</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define-3></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define</STRONG></DT>
<DD>
<P>Pop a symbol and a value from the stack, in that order. Look up its binding in the current toplevel environment, creating the binding if necessary. Set the variable to the value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-link_002dnow></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>link-now</STRONG></DT>
<DD>
<P>Pop a value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, from the stack. Look up the binding for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, according to the rules for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>toplevel-ref</CODE>, and push that variable on the stack. If the lookup fails, an error will be signalled.</P>
<P>This instruction is mostly used when loading programs, because it can do toplevel variable lookups without an object table.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dref-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-ref</STRONG></DT>
<DD>
<P>Dereference the variable object which is on top of the stack and replace it by the value of the variable it represents.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-set</STRONG></DT>
<DD>
<P>Pop off two objects from the stack, a variable and a value, and set the variable to the value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-variable_002dbound_003f-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>variable-bound?</STRONG></DT>
<DD>
<P>Pop off the variable object from top of the stack and push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it is bound, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. Mostly useful in procedure prologues for defining default values for boxed optional variables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvariable-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-variable</STRONG></DT>
<DD>
<P>Replace the top object on the stack with a variable containing it. Used in some circumstances when compiling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Procedure-Call-and-Return-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Function-Prologue-Instructions" rel=next>Function Prologue Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Top_002dLevel-Environment-Instructions" rel=prev>Top-Level Environment Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Procedure-Call-and-Return-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.3 Procedure Call and Return Instructions</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-new_002dframe></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>new-frame</STRONG></DT>
<DD>
<P>Push a new frame on the stack, reserving space for the dynamic link, return address, and the multiple-values return address. The frame pointer is not yet updated, because the frame is not yet active &#8211; it has to be patched by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to get the return address.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DD>
<P>Call the procedure located at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[-nargs]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments located from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[-nargs + 1]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[0]</CODE>.</P>
<P>This instruction requires that a new frame be pushed on the stack before the procedure, via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-frame</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>, for more information. It patches up that frame with the current<CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the return address, then dispatches to the first instruction in the called procedure, relying on the called procedure to return one value to the newly-created continuation. Because the new frame pointer will point to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[-nargs + 1]</CODE>, the arguments don&#8217;t have to be shuffled around &#8211; they are already in place.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tail_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tail-call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DD>
<P>Transfer control to the procedure located at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[-nargs]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments located from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[-nargs + 1]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp[0]</CODE>.</P>
<P>Unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE>, which requires a new frame to be pushed onto the stack,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tail-call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>simply shuffles down the procedure and arguments to the current stack frame. This instruction implements tail calls as required by RnRS.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apply-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DT><A name=index-tail_002dapply></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tail-apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tail-call</CODE>, except that the top item on the stack must be a list. The elements of that list are then pushed on the stack and treated as additional arguments, replacing the list itself, then the procedure is invoked as usual.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002fnargs></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call/nargs</STRONG></DT>
<DT><A name=index-tail_002dcall_002fnargs></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tail-call/nargs</STRONG></DT>
<DD>
<P>These are like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tail-call</CODE>, except they take the number of arguments from the stack instead of the instruction stream. These instructions are used in the implementation of multiple value returns, where the actual number of values is pushed on the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mv_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mv-call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs offset</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE>, except that a multiple-value continuation is created in addition to a single-value continuation.</P>
<P>The offset (a three-byte value) is an offset within the instruction stream; the multiple-value return address in the new frame (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>) will be set to the normal return address plus this offset. Instructions at that offset will expect the top value of the stack to be the number of values, and below that values themselves, pushed separately.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-return></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>return</STRONG></DT>
<DD>
<P>Free the program&#8217;s frame, returning the top value from the stack to the current continuation. (The stack should have exactly one value on it.)</P>
<P>Specifically, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is decremented to one below the current<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fp</CODE>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reset to the current return address, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reset to the value of the current dynamic link, and then the returned value is pushed on the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-return_002fvalues></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>return/values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nvalues</EM></DT>
<DT><A name=index-return_002fnvalues></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>return/nvalues</STRONG></DT>
<DD>
<P>Return the top<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nvalues</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the current continuation. In the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return/nvalues</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nvalues</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself is first popped from the top of the stack.</P>
<P>If the current continuation is a multiple-value continuation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return/values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pushes the number of values on the stack, then returns as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return</CODE>, but to the multiple-value return address.</P>
<P>Otherwise if the current continuation accepts only one value, i.e. the multiple-value return address is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, then we assume the user only wants one value, and we give them the first one. If there are no values, an error is signaled.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-return_002fvalues_002a></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>return/values*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nvalues</EM></DT>
<DD>
<P>Like a combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return/values</CODE>, in which the top value on the stack is interpreted as a list of additional values. This is an optimization for the common<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(apply values ...)</CODE>case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-truncate_002dvalues></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>truncate-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nbinds nrest</EM></DT>
<DD>
<P>Used in multiple-value continuations, this instruction takes the values that are on the stack (including the number-of-values marker) and truncates them for a binding construct.</P>
<P>For example, a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(receive (x y . z) (foo) ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would, logically speaking, pop off the values returned from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(foo)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and push them as three values, corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>z</CODE>. In that case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nbinds</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be 3, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nrest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be 1 (to indicate that one of the bindings was a rest argument).</P>
<P>Signals an error if there is an insufficient number of values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002fcc-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call/cc</STRONG></DT>
<DT><A name=index-tail_002dcall_002fcc></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tail-call/cc</STRONG></DT>
<DD>
<P>Capture the current continuation, and then call (or tail-call) the procedure on the top of the stack, with the continuation as the argument.</P>
<P><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not require a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-frame</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be pushed on the stack, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does, because it needs to capture the stack before the frame is pushed.</P>
<P>Both the VM continuation and the C continuation are captured.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Function-Prologue-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Trampoline-Instructions" rel=next>Trampoline Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Call-and-Return-Instructions" rel=prev>Procedure Call and Return Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Function-Prologue-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.4 Function Prologue Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A function call in Guile is very cheap: the VM simply hands control to the procedure. The procedure itself is responsible for asserting that it has been passed an appropriate number of arguments. This strategy allows arbitrarily complex argument parsing idioms to be developed, without harming the common case.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, only calls to keyword-argument procedures &#8220;pay&#8221; for the cost of parsing keyword arguments. (At the time of this writing, calling procedures with keyword arguments is typically two to four times as costly as calling procedures with a fixed set of arguments.)</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assert_002dnargs_002dee></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assert-nargs-ee</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-assert_002dnargs_002dge></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assert-nargs-ge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Assert that the current procedure has been passed exactly<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ee</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>case, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or more arguments, for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ge</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded over two bytes.</P>
<P>The number of arguments is determined by subtracting the frame pointer from the stack pointer (<CODE>sp - (fp -1)</CODE>). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>, for more details on stack frames.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002dnargs_002dne></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-nargs-ne</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n offset</EM></DT>
<DT><A name=index-br_002dif_002dnargs_002dgt></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-nargs-gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n offset</EM></DT>
<DT><A name=index-br_002dif_002dnargs_002dlt></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-nargs-lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the number of arguments is not equal to, greater than, or less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded over two bytes, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the normal three-byte encoding.</P>
<P>These instructions are used to implement multiple arities, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-lambda</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Case_002dlambda">Case-lambda</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind_002doptionals></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-optionals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>If the procedure has been called with fewer than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, fill in the remaining arguments with an unbound value (<CODE>SCM_UNDEFINED</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded over two bytes.</P>
<P>The optionals can be later initialized conditionally via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-bound?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-push_002drest></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>push-rest</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Pop off excess arguments (more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>), collecting them into a list, and push that list. Used to bind a rest argument, if the procedure has no keyword arguments. Procedures with keyword arguments use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind-rest</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind_002drest></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-rest</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n idx</EM></DT>
<DD>
<P>Pop off excess arguments (more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>), collecting them into a list. The list is then assigned to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR>th local variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind_002doptionals_002fshuffle></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-optionals/shuffle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nreq nreq-and-opt ntotal</EM></DT>
<DT><A name=index-bind_002doptionals_002fshuffle_002dor_002dbr></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-optionals/shuffle-or-br</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nreq nreq-and-opt ntotal offset</EM></DT>
<DD>
<P>Shuffle keyword arguments to the top of the stack, filling in the holes with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>. Each argument is encoded over two bytes.</P>
<P>This instruction is used by procedures with keyword arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of required arguments to the procedure, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq-and-opt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the total number of positional arguments (required plus optional).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind-optionals/shuffle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will scan the stack from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq</VAR>th argument up to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq-and-opt</VAR>th, and start shuffling when it sees the first keyword argument or runs out of positional arguments.</P>
<P><CODE>bind-optionals/shuffle-or-br</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does the same, except that it checks if there are too many positional arguments before shuffling. If this is the case, it jumps to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>, encoded using the normal three-byte encoding.</P>
<P>Shuffling simply moves the keyword arguments past the total number of arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ntotal</VAR>, which includes keyword and rest arguments. The free slots created by the shuffle are filled in with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>, so they may be conditionally initialized later in the function&#8217;s prologue.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind_002dkwargs></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind-kwargs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>idx ntotal flags</EM></DT>
<DD>
<P>Parse keyword arguments, assigning their values to the corresponding local variables. The keyword arguments should already have been shuffled above the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ntotal</VAR>th stack slot by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind-optionals/shuffle</CODE>.</P>
<P>The parsing is driven by a keyword arguments association list, looked up from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR>th element of the procedures object array. The alist is a list of pairs of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>kw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>)</CODE>, mapping keyword arguments to their local variable indices.</P>
<P>There are two bitflags that affect the parser,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allow-other-keys?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>0x1</CODE>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rest?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>0x2</CODE>). Unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allow-other-keys?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set, the parser will signal an error if an unknown key is found. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rest?</CODE>is set, errors parsing the keyword arguments will be ignored, as a later<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind-rest</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction will collect all of the tail arguments, including the keywords, into a list. Otherwise if the keyword arguments are invalid, an error is signalled.</P>
<P><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ntotal</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are encoded over two bytes each, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded over one byte.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reserve_002dlocals></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reserve-locals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Resets the stack pointer to have space for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>local variables, including the arguments. If this operation increments the stack pointer, as in a push, the new slots are filled with<CODE>SCM_UNBOUND</CODE>. If this operation decrements the stack pointer, any excess values are dropped.</P>
<P><CODE>reserve-locals</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is typically used after argument parsing to reserve space for local variables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assert_002dnargs_002dee_002flocals></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assert-nargs-ee/locals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-assert_002dnargs_002dge_002flocals></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assert-nargs-ge/locals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>A combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assert-nargs-ee</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reserve-locals</CODE>. The number of arguments is encoded in the lower three bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, a one-byte value. The number of additional local variables is take from the upper 5 bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Trampoline-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Branch-Instructions" rel=next>Branch Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Function-Prologue-Instructions" rel=prev>Function Prologue Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Trampoline-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.5 Trampoline Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Though most applicable objects in Guile are procedures implemented in bytecode, not all are. There are primitives, continuations, and other procedure-like objects that have their own calling convention. Instead of adding special cases to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction, Guile wraps these other applicable objects in VM trampoline procedures, then provides special support for these objects in bytecode.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Trampoline procedures are typically generated by Guile at runtime, for example in response to a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_make_gsubr</CODE>. As such, a compiler probably shouldn&#8217;t emit code with these instructions. However, it&#8217;s still interesting to know how these things work, so we document these trampoline instructions here.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-subr_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>subr-call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DD>
<P>Pop off a foreign pointer (which should have been pushed on by the trampoline), and call it directly, with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments from the stack. Return the resulting value or values to the calling procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-foreign_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>foreign-call</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs</EM></DT>
<DD>
<P>Pop off an internal foreign object (which should have been pushed on by the trampoline), and call that foreign function with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments from the stack. Return the resulting value to the calling procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-continuation_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>continuation-call</STRONG></DT>
<DD>
<P>Pop off an internal continuation object (which should have been pushed on by the trampoline), and reinstate that continuation. All of the procedure&#8217;s arguments are passed to the continuation. Does not return.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-partial_002dcont_002dcall></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>partial-cont-call</STRONG></DT>
<DD>
<P>Pop off two objects from the stack: the dynamic winds associated with the partial continuation, and the VM continuation object. Unroll the continuation onto the stack, rewinding the dynamic environment and overwriting the current frame, and pass all arguments to the continuation. Control flow proceeds where the continuation was captured.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Branch-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Data-Constructor-Instructions" rel=next>Data Constructor Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Trampoline-Instructions" rel=prev>Trampoline Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Branch-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.6 Branch Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All the conditional branch instructions described below work in the same way:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>They pop off Scheme object(s) located on the stack for use in the branch condition</LI>
<LI>If the condition is true, then the instruction pointer is increased by the offset passed as an argument to the branch instruction;</LI>
<LI>Program execution proceeds with the next instruction (that is, the one to which the instruction pointer points).</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the offset passed to the instruction is encoded as three 8-bit integers, in big-endian order, effectively giving Guile a 24-bit relative address space.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>. No values are popped.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the object on the stack is not false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002dnot></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the object on the stack is false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002deq></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the two objects located on the stack are equal in the sense of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>. Note that, for this instruction, the stack pointer is decremented by two Scheme objects instead of only one.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002dnot_002deq></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-not-eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>br-if-eq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for non-<CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002dnull></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-null</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the object on the stack is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-br_002dif_002dnot_002dnull></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>br-if-not-null</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>offset</EM></DT>
<DD>
<P>Jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the object on the stack is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Data-Constructor-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Instructions" rel=next>Loading Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Branch-Instructions" rel=prev>Branch Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Data-Constructor-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.7 Data Constructor Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These instructions push simple immediate values onto the stack, or construct compound data structures from values on the stack.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dint8></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-int8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, an 8-bit integer, onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dint8_003a0></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-int8:0</STRONG></DT>
<DD>
<P>Push the immediate value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dint8_003a1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-int8:1</STRONG></DT>
<DD>
<P>Push the immediate value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dint16></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-int16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, a 16-bit integer, onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002duint64></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-uint64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, an unsigned 64-bit integer, onto the stack. The value is encoded in 8 bytes, most significant byte first (big-endian).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dint64></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-int64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, a signed 64-bit integer, onto the stack. The value is encoded in 8 bytes, most significant byte first (big-endian), in twos-complement arithmetic.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dfalse></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-false</STRONG></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dtrue></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-true</STRONG></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dnil></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-nil</STRONG></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#nil</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002deol></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-eol</STRONG></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dchar8></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-char8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, an 8-bit character, onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dchar32></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-char32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, an 32-bit character, onto the stack. The value is encoded in big-endian order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dsymbol-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-symbol</STRONG></DT>
<DD>
<P>Pops a string off the stack, and pushes a symbol.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dkeyword></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Pops a symbol off the stack, and pushes a keyword.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list-3></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Pops off the top<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values off of the stack, consing them up into a list, then pushes that list on the stack. What was the topmost value will be the last element in the list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a two-byte value, most significant byte first.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector-3></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Create and fill a vector with the top<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values from the stack, popping off those values and pushing on the resulting vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a two-byte value, like in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dstruct-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Make a new struct from the top<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values on the stack. The values are popped, and the new struct is pushed.</P>
<P>The deepest value is used as the vtable for the struct, and the rest are used in order as the field initializers. Tail arrays are not supported by this instruction.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002darray-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Pop an array shape from the stack, then pop the remaining<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, pushing a new array.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded over three bytes.</P>
<P>The array shape should be appropriate to store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Array-Procedures">Array Procedures</A>, for more information on array shapes.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many of these data structures are constant, never changing over the course of the different invocations of the procedure. In that case it is often advantageous to make them once when the procedure is created, and just reference them from the object table thereafter. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Variables-and-the-VM">Variables and the VM</A>, for more information on the object table.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-object_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>object-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-long_002dobject_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>long-object-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Push<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>th value from the current program&#8217;s object vector. The &#8220;long&#8221; variant has a 16-bit index instead of an 8-bit index.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Environment-Instructions" rel=next>Dynamic Environment Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Data-Constructor-Instructions" rel=prev>Data Constructor Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.8 Loading Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to VM instructions, an instruction stream may contain variable-length data embedded within it. This data is always preceded by special loading instructions, which interpret the data and advance the instruction pointer to the next VM instruction.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of these loading instructions have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter, indicating the size of the embedded data, in bytes. The length itself is encoded in 3 bytes.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dnumber></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>length</EM></DT>
<DD>
<P>Load an arbitrary number from the instruction stream. The number is embedded in the stream as a string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dstring></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>length</EM></DT>
<DD>
<P>Load a string from the instruction stream. The string is assumed to be encoded in the &#8220;latin1&#8221; locale.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dwide_002dstring></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-wide-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>length</EM></DT>
<DD>
<P>Load a UTF-32 string from the instruction stream.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the length in bytes, not in codepoints.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dsymbol></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>length</EM></DT>
<DD>
<P>Load a symbol from the instruction stream. The symbol is assumed to be encoded in the &#8220;latin1&#8221; locale. Symbols backed by wide strings may be loaded via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>load-wide-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-symbol</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002darray></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>length</EM></DT>
<DD>
<P>Load a uniform array from the instruction stream. The shape and type of the array are popped off the stack, in that order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dprogram></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-program</STRONG></DT>
<DD>
<P>Load bytecode from the instruction stream, and push a compiled procedure.</P>
<P>This instruction pops one value from the stack: the program&#8217;s object table, as a vector, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the case that the program has no object table. A program that does not reference toplevel bindings and does not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>object-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not need an object table.</P>
<P>This instruction is unlike the rest of the loading instructions, because instead of parsing its data, it directly maps the instruction stream onto a C structure,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct scm_objcode</CODE>. See<A href="https://www.gnu.org/software/guile/manual/guile.html#Bytecode-and-Objcode">Bytecode and Objcode</A>, for more information.</P>
<P>The resulting compiled procedure will not have any free variables captured, so it may be loaded only once but used many times to create closures.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-Environment-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-Instructions" rel=next>Miscellaneous Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Instructions" rel=prev>Loading Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-Environment-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.9 Dynamic Environment Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s virtual machine has low-level support for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE>, dynamic binding, and composable prompts and aborts.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-wind></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>wind</STRONG></DT>
<DD>
<P>Pop an unwind thunk and a wind thunk from the stack, in that order, and push them onto the &#8220;dynamic stack&#8221;. The unwind thunk will be called on nonlocal exits, and the wind thunk on reentries. Used to implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE>.</P>
<P>Note that neither thunk is actually called; the compiler should emit calls to wind and unwind for the normal dynamic-wind control flow. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unwind></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unwind</STRONG></DT>
<DD>
<P>Pop off the top entry from the &#8220;dynamic stack&#8221;, for example, a wind/unwind thunk pair.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unwind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions should be properly paired with their winding instructions, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wind</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-wind_002dfluids></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>wind-fluids</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Pop off<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>fluids from the stack, in that order. Set the fluids to the values by creating a with-fluids object and pushing that object on the dynamic stack. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unwind_002dfluids></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unwind-fluids</STRONG></DT>
<DD>
<P>Pop a with-fluids object from the dynamic stack, and swap the current values of its fluids with the saved values of its fluids. In this way, the dynamic environment is left as it was before the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wind-fluids</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction was processed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dref-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-ref</STRONG></DT>
<DD>
<P>Pop a fluid from the stack, and push its current value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fluid_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fluid-set</STRONG></DT>
<DD>
<P>Pop a value and a fluid from the stack, in that order, and set the fluid to the value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-prompt></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>prompt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>escape-only? offset</EM></DT>
<DD>
<P>Establish a dynamic prompt. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>, for more information on prompts.</P>
<P>The prompt will be pushed on the dynamic stack. The normal control flow should ensure that the prompt is popped off at the end, via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unwind</CODE>.</P>
<P>If an abort is made to this prompt, control will jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>, a three-byte relative address. The continuation and all arguments to the abort will be pushed on the stack, along with the total number of arguments (including the continuation. If control returns to the handler, the prompt is already popped off by the abort mechanism. (Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implements Felleisen&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>&#8211;F&#8211;</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator.)</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>escape-only?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is nonzero, the prompt will be marked as escape-only, which allows an abort to this prompt to avoid reifying the continuation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-abort-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Abort to a dynamic prompt.</P>
<P>This instruction pops one tail argument list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, and a prompt tag from the stack. The dynamic environment is then searched for a prompt having the given tag. If none is found, an error is signalled. Otherwise all arguments are passed to the prompt&#8217;s handler, along with the captured continuation, if necessary.</P>
<P>If the prompt&#8217;s handler can be proven to not reference the captured continuation, no continuation is allocated. This decision happens dynamically, at run-time; the general case is that the continuation may be captured, and thus resumed. A reinstated continuation will have its arguments pushed on the stack, along with the number of arguments, as in the multiple-value return convention. Therefore an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction should be followed by code ready to handle the equivalent of a multiply-valued return.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Miscellaneous-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Scheme-Instructions" rel=next>Inlined Scheme Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Environment-Instructions" rel=prev>Dynamic Environment Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Miscellaneous-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.10 Miscellaneous Instructions</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-nop></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>nop</STRONG></DT>
<DD>
<P>Does nothing! Used for padding other instructions to certain alignments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-halt></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>halt</STRONG></DT>
<DD>
<P>Exits the VM, returning a SCM value. Normally, this instruction is only part of the &#8220;bootstrap program&#8221;, a program run when a virtual machine is first entered; compiled Scheme procedures will not contain this instruction.</P>
<P>If multiple values have been returned, the SCM value will be a multiple-values object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-break-3></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break</STRONG></DT>
<DD>
<P>Does nothing, but invokes the break hook.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-drop-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drop</STRONG></DT>
<DD>
<P>Pops off the top value from the stack, throwing it away.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup</STRONG></DT>
<DD>
<P>Re-pushes the top value onto the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-void></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>void</STRONG></DT>
<DD>
<P>Pushes &#8220;the unspecified value&#8221; onto the stack.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Scheme-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Mathematical-Instructions" rel=next>Inlined Mathematical Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-Instructions" rel=prev>Miscellaneous Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Scheme-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.11 Inlined Scheme Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Scheme compiler can recognize the application of standard Scheme procedures. It tries to inline these small operations to avoid the overhead of creating new stack frames.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Since most of these operations are historically implemented as C primitives, not inlining them would entail constantly calling out from the VM to the interpreter, which has some costs&#8212;registers must be saved, the interpreter has to dispatch, called procedures have to do much type checking, etc. It&#8217;s much more efficient to inline these operations in the virtual machine itself.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of these instructions pop their arguments from the stack and push their results, and take no parameters from the instruction stream. Thus, unlike in the previous sections, these instruction definitions show stack parameters instead of parameters from the instruction stream.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-not-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-not_002dnot></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not-not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-eq_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eq?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-not_002deq_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not-eq?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-null_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null?</STRONG></DT>
<DT><A name=index-not_002dnull_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not-null?</STRONG></DT>
<DT><A name=index-eqv_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eqv?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-equal_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>equal?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-pair_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-list_003f-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-set_002dcar_0021-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-car!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair x</EM></DT>
<DT><A name=index-set_002dcdr_0021-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-cdr!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair x</EM></DT>
<DT><A name=index-cons-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-car-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>car</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-cdr-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-vector_002dref-3></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-vector_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x n y</EM></DT>
<DT><A name=index-struct_003f-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-struct_002dref-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x n</EM></DT>
<DT><A name=index-struct_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x n v</EM></DT>
<DT><A name=index-struct_002dvtable-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-vtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-class_002dof-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-of</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-slot_002dref-2></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct n</EM></DT>
<DT><A name=index-slot_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct n x</EM></DT>
<DD>
<P>Inlined implementations of their Scheme equivalents.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and friends compile to a series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Mathematical-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Bytevector-Instructions" rel=next>Inlined Bytevector Instructions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Scheme-Instructions" rel=prev>Inlined Scheme Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Mathematical-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.12 Inlined Mathematical Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Inlining mathematical operations has the obvious advantage of handling fixnums without function calls or allocations. The trick, of course, is knowing when the result of an operation will be a fixnum, and there might be a couple bugs here.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">More instructions could be added here over time.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As in the previous section, the definitions below show stack parameters instead of instruction stream parameters.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-add1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-sub></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sub</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-sub1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sub1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-mul></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mul</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-div-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>div</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-quo></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-rem></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rem</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-mod-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-ee_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ee?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-lt_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lt?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-gt_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gt?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-le_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>le?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-ge_003f></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ge?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-ash-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x n</EM></DT>
<DT><A name=index-logand-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-logior-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-logxor-1></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logxor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Inlined implementations of the corresponding mathematical operations.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Bytevector-Instructions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Inlined-Mathematical-Instructions" rel=prev>Inlined Mathematical Instructions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set" rel=up>Instruction Set</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inlined-Bytevector-Instructions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>9.3.6.13 Inlined Bytevector Instructions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevector operations correspond closely to what the current hardware can do, so it makes sense to inline them to VM instructions, providing a clear path for eventual native compilation. Without this, Scheme programs would need other primitives for accessing raw bytes &#8211; but these primitives are as good as any.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As in the previous section, the definitions below show stack parameters instead of instruction stream parameters.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The multibyte formats (<CODE>u16</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f64</CODE>, etc) take an extra endianness argument. Only aligned native accesses are currently fast-pathed in Guile&#8217;s VM.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bv_002du8_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u8-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002ds8_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s8-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002du16_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u16-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002ds16_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s16-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002du32_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u32-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002ds32_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s32-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002du64_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u64-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002ds64_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s64-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002df32_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f32-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002df64_002dnative_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f64-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n</EM></DT>
<DT><A name=index-bv_002du16_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u16-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002ds16_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s16-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002du32_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u32-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002ds32_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s32-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002du64_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u64-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002ds64_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s64-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002df32_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f32-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002df64_002dref></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f64-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n endianness</EM></DT>
<DT><A name=index-bv_002du8_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u8-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002ds8_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s8-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002du16_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u16-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002ds16_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s16-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002du32_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u32-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002ds32_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s32-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002du64_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u64-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002ds64_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s64-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002df32_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f32-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002df64_002dnative_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f64-native-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val</EM></DT>
<DT><A name=index-bv_002du16_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u16-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002ds16_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s16-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002du32_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u32-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002ds32_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s32-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002du64_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-u64-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002ds64_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-s64-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002df32_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f32-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DT><A name=index-bv_002df64_002dset></A>Instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bv-f64-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv n val endianness</EM></DT>
<DD>
<P>Inlined implementations of the corresponding bytevector operations.</P></DD></DL>