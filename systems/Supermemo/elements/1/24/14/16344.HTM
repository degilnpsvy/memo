<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>9.4 Compiling to the Virtual Machine</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compilers have a mystique about them that is attractive and off-putting at the same time. They are attractive because they are magical &#8211; they transform inert text into live results, like throwing the switch on Frankenstein&#8217;s monster. However, this magic is perceived by many to be impenetrable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section aims to pay attention to the small man behind the curtain.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile">Read/Load/Eval/Compile</A>, if you&#8217;re lost and you just wanted to know how to compile your<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Compiler-Tower">Compiler Tower</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-Compiler">The Scheme Compiler</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Tree_002dIL">Tree-IL</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#GLIL">GLIL</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Assembly">Assembly</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Bytecode-and-Objcode">Bytecode and Objcode</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Writing-New-High_002dLevel-Languages">Writing New High-Level Languages</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Extending-the-Compiler">Extending the Compiler</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compiler-Tower></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-Compiler" rel=next>The Scheme Compiler</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Compiler-Tower-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.1 Compiler Tower</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s compiler is quite simple, actually &#8211; its<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compilers</EM>, to put it more accurately. Guile defines a tower of languages, starting at Scheme and progressively simplifying down to languages that resemble the VM instruction set (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Instruction-Set">Instruction Set</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each language knows how to compile to the next, so each step is simple and understandable. Furthermore, this set of languages is not hardcoded into Guile, so it is possible for the user to add new high-level languages, new passes, or even different compilation targets.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Languages are registered in the module,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system base language)</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (system base language))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">They are registered with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-language</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dlanguage></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[#:name] [#:title] [#:reader] [#:printer] [#:parser=#f] [#:compilers='()] [#:decompilers='()] [#:evaluator=#f] [#:joiner=#f] [#:for-humans?=#t] [#:make-default-environment=make-fresh-user-module]</EM></DT>
<DD>
<P>Define a language.</P>
<P>This syntax defines a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#&lt;language&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current environment. In addition, the language will be added to the global language set. For example, this is the language definition for Scheme:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-language scheme
  #:title	"Scheme"
  #:reader      (lambda (port env) ...)
  #:compilers   `((tree-il . ,compile-tree-il))
  #:decompilers `((tree-il . ,decompile-tree-il))
  #:evaluator	(lambda (x module) (primitive-eval x))
  #:printer	write
  #:make-default-environment (lambda () ...))
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The interesting thing about having languages defined this way is that they present a uniform interface to the read-eval-print loop. This allows the user to change the current language of the REPL:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; ,language tree-il
Happy hacking with Tree Intermediate Language!  To switch back, type `,L scheme'.
tree-il@(guile-user)&gt; ,L scheme
Happy hacking with Scheme!  To switch back, type `,L tree-il'.
scheme@(guile-user)&gt; 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Languages can be looked up by name, as they were above.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lookup_002dlanguage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lookup-language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Looks up a language named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, autoloading it if necessary.</P>
<P>Languages are autoloaded by looking for a variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a module named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(language<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec)</CODE>.</P>
<P>The language object will be returned, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there does not exist a language with that name.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Defining languages this way allows us to programmatically determine the necessary steps for compiling code from one language to another.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lookup_002dcompilation_002dorder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lookup-compilation-order</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>from to</EM></DT>
<DD>
<P>Recursively traverses the set of languages to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>from</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can compile, depth-first, and return the first path that can transform<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>from</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>to</VAR>. Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no path is found.</P>
<P>This function memoizes its results in a cache that is invalidated by subsequent calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-language</CODE>, so it should be quite fast.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is a notion of a &#8220;current language&#8221;, which is maintained in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-language</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter, defined in the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. This language is normally Scheme, and may be rebound by the user. The run-time compilation interfaces (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Read_002fLoad_002fEval_002fCompile">Read/Load/Eval/Compile</A>) also allow you to choose other source and target languages.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The normal tower of languages when compiling Scheme goes like this:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Scheme</LI>
<LI>Tree Intermediate Language (Tree-IL)</LI>
<LI>Guile Lowlevel Intermediate Language (GLIL)</LI>
<LI>Assembly</LI>
<LI>Bytecode</LI>
<LI>Objcode</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Object code may be serialized to disk directly, though it has a cookie and version prepended to the front. But when compiling Scheme at run time, you want a Scheme value: for example, a compiled procedure. For this reason, so as not to break the abstraction, Guile defines a fake language at the bottom of the tower:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Value</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compiling to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loads the object code into a procedure, and wakes the sleeping giant.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Perhaps this strangeness can be explained by example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to compiling to object code, because it produces object code that has to live in the barren world outside the Guile runtime; but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to compiling to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE>, as its product re-enters the Guile world.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Indeed, the process of compilation can circulate through these different worlds indefinitely, as shown by the following quine:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>((lambda (x) ((compile x) x)) '(lambda (x) ((compile x) x)))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Scheme-Compiler></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Tree_002dIL" rel=next>Tree-IL</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Compiler-Tower" rel=prev>Compiler Tower</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Scheme-Compiler-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.2 The Scheme Compiler</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The job of the Scheme compiler is to expand all macros and all of Scheme to its most primitive expressions. The definition of &#8220;primitive&#8221; is given by the inventory of constructs provided by Tree-IL, the target language of the Scheme compiler: procedure applications, conditionals, lexical references, etc. This is described more fully in the next section.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The tricky and amusing thing about the Scheme-to-Tree-IL compiler is that it is completely implemented by the macro expander. Since the macro expander has to run over all of the source code already in order to expand macros, it might as well do the analysis at the same time, producing Tree-IL expressions directly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because this compiler is actually the macro expander, it is extensible. Any macro which the user writes becomes part of the compiler.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Scheme-to-Tree-IL expander may be invoked using the generic<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(compile '(+ 1 2) #:from 'scheme #:to 'tree-il)
&#8658;
 #&lt;&lt;application&gt; src: #f
                 proc: #&lt;&lt;toplevel-ref&gt; src: #f name: +&gt;
                 args: (#&lt;&lt;const&gt; src: #f exp: 1&gt;
                        #&lt;&lt;const&gt; src: #f exp: 2&gt;)&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Or, since Tree-IL is so close to Scheme, it is often useful to expand Scheme to Tree-IL, then translate back to Scheme. For that reason the expander provides two interfaces. The former is equivalent to calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(macroexpand '(+ 1 2) 'c)</CODE>, where the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is for &#8220;compile&#8221;. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the default), the result is translated back to Scheme:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(macroexpand '(+ 1 2))
&#8658; (+ 1 2)
(macroexpand '(let ((x 10)) (* x x)))
&#8658; (let ((x84 10)) (* x84 x84))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second example shows that as part of its job, the macro expander renames lexically-bound variables. The original names are preserved when compiling to Tree-IL, but can&#8217;t be represented in Scheme: a lexical binding only has one name. It is for this reason that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>native</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>output of the expander is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>Scheme. There&#8217;s too much information we would lose if we translated to Scheme directly: lexical variable names, source locations, and module hygiene.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note however that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>macroexpand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have the same signature as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-tree-il</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-tree-il</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a small wrapper around<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>macroexpand</CODE>, to make it conform to the general form of compiler procedures in Guile&#8217;s language tower.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compiler procedures take three arguments: an expression, an environment, and a keyword list of options. They return three values: the compiled expression, the corresponding environment for the target language, and a &#8220;continuation environment&#8221;. The compiled expression and environment will serve as input to the next language&#8217;s compiler. The &#8220;continuation environment&#8221; can be used to compile another expression from the same source language within the same module.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, you might compile the expression,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(define-module (foo))</CODE>. This will result in a Tree-IL expression and environment. But if you compiled a second expression, you would want to take into account the compile-time effect of compiling the previous expression, which puts the user in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(foo)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. That is purpose of the &#8220;continuation environment&#8221;; you would pass it as the environment when compiling the subsequent expression.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For Scheme, an environment is a module. By default, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compile-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures compile in a fresh module, such that bindings and macros introduced by the expression being compiled are isolated:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(eq? (current-module) (compile '(current-module)))
&#8658; #f

(compile '(define hello 'world))
(defined? 'hello)
&#8658; #f

(define / *)
(eq? (compile '/) /)
&#8658; #f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similarly, changes to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-reader</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fluid (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Loading"><CODE>current-reader</CODE></A>) are isolated:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(compile '(fluid-set! current-reader (lambda args 'fail)))
(fluid-ref current-reader)
&#8658; #f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Nevertheless, having the compiler and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compilee</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>share the same name space can be achieved by explicitly passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-module)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the compilation environment:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define hello 'world)
(compile 'hello #:env (current-module))
&#8658; world
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Tree_002dIL></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#GLIL" rel=next>GLIL</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-Compiler" rel=prev>The Scheme Compiler</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Tree_002dIL-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.3 Tree-IL</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Tree Intermediate Language (Tree-IL) is a structured intermediate language that is close in expressive power to Scheme. It is an expanded, pre-analyzed Scheme.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Tree-IL is &#8220;structured&#8221; in the sense that its representation is based on records, not S-expressions. This gives a rigidity to the language that ensures that compiling to a lower-level language only requires a limited set of transformations. For example, the Tree-IL type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;const&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a record type with two fields,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>src</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp</CODE>. Instances of this type are created via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-const</CODE>. Fields of this type are accessed via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const-src</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const-exp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures. There is also a predicate,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const?</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Records">Records</A>, for more information on records.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All Tree-IL types have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>src</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot, which holds source location information for the expression. This information, if present, will be residualized into the compiled object code, allowing backtraces to show source information. The format of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>src</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as that returned by Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>source-properties</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Source-Properties">Source Properties</A>, for more information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although Tree-IL objects are represented internally using records, there is also an equivalent S-expression external representation for each kind of Tree-IL. For example, the S-expression representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#&lt;const src: #f exp: 3&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression would be:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(const 3)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Users may program with this format directly at the REPL:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; ,language tree-il
Happy hacking with Tree Intermediate Language!  To switch back, type `,L scheme'.
tree-il@(guile-user)&gt; (apply (primitive +) (const 32) (const 10))
&#8658; 42
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>src</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields are left out of the external representation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One may create Tree-IL objects from their external representations via calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parse-tree-il</CODE>, the reader for Tree-IL. If any source information is attached to the input S-expression, it will be propagated to the resulting Tree-IL expressions. This is probably the easiest way to compile to Tree-IL: just make the appropriate external representations in S-expression format, and let<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parse-tree-il</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>take care of the rest.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cvoid_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;void&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src</EM></DT>
<DT><A name=index-_0028void_0029></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(void)</STRONG></DT>
<DD>
<P>An empty expression. In practice, equivalent to Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(if #f #f)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cconst_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;const&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src exp</EM></DT>
<DT><A name=index-_0028const></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(const</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>exp</VAR>)</EM></DT>
<DD>
<P>A constant.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cprimitive_002dref_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;primitive-ref&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name</EM></DT>
<DT><A name=index-_0028primitive></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(primitive</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>name</VAR>)</EM></DT>
<DD>
<P>A reference to a &#8220;primitive&#8221;. A primitive is a procedure that, when compiled, may be open-coded. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is usually recognized as a primitive, so that it compiles down to a single instruction.</P>
<P>Compilation of Tree-IL usually begins with a pass that resolves some<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;module-ref&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;toplevel-ref&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;primitive-ref&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions. The actual compilation pass has special cases for applications of certain primitives, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clexical_002dref_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;lexical-ref&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name gensym</EM></DT>
<DT><A name=index-_0028lexical></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(lexical</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensym</VAR>)</EM></DT>
<DD>
<P>A reference to a lexically-bound variable. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the original name of the variable in the source program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a unique identifier for this variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clexical_002dset_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;lexical-set&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name gensym exp</EM></DT>
<DT><A name=index-_0028set_0021></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lexical<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensym</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>Sets a lexically-bound variable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cmodule_002dref_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;module-ref&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src mod name public?</EM></DT>
<DT><A name=index-_0028></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>@<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DT><A name=index-_0028-1></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>@@<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</EM></DT>
<DD>
<P>A reference to a variable in a specific module.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be the name of the module, e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(guile-user)</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>public?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be looked up in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR>&#8217;s public interface, and serialized with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE>; otherwise it will be looked up among the module&#8217;s private bindings, and is serialized with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@@</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cmodule_002dset_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;module-set&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src mod name public? exp</EM></DT>
<DT><A name=index-_0028set_0021-1></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(@<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DT><A name=index-_0028set_0021-2></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(@@<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>Sets a variable in a specific module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003ctoplevel_002dref_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;toplevel-ref&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name</EM></DT>
<DT><A name=index-_0028toplevel></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(toplevel</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>name</VAR>)</EM></DT>
<DD>
<P>References a variable from the current procedure&#8217;s module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003ctoplevel_002dset_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;toplevel-set&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name exp</EM></DT>
<DT><A name=index-_0028set_0021-3></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(toplevel<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>Sets a variable in the current procedure&#8217;s module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003ctoplevel_002ddefine_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;toplevel-define&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src name exp</EM></DT>
<DT><A name=index-_0028define></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(toplevel<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>Defines a new top-level variable in the current procedure&#8217;s module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cconditional_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;conditional&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src test then else</EM></DT>
<DT><A name=index-_0028if></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>then</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>else</VAR>)</EM></DT>
<DD>
<P>A conditional. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>else</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not optional.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003capplication_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;application&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src proc args</EM></DT>
<DT><A name=index-_0028apply></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>)</EM></DT>
<DD>
<P>A procedure call.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003csequence_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;sequence&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src exps</EM></DT>
<DT><A name=index-_0028begin></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(begin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exps</VAR>)</EM></DT>
<DD>
<P>Like Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clambda_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;lambda&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src meta body</EM></DT>
<DT><A name=index-_0028lambda></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(lambda</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>meta</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>)</EM></DT>
<DD>
<P>A closure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>meta</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an association list of properties for the procedure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a single Tree-IL expression of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda-case&gt;</CODE>. As the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda-case&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause can chain to an alternate clause, this makes Tree-IL&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have the expressiveness of Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-lambda</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clambda_002dcase_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;lambda-case&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>req opt rest kw inits gensyms body alternate</EM></DT>
<DT><A name=index-_0028lambda_002dcase></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(lambda-case</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((<VAR>req</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>) [<VAR>alternate</VAR>])</EM></DT>
<DD>
<P>One clause of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-lambda</CODE>. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression in Scheme is treated as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with one clause.</P>
<P><VAR>req</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of the procedure&#8217;s required arguments, as symbols.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of the optional arguments, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there are no optional arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the rest argument, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P><VAR>kw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of the form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>allow-other-keys?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>keyword</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR>) ...)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keyword</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the keyword corresponding to the argument named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, and whose corresponding gensym is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are tree-il expressions corresponding to all of the optional and keyword arguments, evaluated to bind variables whose value is not supplied by the procedure caller. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is evaluated in the lexical context of previously bound variables, from left to right.</P>
<P><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of gensyms corresponding to all arguments: first all of the required arguments, then the optional arguments if any, then the rest argument if any, then all of the keyword arguments.</P>
<P><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the body of the clause. If the procedure is called with an appropriate number of arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated in tail position. Otherwise, if there is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR>, it should be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda-case&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, representing the next clause to try. If there is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR>, a wrong-number-of-arguments error is signaled.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clet_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;let&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src names gensyms vals exp</EM></DT>
<DT><A name=index-_0028let></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(let</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>Lexical binding, like Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the original binding names,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are gensyms corresponding to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>names</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are Tree-IL expressions for the values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a single Tree-IL expression.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cletrec_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;letrec&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>in-order? src names gensyms vals exp</EM></DT>
<DT><A name=index-_0028letrec></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(letrec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DT><A name=index-_0028letrec_002a></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(letrec*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>A version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;let&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that creates recursive bindings, like Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in-order?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cdynlet_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;dynlet&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluids vals body</EM></DT>
<DT><A name=index-_0028dynlet></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(dynlet</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>fluids</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>)</EM></DT>
<DD>
<P>Dynamic binding; the equivalent of Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-fluids</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluids</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of Tree-IL expressions that will evaluate to fluids, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>a corresponding list of expressions to bind to the fluids during the dynamic extent of the evaluation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cdynref_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;dynref&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid</EM></DT>
<DT><A name=index-_0028dynref></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(dynref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>fluid</VAR>)</EM></DT>
<DD>
<P>A dynamic variable reference.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a Tree-IL expression evaluating to a fluid.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cdynset_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;dynset&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fluid exp</EM></DT>
<DT><A name=index-_0028dynset></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(dynset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>fluid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>)</EM></DT>
<DD>
<P>A dynamic variable set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fluid</VAR>, a Tree-IL expression evaluating to a fluid, will be set to the result of evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cdynwind_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;dynwind&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>winder body unwinder</EM></DT>
<DT><A name=index-_0028dynwind></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(dynwind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>winder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unwinder</VAR>)</EM></DT>
<DD>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>winder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unwinder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should both evaluate to thunks. Ensure that the winder and the unwinder are called before entering and after leaving<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression, without a thunk wrapper.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cprompt_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;prompt&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag body handler</EM></DT>
<DT><A name=index-_0028prompt></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(prompt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>)</EM></DT>
<DD>
<P>A dynamic prompt. Instates a prompt named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, an expression, during the dynamic extent of the execution of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>, also an expression. If an abort occurs to this prompt, control will be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda-case&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression with no optional or keyword arguments, and no alternate. The first argument to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda-case&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be the captured continuation, and then all of the values passed to the abort. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cabort_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;abort&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag args tail</EM></DT>
<DT><A name=index-_0028abort></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(abort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR>)</EM></DT>
<DD>
<P>An abort to the nearest prompt with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, an expression.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of expressions to pass to the prompt&#8217;s handler, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be an expression that will evaluate to a list of additional arguments. An abort will save the partial continuation, which may later be reinstated, resulting in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;abort&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression evaluating to some number of values.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two Tree-IL constructs that are not normally produced by higher-level compilers, but instead are generated during the source-to-source optimization and analysis passes that the Tree-IL compiler does. Users should not generate these expressions directly, unless they feel very clever, as the default analysis pass will generate them as necessary.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003clet_002dvalues_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;let-values&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src names gensyms exp body</EM></DT>
<DT><A name=index-_0028let_002dvalues></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(let-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>)</EM></DT>
<DD>
<P>Like Scheme&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>receive</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; binds the values returned by evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE>-like bindings described by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR>. That is to say,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be an improper list.</P>
<P><CODE>&lt;let-values&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optimization of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;application&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the primitive,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cfix_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;fix&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src names gensyms vals body</EM></DT>
<DT><A name=index-_0028fix></A>External Representation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>(fix</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gensyms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;letrec&gt;</CODE>, but only for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are unset<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions.</P>
<P><CODE>fix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optimization of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>letrec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Tree-IL implements a compiler to GLIL that recursively traverses Tree-IL expressions, writing out GLIL expressions into a linear list. The compiler also keeps some state as to whether the current expression is in tail context, and whether its value will be used in future computations. This state allows the compiler not to emit code for constant expressions that will not be used (e.g. docstrings), and to perform tail calls when in tail position.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most optimization, such as it currently is, is performed on Tree-IL expressions as source-to-source transformations. There will be more optimizations added in the future.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Interested readers are encouraged to read the implementation in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(language tree-il compile-glil)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=GLIL></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Assembly" rel=next>Assembly</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Tree_002dIL" rel=prev>Tree-IL</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=GLIL-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.4 GLIL</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile Lowlevel Intermediate Language (GLIL) is a structured intermediate language whose expressions more closely approximate Guile&#8217;s VM instruction set. Its expression types are defined in<CODE>(language glil)</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dprogram_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-program&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>meta . body</EM></DT>
<DD>
<P>A unit of code that at run-time will correspond to a compiled procedure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>meta</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be an alist of properties, as in Tree-IL&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;lambda&gt;</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an ordered list of GLIL expressions.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dstd_002dprelude_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-std-prelude&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nreq nlocs else-label</EM></DT>
<DD>
<P>A prologue for a function with no optional, keyword, or rest arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of required arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nlocs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the total number of local variables, including the arguments. If the procedure was not given exactly<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nreq</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, control will jump to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>else-label</VAR>, if given, or otherwise signal an error.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dopt_002dprelude_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-opt-prelude&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nreq nopt rest nlocs else-label</EM></DT>
<DD>
<P>A prologue for a function with optional or rest arguments. Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-std-prelude&gt;</CODE>, with the addition that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nopt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of optional arguments (possibly zero) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an index of a local variable at which to bind a rest argument, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there is no rest argument.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dkw_002dprelude_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-kw-prelude&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nreq nopt rest kw allow-other-keys? nlocs else-label</EM></DT>
<DD>
<P>A prologue for a function with keyword arguments. Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-opt-prelude&gt;</CODE>, with the addition that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of keyword arguments, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>allow-other-keys?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a flag indicating whether to allow unknown keys. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Function-Prologue-Instructions"><CODE>bind-kwargs</CODE></A>, for details on the format of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kw</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dbind_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-bind&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>. vars</EM></DT>
<DD>
<P>An advisory expression that notes a liveness extent for a set of variables.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vars</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>argument</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>external</CODE>.</P>
<P><CODE>&lt;glil-bind&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions end up being serialized as part of a program&#8217;s metadata and do not form part of a program&#8217;s code path.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dmv_002dbind_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-mv-bind&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vars rest</EM></DT>
<DD>
<P>A multiple-value binding of the values on the stack to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vars</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the last element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vars</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be treated as a rest argument.</P>
<P>In addition to pushing a binding annotation on the stack, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-bind&gt;</CODE>, an expression is emitted at compilation time to make sure that there are enough values available to bind. See the notes on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Call-and-Return-Instructions">Procedure Call and Return Instructions</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dunbind_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-unbind&gt;</STRONG></DT>
<DD>
<P>Closes the liveness extent of the most recently encountered<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-bind&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-mv-bind&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. As GLIL expressions are compiled, a parallel stack of live bindings is maintained; this expression pops off the top element from that stack.</P>
<P>Bindings are written into the program&#8217;s metadata so that debuggers and other tools can determine the set of live local variables at a given offset within a VM program.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dsource_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-source&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>loc</EM></DT>
<DD>
<P>Records source information for the preceding expression.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>loc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be an association list of containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>column</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keys, e.g. as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>source-properties</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dvoid_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-void&gt;</STRONG></DT>
<DD>
<P>Pushes &#8220;the unspecified value&#8221; on the stack.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dconst_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-const&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Pushes a constant value onto the stack.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a number, string, symbol, keyword, boolean, character, uniform array, the empty list, or a pair or vector of constants.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dlexical_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-lexical&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>local? boxed? op index</EM></DT>
<DD>
<P>Accesses a lexically bound variable. If the variable is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>local?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>it is free. All variables may have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ref</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bound?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as their<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>op</VAR>. Boxed variables may also have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>op</VAR>s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>box</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>empty-box</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fix</CODE>, which correspond in semantics to the VM instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>box</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>empty-box</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fix-closure</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Stack-Layout">Stack Layout</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dtoplevel_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-toplevel&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>op name</EM></DT>
<DD>
<P>Accesses a toplevel variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>op</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ref</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dmodule_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-module&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>op mod name public?</EM></DT>
<DD>
<P>Accesses a variable within a specific module. See Tree-IL&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;module-ref&gt;</CODE>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dlabel_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-label&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>label</EM></DT>
<DD>
<P>Creates a new label.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>label</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any Scheme value, and should be unique.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dbranch_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-branch&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>inst label</EM></DT>
<DD>
<P>Branch to a label.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>label</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;ghil-label&gt;</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inst</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a branching instruction:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>br-if</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>br</CODE>, etc.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dcall_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-call&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>inst nargs</EM></DT>
<DD>
<P>This expression is probably misnamed, as it does not correspond to function calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-call&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invokes the VM instruction named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inst</VAR>, noting that it is called with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>stack arguments. The arguments should be pushed on the stack already. What happens to the stack afterwards depends on the instruction.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dmv_002dcall_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-mv-call&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nargs ra</EM></DT>
<DD>
<P>Performs a multiple-value call.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-label&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>corresponding to the multiple-value return address for the call. See the notes on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mv-call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Call-and-Return-Instructions">Procedure Call and Return Instructions</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cglil_002dprompt_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;glil-prompt&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>label escape-only?</EM></DT>
<DD>
<P>Push a dynamic prompt into the stack, with a handler at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>label</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>escape-only?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a flag that is propagated to the prompt, allowing an abort to avoid capturing a continuation in some cases. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>, for more information.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Users may enter in GLIL at the REPL as well, though there is a bit more bookkeeping to do:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; ,language glil
Happy hacking with Guile Lowlevel Intermediate Language (GLIL)!
To switch back, type `,L scheme'.
glil@(guile-user)&gt; (program () (std-prelude 0 0 #f)
                       (const 3) (call return 1))
&#8658; 3
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Just as in all of Guile&#8217;s compilers, an environment is passed to the GLIL-to-object code compiler, and one is returned as well, along with the object code.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Assembly></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytecode-and-Objcode" rel=next>Bytecode and Objcode</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#GLIL" rel=prev>GLIL</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Assembly-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.5 Assembly</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Assembly is an S-expression-based, human-readable representation of the actual bytecodes that will be emitted for the VM. As such, it is a useful intermediate language both for compilation and for decompilation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Besides the fact that it is not a record-based language, assembly differs from GLIL in four main ways:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Labels have been resolved to byte offsets in the program.</LI>
<LI>Constants inside procedures have either been expressed as inline instructions or cached in object arrays.</LI>
<LI>Procedures with metadata (source location information, liveness extents, procedure names, generic properties, etc) have had their metadata serialized out to thunks.</LI>
<LI>All expressions correspond directly to VM instructions &#8211; i.e., there is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;glil-lexical&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which can be a ref or a set.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Assembly is isomorphic to the bytecode that it compiles to. You can compile to bytecode, then decompile back to assembly, and you have the same assembly code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The general form of assembly instructions is the following:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(<VAR>inst</VAR> <VAR>arg</VAR> ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>names a VM instruction, and its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>s will be embedded in the instruction stream. The easiest way to see assembly is to play around with it at the REPL, as can be seen in this annotated example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; ,pp (compile '(+ 32 10) #:to 'assembly)
(load-program
  ((:LCASE16 . 2))  ; Labels, unused in this case.
  8                 ; Length of the thunk that was compiled.
  (load-program     ; Metadata thunk.
    ()
    17
    #f              ; No metadata thunk for the metadata thunk.
    (make-eol)
    (make-eol)
    (make-int8 2)   ; Liveness extents, source info, and arities,
    (make-int8 8)   ; in a format that Guile knows how to parse.
    (make-int8:0)
    (list 0 3)
    (list 0 1)
    (list 0 3)
    (return))
  (assert-nargs-ee/locals 0)  ; Prologue.
  (make-int8 32)    ; Actual code starts here.
  (make-int8 10)
  (add)
  (return))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Of course you can switch the REPL to assembly and enter in assembly S-expressions directly, like with other languages, though it is more difficult, given that the length fields have to be correct.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytecode-and-Objcode></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Writing-New-High_002dLevel-Languages" rel=next>Writing New High-Level Languages</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Assembly" rel=prev>Assembly</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytecode-and-Objcode-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.6 Bytecode and Objcode</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, the raw bytes. There are actually two different &#8220;languages&#8221; here, corresponding to two different ways to represent the bytes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8220;Bytecode&#8221; represents code as uniform byte vectors, useful for structuring and destructuring code on the Scheme level. Bytecode is the next step down from assembly:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; (compile '(+ 32 10) #:to 'bytecode)
&#8658; #vu8(8 0 0 0 25 0 0 0            ; Header.
       95 0                            ; Prologue.
       10 32 10 10 148 66 17           ; Actual code.
       0 0 0 0 0 0 0 9                 ; Metadata thunk.
       9 10 2 10 8 11 18 0 3 18 0 1 18 0 3 66)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8220;Objcode&#8221; is bytecode, but mapped directly to a C structure,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct scm_objcode</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>struct scm_objcode {
  scm_t_uint32 len;
  scm_t_uint32 metalen;
  scm_t_uint8 base[0];
};
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As one might imagine, objcode imposes a minimum length on the bytecode. Also, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>len</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>metalen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields are in native endianness, which makes objcode (and bytecode) system-dependent.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Objcode also has a couple of important efficiency hacks. First, objcode may be mapped directly from disk, allowing compiled code to be loaded quickly, often from the system&#8217;s disk cache, and shared among multiple processes. Secondly, objcode may be embedded in other objcode, allowing procedures to have the text of other procedures inlined into their bodies, without the need for separate allocation of the code. Of course, the objcode object itself does need to be allocated.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Procedures related to objcode are defined in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system vm objcode)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-objcode_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>objcode?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fobjcode_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_objcode_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is object code,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytecode_002d_003eobjcode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytecode-&gt;objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytecode</EM></DT>
<DT><A name=index-scm_005fbytecode_005fto_005fobjcode></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytecode_to_objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bytecode)</EM></DT>
<DD>
<P>Makes a bytecode object from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bytecode</VAR>, which should be a bytevector. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-load_002dobjcode></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>load-objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file</EM></DT>
<DT><A name=index-scm_005fload_005fobjcode></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_load_objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(file)</EM></DT>
<DD>
<P>Load object code from a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. The file will be mapped into memory via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mmap</CODE>, so this is a very fast operation.</P>
<P>On disk, object code has an sixteen-byte cookie prepended to it, to prevent accidental loading of arbitrary garbage.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dobjcode></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>objcode file</EM></DT>
<DT><A name=index-scm_005fwrite_005fobjcode></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_write_objcode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(objcode)</EM></DT>
<DD>
<P>Write object code out to a file, prepending the sixteen-byte cookie.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-objcode_002d_003ebytecode></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>objcode-&gt;bytecode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>objcode</EM></DT>
<DT><A name=index-scm_005fobjcode_005fto_005fbytecode></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_objcode_to_bytecode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(objcode)</EM></DT>
<DD>
<P>Copy object code out to a bytevector for analysis by Scheme.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedure is actually in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(system vm program)</CODE>, but we&#8217;ll mention it here:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dprogram></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-program</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>objcode objtable [free-vars=#f]</EM></DT>
<DT><A name=index-scm_005fmake_005fprogram></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_program</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(objcode, objtable, free_vars)</EM></DT>
<DD>
<P>Load up object code into a Scheme program. The resulting program will have<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>objtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its object table, which should be a vector or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and will capture the free variables from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>free-vars</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Object code from a file may be disassembled at the REPL via the meta-command<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,disassemble-file</CODE>, abbreviated as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,xx</CODE>. Programs may be disassembled via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,disassemble</CODE>, abbreviated as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,x</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compiling object code to the fake language,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE>, is performed via loading objcode into a program, then executing that thunk with respect to the compilation environment. Normally the environment propagates through the compiler transparently, but users may specify the compilation environment manually as well, as a module.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing-New-High_002dLevel-Languages></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Extending-the-Compiler" rel=next>Extending the Compiler</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytecode-and-Objcode" rel=prev>Bytecode and Objcode</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing-New-High_002dLevel-Languages-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.7 Writing New High-Level Languages</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to integrate a new language<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into Guile&#8217;s compiler system, one has to create the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(language<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lang</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing the language definition and referencing the parser, compiler and other routines processing it. The module hierarchy in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(language brainfuck)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines a very basic Brainfuck implementation meant to serve as easy-to-understand example on how to do this. See for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://en.wikipedia.org/wiki/Brainfuck">http://en.wikipedia.org/wiki/Brainfuck</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information about the Brainfuck language itself.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Extending-the-Compiler></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Writing-New-High_002dLevel-Languages" rel=prev>Writing New High-Level Languages</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compiling-to-the-Virtual-Machine" rel=up>Compiling to the Virtual Machine</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Extending-the-Compiler-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>9.4.8 Extending the Compiler</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At this point we take a detour from the impersonal tone of the rest of the manual. Admit it: if you&#8217;ve read this far into the compiler internals manual, you are a junkie. Perhaps a course at your university left you unsated, or perhaps you&#8217;ve always harbored a desire to hack the holy of computer science holies: a compiler. Well you&#8217;re in good company, and in a good position. Guile&#8217;s compiler needs your help.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are many possible avenues for improving Guile&#8217;s compiler. Probably the most important improvement, speed-wise, will be some form of native compilation, both just-in-time and ahead-of-time. This could be done in many ways. Probably the easiest strategy would be to extend the compiled procedure structure to include a pointer to a native code vector, and compile from bytecode to native code at run-time after a procedure is called a certain number of times.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The name of the game is a profiling-based harvest of the low-hanging fruit, running programs of interest under a system-level profiler and determining which improvements would give the most bang for the buck. It&#8217;s really getting to the point though that native compilation is the next step.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The compiler also needs help at the top end, enhancing the Scheme that it knows to also understand R6RS, and adding new high-level compilers. We have JavaScript and Emacs Lisp mostly complete, but they could use some love; Lua would be nice as well, but whatever language it is that strikes your fancy would be welcome too.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compilers are for hacking, not for admiring or for complaining about. Get to it!