<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.8 Introspection</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Introspection</EM>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>reflection</EM>, means being able to obtain information dynamically about GOOPS objects. It is perhaps best illustrated by considering an object oriented language that does not provide any introspection, namely C++.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Nothing in C++ allows a running program to obtain answers to the following types of question:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>What are the data members of this object or class?</LI>
<LI>What classes does this class inherit from?</LI>
<LI>Is this method call virtual or non-virtual?</LI>
<LI>If I invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Employee::adjustHoliday()</CODE>, what class contains the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>adjustHoliday()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that will be applied?</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C++, answers to such questions can only be determined by looking at the source code, if you have access to it. GOOPS, on the other hand, includes procedures that allow answers to these questions &#8212; or their GOOPS equivalents &#8212; to be obtained dynamically, at run time.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Classes">Classes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Instances">Instances</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Slots">Slots</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Functions">Generic Functions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">Accessing Slots</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Classes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Instances" rel=next>Instances</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Introspection" rel=up>Introspection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Classes-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.8.1 Classes</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A GOOPS class is itself an instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, or of a subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>. The definition of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class has slots that are used to describe the properties of a class, including the following.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dname></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return the name of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002ddirect_002dsupers></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-direct-supers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list containing the direct superclasses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-supers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002ddirect_002dslots></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-direct-slots</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list containing the slot definitions of the direct slots of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002ddirect_002dsubclasses></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-direct-subclasses</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list containing the direct subclasses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-subclasses</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002ddirect_002dmethods></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-direct-methods</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list of all the generic function methods that use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a formal parameter specializer. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-methods</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dprecedence_002dlist></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-precedence-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return the class precedence list for class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Precedence-List">Class Precedence List</A>). This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dslots></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-slots</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list containing the slot definitions for all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s slots, including any slots that are inherited from superclasses. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dsubclasses></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-subclasses</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list of all subclasses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dmethods></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-methods</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Return a list of all methods that use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as one of its formal parameter specializers.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instances></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Slots" rel=next>Slots</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Classes" rel=prev>Classes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Introspection" rel=up>Introspection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instances-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.8.2 Instances</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dof></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-of</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Return the GOOPS class of any Scheme<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-instance_003f></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>instance?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is any GOOPS instance, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-is_002da_003f></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>is-a?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object class</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or one of its subclasses.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>is-a?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate to ask whether any given value belongs to a given class, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-of</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to discover the class of a given value. Note that when GOOPS is loaded (by code using the<CODE>(oop goops)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module) built-in classes like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;string&gt;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;list&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;number&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are automatically set up, corresponding to all Guile Scheme types.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(is-a? 2.3 &lt;number&gt;) &#8658; #t
(is-a? 2.3 &lt;real&gt;) &#8658; #t
(is-a? 2.3 &lt;string&gt;) &#8658; #f
(is-a? '("a" "b") &lt;string&gt;) &#8658; #f
(is-a? '("a" "b") &lt;list&gt;) &#8658; #t
(is-a? (car '("a" "b")) &lt;string&gt;) &#8658; #t
(is-a? &lt;string&gt; &lt;class&gt;) &#8658; #t
(is-a? &lt;class&gt; &lt;string&gt;) &#8658; #f

(class-of 2.3) &#8658; #&lt;&lt;class&gt; &lt;real&gt; 908c708&gt;
(class-of #(1 2 3)) &#8658; #&lt;&lt;class&gt; &lt;vector&gt; 908cd20&gt;
(class-of &lt;string&gt;) &#8658; #&lt;&lt;class&gt; &lt;class&gt; 8bd3e10&gt;
(class-of &lt;class&gt;) &#8658; #&lt;&lt;class&gt; &lt;class&gt; 8bd3e10&gt;
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Slots></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Functions" rel=next>Generic Functions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Instances" rel=prev>Instances</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Introspection" rel=up>Introspection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Slots-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.8.3 Slots</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dslot_002ddefinition></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-slot-definition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class slot-name</EM></DT>
<DD>
<P>Return the slot definition for the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a symbol.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dname></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot name from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002doptions></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-options</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot options from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dallocation></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-allocation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot allocation option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:allocation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">allocation</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:allocation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dgetter></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-getter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot getter option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">getter</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dsetter></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-setter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot setter option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">setter</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002daccessor></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot accessor option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">accessor</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dinit_002dvalue></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-init-value</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot init-value option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-value</A>), or the unbound value if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dinit_002dform></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-init-form</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot init-form option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-form</A>), or the unbound value if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dinit_002dthunk></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-init-thunk</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot init-thunk option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-thunk</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002ddefinition_002dinit_002dkeyword></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-definition-init-keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot-def</EM></DT>
<DD>
<P>Extract and return the slot init-keyword option from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR>. This is the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-keyword</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword is absent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dinit_002dfunction></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-init-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class slot-name</EM></DT>
<DD>
<P>Return the initialization function for the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a symbol.</P>
<P>The returned initialization function incorporates the effects of the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-thunk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot options. These initializations can be overridden by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot option or by a specialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, so, in general, the function returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-init-function</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be irrelevant. For a fuller discussion, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-value</A>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots" rel=next>Accessing Slots</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Slots" rel=prev>Slots</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Introspection" rel=up>Introspection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Functions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.8.4 Generic Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A generic function is an instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, or of a subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE>. The definition of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class has slots that are used to describe the properties of a generic function.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-generic_002dfunction_002dname></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>generic-function-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gf</EM></DT>
<DD>
<P>Return the name of generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gf</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-generic_002dfunction_002dmethods></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>generic-function-methods</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gf</EM></DT>
<DD>
<P>Return a list of the methods of generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gf</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gf</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>methods</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similarly, a method is an instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, or of a subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE>; and the definition of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class has slots that are used to describe the properties of a method.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-method_002dgeneric_002dfunction></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method-generic-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>method</EM></DT>
<DD>
<P>Return the generic function that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>belongs to. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>generic-function</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-method_002dspecializers></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method-specializers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>method</EM></DT>
<DD>
<P>Return a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR>&#8217;s formal parameter specializers . This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>specializers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-method_002dprocedure></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method-procedure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>method</EM></DT>
<DD>
<P>Return the procedure that implements<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR>. This is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>procedure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-method_002dsource></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method-source</STRONG></DT>
<DT><A name=index-method_002dsource-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method-source</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(m &lt;method&gt;)</EM></DT>
<DD>
<P>Return an expression that prints to show the definition of method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-generic cube)

(define-method (cube (n &lt;number&gt;))
  (* n n n))

(map method-source (generic-function-methods cube))
&#8658;
((method ((n &lt;number&gt;)) (* n n n)))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Slots></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Functions" rel=prev>Generic Functions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Introspection" rel=up>Introspection</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Slots-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.8.5 Accessing Slots</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Any slot, regardless of its allocation, can be queried, referenced and set using the following four primitive procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dexists_003f></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-exists?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj slot-name</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a slot with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR>, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dbound_003f></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-bound?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj slot-name</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a value, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P><CODE>slot-bound?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dref-1></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj slot-name</EM></DT>
<DD>
<P>Return the value of the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>.</P>
<P><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P>
<P><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-unbound</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the named slot in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a value (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-unbound</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dset_0021-1></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj slot-name value</EM></DT>
<DD>
<P>Set the value of the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P>
<P><CODE>slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GOOPS stores information about slots in classes. Internally, all of these procedures work by looking up the slot definition for the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(class-of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</CODE>, and then using the slot definition&#8217;s &#8220;getter&#8221; and &#8220;setter&#8221; closures to get and set the slot value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The next four procedures differ from the previous ones in that they take the class as an explicit argument, rather than assuming<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(class-of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</CODE>. Therefore they allow you to apply the &#8220;getter&#8221; and &#8220;setter&#8221; closures of a slot definition in one class to an instance of a different class.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dexists_002dusing_002dclass_003f></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-exists-using-class?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class obj slot-name</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a slot definition for a slot with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR>, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dbound_002dusing_002dclass_003f></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-bound-using-class?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class obj slot-name</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-ref-using-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the same arguments would call the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-unbound</CODE>, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P><CODE>slot-bound-using-class?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot definition for a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dref_002dusing_002dclass></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-ref-using-class</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class obj slot-name</EM></DT>
<DD>
<P>Apply the &#8220;getter&#8221; closure for the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, and return its result.</P>
<P><CODE>slot-ref-using-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot definition for a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P>
<P><CODE>slot-ref-using-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-unbound</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the application of the &#8220;getter&#8221; closure to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an unbound value (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-unbound</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dset_002dusing_002dclass_0021></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-set-using-class!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class obj slot-name value</EM></DT>
<DD>
<P>Apply the &#8220;setter&#8221; closure for the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P>
<P><CODE>slot-set-using-class!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have a slot definition for a slot called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Slots">slot-missing</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Slots whose allocation is per-class rather than per-instance can be referenced and set without needing to specify any particular instance.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dslot_002dref></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-slot-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class slot-name</EM></DT>
<DD>
<P>Return the value of the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>. The named slot must have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:each-subclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocation (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">allocation</A>).</P>
<P>If there is no such slot with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:each-subclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function with arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR>. Otherwise, if the slot value is unbound,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-unbound</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function, with the same arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dslot_002dset_0021></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-slot-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class slot-name value</EM></DT>
<DD>
<P>Set the value of the slot named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. The named slot must have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:each-subclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocation (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">allocation</A>).</P>
<P>If there is no such slot with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:each-subclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function with arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call specifies a non-existent slot name, or tries to reference a slot whose value is unbound, GOOPS calls one of the following generic functions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dmissing></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-missing</STRONG></DT>
<DT><A name=index-slot_002dmissing-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-missing</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) slot-name</EM></DT>
<DT><A name=index-slot_002dmissing-2></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-missing</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) (object &lt;object&gt;) slot-name</EM></DT>
<DT><A name=index-slot_002dmissing-3></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-missing</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) (object &lt;object&gt;) slot-name value</EM></DT>
<DD>
<P>When an application attempts to reference or set a class or instance slot by name, and the slot name is invalid for the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR>, GOOPS calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-missing</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function.</P>
<P>The default methods all call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>goops-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an appropriate message.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-slot_002dunbound></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-unbound</STRONG></DT>
<DT><A name=index-slot_002dunbound-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-unbound</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object &lt;object&gt;)</EM></DT>
<DT><A name=index-slot_002dunbound-2></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-unbound</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) slot-name</EM></DT>
<DT><A name=index-slot_002dunbound-3></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>slot-unbound</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) (object &lt;object&gt;) slot-name</EM></DT>
<DD>
<P>When an application attempts to reference a class or instance slot, and the slot&#8217;s value is unbound, GOOPS calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-unbound</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function.</P>
<P>The default methods all call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>goops-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an appropriate message.</P></DD></DL>