<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.6 Methods and Generic Functions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A GOOPS method is like a Scheme procedure except that it is specialized for a particular set of argument classes, and will only be used when the actual arguments in a call match the classes in the method definition.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (+ (x &lt;string&gt;) (y &lt;string&gt;))
  (string-append x y))

(+ "abc" "de") &#8658; "abcde"
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A method is not formally associated with any single class (as it is in many other object oriented languages), because a method can be specialized for a combination of several classes. If you&#8217;ve studied object orientation in non-Lispy languages, you may remember discussions such as whether a method to stretch a graphical image around a surface should be a method of the image class, with a surface as a parameter, or a method of the surface class, with an image as a parameter. In GOOPS you&#8217;d just write</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (stretch (im &lt;image&gt;) (sf &lt;surface&gt;))
  ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">and the question of which class the method is more associated with does not need answering.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There can simultaneously be several methods with the same name but different sets of specializing argument classes; for example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (+ (x &lt;string&gt;) (y &lt;string)) ...)
(define-method (+ (x &lt;matrix&gt;) (y &lt;matrix&gt;)) ...)
(define-method (+ (f &lt;fish&gt;) (b &lt;bicycle&gt;)) ...)
(define-method (+ (a &lt;foo&gt;) (b &lt;bar&gt;) (c &lt;baz&gt;)) ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A generic function is a container for the set of such methods that a program intends to use.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you look at a program&#8217;s source code, and see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(+ x y)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>somewhere in it, conceptually what is happening is that the program at that point calls a generic function (in this case, the generic function bound to the identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>). When that happens, Guile works out which of the generic function&#8217;s methods is the most appropriate for the arguments that the function is being called with; then it evaluates the method&#8217;s code with the arguments as formal parameters. This happens every time that a generic function call is evaluated &#8212; it isn&#8217;t assumed that a given source code call will end up invoking the same method every time.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Defining an identifier as a generic function is done with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. Definition of a new method is done with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>automatically does a<CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the identifier concerned is not already a generic function, so often an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is not needed.<A name=index-define_002dgeneric></A><A name=index-define_002dmethod></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dgeneric-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-generic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DD>
<P>Create a generic function with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and bind it to the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was previously bound to a Scheme procedure (or procedure-with-setter), the old procedure (and setter) is incorporated into the new generic function as its default procedure (and setter). Any other previous value, including an existing generic function, is discarded and replaced by a new, empty generic function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dmethod-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(generic parameter &#8230;) body &#8230;</EM></DT>
<DD>
<P>Define a method for the generic function or accessor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>generic</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with parameters<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR>s and body<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<P><VAR>generic</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a generic function. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>generic</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variable which is not yet bound to a generic function object, the expansion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will include a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE>. If<VAR>generic</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(setter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>generic-with-setter</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>generic-with-setter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variable which is not yet bound to a generic-with-setter object, the expansion will include a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-accessor</CODE>.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either a symbol or a two-element list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>)</CODE>. The symbols refer to variables in the body forms that will be bound to the parameters supplied by the caller when calling this method. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>es, if present, specify the possible combinations of parameters to which this method can be applied.</P>
<P><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; are the bodies of the method definition.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions look a little like Scheme procedure definitions of the form</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (name formals &#8230;) . body)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The important difference is that each formal parameter, apart from the possible &#8220;rest&#8221; argument, can be qualified by a class name:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>formal</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>becomes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>formal</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>)</CODE>. The meaning of this qualification is that the method being defined will only be applicable in a particular generic function invocation if the corresponding argument is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>class</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or one of its subclasses). If more than one of the formal parameters is qualified in this way, then the method will only be applicable if each of the corresponding arguments is an instance of its respective qualifying class.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that unqualified formal parameters act as though they are qualified by the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;top&gt;</CODE>, which GOOPS uses to mean the superclass of all valid Scheme types, including both primitive types and GOOPS classes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, if a generic function method is defined with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR>s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(s1 &lt;square&gt;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(n &lt;number&gt;)</CODE>, that method is only applicable to invocations of its generic function that have two parameters where the first parameter is an instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;square&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class and the second parameter is a number.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Accessors">Accessors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Extending-Primitives">Extending Primitives</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Merging-Generics">Merging Generics</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Next_002dmethod">Next-method</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-and-Method-Examples">Generic Function and Method Examples</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Invocation-Errors">Handling Invocation Errors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Extending-Primitives" rel=next>Extending Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.1 Accessors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An accessor is a generic function that can also be used with the generalized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures-with-Setters">Procedures with Setters</A>). Guile will handle a call like</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set! (<CODE>accessor</CODE> <CODE>args</CODE>&#8230;) <CODE>value</CODE>)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">by calling the most specialized method of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that matches the classes of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>args</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to bind an identifier to an accessor.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002daccessor></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DD>
<P>Create an accessor with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and bind it to the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was previously bound to a Scheme procedure (or procedure-with-setter), the old procedure (and setter) is incorporated into the new accessor as its default procedure (and setter). Any other previous value, including an existing generic function or accessor, is discarded and replaced by a new, empty accessor.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Extending-Primitives></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Merging-Generics" rel=next>Merging Generics</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Accessors" rel=prev>Accessors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Extending-Primitives-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.2 Extending Primitives</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many of Guile&#8217;s primitive procedures can be extended by giving them a generic function definition that operates in conjunction with their normal C-coded implementation. When a primitive is extended in this way, it behaves like a generic function with the C-coded implementation as its default method.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This extension happens automatically if a method is defined (by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call) for a variable whose current value is a primitive. But it can also be forced by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enable-primitive-generic!</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enable_002dprimitive_002dgeneric_0021></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enable-primitive-generic!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>primitive</EM></DT>
<DD>
<P>Force the creation of a generic function definition for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>primitive</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once the generic function definition for a primitive has been created, it can be retrieved using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-generic-generic</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dgeneric_002dgeneric></A>primitive procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-generic-generic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>primitive</EM></DT>
<DD>
<P>Return the generic function definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>primitive</VAR>.</P>
<P><CODE>primitive-generic-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>raises an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>primitive</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a primitive with generic capability.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Merging-Generics></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Next_002dmethod" rel=next>Next-method</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Extending-Primitives" rel=prev>Extending Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Merging-Generics-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.3 Merging Generics</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GOOPS generic functions and accessors often have short, generic names. For example, if a vector package provides an accessor for the X coordinate of a vector, that accessor may just be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>. It doesn&#8217;t need to be called, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector:x</CODE>, because GOOPS will work out, when it sees code like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(x<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</CODE>, that the vector-specific method of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be called if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">That raises the question, though, of what happens when different packages define a generic function with the same name. Suppose we work with a graphical package which needs to use two independent vector packages for 2D and 3D vectors respectively. If both packages export<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, what does the code using those packages end up with?</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Guile-Modules">duplicate binding handlers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>explains how this is resolved for conflicting bindings in general. For generics, there is a special duplicates handler,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>merge-generics</CODE>, which tells the module system to merge generic functions with the same name. Here is an example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-module (math 2D-vectors)
  #:use-module (oop goops)
  #:export (x y ...))
		  
(define-module (math 3D-vectors)
  #:use-module (oop goops)
  #:export (x y z ...))

(define-module (my-module)
  #:use-module (oop goops)
  #:use-module (math 2D-vectors)
  #:use-module (math 3D-vectors)
  #:duplicates (merge-generics))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(my-module)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will now incorporate all of the methods of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from both imported modules.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To be precise, there will now be three distinct generic functions named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math 2D-vectors)</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math 3D-vectors)</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(my-module)</CODE>; and these functions share their methods in an interesting and dynamic way.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To explain, let&#8217;s call the imported generic functions (in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math 2D-vectors)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math 3D-vectors)</CODE>) the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ancestors</EM>, and the merged generic function (in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(my-module)</CODE>), the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>descendant</EM>. The general rule is that for any generic function G, the applicable methods are selected from the union of the methods of G&#8217;s descendant functions, the methods of G itself and the methods of G&#8217;s ancestor functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus ancestor functions effectively share methods with their descendants, and vice versa. In the example above,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(math 2D-vectors)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will share the methods of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(my-module)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and vice versa.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT30" name=DOCF30><SUP>30</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Sharing is dynamic, so adding another new method to a descendant implies adding it to that descendant&#8217;s ancestors too.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Next_002dmethod></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-and-Method-Examples" rel=next>Generic Function and Method Examples</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Merging-Generics" rel=prev>Merging Generics</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Next_002dmethod-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.4 Next-method</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you call a generic function, with a particular set of arguments, GOOPS builds a list of all the methods that are applicable to those arguments and orders them by how closely the method definitions match the actual argument types. It then calls the method at the top of this list. If the selected method&#8217;s code wants to call on to the next method in this list, it can do so by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>next-method</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (Test (a &lt;integer&gt;)) (cons 'integer (next-method)))
(define-method (Test (a &lt;number&gt;))  (cons 'number  (next-method)))
(define-method (Test a)             (list 'top))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With these definitions,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(Test 1)   &#8658; (integer number top)
(Test 1.0) &#8658; (number top)
(Test #t)  &#8658; (top)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>next-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always called as just<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE>. The arguments for the next method call are always implicit, and always the same as for the original method call.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want to call on to a method with the same name but with a different set of arguments (as you might with overloaded methods in C++, for example), you do not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>next-method</CODE>, but instead simply write the new call as usual:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (Test (a &lt;number&gt;) min max)
  (if (and (&gt;= a min) (&lt;= a max))
      (display "Number is in range\n"))
  (Test a))

(Test 2 1 10)
-|
Number is in range
&#8658;
(integer number top)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(You should be careful in this case that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Test</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls do not lead to an infinite recursion, but this consideration is just the same as in Scheme code in general.)</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-and-Method-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Invocation-Errors" rel=next>Handling Invocation Errors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Next_002dmethod" rel=prev>Next-method</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-and-Method-Examples-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.5 Generic Function and Method Examples</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Consider the following definitions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-generic G)
(define-method (G (a &lt;integer&gt;) b) 'integer)
(define-method (G (a &lt;real&gt;) b) 'real)
(define-method (G a b) 'top)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call defines<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>G</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a generic function. The three next lines define methods for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>G</VAR>. Each method uses a sequence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>parameter specializers</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that specify when the given method is applicable. A specializer permits to indicate the class a parameter must belong to (directly or indirectly) to be applicable. If no specializer is given, the system defaults it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;top&gt;</CODE>. Thus, the first method definition is equivalent to</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-parameter-specializers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (G (a &lt;integer&gt;) (b &lt;top&gt;)) 'integer)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now, let&#8217;s look at some possible calls to the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>G</VAR>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(G 2 3)    &#8658; integer
(G 2 #t)   &#8658; integer
(G 1.2 'a) &#8658; real
(G #t #f)  &#8658; top
(G 1 2 3)  &#8658; error (since no method exists for 3 parameters)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The methods above use only one specializer per parameter list. But in general, any or all of a method&#8217;s parameters may be specialized. Suppose we define now:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (G (a &lt;integer&gt;) (b &lt;number&gt;))  'integer-number)
(define-method (G (a &lt;integer&gt;) (b &lt;real&gt;))    'integer-real)
(define-method (G (a &lt;integer&gt;) (b &lt;integer&gt;)) 'integer-integer)
(define-method (G a (b &lt;number&gt;))              'top-number)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With these definitions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(G 1 2)   &#8658; integer-integer
(G 1 1.0) &#8658; integer-real
(G 1 #t)  &#8658; integer
(G 'a 1)  &#8658; top-number
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a further example we shall continue to define operations on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-complex&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class. Suppose that we want to use it to implement complex numbers completely. For instance a definition for the addition of two complex numbers could be</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (new-+ (a &lt;my-complex&gt;) (b &lt;my-complex&gt;))
  (make-rectangular (+ (real-part a) (real-part b))
                    (+ (imag-part a) (imag-part b))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To be sure that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used in the method<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the standard addition we can do:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-generic new-+)

(let ((+ +))
  (define-method (new-+ (a &lt;my-complex&gt;) (b &lt;my-complex&gt;))
    (make-rectangular (+ (real-part a) (real-part b))
                      (+ (imag-part a) (imag-part b)))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ensures here that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be defined in the global environment. Once this is done, we can add methods to the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which make a closure on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol. A complete writing of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new-+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#fig_003anewplus">Figure 8.1</A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=float><A name=fig_003anewplus></A>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-generic new-+)

(let ((+ +))

  (define-method (new-+ (a &lt;real&gt;) (b &lt;real&gt;)) (+ a b))

  (define-method (new-+ (a &lt;real&gt;) (b &lt;my-complex&gt;)) 
    (make-rectangular (+ a (real-part b)) (imag-part b)))

  (define-method (new-+ (a &lt;my-complex&gt;) (b &lt;real&gt;))
    (make-rectangular (+ (real-part a) b) (imag-part a)))

  (define-method (new-+ (a &lt;my-complex&gt;) (b &lt;my-complex&gt;))
    (make-rectangular (+ (real-part a) (real-part b))
                      (+ (imag-part a) (imag-part b))))

  (define-method (new-+ (a &lt;number&gt;))  a)
  
  (define-method (new-+) 0)

  (define-method (new-+ . args)
    (new-+ (car args) 
      (apply new-+ (cdr args)))))

(set! + new-+)
</PRE></DIV>
<DIV class=float-caption>
<P><STRONG>Figure 8.1:<SPAN class=Apple-converted-space>&nbsp;</SPAN></STRONG>Extending<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to handle complex numbers</P></DIV></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We take advantage here of the fact that generic function are not obliged to have a fixed number of parameters. The four first methods implement dyadic addition. The fifth method says that the addition of a single element is this element itself. The sixth method says that using the addition with no parameter always return 0 (as is also true for the primitive<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>). The last method takes an arbitrary number of parameters<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT31" name=DOCF31><SUP>31</SUP></A>. This method acts as a kind of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reduce</CODE>: it calls the dyadic addition on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>car</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the list and on the result of applying it on its rest. To finish, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>permits to redefine the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol to our extended addition.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To conclude our implementation (integration?) of complex numbers, we could redefine standard Scheme predicates in the following manner:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-method (complex? c &lt;my-complex&gt;) #t)
(define-method (complex? c)           #f)

(define-method (number? n &lt;number&gt;) #t)
(define-method (number? n)          #f)
&#8230;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Standard primitives in which complex numbers are involved could also be redefined in the same manner.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Handling-Invocation-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-and-Method-Examples" rel=prev>Generic Function and Method Examples</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions" rel=up>Methods and Generic Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Handling-Invocation-Errors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.6.6 Handling Invocation Errors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a generic function is invoked with a combination of parameters for which there is no applicable method, GOOPS raises an error.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-no_002dmethod></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-method</STRONG></DT>
<DT><A name=index-no_002dmethod-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(gf &lt;generic&gt;) args</EM></DT>
<DD>
<P>When an application invokes a generic function, and no methods at all have been defined for that generic function, GOOPS calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function. The default method calls<CODE>goops-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an appropriate message.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-no_002dapplicable_002dmethod></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-applicable-method</STRONG></DT>
<DT><A name=index-no_002dapplicable_002dmethod-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-applicable-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(gf &lt;generic&gt;) args</EM></DT>
<DD>
<P>When an application applies a generic function to a set of arguments, and no methods have been defined for those argument types, GOOPS calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-applicable-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function. The default method calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>goops-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an appropriate message.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-no_002dnext_002dmethod></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-next-method</STRONG></DT>
<DT><A name=index-no_002dnext_002dmethod-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-next-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(gf &lt;generic&gt;) args</EM></DT>
<DD>
<P>When a generic function method calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to invoke the next less specialized method for that generic function, and no less specialized methods have been defined for the current generic function arguments, GOOPS calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-next-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function. The default method calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>goops-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an appropriate message.</P></DD></DL>