<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.11 The Metaobject Protocol</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At this point, we&#8217;ve said about as much as can be said about GOOPS without having to confront the idea of the metaobject protocol. There are a couple more topics that could be discussed in isolation first &#8212; class redefinition, and changing the class of existing instances &#8212; but in practice developers using them will be advanced enough to want to understand the metaobject protocol too, and will probably be using the protocol to customize exactly what happens during these events.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So let&#8217;s plunge in. GOOPS is based on a &#8220;metaobject protocol&#8221; (aka &#8220;MOP&#8221;) derived from the ones used in CLOS (the Common Lisp Object System), tiny-clos (a small Scheme implementation of a subset of CLOS functionality) and STKlos.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The MOP underlies many possible GOOPS customizations &#8212; such as defining an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method to customize the initialization of instances of an application-defined class &#8212; and an understanding of the MOP makes it much easier to explain such customizations in a precise way. And at a deeper level, understanding the MOP is a key part of understanding GOOPS, and of taking full advantage of GOOPS&#8217; power, by customizing the behaviour of GOOPS itself.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Metaobjects-and-the-Metaobject-Protocol">Metaobjects and the Metaobject Protocol</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Metaclasses">Metaclasses</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#MOP-Specification">MOP Specification</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Instance-Creation-Protocol">Instance Creation Protocol</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol">Class Definition Protocol</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Definition">Customizing Class Definition</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition">Method Definition</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition-Internals">Method Definition Internals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Internals">Generic Function Internals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Invocation">Generic Function Invocation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Metaobjects-and-the-Metaobject-Protocol></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Metaclasses" rel=next>Metaclasses</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Metaobjects-and-the-Metaobject-Protocol-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.1 Metaobjects and the Metaobject Protocol</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The building blocks of GOOPS are classes, slot definitions, instances, generic functions and methods. A class is a grouping of inheritance relations and slot definitions. An instance is an object with slots that are allocated following the rules implied by its class&#8217;s superclasses and slot definitions. A generic function is a collection of methods and rules for determining which of those methods to apply when the generic function is invoked. A method is a procedure and a set of specializers that specify the type of arguments to which the procedure is applicable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Of these entities, GOOPS represents classes, generic functions and methods as &#8220;metaobjects&#8221;. In other words, the values in a GOOPS program that describe classes, generic functions and methods, are themselves instances (or &#8220;objects&#8221;) of special GOOPS classes that encapsulate the behaviour, respectively, of classes, generic functions, and methods.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(The other two entities are slot definitions and instances. Slot definitions are not strictly instances, but every slot definition is associated with a GOOPS class that specifies the behaviour of the slot as regards accessibility and protection from garbage collection. Instances are of course objects in the usual sense, and there is no benefit from thinking of them as metaobjects.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The &#8220;metaobject protocol&#8221; (or &#8220;MOP&#8221;) is the specification of the generic functions which determine the behaviour of these metaobjects and the circumstances in which these generic functions are invoked.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a concrete example of what this means, consider how GOOPS calculates the set of slots for a class that is being defined using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE>. The desired set of slots is the union of the new class&#8217;s direct slots and the slots of all its superclasses. But<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself does not perform this calculation. Instead, there is a method of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function that is specialized for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, and it is this method that performs the slot calculation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a generic function which GOOPS calls whenever a new instance is created, immediately after allocating memory for a new instance, in order to initialize the new instance&#8217;s slots. The sequence of steps is as follows.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to make a new instance of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, passing as initialization arguments the superclasses, slot definitions and class options that were specified in the<CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</LI>
<LI><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocates memory for the new instance, and invokes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function to initialize the new instance&#8217;s slots.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function applies the method that is specialized for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, and this method performs the slot calculation.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In other words, rather than being hardcoded in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE>, the default behaviour of class definition is encapsulated by generic function methods that are specialized for the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is possible to create a new class that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, which is called a &#8220;metaclass&#8221;, and to write a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for instances of the new metaclass. Then, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class option whose value is the new metaclass, the class that is defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form will be an instance of the new metaclass rather than of the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, and will be defined in accordance with the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. Thus the default slot calculation, as well as any other aspect of the new class&#8217;s relationship with its superclasses, can be modified or overridden.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In a similar way, the behaviour of generic functions can be modified or overridden by creating a new class that inherits from the standard generic function class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE>, writing appropriate methods that are specialized to the new class, and creating new generic functions that are instances of the new class.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The same is true for method metaobjects. And the same basic mechanism allows the application class author to write an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized to their application class, to initialize instances of that class.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Such is the power of the MOP. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is just one of a large number of generic functions that can be customized to modify the behaviour of application objects and classes and of GOOPS itself. Each following section covers a particular area of GOOPS functionality, and describes the generic functions that are relevant for customization of that area.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Metaclasses></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#MOP-Specification" rel=next>MOP Specification</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Metaobjects-and-the-Metaobject-Protocol" rel=prev>Metaobjects and the Metaobject Protocol</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Metaclasses-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.2 Metaclasses</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>metaclass</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the class of an object which represents a GOOPS class. Put more succinctly, a metaclass is a class&#8217;s class.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most GOOPS classes have the metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and, by default, any new class that is created using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But what does this really mean? To find out, let&#8217;s look in more detail at what happens when a new class is created using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-class &lt;my-class&gt; (&lt;object&gt;) . slots)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile expands this to something like:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define &lt;my-class&gt; (class (&lt;object&gt;) . slots))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">which in turn expands to:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define &lt;my-class&gt;
  (make &lt;class&gt; #:dsupers (list &lt;object&gt;) #:slots slots))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As this expansion makes clear, the resulting value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with slot values specifying the superclasses and slot definitions for the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE>. (<CODE>#:dsupers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are initialization keywords for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dsupers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dslots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slots of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now suppose that you want to define a new class with a metaclass other than the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>. This is done by writing:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-class &lt;my-class2&gt; (&lt;object&gt;)
   slot &#8230;
   #:metaclass &lt;my-metaclass&gt;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">and Guile expands<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>this</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to something like:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define &lt;my-class2&gt;
  (make &lt;my-metaclass&gt; #:dsupers (list &lt;object&gt;) #:slots slots))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this case, the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of the more specialized class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE>. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself must previously have been defined as a subclass of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>. For a full discussion of when and how it is useful to define new metaclasses, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#MOP-Specification">MOP Specification</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now let&#8217;s make an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define my-object (make &lt;my-class2&gt; ...))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of the following statements are correct expressions of the relationships between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-object</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>my-object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE>.</LI>
<LI><CODE>&lt;my-class2&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE>.</LI>
<LI><CODE>&lt;my-metaclass&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</LI>
<LI>The class of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE>.</LI>
<LI>The class of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class2&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE>.</LI>
<LI>The class of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-metaclass&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=MOP-Specification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Instance-Creation-Protocol" rel=next>Instance Creation Protocol</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Metaclasses" rel=prev>Metaclasses</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=MOP-Specification-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.3 MOP Specification</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The aim of the MOP specification in this chapter is to specify all the customizable generic function invocations that can be made by the standard GOOPS syntax, procedures and methods, and to explain the protocol for customizing such invocations.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A generic function invocation is customizable if the types of the arguments to which it is applied are not completely determined by the lexical context in which the invocation appears. For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(initialize<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invocation in the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method is customizable, because the type of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>instance</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is determined by the class that was passed to<CODE>make-instance</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(Whereas &#8212; to give a counter-example &#8212; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(make &lt;generic&gt; #:name ',name)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invocation in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not customizable, because all of its arguments have lexically determined types.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When using this rule to decide whether a given generic function invocation is customizable, we ignore arguments that are expected to be handled in method definitions as a single &#8220;rest&#8221; list argument.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For each customizable generic function invocation, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>invocation protocol</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is explained by specifying</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>what, conceptually, the applied method is intended to do</LI>
<LI>what assumptions, if any, the caller makes about the applied method&#8217;s side effects</LI>
<LI>what the caller expects to get as the applied method&#8217;s return value.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instance-Creation-Protocol></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol" rel=next>Class Definition Protocol</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#MOP-Specification" rel=prev>MOP Specification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Instance-Creation-Protocol-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.4 Instance Creation Protocol</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make &lt;class&gt; .<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(method)</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>allocate-instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P>The applied<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allocate-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method should allocate storage for a new instance of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the uninitialized instance.</P></LI>
<LI><CODE>initialize<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the uninitialized instance returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allocate-instance</CODE>. The applied method should initialize the new instance in whatever sense is appropriate for its class. The method&#8217;s return value is ignored.</P></LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself is a generic function. Hence the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invocation itself can be customized in the case where the new instance&#8217;s metaclass is more specialized than the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, by defining a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized to that metaclass.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Normally, however, the method for classes with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be applied. This method calls two generic functions:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>(allocate-instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR>)</LI>
<LI>(initialize<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR>)</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>allocate-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allocates storage for and returns the new instance, uninitialized. You might customize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allocate-instance</CODE>, for example, if you wanted to provide a GOOPS wrapper around some other object programming system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To do this, you would create a specialized metaclass, which would act as the metaclass for all classes and instances from the other system. Then define an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allocate-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, specialized to that metaclass, which calls a Guile primitive C function (or FFI code), which in turn allocates the new instance using the interface of the other object system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this case, for a complete system, you would also need to customize a number of other generic functions like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE>, so that GOOPS knows how to make classes from the other system, access instance slots, and so on.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>initializes the instance that is returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>allocate-instance</CODE>. The standard GOOPS methods perform initializations appropriate to the instance class.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>At the least specialized level, the method for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;object&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>performs internal GOOPS instance initialization, and initializes the instance&#8217;s slots according to the slot definitions and any slot initialization keywords that appear in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR>.</LI>
<LI>The method for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE>, then performs the class initializations described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol">Class Definition Protocol</A>.</LI>
<LI>and so on for generic functions, methods, operator classes &#8230;</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similarly, you can customize the initialization of instances of any application-defined class by defining an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method specialized to that class.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Imagine a class whose instances&#8217; slots need to be initialized at instance creation time by querying a database. Although it might be possible to achieve this a combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-thunk</CODE>keywords and closures in the slot definitions, it may be neater to write an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method for the class that queries the database once and initializes all the dependent slot values according to the results.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Class-Definition-Protocol></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Definition" rel=next>Customizing Class Definition</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Instance-Creation-Protocol" rel=prev>Instance Creation Protocol</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Class-Definition-Protocol-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.5 Class Definition Protocol</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a summary diagram of the syntax, procedures and generic functions that may be involved in class definition.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(syntax)</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(syntax)
<UL>
<LI><CODE>make-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(procedure)
<UL>
<LI><CODE>ensure-metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(procedure)</LI>
<LI><CODE>make<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>metaclass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>allocate-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>compute-std-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(procedure)</LI></UL></LI>
<LI><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>compute-getter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>compute-setter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI></UL></LI></UL></LI></UL></LI></UL></LI>
<LI><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>remove-class-accessors</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>update-direct-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>update-direct-subclass!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI></UL></LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Wherever a step above is marked as &#8220;generic&#8221;, it can be customized, and the detail shown below it is only &#8220;correct&#8221; insofar as it describes what the default method of that generic function does. For example, if you write an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, for some metaclass, that does not call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>next-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and does not call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not be called when a class is defined with that metaclass.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(define-class ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition">Class Definition</A>) expands to an expression which</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>checks that it is being evaluated only at top level</LI>
<LI>defines any accessors that are implied by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-definition</VAR>s</LI>
<LI>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create the new class</LI>
<LI>checks for a previous class definition for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and, if found, handles the redefinition by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Redefining-a-Class">Redefining a Class</A>).</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name (super &#8230;) slot-definition &#8230; class-option &#8230;</EM></DT>
<DD>
<P>Return a newly created class that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>super</VAR>s, with direct slots defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-definition</VAR>s and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR>s. For the format of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-definition</VAR>s and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR>s, see<A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition">define-class</A>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expands to an expression which</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>processes the class and slot definition options to check that they are well-formed, to convert the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, to supply a default environment parameter (the current top-level environment) and to evaluate all the bits that need to be evaluated</LI>
<LI>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create the class with the processed and evaluated parameters.</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dclass></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-class</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>supers slots class-option &#8230;</EM></DT>
<DD>
<P>Return a newly created class that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR>, with direct slots defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slots</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR>s. For the format of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slots</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR>s, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition">define-class</A>, except note that for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-class</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slots</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a separate list of slot definitions.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make-class</CODE></P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>adds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;object&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty or if none of the classes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;object&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in their class precedence list</LI>
<LI>defaults the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:environment</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, if they are not specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR>, to the current top-level environment, the unbound value, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ensure-metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR>)</CODE>respectively</LI>
<LI>checks for duplicate classes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and duplicate slot names in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slots</VAR>, and signals an error if there are any duplicates</LI>
<LI>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE>, passing the metaclass as the first parameter and all other parameters as option keywords with values.</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ensure_002dmetaclass></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ensure-metaclass</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>supers env</EM></DT>
<DD>
<P>Return a metaclass suitable for a class that inherits from the list of classes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR>. The returned metaclass is the union by inheritance of the metaclasses of the classes in<VAR>supers</VAR>.</P>
<P>In the simplest case, where all the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are straightforward classes with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, the returned metaclass is just<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<P>For a more complex example, suppose that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contained one class with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;operator-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and one with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;foreign-object-class&gt;</CODE>. Then the returned metaclass would be a class that inherits from both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;operator-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;foreign-object-class&gt;</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the default GOOPS metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<P>GOOPS keeps a list of the metaclasses created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-metaclass</CODE>, so that each required type of metaclass only has to be created once.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>env</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make-3></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>metaclass initarg &#8230;</EM></DT>
<DD>
<P><VAR>metaclass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the metaclass of the class being defined, either taken from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class option or computed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-metaclass</CODE>. The applied method must create and return the fully initialized class metaobject for the new class definition.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(make<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>metaclass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initarg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invocation is a particular case of the instance creation protocol covered in the previous section. It will create an class metaobject with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>metaclass</VAR>. By default, this metaobject will be initialized by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method for classes (signature<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(initialize &lt;class&gt; initargs)</CODE>) calls the following generic functions.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>compute-cpl<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P>The applied method should compute and return the class precedence list for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a list of class metaobjects. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called, the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>metaobject slots have all been initialized:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-supers</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-slots</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-subclasses</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(empty),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>direct-methods</CODE>. The value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></LI>
<LI><CODE>compute-slots<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P>The applied method should compute and return the slots (union of direct and inherited) for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a list of slot definitions. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called, all the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>metaobject slots mentioned for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have been initialized, plus the following:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>redefined</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>#f</CODE>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>environment</CODE>. The value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot.</P></LI>
<LI><CODE>compute-get-n-set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-def</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each slot computed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE>. The applied method should compute and return a pair of closures that, respectively, get and set the value of the specified slot. The get closure should have arity 1 and expect a single argument that is the instance whose slot value is to be retrieved. The set closure should have arity 2 and expect two arguments, where the first argument is the instance whose slot value is to be set and the second argument is the new value for that slot. The closures should be returned in a two element list:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>get</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>set</VAR>)</CODE>.</P>
<P>The closures returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are stored as part of the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>metaobject&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getters-n-setters</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot. Specifically, the value of this slot is a list with the same number of elements as there are slots in the class, and each element looks either like</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example><CODE>(<VAR>slot-name-symbol</VAR> <VAR>init-function</VAR> . <VAR>index</VAR>)</CODE>
</PRE></DIV>
<P>or like</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example><CODE>(<VAR>slot-name-symbol</VAR> <VAR>init-function</VAR> <VAR>get</VAR> <VAR>set</VAR>)</CODE>
</PRE></DIV>
<P>Where the get and set closures are replaced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>, the slot is an instance slot and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the slot&#8217;s index in the underlying structure: GOOPS knows how to get and set the value of such slots and so does not need specially constructed get and set closures. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>get</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>set</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the closures returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE>.</P>
<P>The structure of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getters-n-setters</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot value is important when understanding the next customizable generic functions that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls&#8230;</P></LI>
<LI><CODE>compute-getter-method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gns</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-getter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each of the class&#8217;s slots (as determined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE>) that includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gns</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the element of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>metaobject&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getters-n-setters</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot that specifies how the slot in question is referenced and set, as described above under<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE>. The applied method should create and return a method that is specialized for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and uses the get closure to retrieve the slot&#8217;s value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to add the returned method to the generic function named by the slot definition&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P></LI>
<LI><CODE>compute-setter-method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gns</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<P><CODE>compute-setter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked with the same arguments as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-getter-method</CODE>, for each of the class&#8217;s slots that includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot option. The applied method should create and return a method that is specialized for instances of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and uses the set closure to set the slot&#8217;s value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to add the returned method to the generic function named by the slot definition&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P></LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Customizing-Class-Definition></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition" rel=next>Method Definition</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol" rel=prev>Class Definition Protocol</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Customizing-Class-Definition-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.6 Customizing Class Definition</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the metaclass of the new class is something more specialized than the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, then the type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the calls above is more specialized than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, and hence it becomes possible to define generic function methods, specialized for the new class&#8217;s metaclass, that can modify or override the default behaviour of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes the class precedence list (&#8220;CPL&#8221;) for the new class (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Precedence-List">Class Precedence List</A>), and returns it as a list of class objects. The CPL is important because it defines a superclass ordering that is used, when a generic function is invoked upon an instance of the class, to decide which of the available generic function methods is the most specific. Hence<CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>could be customized in order to modify the CPL ordering algorithm for all classes with a special metaclass.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The default CPL algorithm is encapsulated by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-std-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, which is called by the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-compute_002dstd_002dcpl></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>compute-std-cpl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>class</EM></DT>
<DD>
<P>Compute and return the class precedence list for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the algorithm described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Precedence-List">Class Precedence List</A>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes and returns a list of all slot definitions for the new class. By default, this list includes the direct slot definitions from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, plus the slot definitions that are inherited from the new class&#8217;s superclasses. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method uses the CPL computed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to calculate this union of slot definitions, with the rule that slots inherited from superclasses are shadowed by direct slots with the same name. One possible reason for customizing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-slots</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be to implement an alternative resolution strategy for slot name conflicts.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes the low-level closures that will be used to get and set the value of a particular slot, and returns them in a list with two elements.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The closures returned depend on how storage for that slot is allocated. The standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, specialized for classes of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, handles the standard GOOPS values for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:allocation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot option (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">allocation</A>). By defining a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method for a more specialized metaclass, it is possible to support new types of slot allocation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose you wanted to create a large number of instances of some class with a slot that should be shared between some but not all instances of that class - say every 10 instances should share the same slot storage. The following example shows how to implement and use a new type of slot allocation to do this.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-class &lt;batched-allocation-metaclass&gt; (&lt;class&gt;))

(let ((batch-allocation-count 0)
      (batch-get-n-set #f))
  (define-method (compute-get-n-set
                     (class &lt;batched-allocation-metaclass&gt;) s)
    (case (slot-definition-allocation s)
      ((#:batched)
       ;; If we've already used the same slot storage for 10 instances,
       ;; reset variables.
       (if (= batch-allocation-count 10)
           (begin
             (set! batch-allocation-count 0)
             (set! batch-get-n-set #f)))
       ;; If we don't have a current pair of get and set closures,
       ;; create one.  make-closure-variable returns a pair of closures
       ;; around a single Scheme variable - see goops.scm for details.
       (or batch-get-n-set
           (set! batch-get-n-set (make-closure-variable)))
       ;; Increment the batch allocation count.
       (set! batch-allocation-count (+ batch-allocation-count 1))
       batch-get-n-set)

      ;; Call next-method to handle standard allocation types.
      (else (next-method)))))

(define-class &lt;class-using-batched-slot&gt; ()
  ...
  (c #:allocation #:batched)
  ...
  #:metaclass &lt;batched-allocation-metaclass&gt;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The usage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-getter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-setter-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol">Class Definition Protocol</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>compute-cpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are called by the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method for classes whose metaclass is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>. But<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself can also be modified, by defining an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method specialized to the new class&#8217;s metaclass. Such a method could complete override the standard behaviour, by not calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at all, but more typically it would perform additional class initialization steps before and/or after calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the standard behaviour.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Method-Definition></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition-Internals" rel=next>Method Definition Internals</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Definition" rel=prev>Customizing Class Definition</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Method-Definition-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.7 Method Definition</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(syntax)</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>add-method!<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>invokes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function to handle adding the new method to a variety of possible targets. GOOPS includes methods to handle<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>a generic function (the most common case)</LI>
<LI>a procedure</LI>
<LI>a primitive generic (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Extending-Primitives">Extending Primitives</A>)</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By defining further methods for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-method!</CODE>, you can theoretically handle adding methods to further types of target.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Method-Definition-Internals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Internals" rel=next>Generic Function Internals</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition" rel=prev>Method Definition</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Method-Definition-Internals-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.8 Method Definition Internals</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-method</CODE>:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>checks the form of the first parameter, and applies the following steps to the accessor&#8217;s setter if it has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(setter &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form</LI>
<LI>interpolates a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if a generic function is not already defined with the supplied name</LI>
<LI>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR>s and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>, to make a new method instance</LI>
<LI>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to add this method to the relevant generic function.</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-method></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(parameter &#8230;) body &#8230;</EM></DT>
<DD>
<P>Make a method whose specializers are defined by the classes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR>s and whose procedure definition is constructed from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbols and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters should be as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Methods-and-Generic-Functions">define-method</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>method</CODE>:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>extracts formals and specializing classes from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parameter</VAR>s, defaulting the class for unspecialized parameters to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;top&gt;</CODE></LI>
<LI>creates a closure using the formals and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms</LI>
<LI>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the specializers and closure using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:specializers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:procedure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords.</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dmethod></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>specializers procedure</EM></DT>
<DD>
<P>Make a method using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>specializers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>procedure</VAR>.</P>
<P><VAR>specializers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a list of classes that specifies the parameter combinations to which this method will be applicable.</P>
<P><VAR>procedure</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be the closure that will applied to the generic function parameters when this method is invoked.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a simple wrapper around<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dmethod_0021></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target method</EM></DT>
<DD>
<P>Generic function for adding method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dmethod_0021-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(generic &lt;generic&gt;) (method &lt;method&gt;)</EM></DT>
<DD>
<P>Add method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>generic</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dmethod_0021-2></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc &lt;procedure&gt;) (method &lt;method&gt;)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure with generic capability (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Extending-Primitives">generic-capability?</A>), upgrade it to a primitive generic and add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to its generic function definition.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dmethod_0021-3></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pg &lt;primitive-generic&gt;) (method &lt;method&gt;)</EM></DT>
<DD>
<P>Add method<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>method</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the generic function definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pg</VAR>.</P>
<P>Implementation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(add-method! (primitive-generic-generic pg) method)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dmethod_0021-4></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(whatever &lt;top&gt;) (method &lt;method&gt;)</EM></DT>
<DD>
<P>Raise an error indicating that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>whatever</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a valid generic function.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-Internals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Invocation" rel=next>Generic Function Invocation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Method-Definition-Internals" rel=prev>Method Definition Internals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-Internals-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.9 Generic Function Internals</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to upgrade a pre-existing procedure value, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create a new generic function.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>define-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to upgrade a pre-existing procedure value, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create a new accessor.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ensure_002dgeneric></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ensure-generic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>old-definition [name]</EM></DT>
<DD>
<P>Return a generic function with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, if possible by using or upgrading<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old-definition</VAR>. If unspecified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old-definition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already a generic function, it is returned unchanged.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old-definition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a Scheme procedure or procedure-with-setter,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a new generic function that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old-definition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for its default procedure and setter.</P>
<P>Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a new generic function with no defaults and no methods.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dgeneric></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-generic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name]</EM></DT>
<DD>
<P>Return a new generic function with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(car<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</CODE>. If unspecified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>ensure-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclasses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic-with-setter&gt;</CODE>, depending on the previous value of the variable that it is trying to upgrade.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a simple wrapper for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ensure_002daccessor></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ensure-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc [name]</EM></DT>
<DD>
<P>Return an accessor with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, if possible by using or upgrading<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. If unspecified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already an accessor, it is returned unchanged.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a Scheme procedure, procedure-with-setter or generic function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an accessor that reuses the reusable elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P>
<P>Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a new accessor with no defaults and no methods.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002daccessor></A>procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name]</EM></DT>
<DD>
<P>Return a new accessor with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(car<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>)</CODE>. If unspecified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>ensure-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic-with-setter&gt;</CODE>, as well as calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-generic</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and (tail recursively)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-accessor</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make-accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>twice, first with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create a generic function for the setter, then with metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic-with-setter&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create the accessor, passing the setter generic function as the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-Invocation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Internals" rel=prev>Generic Function Internals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#The-Metaobject-Protocol" rel=up>The Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Generic-Function-Invocation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.11.10 Generic Function Invocation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is a detailed and customizable protocol involved in the process of invoking a generic function &#8212; i.e., in the process of deciding which of the generic function&#8217;s methods are applicable to the current arguments, and which one of those to apply. Here is a summary diagram of the generic functions involved.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>apply-generic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>no-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>compute-applicable-methods</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>sort-applicable-methods</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>method-more-specific?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI></UL></LI>
<LI><CODE>apply-methods</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)
<UL>
<LI><CODE>apply-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI>
<LI><CODE>no-next-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(generic)</LI></UL></LI>
<LI><CODE>no-applicable-method</CODE></LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We do not yet have full documentation for these. Please refer to the code (<SAMP>oop/goops.scm</SAMP>) for details.