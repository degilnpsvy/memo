<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.10 GOOPS Object Miscellany</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here we cover some points about GOOPS objects that aren&#8217;t substantial enough to merit sections on their own.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Object-Equality></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subheading>Object Equality</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When GOOPS is loaded,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>become generic functions, and you can define methods for them, specialized for your own classes, so as to control what the various kinds of equality mean for your classes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, for looking up an entry in an alist, is specified as using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine when the car of an entry in the alist is the same as the key parameter that<CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called with. Hence, if you had defined a new class, and wanted to use instances of that class as the keys in an alist, you could define a method for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, for your class, to control<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE>&#8217;s lookup precisely.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Cloning-Objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subheading>Cloning Objects</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shallow_002dclone></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shallow-clone</STRONG></DT>
<DT><A name=index-shallow_002dclone-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shallow-clone</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(self &lt;object&gt;)</EM></DT>
<DD>
<P>Return a &#8220;shallow&#8221; clone of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>self</VAR>. The default method makes a shallow clone by allocating a new instance and copying slot values from self to the new instance. Each slot value is copied either as an immediate value or by reference.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-deep_002dclone></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>deep-clone</STRONG></DT>
<DT><A name=index-deep_002dclone-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>deep-clone</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(self &lt;object&gt;)</EM></DT>
<DD>
<P>Return a &#8220;deep&#8221; clone of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>self</VAR>. The default method makes a deep clone by allocating a new instance and copying or cloning slot values from self to the new instance. If a slot value is an instance (satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>instance?</CODE>), it is cloned by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deep-clone</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on that value. Other slot values are copied either as immediate values or by reference.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Write-and-Display></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subheading>Write and Display</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write-3></A>primitive generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object port</EM></DT>
<DT><A name=index-display-3></A>primitive generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>display</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object port</EM></DT>
<DD>
<P>When GOOPS is loaded,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>become generic functions with special methods for printing</P>
<UL>
<LI>objects - instances of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;object&gt;</CODE></LI>
<LI>foreign objects - instances of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;foreign-object&gt;</CODE></LI>
<LI>classes - instances of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE></LI>
<LI>generic functions - instances of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;generic&gt;</CODE></LI>
<LI>methods - instances of the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;method&gt;</CODE>.</LI></UL>
<P><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>print non-GOOPS values in the same way as the Guile primitive<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the cases mentioned, you can of course define<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods for your own classes, to customize how instances of those classes are printed.