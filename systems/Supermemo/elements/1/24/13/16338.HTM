<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.12 Redefining a Class</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose that a class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition">define-class</A>), with slots that have accessor functions, and that an application has created several instances of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Instance-Creation">make</A>). What then happens if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is redefined by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>again?</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Default-Class-Redefinition-Behaviour">Default Class Redefinition Behaviour</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Redefinition">Customizing Class Redefinition</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Default-Class-Redefinition-Behaviour></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Redefinition" rel=next>Customizing Class Redefinition</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Redefining-a-Class" rel=up>Redefining a Class</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Default-Class-Redefinition-Behaviour-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.12.1 Default Class Redefinition Behaviour</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GOOPS&#8217; default answer to this question is as follows.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>All existing direct instances of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are converted to be instances of the new class. This is achieved by preserving the values of slots that exist in both the old and new definitions, and initializing the values of new slots in the usual way (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Instance-Creation">make</A>).</LI>
<LI>All existing subclasses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are redefined, as though the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions that defined them were re-evaluated following the redefinition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE>, and the class redefinition process described here is applied recursively to the redefined subclasses.</LI>
<LI>Once all of its instances and subclasses have been updated, the class metaobject previously bound to the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is no longer needed and so can be allowed to be garbage collected.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To keep things tidy, GOOPS also needs to do a little housekeeping on methods that are associated with the redefined class.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Slot accessor methods for slots in the old definition should be removed from their generic functions. They will be replaced by accessor methods for the slots of the new class definition.</LI>
<LI>Any generic function method that uses the old<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>metaobject as one of its formal parameter specializers must be updated to refer to the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-class&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>metaobject. (Whenever a new generic function method is defined,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>adds the method to a list stored in the class metaobject for each class used as a formal parameter specializer, so it is easy to identify all the methods that must be updated when a class is redefined.)</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If this class redefinition strategy strikes you as rather counter-intuitive, bear in mind that it is derived from similar behaviour in other object systems such as CLOS, and that experience in those systems has shown it to be very useful in practice.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also bear in mind that, like most of GOOPS&#8217; default behaviour, it can be customized&#8230;</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Customizing-Class-Redefinition></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Default-Class-Redefinition-Behaviour" rel=prev>Default Class Redefinition Behaviour</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Redefining-a-Class" rel=up>Redefining a Class</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Customizing-Class-Redefinition-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.12.2 Customizing Class Redefinition</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>notices that a class is being redefined, it constructs the new class metaobject as usual, then invokes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function with the old and new classes as arguments. Therefore, if the old or new classes have metaclasses other than the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, class redefinition behaviour can be customized by defining a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for the relevant metaclasses.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dredefinition></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-redefinition</STRONG></DT>
<DD>
<P>Handle the class redefinition from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old-class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new-class</VAR>, and return the new class metaobject that should be bound to the variable specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE>&#8217;s first argument.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-class_002dredefinition-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>class-redefinition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(old-class &lt;class&gt;) (new-class &lt;class&gt;)</EM></DT>
<DD>
<P>Implements GOOPS&#8217; default class redefinition behaviour, as described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Default-Class-Redefinition-Behaviour">Default Class Redefinition Behaviour</A>. Returns the metaobject for the new class definition.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method, for classes with the default metaclass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>, calls the following generic functions, which could of course be individually customized.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-remove_002dclass_002daccessors_0021></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remove-class-accessors!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>old</EM></DT>
<DD>
<P>The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remove-class-accessors!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method removes the accessor methods of the old class from all classes which they specialize.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-update_002ddirect_002dmethod_0021></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>update-direct-method!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>method old new</EM></DT>
<DD>
<P>The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>update-direct-method!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method substitutes the new class for the old in all methods specialized to the old class.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-update_002ddirect_002dsubclass_0021></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>update-direct-subclass!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>subclass old new</EM></DT>
<DD>
<P>The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>update-direct-subclass!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method invokes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>recursively to handle the redefinition of subclasses.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An alternative class redefinition strategy could be to leave all existing instances as instances of the old class, but accepting that the old class is now &#8220;nameless&#8221;, since its name has been taken over by the new definition. In this strategy, any existing subclasses could also be left as they are, on the understanding that they inherit from a nameless superclass.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This strategy is easily implemented in GOOPS, by defining a new metaclass, that will be used as the metaclass for all classes to which the strategy should apply, and then defining a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-redefinition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for this metaclass:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-class &lt;can-be-nameless&gt; (&lt;class&gt;))

(define-method (class-redefinition (old &lt;can-be-nameless&gt;)
                                   (new &lt;class&gt;))
  new)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When customization can be as easy as this, aren&#8217;t you glad that GOOPS implements the far more difficult strategy as its default!