<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.4 The (ice-9 getopt-long) Module</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 getopt-long)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module exports two procedures:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE>.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a list of strings &#8212; the command line arguments &#8212; an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option specification</EM>, and some optional keyword parameters. It parses the command line arguments according to the option specification and keyword parameters, and returns a data structure that encapsulates the results of the parsing.</LI>
<LI><CODE>option-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then takes the parsed data structure and a specific option&#8217;s name, and returns information about that option in particular.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To make these procedures available to your Guile script, include the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules (ice-9 getopt-long))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>somewhere near the top, before the first usage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong-Example">getopt-long Example</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A short getopt-long example.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Option-Specification">Option Specification</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to write an option specification.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Format">Command Line Format</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The expected command line format.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong-Reference">getopt-long Reference</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Full documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE>.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#option_002dref-Reference">option-ref Reference</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Full documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE>.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=getopt_002dlong-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Option-Specification" rel=next>Option Specification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong" rel=up>getopt-long</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=A-Short-getopt_002dlong-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.4.1 A Short getopt-long Example</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section illustrates how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used by presenting and dissecting a simple example. The first thing that we need is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option specification</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that tells<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>how to parse the command line. This specification is an association list with the long option name as the key. Here is how such a specification might look:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define option-spec
  '((version (single-char #\v) (value #f))
    (help    (single-char #\h) (value #f))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This alist tells<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that it should accept two long options, called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>version</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>help</EM>, and that these options can also be selected by the single-letter abbreviations<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>v</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>h</EM>, respectively. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(value #f)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses indicate that neither of the options accepts a value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With this specification we can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to parse a given command line:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define options (getopt-long (command-line) option-spec))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">After this call,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains the parsed command line and is ready to be examined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(option-ref options 'help #f)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It expects the parsed command line, a symbol indicating the option to examine, and a default value. The default value is returned if the option was not present in the command line, or if the option was present but without a value; otherwise the value from the command line is returned. Usually<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called once for each possible option that a script supports.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following example shows a main program which puts all this together to parse its command line and figure out what the user wanted.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (main args)
  (let* ((option-spec '((version (single-char #\v) (value #f))
                        (help    (single-char #\h) (value #f))))
         (options (getopt-long args option-spec))
         (help-wanted (option-ref options 'help #f))
         (version-wanted (option-ref options 'version #f)))
    (if (or version-wanted help-wanted)
        (begin
          (if version-wanted
              (display "getopt-long-example version 0.3\n"))
          (if help-wanted
              (display "\
getopt-long-example [options]
  -v, --version    Display version
  -h, --help       Display this help
")))
        (begin
          (display "Hello, World!") (newline)))))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Option-Specification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Format" rel=next>Command Line Format</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong-Example" rel=prev>getopt-long Example</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong" rel=up>getopt-long</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=How-to-Write-an-Option-Specification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.4.2 How to Write an Option Specification</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An option specification is an association list (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists">Association Lists</A>) with one list element for each supported option. The key of each list element is a symbol that names the option, while the value is a list of option properties:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>OPTION-SPEC ::=  '( (OPT-NAME1 (PROP-NAME PROP-VALUE) &#8230;)
                    (OPT-NAME2 (PROP-NAME PROP-VALUE) &#8230;)
                    (OPT-NAME3 (PROP-NAME PROP-VALUE) &#8230;)
                    &#8230;
                  )
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the long option name for that option. For example, a list element with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>background</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies an option that can be specified on the command line using the long option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--background</CODE>. Further information about the option &#8212; whether it takes a value, whether it is required to be present in the command line, and so on &#8212; is specified by the option properties.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the example of the preceding section, we already saw that a long option name can have a equivalent<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>short option</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>character. The equivalent short option character can be set for an option by specifying a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>single-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property in that option&#8217;s property list. For example, a list element like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'(output (single-char #\o) &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies an option with long name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can also be specified by the equivalent short name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-o</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property specifies whether an option requires or accepts a value. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, the option requires a value:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will signal an error if the option name is present without a corresponding value. If set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the option does not take a value; in this case, a non-option word that follows the option name in the command line will be treated as a non-option argument. If set to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>optional</CODE>, the option accepts a value but does not require one: a non-option word that follows the option name in the command line will be interpreted as that option&#8217;s value. If the option name for an option with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'(value optional)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immediately followed in the command line by<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>another</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>option name, the value for the first option is implicitly<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>required?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property indicates whether an option is required to be present in the command line. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>required?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will signal an error if the option is not specified.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>predicate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property can be used to constrain the possible values of an option. If used, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>predicate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property should be set to a procedure that takes one argument &#8212; the proposed option value as a string &#8212; and returns either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>according as the proposed value is or is not acceptable. If the predicate procedure returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will signal an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default, options do not have single-character equivalents, are not required, and do not take values. Where the list element for an option includes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>property but no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>predicate</CODE>property, the option values are unconstrained.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Command-Line-Format></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong-Reference" rel=next>getopt-long Reference</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Option-Specification" rel=prev>Option Specification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong" rel=up>getopt-long</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Expected-Command-Line-Format></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.4.3 Expected Command Line Format</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to correctly parse a command line, that command line must conform to a standard set of rules for how command line options are specified. This section explains what those rules are.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>splits a given command line into several pieces. All elements of the argument list are classified to be either options or normal arguments. Options consist of two dashes and an option name (so-called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>options), or of one dash followed by a single letter (<EM>short</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>options).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Options can behave as switches, when they are given without a value, or they can be used to pass a value to the program. The value for an option may be specified using an equals sign, or else is simply the next word in the command line, so the following two invocations are equivalent:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./foo.scm --output=bar.txt
$ ./foo.scm --output bar.txt
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Short options can be used instead of their long equivalents and can be grouped together after a single dash. For example, the following commands are equivalent.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./foo.scm --version --help
$ ./foo.scm -v --help
$ ./foo.scm -vh
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If an option requires a value, it can only be grouped together with other short options if it is the last option in the group; the value is the next argument. So, for example, with the following option specification &#8212;</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>((apples    (single-char #\a))
 (blimps    (single-char #\b) (value #t))
 (catalexis (single-char #\c) (value #t)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">&#8212; the following command lines would all be acceptable:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./foo.scm -a -b bang -c couth
$ ./foo.scm -ab bang -c couth
$ ./foo.scm -ac couth -b bang
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But the next command line is an error, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not the last option in its combination, and because a group of short options cannot include two options that both require values:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./foo.scm -abc couth bang
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If an option&#8217;s value is optional,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>decides whether the option has a value by looking at what follows it in the argument list. If the next element is a string, and it does not appear to be an option itself, then that string is the option&#8217;s value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears in the argument list, argument parsing stops there and subsequent arguments are returned as ordinary arguments, even if they resemble options. So, with the command line</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ ./foo.scm --apples "Granny Smith" -- --blimp Goodyear
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will recognize the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--apples</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option as having the value "Granny Smith", but will not treat<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--blimp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an option. The strings<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--blimp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Goodyear</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be returned as ordinary argument strings.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=getopt_002dlong-Reference></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#option_002dref-Reference" rel=next>option-ref Reference</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Command-Line-Format" rel=prev>Command Line Format</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong" rel=up>getopt-long</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reference-Documentation-for-getopt_002dlong></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.4.4 Reference Documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE></H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getopt_002dlong></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getopt-long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>args grammar [#:stop-at-first-non-option #t]</EM></DT>
<DD>
<P>Parse the command line given in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which must be a list of strings) according to the option specification<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>grammar</VAR>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>grammar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is expected to be a list of this form:</P>
<P><CODE>((<VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>property</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>) &#8230;) &#8230;)</CODE></P>
<P>where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol denoting the long option, but without the two leading dashes (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>version</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the option is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--version</CODE>).</P>
<P>For each option, there may be list of arbitrarily many property/value pairs. The order of the pairs is not important, but every property may only appear once in the property list. The following table lists the possible properties:</P>
<DL compact>
<DT><CODE>(single-char<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char</VAR>)</CODE></DT>
<DD>
<P>Accept<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-<VAR>char</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a single-character equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--<VAR>option</VAR></CODE>. This is how to specify traditional Unix-style flags.</P></DD>
<DT><CODE>(required?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>)</CODE></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the option is required.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will raise an error if it is not found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>.</P></DD>
<DT><CODE>(value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>)</CODE></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, the option accepts a value; if it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it does not; and if it is the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>optional</CODE>, the option may appear in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with or without a value.</P></DD>
<DT><CODE>(predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>)</CODE></DT>
<DD>
<P>If the option accepts a value (i.e. you specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(value #t)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this option), then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the value, and throw an exception if it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a procedure which accepts a string and returns a boolean value; you may need to use quasiquotes to get it into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>grammar</VAR>.</P></DD></DL>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:stop-at-first-non-option</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword, if specified with any true value, tells<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to stop when it gets to the first non-option in the command line. That is, at the first word which is neither an option itself, nor the value of an option. Everything in the command line from that word onwards will be returned as non-option arguments.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>getopt-long</CODE>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is expected to be a list of strings like the one returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE>, with the first element being the name of the command. Therefore<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ignores the first element in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and starts argument interpretation with the second element.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>signals an error if any of the following conditions hold.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The option grammar has an invalid syntax.</LI>
<LI>One of the options in the argument list was not specified by the grammar.</LI>
<LI>A required option is omitted.</LI>
<LI>An option which requires an argument did not get one.</LI>
<LI>An option that doesn&#8217;t accept an argument does get one (this can only happen using the long option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--opt=<VAR>value</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax).</LI>
<LI>An option predicate fails.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>#:stop-at-first-non-option</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is useful for command line invocations like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guild [--help | --version] [script [script-options]]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cvs [general-options] command [command-options]</CODE>, where there are options at two levels: some generic and understood by the outer command, and some that are specific to the particular script or command being invoked. To use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in such cases, you would call it twice: firstly with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:stop-at-first-non-option #t</CODE>, so as to parse any generic options and identify the wanted script or sub-command; secondly, and after trimming off the initial generic command words, with a script- or sub-command-specific option grammar, so as to process those specific options.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=option_002dref-Reference></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong-Reference" rel=prev>getopt-long Reference</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong" rel=up>getopt-long</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reference-Documentation-for-option_002dref></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.4.5 Reference Documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option-ref</CODE></H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-option_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>options key default</EM></DT>
<DD>
<P>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a command line option named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return its value, if found. If the option has no value, but was given, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>. If the option was not given, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR>.<VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the result of a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>option-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always succeeds, either by returning the requested option value from the command line, or the default value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The special key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to get a list of all non-option arguments.