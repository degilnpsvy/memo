<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.5 SRFI Support Modules</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI is an acronym for Scheme Request For Implementation. The SRFI documents define a lot of syntactic and procedure extensions to standard Scheme as defined in R5RS.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile has support for a number of SRFIs. This chapter gives an overview over the available SRFIs and some usage hints. For complete documentation, design rationales and further examples, we advise you to get the relevant SRFI documents from the SRFI home page<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/">http://srfi.schemers.org/</A>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#About-SRFI-Usage">About SRFI Usage</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>What to know about Guile&#8217;s SRFI support.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d0">SRFI-0</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>cond-expand</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1">SRFI-1</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>List library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d2">SRFI-2</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>and-let*.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4">SRFI-4</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Homogeneous numeric vector datatypes.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d6">SRFI-6</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Basic String Ports.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d8">SRFI-8</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>receive.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9">SRFI-9</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>define-record-type.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d10">SRFI-10</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hash-Comma Reader Extension.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d11">SRFI-11</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>let-values and let*-values.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d13">SRFI-13</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>String library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d14">SRFI-14</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Character-set library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d16">SRFI-16</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>case-lambda</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d17">SRFI-17</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Generalized set!</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18">SRFI-18</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Multithreading support</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19">SRFI-19</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Time/Date library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d23">SRFI-23</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Error reporting</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d26">SRFI-26</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Specializing parameters</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27">SRFI-27</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sources of Random Bits</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d30">SRFI-30</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Nested multi-line block comments</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d31">SRFI-31</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A special form &#8216;rec&#8217; for recursive evaluation</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d34">SRFI-34</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Exception handling.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d35">SRFI-35</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Conditions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d37">SRFI-37</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>args-fold program argument processor</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d38">SRFI-38</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>External Representation for Data With Shared Structure</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d39">SRFI-39</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Parameter objects</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41">SRFI-41</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Streams.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d42">SRFI-42</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Eager comprehensions</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43">SRFI-43</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Vector Library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d45">SRFI-45</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Primitives for expressing iterative lazy algorithms</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d46">SRFI-46</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Basic syntax-rules Extensions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d55">SRFI-55</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Requiring Features.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d60">SRFI-60</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Integers as bits.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d61">SRFI-61</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A more general &#8216;cond&#8217; clause</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d62">SRFI-62</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>S-expression comments.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d64">SRFI-64</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A Scheme API for test suites.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d67">SRFI-67</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Compare procedures</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69">SRFI-69</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Basic hash tables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d87">SRFI-87</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>=&gt; in case clauses.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d88">SRFI-88</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Keyword objects.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d98">SRFI-98</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing environment variables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d105">SRFI-105</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Curly-infix expressions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d111">SRFI-111</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Boxes.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=About-SRFI-Usage></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d0" rel=next>SRFI-0</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=About-SRFI-Usage-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.1 About SRFI Usage</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI support in Guile is currently implemented partly in the core library, and partly as add-on modules. That means that some SRFIs are automatically available when the interpreter is started, whereas the other SRFIs require you to use the appropriate support module explicitly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are several reasons for this inconsistency. First, the feature checking syntactic form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond-expand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d0">SRFI-0</A>) must be available immediately, because it must be there when the user wants to check for the Scheme implementation, that is, before she can know that it is safe to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to load SRFI support modules. The second reason is that some features defined in SRFIs had been implemented in Guile before the developers started to add SRFI implementations as modules (for example SRFI-13 (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d13">SRFI-13</A>)). In the future, it is possible that SRFIs in the core library might be factored out into separate modules, requiring explicit module loading when they are needed. So you should be prepared to have to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>someday in the future to access SRFI-13 bindings. If you want, you can do that already. We have included the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-13)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the distribution, which currently does nothing, but ensures that you can write future-safe code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Generally, support for a specific SRFI is made available by using modules named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-<VAR>number</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of the SRFI needed. Another possibility is to use the command line option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--use-srfi</CODE>, which will load the necessary modules automatically (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile">Invoking Guile</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d0></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=next>SRFI-1</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#About-SRFI-Usage" rel=prev>About SRFI Usage</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d0-_002d-cond_002dexpand></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.2 SRFI-0 - cond-expand</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d0></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI lets a portable Scheme program test for the presence of certain features, and adapt itself by using different blocks of code, or fail if the necessary features are not available. There&#8217;s no module to load, this is in the Guile core.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A program designed only for Guile will generally not need this mechanism, such a program can of course directly use the various documented parts of Guile.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cond_002dexpand></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cond-expand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(feature body&#8230;) &#8230;</EM></DT>
<DD>
<P>Expand to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the first clause whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>feature</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specification is satisfied. It is an error if no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>feature</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is satisfied.</P>
<P>Features are symbols such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srfi-1</CODE>, and a feature specification can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms to test combinations. The last clause can be an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE>, to be used if no other passes.</P>
<P>For example, define a private version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alist-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if SRFI-1 is not available.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(cond-expand (srfi-1
              )
             (else
              (define (alist-cons key val alist)
                (cons (cons key val) alist))))
</PRE></DIV>
<P>Or demand a certain set of SRFIs (list operations, string ports,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>receive</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and string operations), failing if they&#8217;re not available.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(cond-expand ((and srfi-1 srfi-6 srfi-8 srfi-13)
              ))
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Guile core has the following features,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>guile
guile-2  ;; starting from Guile 2.x
r5rs
srfi-0
srfi-4
srfi-13
srfi-14
srfi-16
srfi-23
srfi-30
srfi-39
srfi-46
srfi-55
srfi-61
srfi-62
srfi-87
srfi-105
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Other SRFI feature symbols are defined once their code has been loaded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE>, since only then are their bindings available.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The &#8216;<SAMP>--use-srfi</SAMP>&#8217; command line option (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile">Invoking Guile</A>) is a good way to load SRFIs to satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond-expand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when running a portable program.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Testing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>feature allows a program to adapt itself to the Guile module system, but still run on other Scheme systems. For example the following demands SRFI-8 (<CODE>receive</CODE>), but also knows how to load it with the Guile mechanism.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(cond-expand (srfi-8
              )
             (guile
              (use-modules (srfi srfi-8))))
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guile_002d2-SRFI_002d0-feature></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-portability-between-2_002e0-and-older-versions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Likewise, testing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guile-2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>feature allows code to be portable between Guile 2.0 and previous versions of Guile. For instance, it makes it possible to write code that accounts for Guile 2.0&#8217;s compiler, yet be correctly interpreted on 1.8 and earlier versions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(cond-expand (guile-2 (eval-when (compile)
                        ;; This must be evaluated at compile time.
                        (fluid-set! current-reader my-reader)))
             (guile
                      ;; Earlier versions of Guile do not have a
                      ;; separate compilation phase.
                      (fluid-set! current-reader my-reader)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It should be noted that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond-expand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is separate from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*features*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mechanism (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Feature-Tracking">Feature Tracking</A>), feature symbols in one are unrelated to those in the other.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d2" rel=next>SRFI-2</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d0" rel=prev>SRFI-0</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-_002d-List-library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.3 SRFI-1 - List library</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The list library defined in SRFI-1 contains a lot of useful list processing procedures for construction, examining, destructuring and manipulating lists and pairs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Since SRFI-1 also defines some procedures which are already contained in R5RS and thus are supported by the Guile core library, some list and pair procedures which appear in the SRFI-1 document may not appear in this section. So when looking for a particular list/pair processing procedure, you should also have a look at the sections<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lists">Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pairs">Pairs</A>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Constructors">SRFI-1 Constructors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Constructing new lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Predicates">SRFI-1 Predicates</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Testing list for specific properties.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Selectors">SRFI-1 Selectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Selecting elements from lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Length-Append-etc">SRFI-1 Length Append etc</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Length calculation and list appending.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map">SRFI-1 Fold and Map</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Higher-order list processing.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Filtering-and-Partitioning">SRFI-1 Filtering and Partitioning</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Filter lists based on predicates.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching">SRFI-1 Searching</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Search for elements.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Deleting">SRFI-1 Deleting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Delete elements from lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Association-Lists">SRFI-1 Association Lists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Handle association lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Set-Operations">SRFI-1 Set Operations</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Use lists for representing sets.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Constructors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Predicates" rel=next>SRFI-1 Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Constructors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.1 Constructors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-constructor></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">New lists can be constructed by calling one of the following procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-xcons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>xcons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>d a</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>, but with interchanged arguments. Useful mostly when passed to higher-order procedures.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dtabulate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-tabulate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n init-proc</EM></DT>
<DD>
<P>Return an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-element list, where each list element is produced by applying the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the corresponding list index. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the indices is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dcopy-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>Return a new list containing the elements of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P>This function differs from the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-copy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors">List Constructors</A>) in accepting improper lists too. And if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a pair at all then it&#8217;s treated as the final tail of an improper list and simply returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-circular_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>circular-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elt1 elt2 &#8230;</EM></DT>
<DD>
<P>Return a circular list containing the given arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-iota></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>iota</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>count [start step]</EM></DT>
<DD>
<P>Return a list containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>numbers, starting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>each time. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(iota 6)        &#8658; (0 1 2 3 4 5)
(iota 4 2.5 -2) &#8658; (2.5 0.5 -1.5 -3.5)
</PRE></DIV>
<P>This function takes its name from the corresponding primitive in the APL language.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Selectors" rel=next>SRFI-1 Selectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Constructors" rel=prev>SRFI-1 Constructors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.2 Predicates</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-predicate></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures in this section test specific properties of lists.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-proper_002dlist_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>proper-list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a proper list, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is the same as the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Predicates">List Predicates</A>).</P>
<P>A proper list is a list which ends with the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the usual way. The empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself is a proper list too.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(proper-list? '(1 2 3))  &#8658; #t
(proper-list? '())       &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-circular_002dlist_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>circular-list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a circular list, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P>
<P>A circular list is a list where at some point the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers back to a previous pair in the list (either the start or some later point), so that following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>s takes you around in a circle, with no end.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x (list 1 2 3 4))
(set-cdr! (last-pair x) (cddr x))
x &#8658; (1 2 3 4 3 4 3 4 ...)
(circular-list? x)  &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dotted_002dlist_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dotted-list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a dotted list, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P>
<P>A dotted list is a list where the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the last pair is not the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE>. Any non-pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also considered a dotted list, with length zero.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(dotted-list? '(1 2 . 3))  &#8658; #t
(dotted-list? 99)          &#8658; #t
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It will be noted that any Scheme object passes exactly one of the above three tests<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>proper-list?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>circular-list?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dotted-list?</CODE>. Non-lists are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dotted-list?</CODE>, finite lists are either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>proper-list?</CODE>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dotted-list?</CODE>, and infinite lists are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>circular-list?</CODE>.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-null_002dlist_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null-list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. If something else than a proper or circular list is passed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, an error is signalled. This procedure is recommended for checking for the end of a list in contexts where dotted lists are not allowed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-not_002dpair_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not-pair?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a pair,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is shorthand notation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(not (pair?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is supposed to be used for end-of-list checking in contexts where dotted lists are allowed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elt= list1 &#8230;</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all argument lists are equal,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. List equality is determined by testing whether all lists have the same length and the corresponding elements are equal in the sense of the equality predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt=</VAR>. If no or only one list is given,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Selectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Length-Append-etc" rel=next>SRFI-1 Length Append etc</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Predicates" rel=prev>SRFI-1 Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Selectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.3 Selectors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-selector></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-first></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>first</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-second></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>second</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-third></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>third</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-fourth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fourth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-fifth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fifth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-sixth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sixth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-seventh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>seventh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-eighth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eighth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-ninth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ninth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-tenth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tenth</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DD>
<P>These are synonyms for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddr</CODE>, &#8230;.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-car_002bcdr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>car+cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DD>
<P>Return two values, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CAR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CDR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pair</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-take></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>take</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DT><A name=index-take_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>take!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DD>
<P>Return a list containing the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P><CODE>take!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of the argument list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to produce the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-drop></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DD>
<P>Return a list containing all but the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-take_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>take-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DD>
<P>Return a list containing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>last elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The return shares a common tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-drop_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drop-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DT><A name=index-drop_002dright_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drop-right!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DD>
<P>Return a list containing all but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>last elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P><CODE>drop-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always returns a new list, even when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drop-right!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of the argument list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to produce the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-split_002dat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>split-at</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DT><A name=index-split_002dat_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>split-at!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst i</EM></DT>
<DD>
<P>Return two values, a list containing the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a list containing the remaining elements.</P>
<P><CODE>split-at!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of the argument list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to produce the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-last></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>last</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>Return the last element of the non-empty, finite list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Length-Append-etc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map" rel=next>SRFI-1 Fold and Map</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Selectors" rel=prev>SRFI-1 Selectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Length_002c-Append_002c-Concatenate_002c-etc_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.4 Length, Append, Concatenate, etc.</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-length_002b></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>length+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>Return the length of the argument list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a circular list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-concatenate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>concatenate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list-of-lists</EM></DT>
<DT><A name=index-concatenate_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>concatenate!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list-of-lists</EM></DT>
<DD>
<P>Construct a list by appending all lists in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list-of-lists</VAR>.</P>
<P><CODE>concatenate!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of the given lists in order to produce the result.</P>
<P><CODE>concatenate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(apply append<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list-of-lists</VAR>)</CODE>. It exists because some Scheme implementations have a limit on the number of arguments a function takes, which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might exceed. In Guile there is no such limit.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-append_002dreverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append-reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rev-head tail</EM></DT>
<DT><A name=index-append_002dreverse_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append-reverse!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rev-head tail</EM></DT>
<DD>
<P>Reverse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rev-head</VAR>, append<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to it, and return the result. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(append (reverse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rev-head</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR>)</CODE>, but its implementation is more efficient.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(append-reverse '(1 2 3) '(4 5 6)) &#8658; (3 2 1 4 5 6)
</PRE></DIV>
<P><CODE>append-reverse!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rev-head</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to produce the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-zip></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>zip</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Return a list as long as the shortest of the argument lists, where each element is a list. The first list contains the first elements of the argument lists, the second list contains the second elements, and so on.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unzip1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unzip1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-unzip2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unzip2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-unzip3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unzip3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-unzip4></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unzip4</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-unzip5></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unzip5</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P><CODE>unzip1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a list of lists, and returns a list containing the first elements of each list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unzip2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns two lists, the first containing the first elements of each lists and the second containing the second elements of each lists, and so on.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-count></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Return a count of the number of times<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true when called on elements from the given lists.</P>
<P><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elemN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>)</CODE>, each element being from the corresponding list. The first call is with the first element of each list, the second with the second element from each, and so on.</P>
<P>Counting stops when the end of the shortest list is reached. At least one list must be non-circular.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Fold-and-Map></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Filtering-and-Partitioning" rel=next>SRFI-1 Filtering and Partitioning</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Length-Append-etc" rel=prev>SRFI-1 Length Append etc</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Fold_002c-Unfold-_0026-Map></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.5 Fold, Unfold &amp; Map</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-fold></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-map></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init lst1 lst2 &#8230;</EM></DT>
<DT><A name=index-fold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; to build a result, and return that result.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR>, and so on.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return from the previous call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, or the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call. If any list is empty, just<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works through the list elements from first to last. The following shows a list reversal and the calls it makes,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(fold cons '() '(1 2 3))

(cons 1 '())
(cons 2 '(1))
(cons 3 '(2 1)
&#8658; (3 2 1)
</PRE></DIV>
<P><CODE>fold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works through the list elements from last to first, ie. from the right. So for example the following finds the longest string, and the last among equal longest,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(fold-right (lambda (str prev)
              (if (&gt; (string-length str) (string-length prev))
                  str
                  prev))
            ""
            '("x" "abc" "xyz" "jk"))
&#8658; "xyz"
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; have different lengths,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops when the end of the shortest is reached;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>commences at the last element of the shortest. Ie. elements past the length of the shortest are ignored in the other<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>s. At least one<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-circular.</P>
<P><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be preferred over<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the order of processing doesn&#8217;t matter, or can be arranged either way, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a little more efficient.</P>
<P>The way<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>builds a result from iterating is quite general, it can do more than other iterations like say<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filter</CODE>. The following for example removes adjacent duplicate elements from a list,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (delete-adjacent-duplicates lst)
  (fold-right (lambda (elem ret)
                (if (equal? elem (first ret))
                    ret
                    (cons elem ret)))
              (list (last lst))
              lst))
(delete-adjacent-duplicates '(1 2 3 3 4 4 4 5))
&#8658; (1 2 3 4 5)
</PRE></DIV>
<P>Clearly the same sort of thing can be done with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a variable in which to build the result, but a self-contained<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be re-used in multiple contexts, where a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE>would have to be written out each time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pair_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init lst1 lst2 &#8230;</EM></DT>
<DT><A name=index-pair_002dfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair-fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init lst1 lst2 &#8230;</EM></DT>
<DD>
<P>The same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE>, but apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the pairs of the lists instead of the list elements.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reduce></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reduce</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc default lst</EM></DT>
<DT><A name=index-reduce_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reduce-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc default lst</EM></DT>
<DD>
<P><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variant of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE>, where the first call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is on two elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, rather than one element and a given initial value.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(this is the only use for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR>). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has just one element then that&#8217;s the return value. Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called on the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the second and subsequent elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return from the previous call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. The first element of<VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P>
<P>For example, the following adds a list of numbers, the calls made to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are shown. (Of course<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts multiple arguments and can add a list directly, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>apply</CODE>.)</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(reduce + 0 '(5 6 7)) &#8658; 18

(+ 6 5)  &#8658; 11
(+ 7 11) &#8658; 18
</PRE></DIV>
<P><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is an &#8220;identity&#8221;, meaning a value which under<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t change the result, in this case 0 is an identity since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(+ 5 0)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is just 5.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>avoids that unnecessary call.</P>
<P><CODE>reduce-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a similar variation on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE>, working from the end (ie. the right) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The last element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values go from the second last.</P>
<P><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be preferred over<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reduce-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the order of processing doesn&#8217;t matter, or can be arranged either way, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reduce</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a little more efficient.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [tail-gen]</EM></DT>
<DD>
<P><CODE>unfold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined as follows:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(unfold p f g seed) =
   (if (p seed) (tail-gen seed)
       (cons (f seed)
             (unfold p f g (g seed))))
</PRE></DIV>
<DL compact>
<DT><VAR>p</VAR></DT>
<DD>
<P>Determines when to stop unfolding.</P></DD>
<DT><VAR>f</VAR></DT>
<DD>
<P>Maps each seed value to the corresponding list element.</P></DD>
<DT><VAR>g</VAR></DT>
<DD>
<P>Maps each seed value to next seed value.</P></DD>
<DT><VAR>seed</VAR></DT>
<DD>
<P>The state value for the unfold.</P></DD>
<DT><VAR>tail-gen</VAR></DT>
<DD>
<P>Creates the tail of the list; defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (x) '())</CODE>.</P></DD></DL>
<P><VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces a series of seed values, which are mapped to list elements by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR>. These elements are put into a list in left-to-right order, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells when to stop unfolding.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unfold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [tail]</EM></DT>
<DD>
<P>Construct a list with the following loop.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let lp ((seed seed) (lis tail))
   (if (p seed) lis
       (lp (g seed)
           (cons (f seed) lis))))
</PRE></DIV>
<DL compact>
<DT><VAR>p</VAR></DT>
<DD>
<P>Determines when to stop unfolding.</P></DD>
<DT><VAR>f</VAR></DT>
<DD>
<P>Maps each seed value to the corresponding list element.</P></DD>
<DT><VAR>g</VAR></DT>
<DD>
<P>Maps each seed value to next seed value.</P></DD>
<DT><VAR>seed</VAR></DT>
<DD>
<P>The state value for the unfold.</P></DD>
<DT><VAR>tail</VAR></DT>
<DD>
<P>The tail of the list; defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE>.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-map-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Map the procedure over the list(s)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR>, &#8230; and return a list containing the results of the procedure applications. This procedure is extended with respect to R5RS, because the argument lists may have different lengths. The result list will have the same length as the shortest argument lists. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be applied to the list element(s) is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-for_002deach-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Apply the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each pair of corresponding elements of the list(s)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR>, &#8230;. The return value is not specified. This procedure is extended with respect to R5RS, because the argument lists may have different lengths. The shortest argument list determines the number of times<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be applied to the list elements in left-to-right order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-append_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DT><A name=index-append_002dmap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append-map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(apply append (map f clist1 clist2 ...))
</PRE></DIV>
<P>and</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(apply append! (map f clist1 clist2 ...))
</PRE></DIV>
<P>Map<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over the elements of the lists, just as in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. However, the results of the applications are appended together to make the final result.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to append the results together;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append-map!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append!</CODE>.</P>
<P>The dynamic order in which the various applications of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-map_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Linear-update variant of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is allowed, but not required, to alter the cons cells of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct the result list.</P>
<P>The dynamic order in which the various applications of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made is not specified. In the n-ary case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst3</VAR>, &#8230; must have at least as many elements as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pair_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE>, but applies the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the pairs from which the argument lists are constructed, instead of the list elements. The return value is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-filter_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>filter-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE>, but only results from the applications of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are true are saved in the result list.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Filtering-and-Partitioning></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching" rel=next>SRFI-1 Searching</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map" rel=prev>SRFI-1 Fold and Map</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Filtering-and-Partitioning></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.6 Filtering and Partitioning</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-filter></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-partition></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Filtering means to collect all elements from a list which satisfy a specific condition. Partitioning a list means to make two groups of list elements, one which contains the elements satisfying a condition, and the other for the elements which don&#8217;t.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filter!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions are implemented in the Guile core, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification">List Modification</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-partition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>partition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-partition_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>partition!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Split<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into those elements which do and don&#8217;t satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P>
<P>The return is two values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>), the first being a list of all elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>, the second a list of those which do not.</P>
<P>The elements in the result lists are in the same order as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but the order in which the calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elem)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made on the list elements is unspecified.</P>
<P><CODE>partition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not change<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, but one of the returned lists may share a tail with it.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>partition!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct its return.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-remove></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remove</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-remove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Return a list containing all elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which do not satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. The elements in the result list have the same order as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the list elements is not specified.</P>
<P><CODE>remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is allowed, but not required to modify the structure of the input list.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Searching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Deleting" rel=next>SRFI-1 Deleting</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Filtering-and-Partitioning" rel=prev>SRFI-1 Filtering and Partitioning</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Searching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.7 Searching</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-search></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures for searching elements in lists either accept a predicate or a comparison object for determining which elements are to be searched.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-find></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>find</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Return the first element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no such element is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-find_002dtail></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>find-tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Return the first pair of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CAR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no such element is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-take_002dwhile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>take-while</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-take_002dwhile_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>take-while!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Return the longest initial prefix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose elements all satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P>
<P><CODE>take-while!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is allowed, but not required to modify the input list while producing the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-drop_002dwhile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drop-while</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Drop the longest initial prefix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose elements all satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-span></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>span</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-span_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>span!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-break-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-break_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P><CODE>span</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>splits the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the longest initial prefix whose elements all satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>, and the remaining tail.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inverts the sense of the predicate.</P>
<P><CODE>span!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are allowed, but not required to modify the structure of the input list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in order to produce the result.</P>
<P>Note that the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conflicts with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>binding established by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#while-do">while do</A>). Applications wanting to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop will need to make a new define under a different name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-any></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Test whether any set of elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. If so, the return value is the return value from the successful<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, or if not, the return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>If there are n list arguments, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a predicate taking n arguments. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; )</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>taking an element from each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The calls are made successively for the first, second, etc. elements of the lists, stopping when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns non-<CODE>#f</CODE>, or when the end of the shortest list is reached.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call on the last set of elements (i.e., when the end of the shortest list has been reached), if that point is reached, is a tail call.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-every></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Test whether every set of elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. If so, the return value is the return from the final<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, or if not, the return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>If there are n list arguments, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a predicate taking n arguments. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2 &#8230;</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>taking an element from each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The calls are made successively for the first, second, etc. elements of the lists, stopping if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, or when the end of any of the lists is reached.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call on the last set of elements (i.e., when the end of the shortest list has been reached) is a tail call.</P>
<P>If one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;is empty then no calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made, and the return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dindex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst1 lst2 &#8230;</EM></DT>
<DD>
<P>Return the index of the first set of elements, one from each of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, which satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P>
<P><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem2 &#8230;</VAR>)</CODE>. Searching stops when the end of the shortest<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reached. The return index starts from 0 for the first set of elements. If no set of elements pass, then the return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(list-index odd? '(2 4 6 9))      &#8658; 3
(list-index = '(1 2 3) '(3 1 2))  &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-member-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>member</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst [=]</EM></DT>
<DD>
<P>Return the first sublist of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>CAR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not appear in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>Equality is determined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, or by the equality predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if given.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elem)</CODE>, ie. with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>first, so for example to find the first element greater than 5,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(member 5 '(3 5 1 7 2 9) &lt;) &#8658; (7 2 9)
</PRE></DIV>
<P>This version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>member</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extends the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>member</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching">List Searching</A>) by accepting an equality predicate.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Deleting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Association-Lists" rel=next>SRFI-1 Association Lists</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching" rel=prev>SRFI-1 Searching</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Deleting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.8 Deleting</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-delete></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delete-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst [=]</EM></DT>
<DT><A name=index-delete_0021-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst [=]</EM></DT>
<DD>
<P>Return a list containing the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but with those equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>deleted. The returned elements will be in the same order as they were in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P>Equality is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not given. An equality call is made just once for each element, but the order in which the calls are made on the elements is unspecified.</P>
<P>The equality calls are always<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(= x elem)</CODE>, ie. the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is first. This means for instance elements greater than 5 can be deleted with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(delete 5 lst &lt;)</CODE>.</P>
<P><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, but the return might share a common tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct its return.</P>
<P>These functions extend the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification">List Modification</A>) in accepting an equality predicate. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-difference</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Set-Operations">SRFI-1 Set Operations</A>) for deleting multiple elements from a list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delete_002dduplicates></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete-duplicates</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst [=]</EM></DT>
<DT><A name=index-delete_002dduplicates_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete-duplicates!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst [=]</EM></DT>
<DD>
<P>Return a list containing the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but without duplicates.</P>
<P>When elements are equal, only the first in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is retained. Equal elements can be anywhere in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, they don&#8217;t have to be adjacent. The returned list will have the retained elements in the same order as they were in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P>
<P>Equality is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not given. Calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(= x y)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made with element<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>being before<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. A call is made at most once for each combination, but the sequence of the calls across the elements is unspecified.</P>
<P><CODE>delete-duplicates</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, but the return might share a common tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete-duplicates!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the structure of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct its return.</P>
<P>In the worst case, this is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>O(N^2)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>algorithm because it must check each element against all those preceding it. For long lists it is more efficient to sort and then compare only adjacent elements.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Association-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Set-Operations" rel=next>SRFI-1 Set Operations</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Deleting" rel=prev>SRFI-1 Deleting</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Association-Lists-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.9 Association Lists</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-association-list></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-alist-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Association lists are described in detail in section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists">Association Lists</A>. The present section only documents the additional procedures for dealing with association lists defined by SRFI-1.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assoc-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist [=]</EM></DT>
<DD>
<P>Return the pair from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which matches<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. This extends the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Retrieving-Alist-Entries">Retrieving Alist Entries</A>) by taking an optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>comparison procedure.</P>
<P>The default comparison is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>. If an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is given it&#8217;s called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alistcar</VAR>)</CODE>, i.e. the given target<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the first argument, and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is second.</P>
<P>For example a case-insensitive string lookup,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(assoc "yy" '(("XX" . 1) ("YY" . 2)) string-ci=?)
&#8658; ("YY" . 2)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002dcons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key datum alist</EM></DT>
<DD>
<P>Cons a new association<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the result. This is equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(cons (cons <VAR>key</VAR> <VAR>datum</VAR>) <VAR>alist</VAR>)
</PRE></DIV>
<P><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Adding-or-Setting-Alist-Entries">Adding or Setting Alist Entries</A>) in the Guile core does the same thing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist</EM></DT>
<DD>
<P>Return a newly allocated copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, that means that the spine of the list as well as the pairs are copied.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist [=]</EM></DT>
<DT><A name=index-alist_002ddelete_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist [=]</EM></DT>
<DD>
<P>Return a list containing the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but with those elements whose keys are equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>deleted. The returned elements will be in the same order as they were in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>.</P>
<P>Equality is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not given. The order in which elements are tested is unspecified, but each equality call is made<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(= key alistkey)</CODE>, i.e. the given<VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is first and the key from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>second. This means for instance all associations with a key greater than 5 can be removed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(alist-delete 5 alist &lt;)</CODE>.</P>
<P><CODE>alist-delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, but the return might share a common tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alist-delete!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the list structure of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct its return.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d1-Set-Operations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Association-Lists" rel=prev>SRFI-1 Association Lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=up>SRFI-1</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Set-Operations-on-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.3.10 Set Operations on Lists</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list-set-operation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Lists can be used to represent sets of objects. The procedures in this section operate on such lists as sets.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that lists are not an efficient way to implement large sets. The procedures here typically take time<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>m</VAR>x<VAR>n</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>when operating on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>element lists. Other data structures like trees, bitsets (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bit-Vectors">Bit Vectors</A>) or hash tables (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A>) are faster.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All these procedures take an equality predicate as the first argument. This predicate is used for testing the objects in the list sets for sameness. This predicate must be consistent with<CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Equality">Equality</A>) in the sense that if two list elements are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then they must also be equal under the predicate. This simply means a given object must be equal to itself.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_003c_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset&lt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if each list is a subset of the one following it. I.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a subset of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a subset of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list3</VAR>, etc., for as many lists as given. If only one list or no lists are given, the return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<P>A list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a subset of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to some element in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>. Elements are compared using the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>xelem yelem)</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset&lt;= eq?)                      &#8658; #t
(lset&lt;= eqv? '(1 2 3) '(1))       &#8658; #f
(lset&lt;= eqv? '(1 3 2) '(4 3 1 2)) &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all argument lists are set-equal.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is compared to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list3</VAR>, etc., for as many lists as given. If only one list or no lists are given, the return value is<CODE>#t</CODE>.</P>
<P>Two lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are set-equal if each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to some element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and conversely each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to some element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. The order of the elements in the lists doesn&#8217;t matter. Element equality is determined with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>xelem yelem)</CODE>, but exactly which calls are made is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset= eq?)                      &#8658; #t
(lset= eqv? '(1 2 3) '(3 2 1))   &#8658; #t
(lset= string-ci=? '("a" "A" "b") '("B" "b" "a")) &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002dadjoin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-adjoin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list elem &#8230;</EM></DT>
<DD>
<P>Add to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>any of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR>s not already in the list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR>s are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>ed onto the start of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(so the return value shares a common tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>), but the order that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR>s are added is unspecified.</P>
<P>The given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used for comparing elements, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>listelem elem)</CODE>, i.e., the second argument is one of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset-adjoin eqv? '(1 2 3) 4 1 5) &#8658; (5 4 1 2 3)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002dunion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-union</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DT><A name=index-lset_002dunion_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-union!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DD>
<P>Return the union of the argument list sets. The result is built by taking the union of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR>, then the union of that with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list3</VAR>, etc., for as many lists as given. For one list argument that list itself is the result, for no list arguments the result is the empty list.</P>
<P>The union of two lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is formed as follows. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty then the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>. Otherwise start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the result and consider each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>element (from first to last). A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>element not equal to something already in the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>ed onto the result.</P>
<P>The given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used for comparing elements, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>relem yelem)</CODE>. The first argument is from the result accumulated so far, and the second is from the list being union-ed in. But exactly which calls are made is otherwise unspecified.</P>
<P>Notice that duplicate elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or the first non-empty list) are preserved, but that repeated elements in subsequent lists are only added once.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset-union eqv?)                          &#8658; ()
(lset-union eqv? '(1 2 3))                 &#8658; (1 2 3)
(lset-union eqv? '(1 2 1 3) '(2 4 5) '(5)) &#8658; (5 4 1 2 1 3)
</PRE></DIV>
<P><CODE>lset-union</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t change the given lists but the result may share a tail with the first non-empty list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-union!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can modify all of the given lists to form the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002dintersection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DT><A name=index-lset_002dintersection_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-intersection!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DD>
<P>Return the intersection of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the other argument lists, meaning those elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are also in all of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc. For one list argument, just that list is returned.</P>
<P>The test for an element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be in the return is simply that it&#8217;s equal to some element in each of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc. Notice this means an element appearing twice in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but only once in each of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc will go into the return twice. The return has its elements in the same order as they were in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR>.</P>
<P>The given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used for comparing elements, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elem1 elemN)</CODE>. The first argument is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the second is from one of the subsequent lists. But exactly which calls are made and in what order is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset-intersection eqv? '(x y))                        &#8658; (x y)
(lset-intersection eqv? '(1 2 3) '(4 3 2))             &#8658; (2 3)
(lset-intersection eqv? '(1 1 2 2) '(1 2) '(2 1) '(2)) &#8658; (2 2)
</PRE></DIV>
<P>The return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-intersection</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may share a tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-intersection!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form its result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002ddifference></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DT><A name=index-lset_002ddifference_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-difference!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with any elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc removed (ie. subtracted). For one list argument, just that list is returned.</P>
<P>The given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used for comparing elements, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elem1 elemN)</CODE>. The first argument is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the second from one of the subsequent lists. But exactly which calls are made and in what order is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset-difference eqv? '(x y))             &#8658; (x y)
(lset-difference eqv? '(1 2 3) '(3 1))    &#8658; (2)
(lset-difference eqv? '(1 2 3) '(3) '(2)) &#8658; (1)
</PRE></DIV>
<P>The return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-difference</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may share a tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-difference!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form its result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002ddiff_002bintersection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-diff+intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DT><A name=index-lset_002ddiff_002bintersection_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-diff+intersection!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list1 list2 &#8230;</EM></DT>
<DD>
<P>Return two values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>), the difference and intersection of the argument lists as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-difference</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-intersection</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above.</P>
<P>For two list arguments this partitions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into those elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and not in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list2</VAR>. (But for more than two arguments there can be elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are neither part of the difference nor the intersection.)</P>
<P>One of the return values from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-diff+intersection</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may share a tail with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-diff+intersection!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form its results.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lset_002dxor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-xor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DT><A name=index-lset_002dxor_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lset-xor!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>= list &#8230;</EM></DT>
<DD>
<P>Return an XOR of the argument lists. For two lists this means those elements which are in exactly one of the lists. For more than two lists it means those elements which appear in an odd number of the lists.</P>
<P>To be precise, the XOR of two lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is formed by taking those elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>not equal to any element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, plus those elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>not equal to any element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. Equality is determined with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>=</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>e1 e2)</CODE>. One argument is from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the other from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, but which way around is unspecified. Exactly which calls are made is also unspecified, as is the order of the elements in the result.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(lset-xor eqv? '(x y))             &#8658; (x y)
(lset-xor eqv? '(1 2 3) '(4 3 2))  &#8658; (4 1)
</PRE></DIV>
<P>The return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-xor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may share a tail with one of the list arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-xor!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form its result.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=next>SRFI-4</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1" rel=prev>SRFI-1</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d2-_002d-and_002dlet_002a></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.4 SRFI-2 - and-let*</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following syntax can be obtained with</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (srfi srfi-2))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">or alternatively</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 and-let-star))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-and_002dlet_002a></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>and-let*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(clause &#8230;) body &#8230;</EM></DT>
<DD>
<P>A combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*</CODE>.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated in turn, and if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is obtained then evaluation stops and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. If all are non-<CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated and the last form gives the return value, or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty then the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the following,</P>
<DL compact>
<DT><CODE>(symbol expr)</CODE></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>, check for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and bind it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>. Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*</CODE>, that binding is available to subsequent clauses.</P></DD>
<DT><CODE>(expr)</CODE></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and check for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD>
<DT><CODE>symbol</CODE></DT>
<DD>
<P>Get the value bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and check for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P>Notice that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(expr)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has an &#8220;extra&#8221; pair of parentheses, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>((eq? x y))</CODE>. One way to remember this is to imagine the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(symbol expr)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted.</P>
<P><CODE>and-let*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is good for calculations where a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value means termination, but where a non-<CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is going to be needed in subsequent expressions.</P>
<P>The following illustrates this, it returns text between brackets &#8216;<SAMP>[...]</SAMP>&#8217; in a string, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there are no such brackets (ie. either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (extract-brackets str)
  (and-let* ((start (string-index str #\[))
             (end   (string-index str #\] start)))
    (substring str (1+ start) end)))
</PRE></DIV>
<P>The following shows plain variables and expressions tested too.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>diagnostic-levels</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is taken to be an alist associating a diagnostic type with a level.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>str</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is printed only if the type is known and its level is high enough.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (show-diagnostic type str)
  (and-let* (want-diagnostics
             (level (assq-ref diagnostic-levels type))
             ((&gt;= level current-diagnostic-level)))
    (display str)))
</PRE></DIV>
<P>The advantage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and-let*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is that an extended sequence of expressions and tests doesn&#8217;t require lots of nesting as would arise from separate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*</CODE>, or from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=&gt;</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d6" rel=next>SRFI-6</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d2" rel=prev>SRFI-2</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-_002d-Homogeneous-numeric-vector-datatypes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.5 SRFI-4 - Homogeneous numeric vector datatypes</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-4 provides an interface to uniform numeric vectors: vectors whose elements are all of a single numeric type. Guile offers uniform numeric vectors for signed and unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers, two sizes of floating point values, and, as an extension to SRFI-4, complex floating-point numbers of these two sizes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The standard SRFI-4 procedures and data types may be included via loading the appropriate module:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-4))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This module is currently a part of the default Guile environment, but it is a good practice to explicitly import the module. In the future, using SRFI-4 procedures without importing the SRFI-4 module will cause a deprecation message to be printed. (Of course, one may call the C functions at any time. Would that C had modules!)</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-Overview">SRFI-4 Overview</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The warp and weft of uniform numeric vectors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-API">SRFI-4 API</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Uniform vectors, from Scheme and from C.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-and-Bytevectors">SRFI-4 and Bytevectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>SRFI-4 vectors are backed by bytevectors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-Extensions">SRFI-4 Extensions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile-specific extensions to the standard.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-Overview></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-API" rel=next>SRFI-4 API</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=up>SRFI-4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-_002d-Overview></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.5.1 SRFI-4 - Overview</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Uniform numeric vectors can be useful since they consume less memory than the non-uniform, general vectors. Also, since the types they can store correspond directly to C types, it is easier to work with them efficiently on a low level. Consider image processing as an example, where you want to apply a filter to some image. While you could store the pixels of an image in a general vector and write a general convolution function, things are much more efficient with uniform vectors: the convolution function knows that all pixels are unsigned 8-bit values (say), and can use a very tight inner loop.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is implemented in Scheme by having the compiler notice calls to the SRFI-4 accessors, and inline them to appropriate compiled code. From C you have access to the raw array; functions for efficiently working with uniform numeric vectors from C are listed at the end of this section.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Uniform numeric vectors are the special case of one dimensional uniform numeric arrays.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are 12 standard kinds of uniform numeric vectors, and they all have their own complement of constructors, accessors, and so on. Procedures that operate on a specific kind of uniform numeric vector have a &#8220;tag&#8221; in their name, indicating the element type.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>u8</CODE></DT>
<DD>
<P>unsigned 8-bit integers</P></DD>
<DT><CODE>s8</CODE></DT>
<DD>
<P>signed 8-bit integers</P></DD>
<DT><CODE>u16</CODE></DT>
<DD>
<P>unsigned 16-bit integers</P></DD>
<DT><CODE>s16</CODE></DT>
<DD>
<P>signed 16-bit integers</P></DD>
<DT><CODE>u32</CODE></DT>
<DD>
<P>unsigned 32-bit integers</P></DD>
<DT><CODE>s32</CODE></DT>
<DD>
<P>signed 32-bit integers</P></DD>
<DT><CODE>u64</CODE></DT>
<DD>
<P>unsigned 64-bit integers</P></DD>
<DT><CODE>s64</CODE></DT>
<DD>
<P>signed 64-bit integers</P></DD>
<DT><CODE>f32</CODE></DT>
<DD>
<P>the C type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE></P></DD>
<DT><CODE>f64</CODE></DT>
<DD>
<P>the C type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE></P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, Guile supports uniform arrays of complex numbers, with the nonstandard tags:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>c32</CODE></DT>
<DD>
<P>complex numbers in rectangular form with the real and imaginary part being a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE></P></DD>
<DT><CODE>c64</CODE></DT>
<DD>
<P>complex numbers in rectangular form with the real and imaginary part being a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE></P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The external representation (ie. read syntax) for these vectors is similar to normal Scheme vectors, but with an additional tag from the tables above indicating the vector&#8217;s type. For example,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#u16(1 2 3)
#f64(3.1415 2.71)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the read syntax for floating-point here conflicts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for false. In Standard Scheme one can write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 #f3)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a three element list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 #f 3)</CODE>, but for Guile<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 #f3)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invalid.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 #f 3)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is almost certainly what one should write anyway to make the intention clear, so this is rarely a problem.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-API></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-and-Bytevectors" rel=next>SRFI-4 and Bytevectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-Overview" rel=prev>SRFI-4 Overview</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=up>SRFI-4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-_002d-API></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.5.2 SRFI-4 - API</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions are only available from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-4 gnu)</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-s8vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-u16vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-s16vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-u32vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-s32vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-u64vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-s64vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-f32vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-f64vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-c32vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-c64vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fu8vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fs8vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fu16vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fs16vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fu32vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fs32vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fu64vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fs64vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005ff32vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005ff64vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fc32vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fc64vector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a homogeneous numeric vector of the indicated type.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002du8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002ds8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002du16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002ds16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002du32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002ds32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002du64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002ds64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002df32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002df64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002dc32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-make_002dc64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [value]</EM></DT>
<DT><A name=index-scm_005fmake_005fu8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fs8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fu16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fs16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fu32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fs32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fu64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fs64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005ff32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005ff64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fc32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DT><A name=index-scm_005fmake_005fc64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, value)</EM></DT>
<DD>
<P>Return a newly allocated homogeneous numeric vector holding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of the indicated type. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, the vector is initialized with that value, otherwise the contents are unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-s8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-u16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-s16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-u32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-s32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-u64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-s64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-f32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-f64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-c32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-c64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value &#8230;</EM></DT>
<DT><A name=index-scm_005fu8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fs8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fu16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fs16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fu32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fs32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fu64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fs64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005ff32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005ff64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fc32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DT><A name=index-scm_005fc64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(values)</EM></DT>
<DD>
<P>Return a newly allocated homogeneous numeric vector of the indicated type, holding the given parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>s. The vector length is the number of parameters given.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s8vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u16vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s16vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u32vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s32vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u64vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s64vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-f32vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-f64vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-c32vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-c64vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fu8vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs8vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu16vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs16vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu32vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs32vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu64vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs64vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005ff32vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005ff64vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fc32vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fc64vector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Return the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-s8vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-u16vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-s16vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-u32vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-s32vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-u64vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-s64vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-f32vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-f64vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-c32vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-c64vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DT><A name=index-scm_005fu8vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fs8vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fu16vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fs16vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fu32vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fs32vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fu64vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fs64vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005ff32vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005ff64vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fc32vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DT><A name=index-scm_005fc64vector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i)</EM></DT>
<DD>
<P>Return the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. The first element in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is index 0.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-s8vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-u16vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-s16vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-u32vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-s32vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-u64vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-s64vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-f32vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-f64vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-c32vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-c64vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DT><A name=index-scm_005fu8vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fs8vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fu16vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fs16vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fu32vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fs32vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fu64vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fs64vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005ff32vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005ff64vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fc32vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DT><A name=index-scm_005fc64vector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, i, value)</EM></DT>
<DD>
<P>Set the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. The first element in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is index 0. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s8vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s8vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u16vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u16vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s16vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s16vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u32vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u32vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s32vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s32vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-u64vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u64vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-s64vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>s64vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-f32vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f32vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-f64vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>f64vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-c32vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c32vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-c64vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>c64vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fu8vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs8vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu16vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs16vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu32vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs32vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fu64vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fs64vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005ff32vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005ff64vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fc32vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DT><A name=index-scm_005fc64vector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Return a newly allocated list holding all elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003eu8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003es8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003eu16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003es16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003eu32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003es32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003eu64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003es64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003ef32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003ef64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003ec32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002d_003ec64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fu8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fs8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fu16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fs16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fu32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fs32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fu64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fs64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005ff32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005ff64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fc32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fc64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return a newly allocated homogeneous numeric vector of the indicated type, initialized with the elements of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ftake_005fu8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_uint8 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fs8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_int8 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fu16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_uint16 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fs16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_int16 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fu32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_uint32 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fs32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_int32 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fu64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_uint64 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fs64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_int64 *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005ff32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const float *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005ff64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const double *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fc32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const float *data, size_t len)</EM></DT>
<DT><A name=index-scm_005ftake_005fc64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const double *data, size_t len)</EM></DT>
<DD>
<P>Return a new uniform numeric vector of the indicated type and length that uses the memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to store its elements. This memory will eventually be freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>, not its size in bytes.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants take a pointer to a C array of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>s or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>s. The real parts of the complex numbers are at even indices in that array, the corresponding imaginary parts are at the following odd index.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fu8vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs8vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu16vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs16vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu32vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs32vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu64vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs64vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005ff32vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005ff64vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fc32vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fc64vector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C">Vector Accessing from C</A>), but returns a pointer to the elements of a uniform numeric vector of the indicated kind.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fu8vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs8vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s8vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu16vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u16vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs16vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s16vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu32vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u32vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs32vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s32vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fu64vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u64vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fs64vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_s64vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005ff32vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f32vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005ff64vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_f64vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fc32vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c32vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DT><A name=index-scm_005fc64vector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c64vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_writable_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C">Vector Accessing from C</A>), but returns a pointer to the elements of a uniform numeric vector of the indicated kind.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-and-Bytevectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-Extensions" rel=next>SRFI-4 Extensions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-API" rel=prev>SRFI-4 API</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=up>SRFI-4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-_002d-Relation-to-bytevectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.5.3 SRFI-4 - Relation to bytevectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile implements SRFI-4 vectors using bytevectors (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>). Often when you have a numeric vector, you end up wanting to write its bytes somewhere, or have access to the underlying bytes, or read in bytes from somewhere else. Bytevectors are very good at this sort of thing. But the SRFI-4 APIs are nicer to use when doing number-crunching, because they are addressed by element and not by byte.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So as a compromise, Guile allows all bytevector functions to operate on numeric vectors. They address the underlying bytes in the native endianness, as one would expect.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Following the same reasoning, that it&#8217;s just bytes underneath, Guile also allows uniform vectors of a given type to be accessed as if they were of any type. One can fill a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u32vector</CODE>, and access its elements with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u8vector-ref</CODE>. One can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f64vector-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on bytevectors. It&#8217;s all the same to Guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this way, uniform numeric vectors may be written to and read from input/output ports using the procedures that operate on bytevectors.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>, for more information.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-and-Bytevectors" rel=prev>SRFI-4 and Bytevectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=up>SRFI-4</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d4-_002d-Guile-extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.5.4 SRFI-4 - Guile extensions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile defines some useful extensions to SRFI-4, which are not available in the default Guile environment. They may be imported by loading the extensions module:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-4 gnu))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-any_002d_003eu8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003es8vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003eu16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003es16vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003eu32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003es32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003eu64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003es64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003ef32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003ef64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003ec32vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-any_002d_003ec64vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-&gt;c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fu8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_u8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fs8vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_s8vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fu16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_u16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fs16vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_s16vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fu32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_u32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fs32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_s32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fu64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_u64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fs64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_s64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005ff32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_f32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005ff64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_f64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fc32vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_c32vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DT><A name=index-scm_005fany_005fto_005fc64vector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_any_to_c64vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return a (maybe newly allocated) uniform numeric vector of the indicated type, initialized with the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, which must be a list, a vector, or a uniform vector. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already a suitable uniform numeric vector, it is returned unchanged.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d6></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d8" rel=next>SRFI-8</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4" rel=prev>SRFI-4</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d6-_002d-Basic-String-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.6 SRFI-6 - Basic String Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d6></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-6 defines the procedures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-input-string</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-output-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-output-string</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that although versions of these procedures are included in the Guile core, the core versions are not fully conformant with SRFI-6: attempts to read or write characters that are not supported by the current<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%default-port-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will fail.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We therefore recommend that you import this module, which supports all characters:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-6))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d8></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9" rel=next>SRFI-9</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d6" rel=prev>SRFI-6</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d8-_002d-receive></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.7 SRFI-8 - receive</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d8></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>receive</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a syntax for making the handling of multiple-value procedures easier. It is documented in See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d9></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d10" rel=next>SRFI-10</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d8" rel=prev>SRFI-8</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d9-_002d-define_002drecord_002dtype></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.8 SRFI-9 - define-record-type</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI is a syntax for defining new record types and creating predicate, constructor, and field getter and setter functions. It is documented in the &#8220;Compound Data Types&#8221; section of the manual (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records">SRFI-9 Records</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d10></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d11" rel=next>SRFI-11</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9" rel=prev>SRFI-9</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d10-_002d-Hash_002dComma-Reader-Extension></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.9 SRFI-10 - Hash-Comma Reader Extension</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d10></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-hash_002dcomma></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0023_002c_0028_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI implements a reader extension<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>called hash-comma. It allows the reader to give new kinds of objects, for use both in data and as constants or literals in source code. This feature is available with</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-10))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new read syntax is of the form</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>#,(<VAR>tag</VAR> <VAR>arg</VAR>&#8230;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR>s are objects taken as parameters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>s are registered with the following procedure.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dreader_002dctor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-reader-ctor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag proc</EM></DT>
<DD>
<P>Register<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the constructor for a hash-comma read syntax starting with symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, i.e.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,(<VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arg&#8230;)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called with the given arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arg&#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the object it returns is the result of the read.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, a syntax giving a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>copies of an object.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-reader-ctor 'repeat
  (lambda (obj reps)
    (make-list reps obj)))

(display '#,(repeat 99 3))
-| (99 99 99)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice the quote<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,( )</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>repeat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler returns a list and the program must quote to use it literally, the same as any other list. Ie.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(display '#,(repeat 99 3))
&#8658;
(display '(99 99 99))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a handler returns an object which is self-evaluating, like a number or a string, then there&#8217;s no need for quoting, just as there&#8217;s no need when giving those directly as literals. For example an addition,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-reader-ctor 'sum
  (lambda (x y)
    (+ x y)))
(display #,(sum 123 456)) -| 579
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A typical use for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to get a read syntax for objects which don&#8217;t otherwise have one. For example, the following allows a hash table to be given literally, with tags and values, ready for fast lookup.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-reader-ctor 'hash
  (lambda elems
    (let ((table (make-hash-table)))
      (for-each (lambda (elem)
                  (apply hash-set! table elem))
                elems)
      table)))

(define (animal-&gt;family animal)
  (hash-ref '#,(hash ("tiger" "cat")
                     ("lion"  "cat")
                     ("wolf"  "dog"))
            animal))

(animal-&gt;family "lion") &#8658; "cat"
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Or for example the following is a syntax for a compiled regular expression (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Regular-Expressions">Regular Expressions</A>).</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 regex))

(define-reader-ctor 'regexp make-regexp)

(define (extract-angs str)
  (let ((match (regexp-exec '#,(regexp "&lt;([A-Z0-9]+)&gt;") str)))
    (and match
         (match:substring match 1))))

(extract-angs "foo &lt;BAR&gt; quux") &#8658; "BAR"
</PRE></DIV><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is somewhat similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-macro</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Macros">Macros</A>) in that handler code is run to produce a result, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operates at the read stage, so it can appear in data for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>), not just in code to be executed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is handled at read-time it has no direct access to variables etc. A symbol in the arguments is just a symbol, not a variable reference. The arguments are essentially constants, though the handler procedure can use them in any complicated way it might want.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-10)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has loaded,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available globally, there&#8217;s no need to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-10)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in later modules. Similarly the tags registered are global and can be used anywhere once registered.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There&#8217;s no attempt to record what previous<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms have been seen, if two identical forms occur then two calls are made to the handler procedure. The handler might like to maintain a cache or similar to avoid making copies of large objects, depending on expected usage.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In code the best uses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are generally when there&#8217;s a lot of objects of a particular kind as literals or constants. If there&#8217;s just a few then some local variables and initializers are fine, but that becomes tedious and error prone when there&#8217;s a lot, and the anonymous and compact syntax of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#,()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is much better.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d11></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d13" rel=next>SRFI-13</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d10" rel=prev>SRFI-10</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d11-_002d-let_002dvalues></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.10 SRFI-11 - let-values</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d11></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-let_002dvalues></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-let_002a_002dvalues></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This module implements the binding forms for multiple values<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*-values</CODE>. These forms are similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Bindings">Local Bindings</A>), but they support binding of the values returned by multiple-valued expressions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(use-modules (srfi srfi-11))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to make the bindings available.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(let-values (((x y) (values 1 2))
             ((z f) (values 3 4)))
   (+ x y z f))
&#8658;
10
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>let-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>performs all bindings simultaneously, which means that no expression in the binding clauses may refer to variables bound in the same clause list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*-values</CODE>, on the other hand, performs the bindings sequentially, just like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does for single-valued expressions.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d13></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d14" rel=next>SRFI-14</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d11" rel=prev>SRFI-11</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d13-_002d-String-Library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.11 SRFI-13 - String Library</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d13></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-13 procedures are always available, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Strings">Strings</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d14></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d16" rel=next>SRFI-16</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d13" rel=prev>SRFI-13</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d14-_002d-Character_002dset-Library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.12 SRFI-14 - Character-set Library</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d14></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-14 data type and procedures are always available, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets">Character Sets</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d16></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d17" rel=next>SRFI-17</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d14" rel=prev>SRFI-14</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d16-_002d-case_002dlambda></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.13 SRFI-16 - case-lambda</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d16-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-variable-arity-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-arity_002c-variable-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-16 defines a variable-arity<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case-lambda</CODE>. This form is available in the default Guile environment. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Case_002dlambda">Case-lambda</A>, for more information.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d17></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=next>SRFI-18</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d16" rel=prev>SRFI-16</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d17-_002d-Generalized-set_0021></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.14 SRFI-17 - Generalized set!</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d17></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI implements a generalized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>, allowing some &#8220;referencing&#8221; functions to be used as the target location of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>. This feature is available from</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-17))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is extended so that</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set! (vector-ref vec idx) new-value)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is equivalent to</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(vector-set! vec idx new-value)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The idea is that a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression identifies a location, which may be either fetched or stored. The same form is used for the location in both cases, encouraging visual clarity. This is similar to the idea of an &#8220;lvalue&#8221; in C.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The mechanism for this kind of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in the Guile core (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures-with-Setters">Procedures with Setters</A>). This module adds definitions of the following functions as procedures with setters, allowing them to be targets of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>,</P>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><CODE>car</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caaar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdaar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cddar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caaaar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caaadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caadar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caaddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadaar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdaaar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdaadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdadar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdaddr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cddaar</CODE>,<CODE>cddadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdddar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cddddr</CODE></P>
<P><CODE>string-ref</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-ref</CODE></P></BLOCKQUOTE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI specifies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures-with-Setters">Procedures with Setters</A>) as a procedure with setter, allowing the setter for a procedure to be changed, eg.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(set! (setter foo) my-new-setter-handler)</CODE>. Currently Guile does not implement this, a setter can only be specified on creation (<CODE>getter-with-setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getter_002dwith_002dsetter></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getter-with-setter</STRONG></DT>
<DD>
<P>The same as the Guile core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-procedure-with-setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures-with-Setters">Procedures with Setters</A>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=next>SRFI-19</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d17" rel=prev>SRFI-17</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-_002d-Multithreading-support></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.15 SRFI-18 - Multithreading support</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d18></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is an implementation of the SRFI-18 threading and synchronization library. The functions and variables described here are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-18))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a general rule, the data types and functions in this SRFI-18 implementation are compatible with the types and functions in Guile&#8217;s core threading code. For example, mutexes created with the SRFI-18<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function can be passed to the built-in Guile function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lock-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables">Mutexes and Condition Variables</A>), and mutexes created with the built-in Guile function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE>can be passed to the SRFI-18 function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mutex-lock!</CODE>. Cases in which this does not hold true are noted in the following sections.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Threads">SRFI-18 Threads</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Executing code</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Mutexes">SRFI-18 Mutexes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Mutual exclusion devices</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Condition-variables">SRFI-18 Condition variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Synchronizing of groups of threads</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Time">SRFI-18 Time</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Representation of times and durations</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Exceptions">SRFI-18 Exceptions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Signalling and handling errors</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Threads></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Mutexes" rel=next>SRFI-18 Mutexes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=up>SRFI-18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Threads-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.15.1 SRFI-18 Threads</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Threads created by SRFI-18 differ in two ways from threads created by Guile&#8217;s built-in thread functions. First, a thread created by SRFI-18<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>begins in a blocked state and will not start execution until<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-start!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called on it. Second, SRFI-18 threads are constructed with a top-level exception handler that captures any exceptions that are thrown on thread exit. In all other regards, SRFI-18 threads are identical to normal Guile threads.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dthread-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-thread</STRONG></DT>
<DD>
<P>Returns the thread that called this function. This is the same procedure as the same-named built-in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Threads">Threads</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_003f-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a thread,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is the same procedure as the same-named built-in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Threads">Threads</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dthread-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk [name]</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a new thread and with a new dynamic state, returning the new thread and optionally assigning it the object name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, which may be any Scheme object.</P>
<P>Note that the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conflicts with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 threads)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-thread</CODE>. Applications wanting to use both of these functions will need to refer to them by different names.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dname></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DD>
<P>Returns the name assigned to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the time of its creation, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was not given a name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dspecific></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-specific</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DT><A name=index-thread_002dspecific_002dset_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-specific-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread obj</EM></DT>
<DD>
<P>Get or set the &#8220;object-specific&#8221; property of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>. In Guile&#8217;s implementation of SRFI-18, this value is stored as an object property, and will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dstart_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-start!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DD>
<P>Unblocks<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and allows it to begin execution if it has not done so already.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dyield_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-yield!</STRONG></DT>
<DD>
<P>If one or more threads are waiting to execute, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-yield!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forces an immediate context switch to one of them. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-yield!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-yield!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves identically to the Guile built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>yield</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dsleep_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-sleep!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>timeout</EM></DT>
<DD>
<P>The current thread waits until the point specified by the time object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reached (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Time">SRFI-18 Time</A>). This blocks the thread only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents a point in the future. it is an error for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002dterminate_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-terminate!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread</EM></DT>
<DD>
<P>Causes an abnormal termination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not already terminated, all mutexes owned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>become unlocked/abandoned. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the current thread,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-terminate!</CODE>does not return. Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-terminate!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an unspecified value; the termination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will occur before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-terminate!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns. Subsequent attempts to join on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will cause a &#8220;terminated thread exception&#8221; to be raised.</P>
<P><CODE>thread-terminate!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is compatible with the thread cancellation procedures in the core threads API (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Threads">Threads</A>) in that if a cleanup handler has been installed for the target thread, it will be called before the thread exits and its return value (or exception, if any) will be stored for later retrieval via a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-join!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-thread_002djoin_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>thread-join!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thread [timeout [timeout-val]]</EM></DT>
<DD>
<P>Wait for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to terminate and return its exit value. When a time value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies a point in time where the waiting should be aborted. When the waiting is aborted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout-val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned if it is specified; otherwise, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>join-timeout-exception</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception is raised (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Exceptions">SRFI-18 Exceptions</A>). Exceptions may also be raised if the thread was terminated by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-terminate!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>terminated-thread-exception</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be raised) or if the thread exited by raising an exception that was handled by the top-level exception handler (<CODE>uncaught-exception</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be raised; the original exception can be retrieved using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uncaught-exception-reason</CODE>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Mutexes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Condition-variables" rel=next>SRFI-18 Condition variables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Threads" rel=prev>SRFI-18 Threads</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=up>SRFI-18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Mutexes-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.15.2 SRFI-18 Mutexes</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The behavior of Guile&#8217;s built-in mutexes is parameterized via a set of flags passed to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure in the core (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables">Mutexes and Condition Variables</A>). To satisfy the requirements for mutexes specified by SRFI-18, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure described below sets the following flags:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>recursive</CODE>: the mutex can be locked recursively</LI>
<LI><CODE>unchecked-unlock</CODE>: attempts to unlock a mutex that is already unlocked will not raise an exception</LI>
<LI><CODE>allow-external-unlock</CODE>: the mutex can be unlocked by any thread, not just the thread that locked it originally</LI></UL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dmutex-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-mutex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name]</EM></DT>
<DD>
<P>Returns a new mutex, optionally assigning it the object name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, which may be any Scheme object. The returned mutex will be created with the configuration described above. Note that the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conflicts with Guile core function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-mutex</CODE>. Applications wanting to use both of these functions will need to refer to them by different names.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dname></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DD>
<P>Returns the name assigned to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the time of its creation, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was not given a name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dspecific></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-specific</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DT><A name=index-mutex_002dspecific_002dset_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-specific-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex obj</EM></DT>
<DD>
<P>Get or set the &#8220;object-specific&#8221; property of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. In Guile&#8217;s implementation of SRFI-18, this value is stored as an object property, and will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dstate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex</EM></DT>
<DD>
<P>Returns information about the state of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>. Possible values are:</P>
<UL>
<LI>thread<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T</CODE>: the mutex is in the locked/owned state and thread T is the owner of the mutex</LI>
<LI>symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not-owned</CODE>: the mutex is in the locked/not-owned state</LI>
<LI>symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abandoned</CODE>: the mutex is in the unlocked/abandoned state</LI>
<LI>symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not-abandoned</CODE>: the mutex is in the unlocked/not-abandoned state</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dlock_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-lock!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex [timeout [thread]]</EM></DT>
<DD>
<P>Lock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>, optionally specifying a time object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>after which to abort the lock attempt and a thread<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thread</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>giving a new owner for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>different than the current thread. This procedure has the same behavior as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lock-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure in the core library.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mutex_002dunlock_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mutex-unlock!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutex [condition-variable [timeout]]</EM></DT>
<DD>
<P>Unlock<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutex</VAR>, optionally specifying a condition variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition-variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on which to wait, either indefinitely or, optionally, until the time object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timeout</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has passed, to be signalled. This procedure has the same behavior as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unlock-mutex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure in the core library.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Condition-variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Time" rel=next>SRFI-18 Time</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Mutexes" rel=prev>SRFI-18 Mutexes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=up>SRFI-18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Condition-variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.15.3 SRFI-18 Condition variables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-18 does not specify a &#8220;wait&#8221; function for condition variables. Waiting on a condition variable can be simulated using the SRFI-18<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mutex-unlock!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function described in the previous section, or Guile&#8217;s built-in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wait-condition-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure can be used.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dvariable_003f-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a condition variable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is the same procedure as the same-named built-in procedure (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mutexes-and-Condition-Variables"><CODE>condition-variable?</CODE></A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcondition_002dvariable-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-condition-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name]</EM></DT>
<DD>
<P>Returns a new condition variable, optionally assigning it the object name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, which may be any Scheme object. This procedure replaces a procedure of the same name in the core library.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dvariable_002dname></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-variable</EM></DT>
<DD>
<P>Returns the name assigned to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition-variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at the time of its creation, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was not given a name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dvariable_002dspecific></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable-specific</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-variable</EM></DT>
<DT><A name=index-condition_002dvariable_002dspecific_002dset_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable-specific-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-variable obj</EM></DT>
<DD>
<P>Get or set the &#8220;object-specific&#8221; property of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition-variable</VAR>. In Guile&#8217;s implementation of SRFI-18, this value is stored as an object property, and will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dvariable_002dsignal_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable-signal!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-variable</EM></DT>
<DT><A name=index-condition_002dvariable_002dbroadcast_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-variable-broadcast!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-variable</EM></DT>
<DD>
<P>Wake up one thread that is waiting for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition-variable</VAR>, in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition-variable-signal!</CODE>, or all threads waiting for it, in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition-variable-broadcast!</CODE>. The behavior of these procedures is equivalent to that of the procedures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal-condition-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>broadcast-condition-variable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the core library.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Exceptions" rel=next>SRFI-18 Exceptions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Condition-variables" rel=prev>SRFI-18 Condition variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=up>SRFI-18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Time-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.15.4 SRFI-18 Time</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-18 time functions manipulate time in two formats: a &#8220;time object&#8221; type that represents an absolute point in time in some implementation-specific way; and the number of seconds since some unspecified &#8220;epoch&#8221;. In Guile&#8217;s implementation, the epoch is the Unix epoch, 00:00:00 UTC, January 1, 1970.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dtime-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-time</STRONG></DT>
<DD>
<P>Return the current time as a time object. This procedure replaces the procedure of the same name in the core library, which returns the current time in seconds since the epoch.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a time object,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002d_003eseconds></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-&gt;seconds</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-seconds_002d_003etime></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>seconds-&gt;time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>seconds</EM></DT>
<DD>
<P>Convert between time objects and numerical values representing the number of seconds since the epoch. When converting from a time object to seconds, the return value is the number of seconds between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the epoch. When converting from seconds to a time object, the return value is a time object that represents a time<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seconds</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>seconds after the epoch.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Time" rel=prev>SRFI-18 Time</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=up>SRFI-18</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d18-Exceptions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.15.5 SRFI-18 Exceptions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-18 exceptions are identical to the exceptions provided by Guile&#8217;s implementation of SRFI-34. The behavior of exception handlers invoked to handle exceptions thrown from SRFI-18 functions, however, differs from the conventional behavior of SRFI-34 in that the continuation of the handler is the same as that of the call to the function. Handlers are called in a tail-recursive manner; the exceptions do not &#8220;bubble up&#8221;.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dexception_002dhandler></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-exception-handler</STRONG></DT>
<DD>
<P>Returns the current exception handler.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dexception_002dhandler></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-exception-handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handler thunk</EM></DT>
<DD>
<P>Installs<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the current exception handler and calls the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments, returning its value as the value of the exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure that accepts a single argument. The current exception handler at the time this procedure is called will be restored after the call returns.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-raise-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>raise</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Raise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an exception. This is the same procedure as the same-named procedure defined in SRFI 34.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-join_002dtimeout_002dexception_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>join-timeout-exception?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exception raised as the result of performing a timed join on a thread that does not exit within the specified timeout,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-abandoned_002dmutex_002dexception_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abandoned-mutex-exception?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exception raised as the result of attempting to lock a mutex that has been abandoned by its owner thread,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-terminated_002dthread_002dexception_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>terminated-thread-exception?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exception raised as the result of joining on a thread that exited as the result of a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-terminate!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uncaught_002dexception_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uncaught-exception?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-uncaught_002dexception_002dreason></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uncaught-exception-reason</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exc</EM></DT>
<DD>
<P><CODE>uncaught-exception?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exception thrown as the result of joining a thread that exited by raising an exception that was handled by the top-level exception handler installed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-thread</CODE>. When this occurs, the original exception is preserved as part of the exception thrown by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thread-join!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and can be accessed by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uncaught-exception-reason</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on that exception. Note that because this exception-preservation mechanism is a side-effect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-thread</CODE>, joining on threads that exited as described above but were created by other means will not raise this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uncaught-exception</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>error.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d23" rel=next>SRFI-23</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18" rel=prev>SRFI-18</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-_002d-Time_002fDate-Library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.16 SRFI-19 - Time/Date Library</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d19></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-time-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-date></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is an implementation of the SRFI-19 time/date library. The functions and variables described here are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-19))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><STRONG>Caution</STRONG>: The current code in this module incorrectly extends the Gregorian calendar leap year rule back prior to the introduction of those reforms in 1582 (or the appropriate year in various countries). The Julian calendar was used prior to 1582, and there were 10 days skipped for the reform, but the code doesn&#8217;t implement that.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This will be fixed some time. Until then calculations for 1583 onwards are correct, but prior to that any day/month/year and day of the week calculations are wrong.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Introduction">SRFI-19 Introduction</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time">SRFI-19 Time</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date">SRFI-19 Date</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time_002fDate-conversions">SRFI-19 Time/Date conversions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date-to-string">SRFI-19 Date to string</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-String-to-date">SRFI-19 String to date</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Introduction></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time" rel=next>SRFI-19 Time</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Introduction-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.1 SRFI-19 Introduction</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-universal-time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-atomic-time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-UTC></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-TAI></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This module implements time and date representations and calculations, in various time systems, including universal time (UTC) and atomic time (TAI).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For those not familiar with these time systems, TAI is based on a fixed length second derived from oscillations of certain atoms. UTC differs from TAI by an integral number of seconds, which is increased or decreased at announced times to keep UTC aligned to a mean solar day (the orbit and rotation of the earth are not quite constant).</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-leap-second></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So far, only increases in the TAI &lt;-&gt; UTC difference have been needed. Such an increase is a &#8220;leap second&#8221;, an extra second of TAI introduced at the end of a UTC day. When working entirely within UTC this is never seen, every day simply has 86400 seconds. But when converting from TAI to a UTC date, an extra 23:59:60 is present, where normally a day would end at 23:59:59. Effectively the UTC second from 23:59:59 to 00:00:00 has taken two TAI seconds.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-system-clock></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the current implementation, the system clock is assumed to be UTC, and a table of leap seconds in the code converts to TAI. See comments in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>srfi-19.scm</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for how to update this table.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-julian-day></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-modified-julian-day></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also, for those not familiar with the terminology, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Julian Day</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a real number which is a count of days and fraction of a day, in UTC, starting from -4713-01-01T12:00:00Z, ie. midday Monday 1 Jan 4713 B.C. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Modified Julian Day</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same, but starting from 1858-11-17T00:00:00Z, ie. midnight 17 November 1858 UTC. That time is julian day 2400000.5.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date" rel=next>SRFI-19 Date</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Introduction" rel=prev>SRFI-19 Introduction</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Time-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.2 SRFI-19 Time</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-time-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>object has type, seconds and nanoseconds fields representing a point in time starting from some epoch. This is an arbitrary point in time, not just a time of day. Although times are represented in nanoseconds, the actual resolution may be lower.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following variables hold the possible time types. For instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-time time-process)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would give the current CPU process time.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dutc></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc</STRONG></DT>
<DD>
<P>Universal Coordinated Time (UTC).<A name=index-UTC-1></A></P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dtai></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai</STRONG></DT>
<DD>
<P>International Atomic Time (TAI).<A name=index-TAI-1></A></P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dmonotonic></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic</STRONG></DT>
<DD>
<P>Monotonic time, meaning a monotonically increasing time starting from an unspecified epoch.</P>
<P>Note that in the current implementation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-monotonic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-tai</CODE>, and unfortunately is therefore affected by adjustments to the system clock. Perhaps this will change in the future.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dduration></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-duration</STRONG></DT>
<DD>
<P>A duration, meaning simply a difference between two times.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dprocess></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-process</STRONG></DT>
<DD>
<P>CPU time spent in the current process, starting from when the process began.<A name=index-process-time></A></P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dthread></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-thread</STRONG></DT>
<DD>
<P>CPU time spent in the current thread. Not currently implemented.<A name=index-thread-time></A></P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_003f-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a time object, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dtime></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type nanoseconds seconds</EM></DT>
<DD>
<P>Create a time object with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seconds</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nanoseconds</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dtype></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dnanosecond></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-nanosecond</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dsecond></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-second</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-set_002dtime_002dtype_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-time-type!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time type</EM></DT>
<DT><A name=index-set_002dtime_002dnanosecond_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-time-nanosecond!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time nsec</EM></DT>
<DT><A name=index-set_002dtime_002dsecond_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-time-second!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time sec</EM></DT>
<DD>
<P>Get or set the type, seconds or nanoseconds fields of a time object.</P>
<P><CODE>set-time-type!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>merely changes the field, it doesn&#8217;t convert the time value. For conversions, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time_002fDate-conversions">SRFI-19 Time/Date conversions</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002dtime></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DD>
<P>Return a new time object, which is a copy of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dtime-2></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[type]</EM></DT>
<DD>
<P>Return the current time of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-utc</CODE>.</P>
<P>Note that the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conflicts with the Guile core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>) as well as the SRFI-18<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Time">SRFI-18 Time</A>). Applications wanting to use more than one of these functions will need to refer to them by different names.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dresolution></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-resolution</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[type]</EM></DT>
<DD>
<P>Return the resolution, in nanoseconds, of the given time<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-utc</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_003c_003d_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DT><A name=index-time_003c_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DT><A name=index-time_003d_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DT><A name=index-time_003e_003d_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DT><A name=index-time_003e_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the respective relation between time objects<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the same time type.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002ddifference></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DT><A name=index-time_002ddifference_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-difference!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>t1 t2</EM></DT>
<DD>
<P>Return a time object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-duration</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>representing the period between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the same time type.</P>
<P><CODE>time-difference</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a new time object,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-difference!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>t1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form its return.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dduration></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-duration</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time duration</EM></DT>
<DT><A name=index-add_002dduration_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-duration!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time duration</EM></DT>
<DT><A name=index-subtract_002dduration></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>subtract-duration</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time duration</EM></DT>
<DT><A name=index-subtract_002dduration_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>subtract-duration!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time duration</EM></DT>
<DD>
<P>Return a time object which is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>duration</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>added or subtracted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>duration</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a time object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-duration</CODE>.</P>
<P><CODE>add-duration</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>subtract-duration</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return a new time object.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-duration!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>subtract-duration!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form their return.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Date></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time_002fDate-conversions" rel=next>SRFI-19 Time/Date conversions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time" rel=prev>SRFI-19 Time</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Date-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.3 SRFI-19 Date</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-date-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>object represents a date in the Gregorian calendar and a time of day on that date in some timezone.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The fields are year, month, day, hour, minute, second, nanoseconds and timezone. A date object is immutable, its fields can be read but they cannot be modified once the object is created.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a date object, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002ddate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nsecs seconds minutes hours date month year zone-offset</EM></DT>
<DD>
<P>Create a new date object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dnanosecond></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-nanosecond</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Nanoseconds, 0 to 999999999.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dsecond></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-second</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Seconds, 0 to 59, or 60 for a leap second. 60 is never seen when working entirely within UTC, it&#8217;s only when converting to or from TAI.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dminute></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-minute</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Minutes, 0 to 59.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dhour></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-hour</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Hour, 0 to 23.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Day of the month, 1 to 31 (or less, according to the month).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dmonth></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-month</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Month, 1 to 12.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dyear></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-year</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Year, eg. 2003. Dates B.C. are negative, eg.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-46</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 46 B.C. There is no year 0, year<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-1</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is followed by year 1.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dzone_002doffset></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-zone-offset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Time zone, an integer number of seconds east of Greenwich.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dyear_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-year-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Day of the year, starting from 1 for 1st January.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dweek_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-week-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DD>
<P>Day of the week, starting from 0 for Sunday.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002dweek_002dnumber></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-week-number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date dstartw</EM></DT>
<DD>
<P>Week of the year, ignoring a first partial week.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dstartw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the day of the week which is taken to start a week, 0 for Sunday, 1 for Monday, etc.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002ddate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[tz-offset]</EM></DT>
<DD>
<P>Return a date object representing the current date/time, in UTC offset by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tz-offset</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tz-offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is seconds east of Greenwich and defaults to the local timezone.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002djulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-julian-day</STRONG></DT>
<DD><A name=index-julian-day-1></A>
<P>Return the current Julian Day.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dmodified_002djulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-modified-julian-day</STRONG></DT>
<DD><A name=index-modified-julian-day-1></A>
<P>Return the current Modified Julian Day.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Time_002fDate-conversions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date-to-string" rel=next>SRFI-19 Date to string</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date" rel=prev>SRFI-19 Date</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Time_002fDate-conversions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.4 SRFI-19 Time/Date conversions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-time-conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-date-conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002d_003ejulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DT><A name=index-date_002d_003emodified_002djulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;modified-julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DT><A name=index-date_002d_003etime_002dmonotonic></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;time-monotonic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DT><A name=index-date_002d_003etime_002dtai></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;time-tai</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT>
<DT><A name=index-date_002d_003etime_002dutc></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;time-utc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date</EM></DT></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-julian_002dday_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>julian-day-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn [tz-offset]</EM></DT>
<DT><A name=index-julian_002dday_002d_003etime_002dmonotonic></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>julian-day-&gt;time-monotonic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT>
<DT><A name=index-julian_002dday_002d_003etime_002dtai></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>julian-day-&gt;time-tai</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT>
<DT><A name=index-julian_002dday_002d_003etime_002dutc></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>julian-day-&gt;time-utc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-modified_002djulian_002dday_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modified-julian-day-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn [tz-offset]</EM></DT>
<DT><A name=index-modified_002djulian_002dday_002d_003etime_002dmonotonic></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modified-julian-day-&gt;time-monotonic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT>
<DT><A name=index-modified_002djulian_002dday_002d_003etime_002dtai></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modified-julian-day-&gt;time-tai</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT>
<DT><A name=index-modified_002djulian_002dday_002d_003etime_002dutc></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modified-julian-day-&gt;time-utc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>jdn</EM></DT></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dmonotonic_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time [tz-offset]</EM></DT>
<DT><A name=index-time_002dmonotonic_002d_003etime_002dtai></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic-&gt;time-tai</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dmonotonic_002d_003etime_002dtai_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic-&gt;time-tai!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dmonotonic_002d_003etime_002dutc></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic-&gt;time-utc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dmonotonic_002d_003etime_002dutc_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-monotonic-&gt;time-utc!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dtai_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time [tz-offset]</EM></DT>
<DT><A name=index-time_002dtai_002d_003ejulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dtai_002d_003emodified_002djulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;modified-julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dtai_002d_003etime_002dmonotonic></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;time-monotonic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dtai_002d_003etime_002dmonotonic_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;time-monotonic!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dtai_002d_003etime_002dutc></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;time-utc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dtai_002d_003etime_002dutc_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-tai-&gt;time-utc!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-time_002dutc_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time [tz-offset]</EM></DT>
<DT><A name=index-time_002dutc_002d_003ejulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dutc_002d_003emodified_002djulian_002dday></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;modified-julian-day</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dutc_002d_003etime_002dmonotonic></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;time-monotonic</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dutc_002d_003etime_002dmonotonic_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;time-monotonic!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dutc_002d_003etime_002dtai></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;time-tai</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-time_002dutc_002d_003etime_002dtai_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>time-utc-&gt;time-tai!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DD><BR>
<P>Convert between dates, times and days of the respective types. For instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-tai-&gt;time-utc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-tai</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns an object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time-utc</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variants may modify their<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to form their return. The plain functions create a new object.</P>
<P>For conversions to dates,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tz-offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is seconds east of Greenwich. The default is the local timezone, at the given time, as provided by the system, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localtime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>).</P>
<P>On 32-bit systems,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localtime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is limited to a 32-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>time_t</CODE>, so a default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tz-offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only available for times between Dec 1901 and Jan 2038. For prior dates an application might like to use the value in 1902, though some locations have zone changes prior to that. For future dates an application might like to assume today&#8217;s rules extend indefinitely. But for correct daylight savings transitions it will be necessary to take an offset for the same day and time but a year in range and which has the same starting weekday and same leap/non-leap (to support rules like last Sunday in October).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Date-to-string></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-String-to-date" rel=next>SRFI-19 String to date</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Time_002fDate-conversions" rel=prev>SRFI-19 Time/Date conversions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-Date-to-string-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.5 SRFI-19 Date to string</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-date-to-string></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002c-from-date></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date_002d_003estring></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>date [format]</EM></DT>
<DD>
<P>Convert a date to a string under the control of a format.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a string containing &#8216;<SAMP>~</SAMP>&#8217; escapes, which will be expanded as per the following conversion table. The default<VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP>~c</SAMP>&#8217;, a locale-dependent date and time.</P>
<P>Many of these conversion characters are the same as POSIX<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>), but there are some extras and some variations.</P>
<TABLE>
<TBODY>
<TR>
<TD><CODE>~~</CODE></TD>
<TD>literal ~</TD></TR>
<TR>
<TD><CODE>~a</CODE></TD>
<TD>locale abbreviated weekday, eg. &#8216;<SAMP>Sun</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~A</CODE></TD>
<TD>locale full weekday, eg. &#8216;<SAMP>Sunday</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~b</CODE></TD>
<TD>locale abbreviated month, eg. &#8216;<SAMP>Jan</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~B</CODE></TD>
<TD>locale full month, eg. &#8216;<SAMP>January</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~c</CODE></TD>
<TD>locale date and time, eg.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>&#8216;<SAMP>Fri Jul 14 20:28:42-0400 2000</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~d</CODE></TD>
<TD>day of month, zero padded, &#8216;<SAMP>01</SAMP>&#8217; to &#8216;<SAMP>31</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~e</CODE></TD>
<TD>day of month, blank padded, &#8216;<SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>1</SAMP>&#8217; to &#8216;<SAMP>31</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~f</CODE></TD>
<TD>seconds and fractional seconds, with locale decimal point, eg. &#8216;<SAMP>5.2</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~h</CODE></TD>
<TD>same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~b</CODE></TD></TR>
<TR>
<TD><CODE>~H</CODE></TD>
<TD>hour, 24-hour clock, zero padded, &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>23</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~I</CODE></TD>
<TD>hour, 12-hour clock, zero padded, &#8216;<SAMP>01</SAMP>&#8217; to &#8216;<SAMP>12</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~j</CODE></TD>
<TD>day of year, zero padded, &#8216;<SAMP>001</SAMP>&#8217; to &#8216;<SAMP>366</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~k</CODE></TD>
<TD>hour, 24-hour clock, blank padded, &#8216;<SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>0</SAMP>&#8217; to &#8216;<SAMP>23</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~l</CODE></TD>
<TD>hour, 12-hour clock, blank padded, &#8216;<SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>1</SAMP>&#8217; to &#8216;<SAMP>12</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~m</CODE></TD>
<TD>month, zero padded, &#8216;<SAMP>01</SAMP>&#8217; to &#8216;<SAMP>12</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~M</CODE></TD>
<TD>minute, zero padded, &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>59</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~n</CODE></TD>
<TD>newline</TD></TR>
<TR>
<TD><CODE>~N</CODE></TD>
<TD>nanosecond, zero padded, &#8216;<SAMP>000000000</SAMP>&#8217; to &#8216;<SAMP>999999999</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~p</CODE></TD>
<TD>locale AM or PM</TD></TR>
<TR>
<TD><CODE>~r</CODE></TD>
<TD>time, 12 hour clock, &#8216;<SAMP>~I:~M:~S ~p</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~s</CODE></TD>
<TD>number of full seconds since &#8220;the epoch&#8221; in UTC</TD></TR>
<TR>
<TD><CODE>~S</CODE></TD>
<TD>second, zero padded &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>60</SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>(usual limit is 59, 60 is a leap second)</TD></TR>
<TR>
<TD><CODE>~t</CODE></TD>
<TD>horizontal tab character</TD></TR>
<TR>
<TD><CODE>~T</CODE></TD>
<TD>time, 24 hour clock, &#8216;<SAMP>~H:~M:~S</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~U</CODE></TD>
<TD>week of year, Sunday first day of week, &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>52</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~V</CODE></TD>
<TD>week of year, Monday first day of week, &#8216;<SAMP>01</SAMP>&#8217; to &#8216;<SAMP>53</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~w</CODE></TD>
<TD>day of week, 0 for Sunday, &#8216;<SAMP>0</SAMP>&#8217; to &#8216;<SAMP>6</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~W</CODE></TD>
<TD>week of year, Monday first day of week, &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>52</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~y</CODE></TD>
<TD>year, two digits, &#8216;<SAMP>00</SAMP>&#8217; to &#8216;<SAMP>99</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~Y</CODE></TD>
<TD>year, full, eg. &#8216;<SAMP>2003</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~z</CODE></TD>
<TD>time zone, RFC-822 style</TD></TR>
<TR>
<TD><CODE>~Z</CODE></TD>
<TD>time zone symbol (not currently implemented)</TD></TR>
<TR>
<TD><CODE>~1</CODE></TD>
<TD>ISO-8601 date, &#8216;<SAMP>~Y-~m-~d</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~2</CODE></TD>
<TD>ISO-8601 time+zone, &#8216;<SAMP>~H:~M:~S~z</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~3</CODE></TD>
<TD>ISO-8601 time, &#8216;<SAMP>~H:~M:~S</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~4</CODE></TD>
<TD>ISO-8601 date/time+zone, &#8216;<SAMP>~Y-~m-~dT~H:~M:~S~z</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~5</CODE></TD>
<TD>ISO-8601 date/time, &#8216;<SAMP>~Y-~m-~dT~H:~M:~S</SAMP>&#8217;</TD></TR></TBODY></TABLE></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conversions &#8216;<SAMP>~D</SAMP>&#8217;, &#8216;<SAMP>~x</SAMP>&#8217; and &#8216;<SAMP>~X</SAMP>&#8217; are not currently described here, since the specification and reference implementation differ.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conversion is locale-dependent on systems that support it (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Locale-Information">Accessing Locale Information</A>). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales"><CODE>setlocale</CODE></A>, for information on how to change the current locale.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-String-to-date></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19-Date-to-string" rel=prev>SRFI-19 Date to string</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=up>SRFI-19</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d19-String-to-date-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.16.6 SRFI-19 String to date</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string-to-date></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-date_002c-from-string></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003edate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>input template</EM></DT>
<DD>
<P>Convert an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>input</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string to a date under the control of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>template</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string. Return a newly created date object.</P>
<P>Literal characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>template</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must match characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>input</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and &#8216;<SAMP>~</SAMP>&#8217; escapes must match the input forms described in the table below. &#8220;Skip to&#8221; means characters up to one of the given type are ignored, or &#8220;no skip&#8221; for no skipping. &#8220;Read&#8221; is what&#8217;s then read, and &#8220;Set&#8221; is the field affected in the date object.</P>
<P>For example &#8216;<SAMP>~Y</SAMP>&#8217; skips input characters until a digit is reached, at which point it expects a year and stores that to the year field of the date.</P>
<TABLE>
<TBODY>
<TR>
<TD></TD>
<TD>Skip to</TD>
<TD>Read</TD>
<TD>Set</TD></TR>
<TR>
<TD><CODE>~~</CODE></TD>
<TD>no skip</TD>
<TD>literal ~</TD>
<TD>nothing</TD></TR>
<TR>
<TD><CODE>~a</CODE></TD>
<TD><CODE>char-alphabetic?</CODE></TD>
<TD>locale abbreviated weekday name</TD>
<TD>nothing</TD></TR>
<TR>
<TD><CODE>~A</CODE></TD>
<TD><CODE>char-alphabetic?</CODE></TD>
<TD>locale full weekday name</TD>
<TD>nothing</TD></TR>
<TR>
<TD><CODE>~b</CODE></TD>
<TD><CODE>char-alphabetic?</CODE></TD>
<TD>locale abbreviated month name</TD>
<TD><CODE>date-month</CODE></TD></TR>
<TR>
<TD><CODE>~B</CODE></TD>
<TD><CODE>char-alphabetic?</CODE></TD>
<TD>locale full month name</TD>
<TD><CODE>date-month</CODE></TD></TR>
<TR>
<TD><CODE>~d</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>day of month</TD>
<TD><CODE>date-day</CODE></TD></TR>
<TR>
<TD><CODE>~e</CODE></TD>
<TD>no skip</TD>
<TD>day of month, blank padded</TD>
<TD><CODE>date-day</CODE></TD></TR>
<TR>
<TD><CODE>~h</CODE></TD>
<TD>same as &#8216;<SAMP>~b</SAMP>&#8217;</TD></TR>
<TR>
<TD><CODE>~H</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>hour</TD>
<TD><CODE>date-hour</CODE></TD></TR>
<TR>
<TD><CODE>~k</CODE></TD>
<TD>no skip</TD>
<TD>hour, blank padded</TD>
<TD><CODE>date-hour</CODE></TD></TR>
<TR>
<TD><CODE>~m</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>month</TD>
<TD><CODE>date-month</CODE></TD></TR>
<TR>
<TD><CODE>~M</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>minute</TD>
<TD><CODE>date-minute</CODE></TD></TR>
<TR>
<TD><CODE>~S</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>second</TD>
<TD><CODE>date-second</CODE></TD></TR>
<TR>
<TD><CODE>~y</CODE></TD>
<TD>no skip</TD>
<TD>2-digit year</TD>
<TD><CODE>date-year</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>within 50 years</TD></TR>
<TR>
<TD><CODE>~Y</CODE></TD>
<TD><CODE>char-numeric?</CODE></TD>
<TD>year</TD>
<TD><CODE>date-year</CODE></TD></TR>
<TR>
<TD><CODE>~z</CODE></TD>
<TD>no skip</TD>
<TD>time zone</TD>
<TD>date-zone-offset</TD></TR></TBODY></TABLE>
<P>Notice that the weekday matching forms don&#8217;t affect the date object returned, instead the weekday will be derived from the day, month and year.</P>
<P>Conversion is locale-dependent on systems that support it (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Locale-Information">Accessing Locale Information</A>). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales"><CODE>setlocale</CODE></A>, for information on how to change the current locale.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d23></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d26" rel=next>SRFI-26</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19" rel=prev>SRFI-19</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d23-_002d-Error-Reporting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.17 SRFI-23 - Error Reporting</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d23></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-23<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is always available.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d26></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27" rel=next>SRFI-27</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d23" rel=prev>SRFI-23</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d26-_002d-specializing-parameters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.18 SRFI-26 - specializing parameters</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d26></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-parameter-specialize></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-argument-specialize></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-specialize-parameter></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI provides a syntax for conveniently specializing selected parameters of a function. It can be used with,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-26))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cut></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cut</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot1 slot2 &#8230;</EM></DT>
<DT><A name=index-cute></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cute</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>slot1 slot2 &#8230;</EM></DT>
<DD>
<P>Return a new procedure which will make a call (<VAR>slot1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;) but with selected parameters specialized to given expressions.</P>
<P>An example will illustrate the idea. The following is a specialization of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, sending output to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-output-port</CODE>,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(cut write &lt;&gt; my-output-port)
&#8658;
(lambda (obj) (write obj my-output-port))
</PRE></DIV>
<P>The special symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates a slot to be filled by an argument to the new procedure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the other hand is an expression to be evaluated and passed, ie. it specializes the behaviour of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.</P>
<DL compact>
<DT><CODE>&lt;&gt;</CODE></DT>
<DD>
<P>A slot to be filled by an argument from the created procedure. Arguments are assigned to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slots in the order they appear in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, there&#8217;s no way to re-arrange arguments.</P>
<P>The first argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is usually a procedure (or expression giving a procedure), but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is allowed there too. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(cut &lt;&gt; 1 2 3)
&#8658;
(lambda (proc) (proc 1 2 3))
</PRE></DIV></DD>
<DT><CODE>&lt;...&gt;</CODE></DT>
<DD>
<P>A slot to be filled by all remaining arguments from the new procedure. This can only occur at the end of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P>For example, a procedure taking a variable number of arguments like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>max</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but in addition enforcing a lower bound,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define my-lower-bound 123)

(cut max my-lower-bound &lt;...&gt;)
&#8658;
(lambda arglist (apply max my-lower-bound arglist))
</PRE></DIV></DD></DL>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the specializing expressions are evaluated each time the new procedure is called. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cute</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>they&#8217;re evaluated just once, when the new procedure is created. The name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cute</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stands for &#8220;<CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with evaluated arguments&#8221;. In all cases the evaluations take place in an unspecified order.</P>
<P>The following illustrates the difference between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cute</CODE>,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(cut format &lt;&gt; "the time is ~s" (current-time))
&#8658;
(lambda (port) (format port "the time is ~s" (current-time)))

(cute format &lt;&gt; "the time is ~s" (current-time))
&#8658;
(let ((val (current-time)))
  (lambda (port) (format port "the time is ~s" val))
</PRE></DIV>
<P>(There&#8217;s no provision for a mixture of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cute</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where some expressions would be evaluated every time but others evaluated only once.)</P>
<P><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is really just a shorthand for the sort of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms shown in the above examples. But notice<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cut</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>avoids the need to name unspecialized parameters, and is more compact. Use in functional programming style or just with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or similar is typical.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(map (cut * 2 &lt;&gt;) '(1 2 3 4))         

(for-each (cut write &lt;&gt; my-port) my-list)  
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d27></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d30" rel=next>SRFI-30</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d26" rel=prev>SRFI-26</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d27-_002d-Sources-of-Random-Bits></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.19 SRFI-27 - Sources of Random Bits</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d27></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This subsection is based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-27/srfi-27.html">specification of SRFI-27</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>written by Sebastian Egner.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI provides access to a (pseudo) random number generator; for Guile&#8217;s built-in random number facilities, which SRFI-27 is implemented upon, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Random">Random</A>. With SRFI-27, random numbers are obtained from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>random source</EM>, which encapsulates a random number generation algorithm and its state.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Default-Random-Source">SRFI-27 Default Random Source</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Obtaining random numbers</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Sources">SRFI-27 Random Sources</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Creating and manipulating random sources</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Number-Generators">SRFI-27 Random Number Generators</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Obtaining random number generators</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d27-Default-Random-Source></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Sources" rel=next>SRFI-27 Random Sources</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27" rel=up>SRFI-27</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Default-Random-Source></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.19.1 The Default Random Source</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d27-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dinteger></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Return a random number between zero (inclusive) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive), using the default random source. The numbers returned have a uniform distribution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dreal></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-real</STRONG></DT>
<DD>
<P>Return a random number in (0,1), using the default random source. The numbers returned have a uniform distribution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-default_002drandom_002dsource></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>default-random-source</STRONG></DT>
<DD>
<P>A random source from which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-real</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have been derived using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-source-make-integers</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-source-make-reals</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Number-Generators">SRFI-27 Random Number Generators</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for those procedures). Note that an assignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default-random-source</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not change<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-real</CODE>; it is also strongly recommended not to assign a new value.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d27-Random-Sources></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Number-Generators" rel=next>SRFI-27 Random Number Generators</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Default-Random-Source" rel=prev>SRFI-27 Default Random Source</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27" rel=up>SRFI-27</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Random-Sources></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.19.2 Random Sources</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d27-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drandom_002dsource></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-random-source</STRONG></DT>
<DD>
<P>Create a new random source. The stream of random numbers obtained from each random source created by this procedure will be identical, unless its state is changed by one of the procedures below.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DD>
<P>Tests whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a random source. Random sources are a disjoint type.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_002drandomize_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-randomize!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source</EM></DT>
<DD>
<P>Attempt to set the state of the random source to a truly random value. The current implementation uses a seed based on the current system time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_002dpseudo_002drandomize_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-pseudo-randomize!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source i j</EM></DT>
<DD>
<P>Changes the state of the random source s into the initial state of the (<VAR>i</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR>)-th independent random source, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are non-negative integers. This procedure provides a mechanism to obtain a large number of independent random sources (usually all derived from the same backbone generator), indexed by two integers. In contrast to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-source-randomize!</CODE>, this procedure is entirely deterministic.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The state associated with a random state can be obtained an reinstated with the following procedures:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_002dstate_002dref></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-state-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source</EM></DT>
<DT><A name=index-random_002dsource_002dstate_002dset_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-state-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source state</EM></DT>
<DD>
<P>Get and set the state of a random source. No assumptions should be made about the nature of the state object, besides it having an external representation (i.e. it can be passed to<CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and subsequently<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>back).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d27-Random-Number-Generators></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27-Random-Sources" rel=prev>SRFI-27 Random Sources</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27" rel=up>SRFI-27</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Obtaining-random-number-generator-procedures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.19.3 Obtaining random number generator procedures</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d27-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_002dmake_002dintegers></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-make-integers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source</EM></DT>
<DD>
<P>Obtains a procedure to generate random integers using the random source<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>. The returned procedure takes a single argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, which must be a positive integer, and returns the next uniformly distributed random integer from the interval {0, ...,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-1} by advancing the state of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>.</P>
<P>If an application obtains and uses several generators for the same random source<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>, a call to any of these generators advances the state of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>. Hence, the generators do not produce the same sequence of random integers each but rather share a state. This also holds for all other types of generators derived from a fixed random sources.</P>
<P>While the SRFI text specifies that &#8220;Implementations that support concurrency make sure that the state of a generator is properly advanced&#8221;, this is currently not the case in Guile&#8217;s implementation of SRFI-27, as it would cause a severe performance penalty. So in multi-threaded programs, you either must perform locking on random sources shared between threads yourself, or use different random sources for multiple threads.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dsource_002dmake_002dreals></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-make-reals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source</EM></DT>
<DT><A name=index-random_002dsource_002dmake_002dreals-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-source-make-reals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source unit</EM></DT>
<DD>
<P>Obtains a procedure to generate random real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0 &lt; x &lt; 1</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>using the random source<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>. The procedure rand is called without arguments.</P>
<P>The optional parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines the type of numbers being produced by the returned procedure and the quantization of the output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a number such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0 &lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; 1</EM>. The numbers created by the returned procedure are of the same numerical type as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the potential output values are spaced by at most<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR>. One can imagine rand to create numbers as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>*<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a random integer in {1, ..., floor(1/unit)-1}. Note, however, that this need not be the way the values are actually created and that the actual resolution of rand can be much higher than unit. In case<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is absent it defaults to a reasonably small value (related to the width of the mantissa of an efficient number format).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d30></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d31" rel=next>SRFI-31</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d27" rel=prev>SRFI-27</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d30-_002d-Nested-Multi_002dline-Comments></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.20 SRFI-30 - Nested Multi-line Comments</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d30></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Starting from version 2.0, Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports SRFI-30/R6RS nested multi-line comments by default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Block-Comments">Block Comments</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d31></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d34" rel=next>SRFI-34</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d30" rel=prev>SRFI-30</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d31-_002d-A-special-form-_0060rec_0027-for-recursive-evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.21 SRFI-31 - A special form &#8216;rec&#8217; for recursive evaluation</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d31></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-recursive-expression></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-rec></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-31 defines a special form that can be used to create self-referential expressions more conveniently. The syntax is as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>&lt;rec expression&gt; --&gt; (rec &lt;variable&gt; &lt;expression&gt;)
&lt;rec expression&gt; --&gt; (rec (&lt;variable&gt;+) &lt;body&gt;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first syntax can be used to create self-referential expressions, for example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  guile&gt; (define tmp (rec ones (cons 1 (delay ones))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second syntax can be used to create anonymous recursive functions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  guile&gt; (define tmp (rec (display-n item n)
                       (if (positive? n)
                           (begin (display n) (display-n (- n 1))))))
  guile&gt; (tmp 42 3)
  424242
  guile&gt;
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d34></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d35" rel=next>SRFI-35</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d31" rel=prev>SRFI-31</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d34-_002d-Exception-handling-for-programs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.22 SRFI-34 - Exception handling for programs</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d34></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides an implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-34/srfi-34.html">SRFI-34&#8217;s exception handling mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an alternative to its own built-in mechanisms (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions">Exceptions</A>). It can be made available as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (srfi srfi-34))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d35></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d37" rel=next>SRFI-37</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d34" rel=prev>SRFI-34</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d35-_002d-Conditions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.23 SRFI-35 - Conditions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d35></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-conditions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://srfi.schemers.org/srfi-35/srfi-35.html">SRFI-35</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>implements<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>conditions</EM>, a data structure akin to records designed to convey information about exceptional conditions between parts of a program. It is normally used in conjunction with SRFI-34&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(raise (condition (&amp;message
                    (message "An error occurred"))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Users can define<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition types</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing arbitrary information. Condition types may inherit from one another. This allows the part of the program that handles (or &#8220;catches&#8221;) conditions to get accurate information about the exceptional condition that arose.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-35 conditions are made available using:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (srfi srfi-35))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures available to manipulate condition types are the following:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcondition_002dtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-condition-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id parent field-names</EM></DT>
<DD>
<P>Return a new condition type named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR>, inheriting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent</VAR>, and with the fields whose names are listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a list of symbols and must not contain names already used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or one of its supertypes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dtype_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-type?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a condition type.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conditions can be created and accessed with the following procedures:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type . field+value</EM></DT>
<DD>
<P>Return a new condition of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with fields initialized as specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field+value</VAR>, a sequence of field names (symbols) and values as in the following example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let ((&amp;ct (make-condition-type 'foo &amp;condition '(a b c))))
  (make-condition &amp;ct 'a 1 'b 2 'c 3))
</PRE></DIV>
<P>Note that all fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and its supertypes must be specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcompound_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-compound-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition1 condition2 &#8230;</EM></DT>
<DD>
<P>Return a new compound condition composed of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>. The returned condition has the type of each condition of condition1 condition2 &#8230; (per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition-has-type?</CODE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dhas_002dtype_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-has-type?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c type</EM></DT>
<DD>
<P>Return true if condition<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c field-name</EM></DT>
<DD>
<P>Return the value of the field named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from condition<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a compound condition and several underlying condition types contain a field named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR>, then the value of the first such field is returned, using the order in which conditions were passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-compound-condition</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-extract_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>extract-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c type</EM></DT>
<DD>
<P>Return a condition of condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the field values specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a compound condition, extract the field values from the subcondition belonging to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that appeared first in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-compound-condition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the condition.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Convenience macros are also available to create condition types and conditions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dcondition_002dtype></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-condition-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type supertype predicate field-spec...</EM></DT>
<DD>
<P>Define a new condition type named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supertype</VAR>. In addition, bind<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>predicate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a type predicate that returns true when passed a condition of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or any of its subtypes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(field accessor)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a procedure to access field<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in conditions of type<VAR>type</VAR>.</P>
<P>The example below defines condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;foo</CODE>, inheriting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;condition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with fields<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-condition-type &amp;foo &amp;condition
  foo-condition?
  (a  foo-a)
  (b  foo-b)
  (c  foo-c))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type-field-binding1 type-field-binding2 &#8230;</EM></DT>
<DD>
<P>Return a new condition or compound condition, initialized according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type-field-binding1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type-field-binding2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type-field-binding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(type field-specs...)</CODE>, where<VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a variable bound to a condition type; each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(field-name value)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol denoting the field being initialized to<VAR>value</VAR>. As for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-condition</CODE>, all fields must be specified.</P>
<P>The following example returns a simple condition:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(condition (&amp;message (message "An error occurred")))
</PRE></DIV>
<P>The one below returns a compound condition:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(condition (&amp;message (message "An error occurred"))
           (&amp;serious))
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, SRFI-35 defines a several standard condition types.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026condition-1></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;condition</STRONG></DT>
<DD>
<P>This condition type is the root of all condition types. It has no fields.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026message-1></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;message</STRONG></DT>
<DD>
<P>A condition type that carries a message describing the nature of the condition to humans.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-message_002dcondition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>message-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or one of its subtypes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dmessage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-message</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c</EM></DT>
<DD>
<P>Return the message associated with message condition<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026serious-1></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;serious</STRONG></DT>
<DD>
<P>This type describes conditions serious enough that they cannot safely be ignored. It has no fields.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-serious_002dcondition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>serious-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;serious</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or one of its subtypes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026error-1></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;error</STRONG></DT>
<DD>
<P>This condition describes errors, typically caused by something that has gone wrong in the interaction of the program with the external world or the user.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-error_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or one of its subtypes.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d37></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d38" rel=next>SRFI-38</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d35" rel=prev>SRFI-35</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d37-_002d-args_002dfold></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.24 SRFI-37 - args-fold</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d37></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is a processor for GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt_long</CODE>-style program arguments. It provides an alternative, less declarative interface than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 getopt-long)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#getopt_002dlong">The (ice-9 getopt-long) Module</A>). Unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt-long</CODE>, it supports repeated options and any number of short and long names per option. Access it with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (srfi srfi-37))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><ACRONYM>SRFI</ACRONYM>-37 principally provides an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>args-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. To use the library, create a set of options with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and use it as a specification for invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>args-fold</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example of a simple argument processor for the typical &#8216;<SAMP>--version</SAMP>&#8217; and &#8216;<SAMP>--help</SAMP>&#8217; options, which returns a backwards list of files given on the command line:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(args-fold (cdr (program-arguments))
           (let ((display-and-exit-proc
                  (lambda (msg)
                    (lambda (opt name arg loads)
                      (display msg) (quit)))))
             (list (option '(#\v "version") #f #f
                           (display-and-exit-proc "Foo version 42.0\n"))
                   (option '(#\h "help") #f #f
                           (display-and-exit-proc
                            "Usage: foo scheme-file ..."))))
           (lambda (opt name arg loads)
             (error "Unrecognized option `~A'" name))
           (lambda (op loads) (cons op loads))
           '())
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-option-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>names required-arg? optional-arg? processor</EM></DT>
<DD>
<P>Return an object that specifies a single kind of program option.</P>
<P><VAR>names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of command-line option names, and should consist of characters for traditional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>short options and strings for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getopt_long</CODE>-style long options.</P>
<P><VAR>required-arg?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optional-arg?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are mutually exclusive; one or both must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>required-arg?</VAR>, the option must be followed by an argument on the command line, such as &#8216;<SAMP>--opt=value</SAMP>&#8217; for long options, or an error will be signalled. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optional-arg?</VAR>, an argument will be taken if available.</P>
<P><VAR>processor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure that takes at least 3 arguments, called when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>args-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>encounters the option: the containing option object, the name used on the command line, and the argument given for the option (or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if none). The rest of the arguments are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>args-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8220;seeds&#8221;, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>processor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return seeds as well.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-option_002dnames></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option-names</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>opt</EM></DT>
<DT><A name=index-option_002drequired_002darg_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option-required-arg?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>opt</EM></DT>
<DT><A name=index-option_002doptional_002darg_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option-optional-arg?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>opt</EM></DT>
<DT><A name=index-option_002dprocessor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>option-processor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>opt</EM></DT>
<DD>
<P>Return the specified field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt</VAR>, an option object, as described above for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>option</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-args_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>args-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>args options unrecognized-option-proc operand-proc seed &#8230;</EM></DT>
<DD>
<P>Process<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>, a list of program arguments such as that returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(cdr (program-arguments))</CODE>, in order against<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR>, a list of option objects as described above. All functions called take the &#8220;seeds&#8221;, or the last multiple-values as multiple arguments, starting with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, and must return the new seeds. Return the final seeds.</P>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unrecognized-option-proc</CODE>, which is like an option object&#8217;s processor, for any options not found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR>.</P>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>operand-proc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with any items on the command line that are not named options. This includes arguments after &#8216;<SAMP>--</SAMP>&#8217;. It is called with the argument in question, as well as the seeds.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d38></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d39" rel=next>SRFI-39</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d37" rel=prev>SRFI-37</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d38-_002d-External-Representation-for-Data-With-Shared-Structure></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.25 SRFI-38 - External Representation for Data With Shared Structure</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d38></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This subsection is based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-38/srfi-38.html">the specification of SRFI-38</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>written by Ray Dillinger.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI creates an alternative external representation for data written and read using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-with-shared-structure</CODE>. It is identical to the grammar for external representation for data written and read with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>given in section 7 of R5RS, except that the single production</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>&lt;datum&gt; --&gt; &lt;simple datum&gt; | &lt;compound datum&gt; 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is replaced by the following five productions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>&lt;datum&gt; --&gt; &lt;defining datum&gt; | &lt;nondefining datum&gt; | &lt;defined datum&gt;
&lt;defining datum&gt; --&gt;  #&lt;indexnum&gt;=&lt;nondefining datum&gt;
&lt;defined datum&gt; --&gt; #&lt;indexnum&gt;#
&lt;nondefining datum&gt; --&gt; &lt;simple datum&gt; | &lt;compound datum&gt; 
&lt;indexnum&gt; --&gt; &lt;digit 10&gt;+
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dwith_002dshared_002dstructure></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-with-shared-structure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-write_002dwith_002dshared_002dstructure-1></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-with-shared-structure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj port</EM></DT>
<DT><A name=index-write_002dwith_002dshared_002dstructure-2></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-with-shared-structure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj port optarg</EM></DT>
<DD>
<P>Writes an external representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the given port. Strings that appear in the written representation are enclosed in doublequotes, and within those strings backslash and doublequote characters are escaped by backslashes. Character objects are written using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>notation.</P>
<P>Objects which denote locations rather than values (cons cells, vectors, and non-zero-length strings in R5RS scheme; also Guile&#8217;s structs, bytevectors and ports and hash-tables), if they appear at more than one point in the data being written, are preceded by &#8216;<SAMP>#<VAR>N</VAR>=</SAMP>&#8217; the first time they are written and replaced by &#8216;<SAMP>#<VAR>N</VAR>#</SAMP>&#8217; all subsequent times they are written, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a natural number used to identify that particular object. If objects which denote locations occur only once in the structure, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must produce the same external representation for those objects as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.</P>
<P><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>terminates in finite time and produces a finite representation when writing finite data.</P>
<P><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an unspecified value. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument may be omitted, in which case it defaults to the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-output-port)</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optarg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument may also be omitted. If present, its effects on the output and return value are unspecified but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must still write a representation that can be read by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-with-shared-structure</CODE>. Some implementations may wish to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optarg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to specify formatting conventions, numeric radixes, or return values. Guile&#8217;s implementation ignores<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optarg</VAR>.</P>
<P>For example, the code</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(begin (define a (cons 'val1 'val2))
       (set-cdr! a a)
       (write-with-shared-structure a))
</PRE></DIV>
<P>should produce the output<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#1=(val1 . #1#)</CODE>. This shows a cons cell whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains itself.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dwith_002dshared_002dstructure></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-with-shared-structure</STRONG></DT>
<DT><A name=index-read_002dwith_002dshared_002dstructure-1></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-with-shared-structure</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P><CODE>read-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts the external representations of Scheme objects produced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into Scheme objects. That is, it is a parser for the nonterminal &#8216;<SAMP>&lt;datum&gt;</SAMP>&#8217; in the augmented external representation grammar defined above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the next object parsable from the given input port, updating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to the first character past the end of the external representation of the object.</P>
<P>If an end-of-file is encountered in the input before any characters are found that can begin an object, then an end-of-file object is returned. The port remains open, and further attempts to read it (by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-with-shared-structure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will also return an end-of-file object. If an end of file is encountered after the beginning of an object&#8217;s external representation, but the external representation is incomplete and therefore not parsable, an error is signalled.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument may be omitted, in which case it defaults to the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>. It is an error to read from a closed port.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d39></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41" rel=next>SRFI-41</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d38" rel=prev>SRFI-38</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d39-_002d-Parameters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.26 SRFI-39 - Parameters</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d39-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI adds support for dynamically-scoped parameters. SRFI 39 is implemented in the Guile core; there&#8217;s no module needed to get SRFI-39 itself. Parameters are documented in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Parameters">Parameters</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This module does export one extra function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-parameters*</CODE>. This is a Guile-specific addition to the SRFI, similar to the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-fluids*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dparameters_002a></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-parameters*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>param-list value-list thunk</EM></DT>
<DD>
<P>Establish a new dynamic scope, as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parameterize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, taking parameters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>param-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and corresponding values from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value-list</VAR>. A call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>thunk</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is made in the new scope and the result from that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-parameters*</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d42" rel=next>SRFI-42</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d39" rel=prev>SRFI-39</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-_002d-Streams></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.27 SRFI-41 - Streams</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d41></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This subsection is based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-41/srfi-41.html">specification of SRFI-41</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by Philip L. Bewig.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI implements streams, sometimes called lazy lists, a sequential data structure containing elements computed only on demand. A stream is either null or is a pair with a stream in its cdr. Since elements of a stream are computed only when accessed, streams can be infinite. Once computed, the value of a stream element is cached in case it is needed again. SRFI-41 can be made available with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-41))
</PRE></DIV>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Fundamentals">SRFI-41 Stream Fundamentals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Primitives">SRFI-41 Stream Primitives</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Library">SRFI-41 Stream Library</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Fundamentals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Primitives" rel=next>SRFI-41 Stream Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41" rel=up>SRFI-41</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Fundamentals-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.27.1 SRFI-41 Stream Fundamentals</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-41 Streams are based on two mutually-recursive abstract data types: An object of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>abstract data type is a promise that, when forced, is either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-null</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or is an object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE>. An object of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>abstract data type contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cdr</CODE>, which must be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream</CODE>. The essential feature of streams is the systematic suspensions of the recursive promises between the two data types.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The object stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a promise that is forced the first time the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is accessed; its value is cached in case it is needed again. The object may have any type, and different stream elements may have different types. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is never accessed, the object stored there is never evaluated. Likewise, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a promise to return a stream, and is only forced on demand.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Primitives></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Library" rel=next>SRFI-41 Stream Library</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Fundamentals" rel=prev>SRFI-41 Stream Fundamentals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41" rel=up>SRFI-41</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Primitives-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.27.2 SRFI-41 Stream Primitives</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This library provides eight operators: constructors for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-null</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE>s, type predicates for streams and the two kinds of streams, accessors for both fields of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE>, and a lambda that creates procedures that return streams.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dnull></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-null</STRONG></DT>
<DD>
<P>A promise that, when forced, is a single object, distinguishable from all other objects, that represents the null stream.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-null</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immutable and unique.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dcons></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object-expr stream-expr</EM></DT>
<DD>
<P>Creates a newly-allocated stream containing a promise that, when forced, is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object-expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream-expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cdr</CODE>. Neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object-expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<VAR>stream-expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called.</P>
<P>Once created, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immutable; there is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-set-car!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-set-cdr!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that modifies an existing stream-pair. There is no dotted-pair or improper stream as with lists.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DD>
<P>Returns true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a stream, otherwise returns false. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a stream, its promise will not be forced. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(stream? obj)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true, then one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(stream-null? obj)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(stream-pair? obj)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return true and the other will return false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dnull_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-null?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DD>
<P>Returns true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the distinguished null stream, otherwise returns false. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a stream, its promise will be forced.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dpair_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-pair?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DD>
<P>Returns true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constructed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cons</CODE>, otherwise returns false. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a stream, its promise will be forced.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dcar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-car</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DD>
<P>Returns the object stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. An error is signalled if the argument is not a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE>. This causes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object-expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be evaluated if it had not yet been; the value is cached in case it is needed again.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dcdr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DD>
<P>Returns the stream stored in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. An error is signalled if the argument is not a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dlambda></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-lambda</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>formals body &#8230;</EM></DT>
<DD>
<P>Creates a procedure that returns a promise to evaluate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the procedure. The last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression to be evaluated must yield a stream. As with normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>formals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a single variable name, in which case all the formal arguments are collected into a single list, or a list of variable names, which may be null if there are no arguments, proper if there are an exact number of arguments, or dotted if a fixed number of arguments is to be followed by zero or more arguments collected into a list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must contain at least one expression, and may contain internal definitions preceding any expressions to be evaluated.</P></DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define strm123
  (stream-cons 1
    (stream-cons 2
      (stream-cons 3
        stream-null))))

(stream-car strm123) &#8658; 1
(stream-car (stream-cdr strm123) &#8658; 2

(stream-pair?
  (stream-cdr
    (stream-cons (/ 1 0) stream-null))) &#8658; #f

(stream? (list 1 2 3)) &#8658; #f

(define iter
  (stream-lambda (f x)
    (stream-cons x (iter f (f x)))))

(define nats (iter (lambda (x) (+ x 1)) 0))

(stream-car (stream-cdr nats)) &#8658; 1

(define stream-add
  (stream-lambda (s1 s2)
    (stream-cons
      (+ (stream-car s1) (stream-car s2))
      (stream-add (stream-cdr s1)
                  (stream-cdr s2)))))

(define evens (stream-add nats nats))

(stream-car evens) &#8658; 0
(stream-car (stream-cdr evens)) &#8658; 2
(stream-car (stream-cdr (stream-cdr evens))) &#8658; 4
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41-Stream-Primitives" rel=prev>SRFI-41 Stream Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41" rel=up>SRFI-41</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d41-Stream-Library-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.27.3 SRFI-41 Stream Library</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dstream></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-stream</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name args &#8230;) body &#8230;</EM></DT>
<DD>
<P>Creates a procedure that returns a stream, and may appear anywhere a normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may appear, including as an internal definition. It may contain internal definitions of its own. The defined procedure takes arguments in the same way as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-lambda</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-stream</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is syntactic sugar on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-lambda</CODE>; see also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-let</CODE>, which is also a sugaring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-lambda</CODE>.</P>
<P>A simple version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes only a single input stream calls itself recursively:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-stream (stream-map proc strm)
  (if (stream-null? strm)
      stream-null
      (stream-cons
        (proc (stream-car strm))
        (stream-map proc (stream-cdr strm))))))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003estream></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;stream</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing the elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002d_003estream></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-&gt;stream</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing in its elements the characters on the port. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given it defaults to the current input port. The returned stream has finite length and is terminated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-null</CODE>.</P>
<P>It looks like one use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-&gt;stream</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would be this:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define s ;wrong!
  (with-input-from-file filename
    (lambda () (port-&gt;stream))))
</PRE></DIV>
<P>But that fails, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-input-from-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is eager, and closes the input port prematurely, before the first character is read. To read a file into a stream, say:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-stream (file-&gt;stream filename)
  (let ((p (open-input-file filename)))
    (stream-let loop ((c (read-char p)))
      (if (eof-object? c)
          (begin (close-input-port p)
                 stream-null)
          (stream-cons c
            (loop (read-char p)))))))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object-expr &#8230;</EM></DT>
<DD>
<P>Creates a newly-allocated stream containing in its elements the objects, in order. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object-expr</VAR>s are evaluated when they are accessed, not when the stream is created. If no objects are given, as in (stream), the null stream is returned. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-&gt;stream</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define strm123 (stream 1 2 3))

; (/ 1 0) not evaluated when stream is created
(define s (stream 1 (/ 1 0) -1))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[n] stream</EM></DT>
<DD>
<P>Returns a newly-allocated list containing in its elements the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>items in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>items, all the items in the stream will be included in the returned list. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given it defaults to infinity, which means that unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is finite<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-&gt;list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will never return.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-&gt;list 10
  (stream-map (lambda (x) (* x x))
    (stream-from 0)))
  &#8658; (0 1 4 9 16 25 36 49 64 81)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dappend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream &#8230;</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing in its elements those elements contained in its input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s, in order of input. If any of the input streams is infinite, no elements of any of the succeeding input streams will appear in the output stream. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-concat</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dconcat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-concat</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DD>
<P>Takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>consisting of one or more streams and returns a newly-allocated stream containing all the elements of the input streams. If any of the streams in the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is infinite, any remaining streams in the input stream will never appear in the output stream. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-append</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dconstant></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-constant</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object &#8230;</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing in its elements the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR>s, repeating in succession forever.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-constant 1) &#8658; 1 1 1 &#8230;
(stream-constant #t #f) &#8658; #t #f #t #f #t #f &#8230;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002ddrop></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-drop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n stream</EM></DT>
<DD>
<P>Returns the suffix of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that starts at the next element after the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements. The output stream shares structure with the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>; thus, promises forced in one instance of the stream are also forced in the other instance of the stream. If the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-drop</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the null stream. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-take</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002ddrop_002dwhile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-drop-while</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred stream</EM></DT>
<DD>
<P>Returns the suffix of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that starts at the first element<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(pred x)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns false. The output stream shares structure with the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-take-while</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dfilter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred stream</EM></DT>
<DD>
<P>Returns a newly-allocated stream that contains only those elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pred</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-filter odd? (stream-from 0))
   &#8658; 1 3 5 7 9 &#8230;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc base stream</EM></DT>
<DD>
<P>Applies a binary procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the first element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compute a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR>, then applies the procedure to the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the next element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compute a succeeding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR>, and so on, accumulating a value that is finally returned as the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the end of the stream is reached.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be finite, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will enter an infinite loop. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-scan</CODE>, which is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-fold</CODE>, but useful for infinite streams. For readers familiar with other functional languages, this is a left-fold; there is no corresponding right-fold, since right-fold relies on finite streams that are fully-evaluated, in which case they may as well be converted to a list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc stream &#8230;</EM></DT>
<DD>
<P>Applies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>element-wise to corresponding elements of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s for side-effects; it returns nothing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops as soon as any of its input streams is exhausted.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dfrom></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-from</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>first [step]</EM></DT>
<DD>
<P>Creates a newly-allocated stream that contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its first element and increments each succeeding element by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given it defaults to 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be of any numeric type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-from</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is frequently useful as a generator in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-of</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-range</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a similar procedure that creates finite streams.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002diterate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-iterate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc base</EM></DT>
<DD>
<P>Creates a newly-allocated stream containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in its first element and applies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each element in turn to determine the succeeding element. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-unfold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-unfolds</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DD>
<P>Returns the number of elements in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>; it does not evaluate its elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may only be used on finite streams; it enters an infinite loop with infinite streams.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dlet></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-let</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag ((var expr) &#8230;) body &#8230;</EM></DT>
<DD>
<P>Creates a local scope that binds each variable to the value of its corresponding expression. It additionally binds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a procedure which takes the bound variables as arguments and<VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its defining expressions, binding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-lambda</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in scope within body, and may be called recursively. When the expanded expression defined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates the expressions in its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in an environment containing the newly-bound variables, returning the value of the last expression evaluated, which must yield a stream.</P>
<P><CODE>stream-let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides syntactic sugar on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-lambda</CODE>, in the same manner as normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides syntactic sugar on normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE>. However, unlike normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is required, not optional, because unnamed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is meaningless.</P>
<P>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-member</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-pair</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strm</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(eql? obj x)</CODE>, or the null stream if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strm</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-stream (stream-member eql? obj strm)
  (stream-let loop ((strm strm))
    (cond ((stream-null? strm) strm)
          ((eql? obj (stream-car strm)) strm)
          (else (loop (stream-cdr strm))))))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc stream &#8230;</EM></DT>
<DD>
<P>Applies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>element-wise to corresponding elements of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s, returning a newly-allocated stream containing elements that are the results of those procedure applications. The output stream has as many elements as the minimum-length input stream, and may be infinite.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dmatch></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-match</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream clause &#8230;</EM></DT>
<DD>
<P>Provides pattern-matching for streams. The input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression that evaluates to a stream. Clauses are of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(pattern [fender] expression)</CODE>, consisting of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that matches a stream of a particular shape, an optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fender</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that must succeed if the pattern is to match, and an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is evaluated if the pattern matches. There are four types of patterns:</P>
<UL>
<LI>() matches the null stream.</LI>
<LI>(<VAR>pat0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pat1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;) matches a finite stream with length exactly equal to the number of pattern elements.</LI>
<LI>(<VAR>pat0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pat1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pat-rest</VAR>) matches an infinite stream, or a finite stream with length at least as great as the number of pattern elements before the literal dot.</LI>
<LI><VAR>pat</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches an entire stream. Should always appear last in the list of clauses; it&#8217;s not an error to appear elsewhere, but subsequent clauses could never match.</LI></UL>
<P>Each pattern element may be either:</P>
<UL>
<LI>An identifier, which matches any stream element. Additionally, the value of the stream element is bound to the variable named by the identifier, which is in scope in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fender</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR>. Each identifier in a single pattern must be unique.</LI>
<LI>A literal underscore (<CODE>_</CODE>), which matches any stream element but creates no bindings.</LI></UL>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR>s are tested in order, left-to-right, until a matching pattern is found; if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fender</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is present, it must evaluate to a true value for the match to be successful. Pattern variables are bound in the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fender</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>. Once the matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is found, the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated and returned as the result of the match. An error is signaled if no pattern matches the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>.</P>
<P><CODE>stream-match</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is often used to distinguish null streams from non-null streams, binding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>head</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR>:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (len strm)
  (stream-match strm
    (() 0)
    ((head . tail) (+ 1 (len tail)))))
</PRE></DIV>
<P>Fenders can test the common case where two stream elements must be identical; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pattern is an identifier bound to the entire stream, not a keyword as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-match strm
  ((x y . _) (equal? x y) 'ok)
  (else 'error))
</PRE></DIV>
<P>A more complex example uses two nested matchers to match two different stream arguments;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(stream-merge lt? . strms)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stably merges two or more streams ordered by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lt?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-stream (stream-merge lt? . strms)
  (define-stream (merge xx yy)
    (stream-match xx (() yy) ((x . xs)
      (stream-match yy (() xx) ((y . ys)
        (if (lt? y x)
            (stream-cons y (merge xx ys))
            (stream-cons x (merge xs yy))))))))
  (stream-let loop ((strms strms))
    (cond ((null? strms) stream-null)
          ((null? (cdr strms)) (car strms))
          (else (merge (car strms)
                       (apply stream-merge lt?
                         (cdr strms)))))))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dof></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-of</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr clause &#8230;</EM></DT>
<DD>
<P>Provides the syntax of stream comprehensions, which generate streams by means of looping expressions. The result is a stream of objects of the type returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>. There are four types of clauses:</P>
<UL>
<LI>(<VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>in</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream-expr</VAR>) loops over the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream-expr</VAR>, in order from the start of the stream, binding each element of the stream in turn to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-from</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-range</CODE>are frequently useful as generators for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream-expr</VAR>.</LI>
<LI>(<VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>is</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>) binds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the value obtained by evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>.</LI>
<LI>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>) includes in the output stream only those elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</LI></UL>
<P>The scope of variables bound in the stream comprehension is the clauses to the right of the binding clause (but not the binding clause itself) plus the result expression.</P>
<P>When two or more generators are present, the loops are processed as if they are nested from left to right; that is, the rightmost generator varies fastest. A consequence of this is that only the first generator may be infinite and all subsequent generators must be finite. If no generators are present, the result of a stream comprehension is a stream containing the result expression; thus, &#8216;<SAMP>(stream-of 1)</SAMP>&#8217; produces a finite stream containing only the element 1.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-of (* x x)
  (x in (stream-range 0 10))
  (even? x))
  &#8658; 0 4 16 36 64

(stream-of (list a b)
  (a in (stream-range 1 4))
  (b in (stream-range 1 3)))
  &#8658; (1 1) (1 2) (2 1) (2 2) (3 1) (3 2)

(stream-of (list i j)
  (i in (stream-range 1 5))
  (j in (stream-range (+ i 1) 5)))
  &#8658; (1 2) (1 3) (1 4) (2 3) (2 4) (3 4)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002drange></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>first past [step]</EM></DT>
<DD>
<P>Creates a newly-allocated stream that contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its first element and increments each succeeding element by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR>. The stream is finite and ends before<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>past</VAR>, which is not an element of the stream. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given it defaults to 1 if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than past and -1 otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>past</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be of any real numeric type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-range</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is frequently useful as a generator in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-of</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-from</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a similar procedure that creates infinite streams.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-range 0 10) &#8658; 0 1 2 3 4 5 6 7 8 9
(stream-range 0 10 2) &#8658; 0 2 4 6 8
</PRE></DIV>
<P>Successive elements of the stream are calculated by adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR>, so if any of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>past</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are inexact, the length of the output stream may differ from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ceiling (- (/ (- past first) step) 1)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream n</EM></DT>
<DD>
<P>Returns the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>th element of stream, counting from zero. An error is signaled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than or equal to the length of stream.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (fact n)
  (stream-ref
    (stream-scan * 1 (stream-from 1))
    n))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dreverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing the elements of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>but in reverse order.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-reverse</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may only be used with finite streams; it enters an infinite loop with infinite streams.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-reverse</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not force evaluation of the elements of the stream.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dscan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-scan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc base stream</EM></DT>
<DD>
<P>Accumulates the partial folds of an input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a newly-allocated output stream. The output stream is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(stream-fold proc base (stream-take i stream))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each of the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-scan + 0 (stream-from 1))
  &#8658; (stream 0 1 3 6 10 15 &#8230;)

(stream-scan * 1 (stream-from 1))
  &#8658; (stream 1 1 2 6 24 120 &#8230;)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dtake></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-take</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n stream</EM></DT>
<DD>
<P>Returns a newly-allocated stream containing the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. If the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements, so does the output stream. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-drop</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dtake_002dwhile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-take-while</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred stream</EM></DT>
<DD>
<P>Takes a predicate and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a newly-allocated stream containing those elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that form the maximal prefix of the input stream which satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-drop-while</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dunfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>map pred gen base</EM></DT>
<DD>
<P>The fundamental recursive stream constructor. It constructs a stream by repeatedly applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to successive values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR>, in the manner of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-iterate</CODE>, then applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>map</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each of the values so generated, appending each of the mapped values to the output stream as long as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(pred? base)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a true value. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-iterate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-unfolds</CODE>.</P>
<P>The expression below creates the finite stream &#8216;<SAMP>0 1 4 9 16 25 36 49 64 81</SAMP>&#8217;. Initially the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, which is less than 10, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>map</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>squares the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the mapped value becomes the first element of the output stream. Then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>increments the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by 1, so it becomes 1; this is less than 10, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>map</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>squares the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and 1 becomes the second element of the output stream. And so on, until the base becomes 10, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops the recursion and stream-null ends the output stream.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(stream-unfold
  (lambda (x) (expt x 2)) ; map
  (lambda (x) (&lt; x 10))   ; pred?
  (lambda (x) (+ x 1))    ; gen
  0)                      ; base
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dunfolds></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-unfolds</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc seed</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>newly-allocated streams containing those elements produced by successive calls to the generator<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, which takes the current<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its argument and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>+1 values</P>
<P>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>) &#8658;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result_0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result_n-1</VAR></P>
<P>where the returned<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the next call to the generator and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates how to produce the next element of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR>th result stream:</P>
<UL>
<LI>(<VAR>value</VAR>):<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the next car of the result stream.</LI>
<LI><CODE>#f</CODE>: no value produced by this iteration of the generator<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the result stream.</LI>
<LI>(): the end of the result stream.</LI></UL>
<P>It may require multiple calls of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to produce the next element of any particular result stream. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-iterate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stream-unfold</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (stream-partition pred? strm)
  (stream-unfolds
    (lambda (s)
      (if (stream-null? s)
          (values s '() '())
          (let ((a (stream-car s))
                (d (stream-cdr s)))
            (if (pred? a)
                (values d (list a) #f)
                (values d #f (list a))))))
    strm))

(call-with-values
  (lambda ()
    (stream-partition odd?
      (stream-range 1 6)))
  (lambda (odds evens)
    (list (stream-&gt;list odds)
          (stream-&gt;list evens))))
  &#8658; ((1 3 5) (2 4))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stream_002dzip></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stream-zip</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream &#8230;</EM></DT>
<DD>
<P>Returns a newly-allocated stream in which each element is a list (not a stream) of the corresponding elements of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s. The output stream is as long as the shortest input<VAR>stream</VAR>, if any of the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s is finite, or is infinite if all the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>s are infinite.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d42></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=next>SRFI-43</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d41" rel=prev>SRFI-41</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d42-_002d-Eager-Comprehensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.28 SRFI-42 - Eager Comprehensions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d42></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-42/srfi-42.html">the specification of SRFI-42</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d45" rel=next>SRFI-45</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d42" rel=prev>SRFI-42</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-_002d-Vector-Library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.29 SRFI-43 - Vector Library</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d43></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This subsection is based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-43/srfi-43.html">specification of SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by Taylor Campbell.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-43 implements a comprehensive library of vector operations. It can be made available with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-43))
</PRE></DIV>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Constructors">SRFI-43 Constructors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Predicates">SRFI-43 Predicates</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Selectors">SRFI-43 Selectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Iteration">SRFI-43 Iteration</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Searching">SRFI-43 Searching</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Mutators">SRFI-43 Mutators</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Conversion">SRFI-43 Conversion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Constructors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Predicates" rel=next>SRFI-43 Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Constructors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.1 SRFI-43 Constructors</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvector-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size [fill]</EM></DT>
<DD>
<P>Create and return a vector of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, optionally filling it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>. The default value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-vector 5 3) &#8658; #(3 3 3 3 3)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x &#8230;</EM></DT>
<DD>
<P>Create and return a vector whose elements are<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector 0 1 2 3 4) &#8658; #(0 1 2 3 4)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dunfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f length initial-seed &#8230;</EM></DT>
<DD>
<P>The fundamental vector constructor. Create a vector whose length is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and iterates across each index k from 0 up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>- 1, applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at each iteration to the current index and current seeds, in that order, to receive n + 1 values: first, the element to put in the kth slot of the new vector and n new seeds for the next iteration. It is an error for the number of seeds to vary between iterations.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-unfold (lambda (i x) (values x (- x 1)))
               10 0)
&#8658; #(0 -1 -2 -3 -4 -5 -6 -7 -8 -9)

(vector-unfold values 10)
&#8658; #(0 1 2 3 4 5 6 7 8 9)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dunfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-unfold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f length initial-seed &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-unfold</CODE>, but it uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to generate elements from right-to-left, rather than left-to-right.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-unfold-right (lambda (i x) (values x (+ x 1)))
                     10 0)
&#8658; #(9 8 7 6 5 4 3 2 1 0)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dcopy-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec [start [end [fill]]]</EM></DT>
<DD>
<P>Allocate a new vector whose length is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>-<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and fills it with elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>, taking elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and stopping at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-length vec)</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>extends beyond the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>, the slots in the new vector that obviously cannot be filled by elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are filled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>, whose default value is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-copy '#(a b c d e f g h i))
&#8658; #(a b c d e f g h i)

(vector-copy '#(a b c d e f g h i) 6)
&#8658; #(g h i)

(vector-copy '#(a b c d e f g h i) 3 6)
&#8658; #(d e f)

(vector-copy '#(a b c d e f g h i) 6 12 'x)
&#8658; #(g h i x x x)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dreverse_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-reverse-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec [start [end]]</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-copy</CODE>, but it copies the elements in the reverse order from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-reverse-copy '#(5 4 3 2 1 0) 1 5)
&#8658; #(1 2 3 4)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dappend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec &#8230;</EM></DT>
<DD>
<P>Return a newly allocated vector that contains all elements in order from the subsequent locations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-append '#(a) '#(b c d))
&#8658; #(a b c d)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dconcatenate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-concatenate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list-of-vectors</EM></DT>
<DD>
<P>Append each vector in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list-of-vectors</VAR>. Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(apply vector-append list-of-vectors)</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-concatenate '(#(a b) #(c d)))
&#8658; #(a b c d)
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Selectors" rel=next>SRFI-43 Selectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Constructors" rel=prev>SRFI-43 Constructors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Predicates-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.2 SRFI-43 Predicates</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, else return false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dempty_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-empty?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, i.e. its length is 0, else return false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elt=? vec &#8230;</EM></DT>
<DD>
<P>Return true if the vectors<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; have equal lengths and equal elements according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt=?</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elt=?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always applied to two arguments. Element comparison must be consistent with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the following sense: if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(eq? a b)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(elt=? a b)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must also return true. The order in which comparisons are performed is unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Selectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Iteration" rel=next>SRFI-43 Iteration</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Predicates" rel=prev>SRFI-43 Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Selectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.3 SRFI-43 Selectors</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dref-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i</EM></DT>
<DD>
<P>Return the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. Indexing is based on zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dlength-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DD>
<P>Return the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Iteration></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Searching" rel=next>SRFI-43 Searching</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Selectors" rel=prev>SRFI-43 Selectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Iteration-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.4 SRFI-43 Iteration</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kons knil vec1 vec2 &#8230;</EM></DT>
<DD>
<P>The fundamental vector iterator.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is iterated over each index in all of the vectors, stopping at the end of the shortest;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied as</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smalllisp><PRE style="FONT-SIZE: smaller" class=smalllisp>(kons i state (vector-ref vec1 i) (vector-ref vec2 i) ...)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the current state value, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the current index. The current state value begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>knil</VAR>, and becomes whatever<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returned at the respective iteration. The iteration is strictly left-to-right.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kons knil vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-fold</CODE>, but it iterates right-to-left instead of left-to-right.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Return a new vector of the shortest size of the vector arguments. Each element at index i of the new vector is mapped from the old vectors by</P>
<DIV style="MARGIN-LEFT: 3.2em" class=smalllisp><PRE style="FONT-SIZE: smaller" class=smalllisp>(f i (vector-ref vec1 i) (vector-ref vec2 i) ...)
</PRE></DIV>
<P>The dynamic order of application of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dmap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-map</CODE>, but rather than mapping the new elements into a new vector, the new mapped elements are destructively inserted into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR>. The dynamic order of application of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(f i (vector-ref vec1 i) (vector-ref vec2 i) ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each index i less than the length of the shortest vector passed. The iteration is strictly left-to-right.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Count the number of parallel elements in the vectors that satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR>, which is applied, for each index i less than the length of the smallest vector, to i and each parallel element in the vectors at that index, in order.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-count (lambda (i elt) (even? elt))
              '#(3 1 4 1 5 9 2 5 6))
&#8658; 3
(vector-count (lambda (i x y) (&lt; x y))
              '#(1 3 6 9) '#(2 4 6 8 10 12))
&#8658; 2
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Searching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Mutators" rel=next>SRFI-43 Mutators</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Iteration" rel=prev>SRFI-43 Iteration</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Searching-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.5 SRFI-43 Searching</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dindex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Find and return the index of the first elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; that satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR>. If no matching element is found by the end of the shortest vector, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-index even? '#(3 1 4 1 5 9))
&#8658; 2
(vector-index &lt; '#(3 1 4 1 5 9 2 5 6) '#(2 7 1 8 2))
&#8658; 1
(vector-index = '#(3 1 4 1 5 9 2 5 6) '#(2 7 1 8 2))
&#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dindex_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-index-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-index</CODE>, but it searches right-to-left, rather than left-to-right. Note that the SRFI 43 specification requires that all the vectors must have the same length, but both the SRFI 43 reference implementation and Guile&#8217;s implementation allow vectors with unequal lengths, and start searching from the last index of the shortest vector.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dskip></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-skip</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Find and return the index of the first elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; that do not satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR>. If no matching element is found by the end of the shortest vector, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Equivalent to<CODE>vector-index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but with the predicate inverted.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(vector-skip number? '#(1 2 a b 3 4 c d)) &#8658; 2
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dskip_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-skip-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-skip</CODE>, but it searches for a non-matching element right-to-left, rather than left-to-right. Note that the SRFI 43 specification requires that all the vectors must have the same length, but both the SRFI 43 reference implementation and Guile&#8217;s implementation allow vectors with unequal lengths, and start searching from the last index of the shortest vector.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dbinary_002dsearch></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-binary-search</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec value cmp [start [end]]</EM></DT>
<DD>
<P>Find and return an index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using a binary search. If no matching element is found, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0 and the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>is the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P>
<P><VAR>cmp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure of two arguments such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(cmp a b)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a negative integer if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>a &lt; b</EM>, a positive integer if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>a &gt; b</EM>, or zero if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>a = b</EM>. The elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be sorted in non-decreasing order according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cmp</VAR>.</P>
<P>Note that SRFI 43 does not document the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, but both its reference implementation and Guile&#8217;s implementation support them.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (char-cmp c1 c2)
  (cond ((char&lt;? c1 c2) -1)
        ((char&gt;? c1 c2) 1)
        (else 0)))

(vector-binary-search '#(#\a #\b #\c #\d #\e #\f #\g #\h)
                      #\g
                      char-cmp)
&#8658; 6
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dany></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>Find the first parallel set of elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a true value. If such a parallel set of elements exists,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-any</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the value that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR>returned for that set of elements. The iteration is strictly left-to-right.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002devery></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred? vec1 vec2 &#8230;</EM></DT>
<DD>
<P>If, for every index i between 0 and the length of the shortest vector argument, the set of elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-ref vec1 i)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-ref vec2 i)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-every</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the value that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returned for the last set of elements, at the last index of the shortest vector. Otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. The iteration is strictly left-to-right.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Mutators></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Conversion" rel=next>SRFI-43 Conversion</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Searching" rel=prev>SRFI-43 Searching</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Mutators-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.6 SRFI-43 Mutators</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dset_0021-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i value</EM></DT>
<DD>
<P>Assign the contents of the location at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dswap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-swap!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec i j</EM></DT>
<DD>
<P>Swap the values of the locations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dfill_0021-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec fill [start [end]]</EM></DT>
<DD>
<P>Assign the value of every location in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dreverse_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-reverse!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec [start [end]]</EM></DT>
<DD>
<P>Destructively reverse the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-copy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target tstart source [sstart [send]]</EM></DT>
<DD>
<P>Copy a block of elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>, both of which must be vectors, starting in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tstart</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and starting in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sstart</VAR>, ending when (<VAR>send</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>-<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sstart</VAR>) elements have been copied. It is an error for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to have a length less than (<VAR>tstart</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>send</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>-<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sstart</VAR>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sstart</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>send</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dreverse_002dcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-reverse-copy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target tstart source [sstart [send]]</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-copy!</CODE>, but this copies the elements in the reverse order. It is an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical vectors and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>ranges overlap; however, if<VAR>tstart</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sstart</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-reverse-copy!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-reverse! target tstart send)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43-Mutators" rel=prev>SRFI-43 Mutators</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=up>SRFI-43</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d43-Conversion-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.29.7 SRFI-43 Conversion</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002d_003elist-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec [start [end]]</EM></DT>
<DD>
<P>Return a newly allocated list containing the elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reverse_002dvector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse-vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec [start [end]]</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-&gt;list</CODE>, but the resulting list contains the specified range of elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in reverse order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003evector-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proper-list [start [end]]</EM></DT>
<DD>
<P>Return a newly allocated vector of the elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proper-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with indices between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proper-list</VAR>. Note that SRFI 43 does not document the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, but both its reference implementation and Guile&#8217;s implementation support them.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reverse_002dlist_002d_003evector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse-list-&gt;vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proper-list [start [end]]</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-&gt;vector</CODE>, but the resulting vector contains the specified range of elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proper-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in reverse order. Note that SRFI 43 does not document the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, but both its reference implementation and Guile&#8217;s implementation support them.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d45></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d46" rel=next>SRFI-46</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43" rel=prev>SRFI-43</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d45-_002d-Primitives-for-Expressing-Iterative-Lazy-Algorithms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.30 SRFI-45 - Primitives for Expressing Iterative Lazy Algorithms</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d45></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This subsection is based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-45/srfi-45.html">the specification of SRFI-45</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>written by Andr&#233; van Tonder.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Lazy evaluation is traditionally simulated in Scheme using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>. However, these primitives are not powerful enough to express a large class of lazy algorithms that are iterative. Indeed, it is folklore in the Scheme community that typical iterative lazy algorithms written using delay and force will often require unbounded memory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI provides set of three operations: {<CODE>lazy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>}, which allow the programmer to succinctly express lazy algorithms while retaining bounded space behavior in cases that are properly tail-recursive. A general recipe for using these primitives is provided. An additional procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eager</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided for the construction of eager promises in cases where efficiency is a concern.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although this SRFI redefines<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>, the extension is conservative in the sense that the semantics of the subset {<CODE>delay</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>} in isolation (i.e., as long as the program does not use<CODE>lazy</CODE>) agrees with that in R5RS. In other words, no program that uses the R5RS definitions of delay and force will break if those definition are replaced by the SRFI-45 definitions of delay and force.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also adds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>promise?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the list of exports, which is not part of the official SRFI-45.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-promise_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>promise?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an SRFI-45 promise, otherwise return false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delay-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delay</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression</EM></DT>
<DD>
<P>Takes an expression of arbitrary type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a promise of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(Promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which at some point in the future may be asked (by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure) to evaluate the expression and deliver the resulting value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lazy></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lazy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression</EM></DT>
<DD>
<P>Takes an expression of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(Promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a promise of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(Promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which at some point in the future may be asked (by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure) to evaluate the expression and deliver the resulting promise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-force-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>force</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression</EM></DT>
<DD>
<P>Takes an argument of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(Promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as follows: If a value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been computed for the promise, this value is returned. Otherwise, the promise is first evaluated, then overwritten by the obtained promise or value, and then force is again applied (iteratively) to the promise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eager></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eager</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression</EM></DT>
<DD>
<P>Takes an argument of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(Promise<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR>)</CODE>. As opposed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE>, the argument is evaluated eagerly. Semantically, writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(eager expression)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to writing</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let ((value expression)) (delay value)).
</PRE></DIV>
<P>However, the former is more efficient since it does not require unnecessary creation and evaluation of thunks. We also have the equivalence</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(delay expression) = (lazy (eager expression))
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following reduction rules may be helpful for reasoning about these primitives. However, they do not express the memoization and memory usage semantics specified above:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(force (delay expression)) -&gt; expression
(force (lazy  expression)) -&gt; (force expression)
(force (eager value))      -&gt; value
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Correct-usage></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Correct usage</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We now provide a general recipe for using the primitives {<CODE>lazy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE>} to express lazy algorithms in Scheme. The transformation is best described by way of an example: Consider the stream-filter algorithm, expressed in a hypothetical lazy language as</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (stream-filter p? s)
  (if (null? s) '()
      (let ((h (car s))
            (t (cdr s)))
        (if (p? h)
            (cons h (stream-filter p? t))
            (stream-filter p? t)))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This algorithm can be expressed as follows in Scheme:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (stream-filter p? s)
  (lazy
     (if (null? (force s)) (delay '())
         (let ((h (car (force s)))
               (t (cdr (force s))))
           (if (p? h)
               (delay (cons h (stream-filter p? t)))
               (stream-filter p? t))))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In other words, we</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>wrap all constructors (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>) with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE>,</LI>
<LI>apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to arguments of deconstructors (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>null?</CODE>),</LI>
<LI>wrap procedure bodies with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lazy ...)</CODE>.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d46></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d55" rel=next>SRFI-55</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d45" rel=prev>SRFI-45</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d46-Basic-syntax_002drules-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.31 SRFI-46 Basic syntax-rules Extensions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d46></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>syntax-rules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports the extensions specified by SRFI-46/R7RS. Tail patterns have been supported since at least Guile 2.0, and custom ellipsis identifiers have been supported since Guile 2.0.10. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Syntax-Rules">Syntax Rules</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d55></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d60" rel=next>SRFI-60</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d46" rel=prev>SRFI-46</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d55-_002d-Requiring-Features></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.32 SRFI-55 - Requiring Features</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d55></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-55 provides<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>require-extension</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is a portable mechanism to load selected SRFI modules. This is implemented in the Guile core, there&#8217;s no module needed to get SRFI-55 itself.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-require_002dextension></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>require-extension</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>clause1 clause2 &#8230;</EM></DT>
<DD>
<P>Require the features of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; , throwing an error if any are unavailable.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>identifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arg...)</CODE>. The only<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>identifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>currently supported is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srfi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the arguments are SRFI numbers. For example to get SRFI-1 and SRFI-6,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(require-extension (srfi 1 6))
</PRE></DIV>
<P><CODE>require-extension</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can only be used at the top-level.</P>
<P>A Guile-specific program can simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to load SRFIs not already in the core,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>require-extension</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is for programs designed to be portable to other Scheme implementations.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d60></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d61" rel=next>SRFI-61</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d55" rel=prev>SRFI-55</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d60-_002d-Integers-as-Bits></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.33 SRFI-60 - Integers as Bits</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d60></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-integers-as-bits></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-bitwise-logical></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI provides various functions for treating integers as bits and for bitwise manipulations. These functions can be obtained with,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-60))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Integers are treated as infinite precision twos-complement, the same as in the core logical functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>). And likewise bit indexes start from 0 for the least significant bit. The following functions in this SRFI are already in the Guile core,</P>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><CODE>logand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logxor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lognot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logtest</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logcount</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>integer-length</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logbit?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ash</CODE></P></BLOCKQUOTE><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dand></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-and</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 ...</EM></DT>
<DT><A name=index-bitwise_002dior></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-ior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 ...</EM></DT>
<DT><A name=index-bitwise_002dxor></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-xor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 ...</EM></DT>
<DT><A name=index-bitwise_002dnot></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-any_002dbits_002dset_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>any-bits-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>j k</EM></DT>
<DT><A name=index-bit_002dset_003f></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index n</EM></DT>
<DT><A name=index-arithmetic_002dshift></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>arithmetic-shift</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n count</EM></DT>
<DT><A name=index-bit_002dfield></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n start end</EM></DT>
<DT><A name=index-bit_002dcount-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Aliases for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logxor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lognot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logtest</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logbit?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ash</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bit-extract</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logcount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively.</P>
<P>Note that the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bit-count</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conflicts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bit-count</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the core (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bit-Vectors">Bit Vectors</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dif></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mask n1 n0</EM></DT>
<DT><A name=index-bitwise_002dmerge></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-merge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mask n1 n0</EM></DT>
<DD>
<P>Return an integer with bits selected from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mask</VAR>. Those bits where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mask</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has 1s are taken from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n1</VAR>, and those where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mask</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has 0s are taken from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n0</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bitwise-if 3 #b0101 #b1010) &#8658; 9
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-log2_002dbinary_002dfactors></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>log2-binary-factors</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-first_002dset_002dbit></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>first-set-bit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>Return a count of how many factors of 2 are present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. This is also the bit index of the lowest 1 bit in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-1</EM>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(log2-binary-factors 6) &#8658; 1
(log2-binary-factors -8) &#8658; 3
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002dbit></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-bit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index n newbit</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the bit at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>set according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newbit</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newbit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to set the bit to 1, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to set it to 0. Bits other than at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are unchanged in the return.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(copy-bit 1 #b0101 #t) &#8658; 7
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002dbit_002dfield></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n newbits start end</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the bits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive) changed to the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newbits</VAR>.</P>
<P>The least significant bit in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newbits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>goes to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>, the next to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>start</VAR>+1</EM>, etc. Anything in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newbits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>past the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>given is ignored.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(copy-bit-field #b10000 #b11 1 3) &#8658; #b10110
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rotate_002dbit_002dfield></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rotate-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n count start end</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the bit field from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive) rotated upwards by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits.</P>
<P><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be positive or negative, and it can be more than the field width (it&#8217;ll be reduced modulo the width).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(rotate-bit-field #b0110 2 1 4) &#8658; #b1010
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reverse_002dbit_002dfield></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n start end</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the bits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive) reversed.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(reverse-bit-field #b101001 2 4) &#8658; #b100101
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_002d_003elist></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [len]</EM></DT>
<DD>
<P>Return bits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the form of a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for 1 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for 0. The least significant<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits are returned, and the first list element is the most significant of those bits. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR>is not given, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(integer-length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(integer-&gt;list 6)   &#8658; (#t #t #f)
(integer-&gt;list 1 4) &#8658; (#f #f #f #t)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003einteger></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-booleans_002d_003einteger></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>booleans-&gt;integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bool&#8230;</EM></DT>
<DD>
<P>Return an integer formed bitwise from the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list of booleans, or for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>booleans-&gt;integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments.</P>
<P>Each boolean is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a 1 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a 0. The first element becomes the most significant bit in the return.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(list-&gt;integer '(#t #f #t #f)) &#8658; 10
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d61></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d62" rel=next>SRFI-62</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d60" rel=prev>SRFI-60</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d61-_002d-A-more-general-cond-clause></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.34 SRFI-61 - A more general<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This SRFI extends RnRS<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to support test expressions that return multiple values, as well as arbitrary definitions of test success. SRFI 61 is implemented in the Guile core; there&#8217;s no module needed to get SRFI-61 itself. Extended<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is documented in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Simple Conditional Evaluation</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d62></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d64" rel=next>SRFI-64</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d61" rel=prev>SRFI-61</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d62-_002d-S_002dexpression-comments_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.35 SRFI-62 - S-expression comments.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d62></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Starting from version 2.0, Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports SRFI-62/R7RS S-expression comments by default.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d64></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d67" rel=next>SRFI-67</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d62" rel=prev>SRFI-62</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d64-_002d-A-Scheme-API-for-test-suites_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.36 SRFI-64 - A Scheme API for test suites.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d64></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-64/srfi-64.html">the specification of SRFI-64</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d67></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=next>SRFI-69</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d64" rel=prev>SRFI-64</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d67-_002d-Compare-procedures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.37 SRFI-67 - Compare procedures</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d67></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-67/srfi-67.html">the specification of SRFI-67</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d87" rel=next>SRFI-87</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d67" rel=prev>SRFI-67</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69-_002d-Basic-hash-tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.38 SRFI-69 - Basic hash tables</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d69></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is a portable wrapper around Guile&#8217;s built-in hash table and weak table support. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A>, for information on that built-in support. Above that, this hash-table interface provides association of equality and hash functions with tables at creation time, so variants of each function are not required, as well as a procedure that takes care of most uses for Guile hash table handles, which this SRFI does not provide as such.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Access it with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (srfi srfi-69))
</PRE></DIV>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Creating-hash-tables">SRFI-69 Creating hash tables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Accessing-table-items">SRFI-69 Accessing table items</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Table-properties">SRFI-69 Table properties</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Hash-table-algorithms">SRFI-69 Hash table algorithms</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69-Creating-hash-tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Accessing-table-items" rel=next>SRFI-69 Accessing table items</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=up>SRFI-69</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-hash-tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.38.1 Creating hash tables</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dhash_002dtable-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[equal-proc hash-proc #:weak weakness start-size]</EM></DT>
<DD>
<P>Create and answer a new hash table with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the equality function and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the hashing function.</P>
<P>By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>. It can be any two-argument procedure, and should answer whether two keys are the same for this table&#8217;s purposes.</P>
<P>My default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>assumes that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal-proc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is no coarser than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>unless it is literally<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ci=?</CODE>. If provided,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a two-argument procedure that takes a key and the current table size, and answers a reasonably good hash integer between 0 (inclusive) and the size (exclusive).</P>
<P><VAR>weakness</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a symbol indicating how &#8220;weak&#8221; the hash table is:</P>
<DL compact>
<DT><CODE>#f</CODE></DT>
<DD>
<P>An ordinary non-weak hash table. This is the default.</P></DD>
<DT><CODE>key</CODE></DT>
<DD>
<P>When the key has no more non-weak references at GC, remove that entry.</P></DD>
<DT><CODE>value</CODE></DT>
<DD>
<P>When the value has no more non-weak references at GC, remove that entry.</P></DD>
<DT><CODE>key-or-value</CODE></DT>
<DD>
<P>When either has no more non-weak references at GC, remove the association.</P></DD></DL>
<P>As a legacy of the time when Guile couldn&#8217;t grow hash tables,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start-size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optional integer argument that specifies the approximate starting size for the hash table, which will be rounded to an algorithmically-sounder number.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>coarser</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, we mean that for all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>equal-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(equal?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well. If that does not hold for your<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal-proc</VAR>, you must provide a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the case of weak tables, remember that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>references</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>above always refers to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>-wise references. Just because you have a reference to some string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"foo"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t mean that an association with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"foo"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a weak-key table<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>won&#8217;t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be collected; it only counts as a reference if the two<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"foo"</CODE>s are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>, regardless of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal-proc</VAR>. As such, it is usually only sensible to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE>as the equivalence and hash functions for a weak table. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Weak-References">Weak References</A>, for more information on Guile&#8217;s built-in weak table support.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002d_003ehash_002dtable-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist [equal-proc hash-proc #:weak weakness start-size]</EM></DT>
<DD>
<P>As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-hash-table</CODE>, but initialize it with the associations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>. Where keys are repeated in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, the leftmost association takes precedence.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69-Accessing-table-items></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Table-properties" rel=next>SRFI-69 Table properties</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Creating-hash-tables" rel=prev>SRFI-69 Creating hash tables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=up>SRFI-69</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-table-items></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.38.2 Accessing table items</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key [default-thunk]</EM></DT>
<DT><A name=index-hash_002dtable_002dref_002fdefault></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-ref/default</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key default</EM></DT>
<DD>
<P>Answer the value associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not present, answer the result of invoking the thunk<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default-thunk</VAR>, which signals an error instead by default.</P>
<P><CODE>hash-table-ref/default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variant that requires a third argument,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR>, and answers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself instead of invoking it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key new-value</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new-value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002ddelete_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DD>
<P>Remove the association of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>, if present. If absent, do nothing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dexists_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-exists?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DD>
<P>Answer whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has an association in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dupdate_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-update!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key modifier [default-thunk]</EM></DT>
<DT><A name=index-hash_002dtable_002dupdate_0021_002fdefault></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-update!/default</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key modifier default</EM></DT>
<DD>
<P>Replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>&#8217;s associated value in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with one argument, the old value.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not present, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default-thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, invoke it with no arguments to get the &#8220;old value&#8221; to be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as above. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default-thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not provided in such a case, signal an error.</P>
<P><CODE>hash-table-update!/default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variant that requires the fourth argument, which is used directly as the &#8220;old value&#8221; rather than as a thunk to be invoked to retrieve the &#8220;old value&#8221;.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69-Table-properties></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Hash-table-algorithms" rel=next>SRFI-69 Hash table algorithms</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Accessing-table-items" rel=prev>SRFI-69 Accessing table items</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=up>SRFI-69</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Table-properties></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.38.3 Table properties</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dsize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table</EM></DT>
<DD>
<P>Answer the number of associations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. This is guaranteed to run in constant time for non-weak tables.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dkeys></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-keys</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table</EM></DT>
<DD>
<P>Answer an unordered list of the keys in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dvalues></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table</EM></DT>
<DD>
<P>Answer an unordered list of the values in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dwalk></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-walk</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table proc</EM></DT>
<DD>
<P>Invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>once for each association in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>, passing the key and value as arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table proc init</EM></DT>
<DD>
<P>Invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the result of the previous invocation, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>previous</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. Answer the final<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002d_003ealist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-&gt;alist</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table</EM></DT>
<DD>
<P>Answer an alist where each association in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an association in the result.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d69-Hash-table-algorithms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69-Table-properties" rel=prev>SRFI-69 Table properties</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=up>SRFI-69</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-table-algorithms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.5.38.4 Hash table algorithms</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each hash table carries an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>equivalence function</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash function</EM>, used to implement key lookups. Beginning users should follow the rules for consistency of the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR>specified above. Advanced users can use these to implement their own equivalence and hash functions for specialized lookup semantics.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_002dequivalence_002dfunction></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-equivalence-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash-table</EM></DT>
<DT><A name=index-hash_002dtable_002dhash_002dfunction></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table-hash-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash-table</EM></DT>
<DD>
<P>Answer the equivalence and hash function of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-table</VAR>, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [size]</EM></DT>
<DT><A name=index-string_002dhash-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [size]</EM></DT>
<DT><A name=index-string_002dci_002dhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [size]</EM></DT>
<DT><A name=index-hash_002dby_002didentity></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-by-identity</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [size]</EM></DT>
<DD>
<P>Answer a hash value appropriate for equality predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string=?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ci=?</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>, respectively.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a backwards-compatible replacement for Guile&#8217;s built-in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash</CODE>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d87></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d88" rel=next>SRFI-88</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69" rel=prev>SRFI-69</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d87-_003d_003e-in-case-clauses></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.39 SRFI-87 =&gt; in case clauses</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d87></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Starting from version 2.0.6, Guile&#8217;s core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in clauses, as specified by SRFI-87/R7RS. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Conditionals</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d88></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d98" rel=next>SRFI-98</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d87" rel=prev>SRFI-87</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d88-Keyword-Objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.40 SRFI-88 Keyword Objects</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d88></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-keyword-objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://srfi.schemers.org/srfi-88/srfi-88.html">SRFI-88</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>keyword objects</EM>, which are equivalent to Guile&#8217;s keywords (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Keywords">Keywords</A>). SRFI-88 keywords can be entered using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>postfix keyword syntax</EM>, which consists of an identifier followed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read"><CODE>postfix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword syntax</A>). SRFI-88 can be made available with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-88))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Doing so installs the right reader option for keyword syntax, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(read-set! keywords 'postfix)</CODE>. It also provides the procedures described below.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-keyword_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>keyword?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a keyword. This is the same procedure as the same-named built-in procedure (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Procedures"><CODE>keyword?</CODE></A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(keyword? foo:)         &#8658; #t
(keyword? 'foo:)        &#8658; #t
(keyword? "foo")        &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-keyword_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>keyword-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kw</EM></DT>
<DD>
<P>Return the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a string, i.e., without the trailing colon. The returned string may not be modified, e.g., with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-set!</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(keyword-&gt;string foo:)  &#8658; "foo"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003ekeyword></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DD>
<P>Return the keyword object whose name is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(keyword-&gt;string (string-&gt;keyword "a b c"))     &#8658; "a b c"
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d98></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d105" rel=next>SRFI-105</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d88" rel=prev>SRFI-88</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d98-Accessing-environment-variables_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.41 SRFI-98 Accessing environment variables.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d98></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-environment-variables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is a portable wrapper around Guile&#8217;s built-in support for interacting with the current environment, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment">Runtime Environment</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002denvironment_002dvariable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-environment-variable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Returns a string containing the value of the environment variable given by the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the named environment variable is not found. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(getenv name)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002denvironment_002dvariables></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-environment-variables</STRONG></DT>
<DD>
<P>Returns the names and values of all the environment variables as an association list in which both the keys and the values are strings.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d105></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d111" rel=next>SRFI-111</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d98" rel=prev>SRFI-98</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d105-Curly_002dinfix-expressions_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.42 SRFI-105 Curly-infix expressions.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d105></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-curly_002dinfix></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-curly_002dinfix_002dand_002dbracket_002dlists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s built-in reader includes support for SRFI-105 curly-infix expressions. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://srfi.schemers.org/srfi-105/srfi-105.html">the specification of SRFI-105</A>. Some examples:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>{n &lt;= 5}                &#8658;  (&lt;= n 5)
{a + b + c}             &#8658;  (+ a b c)
{a * {b + c}}           &#8658;  (* a (+ b c))
{(- a) / b}             &#8658;  (/ (- a) b)
{-(a) / b}              &#8658;  (/ (- a) b) as well
{(f a b) + (g h)}       &#8658;  (+ (f a b) (g h))
{f(a b) + g(h)}         &#8658;  (+ (f a b) (g h)) as well
{f[a b] + g(h)}         &#8658;  (+ ($bracket-apply$ f a b) (g h))
'{a + f(b) + x}         &#8658;  '(+ a (f b) x)
{length(x) &gt;= 6}        &#8658;  (&gt;= (length x) 6)
{n-1 + n-2}             &#8658;  (+ n-1 n-2)
{n * factorial{n - 1}}  &#8658;  (* n (factorial (- n 1)))
{{a &gt; 0} and {b &gt;= 1}}  &#8658;  (and (&gt; a 0) (&gt;= b 1))
{f{n - 1}(x)}           &#8658;  ((f (- n 1)) x)
{a . z}                 &#8658;  ($nfx$ a . z)
{a + b - c}             &#8658;  ($nfx$ a + b - c)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To enable curly-infix expressions within a file, place the reader directive<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before the first use of curly-infix notation. To globally enable curly-infix expressions in Guile&#8217;s reader, set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also implements the following non-standard extension to SRFI-105: if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>curly-infix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled and there is no other meaning assigned to square brackets (i.e. the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>square-brackets</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option is turned off), then lists within square brackets are read as normal lists but with the special symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$bracket-list$</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>added to the front. To enable this combination of read options within a file, use the reader directive<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#!curly-infix-and-bracket-lists</CODE>. For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>[a b]    &#8658;  ($bracket-list$ a b)
[a . b]  &#8658;  ($bracket-list$ a . b)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on reader options, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d111></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d105" rel=prev>SRFI-105</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#SRFI-Support" rel=up>SRFI Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d111-Boxes_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.5.43 SRFI-111 Boxes.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d111></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://srfi.schemers.org/srfi-111/srfi-111.html">SRFI-111</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides boxes: objects with a single mutable cell.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-box></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>box</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM></DT>
<DD>
<P>Return a newly allocated box whose contents is initialized to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-box_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>box?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a box, otherwise return false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unbox></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unbox</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>box</EM></DT>
<DD>
<P>Return the current contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>box</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dbox_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-box!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>box value</EM></DT>
<DD>
<P>Set the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>box</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>