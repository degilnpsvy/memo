<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.2<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>POSIX</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>System Calls and Networking</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-POSIX></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Conventions">Conventions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Conventions employed by the POSIX interface.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">Ports and File Descriptors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Scheme &#8220;ports&#8221; and Unix file descriptors have different representations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#File-System">File System</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>stat, chown, chmod, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#User-Information">User Information</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Retrieving a user&#8217;s GECOS (/etc/passwd) entry.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Time">Time</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>gettimeofday, localtime, strftime, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment">Runtime Environment</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing and modifying Guile&#8217;s environment.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>getuid, getpid, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Signals">Signals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>sigaction, kill, pause, alarm, setitimer, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Terminals-and-Ptys">Terminals and Ptys</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>ttyname, tcsetpgrp, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pipes">Pipes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Communicating data between processes.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Networking">Networking</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>gethostbyaddr, getnetent, socket, bind, listen.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#System-Identification">System Identification</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Obtaining information about the system.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>setlocale, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Encryption">Encryption</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conventions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors" rel=next>Ports and File Descriptors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=POSIX-Interface-Conventions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.1<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>POSIX</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>Interface Conventions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These interfaces provide access to operating system facilities. They provide a simple wrapping around the underlying C interfaces to make usage from Scheme more convenient. They are also used to implement the Guile port of scsh (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-shell-_0028scsh_0029">The Scheme shell (scsh)</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Generally there is a single procedure for each corresponding Unix facility. There are some exceptions, such as procedures implemented for speed and convenience in Scheme with no primitive Unix equivalent, e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copy-file</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The interfaces are intended as far as possible to be portable across different versions of Unix. In some cases procedures which can&#8217;t be implemented on particular systems may become no-ops, or perform limited actions. In other cases they may throw errors.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">General naming conventions are as follows:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The Scheme name is often identical to the name of the underlying Unix facility.</LI>
<LI>Underscores in Unix procedure names are converted to hyphens.</LI>
<LI>Procedures which destructively modify Scheme data have exclamation marks appended, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>recv!</CODE>.</LI>
<LI>Predicates (returning only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>) have question marks appended, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>access?</CODE>.</LI>
<LI>Some names are changed to avoid conflict with dissimilar interfaces defined by scsh, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-fork</CODE>.</LI>
<LI>Unix preprocessor names such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EPERM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R_OK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are converted to Scheme variables of the same name (underscores are not replaced with hyphens).</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unexpected conditions are generally handled by raising exceptions. There are a few procedures which return a special value if they don&#8217;t succeed, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getenv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it the requested string is not found in the environment. These cases are noted in the documentation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For ways to deal with exceptions, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions">Exceptions</A>.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-errno></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Errors which the C library would report by returning a null pointer or through some other means are reported by raising a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Error-Reporting">Error Reporting</A>). The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>parameter is a list containing the Unix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value (an integer). For example,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (my-handler key func fmt fmtargs data)
  (display key) (newline)
  (display func) (newline)
  (apply format #t fmt fmtargs) (newline)
  (display data) (newline))

(catch 'system-error
  (lambda () (dup2 -123 -456))
  my-handler)

-|
system-error
dup2
Bad file descriptor
(9)
</PRE></DIV><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-system_002derror_002derrno></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>system-error-errno</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arglist</EM></DT>
<DD><A name=index-errno-1></A>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value from a list which is the arguments to an exception handler. If the exception is not a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE>, then the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(catch
 'system-error
 (lambda ()
   (mkdir "/this-ought-to-fail-if-I'm-not-root"))
 (lambda stuff
   (let ((errno (system-error-errno stuff)))
     (cond
      ((= errno EACCES)
       (display "You're not allowed to do that."))
      ((= errno EEXIST)
       (display "Already exists."))
      (#t
       (display (strerror errno))))
     (newline))))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Ports-and-File-Descriptors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#File-System" rel=next>File System</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Conventions" rel=prev>Conventions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Ports-and-File-Descriptors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.2 Ports and File Descriptors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-file-descriptor></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conventions generally follow those of scsh,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-Scheme-shell-_0028scsh_0029">The Scheme shell (scsh)</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">File ports are implemented using low-level operating system I/O facilities, with optional buffering to improve efficiency; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that some procedures (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>recv!</CODE>) will accept ports as arguments, but will actually operate directly on the file descriptor underlying the port. Any port buffering is ignored, including the buffer which implements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>peek-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unread-char</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force-output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drain-input</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures can be used to clear the buffers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each open file port has an associated operating system file descriptor. File descriptors are generally not useful in Scheme programs; however they may be needed when interfacing with foreign code and the Unix environment.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A file descriptor can be extracted from a port and a new port can be created from a file descriptor. However a file descriptor is just an integer and the garbage collector doesn&#8217;t recognize it as a reference to the port. If all other references to the port were dropped, then it&#8217;s likely that the garbage collector would free the port, with the side-effect of closing the file descriptor prematurely.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To assist the programmer in avoiding this problem, each port has an associated<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>revealed count</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>which can be used to keep track of how many times the underlying file descriptor has been stored in other places. If a port&#8217;s revealed count is greater than zero, the file descriptor will not be closed when the port is garbage collected. A programmer can therefore ensure that the revealed count will be greater than zero if the file descriptor is needed elsewhere.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For the simple case where a file descriptor is &#8220;imported&#8221; once to become a port, it does not matter if the file descriptor is closed when the port is garbage collected. There is no need to maintain a revealed count. Likewise when &#8220;exporting&#8221; a file descriptor to the external environment, setting the revealed count is not required provided the port is kept open (i.e., is pointed to by a live Scheme binding) while the file descriptor is in use.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To correspond with traditional Unix behaviour, three file descriptors (0, 1, and 2) are automatically imported when a program starts up and assigned to the initial values of the current/standard input, output, and error ports, respectively. The revealed count for each is initially set to one, so that dropping references to one of these ports will not result in its garbage collection: it could be retrieved with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fdopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fdes-&gt;ports</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002drevealed></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-revealed</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005frevealed></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_revealed</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the revealed count for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002drevealed_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-revealed!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port rcount</EM></DT>
<DT><A name=index-scm_005fset_005fport_005frevealed_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_revealed_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, rcount)</EM></DT>
<DD>
<P>Sets the revealed count for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rcount</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fileno></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fileno</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005ffileno></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fileno</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the integer file descriptor underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Does not change its revealed count.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002d_003efdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-&gt;fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Returns the integer file descriptor underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. As a side effect the revealed count of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is incremented.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fdopen></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fdopen</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fdes modes</EM></DT>
<DT><A name=index-scm_005ffdopen></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fdopen</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fdes, modes)</EM></DT>
<DD>
<P>Return a new port based on the file descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR>. Modes are given by the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modes</VAR>. The revealed count of the port is initialized to zero. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string is the same as that accepted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">open-file</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fdes_002d_003eports></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fdes-&gt;ports</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fdes</EM></DT>
<DT><A name=index-scm_005ffdes_005fto_005fports></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fdes_to_ports</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fdes)</EM></DT>
<DD>
<P>Return a list of existing ports which have<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an underlying file descriptor, without changing their revealed counts.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fdes_002d_003einport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fdes-&gt;inport</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fdes</EM></DT>
<DD>
<P>Returns an existing input port which has<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its underlying file descriptor, if one exists, and increments its revealed count. Otherwise, returns a new input port with a revealed count of 1.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fdes_002d_003eoutport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fdes-&gt;outport</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fdes</EM></DT>
<DD>
<P>Returns an existing output port which has<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its underlying file descriptor, if one exists, and increments its revealed count. Otherwise, returns a new output port with a revealed count of 1.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dmove_002d_003efdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-move-&gt;fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port fdes</EM></DT>
<DT><A name=index-scm_005fprimitive_005fmove_005fto_005ffdes></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive_move_to_fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, fdes)</EM></DT>
<DD>
<P>Moves the underlying file descriptor for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the integer value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>without changing the revealed count of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Any other ports already using this descriptor will be automatically shifted to new descriptors and their revealed counts reset to zero. The return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the file descriptor already had the required value or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was moved.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-move_002d_003efdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>move-&gt;fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port fdes</EM></DT>
<DD>
<P>Moves the underlying file descriptor for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the integer value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and sets its revealed count to one. Any other ports already using this descriptor will be automatically shifted to new descriptors and their revealed counts reset to zero. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-release_002dport_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>release-port-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Decrements the revealed count for a port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fsync></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fsync</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port_or_fd</EM></DT>
<DT><A name=index-scm_005ffsync></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fsync</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port_or_fd)</EM></DT>
<DD>
<P>Copies any unwritten data for the specified output file descriptor to disk. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port, its buffer is flushed before the underlying file descriptor is fsync&#8217;d. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path flags [mode]</EM></DT>
<DT><A name=index-scm_005fopen></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, flags, mode)</EM></DT>
<DD>
<P>Open the file named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for reading and/or writing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer specifying how the file should be opened.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer specifying the permission bits of the file, if it needs to be created, before the umask (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>) is applied. The default is 666 (Unix itself has no default).</P>
<P><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be constructed by combining variables using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE>. Basic flags are:</P>
<DL>
<DT><A name=index-O_005fRDONLY></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>O_RDONLY</STRONG></DT>
<DD>
<P>Open the file read-only.</P></DD></DL>
<DL>
<DT><A name=index-O_005fWRONLY></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>O_WRONLY</STRONG></DT>
<DD>
<P>Open the file write-only.</P></DD></DL>
<DL>
<DT><A name=index-O_005fRDWR></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>O_RDWR</STRONG></DT>
<DD>
<P>Open the file read/write.</P></DD></DL>
<DL>
<DT><A name=index-O_005fAPPEND></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>O_APPEND</STRONG></DT>
<DD>
<P>Append to the file instead of truncating.</P></DD></DL>
<DL>
<DT><A name=index-O_005fCREAT></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>O_CREAT</STRONG></DT>
<DD>
<P>Create the file if it does not already exist.</P></DD></DL>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Status-Flags">File Status Flags</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>, for additional flags.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dfdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path flags [mode]</EM></DT>
<DT><A name=index-scm_005fopen_005ffdes></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, flags, mode)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but return a file descriptor instead of a port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fd_or_port</EM></DT>
<DT><A name=index-scm_005fclose></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_close</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fd_or_port)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Closing">close-port</A>), but also works on file descriptors. A side effect of closing a file descriptor is that any ports using that file descriptor are moved to a different file descriptor and have their revealed counts set to zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dfdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fd</EM></DT>
<DT><A name=index-scm_005fclose_005ffdes></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_close_fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fd)</EM></DT>
<DD>
<P>A simple wrapper for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call. Close file descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd</VAR>, which must be an integer. Unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>, the file descriptor will be closed even if a port is using it. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unread_002dchar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unread-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char [port]</EM></DT>
<DT><A name=index-scm_005funread_005fchar-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unread_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char, port)</EM></DT>
<DD>
<P>Place<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that it will be read by the next read operation on that port. If called multiple times, the unread characters will be read again in &#8220;last-in, first-out&#8221; order (i.e. a stack). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, the current input port is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unread_002dstring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unread-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str port</EM></DT>
<DD>
<P>Place the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that its characters will be read in subsequent read operations. If called multiple times, the unread characters will be read again in last-in first-out order. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, the current-input-port is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pipe-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pipe</STRONG></DT>
<DT><A name=index-scm_005fpipe></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-pipe></A>
<P>Return a newly created pipe: a pair of ports which are linked together on the local machine. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CAR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the input port and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CDR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the output port. Data written (and flushed) to the output port can be read from the input port. Pipes are commonly used for communication with a newly forked child process. The need to flush the output port can be avoided by making it unbuffered using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setvbuf</CODE>.</P>
<DL>
<DT><A name=index-PIPE_005fBUF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>PIPE_BUF</STRONG></DT>
<DD>
<P>A write of up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PIPE_BUF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>many bytes to a pipe is atomic, meaning when done it goes into the pipe instantaneously and as a contiguous block (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Pipe-Atomicity">Atomicity of Pipe I/O</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<P>Note that the output port is likely to block if too much data has been written but not yet read from the input port. Typically the capacity is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PIPE_BUF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The next group of procedures perform a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an integer) is supplied, otherwise a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup</CODE>. The file descriptor to be duplicated can be supplied as an integer or contained in a port. The type of value returned varies depending on which procedure is used.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All procedures also have the side effect when performing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that any ports using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are moved to a different file descriptor and have their revealed counts set to zero.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup_002d_003efdes></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup-&gt;fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fd_or_port [fd]</EM></DT>
<DT><A name=index-scm_005fdup_005fto_005ffdes></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dup_to_fdes</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fd_or_port, fd)</EM></DT>
<DD>
<P>Return a new integer file descriptor referring to the open file designated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd_or_port</VAR>, which must be either an open file port or a file descriptor.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup_002d_003einport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup-&gt;inport</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port/fd [newfd]</EM></DT>
<DD>
<P>Returns a new input port using the new file descriptor.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup_002d_003eoutport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup-&gt;outport</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port/fd [newfd]</EM></DT>
<DD>
<P>Returns a new output port using the new file descriptor.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port/fd [newfd]</EM></DT>
<DD>
<P>Returns a new port if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port/fd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port, with the same mode as the supplied port, otherwise returns an integer file descriptor.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup_002d_003eport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup-&gt;port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port/fd mode [newfd]</EM></DT>
<DD>
<P>Returns a new port using the new file descriptor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>supplies a mode string for the port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">open-file</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-duplicate_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>duplicate-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port modes</EM></DT>
<DD>
<P>Returns a new port which is opened on a duplicate of the file descriptor underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, with mode string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">open-file</A>. The two ports will share a file position and file status flags.</P>
<P>Unexpected behaviour can result if both ports are subsequently used and the original and/or duplicate ports are buffered. The mode string can include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to obtain an unbuffered duplicate port.</P>
<P>This procedure is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(dup-&gt;port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modes</VAR>)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-redirect_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>redirect-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>old_port new_port</EM></DT>
<DT><A name=index-scm_005fredirect_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_redirect_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(old_port, new_port)</EM></DT>
<DD>
<P>This procedure takes two ports and duplicates the underlying file descriptor from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old_port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_port</VAR>. The current file descriptor in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be closed. After the redirection the two ports will share a file position and file status flags.</P>
<P>The return value is unspecified.</P>
<P>Unexpected behaviour can result if both ports are subsequently used and the original and/or duplicate ports are buffered.</P>
<P>This procedure does not have any side effects on other ports or revealed counts.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dup2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dup2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldfd newfd</EM></DT>
<DT><A name=index-scm_005fdup2></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dup2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldfd, newfd)</EM></DT>
<DD>
<P>A simple wrapper for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call. Copies the file descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldfd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to descriptor number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR>, replacing the previous meaning of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR>. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldfd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be integers. Unlike for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup-&gt;fdes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-move-&gt;fdes</CODE>, no attempt is made to move away ports which are using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfd</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dmode-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Return the port modes associated with the open port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. These will not necessarily be identical to the modes used when the port was opened, since modes such as &#8220;append&#8221; which are used only during port creation are not retained.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-scm_005fport_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM proc)</EM></DT>
<DT><A name=index-scm_005fc_005fport_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_port_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void (*proc)(void *, SCM), void *data)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each port in the Guile port table (FIXME: what is the Guile port table?) in turn. The return value is unspecified. More specifically,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied exactly once to every port that exists in the system at the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked. Changes to the port table while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is running have no effect as far as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is concerned.</P>
<P>The C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_port_for_each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a Scheme procedure encoded as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_port_for_each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a pointer to a C function and passes along a arbitrary<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cookie.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setvbuf></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setvbuf</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port mode [size]</EM></DT>
<DT><A name=index-scm_005fsetvbuf></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setvbuf</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, mode, size)</EM></DT>
<DD><A name=index-port-buffering></A>
<P>Set the buffering mode for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be:</P>
<DL>
<DT><A name=index-_005fIONBF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>_IONBF</STRONG></DT>
<DD>
<P>non-buffered</P></DD></DL>
<DL>
<DT><A name=index-_005fIOLBF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>_IOLBF</STRONG></DT>
<DD>
<P>line buffered</P></DD></DL>
<DL>
<DT><A name=index-_005fIOFBF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>_IOFBF</STRONG></DT>
<DD>
<P>block buffered, using a newly allocated buffer of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, a default size will be used.</P></DD></DL>
<P>Only certain types of ports are supported, most importantly file ports.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fcntl></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fcntl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port/fd cmd [value]</EM></DT>
<DT><A name=index-scm_005ffcntl></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fcntl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object, cmd, value)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cmd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port/fd</VAR>, either a port or file descriptor. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands described below, it&#8217;s an integer value.</P>
<P>Values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cmd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are:</P>
<DL>
<DT><A name=index-F_005fDUPFD></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_DUPFD</STRONG></DT>
<DD>
<P>Duplicate the file descriptor, the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dup-&gt;fdes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above does.</P></DD></DL>
<DL>
<DT><A name=index-F_005fGETFD></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_GETFD</STRONG></DT>
<DT><A name=index-F_005fSETFD></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_SETFD</STRONG></DT>
<DD>
<P>Get or set flags associated with the file descriptor. The only flag is the following,</P>
<DL>
<DT><A name=index-FD_005fCLOEXEC></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>FD_CLOEXEC</STRONG></DT>
<DD>
<P>&#8220;Close on exec&#8221;, meaning the file descriptor will be closed on an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call (a successful such call). For example to set that flag,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(fcntl port F_SETFD FD_CLOEXEC)
</PRE></DIV>
<P>Or better, set it but leave any other possible future flags unchanged,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(fcntl port F_SETFD (logior FD_CLOEXEC
                            (fcntl port F_GETFD)))
</PRE></DIV></DD></DL></DD></DL>
<DL>
<DT><A name=index-F_005fGETFL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_GETFL</STRONG></DT>
<DT><A name=index-F_005fSETFL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_SETFL</STRONG></DT>
<DD>
<P>Get or set flags associated with the open file. These flags are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O_RDONLY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc described under<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above.</P>
<P>A common use is to set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O_NONBLOCK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a network socket. The following sets that flag, and leaves other flags unchanged.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(fcntl sock F_SETFL (logior O_NONBLOCK
                            (fcntl sock F_GETFL)))
</PRE></DIV></DD></DL>
<DL>
<DT><A name=index-F_005fGETOWN></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_GETOWN</STRONG></DT>
<DT><A name=index-F_005fSETOWN></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_SETOWN</STRONG></DT>
<DD>
<P>Get or set the process ID of a socket&#8217;s owner, for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGIO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>signals.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flock></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flock</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file operation</EM></DT>
<DT><A name=index-scm_005fflock></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_flock</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(file, operation)</EM></DT>
<DD><A name=index-file-locking></A>
<P>Apply or remove an advisory lock on an open file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>operation</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the action to be done:</P>
<DL>
<DT><A name=index-LOCK_005fSH></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LOCK_SH</STRONG></DT>
<DD>
<P>Shared lock. More than one process may hold a shared lock for a given file at a given time.</P></DD></DL>
<DL>
<DT><A name=index-LOCK_005fEX></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LOCK_EX</STRONG></DT>
<DD>
<P>Exclusive lock. Only one process may hold an exclusive lock for a given file at a given time.</P></DD></DL>
<DL>
<DT><A name=index-LOCK_005fUN></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LOCK_UN</STRONG></DT>
<DD>
<P>Unlock the file.</P></DD></DL>
<DL>
<DT><A name=index-LOCK_005fNB></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LOCK_NB</STRONG></DT>
<DD>
<P>Don&#8217;t block when locking. This is combined with one of the other operations using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would block an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EWOULDBLOCK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>error is thrown (see<A href="https://www.gnu.org/software/guile/manual/guile.html#Conventions">Conventions</A>).</P></DD></DL>
<P>The return value is not specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be an open file descriptor or an open file descriptor port.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not lock files across NFS.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-select></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>select</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>reads writes excepts [secs [usecs]]</EM></DT>
<DT><A name=index-scm_005fselect></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_select</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(reads, writes, excepts, secs, usecs)</EM></DT>
<DD>
<P>This procedure has a variety of uses: waiting for the ability to provide input, accept output, or the existence of exceptional conditions on a collection of ports or file descriptors, or waiting for a timeout to occur. It also returns if interrupted by a signal.</P>
<P><VAR>reads</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>writes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>excepts</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be lists or vectors, with each member a port or a file descriptor. The value returned is a list of three corresponding lists or vectors containing only the members which meet the specified requirement. The ability of port buffers to provide input or accept output is taken into account. Ordering of the input lists or vectors is not preserved.</P>
<P>The optional arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>usecs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specify the timeout. Either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be specified alone, as either an integer or a real number, or both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>usecs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be specified as integers, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>usecs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an additional timeout expressed in microseconds. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted or is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then select will wait for as long as it takes for one of the other conditions to be satisfied.</P>
<P>The scsh version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>select</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>differs as follows: Only vectors are accepted for the first three arguments. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>usecs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is not supported. Multiple values are returned instead of a list. Duplicates in the input vectors appear only once in output. An additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>select!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interface is provided.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-System></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#User-Information" rel=next>User Information</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors" rel=prev>Ports and File Descriptors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-System-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.3 File System</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-file-system></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures allow querying and setting file system attributes (such as owner, permissions, sizes and types of files); deleting, copying, renaming and linking files; creating and removing directories and querying their contents; syncing the file system and creating special files.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-access_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>access?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path how</EM></DT>
<DT><A name=index-scm_005faccess></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_access</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, how)</EM></DT>
<DD>
<P>Test accessibility of a file under the real UID and GID of the calling process. The return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exists and the permissions requested by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>how</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are all allowed, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P>
<P><VAR>how</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer which is one of the following values, or a bitwise-OR (<CODE>logior</CODE>) of multiple values.</P>
<DL>
<DT><A name=index-R_005fOK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>R_OK</STRONG></DT>
<DD>
<P>Test for read permission.</P></DD></DL>
<DL>
<DT><A name=index-W_005fOK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>W_OK</STRONG></DT>
<DD>
<P>Test for write permission.</P></DD></DL>
<DL>
<DT><A name=index-X_005fOK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>X_OK</STRONG></DT>
<DD>
<P>Test for execute permission.</P></DD></DL>
<DL>
<DT><A name=index-F_005fOK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>F_OK</STRONG></DT>
<DD>
<P>Test for existence of the file. This is implied by each of the other tests, so there&#8217;s no need to combine it with them.</P></DD></DL>
<P>It&#8217;s important to note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>access?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not simply indicate what will happen on attempting to read or write a file. In normal circumstances it does, but in a set-UID or set-GID program it doesn&#8217;t because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>access?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tests the real ID, whereas an open or execute attempt uses the effective ID.</P>
<P>A program which will never run set-UID/GID can ignore the difference between real and effective IDs, but for maximum generality, especially in library functions, it&#8217;s best not to use<CODE>access?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to predict the result of an open or execute, instead simply attempt that and catch any exception.</P>
<P>The main use for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>access?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to let a set-UID/GID program determine what the invoking user would have been allowed to do, without the greater (or perhaps lesser) privileges afforded by the effective ID. For more on this, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Access">Testing File Access</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fstat></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DT><A name=index-scm_005fstat></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_stat</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object)</EM></DT>
<DD>
<P>Return an object containing various information about the file determined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a string containing a file name or a port or integer file descriptor which is open on a file (in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used as the underlying system call).</P>
<P>The object returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be passed as a single parameter to the following procedures, all of which return integers:</P>
<DL>
<DT><A name=index-stat_003adev></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:dev</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The device number containing the file.</P></DD></DL>
<DL>
<DT><A name=index-stat_003aino></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:ino</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The file serial number, which distinguishes this file from all other files on the same device.</P></DD></DL>
<DL>
<DT><A name=index-stat_003amode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The mode of the file. This is an integer which incorporates file type information and file permission bits. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:perms</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.</P></DD></DL>
<DL>
<DT><A name=index-stat_003anlink></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:nlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The number of hard links to the file.</P></DD></DL>
<DL>
<DT><A name=index-stat_003auid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:uid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The user ID of the file&#8217;s owner.</P></DD></DL>
<DL>
<DT><A name=index-stat_003agid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:gid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The group ID of the file.</P></DD></DL>
<DL>
<DT><A name=index-stat_003ardev></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:rdev</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>Device ID; this entry is defined only for character or block special files. On some systems this field is not available at all, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:rdev</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL>
<DT><A name=index-stat_003asize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The size of a regular file in bytes.</P></DD></DL>
<DL>
<DT><A name=index-stat_003aatime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:atime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The last access time for the file, in seconds.</P></DD></DL>
<DL>
<DT><A name=index-stat_003amtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:mtime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The last modification time for the file, in seconds.</P></DD></DL>
<DL>
<DT><A name=index-stat_003actime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:ctime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The last modification time for the attributes of the file, in seconds.</P></DD></DL>
<DL>
<DT><A name=index-stat_003aatimensec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:atimensec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DT><A name=index-stat_003amtimensec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:mtimensec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DT><A name=index-stat_003actimensec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:ctimensec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The fractional part of a file&#8217;s access, modification, or attribute modification time, in nanoseconds. Nanosecond timestamps are only available on some operating systems and file systems. If Guile cannot retrieve nanosecond-level timestamps for a file, these fields will be set to 0.</P></DD></DL>
<DL>
<DT><A name=index-stat_003ablksize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:blksize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The optimal block size for reading or writing the file, in bytes. On some systems this field is not available, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:blksize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a sensible suggested block size.</P></DD></DL>
<DL>
<DT><A name=index-stat_003ablocks></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:blocks</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>The amount of disk space that the file occupies measured in units of 512 byte blocks. On some systems this field is not available, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:blocks</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P>In addition, the following procedures return the information from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat:mode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a more convenient form:</P>
<DL>
<DT><A name=index-stat_003atype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>A symbol representing the type of file. Possible values are &#8216;<SAMP>regular</SAMP>&#8217;, &#8216;<SAMP>directory</SAMP>&#8217;, &#8216;<SAMP>symlink</SAMP>&#8217;, &#8216;<SAMP>block-special</SAMP>&#8217;, &#8216;<SAMP>char-special</SAMP>&#8217;, &#8216;<SAMP>fifo</SAMP>&#8217;, &#8216;<SAMP>socket</SAMP>&#8217;, and &#8216;<SAMP>unknown</SAMP>&#8217;.</P></DD></DL>
<DL>
<DT><A name=index-stat_003aperms></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stat:perms</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>st</EM></DT>
<DD>
<P>An integer representing the access permission bits.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lstat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lstat</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path</EM></DT>
<DT><A name=index-scm_005flstat></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lstat</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat</CODE>, but does not follow symbolic links, i.e., it will return information about a symbolic link itself, not the file it points to.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-readlink></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path</EM></DT>
<DT><A name=index-scm_005freadlink></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_readlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path)</EM></DT>
<DD>
<P>Return the value of the symbolic link named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a string), i.e., the file that the link points to.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fchown></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-lchown></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-chown></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>chown</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object owner group</EM></DT>
<DT><A name=index-scm_005fchown></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_chown</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object, owner, group)</EM></DT>
<DD>
<P>Change the ownership and group of the file referred to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the integer values<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>owner</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>group</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a string containing a file name or, if the platform supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fchown</CODE>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner">File Owner</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>), a port or integer file descriptor which is open on the file. The return value is unspecified.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbolic link, either the ownership of the link or the ownership of the referenced file will be changed depending on the operating system (lchown is unsupported at present). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>owner</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>group</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-1</CODE>, then that ID is not changed.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fchmod></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-chmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>chmod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object mode</EM></DT>
<DT><A name=index-scm_005fchmod></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_chmod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object, mode)</EM></DT>
<DD>
<P>Changes the permissions of the file referred to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a string containing a file name or a port or integer file descriptor which is open on a file (in which case<CODE>fchmod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used as the underlying system call).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the new permissions as a decimal number, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(chmod "foo" #o755)</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-utime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pathname [actime [modtime [actimens [modtimens [flags]]]]]</EM></DT>
<DT><A name=index-scm_005futime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_utime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pathname, actime, modtime, actimens, modtimens, flags)</EM></DT>
<DD>
<P><CODE>utime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the access and modification times for the file named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pathname</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>actime</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modtime</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, then the current time is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>actime</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modtime</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be integer time values as returned by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure.</P>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>actimens</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modtimens</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are nanoseconds to add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>actime</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modtime</VAR>. Nanosecond precision is only supported on some combinations of file systems and operating systems.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(utime "foo" (- (current-time) 3600))
</PRE></DIV>
<P>will set the access time to one hour in the past and the modification time to the current time.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-unlink></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delete_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fdelete_005ffile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delete_file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Deletes (or &#8220;unlinks&#8221;) the file whose path is specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldfile newfile</EM></DT>
<DT><A name=index-scm_005fcopy_005ffile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_copy_file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldfile, newfile)</EM></DT>
<DD>
<P>Copy the file specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldfile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newfile</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sendfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sendfile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>out in count [offset]</EM></DT>
<DT><A name=index-scm_005fsendfile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sendfile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(out, in, count, offset)</EM></DT>
<DD>
<P>Send<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out</VAR>, both of which must be either open file ports or file descriptors. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, start reading from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in</VAR>&#8217;s current position; otherwise, start reading at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>. Return the number of bytes actually sent.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port, it is often preferable to specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in</VAR>&#8217;s offset as a port may be different from the offset of its underlying file descriptor.</P>
<P>On systems that support it, such as GNU/Linux, this procedure uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sendfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>libc function, which usually corresponds to a system call. This is faster than doing a series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system calls. A typical application is to send a file over a socket.</P>
<P>In some cases, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sendfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>libc function may return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EINVAL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ENOSYS</CODE>. In that case, Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sendfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure automatically falls back to doing a series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls.</P>
<P>In other cases, the libc function may send fewer bytes than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>&#8212;for instance because<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a slow or limited device, such as a pipe. When that happens, Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sendfile</CODE>automatically retries until exactly<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes were sent or an error occurs.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-rename></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rename_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rename-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldname newname</EM></DT>
<DT><A name=index-scm_005frename></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_rename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldname, newname)</EM></DT>
<DD>
<P>Renames the file specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newname</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-link></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>link</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldpath newpath</EM></DT>
<DT><A name=index-scm_005flink></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_link</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldpath, newpath)</EM></DT>
<DD>
<P>Creates a new name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newpath</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the file system for the file named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldpath</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldpath</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbolic link, the link may or may not be followed depending on the system.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symlink></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldpath newpath</EM></DT>
<DT><A name=index-scm_005fsymlink></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symlink</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldpath, newpath)</EM></DT>
<DD>
<P>Create a symbolic link named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newpath</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the value (i.e., pointing to)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldpath</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mkdir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mkdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path [mode]</EM></DT>
<DT><A name=index-scm_005fmkdir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mkdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, mode)</EM></DT>
<DD>
<P>Create a new directory named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted then the permissions of the directory file are set using the current umask (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>). Otherwise they are set to the decimal value specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rmdir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rmdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path</EM></DT>
<DT><A name=index-scm_005frmdir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_rmdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path)</EM></DT>
<DD>
<P>Remove the existing directory named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>. The directory must be empty for this to succeed. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-opendir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>opendir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dirname</EM></DT>
<DT><A name=index-scm_005fopendir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_opendir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(dirname)</EM></DT>
<DD><A name=index-directory-contents></A>
<P>Open the directory specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dirname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return a directory stream.</P>
<P>Before using this and the procedures below, make sure to see the higher-level procedures for directory traversal that are available (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Tree-Walk">File Tree Walk</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-directory_002dstream_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>directory-stream?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object</EM></DT>
<DT><A name=index-scm_005fdirectory_005fstream_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_directory_stream_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(object)</EM></DT>
<DD>
<P>Return a boolean indicating whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>object</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a directory stream as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>opendir</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-readdir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DT><A name=index-scm_005freaddir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_readdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stream)</EM></DT>
<DD>
<P>Return (as a string) the next directory entry from the directory stream<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. If there is no remaining entry to be read then the end of file object is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rewinddir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rewinddir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DT><A name=index-scm_005frewinddir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_rewinddir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stream)</EM></DT>
<DD>
<P>Reset the directory port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that the next call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readdir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the first directory entry.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-closedir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>closedir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stream</EM></DT>
<DT><A name=index-scm_005fclosedir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_closedir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stream)</EM></DT>
<DD>
<P>Close the directory stream<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stream</VAR>. The return value is unspecified.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example showing how to display all the entries in a directory:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define dir (opendir "/usr/lib"))
(do ((entry (readdir dir) (readdir dir)))
    ((eof-object? entry))
  (display entry)(newline))
(closedir dir)
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sync></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sync</STRONG></DT>
<DT><A name=index-scm_005fsync></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sync</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Flush the operating system disk buffers. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mknod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mknod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path type perms dev</EM></DT>
<DT><A name=index-scm_005fmknod></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mknod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path, type, perms, dev)</EM></DT>
<DD><A name=index-device-file></A>
<P>Creates a new special file, such as a file corresponding to a device.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the name of the file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the following symbols: &#8216;<SAMP>regular</SAMP>&#8217;, &#8216;<SAMP>directory</SAMP>&#8217;, &#8216;<SAMP>symlink</SAMP>&#8217;, &#8216;<SAMP>block-special</SAMP>&#8217;, &#8216;<SAMP>char-special</SAMP>&#8217;, &#8216;<SAMP>fifo</SAMP>&#8217;, or &#8216;<SAMP>socket</SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>perms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an integer) specifies the file permissions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dev</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an integer) specifies which device the special file refers to. Its exact interpretation depends on the kind of special file being created.</P>
<P>E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(mknod "/dev/fd0" 'block-special #o660 (+ (* 2 256) 2))
</PRE></DIV>
<P>The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tmpnam></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tmpnam</STRONG></DT>
<DT><A name=index-scm_005ftmpnam></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_tmpnam</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-temporary-file></A>
<P>Return an auto-generated name of a temporary file, a file which doesn&#8217;t already exist. The name includes a path, it&#8217;s usually in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/tmp</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but that&#8217;s system dependent.</P>
<P>Care must be taken when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tmpnam</CODE>. In between choosing the name and creating the file another program might use that name, or an attacker might even make it a symlink pointing at something important and causing you to overwrite that.</P>
<P>The safe way is to create the file using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O_EXCL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid any overwriting. A loop can try again with another name if the file exists (error<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EEXIST</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mkstemp!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below does that.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mkstemp_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mkstemp!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tmpl</EM></DT>
<DT><A name=index-scm_005fmkstemp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mkstemp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(tmpl)</EM></DT>
<DD><A name=index-temporary-file-1></A>
<P>Create a new unique file in the file system and return a new buffered port open for reading and writing to the file.</P>
<P><VAR>tmpl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string specifying where the file should be created: it must end with &#8216;<SAMP>XXXXXX</SAMP>&#8217; and those &#8216;<SAMP>X</SAMP>&#8217;s will be changed in the string to return the name of the file. (<CODE>port-filename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the port also gives the name.)</P>
<P>POSIX doesn&#8217;t specify the permissions mode of the file, on GNU and most systems it&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#o600</CODE>. An application can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chmod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to relax that if desired. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#o666</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>less<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>umask</CODE>, which is usual for ordinary file creation,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let ((port (mkstemp! (string-copy "/tmp/myfile-XXXXXX"))))
  (chmod port (logand #o666 (lognot (umask))))
  ...)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tmpfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tmpfile</STRONG></DT>
<DT><A name=index-scm_005ftmpfile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_tmpfile</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an input/output port to a unique temporary file named using the path prefix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>P_tmpdir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>stdio.h</SAMP>. The file is automatically deleted when the port is closed or the program terminates.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dirname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dirname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-scm_005fdirname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dirname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename)</EM></DT>
<DD>
<P>Return the directory name component of the file name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain a directory component,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-basename></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>basename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename [suffix]</EM></DT>
<DT><A name=index-scm_005fbasename></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_basename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, suffix)</EM></DT>
<DD>
<P>Return the base name of the file name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>. The base name is the file name without any directory components. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>suffix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, and is equal to the end of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>basename</VAR>, it is removed also.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(basename "/tmp/test.xml" ".xml")
&#8658; "test"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002dexists_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-exists?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exists,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-file-name-separator></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-absolute-file-name></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many operating systems, such as GNU, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(forward slash) to separate the components of a file name; any file name starting with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is considered an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>absolute file name</EM>. These conventions are specified by the POSIX Base Definitions, which refer to conforming file names as &#8220;pathnames&#8221;. Some operating systems use a different convention; in particular, Windows uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE>(backslash) as the file name separator, and also has the notion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>volume names</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C:\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for absolute file names. The following procedures and variables provide support for portable file name manipulations.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-system_002dfile_002dname_002dconvention></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>system-file-name-convention</STRONG></DT>
<DD>
<P>Return either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>posix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>windows</CODE>, depending on what kind of system this Guile is running on.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002dname_002dseparator_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-name-separator?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>c</EM></DT>
<DD>
<P>Return true if character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a file name separator on the host platform.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-absolute_002dfile_002dname_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>absolute-file-name?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file-name</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>denotes an absolute file name on the host platform.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002dname_002dseparator_002dstring></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-name-separator-string</STRONG></DT>
<DD>
<P>The preferred file name separator.</P>
<P>Note that on MinGW builds for Windows, both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are valid separators. Thus, programs should not assume that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-name-separator-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>only</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>file name separator&#8212;e.g., when extracting the components of a file name.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=User-Information></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Time" rel=next>Time</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#File-System" rel=prev>File System</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=User-Information-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.4 User Information</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-user-information></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-password-file></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-group-file></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The facilities in this section provide an interface to the user and group database. They should be used with care since they are not reentrant.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept an object representing user information and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The name of the userid.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003apasswd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:passwd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The encrypted passwd.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003auid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:uid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The user id number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003agid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:gid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The group id number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003agecos></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:gecos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The full name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003adir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:dir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The home directory.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-passwd_003ashell></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>passwd:shell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pw</EM></DT>
<DD>
<P>The login shell.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpwuid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpwuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uid</EM></DT>
<DD>
<P>Look up an integer userid in the user database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpwnam></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpwnam</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Look up a user name string in the user database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setpwent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setpwent</STRONG></DT>
<DD>
<P>Initializes a stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getpwent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to read from the user database. The next use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getpwent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the first entry. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpwent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpwent</STRONG></DT>
<DD>
<P>Read the next entry in the user database stream. The return is a passwd user object as above, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when no more entries.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endpwent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endpwent</STRONG></DT>
<DD>
<P>Closes the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getpwent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setpw></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setpw</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[arg]</EM></DT>
<DT><A name=index-scm_005fsetpwent></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setpwent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(arg)</EM></DT>
<DD>
<P>If called with a true argument, initialize or reset the password data stream. Otherwise, close the stream. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setpwent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endpwent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures are implemented on top of this.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpw></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpw</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[user]</EM></DT>
<DT><A name=index-scm_005fgetpwuid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpwuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(user)</EM></DT>
<DD>
<P>Look up an entry in the user database.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>user</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be an integer, a string, or omitted, giving the behaviour of getpwuid, getpwnam or getpwent respectively.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept an object representing group information and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-group_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>group:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gr</EM></DT>
<DD>
<P>The group name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-group_003apasswd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>group:passwd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gr</EM></DT>
<DD>
<P>The encrypted group password.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-group_003agid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>group:gid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gr</EM></DT>
<DD>
<P>The group id number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-group_003amem></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>group:mem</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gr</EM></DT>
<DD>
<P>A list of userids which have this group as a supplementary group.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgrgid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgrgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gid</EM></DT>
<DD>
<P>Look up an integer group id in the group database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgrnam></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgrnam</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Look up a group name in the group database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setgrent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setgrent</STRONG></DT>
<DD>
<P>Initializes a stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getgrent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to read from the group database. The next use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getgrent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the first entry. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgrent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgrent</STRONG></DT>
<DD>
<P>Return the next entry in the group database, using the stream set by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setgrent</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endgrent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endgrent</STRONG></DT>
<DD>
<P>Closes the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getgrent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setgr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setgr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[arg]</EM></DT>
<DT><A name=index-scm_005fsetgrent></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setgrent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(arg)</EM></DT>
<DD>
<P>If called with a true argument, initialize or reset the group data stream. Otherwise, close the stream. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setgrent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endgrent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures are implemented on top of this.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[group]</EM></DT>
<DT><A name=index-scm_005fgetgrgid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getgrgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(group)</EM></DT>
<DD>
<P>Look up an entry in the group database.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>group</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be an integer, a string, or omitted, giving the behaviour of getgrgid, getgrnam or getgrent respectively.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the accessor procedures for the user database, the following shortcut procedure is also available.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getlogin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getlogin</STRONG></DT>
<DT><A name=index-scm_005fgetlogin></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getlogin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a string containing the name of the user logged in on the controlling terminal of the process, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if this information cannot be obtained.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment" rel=next>Runtime Environment</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#User-Information" rel=prev>User Information</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Time-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.5 Time</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-time></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-time</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005ftime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the number of seconds since 1970-01-01 00:00:00<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>UTC</ACRONYM>, excluding leap seconds.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gettimeofday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gettimeofday</STRONG></DT>
<DT><A name=index-scm_005fgettimeofday></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gettimeofday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a pair containing the number of seconds and microseconds since 1970-01-01 00:00:00<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>UTC</ACRONYM>, excluding leap seconds. Note: whether true microsecond resolution is available depends on the operating system.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures either accept an object representing a broken down time and return a selected component, or accept an object representing a broken down time and a value and set the component to the value. The numbers in parentheses give the usual range.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003asec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:sec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003asec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:sec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Seconds (0-59).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003amin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:min</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003amin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:min</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Minutes (0-59).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003ahour></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:hour</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003ahour></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:hour</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Hours (0-23).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003amday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:mday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003amday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:mday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Day of the month (1-31).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003amon></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:mon</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003amon></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:mon</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Month (0-11).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003ayear></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:year</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003ayear></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:year</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Year (70-), the year minus 1900.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003awday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:wday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003awday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:wday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Day of the week (0-6) with Sunday represented as 0.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003ayday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:yday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003ayday></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:yday</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Day of the year (0-364, 365 in leap years).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003aisdst></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:isdst</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003aisdst></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:isdst</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Daylight saving indicator (0 for &#8220;no&#8221;, greater than 0 for &#8220;yes&#8221;, less than 0 for &#8220;unknown&#8221;).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003agmtoff></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:gmtoff</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003agmtoff></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:gmtoff</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Time zone offset in seconds west of<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>UTC</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(-46800 to 43200). For example on East coast USA (zone &#8216;<SAMP>EST+5</SAMP>&#8217;) this would be 18000 (ie.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>5*60*60</EM>) in winter, or 14400 (ie.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>4*60*60</EM>) during daylight savings.</P>
<P>Note<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:gmtoff</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm_gmtoff</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm_gmtoff</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is seconds east and hence the negative of the value here.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tm_003azone></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tm:zone</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm</EM></DT>
<DT><A name=index-set_002dtm_003azone></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-tm:zone</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tm val</EM></DT>
<DD>
<P>Time zone label (a string), not necessarily unique.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-localtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>localtime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time [zone]</EM></DT>
<DT><A name=index-scm_005flocaltime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_localtime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(time, zone)</EM></DT>
<DD><A name=index-local-time></A>
<P>Return an object representing the broken down components of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR>, an integer like the one returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE>. The time zone for the calculation is optionally specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a string), otherwise the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable or the system default is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gmtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gmtime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>time</EM></DT>
<DT><A name=index-scm_005fgmtime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gmtime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(time)</EM></DT>
<DD>
<P>Return an object representing the broken down components of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR>, an integer like the one returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE>. The values are calculated for<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>UTC</ACRONYM>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-mktime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mktime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sbd-time [zone]</EM></DT>
<DT><A name=index-scm_005fmktime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_mktime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sbd_time, zone)</EM></DT>
<DD>
<P>For a broken down time object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR>, return a pair the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of which is an integer time like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-time</CODE>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of which is a new broken down time with normalized fields.</P>
<P><VAR>zone</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a timezone string, or the default is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable or the system default (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#TZ-Variable">Specifying the Time Zone with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TZ</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU C Library Reference Manual</CITE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is taken to be in that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR>.</P>
<P>The following fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:year</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:mon</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:mday</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:hour</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:min</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:sec</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:isdst</CODE>. The values can be outside their usual ranges. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tm:hour</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>normally goes up to 23, but a value say 33 would mean 9 the following day.</P>
<P><CODE>tm:isdst</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>says whether the time given is with daylight savings or not. This is ignored if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t have any daylight savings adjustment amount.</P>
<P>The broken down time in the return normalizes the values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by bringing them into their usual ranges, and using the actual daylight savings rule for that time in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which may differ from what<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>had). The easiest way to think of this is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sbd-time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts to the integer UTC time, then a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localtime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to get the normal presentation of that time, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>zone</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tzset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tzset</STRONG></DT>
<DT><A name=index-scm_005ftzset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_tzset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Initialize the timezone from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable or the system default. It&#8217;s not usually necessary to call this procedure since it&#8217;s done automatically by other procedures that depend on the timezone.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-strftime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>strftime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>format tm</EM></DT>
<DT><A name=index-scm_005fstrftime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_strftime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(format, tm)</EM></DT>
<DD><A name=index-time-formatting></A>
<P>Return a string which is broken-down time structure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tm</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>formatted according to the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string.</P>
<P><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains field specifications introduced by a &#8216;<SAMP>%</SAMP>&#8217; character. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Formatting-Calendar-Time">Formatting Calendar Time</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>, or &#8216;<SAMP>man 3 strftime</SAMP>&#8217;, for the available formatting.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(strftime "%c" (localtime (current-time)))
&#8658; "Mon Mar 11 20:17:43 2002"
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been called (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>), month and day names are from the current locale and in the locale character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-strptime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>strptime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>format string</EM></DT>
<DT><A name=index-scm_005fstrptime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_strptime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(format, string)</EM></DT>
<DD><A name=index-time-parsing></A>
<P>Performs the reverse action to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>, parsing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the specification supplied in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR>. The interpretation of month and day names is dependent on the current locale. The value returned is a pair. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CAR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>has an object with time components in the form returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localtime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gmtime</CODE>, but the time zone components are not usefully set. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CDR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports the number of characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which were used for the conversion.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-internal_002dtime_002dunits_002dper_002dsecond></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>internal-time-units-per-second</STRONG></DT>
<DD>
<P>The value of this variable is the number of time units per second reported by the following procedures.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-times></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>times</STRONG></DT>
<DT><A name=index-scm_005ftimes></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_times</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an object with information about real and processor time. The following procedures accept such an object as an argument and return a selected component:</P>
<DL>
<DT><A name=index-tms_003aclock></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tms:clock</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tms</EM></DT>
<DD>
<P>The current real time, expressed as time units relative to an arbitrary base.</P></DD></DL>
<DL>
<DT><A name=index-tms_003autime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tms:utime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tms</EM></DT>
<DD>
<P>The CPU time units used by the calling process.</P></DD></DL>
<DL>
<DT><A name=index-tms_003astime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tms:stime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tms</EM></DT>
<DD>
<P>The CPU time units used by the system on behalf of the calling process.</P></DD></DL>
<DL>
<DT><A name=index-tms_003acutime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tms:cutime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tms</EM></DT>
<DD>
<P>The CPU time units used by terminated child processes of the calling process, whose status has been collected (e.g., using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE>).</P></DD></DL>
<DL>
<DT><A name=index-tms_003acstime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tms:cstime</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tms</EM></DT>
<DD>
<P>Similarly, the CPU times units used by the system on behalf of terminated child processes.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dinternal_002dreal_002dtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-internal-real-time</STRONG></DT>
<DT><A name=index-scm_005fget_005finternal_005freal_005ftime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_internal_real_time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the number of time units since the interpreter was started.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dinternal_002drun_002dtime></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-internal-run-time</STRONG></DT>
<DT><A name=index-scm_005fget_005finternal_005frun_005ftime></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_internal_run_time</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the number of time units of processor time used by the interpreter. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>system</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>user</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>time are included but subprocesses are not.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Runtime-Environment></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Processes" rel=next>Processes</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Time" rel=prev>Time</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Runtime-Environment-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.6 Runtime Environment</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-program_002darguments></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>program-arguments</STRONG></DT>
<DT><A name=index-command_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>command-line</STRONG></DT>
<DT><A name=index-set_002dprogram_002darguments></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-program-arguments</STRONG></DT>
<DT><A name=index-scm_005fprogram_005farguments></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_program_arguments</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DT><A name=index-scm_005fset_005fprogram_005farguments_005fscm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_program_arguments_scm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD><A name=index-command-line></A><A name=index-program-arguments></A>
<P>Get the command line arguments passed to Guile, or set new arguments.</P>
<P>The arguments are a list of strings, the first of which is the invoked program name. This is just<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"guile"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or the executable path) when run interactively, or it&#8217;s the script name when running a script with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>-s</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Invoking-Guile">Invoking Guile</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>guile -L /my/extra/dir -s foo.scm abc def

(program-arguments) &#8658; ("foo.scm" "abc" "def")
</PRE></DIV>
<P><CODE>set-program-arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows a library module or similar to modify the arguments, for example to strip options it recognises, leaving the rest for the mainline.</P>
<P>The argument list is held in a fluid, which means it&#8217;s separate for each thread. Neither the list nor the strings within it are copied at any point and normally should not be mutated.</P>
<P>The two names<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>program-arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are an historical accident, they both do exactly the same thing. The name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_program_arguments_scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has an extra<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the end to avoid clashing with the C function below.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fset_005fprogram_005farguments></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_program_arguments</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int argc, char **argv, char *first)</EM></DT>
<DD><A name=index-command-line-1></A><A name=index-program-arguments-1></A>
<P>Set the list of command line arguments for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>program-arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>command-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above.</P>
<P><VAR>argv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array of null-terminated strings, as in a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of strings in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR>, or if it&#8217;s negative then a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>marks its end.</P>
<P><VAR>first</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an extra string put at the start of the arguments, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no such extra. This is a convenient way to pass the program name after advancing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to strip option arguments. Eg.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>{
  char *progname = argv[0];
  for (argv++; argv[0] != NULL &amp;&amp; argv[0][0] == '-'; argv++)
    {
      /* munch option ... */
    }
  /* remaining args for scheme level use */
  scm_set_program_arguments (-1, argv, progname);
}
</PRE></DIV>
<P>This sort of thing is often done at startup under<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_boot_guile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with options handled at the C level removed. The given strings are all copied, so the C data is not accessed again once<CODE>scm_set_program_arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getenv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DT><A name=index-scm_005fgetenv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name)</EM></DT>
<DD><A name=index-environment-2></A>
<P>Looks up the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current environment. The return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>unless a string of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME=VALUE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is found, in which case the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>VALUE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setenv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name value</EM></DT>
<DD>
<P>Modifies the environment of the current process, which is also the default environment inherited by child processes.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is removed from the environment. Otherwise, the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>=<VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is added to the environment, replacing any existing string with name matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>.</P>
<P>The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unsetenv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unsetenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Remove variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the environment. The name can not contain a &#8216;<SAMP>=</SAMP>&#8217; character.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-environ></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>environ</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[env]</EM></DT>
<DT><A name=index-scm_005fenviron></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_environ</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(env)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, return the current environment (in the Unix sense) as a list of strings. Otherwise set the current environment, which is also the default environment for child processes, to the supplied list of strings. Each member of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>=<VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not be duplicated. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied then the return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-putenv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>putenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fputenv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_putenv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Modifies the environment of the current process, which is also the default environment inherited by child processes.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME=VALUE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then it will be written directly into the environment, replacing any existing environment string with name matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain an equal sign, then any existing string with name matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be removed.</P>
<P>The return value is unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Processes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Signals" rel=next>Signals</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment" rel=prev>Runtime Environment</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Processes-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.7 Processes</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-processes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-child-processes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cd></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-chdir></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>chdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fchdir></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_chdir</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD><A name=index-current-directory></A>
<P>Change the current working directory to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The return value is unspecified.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pwd></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getcwd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getcwd</STRONG></DT>
<DT><A name=index-scm_005fgetcwd></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getcwd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the name of the current working directory.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-umask></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>umask</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[mode]</EM></DT>
<DT><A name=index-scm_005fumask></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_umask</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mode)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, returns a decimal number representing the current file creation mask. Otherwise the file creation mask is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the previous value is returned. See<A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Permissions">Assigning File Permissions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>, for more on how to use umasks.</P>
<P>E.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(umask #o022)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the mask to octal 22/decimal 18.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-chroot></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>chroot</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path</EM></DT>
<DT><A name=index-scm_005fchroot></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_chroot</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(path)</EM></DT>
<DD>
<P>Change the root directory to that specified in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR>. This directory will be used for path names beginning with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/</SAMP>. The root directory is inherited by all children of the current process. Only the superuser may change the root directory.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpid</STRONG></DT>
<DT><A name=index-scm_005fgetpid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current process ID.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgroups></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgroups</STRONG></DT>
<DT><A name=index-scm_005fgetgroups></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getgroups</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a vector of integers representing the current supplementary group IDs.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getppid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getppid</STRONG></DT>
<DT><A name=index-scm_005fgetppid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getppid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the process ID of the parent process.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getuid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getuid</STRONG></DT>
<DT><A name=index-scm_005fgetuid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current real user ID.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getgid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getgid</STRONG></DT>
<DT><A name=index-scm_005fgetgid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current real group ID.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-geteuid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>geteuid</STRONG></DT>
<DT><A name=index-scm_005fgeteuid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_geteuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current effective user ID. If the system does not support effective IDs, then the real ID is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(provided? 'EIDs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports whether the system supports effective IDs.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getegid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getegid</STRONG></DT>
<DT><A name=index-scm_005fgetegid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getegid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current effective group ID. If the system does not support effective IDs, then the real ID is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(provided? 'EIDs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports whether the system supports effective IDs.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setgroups></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setgroups</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fsetgroups></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setgroups</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Set the current set of supplementary group IDs to the integers in the given vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. The return value is unspecified.</P>
<P>Generally only the superuser can set the process group IDs (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Groups">Setting the Group IDs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setuid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id</EM></DT>
<DT><A name=index-scm_005fsetuid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id)</EM></DT>
<DD>
<P>Sets both the real and effective user IDs to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR>, provided the process has appropriate privileges. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setgid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id</EM></DT>
<DT><A name=index-scm_005fsetgid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id)</EM></DT>
<DD>
<P>Sets both the real and effective group IDs to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR>, provided the process has appropriate privileges. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-seteuid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>seteuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id</EM></DT>
<DT><A name=index-scm_005fseteuid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_seteuid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id)</EM></DT>
<DD>
<P>Sets the effective user ID to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR>, provided the process has appropriate privileges. If effective IDs are not supported, the real ID is set instead&#8212;<CODE>(provided? 'EIDs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports whether the system supports effective IDs. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setegid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setegid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id</EM></DT>
<DT><A name=index-scm_005fsetegid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setegid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id)</EM></DT>
<DD>
<P>Sets the effective group ID to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR>, provided the process has appropriate privileges. If effective IDs are not supported, the real ID is set instead&#8212;<CODE>(provided? 'EIDs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports whether the system supports effective IDs. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpgrp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpgrp</STRONG></DT>
<DT><A name=index-scm_005fgetpgrp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpgrp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an integer representing the current process group ID. This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>POSIX</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>definition, not<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>BSD</ACRONYM>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setpgid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setpgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid pgid</EM></DT>
<DT><A name=index-scm_005fsetpgid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setpgid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid, pgid)</EM></DT>
<DD>
<P>Move the process<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the process group<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pgid</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pgid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be integers: they can be zero to indicate the ID of the current process. Fails on systems that do not support job control. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setsid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setsid</STRONG></DT>
<DT><A name=index-scm_005fsetsid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setsid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Creates a new session. The current process becomes the session leader and is put in a new process group. The process will be detached from its controlling terminal if it has one. The return value is an integer representing the new process group ID.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getsid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getsid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid</EM></DT>
<DT><A name=index-scm_005fgetsid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getsid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid)</EM></DT>
<DD>
<P>Returns the session ID of process<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR>. (The session ID of a process is the process group ID of its session leader.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-waitpid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>waitpid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid [options]</EM></DT>
<DT><A name=index-scm_005fwaitpid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_waitpid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid, options)</EM></DT>
<DD>
<P>This procedure collects status information from a child process which has terminated or (optionally) stopped. Normally it will suspend the calling process until this can be done. If more than one child process is eligible then one will be chosen by the operating system.</P>
<P>The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines the behaviour:</P>
<DL compact>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than 0</DT>
<DD>
<P>Request status information from the specified child process.</P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to -1 or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>WAIT_ANY</CODE></DT>
<DD><A name=index-WAIT_005fANY></A>
<P>Request status information for any child process.</P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to 0 or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>WAIT_MYPGRP</CODE></DT>
<DD><A name=index-WAIT_005fMYPGRP></A>
<P>Request status information for any child process in the current process group.</P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>less than -1</DT>
<DD>
<P>Request status information for any child process whose process group ID is -<VAR>pid</VAR>.</P></DD></DL>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, if supplied, should be the bitwise OR of the values of zero or more of the following variables:</P>
<DL>
<DT><A name=index-WNOHANG></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>WNOHANG</STRONG></DT>
<DD>
<P>Return immediately even if there are no child processes to be collected.</P></DD></DL>
<DL>
<DT><A name=index-WUNTRACED></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>WUNTRACED</STRONG></DT>
<DD>
<P>Report status information for stopped processes as well as terminated processes.</P></DD></DL>
<P>The return value is a pair containing:</P>
<OL>
<LI>The process ID of the child process, or 0 if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>WNOHANG</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was specified and no process was collected.</LI>
<LI>The integer status value.</LI></OL></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following three functions can be used to decode the process status code returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-status_003aexit_002dval></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>status:exit-val</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>status</EM></DT>
<DT><A name=index-scm_005fstatus_005fexit_005fval></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_status_exit_val</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(status)</EM></DT>
<DD>
<P>Return the exit status value, as would be set if a process ended normally through a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_exit</CODE>, if any, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-status_003aterm_002dsig></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>status:term-sig</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>status</EM></DT>
<DT><A name=index-scm_005fstatus_005fterm_005fsig></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_status_term_sig</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(status)</EM></DT>
<DD>
<P>Return the signal number which terminated the process, if any, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-status_003astop_002dsig></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>status:stop-sig</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>status</EM></DT>
<DT><A name=index-scm_005fstatus_005fstop_005fsig></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_status_stop_sig</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(status)</EM></DT>
<DD>
<P>Return the signal number which stopped the process, if any, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-system></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>system</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[cmd]</EM></DT>
<DT><A name=index-scm_005fsystem></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_system</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cmd)</EM></DT>
<DD>
<P>Execute<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cmd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using the operating system&#8217;s &#8220;command processor&#8221;. Under Unix this is usually the default shell<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh</CODE>. The value returned is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cmd</VAR>&#8217;s exit status as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE>, which can be interpreted using the functions above.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called without arguments, return a boolean indicating whether the command processor is available.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-system_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>system*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg1 arg2 &#8230;</EM></DT>
<DT><A name=index-scm_005fsystem_005fstar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_system_star</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(args)</EM></DT>
<DD>
<P>Execute the command indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>. The first element must be a string indicating the command to be executed, and the remaining items must be strings representing each of the arguments to that command.</P>
<P>This function returns the exit status of the command as provided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE>. This value can be handled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>status:exit-val</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the related functions.</P>
<P><CODE>system*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system</CODE>, but accepts only one string per-argument, and performs no shell interpretation. The command is executed using fork and execlp. Accordingly this function may be safer than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in situations where shell interpretation is not required.</P>
<P>Example: (system* "echo" "foo" "bar")</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-quit-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[status]</EM></DT>
<DT><A name=index-exit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[status]</EM></DT>
<DD>
<P>Terminate the current process with proper unwinding of the Scheme stack. The exit status zero if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>status</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>status</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied, and it is an integer, that integer is used as the exit status. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>status</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the exit status is 0 or 1, respectively.</P>
<P>The procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an alias of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quit</CODE>. They have the same functionality.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dexit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[status]</EM></DT>
<DT><A name=index-primitive_002d_005fexit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-_exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[status]</EM></DT>
<DT><A name=index-scm_005fprimitive_005fexit></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive_exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(status)</EM></DT>
<DT><A name=index-scm_005fprimitive_005f_005fexit></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_primitive__exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(status)</EM></DT>
<DD>
<P>Terminate the current process without unwinding the Scheme stack. The exit status is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>status</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if supplied, otherwise zero.</P>
<P><CODE>primitive-exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function and hence runs usual C level cleanups (flush output streams, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atexit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions, etc, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Normal-Termination">Normal Termination</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>)).</P>
<P><CODE>primitive-_exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Internals">Termination Internals</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>). This terminates the program immediately, with neither Scheme-level nor C-level cleanups.</P>
<P>The typical use for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-_exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from a child process created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-fork</CODE>. For example in a Gdk program the child process inherits the X server connection and a C-level<CODE>atexit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cleanup which will close that connection. But closing in the child would upset the protocol in the parent, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-_exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used to exit without that.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-execl></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>execl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename arg &#8230;</EM></DT>
<DT><A name=index-scm_005fexecl></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_execl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, args)</EM></DT>
<DD>
<P>Executes the file named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a new process image. The remaining arguments are supplied to the process; from a C program they are accessible as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>argv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>. Conventionally the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>. All arguments must be strings.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is missing,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is executed with a null argument list, which may have system-dependent side-effects.</P>
<P>This procedure is currently implemented using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call, but we call it<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because of its Scheme calling interface.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-execlp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>execlp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename arg &#8230;</EM></DT>
<DT><A name=index-scm_005fexeclp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_execlp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, args)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execl</CODE>, however if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain a slash then the file to execute will be located by searching the directories listed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PATH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable.</P>
<P>This procedure is currently implemented using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execvp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call, but we call it<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execlp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because of its Scheme calling interface.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-execle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>execle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename env arg &#8230;</EM></DT>
<DT><A name=index-scm_005fexecle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_execle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, env, args)</EM></DT>
<DD>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execl</CODE>, but the environment of the new process is specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>env</VAR>, which must be a list of strings as returned by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>environ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure.</P>
<P>This procedure is currently implemented using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execve</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call, but we call it<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because of its Scheme calling interface.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-primitive_002dfork></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>primitive-fork</STRONG></DT>
<DT><A name=index-scm_005ffork></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_fork</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Creates a new &#8220;child&#8221; process by duplicating the current &#8220;parent&#8221; process. In the child the return value is 0. In the parent the return value is the integer process ID of the child.</P>
<P>Note that it is unsafe to fork a process that has multiple threads running, as only the thread that calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>primitive-fork</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will persist in the child. Any resources that other threads held, such as locked mutexes or open file descriptors, are lost. Indeed,<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>POSIX</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies that only async-signal-safe procedures are safe to call after a multithreaded fork, which is a very limited set. Guile issues a warning if it detects a fork from a multi-threaded program.</P>
<P>If you are going to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>soon after forking, the procedures in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 popen)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be useful to you, as they fork and exec within an async-signal-safe function carefully written to ensure robust program behavior, even in the presence of threads. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pipes">Pipes</A>, for more.</P>
<P>This procedure has been renamed from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fork</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid a naming conflict with the scsh fork.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-nice></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>nice</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>incr</EM></DT>
<DT><A name=index-scm_005fnice></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_nice</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(incr)</EM></DT>
<DD><A name=index-process-priority></A>
<P>Increment the priority of the current process by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>incr</VAR>. A higher priority value means that the process runs less often. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setpriority></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setpriority</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>which who prio</EM></DT>
<DT><A name=index-scm_005fsetpriority></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setpriority</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(which, who, prio)</EM></DT>
<DD><A name=index-PRIO_005fPROCESS></A><A name=index-PRIO_005fPGRP></A><A name=index-PRIO_005fUSER></A>
<P>Set the scheduling priority of the process, process group or user, as indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one of the variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PROCESS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PGRP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_USER</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interpreted relative to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a process identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PROCESS</CODE>, process group identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PGRP</CODE>, and a user identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_USER</CODE>. A zero value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>denotes the current process, process group, or user.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prio</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a value in the range [-20,20]. The default priority is 0; lower priorities (in numerical terms) cause more favorable scheduling. Sets the priority of all of the specified processes. Only the super-user may lower priorities. The return value is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpriority></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpriority</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>which who</EM></DT>
<DT><A name=index-scm_005fgetpriority></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpriority</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(which, who)</EM></DT>
<DD><A name=index-PRIO_005fPROCESS-1></A><A name=index-PRIO_005fPGRP-1></A><A name=index-PRIO_005fUSER-1></A>
<P>Return the scheduling priority of the process, process group or user, as indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one of the variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PROCESS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PGRP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_USER</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be interpreted depending on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a process identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PROCESS</CODE>, process group identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_PGRP</CODE>, and a user identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRIO_USER</CODE>). A zero value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>denotes the current process, process group, or user. Return the highest priority (lowest numerical value) of any of the specified processes.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-affinity_002c-CPU></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getaffinity></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getaffinity</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid</EM></DT>
<DT><A name=index-scm_005fgetaffinity></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getaffinity</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid)</EM></DT>
<DD>
<P>Return a bitvector representing the CPU affinity mask for process<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR>. Each CPU the process has affinity with has its corresponding bit set in the returned bitvector. The number of bits set is a good estimate of how many CPUs Guile can use without stepping on other processes&#8217; toes.</P>
<P>Currently this procedure is only defined on GNU variants (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#CPU-Affinity"><CODE>sched_getaffinity</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setaffinity></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setaffinity</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid mask</EM></DT>
<DT><A name=index-scm_005fsetaffinity></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setaffinity</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid, mask)</EM></DT>
<DD>
<P>Install the CPU affinity mask<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mask</VAR>, a bitvector, for the process or thread with ID<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR>. The return value is unspecified.</P>
<P>Currently this procedure is only defined on GNU variants (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#CPU-Affinity"><CODE>sched_setaffinity</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-total_002dprocessor_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>total-processor-count</STRONG></DT>
<DT><A name=index-scm_005ftotal_005fprocessor_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_total_processor_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the total number of processors of the machine, which is guaranteed to be at least 1. A &#8220;processor&#8221; here is a thread execution unit, which can be either:</P>
<UL>
<LI>an execution core in a (possibly multi-core) chip, in a (possibly multi- chip) module, in a single computer, or</LI>
<LI>a thread execution unit inside a core in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hyper-threaded</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>CPUs.</LI></UL>
<P>Which of the two definitions is used, is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dprocessor_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-processor-count</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005fprocessor_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_processor_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>total-processor-count</CODE>, but return the number of processors available to the current process. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setaffinity</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getaffinity</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Signals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Terminals-and-Ptys" rel=next>Terminals and Ptys</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Processes" rel=prev>Processes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Signals-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.8 Signals</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-signal></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures raise, handle and wait for signals.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme code signal handlers are run via a system async (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#System-asyncs">System asyncs</A>), so they&#8217;re called in the handler&#8217;s thread at the next safe opportunity. Generally this is after any currently executing primitive procedure finishes (which could be a long time for primitives that wait for an external event).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-kill></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>kill</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pid sig</EM></DT>
<DT><A name=index-scm_005fkill></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_kill</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pid, sig)</EM></DT>
<DD>
<P>Sends a signal to the specified process or group of processes.</P>
<P><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the processes to which the signal is sent:</P>
<DL compact>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than 0</DT>
<DD>
<P>The process whose identifier is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pid</VAR>.</P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to 0</DT>
<DD>
<P>All processes in the current process group.</P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>less than -1</DT>
<DD>
<P>The process group whose identifier is -<VAR>pid</VAR></P></DD>
<DT><VAR>pid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to -1</DT>
<DD>
<P>If the process is privileged, all processes except for some special system processes. Otherwise, all processes with the current effective user ID.</P></DD></DL>
<P><VAR>sig</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be specified using a variable corresponding to the Unix symbolic name, e.g.,</P>
<DL>
<DT><A name=index-SIGHUP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SIGHUP</STRONG></DT>
<DD>
<P>Hang-up signal.</P></DD></DL>
<DL>
<DT><A name=index-SIGINT></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SIGINT</STRONG></DT>
<DD>
<P>Interrupt signal.</P></DD></DL>
<P>A full list of signals on the GNU system may be found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-raise></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>raise</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sig</EM></DT>
<DT><A name=index-scm_005fraise></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_raise</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sig)</EM></DT>
<DD>
<P>Sends a specified signal<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sig</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the current process, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sig</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is as described for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>kill</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sigaction></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sigaction</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signum [handler [flags [thread]]]</EM></DT>
<DT><A name=index-scm_005fsigaction></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sigaction</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(signum, handler, flags)</EM></DT>
<DT><A name=index-scm_005fsigaction_005ffor_005fthread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sigaction_for_thread</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(signum, handler, flags, thread)</EM></DT>
<DD>
<P>Install or report the signal handler for a specified signal.</P>
<P><VAR>signum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the signal number, which can be specified using the value of variables such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGINT</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pair: the<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CAR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the current signal hander, which will be either an integer with the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIG_DFL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default action) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIG_IGN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ignore), or the Scheme procedure which handles the signal, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if a non-Scheme procedure handles the signal. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>CDR</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains the current<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flags for the handler.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, it is installed as the new handler for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>signum</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a Scheme procedure taking one argument, or the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIG_DFL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default action) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIG_IGN</CODE>(ignore), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to restore whatever signal handler was installed before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was first used. When a scheme procedure has been specified, that procedure will run in the given<VAR>thread</VAR>. When no thread has been given, the thread that made this call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</P>
<P><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>) of the following (where provided by the system), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for none.</P>
<DL>
<DT><A name=index-SA_005fNOCLDSTOP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SA_NOCLDSTOP</STRONG></DT>
<DD>
<P>By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGCHLD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is signalled when a child process stops (ie. receives<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGSTOP</CODE>), and when a child process terminates. With the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SA_NOCLDSTOP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGCHLD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only signalled for termination, not stopping.</P>
<P><CODE>SA_NOCLDSTOP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect on signals other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGCHLD</CODE>.</P></DD></DL>
<DL>
<DT><A name=index-SA_005fRESTART></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SA_RESTART</STRONG></DT>
<DD>
<P>If a signal occurs while in a system call, deliver the signal then restart the system call (as opposed to returning an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EINTR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>error from that call).</P></DD></DL>
<P>The return value is a pair with information about the old handler as described above.</P>
<P>This interface does not provide access to the &#8220;signal blocking&#8221; facility. Maybe this is not needed, since the thread support may provide solutions to the problem of consistent access to data structures.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-restore_002dsignals></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>restore-signals</STRONG></DT>
<DT><A name=index-scm_005frestore_005fsignals></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_restore_signals</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return all signal handlers to the values they had before any call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sigaction</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was made. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alarm></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alarm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>i</EM></DT>
<DT><A name=index-scm_005falarm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_alarm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(i)</EM></DT>
<DD>
<P>Set a timer to raise a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGALRM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>signal after the specified number of seconds (an integer). It&#8217;s advisable to install a signal handler for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGALRM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>beforehand, since the default action is to terminate the process.</P>
<P>The return value indicates the time remaining for the previous alarm, if any. The new value replaces the previous alarm. If there was no previous alarm, the return value is zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pause></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pause</STRONG></DT>
<DT><A name=index-scm_005fpause></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pause</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Pause the current process (thread?) until a signal arrives whose action is to either terminate the current process or invoke a handler procedure. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sleep></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>secs</EM></DT>
<DT><A name=index-usleep></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>usleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>usecs</EM></DT>
<DT><A name=index-scm_005fsleep></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(secs)</EM></DT>
<DT><A name=index-scm_005fusleep></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_usleep</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(usecs)</EM></DT>
<DD>
<P>Wait the given period<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>seconds or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>usecs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>microseconds (both integers). If a signal arrives the wait stops and the return value is the time remaining, in seconds or microseconds respectively. If the period elapses with no signal the return is zero.</P>
<P>On most systems the process scheduler is not microsecond accurate and the actual period slept by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>usleep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might be rounded to a system clock tick boundary, which might be 10 milliseconds for instance.</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_std_sleep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_std_usleep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for equivalents at the C level (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Blocking">Blocking</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getitimer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getitimer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>which_timer</EM></DT>
<DT><A name=index-setitimer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setitimer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>which_timer interval_seconds interval_microseconds periodic_seconds periodic_microseconds</EM></DT>
<DT><A name=index-scm_005fgetitimer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getitimer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(which_timer)</EM></DT>
<DT><A name=index-scm_005fsetitimer></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setitimer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(which_timer, interval_seconds, interval_microseconds, periodic_seconds, periodic_microseconds)</EM></DT>
<DD>
<P>Get or set the periods programmed in certain system timers. These timers have a current interval value which counts down and on reaching zero raises a signal. An optional periodic value can be set to restart from there each time, for periodic operation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>which_timer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one of the following values</P>
<DL>
<DT><A name=index-ITIMER_005fREAL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ITIMER_REAL</STRONG></DT>
<DD>
<P>A real-time timer, counting down elapsed real time. At zero it raises<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGALRM</CODE>. This is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alarm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, but with a higher resolution period.</P></DD></DL>
<DL>
<DT><A name=index-ITIMER_005fVIRTUAL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ITIMER_VIRTUAL</STRONG></DT>
<DD>
<P>A virtual-time timer, counting down while the current process is actually using CPU. At zero it raises<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGVTALRM</CODE>.</P></DD></DL>
<DL>
<DT><A name=index-ITIMER_005fPROF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ITIMER_PROF</STRONG></DT>
<DD>
<P>A profiling timer, counting down while the process is running (like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ITIMER_VIRTUAL</CODE>) and also while system calls are running on the process&#8217;s behalf. At zero it raises a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SIGPROF</CODE>.</P>
<P>This timer is intended for profiling where a program is spending its time (by looking where it is when the timer goes off).</P></DD></DL>
<P><CODE>getitimer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the current timer value and its programmed restart value, as a list containing two pairs. Each pair is a time in seconds and microseconds:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>((<VAR>interval_secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<VAR>interval_usecs</VAR>) (<VAR>periodic_secs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>periodic_usecs</VAR>))</CODE>.</P>
<P><CODE>setitimer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the timer values similarly, in seconds and microseconds (which must be integers). The periodic value can be zero to have the timer run down just once. The return value is the timer&#8217;s previous setting, in the same form as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getitimer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(setitimer ITIMER_REAL
           5 500000     ;; first SIGALRM in 5.5 seconds time
           2 0)         ;; then repeat every 2 seconds
</PRE></DIV>
<P>Although the timers are programmed in microseconds, the actual accuracy might not be that high.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Terminals-and-Ptys></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Pipes" rel=next>Pipes</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Signals" rel=prev>Signals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Terminals-and-Ptys-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.9 Terminals and Ptys</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-isatty_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>isatty?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fisatty_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_isatty_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD><A name=index-terminal></A>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is using a serial non&#8211;file device, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ttyname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ttyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fttyname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ttyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD><A name=index-terminal-1></A>
<P>Return a string with the name of the serial terminal device underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ctermid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ctermid</STRONG></DT>
<DT><A name=index-scm_005fctermid></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ctermid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-terminal-2></A>
<P>Return a string containing the file name of the controlling terminal for the current process.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tcgetpgrp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tcgetpgrp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005ftcgetpgrp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_tcgetpgrp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD><A name=index-process-group></A>
<P>Return the process group ID of the foreground process group associated with the terminal open on the file descriptor underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>If there is no foreground process group, the return value is a number greater than 1 that does not match the process group ID of any existing process group. This can happen if all of the processes in the job that was formerly the foreground job have terminated, and no other job has yet been moved into the foreground.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tcsetpgrp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tcsetpgrp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port pgid</EM></DT>
<DT><A name=index-scm_005ftcsetpgrp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_tcsetpgrp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, pgid)</EM></DT>
<DD><A name=index-process-group-1></A>
<P>Set the foreground process group ID for the terminal used by the file descriptor underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pgid</VAR>. The calling process must be a member of the same session as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pgid</VAR>and must have the same controlling terminal. The return value is unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Pipes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=next>Networking</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Terminals-and-Ptys" rel=prev>Terminals and Ptys</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Pipes-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.10 Pipes</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pipe-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are similar to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>popen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pclose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system routines. The code is in a separate &#8220;popen&#8221; module<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT22" name=DOCF22><SUP>22</SUP></A>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 popen))
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-popen></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dpipe></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>command mode</EM></DT>
<DT><A name=index-open_002dpipe_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-pipe*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mode prog [args...]</EM></DT>
<DD>
<P>Execute a command in a subprocess, with a pipe to it or from it, or with pipes in both directions.</P>
<P><CODE>open-pipe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>runs the shell<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>command</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using &#8216;<SAMP>/bin/sh -c</SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>executes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prog</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly, with the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments (all strings).</P>
<P><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the following values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_READ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an input pipe, ie. to read from the subprocess.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_WRITE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an output pipe, ie. to write to it.</P>
<DL>
<DT><A name=index-OPEN_005fREAD></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>OPEN_READ</STRONG></DT>
<DT><A name=index-OPEN_005fWRITE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>OPEN_WRITE</STRONG></DT>
<DT><A name=index-OPEN_005fBOTH></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>OPEN_BOTH</STRONG></DT></DL>
<P>For an input pipe, the child&#8217;s standard output is the pipe and standard input is inherited from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE>. For an output pipe, the child&#8217;s standard input is the pipe and standard output is inherited from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE>. In all cases cases the child&#8217;s standard error is inherited from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-error-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports">Default Ports</A>).</P>
<P>If those<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-X-ports</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not files of some kind, and hence don&#8217;t have file descriptors for the child, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/dev/null</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used instead.</P>
<P>Care should be taken with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_BOTH</CODE>, a deadlock will occur if both parent and child are writing, and waiting until the write completes before doing any reading. Each direction has<CODE>PIPE_BUF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of buffering (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">Ports and File Descriptors</A>), which will be enough for small writes, but not for say putting a big file through a filter.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dinput_002dpipe></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-input-pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>command</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with mode<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_READ</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let* ((port (open-input-pipe "date --utc"))
       (str  (read-line port)))
  (close-pipe port)
  str)
&#8658; "Mon Mar 11 20:10:44 UTC 2002"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002doutput_002dpipe></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-output-pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>command</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with mode<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_WRITE</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let ((port (open-output-pipe "lpr")))
  (display "Something for the line printer.\n" port)
  (if (not (eqv? 0 (status:exit-val (close-pipe port))))
      (error "Cannot print")))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dinput_002doutput_002dpipe></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-input-output-pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>command</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with mode<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OPEN_BOTH</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pclose></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dpipe></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-pipe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Close a pipe created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-pipe</CODE>, wait for the process to terminate, and return the wait status code. The status is as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and can be decoded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>status:exit-val</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc (see<A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>)</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>waitpid WAIT_ANY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not be used when pipes are open, since it can reap a pipe&#8217;s child process, causing an error from a subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-pipe</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>close-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Closing">Closing</A>) can close a pipe, but it doesn&#8217;t reap the child process.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The garbage collector will close a pipe no longer in use, and reap the child process with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>waitpid</CODE>. If the child hasn&#8217;t yet terminated the garbage collector doesn&#8217;t block, but instead checks again in the next GC.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many systems have per-user and system-wide limits on the number of processes, and a system-wide limit on the number of pipes, so pipes should be closed explicitly when no longer needed, rather than letting the garbage collector pick them up at some later time.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Networking></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#System-Identification" rel=next>System Identification</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Pipes" rel=prev>Pipes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Networking-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.11 Networking</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion">Network Address Conversion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Network-Databases">Network Databases</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Network-Sockets-and-Communication">Network Sockets and Communication</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Internet-Socket-Examples">Internet Socket Examples</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Address-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Network-Databases" rel=next>Network Databases</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=up>Networking</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Address-Conversion-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.2.11.1 Network Address Conversion</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-address></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes procedures which convert internet addresses between numeric and string formats.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=IPv4-Address-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>IPv4 Address Conversion</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-IPv4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An IPv4 Internet address is a 4-byte value, represented in Guile as an integer in host byte order, so that say &#8220;0.0.0.1&#8221; is 1, or &#8220;1.0.0.0&#8221; is 16777216.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some underlying C functions use network byte order for addresses, Guile converts as necessary so that at the Scheme level its host byte order everywhere.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-INADDR_005fANY></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>INADDR_ANY</STRONG></DT>
<DD>
<P>For a server, this can be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Sockets-and-Communication">Network Sockets and Communication</A>) to allow connections from any interface on the machine.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-INADDR_005fBROADCAST></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>INADDR_BROADCAST</STRONG></DT>
<DD>
<P>The broadcast address on the local network.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-INADDR_005fLOOPBACK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>INADDR_LOOPBACK</STRONG></DT>
<DD>
<P>The address of the local host using the loopback device, ie. &#8216;<SAMP>127.0.0.1</SAMP>&#8217;.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002daton></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-aton</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>address</EM></DT>
<DT><A name=index-scm_005finet_005faton></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_aton</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(address)</EM></DT>
<DD>
<P>This function is deprecated in favor of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inet-pton</CODE>.</P>
<P>Convert an IPv4 Internet address from printable string (dotted decimal notation) to an integer. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-aton "127.0.0.1") &#8658; 2130706433
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dntoa></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-ntoa</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>inetid</EM></DT>
<DT><A name=index-scm_005finet_005fntoa></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_ntoa</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(inetid)</EM></DT>
<DD>
<P>This function is deprecated in favor of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inet-ntop</CODE>.</P>
<P>Convert an IPv4 Internet address to a printable (dotted decimal notation) string. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-ntoa 2130706433) &#8658; "127.0.0.1"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dnetof></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-netof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>address</EM></DT>
<DT><A name=index-scm_005finet_005fnetof></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_netof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(address)</EM></DT>
<DD>
<P>Return the network number part of the given IPv4 Internet address. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-netof 2130706433) &#8658; 127
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dlnaof></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-lnaof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>address</EM></DT>
<DT><A name=index-scm_005flnaof></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lnaof</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(address)</EM></DT>
<DD>
<P>Return the local-address-with-network part of the given IPv4 Internet address, using the obsolete class A/B/C system. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-lnaof 2130706433) &#8658; 1
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dmakeaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-makeaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net lna</EM></DT>
<DT><A name=index-scm_005finet_005fmakeaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_makeaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(net, lna)</EM></DT>
<DD>
<P>Make an IPv4 Internet address by combining the network number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>net</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the local-address-within-network number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lna</VAR>. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-makeaddr 127 1) &#8658; 2130706433
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=IPv6-Address-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>IPv6 Address Conversion</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-IPv6></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An IPv6 Internet address is a 16-byte value, represented in Guile as an integer in host byte order, so that say &#8220;::1&#8221; is 1.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dntop></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-ntop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>family address</EM></DT>
<DT><A name=index-scm_005finet_005fntop></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_ntop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(family, address)</EM></DT>
<DD>
<P>Convert a network address from an integer to a printable string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE>. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-ntop AF_INET 2130706433) &#8658; "127.0.0.1"
(inet-ntop AF_INET6 (- (expt 2 128) 1))
  &#8658; "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inet_002dpton></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inet-pton</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>family address</EM></DT>
<DT><A name=index-scm_005finet_005fpton></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inet_pton</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(family, address)</EM></DT>
<DD>
<P>Convert a string containing a printable network address to an integer address.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE>. E.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inet-pton AF_INET "127.0.0.1") &#8658; 2130706433
(inet-pton AF_INET6 "::1") &#8658; 1
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Databases></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address" rel=next>Network Socket Address</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion" rel=prev>Network Address Conversion</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=up>Networking</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Databases-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.2.11.2 Network Databases</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes procedures which query various network databases. Care should be taken when using the database routines since they are not reentrant.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=getaddrinfo></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading><CODE>getaddrinfo</CODE></H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-addrinfo-object-type></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-host-name-lookup></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-service-name-lookup></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getaddrinfo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure maps host and service names to socket addresses and associated information in a protocol-independent way.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getaddrinfo></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getaddrinfo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name service [hint_flags [hint_family [hint_socktype [hint_protocol]]]]</EM></DT>
<DT><A name=index-scm_005fgetaddrinfo></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getaddrinfo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name, service, hint_flags, hint_family, hint_socktype, hint_protocol)</EM></DT>
<DD>
<P>Return a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addrinfo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structures containing a socket address and associated information for host<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and/or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be used in creating a socket with which to address the specified service.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let* ((ai (car (getaddrinfo "www.gnu.org" "http")))
       (s  (socket (addrinfo:fam ai) (addrinfo:socktype ai)
                   (addrinfo:protocol ai))))
  (connect s (addrinfo:addr ai))
  s)
</PRE></DIV>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted or is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, return network-level addresses for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be provided and service locations local to the caller are returned.</P>
<P>Additional hints can be provided. When specified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hint_flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a bitwise-or of zero or more constants among the following:</P>
<DL compact>
<DT><CODE>AI_PASSIVE</CODE></DT>
<DD>
<P>Socket address is intended for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind</CODE>.</P></DD>
<DT><CODE>AI_CANONNAME</CODE></DT>
<DD>
<P>Request for canonical host name, available via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addrinfo:canonname</CODE>. This makes sense mainly when DNS lookups are involved.</P></DD>
<DT><CODE>AI_NUMERICHOST</CODE></DT>
<DD>
<P>Specifies that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a numeric host address string (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"127.0.0.1"</CODE>), meaning that name resolution will not be used.</P></DD>
<DT><CODE>AI_NUMERICSERV</CODE></DT>
<DD>
<P>Likewise, specifies that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a numeric port string (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"80"</CODE>).</P></DD>
<DT><CODE>AI_ADDRCONFIG</CODE></DT>
<DD>
<P>Return only addresses configured on the local system It is highly recommended to provide this flag when the returned socket addresses are to be used to make connections; otherwise, some of the returned addresses could be unreachable or use a protocol that is not supported.</P></DD>
<DT><CODE>AI_V4MAPPED</CODE></DT>
<DD>
<P>When looking up IPv6 addresses, return mapped IPv4 addresses if there is no IPv6 address available at all.</P></DD>
<DT><CODE>AI_ALL</CODE></DT>
<DD>
<P>If this flag is set along with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AI_V4MAPPED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when looking up IPv6 addresses, return all IPv6 addresses as well as all IPv4 addresses, the latter mapped to IPv6 format.</P></DD></DL>
<P>When given,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hint_family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should specify the requested address family, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE>. Similarly,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hint_socktype</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should specify the requested socket type (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SOCK_DGRAM</CODE>), and<VAR>hint_protocol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should specify the requested protocol (its value is interpreted as in calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>socket</CODE>).</P>
<P>On error, an exception with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getaddrinfo-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is thrown, with an error code (an integer) as its argument:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(catch 'getaddrinfo-error
  (lambda ()
    (getaddrinfo "www.gnu.org" "gopher"))
  (lambda (key errcode)
    (cond ((= errcode EAI_SERVICE)
	   (display "doesn't know about Gopher!\n"))
	  ((= errcode EAI_NONAME)
	   (display "www.gnu.org not found\\n"))
	  (else
	   (format #t "something wrong: ~a\n"
		   (gai-strerror errcode))))))
</PRE></DIV>
<P>Error codes are:</P>
<DL compact>
<DT><CODE>EAI_AGAIN</CODE></DT>
<DD>
<P>The name or service could not be resolved at this time. Future attempts may succeed.</P></DD>
<DT><CODE>EAI_BADFLAGS</CODE></DT>
<DD>
<P><VAR>hint_flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains an invalid value.</P></DD>
<DT><CODE>EAI_FAIL</CODE></DT>
<DD>
<P>A non-recoverable error occurred when attempting to resolve the name.</P></DD>
<DT><CODE>EAI_FAMILY</CODE></DT>
<DD>
<P><VAR>hint_family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not recognized.</P></DD>
<DT><CODE>EAI_NONAME</CODE></DT>
<DD>
<P>Either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not resolve for the supplied parameters, or neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>were supplied.</P></DD>
<DT><CODE>EAI_NODATA</CODE></DT>
<DD>
<P>This non-POSIX error code can be returned on some systems (GNU and Darwin, at least), for example when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is known but requests that were made turned out no data. Error handling code should be prepared to handle it when it is defined.</P></DD>
<DT><CODE>EAI_SERVICE</CODE></DT>
<DD>
<P><VAR>service</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not recognized for the specified socket type.</P></DD>
<DT><CODE>EAI_SOCKTYPE</CODE></DT>
<DD>
<P><VAR>hint_socktype</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not recognized.</P></DD>
<DT><CODE>EAI_SYSTEM</CODE></DT>
<DD>
<P>A system error occurred. In C, the error code can be found in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>; this value is not accessible from Scheme, but in practice it provides little information about the actual error cause.</P></DD></DL>
<P>Users are encouraged to read the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html">"POSIX specification</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures take an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addrinfo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getaddrinfo</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003aflags></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:flags</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return flags for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a bitwise or of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AI_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values (see above).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003afam></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:fam</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return the address family of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003asocktype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:socktype</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return the socket type for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SOCK_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003aprotocol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:protocol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return the protocol of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003aaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:addr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return the socket address associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-addrinfo_003acanonname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>addrinfo:canonname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ai</EM></DT>
<DD>
<P>Return a string for the canonical name associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ai</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AI_CANONNAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag was supplied.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Host-Database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The Host Database</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002fetc_002fhosts></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-database-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host object</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a structure that represents what is known about a network host, and is the usual way of representing a system&#8217;s network identity inside software.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept a host object and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hostent_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hostent:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM></DT>
<DD>
<P>The &#8220;official&#8221; hostname for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hostent_003aaliases></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hostent:aliases</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM></DT>
<DD>
<P>A list of aliases for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hostent_003aaddrtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hostent:addrtype</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM></DT>
<DD>
<P>The host address type, one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constants, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hostent_003alength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hostent:length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM></DT>
<DD>
<P>The length of each address for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR>, in bytes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hostent_003aaddr_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hostent:addr-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM></DT>
<DD>
<P>The list of network addresses associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR>. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>these are integer IPv4 address (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion">Network Address Conversion</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures can be used to search the host database. However,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getaddrinfo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be preferred over them since it&#8217;s more generic and thread-safe.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gethost></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gethost</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[host]</EM></DT>
<DT><A name=index-gethostbyname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gethostbyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hostname</EM></DT>
<DT><A name=index-gethostbyaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gethostbyaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>address</EM></DT>
<DT><A name=index-scm_005fgethost></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gethost</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(host)</EM></DT>
<DD>
<P>Look up a host by name or address, returning a host object. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gethost</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure will accept either a string name or an integer address; if given no arguments, it behaves like<CODE>gethostent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below). If a name or address is supplied but the address can not be found, an error will be thrown to one of the keys:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>host-not-found</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>try-again</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-recovery</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-data</CODE>, corresponding to the equivalent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>h_error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values. Unusual conditions may result in errors thrown to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>misc_error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keys.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(gethost "www.gnu.org")
&#8658; #("www.gnu.org" () 2 4 (3353880842))

(gethostbyname "www.emacs.org")
&#8658; #("emacs.org" ("www.emacs.org") 2 4 (1073448978))
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures may be used to step through the host database from beginning to end.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sethostent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sethostent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DD>
<P>Initialize an internal stream from which host objects may be read. This procedure must be called before any calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gethostent</CODE>, and may also be called afterward to reset the host entry stream. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied and is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the database is not closed by subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gethostbyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gethostbyaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls, possibly giving an efficiency gain.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gethostent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gethostent</STRONG></DT>
<DD>
<P>Return the next host object from the host database, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there are no more hosts to be found (or an error has been encountered). This procedure may not be used before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sethostent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been called.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endhostent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endhostent</STRONG></DT>
<DD>
<P>Close the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gethostent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sethost></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sethost</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DT><A name=index-scm_005fsethost></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sethost</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stayopen)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endhostent</CODE>. Otherwise it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sethostent stayopen</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Network-Database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The Network Database</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-database-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept an object representing a network and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-netent_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>netent:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net</EM></DT>
<DD>
<P>The &#8220;official&#8221; network name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-netent_003aaliases></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>netent:aliases</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net</EM></DT>
<DD>
<P>A list of aliases for the network.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-netent_003aaddrtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>netent:addrtype</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net</EM></DT>
<DD>
<P>The type of the network number. Currently, this returns only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-netent_003anet></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>netent:net</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net</EM></DT>
<DD>
<P>The network number.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are used to search the network database:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getnet></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getnet</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[net]</EM></DT>
<DT><A name=index-getnetbyname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getnetbyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net-name</EM></DT>
<DT><A name=index-getnetbyaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getnetbyaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>net-number</EM></DT>
<DT><A name=index-scm_005fgetnet></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getnet</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(net)</EM></DT>
<DD>
<P>Look up a network by name or net number in the network database. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>net-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument must be a string, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>net-number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument must be an integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnet</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will accept either type of argument, behaving like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnetent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below) if no arguments are given.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures may be used to step through the network database from beginning to end.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setnetent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setnetent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DD>
<P>Initialize an internal stream from which network objects may be read. This procedure must be called before any calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnetent</CODE>, and may also be called afterward to reset the net entry stream. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied and is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the database is not closed by subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnetbyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnetbyaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls, possibly giving an efficiency gain.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getnetent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getnetent</STRONG></DT>
<DD>
<P>Return the next entry from the network database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endnetent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endnetent</STRONG></DT>
<DD>
<P>Close the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getnetent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setnet></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setnet</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DT><A name=index-scm_005fsetnet></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setnet</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stayopen)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endnetent</CODE>. Otherwise it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setnetent stayopen</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Protocol-Database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The Protocol Database</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002fetc_002fprotocols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-protocols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-protocols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept an object representing a protocol and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-protoent_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>protoent:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>protocol</EM></DT>
<DD>
<P>The &#8220;official&#8221; protocol name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-protoent_003aaliases></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>protoent:aliases</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>protocol</EM></DT>
<DD>
<P>A list of aliases for the protocol.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-protoent_003aproto></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>protoent:proto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>protocol</EM></DT>
<DD>
<P>The protocol number.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are used to search the protocol database:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getproto></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getproto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[protocol]</EM></DT>
<DT><A name=index-getprotobyname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getprotobyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DT><A name=index-getprotobynumber></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getprotobynumber</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>number</EM></DT>
<DT><A name=index-scm_005fgetproto></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getproto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(protocol)</EM></DT>
<DD>
<P>Look up a network protocol by name or by number.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotobyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a string argument, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotobynumber</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes an integer argument.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getproto</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will accept either type, behaving like<CODE>getprotoent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below) if no arguments are supplied.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures may be used to step through the protocol database from beginning to end.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setprotoent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setprotoent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DD>
<P>Initialize an internal stream from which protocol objects may be read. This procedure must be called before any calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotoent</CODE>, and may also be called afterward to reset the protocol entry stream. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied and is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the database is not closed by subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotobyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotobynumber</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls, possibly giving an efficiency gain.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getprotoent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getprotoent</STRONG></DT>
<DD>
<P>Return the next entry from the protocol database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endprotoent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endprotoent</STRONG></DT>
<DD>
<P>Close the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotoent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setproto></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setproto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DT><A name=index-scm_005fsetproto></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setproto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stayopen)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endprotoent</CODE>. Otherwise it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setprotoent stayopen</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Service-Database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The Service Database</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002fetc_002fservices></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-services></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-services></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions accept an object representing a service and return a selected component:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-servent_003aname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>servent:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>serv</EM></DT>
<DD>
<P>The &#8220;official&#8221; name of the network service.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-servent_003aaliases></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>servent:aliases</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>serv</EM></DT>
<DD>
<P>A list of aliases for the network service.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-servent_003aport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>servent:port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>serv</EM></DT>
<DD>
<P>The Internet port used by the service.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-servent_003aproto></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>servent:proto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>serv</EM></DT>
<DD>
<P>The protocol used by the service. A service may be listed many times in the database under different protocol names.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are used to search the service database:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getserv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getserv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[name [protocol]]</EM></DT>
<DT><A name=index-getservbyname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getservbyname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name protocol</EM></DT>
<DT><A name=index-getservbyport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getservbyport</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port protocol</EM></DT>
<DT><A name=index-scm_005fgetserv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getserv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name, protocol)</EM></DT>
<DD>
<P>Look up a network service by name or by service number, and return a network service object. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>protocol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument specifies the name of the desired protocol; if the protocol found in the network service database does not match this name, a system error is signalled.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getserv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure will take either a service name or number as its first argument; if given no arguments, it behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getservent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(getserv "imap" "tcp")
&#8658; #("imap2" ("imap") 143 "tcp")

(getservbyport 88 "udp")
&#8658; #("kerberos" ("kerberos5" "krb5") 88 "udp")
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures may be used to step through the service database from beginning to end.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setservent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setservent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DD>
<P>Initialize an internal stream from which service objects may be read. This procedure must be called before any calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getservent</CODE>, and may also be called afterward to reset the service entry stream. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied and is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the database is not closed by subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getservbyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getservbyport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls, possibly giving an efficiency gain.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getservent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getservent</STRONG></DT>
<DD>
<P>Return the next entry from the services database.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endservent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endservent</STRONG></DT>
<DD>
<P>Close the stream used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getservent</CODE>. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setserv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setserv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stayopen]</EM></DT>
<DT><A name=index-scm_005fsetserv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setserv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(stayopen)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stayopen</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endservent</CODE>. Otherwise it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setservent stayopen</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Socket-Address></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Network-Sockets-and-Communication" rel=next>Network Sockets and Communication</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Network-Databases" rel=prev>Network Databases</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=up>Networking</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Socket-Address-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.2.11.3 Network Socket Address</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-socket-address></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-socket-address></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Socket-address></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>socket address</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>object identifies a socket endpoint for communication. In the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for instance, the socket address object comprises the host address (or interface on the host) and a port number which specifies a particular open socket in a running client or server process. A socket address object can be created with,</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dsocket_002daddress></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-socket-address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>AF_INET ipv4addr port</EM></DT>
<DT><A name=index-make_002dsocket_002daddress-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-socket-address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>AF_INET6 ipv6addr port [flowinfo [scopeid]]</EM></DT>
<DT><A name=index-make_002dsocket_002daddress-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-socket-address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>AF_UNIX path</EM></DT>
<DT><A name=index-scm_005fmake_005fsocket_005faddress></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_socket_address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(family, address, arglist)</EM></DT>
<DD>
<P>Return a new socket address object. The first argument is the address family, one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constants, then the arguments vary according to the family.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the arguments are an IPv4 network address number (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion">Network Address Conversion</A>), and a port number.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the arguments are an IPv6 network address number and a port number. Optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flowinfo</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scopeid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments may be given (both integers, default 0).</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_UNIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the argument is a filename (a string).</P>
<P>The C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_socket_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>address</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments directly, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arglist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of further arguments, being the port for IPv4, port and optional flowinfo and scopeid for IPv6, or the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_EOL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for Unix domain.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions access the fields of a socket address object,</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003afam></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:fam</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>Return the address family from socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>. This is one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constants (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003apath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>For an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_UNIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>, return the filename.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003aaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:addr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>For an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>, return the network address number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003aport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>For an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>, return the port number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003aflowinfo></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:flowinfo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>For an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>, return the flowinfo value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sockaddr_003ascopeid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sockaddr:scopeid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sa</EM></DT>
<DD>
<P>For an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>socket address object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sa</VAR>, return the scope ID value.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-struct-sockaddr></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sockaddr></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions below convert to and from the C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Address-Formats">Address Formats</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>). That structure is a generic type, an application can cast to or from<CODE>struct sockaddr_in</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr_in6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr_un</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the address family.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>taken or returned, the byte ordering in the fields follows the C conventions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Byte-Order">Byte Order Conversion</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>). This means network byte order for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>host address (<CODE>sin_addr.s_addr</CODE>) and port number (<CODE>sin_port</CODE>), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_INET6</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>port number (<CODE>sin6_port</CODE>). But at the Scheme level these values are taken or returned in host byte order, so the port is an ordinary integer, and the host address likewise is an ordinary integer (as described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion">Network Address Conversion</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmake_005fsocket_005faddress></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct sockaddr *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_socket_address</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM family, SCM address, SCM args, size_t *outsize)</EM></DT>
<DD>
<P>Return a newly-<CODE>malloc</CODE>ed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>created from arguments like those taken by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_socket_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above.</P>
<P>The size (in bytes) of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return is stored into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*<VAR>outsize</VAR></CODE>. An application must call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to release the returned structure when no longer required.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fsockaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_sockaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const struct sockaddr *address, unsigned address_size)</EM></DT>
<DD>
<P>Return a Scheme socket address object from the C<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>address</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>address_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the size in bytes of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>address</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fsockaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct sockaddr *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_sockaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM address, size_t *address_size)</EM></DT>
<DD>
<P>Return a newly-<CODE>malloc</CODE>ed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from a Scheme level socket address object.</P>
<P>The size (in bytes) of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return is stored into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*<VAR>outsize</VAR></CODE>. An application must call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to release the returned structure when no longer required.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Sockets-and-Communication></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Internet-Socket-Examples" rel=next>Internet Socket Examples</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address" rel=prev>Network Socket Address</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=up>Networking</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Sockets-and-Communication-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.2.11.4 Network Sockets and Communication</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-socket></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-socket></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Socket ports can be created using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>socket</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>socketpair</CODE>. The ports are initially unbuffered, to make reading and writing to the same port more reliable. A buffer can be added to the port using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setvbuf</CODE>; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">Ports and File Descriptors</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most systems have limits on how many files and sockets can be open, so it&#8217;s strongly recommended that socket ports be closed explicitly when no longer required (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of the underlying C functions take values in network byte order, but the convention in Guile is that at the Scheme level everything is ordinary host byte order and conversions are made automatically where necessary.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-socket-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>socket</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>family style proto</EM></DT>
<DT><A name=index-scm_005fsocket></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_socket</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(family, style, proto)</EM></DT>
<DD>
<P>Return a new socket port of the type specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>family</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>style</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proto</VAR>. All three parameters are integers. The possible values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>family</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are as follows, where supported by the system,</P>
<DL>
<DT><A name=index-PF_005fUNIX></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>PF_UNIX</STRONG></DT>
<DT><A name=index-PF_005fINET></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>PF_INET</STRONG></DT>
<DT><A name=index-PF_005fINET6></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>PF_INET6</STRONG></DT></DL>
<P>The possible values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>style</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are as follows, again where supported by the system,</P>
<DL>
<DT><A name=index-SOCK_005fSTREAM></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOCK_STREAM</STRONG></DT>
<DT><A name=index-SOCK_005fDGRAM></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOCK_DGRAM</STRONG></DT>
<DT><A name=index-SOCK_005fRAW></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOCK_RAW</STRONG></DT>
<DT><A name=index-SOCK_005fRDM></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOCK_RDM</STRONG></DT>
<DT><A name=index-SOCK_005fSEQPACKET></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOCK_SEQPACKET</STRONG></DT></DL>
<P><VAR>proto</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be obtained from a protocol name using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotobyname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Databases">Network Databases</A>). A value of zero means the default protocol, which is usually right.</P>
<P>A socket cannot by used for communication until it has been connected somewhere, usually with either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>connect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accept</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-socketpair></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>socketpair</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>family style proto</EM></DT>
<DT><A name=index-scm_005fsocketpair></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_socketpair</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(family, style, proto)</EM></DT>
<DD>
<P>Return a pair, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of which are two unnamed socket ports connected to each other. The connection is full-duplex, so data can be transferred in either direction between the two.</P>
<P><VAR>family</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>style</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proto</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>socket</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. But many systems only support socket pairs in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PF_UNIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>family. Zero is likely to be the only meaningful value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proto</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getsockopt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getsockopt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock level optname</EM></DT>
<DT><A name=index-setsockopt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setsockopt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock level optname value</EM></DT>
<DT><A name=index-scm_005fgetsockopt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getsockopt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, level, optname)</EM></DT>
<DT><A name=index-scm_005fsetsockopt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setsockopt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, level, optname, value)</EM></DT>
<DD>
<P>Get or set an option on socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getsockopt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the current value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setsockopt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets a value and the return is unspecified.</P>
<P><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer specifying a protocol layer, either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SOL_SOCKET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for socket level options, or a protocol number from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>IPPROTO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constants or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getprotoent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Databases">Network Databases</A>).</P>
<DL>
<DT><A name=index-SOL_005fSOCKET></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SOL_SOCKET</STRONG></DT>
<DT><A name=index-IPPROTO_005fIP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IPPROTO_IP</STRONG></DT>
<DT><A name=index-IPPROTO_005fTCP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IPPROTO_TCP</STRONG></DT>
<DT><A name=index-IPPROTO_005fUDP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IPPROTO_UDP</STRONG></DT></DL>
<P><VAR>optname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer specifying an option within the protocol layer.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SOL_SOCKET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>level the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optname</VAR>s are defined (when provided by the system). For their meaning see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Socket_002dLevel-Options">Socket-Level Options</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>man 7 socket</CODE>.</P>
<DL>
<DT><A name=index-SO_005fDEBUG></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_DEBUG</STRONG></DT>
<DT><A name=index-SO_005fREUSEADDR></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_REUSEADDR</STRONG></DT>
<DT><A name=index-SO_005fSTYLE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_STYLE</STRONG></DT>
<DT><A name=index-SO_005fTYPE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_TYPE</STRONG></DT>
<DT><A name=index-SO_005fERROR></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_ERROR</STRONG></DT>
<DT><A name=index-SO_005fDONTROUTE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_DONTROUTE</STRONG></DT>
<DT><A name=index-SO_005fBROADCAST></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_BROADCAST</STRONG></DT>
<DT><A name=index-SO_005fSNDBUF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_SNDBUF</STRONG></DT>
<DT><A name=index-SO_005fRCVBUF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_RCVBUF</STRONG></DT>
<DT><A name=index-SO_005fKEEPALIVE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_KEEPALIVE</STRONG></DT>
<DT><A name=index-SO_005fOOBINLINE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_OOBINLINE</STRONG></DT>
<DT><A name=index-SO_005fNO_005fCHECK></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_NO_CHECK</STRONG></DT>
<DT><A name=index-SO_005fPRIORITY></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_PRIORITY</STRONG></DT>
<DT><A name=index-SO_005fREUSEPORT></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_REUSEPORT</STRONG></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>taken or returned is an integer.</P></DD></DL>
<DL>
<DT><A name=index-SO_005fLINGER></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SO_LINGER</STRONG></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>taken or returned is a pair of integers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>ENABLE</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>TIMEOUT</VAR>)</CODE>. On old systems without timeout support (ie. without<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct linger</CODE>), only<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ENABLE</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has an effect but the value in Guile is always a pair.</P></DD></DL>
<P>For IP level (<CODE>IPPROTO_IP</CODE>) the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optname</VAR>s are defined (when provided by the system). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>man ip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for what they mean.</P>
<DL>
<DT><A name=index-IP_005fMULTICAST_005fIF></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IP_MULTICAST_IF</STRONG></DT>
<DD>
<P>This sets the source interface used by multicast traffic.</P></DD></DL>
<DL>
<DT><A name=index-IP_005fMULTICAST_005fTTL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IP_MULTICAST_TTL</STRONG></DT>
<DD>
<P>This sets the default TTL for multicast traffic. This defaults to 1 and should be increased to allow traffic to pass beyond the local network.</P></DD></DL>
<DL>
<DT><A name=index-IP_005fADD_005fMEMBERSHIP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IP_ADD_MEMBERSHIP</STRONG></DT>
<DT><A name=index-IP_005fDROP_005fMEMBERSHIP></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>IP_DROP_MEMBERSHIP</STRONG></DT>
<DD>
<P>These can be used only with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setsockopt</CODE>, not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getsockopt</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>MULTIADDR</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>INTERFACEADDR</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of integer IPv4 addresses (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Address-Conversion">Network Address Conversion</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>MULTIADDR</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a multicast address to be added to or dropped from the interface<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>INTERFACEADDR</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>INTERFACEADDR</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INADDR_ANY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to have the system select the interface.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>INTERFACEADDR</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be an interface index number, on systems supporting that.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shutdown></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shutdown</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock how</EM></DT>
<DT><A name=index-scm_005fshutdown></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_shutdown</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, how)</EM></DT>
<DD>
<P>Sockets can be closed simply by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-port</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shutdown</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure allows reception or transmission on a connection to be shut down individually, according to the parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>how</VAR>:</P>
<DL compact>
<DT>0</DT>
<DD>
<P>Stop receiving data for this socket. If further data arrives, reject it.</P></DD>
<DT>1</DT>
<DD>
<P>Stop trying to transmit data from this socket. Discard any data waiting to be sent. Stop looking for acknowledgement of data already sent; don&#8217;t retransmit it if it is lost.</P></DD>
<DT>2</DT>
<DD>
<P>Stop both reception and transmission.</P></DD></DL>
<P>The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-connect></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>connect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock sockaddr</EM></DT>
<DT><A name=index-connect-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>connect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_INET ipv4addr port</EM></DT>
<DT><A name=index-connect-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>connect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_INET6 ipv6addr port [flowinfo [scopeid]]</EM></DT>
<DT><A name=index-connect-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>connect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_UNIX path</EM></DT>
<DT><A name=index-scm_005fconnect></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_connect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, fam, address, args)</EM></DT>
<DD>
<P>Initiate a connection on socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a given address. The destination is either a socket address object, or arguments the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-socket-address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would take to make such an object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>). The return value is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(connect sock AF_INET INADDR_LOOPBACK 23)
(connect sock (make-socket-address AF_INET INADDR_LOOPBACK 23))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bind></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock sockaddr</EM></DT>
<DT><A name=index-bind-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_INET ipv4addr port</EM></DT>
<DT><A name=index-bind-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_INET6 ipv6addr port [flowinfo [scopeid]]</EM></DT>
<DT><A name=index-bind-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock AF_UNIX path</EM></DT>
<DT><A name=index-scm_005fbind></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, fam, address, args)</EM></DT>
<DD>
<P>Bind socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the given address. The address is either a socket address object, or arguments the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-socket-address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would take to make such an object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>). The return value is unspecified.</P>
<P>Generally a socket is only explicitly bound to a particular address when making a server, i.e. to listen on a particular port. For an outgoing connection the system will assign a local address automatically, if not already bound.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bind sock AF_INET INADDR_ANY 12345)
(bind sock (make-socket-address AF_INET INADDR_ANY 12345))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-listen></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>listen</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock backlog</EM></DT>
<DT><A name=index-scm_005flisten></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_listen</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, backlog)</EM></DT>
<DD>
<P>Enable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to accept connection requests.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>backlog</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer specifying the maximum length of the queue for pending connections. If the queue fills, new clients will fail to connect until the server calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accept</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to accept a connection from the queue.</P>
<P>The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock</EM></DT>
<DT><A name=index-scm_005faccept></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_accept</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock)</EM></DT>
<DD>
<P>Accept a connection from socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which has been enabled for listening with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>listen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. If there are no incoming connections in the queue, wait until one is available (unless<CODE>O_NONBLOCK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been set on the socket, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors"><CODE>fcntl</CODE></A>).</P>
<P>The return value is a pair. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a new socket port, connected and ready to communicate. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a socket address object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>) which is where the remote connection is from (like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getpeername</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below).</P>
<P>All communication takes place using the new socket returned. The given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>remains bound and listening, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accept</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be called on it again to get another incoming connection when desired.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getsockname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getsockname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock</EM></DT>
<DT><A name=index-scm_005fgetsockname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getsockname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock)</EM></DT>
<DD>
<P>Return a socket address object which is the where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound locally.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may have obtained its local address from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(above), or if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>connect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is done with an otherwise unbound socket (which is usual) then the system will have assigned an address.</P>
<P>Note that on many systems the address of a socket in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_UNIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>namespace cannot be read.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpeername></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpeername</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock</EM></DT>
<DT><A name=index-scm_005fgetpeername></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpeername</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock)</EM></DT>
<DD>
<P>Return a socket address object which is where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is connected to, i.e. the remote endpoint.</P>
<P>Note that on many systems the address of a socket in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AF_UNIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>namespace cannot be read.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-recv_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>recv!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock buf [flags]</EM></DT>
<DT><A name=index-scm_005frecv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_recv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, buf, flags)</EM></DT>
<DD>
<P>Receive data from a socket port.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must already be bound to the address from which data is to be received.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bytevector into which the data will be written. The size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>limits the amount of data which can be received: in the case of packet protocols, if a packet larger than this limit is encountered then some data will be irrevocably lost.</P><A name=index-MSG_005fOOB></A><A name=index-MSG_005fPEEK></A><A name=index-MSG_005fDONTROUTE></A>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is a value or bitwise OR of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_OOB</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_PEEK</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_DONTROUTE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<P>The value returned is the number of bytes read from the socket.</P>
<P>Note that the data is read directly from the socket file descriptor: any unread buffered port data is ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-send></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>send</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock message [flags]</EM></DT>
<DT><A name=index-scm_005fsend></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_send</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, message, flags)</EM></DT>
<DD><A name=index-MSG_005fOOB-1></A><A name=index-MSG_005fPEEK-1></A><A name=index-MSG_005fDONTROUTE-1></A>
<P>Transmit bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must already be bound to a destination address. The value returned is the number of bytes transmitted&#8212;it&#8217;s possible for this to be less than the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the socket is set to be non-blocking. The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is a value or bitwise OR of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_OOB</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_PEEK</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_DONTROUTE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<P>Note that the data is written directly to the socket file descriptor: any unflushed buffered port data is ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-recvfrom_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>recvfrom!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock buf [flags [start [end]]]</EM></DT>
<DT><A name=index-scm_005frecvfrom></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_recvfrom</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, buf, flags, start, end)</EM></DT>
<DD>
<P>Receive data from socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR>, returning the originating address as well as the data. This function is usually for datagram sockets, but can be used on stream-oriented sockets too.</P>
<P>The data received is stored in bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>, using either the whole bytevector or just the region between the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>positions. The size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>limits the amount of data that can be received. For datagram protocols if a packet larger than this is received then excess bytes are irrevocably lost.</P>
<P>The return value is a pair. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of bytes read. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a socket address object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>) which is where the data came from, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the origin is unknown.</P><A name=index-MSG_005fOOB-2></A><A name=index-MSG_005fPEEK-2></A><A name=index-MSG_005fDONTROUTE-2></A>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is a or bitwise-OR (<CODE>logior</CODE>) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_OOB</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_PEEK</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_DONTROUTE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<P>Data is read directly from the socket file descriptor, any buffered port data is ignored.</P>
<P>On a GNU/Linux system<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>recvfrom!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not multi-threading, all threads stop while a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>recvfrom!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call is in progress. An application may need to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>select</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O_NONBLOCK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_DONTWAIT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid this.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sendto></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sendto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock message sockaddr [flags]</EM></DT>
<DT><A name=index-sendto-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sendto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock message AF_INET ipv4addr port [flags]</EM></DT>
<DT><A name=index-sendto-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sendto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock message AF_INET6 ipv6addr port [flowinfo [scopeid [flags]]]</EM></DT>
<DT><A name=index-sendto-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sendto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sock message AF_UNIX path [flags]</EM></DT>
<DT><A name=index-scm_005fsendto></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sendto</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(sock, message, fam, address, args_and_flags)</EM></DT>
<DD>
<P>Transmit bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a datagram socket port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sock</VAR>. The destination is specified either as a socket address object, or as arguments the same as would be taken by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-socket-address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create such an object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Socket-Address">Network Socket Address</A>).</P>
<P>The destination address may be followed by an optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument which is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_OOB</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_PEEK</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MSG_DONTROUTE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<P>The value returned is the number of bytes transmitted &#8211; it&#8217;s possible for this to be less than the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the socket is set to be non-blocking. Note that the data is written directly to the socket file descriptor: any unflushed buffered port data is ignored.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Internet-Socket-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Network-Sockets-and-Communication" rel=prev>Network Sockets and Communication</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=up>Networking</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Network-Socket-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.2.11.5 Network Socket Examples</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-network-examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-socket-examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following give examples of how to use network sockets.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Internet-Socket-Client-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Internet Socket Client Example</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-socket-client-example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following example demonstrates an Internet socket client. It connects to the HTTP daemon running on the local machine and returns the contents of the root index URL.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(let ((s (socket PF_INET SOCK_STREAM 0)))
  (connect s AF_INET (inet-pton AF_INET "127.0.0.1") 80)
  (display "GET / HTTP/1.0\r\n\r\n" s)

  (do ((line (read-line s) (read-line s)))
      ((eof-object? line))
    (display line)
    (newline)))
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Internet-Socket-Server-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Internet Socket Server Example</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-socket-server-example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following example shows a simple Internet server which listens on port 2904 for incoming connections and sends a greeting back to the client.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(let ((s (socket PF_INET SOCK_STREAM 0)))
  (setsockopt s SOL_SOCKET SO_REUSEADDR 1)
  ;; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Specific address?</SPAN>
  ;; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(bind s AF_INET (inet-pton AF_INET "127.0.0.1") 2904)</SPAN>
  (bind s AF_INET INADDR_ANY 2904)
  (listen s 5)

  (simple-format #t "Listening for clients in pid: ~S" (getpid))
  (newline)

  (while #t
    (let* ((client-connection (accept s))
           (client-details (cdr client-connection))
           (client (car client-connection)))
      (simple-format #t "Got new client connection: ~S"
                     client-details)
      (newline)
      (simple-format #t "Client address: ~S"
                     (gethostbyaddr
                      (sockaddr:addr client-details)))
      (newline)
      ;; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Send back the greeting to the client port</SPAN>
      (display "Hello client\r\n" client)
      (close client))))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-Identification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Locales" rel=next>Locales</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Networking" rel=prev>Networking</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=System-Identification-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.12 System Identification</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-system-name></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section lists the various procedures Guile provides for accessing information about the system it runs on.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uname</STRONG></DT>
<DT><A name=index-scm_005funame></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_uname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an object with some information about the computer system the program is running on.</P>
<P>The following procedures accept an object as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return a selected component (all of which are strings).</P>
<DL>
<DT><A name=index-utsname_003asysname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utsname:sysname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>un</EM></DT>
<DD>
<P>The name of the operating system.</P></DD></DL>
<DL>
<DT><A name=index-utsname_003anodename></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utsname:nodename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>un</EM></DT>
<DD>
<P>The network name of the computer.</P></DD></DL>
<DL>
<DT><A name=index-utsname_003arelease></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utsname:release</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>un</EM></DT>
<DD>
<P>The current release level of the operating system implementation.</P></DD></DL>
<DL>
<DT><A name=index-utsname_003aversion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utsname:version</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>un</EM></DT>
<DD>
<P>The current version level within the release of the operating system.</P></DD></DL>
<DL>
<DT><A name=index-utsname_003amachine></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utsname:machine</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>un</EM></DT>
<DD>
<P>A description of the hardware.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gethostname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gethostname</STRONG></DT>
<DT><A name=index-scm_005fgethostname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gethostname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-host-name></A>
<P>Return the host name of the current processor.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sethostname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sethostname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DT><A name=index-scm_005fsethostname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sethostname</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name)</EM></DT>
<DD>
<P>Set the host name of the current processor to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. May only be used by the superuser. The return value is not specified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Locales></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Encryption" rel=next>Encryption</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#System-Identification" rel=prev>System Identification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Locales-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.13 Locales</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-setlocale></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>setlocale</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>category [locale]</EM></DT>
<DT><A name=index-scm_005fsetlocale></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_setlocale</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(category, locale)</EM></DT>
<DD>
<P>Get or set the current locale, used for various internationalizations. Locales are strings, such as &#8216;<SAMP>sv_SE</SAMP>&#8217;.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given then the locale for the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set and the new value returned. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given then the current value is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the following values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Locale-Categories">Categories of Activities that Locales Affect</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>):</P>
<DL>
<DT><A name=index-LC_005fALL></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_ALL</STRONG></DT>
<DT><A name=index-LC_005fCOLLATE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_COLLATE</STRONG></DT>
<DT><A name=index-LC_005fCTYPE></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_CTYPE</STRONG></DT>
<DT><A name=index-LC_005fMESSAGES></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_MESSAGES</STRONG></DT>
<DT><A name=index-LC_005fMONETARY></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_MONETARY</STRONG></DT>
<DT><A name=index-LC_005fNUMERIC></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_NUMERIC</STRONG></DT>
<DT><A name=index-LC_005fTIME></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>LC_TIME</STRONG></DT></DL><A name=index-LANG></A>
<P>A common usage is &#8216;<SAMP>(setlocale LC_ALL "")</SAMP>&#8217;, which initializes all categories based on standard environment variables (<CODE>LANG</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc). For full details on categories and locale names see<A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Locales">Locales and Internationalization</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>affects locale settings for the whole process. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#i18n-Introduction">locale objects and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-locale</CODE></A>, for a thread-safe alternative.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Encryption></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Locales" rel=prev>Locales</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#POSIX" rel=up>POSIX</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Encryption-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.2.14 Encryption</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-encryption></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Please note that the procedures in this section are not suited for strong encryption, they are only interfaces to the well-known and common system library functions of the same name. They are just as good (or bad) as the underlying functions, so you should refer to your system documentation before using them (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#crypt">Encrypting Passwords</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The GNU C Library Reference Manual</CITE>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-crypt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>crypt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key salt</EM></DT>
<DT><A name=index-scm_005fcrypt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_crypt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, salt)</EM></DT>
<DD>
<P>Encrypt<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, with the addition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>salt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(both strings), using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crypt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>C library call.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getpass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not an encryption procedure per se, it appears here because it is often used in combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crypt</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-getpass></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>getpass</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>prompt</EM></DT>
<DT><A name=index-scm_005fgetpass></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_getpass</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(prompt)</EM></DT>
<DD><A name=index-password></A>
<P>Display<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prompt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the standard error output and read a password from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/dev/tty</SAMP>. If this file is not accessible, it reads from standard input. The password may be up to 127 characters in length. Additional characters and the terminating newline character are discarded. While reading the password, echoing and the generation of signals by special characters is disabled.</P></DD></DL>