<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.7 Pattern Matching</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pattern-matching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_0028ice_002d9-match_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 match)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pattern matcher</EM>, written by Alex Shinn, and compatible with Andrew K. Wright&#8217;s pattern matcher found in many Scheme implementations.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pattern-variable></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A pattern matcher can match an object against several patterns and extract the elements that make it up. Patterns can represent any Scheme object: lists, strings, symbols, records, etc. They can optionally contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pattern variables</EM>. When a matching pattern is found, an expression associated with the pattern is evaluated, optionally with all pattern variables bound to the corresponding elements of the object:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(let ((l '(hello (world))))
  (match l           ;; &lt;- the input object
    (('hello (who))  ;; &lt;- the pattern
     who)))          ;; &lt;- the expression evaluated upon matching
&#8658; world
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this example, list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>l</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches the pattern<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>('hello (who))</CODE>, because it is a two-element list whose first element is the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hello</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and whose second element is a one-element list. Here<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR>is a pattern variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>match</CODE>, the pattern matcher, locally binds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the value contained in this one-element list&#8212;i.e., the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>world</CODE>. An error would be raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>l</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>did not match the pattern.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The same object can be matched against a simpler pattern:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(let ((l '(hello (world))))
  (match l
    ((x y)
     (values x y))))
&#8658; hello
&#8658; (world)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here pattern<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(x y)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches any two-element list, regardless of the types of these elements. Pattern variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are bound to, respectively, the first and second element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>l</VAR>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Patterns can be composed, and nested. For instance,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ellipsis) means that the previous pattern may be matched zero or more times in a list:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(match lst
  (((heads tails ...) ...)
   heads))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This expression returns the first element of each list within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. For proper lists of proper lists, it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(map car lst)</CODE>. However, it performs additional checks to make sure that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the lists therein are proper lists, as prescribed by the pattern, raising an error if they are not.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compared to hand-written code, pattern matching noticeably improves clarity and conciseness&#8212;no need to resort to series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls when matching lists, for instance. It also improves robustness, by making sure the input<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>completely</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches the pattern&#8212;conversely, hand-written code often trades robustness for conciseness. And of course,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>match</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a macro, and the code it expands to is just as efficient as equivalent hand-written code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The pattern matcher is defined as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-match></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>match</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp clause1 clause2 &#8230;</EM></DT>
<DD>
<P>Match object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>against the patterns in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; in the order in which they appear. Return the value produced by the first matching clause. If no clause matches, throw an exception with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>match-error</CODE>.</P>
<P>Each clause has the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(pattern body1 body2 &#8230;)</CODE>. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must follow the syntax described below. Each body is an arbitrary Scheme expression, possibly referring to pattern variables of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pattern</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The syntax and interpretation of patterns is as follows:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=verbatim>        patterns:                       matches:

pat ::= identifier                      anything, and binds identifier
      | _                               anything
      | ()                              the empty list
      | #t                              #t
      | #f                              #f
      | string                          a string
      | number                          a number
      | character                       a character
      | 'sexp                           an s-expression
      | 'symbol                         a symbol (special case of s-expr)
      | (pat_1 ... pat_n)               list of n elements
      | (pat_1 ... pat_n . pat_{n+1})   list of n or more
      | (pat_1 ... pat_n pat_n+1 ooo)   list of n or more, each element
                                          of remainder must match pat_n+1
      | #(pat_1 ... pat_n)              vector of n elements
      | #(pat_1 ... pat_n pat_n+1 ooo)  vector of n or more, each element
                                          of remainder must match pat_n+1
      | #&amp;pat                           box
      | ($ record-name pat_1 ... pat_n) a record
      | (= field pat)                   a ``field'' of an object
      | (and pat_1 ... pat_n)           if all of pat_1 thru pat_n match
      | (or pat_1 ... pat_n)            if any of pat_1 thru pat_n match
      | (not pat_1 ... pat_n)           if all pat_1 thru pat_n don't match
      | (? predicate pat_1 ... pat_n)   if predicate true and all of
                                          pat_1 thru pat_n match
      | (set! identifier)               anything, and binds setter
      | (get! identifier)               anything, and binds getter
      | `qp                             a quasi-pattern
      | (identifier *** pat)            matches pat in a tree and binds
                                        identifier to the path leading
                                        to the object that matches pat

ooo ::= ...                             zero or more
      | ___                             zero or more
      | ..1                             1 or more

        quasi-patterns:                 matches:

qp  ::= ()                              the empty list
      | #t                              #t
      | #f                              #f
      | string                          a string
      | number                          a number
      | character                       a character
      | identifier                      a symbol
      | (qp_1 ... qp_n)                 list of n elements
      | (qp_1 ... qp_n . qp_{n+1})      list of n or more
      | (qp_1 ... qp_n qp_n+1 ooo)      list of n or more, each element
                                          of remainder must match qp_n+1
      | #(qp_1 ... qp_n)                vector of n elements
      | #(qp_1 ... qp_n qp_n+1 ooo)     vector of n or more, each element
                                          of remainder must match qp_n+1
      | #&amp;qp                            box
      | ,pat                            a pattern
      | ,@pat                           a pattern
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The names<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quote</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quasiquote</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unquote</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unquote-splicing</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>___</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be used as pattern variables.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a more complex example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-9))

(let ()
  (define-record-type person
    (make-person name friends)
    person?
    (name    person-name)
    (friends person-friends))

  (letrec ((alice (make-person "Alice" (delay (list bob))))
           (bob   (make-person "Bob" (delay (list alice)))))
    (match alice
      (($ person name (= force (($ person "Bob"))))
       (list 'friend-of-bob name))
      (_ #f))))

&#8658; (friend-of-bob "Alice")
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pattern is used to match a SRFI-9 record of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>person</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing two or more slots. The value of the first slot is bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pattern is used to apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the second slot, and then checking that the result matches the given pattern. In other words, the complete pattern matches any<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>person</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose second slot is a promise that evaluates to a one-element list containing a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>person</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose first slot is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"Bob"</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Please refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ice-9/match.upstream.scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>file in your Guile installation for more details.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also comes with a pattern matcher specifically tailored to SXML trees, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#sxml_002dmatch">sxml-match</A>.