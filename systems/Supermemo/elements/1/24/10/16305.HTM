<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.3<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>HTTP</ACRONYM>, the Web, and All That</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Web></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-WWW></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-HTTP></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It has always been possible to connect computers together and share information between them, but the rise of the World Wide Web over the last couple of decades has made it much easier to do so. The result is a richly connected network of computation, in which Guile forms a part.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By &#8220;the web&#8221;, we mean the HTTP protocol<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT23" name=DOCF23><SUP>23</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as handled by servers, clients, proxies, caches, and the various kinds of messages and message components that can be sent and received by that protocol, notably HTML.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On one level, the web is text in motion: the protocols themselves are textual (though the payload may be binary), and it&#8217;s possible to create a socket and speak text to the web. But such an approach is obviously primitive. This section details the higher-level data types and operations provided by Guile: URIs, HTTP request and response records, and a conventional web server implementation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The material in this section is arranged in ascending order, in which later concepts build on previous ones. If you prefer to start with the highest-level perspective, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Examples">Web Examples</A>, and work your way back.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Types-and-the-Web">Types and the Web</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Types prevent bugs and security problems.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#URIs">URIs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Universal Resource Identifiers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#HTTP">HTTP</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The Hyper-Text Transfer Protocol.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers">HTTP Headers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How Guile represents specific header values.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Transfer-Codings">Transfer Codings</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>HTTP Transfer Codings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Requests">Requests</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>HTTP requests.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Responses">Responses</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>HTTP responses.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Web-Client">Web Client</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing web resources over HTTP.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Web-Server">Web Server</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Serving HTTP to the internet.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Examples">Web Examples</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to use this thing.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Types-and-the-Web></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#URIs" rel=next>URIs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Types-and-the-Web-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.1 Types and the Web</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is a truth universally acknowledged, that a program with good use of data types, will be free from many common bugs. Unfortunately, the common practice in web programming seems to ignore this maxim. This subsection makes the case for expressive data types in web programming.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By &#8220;expressive data types&#8221;, we mean that the data types<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>say</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>something about how a program solves a problem. For example, if we choose to represent dates using SRFI 19 date records (see<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19">SRFI-19</A>), this indicates that there is a part of the program that will always have valid dates. Error handling for a number of basic cases, like invalid dates, occurs on the boundary in which we produce a SRFI 19 date record from other types, like strings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With regards to the web, data types are helpful in the two broad phases of HTTP messages: parsing and generation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Consider a server, which has to parse a request, and produce a response. Guile will parse the request into an HTTP request object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Requests">Requests</A>), with each header parsed into an appropriate Scheme data type. This transition from an incoming stream of characters to typed data is a state change in a program&#8212;the strings might parse, or they might not, and something has to happen if they do not. (Guile throws an error in this case.) But after you have the parsed request, &#8220;client&#8221; code (code built on top of the Guile web framework) will not have to check for syntactic validity. The types already make this information manifest.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This state change on the parsing boundary makes programs more robust, as they themselves are freed from the need to do a number of common error checks, and they can use normal Scheme procedures to handle a request instead of ad-hoc string parsers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The need for types on the response generation side (in a server) is more subtle, though not less important. Consider the example of a POST handler, which prints out the text that a user submits from a form. Such a handler might include a procedure like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>;; First, a helper procedure
(define (para . contents)
  (string-append "&lt;p&gt;" (string-concatenate contents) "&lt;/p&gt;"))

;; Now the meat of our simple web application
(define (you-said text)
  (para "You said: " text))

(display (you-said "Hi!"))
-| &lt;p&gt;You said: Hi!&lt;/p&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is a perfectly valid implementation, provided that the incoming text does not contain the special HTML characters &#8216;<SAMP>&lt;</SAMP>&#8217;, &#8216;<SAMP>&gt;</SAMP>&#8217;, or &#8216;<SAMP>&amp;</SAMP>&#8217;. But this provision of a restricted character set is not reflected anywhere in the program itself: we must<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>assume</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that the programmer understands this, and performs the check elsewhere.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unfortunately, the short history of the practice of programming does not bear out this assumption. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cross-site scripting</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<ACRONYM>XSS</ACRONYM>) vulnerability is just such a common error in which unfiltered user input is allowed into the output. A user could submit a crafted comment to your web site which results in visitors running malicious Javascript, within the security context of your domain:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(display (you-said "&lt;script src=\"http://bad.com/nasty.js\" /&gt;"))
-| &lt;p&gt;You said: &lt;script src="http://bad.com/nasty.js" /&gt;&lt;/p&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The fundamental problem here is that both user data and the program template are represented using strings. This identity means that types can&#8217;t help the programmer to make a distinction between these two, so they get confused.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are a number of possible solutions, but perhaps the best is to treat HTML not as strings, but as native s-expressions: as SXML. The basic idea is that HTML is either text, represented by a string, or an element, represented as a tagged list. So &#8216;<SAMP>foo</SAMP>&#8217; becomes &#8216;<SAMP>"foo"</SAMP>&#8217;, and &#8216;<SAMP>&lt;b&gt;foo&lt;/b&gt;</SAMP>&#8217; becomes &#8216;<SAMP>(b "foo")</SAMP>&#8217;. Attributes, if present, go in a tagged list headed by &#8216;<SAMP>@</SAMP>&#8217;, like &#8216;<SAMP>(img (@ (src "http://example.com/foo.png")))</SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SXML">SXML</A>, for more information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The good thing about SXML is that HTML elements cannot be confused with text. Let&#8217;s make a new definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>para</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (para . contents)
  `(p ,@contents))

(use-modules (sxml simple))
(sxml-&gt;xml (you-said "Hi!"))
-| &lt;p&gt;You said: Hi!&lt;/p&gt;

(sxml-&gt;xml (you-said "&lt;i&gt;Rats, foiled again!&lt;/i&gt;"))
-| &lt;p&gt;You said: &amp;lt;i&amp;gt;Rats, foiled again!&amp;lt;/i&amp;gt;&lt;/p&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So we see in the second example that HTML elements cannot be unwittingly introduced into the output. However it is now perfectly acceptable to pass SXML to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>you-said</CODE>; in fact, that is the big advantage of SXML over everything-as-a-string.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(sxml-&gt;xml (you-said (you-said "&lt;Hi!&gt;")))
-| &lt;p&gt;You said: &lt;p&gt;You said: &amp;lt;Hi!&amp;gt;&lt;/p&gt;&lt;/p&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SXML types allow procedures to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compose</EM>. The types make manifest which parts are HTML elements, and which are text. So you needn&#8217;t worry about escaping user input; the type transition back to a string handles that for you.<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>XSS</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>vulnerabilities are a thing of the past.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Well. That&#8217;s all very nice and opinionated and such, but how do I use the thing? Read on!</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=URIs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#HTTP" rel=next>HTTP</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Types-and-the-Web" rel=prev>Types and the Web</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Universal-Resource-Identifiers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.2 Universal Resource Identifiers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides a standard data type for Universal Resource Identifiers (URIs), as defined in RFC 3986.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The generic URI syntax is as follows:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>URI := scheme ":" ["//" [userinfo "@"] host [":" port]] path \
       [ "?" query ] [ "#" fragment ]
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, in the URI, &#8216;<CODE>http://www.gnu.org/help/</CODE>&#8217;, the scheme is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http</CODE>, the host is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>www.gnu.org</CODE>, the path is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/help/</CODE>, and there is no userinfo, port, query, or fragment. All URIs have a scheme and a path (though the path might be empty). Some URIs have a host, and some of those have ports and userinfo. Any URI might have a query part or a fragment.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Userinfo is something of an abstraction, as some legacy URI schemes allowed userinfo of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>username</VAR>:<VAR>passwd</VAR></CODE>. But since passwords do not belong in URIs, the RFC does not want to condone this practice, so it calls anything before the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>userinfo</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Properly speaking, a fragment is not part of a URI. For example, when a web browser follows a link to &#8216;<CODE>http://example.com/#foo</CODE>&#8217;, it sends a request for &#8216;<CODE>http://example.com/</CODE>&#8217;, then looks in the resulting page for the fragment identified<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reference. A fragment identifies a part of a resource, not the resource itself. But it is useful to have a fragment field in the URI record itself, so we hope you will forgive the inconsistency.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web uri))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures can be found in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web uri)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. Load it into your Guile, using a form like the above, to have access to them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-build_002duri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>build-uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scheme [#:userinfo=<CODE>#f</CODE>] [#:host=<CODE>#f</CODE>] [#:port=<CODE>#f</CODE>] [#:path=<CODE>""</CODE>] [#:query=<CODE>#f</CODE>] [#:fragment=<CODE>#f</CODE>] [#:validate?=<CODE>#t</CODE>]</EM></DT>
<DD>
<P>Construct a URI object.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a symbol,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>either a positive, exact integer or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and the rest of the fields are either strings or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>validate?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, also run some consistency checks to make sure that the constructed URI is valid.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uri_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-uri_002dscheme></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-scheme</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002duserinfo></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-userinfo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002dhost></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-host</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002dquery></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-query</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DT><A name=index-uri_002dfragment></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-fragment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DD>
<P>A predicate and field accessors for the URI record type. The URI scheme will be a symbol, the port either a positive, exact integer or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, and the rest either strings or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not present.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003euri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a URI object. Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the string could not be parsed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uri_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DD>
<P>Serialize<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uri</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a string. If the URI has a port that is the default port for its scheme, the port is not included in the serialization.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-declare_002ddefault_002dport_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>declare-default-port!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scheme port</EM></DT>
<DD>
<P>Declare a default port for the given URI scheme.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uri_002ddecode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-decode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [#:encoding=<CODE>"utf-8"</CODE>]</EM></DT>
<DD>
<P>Percent-decode the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, which should be the name of a character encoding.</P>
<P>Note that this function should not generally be applied to a full URI string. For paths, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>split-and-decode-uri-path</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead. For query strings, split the query on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>boundaries, and decode the components separately.</P>
<P>Note also that percent-encoded strings encode<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytes</EM>, not characters. There is no guarantee that a given byte sequence is a valid string encoding. Therefore this routine may signal an error if the decoded bytes are not valid for the given encoding. Pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you want decoded bytes as a bytevector directly. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports"><CODE>set-port-encoding!</CODE></A>, for more information on character encodings.</P>
<P>Returns a string of the decoded characters, or a bytevector if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Fixme: clarify return type. indicate default values. type of unescaped-chars.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uri_002dencode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uri-encode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [#:encoding=<CODE>"utf-8"</CODE>] [#:unescaped-chars]</EM></DT>
<DD>
<P>Percent-encode any character not in the character set,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unescaped-chars</VAR>.</P>
<P>The default character set includes alphanumerics from ASCII, as well as the special characters &#8216;<SAMP>-</SAMP>&#8217;, &#8216;<SAMP>.</SAMP>&#8217;, &#8216;<SAMP>_</SAMP>&#8217;, and &#8216;<SAMP>~</SAMP>&#8217;. Any other character will be percent-encoded, by writing out the character to a bytevector within the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, then encoding each byte as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%<VAR>HH</VAR></CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>HH</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the hexadecimal representation of the byte.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-split_002dand_002ddecode_002duri_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>split-and-decode-uri-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>path</EM></DT>
<DD>
<P>Split<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>path</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into its components, and decode each component, removing empty components.</P>
<P>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"/foo/bar%20baz/"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>decodes to the two-element list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>("foo" "bar baz")</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-encode_002dand_002djoin_002duri_002dpath></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>encode-and-join-uri-path</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>parts</EM></DT>
<DD>
<P>URI-encode each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parts</VAR>, which should be a list of strings, and join the parts together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a delimiter.</P>
<P>For example, the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>("scrambled eggs" "biscuits&amp;gravy")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>encodes as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"scrambled%20eggs/biscuits%26gravy"</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers" rel=next>HTTP Headers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#URIs" rel=prev>URIs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-Hyper_002dText-Transfer-Protocol></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.3 The Hyper-Text Transfer Protocol</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The initial motivation for including web functionality in Guile, rather than rely on an external package, was to establish a standard base on which people can share code. To that end, we continue the focus on data types by providing a number of low-level parsers and unparsers for elements of the HTTP protocol.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are want to skip the low-level details for now and move on to web pages, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Client">Web Client</A>, and see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Server">Web Server</A>. Otherwise, load the HTTP module, and read on.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web http))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The focus of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web http)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module is to parse and unparse standard HTTP headers, representing them to Guile as native data structures. For example, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Date:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header will be represented as a SRFI-19 date record (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d19">SRFI-19</A>), rather than as a string.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile tries to follow RFCs fairly strictly&#8212;the road to perdition being paved with compatibility hacks&#8212;though some allowances are made for not-too-divergent texts.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Header names are represented as lower-case symbols.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003eheader></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;header</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a symbolic header name.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-header_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>header-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DD>
<P>Return the string form for the header named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(string-&gt;header "Content-Length")
&#8658; content-length
(header-&gt;string 'content-length)
&#8658; "Content-Length"

(string-&gt;header "FOO")
&#8658; foo
(header-&gt;string 'foo)
&#8658; "Foo"
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile keeps a registry of known headers, their string names, and some parsing and serialization procedures. If a header is unknown, its string name is simply its symbol name in title-case.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-known_002dheader_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>known-header?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a known header, with associated parsers and serialization procedures, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-header_002dparser></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>header-parser</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DD>
<P>Return the value parser for headers named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>. The result is a procedure that takes one argument, a string, and returns the parsed value. If the header isn&#8217;t known to Guile, a default parser is returned that passes through the string unchanged.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-header_002dvalidator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>header-validator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DD>
<P>Return a predicate which returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the given value is valid for headers named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>. The default validator for unknown headers is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-header_002dwriter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>header-writer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DD>
<P>Return a procedure that writes values for headers named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a port. The resulting procedure takes two arguments: a value and a port. The default writer is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more on the set of headers that Guile knows about out of the box, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers">HTTP Headers</A>. To add your own, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>declare-header!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-declare_002dheader_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>declare-header!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name parser validator writer [#:multiple?=<CODE>#f</CODE>]</EM></DT>
<DD>
<P>Declare a parser, validator, and writer for a given header.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, let&#8217;s say you are running a web server behind some sort of proxy, and your proxy adds an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X-Client-Address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header, indicating the IPv4 address of the original client. You would like for the HTTP request record to parse out this header to a Scheme value, instead of leaving it as a string. You could register this header with Guile&#8217;s HTTP stack like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(declare-header! "X-Client-Address"
  (lambda (str)
    (inet-aton str))
  (lambda (ip)
    (and (integer? ip) (exact? ip) (&lt;= 0 ip #xffffffff)))
  (lambda (ip port)
    (display (inet-ntoa ip) port)))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-declare_002dopaque_002dheader_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>declare-opaque-header!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>A specialised version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>declare-header!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the case in which you want a header&#8217;s value to be returned/written &#8220;as-is&#8221;.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-valid_002dheader_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>valid-header?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym val</EM></DT>
<DD>
<P>Return a true value if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a valid Scheme value for the header with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now that we have a generic interface for reading and writing headers, we do just that.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dheader></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-header</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Read one HTTP header from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Return two values: the header name and the parsed Scheme value. May raise an exception if the header was known but the value was invalid.</P>
<P>Returns the end-of-file object for both values if the end of the message body was reached (i.e., a blank line).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dheader></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-header</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name val</EM></DT>
<DD>
<P>Parse<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>, a string, with the parser for the header named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. Returns the parsed value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dheader></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-header</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name val port</EM></DT>
<DD>
<P>Write the given header name and value to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, using the writer from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>header-writer</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dheaders></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-headers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Read the headers of an HTTP message from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, returning them as an ordered alist.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dheaders></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-headers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>headers port</EM></DT>
<DD>
<P>Write the given header alist to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Doesn&#8217;t write the final &#8216;<SAMP>\r\n</SAMP>&#8217;, as the user might want to add another header.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web http)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module also has some utility procedures to read and write request and response lines.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dhttp_002dmethod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-http-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start] [end]</EM></DT>
<DD>
<P>Parse an HTTP method from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The result is an upper-case symbol, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GET</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002dhttp_002dversion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-http-version</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start] [end]</EM></DT>
<DD>
<P>Parse an HTTP version from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, returning it as a major&#8211;minor pair. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HTTP/1.1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parses as the pair of integers,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 . 1)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-parse_002drequest_002duri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>parse-request-uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start] [end]</EM></DT>
<DD>
<P>Parse a URI from an HTTP request line. Note that URIs in requests do not have to have a scheme or host name. The result is a URI object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002drequest_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-request-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Read the first line of an HTTP request from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, returning three values: the method, the URI, and the version.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002drequest_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-request-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>method uri version port</EM></DT>
<DD>
<P>Write the first line of an HTTP request to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dresponse_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-response-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Read the first line of an HTTP response from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, returning three values: the HTTP version, the response code, and the &#8220;reason phrase&#8221;.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dresponse_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-response-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>version code reason-phrase port</EM></DT>
<DD>
<P>Write the first line of an HTTP response to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP-Headers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Transfer-Codings" rel=next>Transfer Codings</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#HTTP" rel=prev>HTTP</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP-Headers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.4 HTTP Headers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to defining the infrastructure to parse headers, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web http)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module defines specific parsers and unparsers for all headers defined in the HTTP/1.1 standard.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, if you receive a header named &#8216;<SAMP>Accept-Language</SAMP>&#8217; with a value &#8216;<SAMP>en, es;q=0.8</SAMP>&#8217;, Guile parses it as a quality list (defined below):</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(parse-header 'accept-language "en, es;q=0.8")
&#8658; ((1000 . "en") (800 . "es"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The format of the value for &#8216;<SAMP>Accept-Language</SAMP>&#8217; headers is defined below, along with all other headers defined in the HTTP standard. (If the header were unknown, the value would have been returned as a string.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For brevity, the header definitions below are given in the form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>name</VAR></CODE>, indicating that values for the header<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>name</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Type</VAR>. Since Guile internally treats header names in lower case, in this document we give types title-cased names. A short description of the each header&#8217;s purpose and an example follow.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For full details on the meanings of all of these headers, see the HTTP 1.1 standard, RFC 2616.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP-Header-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.4.1 HTTP Header Types</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here we define the types that are used below, when defining headers.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-Date></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>Date</STRONG></DT>
<DD>
<P>A SRFI-19 date.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-KVList></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>KVList</STRONG></DT>
<DD>
<P>A list whose elements are keys or key-value pairs. Keys are parsed to symbols. Values are strings by default. Non-string values are the exception, and are mentioned explicitly below, as appropriate.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SList></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SList</STRONG></DT>
<DD>
<P>A list of strings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-Quality></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>Quality</STRONG></DT>
<DD>
<P>An exact integer between 0 and 1000. Qualities are used to express preference, given multiple options. An option with a quality of 870, for example, is preferred over an option with quality 500.</P>
<P>(Qualities are written out over the wire as numbers between 0.0 and 1.0, but since the standard only allows three digits after the decimal, it&#8217;s equivalent to integers between 0 and 1000, so that&#8217;s what Guile uses.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-QList></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>QList</STRONG></DT>
<DD>
<P>A quality list: a list of pairs, the car of which is a quality, and the cdr a string. Used to express a list of options, along with their qualities.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ETag></A>HTTP Header Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ETag</STRONG></DT>
<DD>
<P>An entity tag, represented as a pair. The car of the pair is an opaque string, and the cdr is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the entity tag is a &#8220;strong&#8221; entity tag, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=General-Headers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.4.2 General Headers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">General HTTP headers may be present in any HTTP message.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cache_002dcontrol></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>KVList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cache-control</STRONG></DT>
<DD>
<P>A key-value list of cache-control directives. See RFC 2616, for more details.</P>
<P>If present, parameters to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>max-age</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>max-stale</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>min-fresh</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s-maxage</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are all parsed as non-negative integers.</P>
<P>If present, parameters to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>private</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-cache</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are parsed as lists of header names, as symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'cache-control "no-cache,no-store"
&#8658; (no-cache no-store)
(parse-header 'cache-control "no-cache=\"Authorization,Date\",no-store"
&#8658; ((no-cache . (authorization date)) no-store)
(parse-header 'cache-control "no-cache=\"Authorization,Date\",max-age=10"
&#8658; ((no-cache . (authorization date)) (max-age . 10))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-connection></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>connection</STRONG></DT>
<DD>
<P>A list of header names that apply only to this HTTP connection, as symbols. Additionally, the symbol &#8216;<SAMP>close</SAMP>&#8217; may be present, to indicate that the server should close the connection after responding to the request.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'connection "close")
&#8658; (close)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-date-2></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>date</STRONG></DT>
<DD>
<P>The date that a given HTTP message was originated.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'date "Tue, 15 Nov 1994 08:12:31 GMT")
&#8658; #&lt;date ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pragma></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>KVList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pragma</STRONG></DT>
<DD>
<P>A key-value list of implementation-specific directives.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'pragma "no-cache, broccoli=tasty")
&#8658; (no-cache (broccoli . "tasty"))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-trailer></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>trailer</STRONG></DT>
<DD>
<P>A list of header names which will appear after the message body, instead of with the message headers.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'trailer "ETag")
&#8658; (etag)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-transfer_002dencoding></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transfer-encoding</STRONG></DT>
<DD>
<P>A list of transfer codings, expressed as key-value lists. The only transfer coding defined by the specification is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chunked</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'transfer-encoding "chunked")
&#8658; ((chunked))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-upgrade></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>upgrade</STRONG></DT>
<DD>
<P>A list of strings, indicating additional protocols that a server could use in response to a request.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'upgrade "WebSocket")
&#8658; ("WebSocket")
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">FIXME: parse out more fully?</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-via></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>via</STRONG></DT>
<DD>
<P>A list of strings, indicating the protocol versions and hosts of intermediate servers and proxies. There may be multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>via</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>headers in one message.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'via "1.0 venus, 1.1 mars")
&#8658; ("1.0 venus" "1.1 mars")
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-warning></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>warning</STRONG></DT>
<DD>
<P>A list of warnings given by a server or intermediate proxy. Each warning is a itself a list of four elements: a code, as an exact integer between 0 and 1000, a host as a string, the warning text as a string, and either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a SRFI-19 date.</P>
<P>There may be multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>warning</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>headers in one message.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'warning "123 foo \"core breach imminent\"")
&#8658; ((123 "foo" "core-breach imminent" #f))
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Entity-Headers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.4.3 Entity Headers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Entity headers may be present in any HTTP message, and refer to the resource referenced in the HTTP request or response.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-allow></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>allow</STRONG></DT>
<DD>
<P>A list of allowed methods on a given resource, as symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'allow "GET, HEAD")
&#8658; (GET HEAD)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dencoding></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-encoding</STRONG></DT>
<DD>
<P>A list of content codings, as symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-encoding "gzip")
&#8658; (gzip)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dlanguage></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-language</STRONG></DT>
<DD>
<P>The languages that a resource is in, as strings.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-language "en")
&#8658; ("en")
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dlength></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>UInt</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-length</STRONG></DT>
<DD>
<P>The number of bytes in a resource, as an exact, non-negative integer.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-length "300")
&#8658; 300
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dlocation></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>URI</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-location</STRONG></DT>
<DD>
<P>The canonical URI for a resource, in the case that it is also accessible from a different URI.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-location "http://example.com/foo")
&#8658; #&lt;&lt;uri&gt; ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dmd5></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>String</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-md5</STRONG></DT>
<DD>
<P>The MD5 digest of a resource.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-md5 "ffaea1a79810785575e29e2bd45e2fa5")
&#8658; "ffaea1a79810785575e29e2bd45e2fa5"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002drange></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-range</STRONG></DT>
<DD>
<P>A range specification, as a list of three elements: the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bytes</CODE>, either the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a pair of integers, indicating the byte rage, and either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or an integer, for the instance length. Used to indicate that a response only includes part of a resource.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-range "bytes 10-20/*")
&#8658; (bytes (10 . 20) *)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-content_002dtype></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>content-type</STRONG></DT>
<DD>
<P>The MIME type of a resource, as a symbol, along with any parameters.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'content-length "text/plain")
&#8658; (text/plain)
(parse-header 'content-length "text/plain;charset=utf-8")
&#8658; (text/plain (charset . "utf-8"))
</PRE></DIV>
<P>Note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>charset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is something is a misnomer, and the HTTP specification admits this. It specifies the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>encoding</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the characters, not the character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-expires></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>expires</STRONG></DT>
<DD>
<P>The date/time after which the resource given in a response is considered stale.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'expires "Tue, 15 Nov 1994 08:12:31 GMT")
&#8658; #&lt;date ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-last_002dmodified></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>last-modified</STRONG></DT>
<DD>
<P>The date/time on which the resource given in a response was last modified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'expires "Tue, 15 Nov 1994 08:12:31 GMT")
&#8658; #&lt;date ...&gt;
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Request-Headers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.4.4 Request Headers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Request headers may only appear in an HTTP request, not in a response.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept-1></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept</STRONG></DT>
<DD>
<P>A list of preferred media types for a response. Each element of the list is itself a list, in the same format as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>content-type</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept "text/html,text/plain;charset=utf-8")
&#8658; ((text/html) (text/plain (charset . "utf-8")))
</PRE></DIV>
<P>Preference is expressed with quality values:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept "text/html;q=0.8,text/plain;q=0.6")
&#8658; ((text/html (q . 800)) (text/plain (q . 600)))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept_002dcharset></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>QList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept-charset</STRONG></DT>
<DD>
<P>A quality list of acceptable charsets. Note again that what HTTP calls a &#8220;charset&#8221; is what Guile calls a &#8220;character encoding&#8221;.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept-charset "iso-8859-5, unicode-1-1;q=0.8")
&#8658; ((1000 . "iso-8859-5") (800 . "unicode-1-1"))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept_002dencoding></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>QList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept-encoding</STRONG></DT>
<DD>
<P>A quality list of acceptable content codings.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept-encoding "gzip,identity=0.8")
&#8658; ((1000 . "gzip") (800 . "identity"))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept_002dlanguage></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>QList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept-language</STRONG></DT>
<DD>
<P>A quality list of acceptable languages.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept-language "cn,en=0.75")
&#8658; ((1000 . "cn") (750 . "en"))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-authorization></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Pair</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>authorization</STRONG></DT>
<DD>
<P>Authorization credentials. The car of the pair indicates the authentication scheme, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>basic</CODE>. For basic authentication, the cdr of the pair will be the base64-encoded &#8216;<SAMP><VAR>user</VAR>:<VAR>pass</VAR></SAMP>&#8217; string. For other authentication schemes, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>digest</CODE>, the cdr will be a key-value list of credentials.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'authorization "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
&#8658; (basic . "QWxhZGRpbjpvcGVuIHNlc2FtZQ==")
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-expect-1></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>expect</STRONG></DT>
<DD>
<P>A list of expectations that a client has of a server. The expectations are key-value lists.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'expect "100-continue")
&#8658; ((100-continue))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-from></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>String</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>from</STRONG></DT>
<DD>
<P>The email address of a user making an HTTP request.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'from "bob@example.com")
&#8658; "bob@example.com"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-host></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Pair</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>host</STRONG></DT>
<DD>
<P>The host for the resource being requested, as a hostname-port pair. If no port is given, the port is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'host "gnu.org:80")
&#8658; ("gnu.org" . 80)
(parse-header 'host "gnu.org")
&#8658; ("gnu.org" . #f)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if_002dmatch></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>*|List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if-match</STRONG></DT>
<DD>
<P>A set of etags, indicating that the request should proceed if and only if the etag of the resource is in that set. Either the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, indicating any etag, or a list of entity tags.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'if-match "*")
&#8658; *
(parse-header 'if-match "asdfadf")
&#8658; (("asdfadf" . #t))
(parse-header 'if-match W/"asdfadf")
&#8658; (("asdfadf" . #f))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if_002dmodified_002dsince></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if-modified-since</STRONG></DT>
<DD>
<P>Indicates that a response should proceed if and only if the resource has been modified since the given date.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'if-modified-since "Tue, 15 Nov 1994 08:12:31 GMT")
&#8658; #&lt;date ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if_002dnone_002dmatch></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>*|List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if-none-match</STRONG></DT>
<DD>
<P>A set of etags, indicating that the request should proceed if and only if the etag of the resource is not in the set. Either the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, indicating any etag, or a list of entity tags.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'if-none-match "*")
&#8658; *
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if_002drange></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ETag|Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if-range</STRONG></DT>
<DD>
<P>Indicates that the range request should proceed if and only if the resource matches a modification date or an etag. Either an entity tag, or a SRFI-19 date.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'if-range "\"original-etag\"")
&#8658; ("original-etag" . #t)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if_002dunmodified_002dsince></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if-unmodified-since</STRONG></DT>
<DD>
<P>Indicates that a response should proceed if and only if the resource has not been modified since the given date.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'if-not-modified-since "Tue, 15 Nov 1994 08:12:31 GMT")
&#8658; #&lt;date ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-max_002dforwards></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>UInt</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>max-forwards</STRONG></DT>
<DD>
<P>The maximum number of proxy or gateway hops that a request should be subject to.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'max-forwards "10")
&#8658; 10
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-proxy_002dauthorization></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Pair</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>proxy-authorization</STRONG></DT>
<DD>
<P>Authorization credentials for a proxy connection. See the documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>authorization</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above for more information on the format.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'proxy-authorization "Digest foo=bar,baz=qux"
&#8658; (digest (foo . "bar") (baz . "qux"))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-range></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Pair</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>range</STRONG></DT>
<DD>
<P>A range request, indicating that the client wants only part of a resource. The car of the pair is the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bytes</CODE>, and the cdr is a list of pairs. Each element of the cdr indicates a range; the car is the first byte position and the cdr is the last byte position, as integers, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not given.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'range "bytes=10-30,50-")
&#8658; (bytes (10 . 30) (50 . #f))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-referer></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>URI</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>referer</STRONG></DT>
<DD>
<P>The URI of the resource that referred the user to this resource. The name of the header is a misspelling, but we are stuck with it.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'referer "http://www.gnu.org/")
&#8658; #&lt;uri ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-te></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>te</STRONG></DT>
<DD>
<P>A list of transfer codings, expressed as key-value lists. A common transfer coding is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>trailers</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'te "trailers")
&#8658; ((trailers))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-user_002dagent></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>String</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>user-agent</STRONG></DT>
<DD>
<P>A string indicating the user agent making the request. The specification defines a structured format for this header, but it is widely disregarded, so Guile does not attempt to parse strictly.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'user-agent "Mozilla/5.0")
&#8658; "Mozilla/5.0"
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Response-Headers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.4.5 Response Headers</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-accept_002dranges></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>accept-ranges</STRONG></DT>
<DD>
<P>A list of range units that the server supports, as symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'accept-ranges "bytes")
&#8658; (bytes)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-age></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>UInt</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>age</STRONG></DT>
<DD>
<P>The age of a cached response, in seconds.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'age "3600")
&#8658; 3600
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-etag></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ETag</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>etag</STRONG></DT>
<DD>
<P>The entity-tag of the resource.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'etag "\"foo\"")
&#8658; ("foo" . #t)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-location-1></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>URI</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>location</STRONG></DT>
<DD>
<P>A URI on which a request may be completed. Used in combination with a redirecting status code to perform client-side redirection.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'location "http://example.com/other")
&#8658; #&lt;uri ...&gt;
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-proxy_002dauthenticate></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>proxy-authenticate</STRONG></DT>
<DD>
<P>A list of challenges to a proxy, indicating the need for authentication.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'proxy-authenticate "Basic realm=\"foo\"")
&#8658; ((basic (realm . "foo")))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-retry_002dafter></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>UInt|Date</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>retry-after</STRONG></DT>
<DD>
<P>Used in combination with a server-busy status code, like 503, to indicate that a client should retry later. Either a number of seconds, or a date.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'retry-after "60")
&#8658; 60
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-server></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>String</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>server</STRONG></DT>
<DD>
<P>A string identifying the server.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'server "My first web server")
&#8658; "My first web server"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vary></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>*|List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vary</STRONG></DT>
<DD>
<P>A set of request headers that were used in computing this response. Used to indicate that server-side content negotiation was performed, for example in response to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accept-language</CODE>header. Can also be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, indicating that all headers were considered.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'vary "Accept-Language, Accept")
&#8658; (accept-language accept)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-www_002dauthenticate></A>HTTP Header:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>List</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>www-authenticate</STRONG></DT>
<DD>
<P>A list of challenges to a user, indicating the need for authentication.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(parse-header 'www-authenticate "Basic realm=\"foo\"")
&#8658; ((basic (realm . "foo")))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Transfer-Codings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Requests" rel=next>Requests</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers" rel=prev>HTTP Headers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Transfer-Codings-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.5 Transfer Codings</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">HTTP 1.1 allows for various transfer codings to be applied to message bodies. These include various types of compression, and HTTP chunked encoding. Currently, only chunked encoding is supported by guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Chunked coding is an optional coding that may be applied to message bodies, to allow messages whose length is not known beforehand to be returned. Such messages can be split into chunks, terminated by a final zero length chunk.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to make dealing with encodings more simple, guile provides procedures to create ports that &#8220;wrap&#8221; existing ports, applying transformations transparently under the hood.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web http)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web http))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dchunked_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-chunked-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port [#:keep-alive?=#f]</EM></DT>
<DD>
<P>Returns a new port, that transparently reads and decodes chunk-encoded data from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If no more chunk-encoded data is available, it returns the end-of-file object. When the port is closed,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will also be closed, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keep-alive?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true.</P></DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 rdelim))

(define s "5\r\nFirst\r\nA\r\n line\n Sec\r\n8\r\nond line\r\n0\r\n")
(define p (make-chunked-input-port (open-input-string s)))
(read-line s)
&#8658; "First line"
(read-line s)
&#8658; "Second line"
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dchunked_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-chunked-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port [#:keep-alive?=#f]</EM></DT>
<DD>
<P>Returns a new port, which transparently encodes data as chunk-encoded before writing it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Whenever a write occurs on this port, it buffers it, until the port is flushed, at which point it writes a chunk containing all the data written so far. When the port is closed, the data remaining is written to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, as is the terminating zero chunk. It also causes<VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be closed, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keep-alive?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true.</P>
<P>Note. Forcing a chunked output port when there is no data is buffered does not write a zero chunk, as this would cause the data to be interpreted incorrectly by the client.</P></DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(call-with-output-string
  (lambda (out)
    (define out* (make-chunked-output-port out #:keep-alive? #t))
    (display "first chunk" out*)
    (force-output out*)
    (force-output out*) ; note this does not write a zero chunk
    (display "second chunk" out*)
    (close-port out*)))
&#8658; "b\r\nfirst chunk\r\nc\r\nsecond chunk\r\n0\r\n"
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Requests></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Responses" rel=next>Responses</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Transfer-Codings" rel=prev>Transfer Codings</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP-Requests></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.6 HTTP Requests</H4>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web request))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The request module contains a data type for HTTP requests.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=An-Important-Note-on-Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.6.1 An Important Note on Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">HTTP requests consist of two parts: the request proper, consisting of a request line and a set of headers, and (optionally) a body. The body might have a binary content-type, and even in the textual case its length is specified in bytes, not characters.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Therefore, HTTP is a fundamentally binary protocol. However the request line and headers are specified to be in a subset of ASCII, so they can be treated as text, provided that the port&#8217;s encoding is set to an ASCII-compatible one-byte-per-character encoding. ISO-8859-1 (latin-1) is just such an encoding, and happens to be very efficient for Guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So what Guile does when reading requests from the wire, or writing them out, is to set the port&#8217;s encoding to latin-1, and treating the request headers as text.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The request body is another issue. For binary data, the data is probably in a bytevector, so we use the R6RS binary output procedures to write out the binary payload. Textual data usually has to be written out to some character encoding, usually UTF-8, and then the resulting bytevector is written out to the port.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In summary, Guile reads and writes HTTP over latin-1 sockets, without any loss of generality.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Request-API></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.6.2 Request API</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-request_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-request_002dmethod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-method</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DT><A name=index-request_002duri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DT><A name=index-request_002dversion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-version</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DT><A name=index-request_002dheaders></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-headers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DT><A name=index-request_002dmeta></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-meta</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DT><A name=index-request_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request</EM></DT>
<DD>
<P>A predicate and field accessors for the request type. The fields are as follows:</P>
<DL compact>
<DT><CODE>method</CODE></DT>
<DD>
<P>The HTTP method, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GET</CODE>.</P></DD>
<DT><CODE>uri</CODE></DT>
<DD>
<P>The URI as a URI record.</P></DD>
<DT><CODE>version</CODE></DT>
<DD>
<P>The HTTP version pair, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 . 1)</CODE>.</P></DD>
<DT><CODE>headers</CODE></DT>
<DD>
<P>The request headers, as an alist of parsed values.</P></DD>
<DT><CODE>meta</CODE></DT>
<DD>
<P>An arbitrary alist of other data, for example information returned in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sockaddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accept</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Network-Sockets-and-Communication">Network Sockets and Communication</A>).</P></DD>
<DT><CODE>port</CODE></DT>
<DD>
<P>The port on which to read or write a request body, if any.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002drequest></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-request</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port [meta='()]</EM></DT>
<DD>
<P>Read an HTTP request from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, optionally attaching the given metadata,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>meta</VAR>.</P>
<P>As a side effect, sets the encoding on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to ISO-8859-1 (latin-1), so that reading one character reads one byte. See the discussion of character sets above, for more information.</P>
<P>Note that the body is not part of the request. Once you have read a request, you may read the body separately, and likewise for writing requests.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-build_002drequest></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>build-request</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri [#:method='GET] [#:version='(1 . 1)] [#:headers='()] [#:port=#f] [#:meta='()] [#:validate-headers?=#t]</EM></DT>
<DD>
<P>Construct an HTTP request object. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>validate-headers?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the headers are each run through their respective validators.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002drequest></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-request</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r port</EM></DT>
<DD>
<P>Write the given HTTP request to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>Return a new request, whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>request-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will continue writing on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, perhaps using some transfer encoding.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002drequest_002dbody></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-request-body</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r</EM></DT>
<DD>
<P>Reads the request body from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, as a bytevector. Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there was no request body.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002drequest_002dbody></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-request-body</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r bv</EM></DT>
<DD>
<P>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, a bytevector, to the port corresponding to the HTTP request<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The various headers that are typically associated with HTTP requests may be accessed with these dedicated accessors. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers">HTTP Headers</A>, for more information on the format of parsed headers.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-request_002daccept></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-accept</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002daccept_002dcharset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-accept-charset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002daccept_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-accept-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002daccept_002dlanguage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-accept-language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dallow></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-allow</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dauthorization></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-authorization</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dcache_002dcontrol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-cache-control</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dconnection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-connection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dcontent_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dcontent_002dlanguage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dcontent_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dcontent_002dlocation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-location</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dcontent_002dmd5></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-md5</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dcontent_002drange></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dcontent_002dtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-content-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002ddate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dexpect></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-expect</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dexpires></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-expires</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dfrom></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-from</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dhost></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-host</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dif_002dmatch></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-if-match</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dif_002dmodified_002dsince></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-if-modified-since</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dif_002dnone_002dmatch></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-if-none-match</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dif_002drange></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-if-range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dif_002dunmodified_002dsince></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-if-unmodified-since</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dlast_002dmodified></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-last-modified</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dmax_002dforwards></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-max-forwards</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dpragma></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-pragma</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dproxy_002dauthorization></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-proxy-authorization</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002drange></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dreferer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-referer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dte></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-te</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dtrailer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-trailer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dtransfer_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-transfer-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dupgrade></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-upgrade</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002duser_002dagent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-user-agent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default=#f]</EM></DT>
<DT><A name=index-request_002dvia></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-via</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DT><A name=index-request_002dwarning></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-warning</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request [default='()]</EM></DT>
<DD>
<P>Return the given request header, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if none was present.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-request_002dabsolute_002duri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>request-absolute-uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r [default-host=#f] [default-port=#f]</EM></DT>
<DD>
<P>A helper routine to determine the absolute URI of a request, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>host</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header and the default host and port.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Responses></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Web-Client" rel=next>Web Client</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Requests" rel=prev>Requests</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=HTTP-Responses></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.7 HTTP Responses</H4>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web response))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with requests (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Requests">Requests</A>), Guile offers a data type for HTTP responses. Again, the body is represented separately from the request.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-response_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-response_002dversion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-version</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response</EM></DT>
<DT><A name=index-response_002dcode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-code</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response</EM></DT>
<DT><A name=index-response_002dreason_002dphrase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-reason-phrase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response</EM></DT>
<DT><A name=index-response_002dheaders></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-headers</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response</EM></DT>
<DT><A name=index-response_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response</EM></DT>
<DD>
<P>A predicate and field accessors for the response type. The fields are as follows:</P>
<DL compact>
<DT><CODE>version</CODE></DT>
<DD>
<P>The HTTP version pair, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 . 1)</CODE>.</P></DD>
<DT><CODE>code</CODE></DT>
<DD>
<P>The HTTP response code, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>200</CODE>.</P></DD>
<DT><CODE>reason-phrase</CODE></DT>
<DD>
<P>The reason phrase, or the standard reason phrase for the response&#8217;s code.</P></DD>
<DT><CODE>headers</CODE></DT>
<DD>
<P>The response headers, as an alist of parsed values.</P></DD>
<DT><CODE>port</CODE></DT>
<DD>
<P>The port on which to read or write a response body, if any.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dresponse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-response</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Read an HTTP response from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>As a side effect, sets the encoding on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to ISO-8859-1 (latin-1), so that reading one character reads one byte. See the discussion of character sets in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Responses">Responses</A>, for more information.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-build_002dresponse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>build-response</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[#:version='(1 . 1)] [#:code=200] [#:reason-phrase=#f] [#:headers='()] [#:port=#f] [#:validate-headers?=#t]</EM></DT>
<DD>
<P>Construct an HTTP response object. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>validate-headers?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the headers are each run through their respective validators.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-adapt_002dresponse_002dversion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>adapt-response-version</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response version</EM></DT>
<DD>
<P>Adapt the given response to a different HTTP version. Return a new HTTP response.</P>
<P>The idea is that many applications might just build a response for the default HTTP version, and this method could handle a number of programmatic transformations to respond to older HTTP versions (0.9 and 1.0). But currently this function is a bit heavy-handed, just updating the version field.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dresponse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-response</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r port</EM></DT>
<DD>
<P>Write the given HTTP response to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>Return a new response, whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>response-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will continue writing on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, perhaps using some transfer encoding.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-response_002dmust_002dnot_002dinclude_002dbody_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-must-not-include-body?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r</EM></DT>
<DD>
<P>Some responses, like those with status code 304, are specified as never having bodies. This predicate returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for those responses.</P>
<P>Note also, though, that responses to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HEAD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requests must also not have a body.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-response_002dbody_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-body-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r [#:decode?=#t] [#:keep-alive?=#t]</EM></DT>
<DD>
<P>Return an input port from which the body of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be read. The encoding of the returned port is set according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>content-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header, when it&#8217;s textual, except if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decode?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when no body is available.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keep-alive?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, closing the returned port also closes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>&#8217;s response port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dresponse_002dbody></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-response-body</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r</EM></DT>
<DD>
<P>Read the response body from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, as a bytevector. Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there was no response body.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dresponse_002dbody></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-response-body</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>r bv</EM></DT>
<DD>
<P>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, a bytevector, to the port corresponding to the HTTP response<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with requests, the various headers that are typically associated with HTTP responses may be accessed with these dedicated accessors. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#HTTP-Headers">HTTP Headers</A>, for more information on the format of parsed headers.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-response_002daccept_002dranges></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-accept-ranges</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-age</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dallow></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-allow</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dcache_002dcontrol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-cache-control</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dconnection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-connection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dcontent_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dcontent_002dlanguage></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-language</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dcontent_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dcontent_002dlocation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-location</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dcontent_002dmd5></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-md5</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dcontent_002drange></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dcontent_002dtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-content-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002ddate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-date</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002detag></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-etag</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dexpires></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-expires</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dlast_002dmodified></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-last-modified</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dlocation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-location</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dpragma></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-pragma</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dproxy_002dauthenticate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-proxy-authenticate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dretry_002dafter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-retry-after</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DT><A name=index-response_002dtrailer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-trailer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dtransfer_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-transfer-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dupgrade></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-upgrade</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dvary></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-vary</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dvia></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-via</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dwarning></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-warning</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default='()]</EM></DT>
<DT><A name=index-response_002dwww_002dauthenticate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>response-www-authenticate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>response [default=#f]</EM></DT>
<DD>
<P>Return the given response header, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if none was present.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-text_002dcontent_002dtype_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>text-content-type?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>type</VAR></EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, a symbol as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>response-content-type</CODE>, represents a textual type such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>text/plain</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Client></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Web-Server" rel=next>Web Server</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Responses" rel=prev>Responses</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Client-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.8 Web Client</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>(web client)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides a simple, synchronous HTTP client, built on the lower-level HTTP, request, and response modules.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web client))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dsocket_002dfor_002duri></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-socket-for-uri</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri</EM></DT>
<DD>
<P>Return an open input/output port for a connection to URI.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-http_002dget></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-get</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002dhead></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-head</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002dpost></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-post</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002dput></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-put</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002dtrace></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-trace</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DT><A name=index-http_002doptions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http-options</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uri arg...</EM></DT>
<DD>
<P>Connect to the server corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uri</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and make a request over HTTP, using the appropriate method (<CODE>GET</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HEAD</CODE>, etc.).</P>
<P>All of these procedures have the same prototype: a URI followed by an optional sequence of keyword arguments. These keyword arguments allow you to modify the requests in various ways, for example attaching a body to the request, or setting specific headers. The following table lists the keyword arguments and their default values.</P>
<DL compact>
<DT><CODE>#:body #f</CODE></DT>
<DT><CODE>#:port (open-socket-for-uri<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uri</VAR>)]</CODE></DT>
<DT><CODE>#:version '(1 . 1)</CODE></DT>
<DT><CODE>#:keep-alive? #f</CODE></DT>
<DT><CODE>#:headers '()</CODE></DT>
<DT><CODE>#:decode-body? #t</CODE></DT>
<DT><CODE>#:streaming? #f</CODE></DT></DL>
<P>If you already have a port open, pass it as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. Otherwise, a connection will be opened to the server corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uri</VAR>. Any extra headers in the alist<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>headers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be added to the request.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, a message body will also be sent with the HTTP request. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string, it is encoded according to the content-type in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>headers</VAR>, defaulting to UTF-8. Otherwise<VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a bytevector, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no body. Although a message body may be sent with any request, usually only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>POST</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PUT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requests have bodies.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decode-body?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, as is the default, the body of the response will be decoded to string, if it is a textual content-type. Otherwise it will be returned as a bytevector.</P>
<P>However, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>streaming?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, instead of eagerly reading the response body from the server, this function only reads off the headers. The response body will be returned as a port on which the data may be read.</P>
<P>Unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keep-alive?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the port will be closed after the full response body has been read.</P>
<P>Returns two values: the response read from the server, and the response body as a string, bytevector, #f value, or as a port (if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>streaming?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>http-get</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is useful for making one-off requests to web sites. If you are writing a web spider or some other client that needs to handle a number of requests in parallel, it&#8217;s better to build an event-driven URL fetcher, similar in structure to the web server (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Server">Web Server</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another option, good but not as performant, would be to use threads, possibly via par-map or futures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dhttp_002dproxy></A>Scheme Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-http-proxy</STRONG></DT>
<DD>
<P>Either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a non-empty string containing the URL of the HTTP proxy server to be used by the procedures in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web client)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, including<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-socket-for-uri</CODE>. Its initial value is based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http_proxy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(current-http-proxy) &#8658; "http://localhost:8123/"
(parameterize ((current-http-proxy #f))
  (http-get "http://example.com/"))  ; temporarily bypass proxy
(current-http-proxy) &#8658; "http://localhost:8123/"
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Server></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Web-Examples" rel=next>Web Examples</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Web-Client" rel=prev>Web Client</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Server-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.9 Web Server</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>(web server)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a generic web server interface, along with a main loop implementation for web servers controlled by Guile.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web server))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The lowest layer is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, which defines a set of hooks to open a server, read a request from a client, write a response to a client, and close a server. These hooks &#8211;<CODE>open</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>, respectively &#8211; are bound together in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. Procedures in this module take a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, if needed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may also be looked up by name. If you pass the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-server</CODE>, Guile looks for a variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web server http)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, which should be bound to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object. Such a binding is made by instantiation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-server-impl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax. In this way the run-server loop can automatically load other backends if available.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The life cycle of a server goes as follows:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook is called, to open the server.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes zero or more arguments, depending on the backend, and returns an opaque server socket object, or signals an error.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook is called, to read a request from a new client. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook takes one argument, the server socket. It should return three values: an opaque client socket, the request, and the request body. The request should be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;request&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web request)</CODE>. The body should be a string or a bytevector, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there is no body.
<P>If the read failed, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook may return #f for the client socket, request, and body.</P></LI>
<LI>A user-provided handler procedure is called, with the request and body as its arguments. The handler should return two values: the response, as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;response&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>record from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web response)</CODE>, and the response body as bytevector, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not present.
<P>The respose and response body are run through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sanitize-response</CODE>, documented below. This allows the handler writer to take some convenient shortcuts: for example, instead of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;response&gt;</CODE>, the handler can simply return an alist of headers, in which case a default response object is constructed with those headers. Instead of a bytevector for the body, the handler can return a string, which will be serialized into an appropriate encoding; or it can return a procedure, which will be called on a port to write out the data. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sanitize-response</CODE>documentation, for more.</P></LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook is called with three arguments: the client socket, the response, and the body. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook returns no values.</LI>
<LI>At this point the request handling is complete. For a loop, we loop back and try to read a new request.</LI>
<LI>If the user interrupts the loop, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook is called on the server socket.</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A user may define a server implementation with the following form:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dserver_002dimpl></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-server-impl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name open read write close</EM></DT>
<DD>
<P>Make a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object with the hooks<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>open</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>read</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>write</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>close</VAR>, and bind it to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current module.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lookup_002dserver_002dimpl></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lookup-server-impl</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>impl</EM></DT>
<DD>
<P>Look up a server implementation. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>impl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a server implementation already, it is returned directly. If it is a symbol, the binding named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>impl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web server<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>impl</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module is looked up. Otherwise an error is signaled.</P>
<P>Currently a server implementation is a somewhat opaque type, useful only for passing to other procedures in this module, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-client</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(web server)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module defines a number of routines that use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;server-impl&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>objects to implement parts of a web server. Given that we don&#8217;t expose the accessors for the various fields of a<CODE>&lt;server-impl&gt;</CODE>, indeed these routines are the only procedures with any access to the impl objects.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>impl open-params</EM></DT>
<DD>
<P>Open a server for the given implementation. Return one value, the new server object. The implementation&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is applied to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>open-params</VAR>, which should be a list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dclient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-client</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>impl server</EM></DT>
<DD>
<P>Read a new client from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server</VAR>, by applying the implementation&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure to the server. If successful, return three values: an object corresponding to the client, a request object, and the request body. If any exception occurs, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for all three values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-handle_002drequest></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>handle-request</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handler request body state</EM></DT>
<DD>
<P>Handle a given request, returning the response and body.</P>
<P>The response and response body are produced by calling the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>request</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as arguments.</P>
<P>The elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as arguments, and may be returned as additional values. The new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR>, collected from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>&#8217;s return values, is then returned as a list. The idea is that a server loop receives a handler from the user, along with whatever state values the user is interested in, allowing the user&#8217;s handler to explicitly manage its state.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sanitize_002dresponse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sanitize-response</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>request response body</EM></DT>
<DD>
<P>&#8220;Sanitize&#8221; the given response and body, making them appropriate for the given request.</P>
<P>As a convenience to web handler authors,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>response</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be given as an alist of headers, in which case it is used to construct a default response. Ensures that the response version corresponds to the request version. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string, encodes the string to a bytevector, in an encoding appropriate for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>response</VAR>. Adds a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>content-length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>content-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header, as necessary.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure, it is called with a port as an argument, and the output collected as a bytevector. In the future we might try to instead use a compressing, chunk-encoded port, and call this procedure later, in the write-client procedure. Authors are advised not to rely on the procedure being called at any particular time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dclient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-client</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>impl server client response body</EM></DT>
<DD>
<P>Write an HTTP response and body to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>client</VAR>. If the server and client support persistent connections, it is the implementation&#8217;s responsibility to keep track of the client thereafter, presumably by attaching it to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument somehow.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dserver></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>impl server</EM></DT>
<DD>
<P>Release resources allocated by a previous invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-server</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Given the procedures above, it is a small matter to make a web server:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-serve_002done_002dclient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>serve-one-client</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handler impl server state</EM></DT>
<DD>
<P>Read one request from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>server</VAR>, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the request and body, and write the response to the client. Return the new state produced by the handler procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-run_002dserver-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>run-server</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handler [impl='http] [open-params='()] arg &#8230;</EM></DT>
<DD>
<P>Run Guile&#8217;s built-in web server.</P>
<P><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a procedure that takes two or more arguments, the HTTP request and request body, and returns two or more values, the response and response body.</P>
<P>For examples, skip ahead to the next section,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Web-Examples">Web Examples</A>.</P>
<P>The response and body will be run through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sanitize-response</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before sending back to the client.</P>
<P>Additional arguments to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are taken from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>. These arguments comprise a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>state</EM>. Additional return values are accumulated into a new state, which will be used for subsequent requests. In this way a handler can explicitly manage its state.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The default web server implementation is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http</CODE>, which binds to a socket, listening for request on that port.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-http></A>HTTP Implementation:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>http</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[#:host=#f] [#:family=AF_INET] [#:addr=INADDR_LOOPBACK] [#:port 8080] [#:socket]</EM></DT>
<DD>
<P>The default HTTP implementation. We document it as a function with keyword arguments, because that is precisely the way that it is &#8211; all of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>open-params</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-server</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>get passed to the implementation&#8217;s open function.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>;; The defaults: localhost:8080
(run-server handler)
;; Same thing
(run-server handler 'http '())
;; On a different port
(run-server handler 'http '(#:port 8081))
;; IPv6
(run-server handler 'http '(#:family AF_INET6 #:port 8081))
;; Custom socket
(run-server handler 'http `(#:socket ,(sudo-make-me-a-socket)))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Web-Server" rel=prev>Web Server</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Web" rel=up>Web</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Web-Examples-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.3.10 Web Examples</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Well, enough about the tedious internals. Let&#8217;s make a web application!</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hello_002c-World_0021></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.10.1 Hello, World!</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first program we have to write, of course, is &#8220;Hello, World!&#8221;. This means that we have to implement a web handler that does what we want.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now we define a handler, a function of two arguments and two return values:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (handler request request-body)
  (values <VAR>response</VAR> <VAR>response-body</VAR>))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this first example, we take advantage of a short-cut, returning an alist of headers instead of a proper response object. The response body is our payload:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (hello-world-handler request request-body)
  (values '((content-type . (text/plain)))
          "Hello World!"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now let&#8217;s test it, by running a server with this handler. Load up the web server module if you haven&#8217;t yet done so, and run a server with this handler:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web server))
(run-server hello-world-handler)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default, the web server listens for requests on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localhost:8080</CODE>. Visit that address in your web browser to test. If you see the string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Hello World!</CODE>, sweet!</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Inspecting-the-Request></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.10.2 Inspecting the Request</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Hello World program above is a general greeter, responding to all URIs. To make a more exclusive greeter, we need to inspect the request object, and conditionally produce different results. So let&#8217;s load up the request, response, and URI modules, and do just that.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web server)) ; you probably did this already
(use-modules (web request)
             (web response)
             (web uri))

(define (request-path-components request)
  (split-and-decode-uri-path (uri-path (request-uri request))))

(define (hello-hacker-handler request body)
  (if (equal? (request-path-components request)
              '("hacker"))
      (values '((content-type . (text/plain)))
              "Hello hacker!")
      (not-found request)))

(run-server hello-hacker-handler)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here we see that we have defined a helper to return the components of the URI path as a list of strings, and used that to check for a request to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/hacker/</CODE>. Then the success case is just as before &#8211; visit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http://localhost:8080/hacker/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your browser to check.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You should always match against URI path components as decoded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>split-and-decode-uri-path</CODE>. The above example will work for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/hacker/</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>//hacker///</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/h%61ck%65r</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But we forgot to define<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not-found</CODE>! If you are pasting these examples into a REPL, accessing any other URI in your web browser will drop your Guile console into the debugger:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>&lt;unnamed port&gt;:38:7: In procedure module-lookup:
&lt;unnamed port&gt;:38:7: Unbound variable: not-found

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [1]&gt; 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So let&#8217;s define the function, right there in the debugger. As you probably know, we&#8217;ll want to return a 404 response.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>;; Paste this in your REPL
(define (not-found request)
  (values (build-response #:code 404)
          (string-append "Resource not found: "
                         (uri-&gt;string (request-uri request)))))

;; Now paste this to let the web server keep going:
,continue
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now if you access<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>http://localhost/foo/</CODE>, you get this error message. (Note that some popular web browsers won&#8217;t show server-generated 404 messages, showing their own instead, unless the 404 message body is long enough.)</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Higher_002dLevel-Interfaces></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.10.3 Higher-Level Interfaces</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The web handler interface is a common baseline that all kinds of Guile web applications can use. You will usually want to build something on top of it, however, especially when producing HTML. Here is a simple example that builds up HTML output using SXML (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SXML">SXML</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">First, load up the modules:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (web server)
             (web request)
             (web response)
             (sxml simple))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now we define a simple templating function that takes a list of HTML body elements, as SXML, and puts them in our super template:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (templatize title body)
  `(html (head (title ,title))
         (body ,@body)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, the simplest Hello HTML can be produced like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(sxml-&gt;xml (templatize "Hello!" '((b "Hi!"))))
-|
&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello!&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;Hi!&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Much better to work with Scheme data types than to work with HTML as strings. Now we define a little response helper:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define* (respond #:optional body #:key
                  (status 200)
                  (title "Hello hello!")
                  (doctype "&lt;!DOCTYPE html&gt;\n")
                  (content-type-params '((charset . "utf-8")))
                  (content-type 'text/html)
                  (extra-headers '())
                  (sxml (and body (templatize title body))))
  (values (build-response
           #:code status
           #:headers `((content-type
                        . (,content-type ,@content-type-params))
                       ,@extra-headers))
          (lambda (port)
            (if sxml
                (begin
                  (if doctype (display doctype port))
                  (sxml-&gt;xml sxml port))))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here we see the power of keyword arguments with default initializers. By the time the arguments are fully parsed, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sxml</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>local variable will hold the templated SXML, ready for sending out to the client.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also, instead of returning the body as a string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>respond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives a procedure, which will be called by the web server to write out the response to the client.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now, a simple example using this responder, which lays out the incoming headers in an HTML table.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (debug-page request body)
  (respond
   `((h1 "hello world!")
     (table
      (tr (th "header") (th "value"))
      ,@(map (lambda (pair)
               `(tr (td (tt ,(with-output-to-string
                               (lambda () (display (car pair))))))
                    (td (tt ,(with-output-to-string
                               (lambda ()
                                 (write (cdr pair))))))))
             (request-headers request))))))

(run-server debug-page)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now if you visit any local address in your web browser, we actually see some HTML, finally.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conclusion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.3.10.4 Conclusion</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Well, this is about as far as Guile&#8217;s built-in web support goes, for now. There are many ways to make a web application, but hopefully by standardizing the most fundamental data types, users will be able to choose the approach that suits them best, while also being able to switch between implementations of the server. This is a relatively new part of Guile, so if you have feedback, let us know, and we can take it into account. Happy hacking on the web!