<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.8 Readline Support</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-readline></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-command-line-history></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile comes with an interface module to the readline library (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE><A href="http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#Top">GNU Readline Library</A></CITE>). This makes interactive use much more convenient, because of the command-line editing features of readline. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 readline)</CODE>, you can navigate through the current input line with the cursor keys, retrieve older command lines from the input history and even search through the history entries.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Readline-Support">Loading Readline Support</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to load readline support into Guile.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Options">Readline Options</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to modify readline&#8217;s behaviour.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Functions">Readline Functions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Programming with readline.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading-Readline-Support></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Options" rel=next>Readline Options</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Support" rel=up>Readline Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Loading-Readline-Support-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.8.1 Loading Readline Support</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The module is not loaded by default and so has to be loaded and activated explicitly. This is done with two simple lines of code:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 readline))
(activate-readline)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first line will load the necessary code, and the second will activate readline&#8217;s features for the REPL. If you plan to use this module often, you should save these to lines to your<SAMP>.guile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>personal startup file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You will notice that the REPL&#8217;s behaviour changes a bit when you have loaded the readline module. For example, when you press Enter before typing in the closing parentheses of a list, you will see the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>continuation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>prompt, three dots:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>This gives you a nice visual feedback when trying to match parentheses. To make this even easier,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bouncing parentheses</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are implemented. That means that when you type in a closing parentheses, the cursor will jump to the corresponding opening parenthesis for a short time, making it trivial to make them match.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once the readline module is activated, all lines entered interactively will be stored in a history and can be recalled later using the cursor-up and -down keys. Readline also understands the Emacs keys for navigating through the command line and history.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002eguile_005fhistory></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you quit your Guile session by evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(quit)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or pressing Ctrl-D, the history will be saved to the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.guile_history</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and read in when you start Guile for the next time. Thus you can start a new Guile session and still have the (probably long-winded) definition expressions available.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-GUILE_005fHISTORY></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002einputrc></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can specify a different history file by setting the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GUILE_HISTORY</CODE>. And you can make Guile specific customizations to your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.inputrc</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>by testing for application &#8216;<SAMP>Guile</SAMP>&#8217; (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#Conditional-Init-Constructs">Conditional Init Constructs</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Readline Library</CITE>). For instance to define a key inserting a matched pair of parentheses,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$if Guile
  "\C-o": "()\C-b"
$endif
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-Options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Functions" rel=next>Readline Functions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Loading-Readline-Support" rel=prev>Loading Readline Support</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Support" rel=up>Readline Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-Options-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.8.2 Readline Options</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-readline-options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The readline interface module can be tweaked in a few ways to better suit the user&#8217;s needs. Configuration is done via the readline module&#8217;s options interface, in a similar way to the evaluator and debugging options (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Options">Runtime Options</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-readline_002doptions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline-options</STRONG></DT>
<DT><A name=index-readline_002denable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline-enable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name</EM></DT>
<DT><A name=index-readline_002ddisable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline-disable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name</EM></DT>
<DT><A name=index-readline_002dset_0021></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>option-name value</EM></DT>
<DD>
<P>Accessors for the readline options. Note that unlike the enable/disable procedures,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is syntax, which expects an unquoted option name.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is the list of readline options generated by typing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(readline-options 'help)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Guile. You can also see the default values.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smalllisp><PRE style="FONT-SIZE: smaller" class=smalllisp>history-file    yes     Use history file.
history-length  200     History length.
bounce-parens   500     Time (ms) to show matching opening parenthesis
                        (0 = off).
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The readline options interface can only be used<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>after</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>loading the readline module, because it is defined in that module.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Options" rel=prev>Readline Options</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Readline-Support" rel=up>Readline Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-Functions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.8.3 Readline Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 readline))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two ways to use readline from Scheme code, either make calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly to get line by line input, or use the readline port below with all the usual reading functions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-readline-1></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[prompt]</EM></DT>
<DD>
<P>Read a line of input from the user and return it as a string (without a newline at the end).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prompt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the prompt to show, or the default is the string set in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-readline-prompt!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(readline "Type something: ") &#8658; "hello"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dreadline_002dinput_002dport_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-readline-input-port!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-set_002dreadline_002doutput_002dport_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-readline-output-port!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Set the input and output port the readline function should read from and write to.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a file port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>), and should usually be a terminal.</P>
<P>The default is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports">Default Ports</A>) when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 readline)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loads, which in an interactive user session means the Unix &#8220;standard input&#8221; and &#8220;standard output&#8221;.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Readline-Port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.8.3.1 Readline Port</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-readline_002dport></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>readline-port</STRONG></DT>
<DD>
<P>Return a buffered input port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Buffered-Input">Buffered Input</A>) which calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function above to get input. This port can be used with all the usual reading functions (<CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE>, etc), and the user gets the interactive editing features of readline.</P>
<P>There&#8217;s only a single readline port created.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates it when first called, and on subsequent calls just returns what it previously made.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-activate_002dreadline></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>activate-readline</STRONG></DT>
<DD>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a terminal (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Terminals-and-Ptys"><CODE>isatty?</CODE></A>) then enable readline for all reading from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports">Default Ports</A>) and enable readline features in the interactive REPL (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-REPL">The REPL</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(activate-readline)
(read-char)
</PRE></DIV>
<P><CODE>activate-readline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables readline on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>simply by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. An application can do that directly if the extra REPL features that<CODE>activate-readline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>adds are not wanted.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dreadline_002dprompt_0021></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-readline-prompt!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>prompt1 [prompt2]</EM></DT>
<DD>
<P>Set the prompt string to print when reading input. This is used when reading through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline-port</CODE>, and is also the default prompt for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function above.</P>
<P><VAR>prompt1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the initial prompt shown. If a user might enter an expression across multiple lines, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prompt2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a different prompt to show further input required. In the Guile REPL for instance this is an ellipsis (&#8216;<SAMP>...</SAMP>&#8217;).</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-buffered-input-continuation?!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Buffered-Input">Buffered Input</A>) for an application to indicate the boundaries of logical expressions (assuming of course an application has such a notion).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Completion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.8.3.2 Completion</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dreadline_002dcompletion_002dfunction></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-readline-completion-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>completer thunk</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>thunk</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the readline tab completion function to be used in any readline calls within that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no completion.</P>
<P><VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>text state)</CODE>, as described in (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#How-Completing-Works">How Completing Works</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Readline Library</CITE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>text</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a partial word to be completed, and each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call should return a possible completion string or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when no more.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call asking about a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>text</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>while getting further completions of that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>text</VAR>.</P>
<P>Here&#8217;s an example<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>completer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for user login names from the password file (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#User-Information">User Information</A>), much like readline&#8217;s own<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rl_username_completion_function</CODE>,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (username-completer-function text state)
  (if (not state)
      (setpwent))  ;; new, go to start of database
  (let more ((pw (getpwent)))
    (if pw
        (if (string-prefix? text (passwd:name pw))
            (passwd:name pw)     ;; this name matches, return it
            (more (getpwent)))   ;; doesn't match, look at next
        (begin
          ;; end of database, close it and return #f
          (endpwent)
          #f))))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apropos_002dcompletion_002dfunction></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apropos-completion-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>text state</EM></DT>
<DD>
<P>A completion function offering completions for Guile functions and variables (all<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE>s). This is the default completion function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-filename_002dcompletion_002dfunction></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>filename-completion-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>text state</EM></DT>
<DD>
<P>A completion function offering filename completions. This is readline&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rl_filename_completion_function</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#Completion-Functions">Completion Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU Readline Library</CITE>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcompletion_002dfunction></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-completion-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string-list</EM></DT>
<DD>
<P>Return a completion function which offers completions from the possibilities in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string-list</VAR>. Matching is case-sensitive.</P></DD></DL>