<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.6 R6RS Support</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-R6RS-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries">R6RS Libraries</A>, for more information on how to define R6RS libraries, and their integration with Guile modules.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Incompatibilities">R6RS Incompatibilities</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile mostly implements R6RS.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries">R6RS Standard Libraries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Modules defined by the R6RS.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Incompatibilities></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=next>R6RS Standard Libraries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Support" rel=up>R6RS Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Incompatibilities-with-the-R6RS></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.6.1 Incompatibilities with the R6RS</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are some incompatibilities between Guile and the R6RS. Some of them are intentional, some of them are bugs, and some are simply unimplemented features. Please let the Guile developers know if you find one that is not on this list.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The R6RS specifies many situations in which a conforming implementation must signal a specific error. Guile doesn&#8217;t really care about that too much&#8212;if a correct R6RS program would not hit that error, we don&#8217;t bother checking for it.</LI>
<LI>Multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms in one file are not yet supported. This is because the expansion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the current module, but does not restore it. This is a bug.</LI>
<LI>R6RS unicode escapes within strings are disabled by default, because they conflict with Guile&#8217;s already-existing escapes. The same is the case for R6RS treatment of escaped newlines in strings.
<P>R6RS behavior can be turned on via a reader option. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Syntax">String Syntax</A>, for more information.</P></LI>
<LI>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a variable transformer may only expand to an expression, not a definition&#8212;even if the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression was in definition context.</LI>
<LI>Instead of using the algorithm detailed in chapter 10 of the R6RS, expansion of toplevel forms happens sequentially.
<P>For example, while the expansion of the following set of toplevel definitions does the correct thing:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(begin
 (define even?
   (lambda (x)
     (or (= x 0) (odd? (- x 1)))))
 (define-syntax odd?
   (syntax-rules ()
     ((odd? x) (not (even? x)))))
 (even? 10))
&#8658; #t
</PRE></DIV>
<P>The same definitions outside of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>wrapper do not:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define even?
  (lambda (x)
    (or (= x 0) (odd? (- x 1)))))
(define-syntax odd?
  (syntax-rules ()
    ((odd? x) (not (even? x)))))
(even? 10)
&lt;unnamed port&gt;:4:18: In procedure even?:
&lt;unnamed port&gt;:4:18: Wrong type to apply: #&lt;syntax-transformer odd?&gt;
</PRE></DIV>
<P>This is because when expanding the right-hand-side of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>even?</CODE>, the reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>odd?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not yet marked as a syntax transformer, so it is assumed to be a function.</P>
<P>This bug will only affect top-level programs, not code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>library</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms. Fixing it for toplevel forms seems doable, but tricky to implement in a backward-compatible way. Suggestions and/or patches would be appreciated.</P></LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module is incomplete. Work is ongoing to fix this.</LI>
<LI>Guile does not prevent use of textual I/O procedures on binary ports. More generally, it does not make a sharp distinction between binary and textual ports (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Port-Manipulation">binary-port?</A>).</LI>
<LI>Guile&#8217;s implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may fail to terminate when applied to arguments containing cycles.</LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Standard-Libraries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Incompatibilities" rel=prev>R6RS Incompatibilities</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Support" rel=up>R6RS Support</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Standard-Libraries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>7.6.2 R6RS Standard Libraries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In contrast with earlier versions of the Revised Report, the R6RS organizes the procedures and syntactic forms required of conforming implementations into a set of &#8220;standard libraries&#8221; which can be imported as necessary by user programs and libraries. Here we briefly list the libraries that have been implemented for Guile.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We do not attempt to document these libraries fully here, as most of their functionality is already available in Guile itself. The expectation is that most Guile users will use the well-known and well-documented Guile modules. These R6RS libraries are mostly useful to users who want to port their code to other R6RS systems.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The documentation in the following sections reproduces some of the content of the library section of the Report, but is mostly intended to provide supplementary information about Guile&#8217;s implementation of the R6RS standard libraries. For complete documentation, design rationales and further examples, we advise you to consult the &#8220;Standard Libraries&#8221; section of the Report (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r6rs.html#Standard-Libraries">R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^6 Report on the Algorithmic Language Scheme</CITE>).</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Library-Usage">Library Usage</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>What to know about Guile&#8217;s library support.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-base">rnrs base</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The base library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-unicode">rnrs unicode</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Access to Unicode operations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-bytevectors">rnrs bytevectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Functions for working with binary data.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-lists">rnrs lists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>List utilities.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-sorting">rnrs sorting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sorting for lists and vectors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-control">rnrs control</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Additional control structures.</TD></TR>
<TR>
<TH vAlign=top colSpan=3 align=left><PRE style="FONT-FAMILY: serif" class=menu-comment></PRE></TH></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Records">R6RS Records</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A note about R6RS records.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-syntactic">rnrs records syntactic</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Syntactic API for R6RS records.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-procedural">rnrs records procedural</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedural API for R6RS records.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-inspection">rnrs records inspection</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Reflection on R6RS records.</TD></TR>
<TR>
<TH vAlign=top colSpan=3 align=left><PRE style="FONT-FAMILY: serif" class=menu-comment></PRE></TH></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-exceptions">rnrs exceptions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Handling exceptional situations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-conditions">rnrs conditions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Data structures for exceptions.</TD></TR>
<TR>
<TH vAlign=top colSpan=3 align=left><PRE style="FONT-FAMILY: serif" class=menu-comment></PRE></TH></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Conditions">I/O Conditions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Predefined I/O error types.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-ports">rnrs io ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Support for port-based I/O.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-simple">rnrs io simple</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>High-level I/O API.</TD></TR>
<TR>
<TH vAlign=top colSpan=3 align=left><PRE style="FONT-FAMILY: serif" class=menu-comment></PRE></TH></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-files">rnrs files</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Functions for working with files.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-programs">rnrs programs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Functions for working with processes.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-fixnums">rnrs arithmetic fixnums</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Fixed-precision arithmetic operations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-flonums">rnrs arithmetic flonums</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Floating-point arithmetic operations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-bitwise">rnrs arithmetic bitwise</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Exact bitwise arithmetic operations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-syntax_002dcase">rnrs syntax-case</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Support for &#8216;syntax-case&#8217; macros.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-hashtables">rnrs hashtables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hashtables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-enums">rnrs enums</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Enumerations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs">rnrs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The composite library.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-eval">rnrs eval</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Support for on-the-fly evaluation.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dpairs">rnrs mutable-pairs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Support for mutable pairs.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dstrings">rnrs mutable-strings</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Support for mutable strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-r5rs">rnrs r5rs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Compatibility layer for R5RS Scheme.</TD></TR>
<TR>
<TH vAlign=top colSpan=3 align=left><PRE style="FONT-FAMILY: serif" class=menu-comment></PRE></TH></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Library-Usage></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-base" rel=next>rnrs base</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Library-Usage-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.1 Library Usage</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile implements the R6RS &#8216;library&#8217; form as a transformation to a native Guile module definition. As a consequence of this, all of the libraries described in the following subsections, in addition to being available for use by R6RS libraries and top-level programs, can also be imported as if they were normal Guile modules&#8212;via a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>use-modules</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, say. For example, the R6RS &#8220;composite&#8221; library can be imported by:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  (import (rnrs (6)))
</PRE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  (use-modules ((rnrs) :version (6)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more information on Guile&#8217;s library implementation, see (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries">R6RS Libraries</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-base></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-unicode" rel=next>rnrs unicode</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Library-Usage" rel=prev>Library Usage</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-base-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.2 rnrs base</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs base (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library exports the procedures and syntactic forms described in the main section of the Report (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r6rs.html#Base-library">R6RS Base library</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^6 Report on the Algorithmic Language Scheme</CITE>). They are grouped below by the existing manual sections to which they correspond.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-boolean_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>boolean?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-not-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Booleans">Booleans</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-symbol_002d_003estring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym</EM></DT>
<DT><A name=index-string_002d_003esymbol-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Primitives">Symbol Primitives</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-char_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char=?</STRONG></DT>
<DT><A name=index-char_003c_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&lt;?</STRONG></DT>
<DT><A name=index-char_003e_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&gt;?</STRONG></DT>
<DT><A name=index-char_003c_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&lt;=?</STRONG></DT>
<DT><A name=index-char_003e_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&gt;=?</STRONG></DT>
<DT><A name=index-integer_002d_003echar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-&gt;char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-char_002d_003einteger-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-&gt;integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-null_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Predicates">List Predicates</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pair_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-cons-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-car-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>car</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caadar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddaar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdadar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caddar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddadr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdddar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddddr-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pairs">Pairs</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-number_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>number?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Numerical-Tower">Numerical Tower</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Predicates">String Predicates</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-procedure_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>procedure?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedure-Properties">Procedure Properties</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name value</EM></DT>
<DT><A name=index-set_0021></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable-name value</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Definition">Definition</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dsyntax-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>keyword expression</EM></DT>
<DT><A name=index-let_002dsyntax-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let-syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((keyword transformer) &#8230;) exp1 exp2 &#8230;</EM></DT>
<DT><A name=index-letrec_002dsyntax-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>letrec-syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((keyword transformer) &#8230;) exp1 exp2 &#8230;</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Defining-Macros">Defining Macros</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-identifier_002dsyntax-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>identifier-syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exp</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Identifier-Macros">Identifier Macros</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-syntax_002drules-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-rules</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>literals (pattern template) ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Syntax-Rules">Syntax Rules</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lambda-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lambda</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>formals body</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lambda">Lambda</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-let-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DT><A name=index-let_002a-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DT><A name=index-letrec-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>letrec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DT><A name=index-letrec_002a-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>letrec*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Bindings">Local Bindings</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-let_002dvalues-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DT><A name=index-let_002a_002dvalues-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let*-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bindings body</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d11">SRFI-11</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-begin-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>begin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr1 expr2 ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#begin">begin</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-quote-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quote</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DT><A name=index-quasiquote-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quasiquote</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DT><A name=index-unquote-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unquote</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DT><A name=index-unquote_002dsplicing-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unquote-splicing</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Expression-Syntax">Expression Syntax</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test consequence [alternate]</EM></DT>
<DT><A name=index-cond-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cond</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>clause1 clause2 ...</EM></DT>
<DT><A name=index-case-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>case</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key clause1 clause2 ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Conditionals</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-and-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>and</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr ...</EM></DT>
<DT><A name=index-or-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>or</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#and-or">and or</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eq_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eq?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-eqv_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eqv?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-equal_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>equal?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-symbol_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol1 symbol2 ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Equality">Equality</A>, for documentation.</P>
<P><CODE>symbol=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-complex_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>complex?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Complex-Numbers">Complex Numbers</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_002dpart-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real-part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-imag_002dpart-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>imag-part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-make_002drectangular-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-rectangular</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>real_part imaginary_part</EM></DT>
<DT><A name=index-make_002dpolar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-polar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-magnitude-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>magnitude</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-angle-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>angle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Complex">Complex</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sqrt-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-exp-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-expt-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2</EM></DT>
<DT><A name=index-log-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>log</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-sin-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-cos-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-tan-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-asin-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>asin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-acos-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>acos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-atan-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>atan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scientific">Scientific</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-rational_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rational?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-numerator-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>numerator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-denominator-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>denominator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-rationalize-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rationalize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x eps</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reals-and-Rationals">Reals and Rationals</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-inexact_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inexact?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-exact></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-inexact></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exactness">Exactness</A>, for documentation. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact-&gt;exact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exact-&gt;inexact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by Guile&#8217;s code library.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Integers">Integers</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-odd_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>odd?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-even_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>even?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-gcd-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gcd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x ...</EM></DT>
<DT><A name=index-lcm-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lcm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x ...</EM></DT>
<DT><A name=index-exact_002dinteger_002dsqrt-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact-integer-sqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Integer-Operations">Integer Operations</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>=</STRONG></DT>
<DT><A name=index-_003c-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;</STRONG></DT>
<DT><A name=index-_003e-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&gt;</STRONG></DT>
<DT><A name=index-_003c_003d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;=</STRONG></DT>
<DT><A name=index-_003e_003d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&gt;=</STRONG></DT>
<DT><A name=index-zero_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>zero?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-positive_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>positive?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-negative_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>negative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Comparison">Comparison</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-for_002deach-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>f lst1 lst2 ...</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map">SRFI-1 Fold and Map</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elem &#8230;</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors">List Constructors</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-length-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-list_002dref-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst k</EM></DT>
<DT><A name=index-list_002dtail-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst k</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Selection">List Selection</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-append-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst &#8230; obj</EM></DT>
<DT><A name=index-append-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append</STRONG></DT>
<DT><A name=index-reverse-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Append_002fReverse">Append/Reverse</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-number_002d_003estring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>number-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [radix]</EM></DT>
<DT><A name=index-string_002d_003enumber-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [radix]</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conversion">Conversion</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char ...</EM></DT>
<DT><A name=index-make_002dstring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k [chr]</EM></DT>
<DT><A name=index-list_002d_003estring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Constructors">String Constructors</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003elist-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List_002fString-Conversion">List/String Conversion</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlength-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-string_002dref-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str k</EM></DT>
<DT><A name=index-string_002dcopy-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-substring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start [end]</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Selection">String Selection</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DT><A name=index-string_003c_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DT><A name=index-string_003e_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DT><A name=index-string_003c_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DT><A name=index-string_003e_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dappend-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reversing-and-Appending-Strings">Reversing and Appending Strings</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfor_002deach-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc s [start [end]]</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mapping-Folding-and-Unfolding">Mapping Folding and Unfolding</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002b-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 ...</EM></DT>
<DT><A name=index-_002d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2 ...</EM></DT>
<DT><A name=index-_002a-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 ...</EM></DT>
<DT><A name=index-_002f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2 ...</EM></DT>
<DT><A name=index-max-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>max</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x1 x2 ...</EM></DT>
<DT><A name=index-min-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>min</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x1 x2 ...</EM></DT>
<DT><A name=index-abs-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-truncate-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>truncate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-floor-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>floor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-ceiling-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ceiling</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-round-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>round</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic">Arithmetic</A>, for documentation.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-div-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-mod-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-div_002dand_002dmod-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-div></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>div</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-mod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-div_002dand_002dmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>div-and-mod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; abs(<VAR>y</VAR>)</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div-and-mod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately. Note that when<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt; 0</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>floor(<VAR>x</VAR>/<VAR>y</VAR>)</EM>, otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ceiling(<VAR>x</VAR>/<VAR>y</VAR>)</EM>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(div 123 10) &#8658; 12
(mod 123 10) &#8658; 3
(div-and-mod 123 10) &#8658; 12 and 3
(div-and-mod 123 -10) &#8658; -12 and 3
(div-and-mod -123 10) &#8658; -13 and 7
(div-and-mod -123 -10) &#8658; 13 and 7
(div-and-mod -123.2 -63.5) &#8658; 2.0 and 3.8
(div-and-mod 16/3 -10/7) &#8658; -3 and 22/21
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-div0-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-mod0-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-div0_002dand_002dmod0-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-div0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>div0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-mod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>mod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-div0_002dand_002dmod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>div0-and-mod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mod0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-abs(<VAR>y</VAR>/2) &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; abs(<VAR>y</VAR>/2)</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div0-and-mod0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounded to the nearest integer. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>lies exactly half-way between two integers, the tie is broken according to the sign of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt; 0</EM>, ties are rounded toward positive infinity, otherwise they are rounded toward negative infinity. This is a consequence of the requirement that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-abs(<VAR>y</VAR>/2) &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; abs(<VAR>y</VAR>/2)</EM>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(div0 123 10) &#8658; 12
(mod0 123 10) &#8658; 3
(div0-and-mod0 123 10) &#8658; 12 and 3
(div0-and-mod0 123 -10) &#8658; -12 and 3
(div0-and-mod0 -123 10) &#8658; -12 and -3
(div0-and-mod0 -123 -10) &#8658; 12 and -3
(div0-and-mod0 -123.2 -63.5) &#8658; 2.0 and 3.8
(div0-and-mod0 16/3 -10/7) &#8658; -4 and -8/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_002dvalued_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real-valued?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-rational_002dvalued_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rational-valued?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-integer_002dvalued_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-valued?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>These procedures return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only if their arguments can, respectively, be coerced to a real, rational, or integer value without a loss of numerical precision.</P>
<P><CODE>real-valued?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for complex numbers whose imaginary parts are zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-nan_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>nan?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-infinite_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>infinite?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-finite_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>finite?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P><CODE>nan?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a NaN value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>infinite?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an infinite value,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>finite?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is neither infinite nor a NaN value, otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Every real number satisfies exactly one of these predicates. An exception is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not real.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assert></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assert</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DD>
<P>Raises an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>; otherwise evaluates to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-error-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>who message irritant1 ...</EM></DT>
<DT><A name=index-assertion_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assertion-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>who message irritant1 ...</EM></DT>
<DD>
<P>These procedures raise compound conditions based on their arguments: If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the condition will include a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;who</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>who</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>who</VAR>; a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition will be included with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR>; an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;irritants</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition will be included with its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>irritants</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>list given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>irritant1 ...</CODE>.</P>
<P><CODE>error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces a compound condition with the simple conditions described above, as well as an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assertion-violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces one that includes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dmap-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc v</EM></DT>
<DT><A name=index-vector_002dfor_002deach-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc v</EM></DT>
<DD>
<P>These procedures implement the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>contracts over vectors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-vector_003f-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-make_002dvector-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>len</EM></DT>
<DT><A name=index-make_002dvector-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>len fill</EM></DT>
<DT><A name=index-list_002d_003evector-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>l</EM></DT>
<DT><A name=index-vector_002d_003elist-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>v</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Creation">Vector Creation</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dlength-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vector</EM></DT>
<DT><A name=index-vector_002dref-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vector k</EM></DT>
<DT><A name=index-vector_002dset_0021-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vector k obj</EM></DT>
<DT><A name=index-vector_002dfill_0021-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>v fill</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessors">Vector Accessors</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dcurrent_002dcontinuation-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-current-continuation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-call_002fcc-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call/cc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Continuations">Continuations</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-values-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-call_002dwith_002dvalues-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>producer consumer</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dwind-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-wind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>in_guard thunk out_guard</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-apply-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>apply</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg &#8230; arglst</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation">Fly Evaluation</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-unicode></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-bytevectors" rel=next>rnrs bytevectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-base" rel=prev>rnrs base</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-unicode-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.3 rnrs unicode</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs unicode (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for manipulating Unicode characters and strings.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dupcase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002ddowncase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dtitlecase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dfoldcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-foldcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DD>
<P>These procedures translate their arguments from one Unicode character set to another.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-upcase</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-downcase</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-titlecase</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical to their counterparts in the Guile core library; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>, for documentation.</P>
<P><CODE>char-foldcase</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the result of applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-upcase</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to its argument, followed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-downcase</CODE>&#8212;except in the case of the Turkic characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>U+0130</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>U+0131</CODE>, for which the procedure acts as the identity function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char1 char2 char3 ...</EM></DT>
<DT><A name=index-char_002dci_003c_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char1 char2 char3 ...</EM></DT>
<DT><A name=index-char_002dci_003e_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char1 char2 char3 ...</EM></DT>
<DT><A name=index-char_002dci_003c_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char1 char2 char3 ...</EM></DT>
<DT><A name=index-char_002dci_003e_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char1 char2 char3 ...</EM></DT>
<DD>
<P>These procedures facilitate case-insensitive comparison of Unicode characters. They are identical to the procedures provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dalphabetic_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-alphabetic?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dnumeric_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-numeric?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dwhitespace_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-whitespace?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dupper_002dcase_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-upper-case?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dlower_002dcase_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-lower-case?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-char_002dtitle_002dcase_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-title-case?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DD>
<P>These procedures implement various Unicode character set predicates. They are identical to the procedures provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dgeneral_002dcategory-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-general-category</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DD>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dupcase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002ddowncase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002dtitlecase-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002dfoldcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-foldcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DD>
<P>These procedures perform Unicode case folding operations on their input. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Alphabetic-Case-Mapping">Alphabetic Case Mapping</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string1 string2 string3 ...</EM></DT>
<DT><A name=index-string_002dci_003c_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string1 string2 string3 ...</EM></DT>
<DT><A name=index-string_002dci_003e_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string1 string2 string3 ...</EM></DT>
<DT><A name=index-string_002dci_003c_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string1 string2 string3 ...</EM></DT>
<DT><A name=index-string_002dci_003e_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string1 string2 string3 ...</EM></DT>
<DD>
<P>These procedures perform case-insensitive comparison on their input. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnormalize_002dnfd-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002dnormalize_002dnfkd-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfkd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002dnormalize_002dnfc-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-string_002dnormalize_002dnfkc-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfkc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DD>
<P>These procedures perform Unicode string normalization operations on their input. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-bytevectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-lists" rel=next>rnrs lists</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-unicode" rel=prev>rnrs unicode</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-bytevectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.4 rnrs bytevectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs bytevectors (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for working with blocks of binary data. This functionality is documented in its own section of the manual; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-sorting" rel=next>rnrs sorting</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-bytevectors" rel=prev>rnrs bytevectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-lists-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.5 rnrs lists</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs lists (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures additional procedures for working with lists.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-find-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>find</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DD>
<P>This procedure is identical to the one defined in Guile&#8217;s SRFI-1 implementation. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching">SRFI-1 Searching</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-for_002dall></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>for-all</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list1 list2 ...</EM></DT>
<DT><A name=index-exists></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exists</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list1 list2 ...</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>for-all</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>every</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure defined by SRFI-1; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is identical to SRFI-1&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>any</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching">SRFI-1 Searching</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-filter-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DT><A name=index-partition-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>partition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by SRFI-1. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification">List Modification</A>, for a description of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filter</CODE>; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Filtering-and-Partitioning">SRFI-1 Filtering and Partitioning</A>, for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>partition</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fold_002dleft></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fold-left</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>combine nil list1 list2 &#8230;</EM></DT>
<DT><A name=index-fold_002dright-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>combine nil list1 list2 &#8230;</EM></DT>
<DD>
<P>These procedures are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by SRFI-1. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map">SRFI-1 Fold and Map</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-remp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DT><A name=index-remove-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remove</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DT><A name=index-remv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DT><A name=index-remq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DD>
<P><CODE>remove</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remv</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by Guile&#8217;s core library, (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification">List Modification</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to the alternate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remove</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure provided by SRFI-1; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Deleting">SRFI-1 Deleting</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-memp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>memp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DT><A name=index-member-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>member</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DT><A name=index-memv-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>memv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DT><A name=index-memq-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>memq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj list</EM></DT>
<DD>
<P><CODE>member</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memv</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical to the procedures provided by Guile&#8217;s core library; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching">List Searching</A>, for their documentation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the specified predicate function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>proc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to test elements of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>&#8212;it behaves similarly to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>find</CODE>, except that it returns the first sublist of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc alist</EM></DT>
<DT><A name=index-assoc-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj alist</EM></DT>
<DT><A name=index-assv-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj alist</EM></DT>
<DT><A name=index-assq-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj alist</EM></DT>
<DD>
<P><CODE>assoc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical to the procedures provided by Guile&#8217;s core library; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Alist-Key-Equality">Alist Key Equality</A>, for their documentation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the specified predicate function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>proc</CODE>to test keys in the association list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cons_002a-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj1 ... obj</EM></DT>
<DT><A name=index-cons_002a-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>This procedure is identical to the one exported by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors">List Constructors</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-sorting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-control" rel=next>rnrs control</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-lists" rel=prev>rnrs lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-sorting-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.6 rnrs sorting</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs sorting (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for sorting lists and vectors.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dsort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc list</EM></DT>
<DT><A name=index-vector_002dsort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc vector</EM></DT>
<DD>
<P>These procedures return their input sorted in ascending order, without modifying the original data.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure that takes two elements from the input list or vector as arguments, and returns a true value if the first is &#8220;less&#8221; than the second,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a list;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a vector.</P>
<P>Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are implemented in terms of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stable-sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure from Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Sorting">Sorting</A>, for a discussion of the behavior of that procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dsort_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-sort!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc vector</EM></DT>
<DD>
<P>Performs a destructive, &#8220;in-place&#8221; sort of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vector</VAR>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as described above to determine an ascending ordering of elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-sort!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns an unspecified value.</P>
<P>This procedure is implemented in terms of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sort!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure from Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Sorting">Sorting</A>, for more information.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-control></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Records" rel=next>R6RS Records</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-sorting" rel=prev>rnrs sorting</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-control-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.7 rnrs control</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs control (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides syntactic forms useful for constructing conditional expressions and controlling the flow of execution.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-when-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>when</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test expression1 expression2 ...</EM></DT>
<DT><A name=index-unless-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unless</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test expression1 expression2 ...</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>when</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form is evaluated by evaluating the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression; if the result is a true value, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>s that follow it are evaluated in order, and the value of the final<VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>becomes the value of the entire<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>when</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form behaves similarly, with the exception that the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>s are only evaluated if the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-do-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>do</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((variable init step) ...) (test expression ...) command ...</EM></DT>
<DD>
<P>This form is identical to the one provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#while-do">while do</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-case_002dlambda-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>case-lambda</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>clause ...</EM></DT>
<DD>
<P>This form is identical to the one provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Case_002dlambda">Case-lambda</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Records></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-syntactic" rel=next>rnrs records syntactic</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-control" rel=prev>rnrs control</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Records-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.8 R6RS Records</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The manual sections below describe Guile&#8217;s implementation of R6RS records, which provide support for user-defined data types. The R6RS records API provides a superset of the features provided by Guile&#8217;s &#8220;native&#8221; records, as well as those of the SRFI-9 records API; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Records">Records</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records">SRFI-9 Records</A>, for a description of those interfaces.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with SRFI-9 and Guile&#8217;s native records, R6RS records are constructed using a record-type descriptor that specifies attributes like the record&#8217;s name, its fields, and the mutability of those fields.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">R6RS records extend this framework to support single inheritance via the specification of a &#8220;parent&#8221; type for a record type at definition time. Accessors and mutator procedures for the fields of a parent type may be applied to records of a subtype of this parent. A record type may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sealed</EM>, in which case it cannot be used as the parent of another record type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The inheritance mechanism for record types also informs the process of initializing the fields of a record and its parents. Constructor procedures that generate new instances of a record type are obtained from a record constructor descriptor, which encapsulates the record-type descriptor of the record to be constructed along with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>protocol</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure that defines how constructors for record subtypes delegate to the constructors of their parent types.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A protocol is a procedure used by the record system at construction time to bind arguments to the fields of the record being constructed. The protocol procedure is passed a procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that accepts the arguments required to construct the record&#8217;s parent type; this procedure, when invoked, will return a procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that accepts the arguments required to construct a new instance of the record type itself and returns a new instance of the record type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The protocol should in turn return a procedure that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to initialize the fields of the record type and its parent type(s). This procedure will be the constructor returned by</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a trivial example, consider the hypothetical record type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pixel</CODE>, which encapsulates an x-y location on a screen, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>voxel</CODE>, which has<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pixel</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its parent type and stores an additional coordinate. The following protocol produces a constructor procedure that accepts all three coordinates, uses the first two to initialize the fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pixel</CODE>, and binds the third to the single field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>voxel</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>  (lambda (n)
    (lambda (x y z)
      (let ((p (n x y)))
        (p z))))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It may be helpful to think of protocols as &#8220;constructor factories&#8221; that produce chains of delegating constructors glued together by the helper procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An R6RS record type may be declared to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>nongenerative</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>via the use of a unique generated or user-supplied symbol&#8212;or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uid</EM>&#8212;such that subsequent record type declarations with the same uid and attributes will return the previously-declared record-type descriptor.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">R6RS record types may also be declared to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>opaque</EM>, in which case the various predicates and introspection procedures defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs records introspection)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will behave as if records of this type are not records at all.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that while the R6RS records API shares much of its namespace with both the SRFI-9 and native Guile records APIs, it is not currently compatible with either.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-syntactic></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-procedural" rel=next>rnrs records procedural</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Records" rel=prev>R6RS Records</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-syntactic-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.9 rnrs records syntactic</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs records syntactic (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library exports the syntactic API for working with R6RS records.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002drecord_002dtype-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-record-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name-spec record-clause &#8230;</EM></DT>
<DD>
<P>Defines a new record type, introducing bindings for a record-type descriptor, a record constructor descriptor, a constructor procedure, a record predicate, and accessor and mutator procedures for the new record type&#8217;s fields.</P>
<P><VAR>name-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must either be an identifier or must take the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(record-name constructor-name predicate-name)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record-name</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>constructor-name</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>predicate-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are all identifiers and specify the names to which, respectively, the record-type descriptor, constructor, and predicate procedures will be bound. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only an identifier, it specifies the name to which the generated record-type descriptor will be bound.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record-clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be one of the following:</P>
<UL>
<LI><CODE>(fields field-spec*)</CODE>, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-spec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a field of the new record type and takes one of the following forms:
<UL>
<LI><CODE>(immutable field-name accessor-name)</CODE>, which specifies an immutable field with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and binds an accessor procedure for it to the name given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor-name</VAR></LI>
<LI><CODE>(mutable field-name accessor-name mutator-name)</CODE>, which specifies a mutable field with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and binds accessor and mutator procedures to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutator-name</VAR>, respectively</LI>
<LI><CODE>(immutable field-name)</CODE>, which specifies an immutable field with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR>; an accessor procedure for it will be created and named by appending record name and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a hyphen separator</LI>
<LI><CODE>(mutable field-name</CODE>), which specifies a mutable field with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR>; an accessor procedure for it will be created and named as described above; a mutator procedure will also be created and named by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the accessor name</LI>
<LI><CODE>field-name</CODE>, which specifies an immutable field with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR>; an access procedure for it will be created and named as described above</LI></UL></LI>
<LI><CODE>(parent parent-name)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol giving the name of the record type to be used as the parent of the new record type</LI>
<LI><CODE>(protocol expression)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to a protocol procedure which behaves as described above, and is used to create a record constructor descriptor for the new record type</LI>
<LI><CODE>(sealed sealed?)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sealed?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a boolean value that specifies whether or not the new record type is sealed</LI>
<LI><CODE>(opaque opaque?)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opaque?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a boolean value that specifies whether or not the new record type is opaque</LI>
<LI><CODE>(nongenerative [uid])</CODE>, which specifies that the record type is nongenerative via the optional uid<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, a unique uid will be generated at expansion time</LI>
<LI><CODE>(parent-rtd parent-rtd parent-cd)</CODE>, a more explicit form of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>parent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form above;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent-rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent-cd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should evaluate to a record-type descriptor and a record constructor descriptor, respectively</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002ddescriptor-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-descriptor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record-name</EM></DT>
<DD>
<P>Evaluates to the record-type descriptor associated with the type specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record-name</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dconstructor_002ddescriptor></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-constructor-descriptor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record-name</EM></DT>
<DD>
<P>Evaluates to the record-constructor descriptor associated with the type specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record-name</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-procedural></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-inspection" rel=next>rnrs records inspection</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-syntactic" rel=prev>rnrs records syntactic</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-procedural-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.10 rnrs records procedural</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs records procedural (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library exports the procedural API for working with R6RS records.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drecord_002dtype_002ddescriptor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-record-type-descriptor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name parent uid sealed? opaque? fields</EM></DT>
<DD>
<P>Returns a new record-type descriptor with the specified characteristics:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a symbol giving the name of the new record type;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a non-sealed record-type descriptor for the returned record type to extend;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, indicating that the record type is generative, or a symbol giving the type&#8217;s nongenerative uid;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sealed?</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opaque?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be boolean values that specify the sealedness and opaqueness of the record type;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a vector of zero or more field specifiers of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(mutable name)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<CODE>(immutable name)</CODE>, where name is a symbol giving a name for the field.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it must be a symbol</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002ddescriptor_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-descriptor?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a record-type descriptor,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drecord_002dconstructor_002ddescriptor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-record-constructor-descriptor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd parent-constructor-descriptor protocol</EM></DT>
<DD>
<P>Returns a new record constructor descriptor that can be used to produce constructors for the record type specified by the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and whose delegation and binding behavior are specified by the protocol procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>protocol</VAR>.</P>
<P><VAR>parent-constructor-descriptor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a record constructor descriptor for the parent type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>, if one exists. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents a base type, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent-constructor-descriptor</VAR>must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an extension of another type,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>parent-constructor-descriptor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may still be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, but protocol must also be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dconstructor-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-constructor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rcd</EM></DT>
<DD>
<P>Returns a record constructor procedure by invoking the protocol defined by the record-constructor descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rcd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dpredicate-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-predicate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns the record predicate procedure for the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002daccessor-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd k</EM></DT>
<DD>
<P>Returns the record field accessor procedure for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th field of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dmutator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-mutator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd k</EM></DT>
<DD>
<P>Returns the record field mutator procedure for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th field of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition will be raised if this field is not mutable.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-inspection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-exceptions" rel=next>rnrs exceptions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-procedural" rel=prev>rnrs records procedural</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-records-inspection-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.11 rnrs records inspection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs records inspection (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures useful for accessing metadata about R6RS records.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the specified object is a non-opaque R6RS record,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002drtd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-rtd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record</EM></DT>
<DD>
<P>Returns the record-type descriptor for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR>. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is opaque.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dname-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns the name of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dparent></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-parent</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns the parent of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it has none.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002duid></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-uid</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns the uid of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it has none.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dgenerative_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-generative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is generative,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dsealed_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-sealed?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is sealed,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dopaque_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-opaque?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is opaque,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dfield_002dnames></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-field-names</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Returns a vector of symbols giving the names of the fields defined by the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(and not any of its sub- or supertypes).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dfield_002dmutable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-field-mutable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd k</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the field at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the record-type descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(and not any of its sub- or supertypes) is mutable.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-conditions" rel=next>rnrs conditions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-inspection" rel=prev>rnrs records inspection</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-exceptions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.12 rnrs exceptions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs exceptions (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides functionality related to signaling and handling exceptional situations. This functionality is similar to the exception handling systems provided by Guile&#8217;s core library See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions">Exceptions</A>, and by the SRFI-18 and SRFI-34 modules&#8212;See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d18-Exceptions">SRFI-18 Exceptions</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d34">SRFI-34</A>, respectively&#8212;but there are some key differences in concepts and behavior.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A raised exception may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>continuable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>non-continuable</EM>. When an exception is raised non-continuably, another exception, with the condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;non-continuable</CODE>, will be raised when the exception handler returns locally. Raising an exception continuably captures the current continuation and invokes it after a local return from the exception handler.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Like SRFI-18 and SRFI-34, R6RS exceptions are implemented on top of Guile&#8217;s native<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms, and use custom &#8220;throw keys&#8221; to identify their exception types. As a consequence, Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form can handle exceptions thrown by these APIs, but the reverse is not true: Handlers registered by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-exception-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure described below will only be called on exceptions thrown by the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dexception_002dhandler-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-exception-handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handler thunk</EM></DT>
<DD>
<P>Installs<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>, which must be a procedure taking one argument, as the current exception handler during the invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>, a procedure taking zero arguments. The handler in place at the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-exception-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called is made current again once either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked after an exception is thrown from within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.</P>
<P>This procedure is similar to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure provided by Guile&#8217;s code library; (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Throw-Handlers">Throw Handlers</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-guard></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>guard</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(variable clause1 clause2 ...) body</EM></DT>
<DD>
<P>Evaluates the expression given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>, first creating an ad hoc exception handler that binds a raised exception to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then evaluates the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR>s as if they were part of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, with the value of the first matching clause becoming the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guard</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Conditionals</A>). If none of the clause&#8217;s test expressions evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, the exception is re-raised, with the exception handler that was current before the evaluation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guard</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P>For example, the expression</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(guard (ex ((eq? ex 'foo) 'bar) ((eq? ex 'bar) 'baz)) 
  (raise 'bar))
</PRE></DIV>
<P>evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>baz</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-raise-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>raise</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Raises a non-continuable exception by invoking the currently-installed exception handler on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. If the handler returns, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;non-continuable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception will be raised in the dynamic context in which the handler was installed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-raise_002dcontinuable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>raise-continuable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Raises a continuable exception by invoking currently-installed exception handler on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-conditions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Conditions" rel=next>I/O Conditions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-exceptions" rel=prev>rnrs exceptions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-conditions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.13 rnrs conditions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs condition (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides forms and procedures for constructing new condition types, as well as a library of pre-defined condition types that represent a variety of common exceptional situations. Conditions are records of a subtype of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;condition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>record type, which is neither sealed nor opaque. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Records">R6RS Records</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conditions may be manipulated singly, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>simple conditions</EM>, or when composed with other conditions to form<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compound conditions</EM>. Compound conditions do not &#8220;nest&#8221;&#8212;constructing a new compound condition out of existing compound conditions will &#8220;flatten&#8221; them into their component simple conditions. For example, making a new condition out of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition and a compound condition that contains an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition and another<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition will produce a compound condition that contains two<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conditions and one<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The record type predicates and field accessors described below can operate on either simple or compound conditions. In the latter case, the predicate returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the compound condition contains a component simple condition of the appropriate type; the field accessors return the requisite fields from the first component simple condition found to be of the appropriate type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This library is quite similar to the SRFI-35 conditions module (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d35">SRFI-35</A>). Among other minor differences, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs conditions)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library features slightly different semantics around condition field accessors, and comes with a larger number of pre-defined condition types. The two APIs are not currently compatible, however; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate from one API will return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when applied to a condition object created in the other.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026condition></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;condition</STRONG></DT>
<DT><A name=index-condition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>The base record type for conditions.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition1 ...</EM></DT>
<DT><A name=index-simple_002dconditions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>simple-conditions</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure creates a new compound condition out of its condition arguments, flattening any specified compound conditions into their component simple conditions as described above.</P>
<P><CODE>simple-conditions</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a list of the component simple conditions of the compound condition<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>condition</CODE>, in the order in which they were specified at construction time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-condition_002dpredicate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-predicate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DT><A name=index-condition_002daccessor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd proc</EM></DT>
<DD>
<P>These procedures return condition predicate and accessor procedures for the specified condition record type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dcondition_002dtype-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-condition-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition-type supertype constructor predicate field-spec ...</EM></DT>
<DD>
<P>Evaluates to a new record type definition for a condition type with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that has the condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>supertype</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its parent. A default constructor, which binds its arguments to the fields of this type and its parent types, will be bound to the identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>constructor</VAR>; a condition predicate will be bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>predicate</VAR>. The fields of the new type, which are immutable, are specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-spec</VAR>s, each of which must be of the form:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(field accessor)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the name of the field and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the name for a binding to an accessor procedure created for this field.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026message></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;message</STRONG></DT>
<DT><A name=index-make_002dmessage_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-message-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>message</EM></DT>
<DT><A name=index-message_002dcondition_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>message-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-condition_002dmessage-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-message</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A type that includes a message describing the condition that occurred.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026warning></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;warning</STRONG></DT>
<DT><A name=index-make_002dwarning></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-warning</STRONG></DT>
<DT><A name=index-warning_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>warning?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A base type for representing non-fatal conditions during execution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026serious></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;serious</STRONG></DT>
<DT><A name=index-make_002dserious_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-serious-condition</STRONG></DT>
<DT><A name=index-serious_002dcondition_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>serious-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A base type for conditions representing errors serious enough that cannot be ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026error></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;error</STRONG></DT>
<DT><A name=index-make_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-error</STRONG></DT>
<DT><A name=index-error_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A base type for conditions representing errors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026violation></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;violation</STRONG></DT>
<DT><A name=index-make_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-violation</STRONG></DT>
<DT><A name=index-violation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>violation?</STRONG></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;serious</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can be used to represent violations of a language or library standard.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026assertion></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;assertion</STRONG></DT>
<DT><A name=index-make_002dassertion_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-assertion-violation</STRONG></DT>
<DT><A name=index-assertion_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assertion-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that indicates an invalid call to a procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026irritants></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;irritants</STRONG></DT>
<DT><A name=index-make_002dirritants_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-irritants-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>irritants</EM></DT>
<DT><A name=index-irritants_002dcondition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>irritants-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-condition_002dirritants></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-irritants</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A base type used for storing information about the causes of another condition in a compound condition.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026who></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;who</STRONG></DT>
<DT><A name=index-make_002dwho_002dcondition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-who-condition</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>who</EM></DT>
<DT><A name=index-who_002dcondition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>who-condition?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-condition_002dwho></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>condition-who</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A base type used for storing the identity, a string or symbol, of the entity responsible for another condition in a compound condition.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026non_002dcontinuable></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;non-continuable</STRONG></DT>
<DT><A name=index-make_002dnon_002dcontinuable_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-non-continuable-violation</STRONG></DT>
<DT><A name=index-non_002dcontinuable_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>non-continuable-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used to indicate that an exception handler invoked by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has returned locally.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026implementation_002drestriction></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;implementation-restriction</STRONG></DT>
<DT><A name=index-make_002dimplementation_002drestriction_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-implementation-restriction-violation</STRONG></DT>
<DT><A name=index-implementation_002drestriction_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>implementation-restriction-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used to indicate a violation of an implementation restriction.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026lexical></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;lexical</STRONG></DT>
<DT><A name=index-make_002dlexical_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-lexical-violation</STRONG></DT>
<DT><A name=index-lexical_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lexical-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used to indicate a syntax violation at the level of the datum syntax.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026syntax></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;syntax</STRONG></DT>
<DT><A name=index-make_002dsyntax_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-syntax-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>form subform</EM></DT>
<DT><A name=index-syntax_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-syntax_002dviolation_002dform></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-violation-form</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DT><A name=index-syntax_002dviolation_002dsubform></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-violation-subform</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that indicates a syntax violation. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>form</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subform</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields, which must be datum values, indicate the syntactic form responsible for the condition.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026undefined></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;undefined</STRONG></DT>
<DT><A name=index-make_002dundefined_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-undefined-violation</STRONG></DT>
<DT><A name=index-undefined_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>undefined-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;violation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that indicates a reference to an unbound identifier.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=I_002fO-Conditions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-ports" rel=next>rnrs io ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-conditions" rel=prev>rnrs conditions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=I_002fO-Conditions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.14 I/O Conditions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These condition types are exported by both the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io simple (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>libraries.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o</STRONG></DT>
<DT><A name=index-make_002di_002fo_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-error</STRONG></DT>
<DT><A name=index-i_002fo_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A condition supertype for more specific I/O errors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dread></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-read</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dread_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-read-error</STRONG></DT>
<DT><A name=index-i_002fo_002dread_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-read-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o</CODE>; represents read-related I/O errors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dwrite></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-write</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dwrite_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-write-error</STRONG></DT>
<DT><A name=index-i_002fo_002dwrite_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-write-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o</CODE>; represents write-related I/O errors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dinvalid_002dposition></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-invalid-position</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dinvalid_002dposition_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-invalid-position-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>position</EM></DT>
<DT><A name=index-i_002fo_002dinvalid_002dposition_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-invalid-position-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-i_002fo_002derror_002dposition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-error-position</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o</CODE>; represents an error related to an attempt to set the file position to an invalid position.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dfilename></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-filename</STRONG></DT>
<DT><A name=index-make_002dio_002dfilename_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-io-filename-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-i_002fo_002dfilename_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-filename-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-i_002fo_002derror_002dfilename></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-error-filename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o</CODE>; represents an error related to an operation on a named file.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dfile_002dprotection></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-file-protection</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dfile_002dprotection_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-file-protection-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-i_002fo_002dfile_002dprotection_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-file-protection-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-filename</CODE>; represents an error resulting from an attempt to access a named file for which the caller had insufficient permissions.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dfile_002dis_002dread_002donly></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-file-is-read-only</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dfile_002dis_002dread_002donly_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-file-is-read-only-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-i_002fo_002dfile_002dis_002dread_002donly_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-file-is-read-only-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-protection</CODE>; represents an error related to an attempt to write to a read-only file.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dfile_002dalready_002dexists></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-file-already-exists</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dfile_002dalready_002dexists_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-file-already-exists-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-i_002fo_002dfile_002dalready_002dexists_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-file-already-exists-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-filename</CODE>; represents an error related to an operation on an existing file that was assumed not to exist.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dfile_002ddoes_002dnot_002dexist></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-file-does-not-exist</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dfile_002ddoes_002dnot_002dexist_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-file-does-not-exist-error</STRONG></DT>
<DT><A name=index-i_002fo_002dfile_002ddoes_002dnot_002dexist_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-file-does-not-exist-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-filename</CODE>; represents an error related to an operation on a non-existent file that was assumed to exist.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dport></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-port</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dport_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-port-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-i_002fo_002dport_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-port-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-i_002fo_002derror_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-error-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>A subtype of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o</CODE>; represents an error related to an operation on the port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-io-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-simple" rel=next>rnrs io simple</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Conditions" rel=prev>I/O Conditions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-io-ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.15 rnrs io ports</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides various procedures and syntactic forms for use in writing to and reading from ports. This functionality is documented in its own section of the manual; (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports">R6RS I/O Ports</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-io-simple></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-files" rel=next>rnrs files</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-ports" rel=prev>rnrs io ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-io-simple-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.16 rnrs io simple</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io simple (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides convenience functions for performing textual I/O on ports. This library also exports all of the condition types and associated procedures described in (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Conditions">I/O Conditions</A>). In the context of this section, when stating that a procedure behaves &#8220;identically&#8221; to the corresponding procedure in Guile&#8217;s core library, this is modulo the behavior wrt. conditions: such procedures raise the appropriate R6RS conditions in case of error, but otherwise behave identically.</P>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>There are still known issues regarding condition-correctness; some errors may still be thrown as native Guile exceptions instead of the appropriate R6RS conditions.</P></BLOCKQUOTE>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eof_002dobject-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eof-object</STRONG></DT>
<DT><A name=index-eof_002dobject_003f-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eof-object?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports">R6RS I/O Ports</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-input_002dport_003f-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>input-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-output_002dport_003f-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>output-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dinput_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-input-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename proc</EM></DT>
<DT><A name=index-call_002dwith_002doutput_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-output-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename proc</EM></DT>
<DT><A name=index-open_002dinput_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-input-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-open_002doutput_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-output-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-with_002dinput_002dfrom_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-input-from-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename thunk</EM></DT>
<DT><A name=index-with_002doutput_002dto_002dfile-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-output-to-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename thunk</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dinput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>input-port</EM></DT>
<DT><A name=index-close_002doutput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>output-port</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Closing">Closing</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-peek_002dchar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>peek-char</STRONG></DT>
<DT><A name=index-peek_002dchar-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>peek-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DT><A name=index-read_002dchar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-char</STRONG></DT>
<DT><A name=index-read_002dchar-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reading">Reading</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read</STRONG></DT>
<DT><A name=index-read-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>This procedure is identical to the one provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-display-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>display</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-display-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>display</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj textual-output-port</EM></DT>
<DT><A name=index-newline-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>newline</STRONG></DT>
<DT><A name=index-newline-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>newline</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-output-port</EM></DT>
<DT><A name=index-write-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-write-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj textual-output-port</EM></DT>
<DT><A name=index-write_002dchar-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM></DT>
<DT><A name=index-write_002dchar-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char textual-output-port</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-files></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-programs" rel=next>rnrs programs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-simple" rel=prev>rnrs io simple</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-files-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.17 rnrs files</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs files (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-exists?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, which test for the existence of a file and allow the deletion of files from the file system, respectively.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-System">File System</A>, for documentation.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-programs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-fixnums" rel=next>rnrs arithmetic fixnums</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-files" rel=prev>rnrs files</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-programs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.18 rnrs programs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs programs (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for process management and introspection.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-command_002dline-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>command-line</STRONG></DT>
<DD>
<P>This procedure is identical to the one provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Runtime-Environment">Runtime Environment</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exit-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[status]</EM></DT>
<DD>
<P>This procedure is identical to the one provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Processes">Processes</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-fixnums></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-flonums" rel=next>rnrs arithmetic flonums</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-programs" rel=prev>rnrs programs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-fixnums-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.19 rnrs arithmetic fixnums</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs arithmetic fixnums (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for performing arithmetic operations on an implementation-dependent range of exact integer values, which R6RS refers to as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fixnums</EM>. In Guile, the size of a fixnum is determined by the size of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type; a single SCM struct is guaranteed to be able to hold an entire fixnum, making fixnum computations particularly efficient&#8212;(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type">The SCM Type</A>). On 32-bit systems, the most negative and most positive fixnum values are, respectively, -536870912 and 536870911.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unless otherwise specified, all of the procedures below take fixnums as arguments, and will raise an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition if passed a non-fixnum argument or an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;implementation-restriction</CODE>condition if their result is not itself a fixnum.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fixnum_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fixnum?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a fixnum,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fixnum_002dwidth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fixnum-width</STRONG></DT>
<DT><A name=index-least_002dfixnum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>least-fixnum</STRONG></DT>
<DT><A name=index-greatest_002dfixnum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>greatest-fixnum</STRONG></DT>
<DD>
<P>These procedures return, respectively, the maximum number of bits necessary to represent a fixnum value in Guile, the minimum fixnum value, and the maximum fixnum value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 ...</EM></DT>
<DT><A name=index-fx_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 ...</EM></DT>
<DT><A name=index-fx_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 ...</EM></DT>
<DT><A name=index-fx_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 ...</EM></DT>
<DT><A name=index-fx_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 ...</EM></DT>
<DD>
<P>These procedures return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if their fixnum arguments are (respectively): equal, monotonically increasing, monotonically decreasing, monotonically nondecreasing, or monotonically nonincreasing;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxzero_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxzero?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DT><A name=index-fxpositive_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxpositive?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DT><A name=index-fxnegative_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxnegative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DT><A name=index-fxodd_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxodd?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DT><A name=index-fxeven_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxeven?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>These numerical predicates return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is, respectively, zero, greater than zero, less than zero, odd, or even;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxmax></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 ...</EM></DT>
<DT><A name=index-fxmin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxmin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 ...</EM></DT>
<DD>
<P>These procedures return the maximum or minimum of their arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_002b></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fx_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DD>
<P>These procedures return the sum or product of their arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_002d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fx_002d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>Returns the difference of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR>, or the negation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR>, if called with a single argument.</P>
<P>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition is raised if the result is not itself a fixnum.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxdiv_002dand_002dmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxdiv-and-mod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxdiv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxdiv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxmod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxdiv0_002dand_002dmod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxdiv0-and-mod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxdiv0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxdiv0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxmod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxmod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DD>
<P>These procedures implement number-theoretic division on fixnums; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/rnrs%20base.html#Top">(rnrs base)</A>, for a description of their semantics.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_002b_002fcarry></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx+/carry</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the two fixnum results of the following computation:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let* ((s (+ fx1 fx2 fx3))
       (s0 (mod0 s (expt 2 (fixnum-width))))
       (s1 (div0 s (expt 2 (fixnum-width)))))
  (values s0 s1))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_002d_002fcarry></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx-/carry</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the two fixnum results of the following computation:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let* ((d (- fx1 fx2 fx3))
       (d0 (mod0 d (expt 2 (fixnum-width))))
       (d1 (div0 d (expt 2 (fixnum-width)))))
  (values d0 d1))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fx_002a_002fcarry></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fx*/carry</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>Returns the two fixnum results of the following computation:
(let* ((s (+ (* fx1 fx2) fx3))
       (s0 (mod0 s (expt 2 (fixnum-width))))
       (s1 (div0 s (expt 2 (fixnum-width)))))
  (values s0 s1))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxnot></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxnot</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DT><A name=index-fxand></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 ...</EM></DT>
<DT><A name=index-fxior></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 ...</EM></DT>
<DT><A name=index-fxxor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxxor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 ...</EM></DT>
<DD>
<P>These procedures are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lognot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logxor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxif></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxif</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the bitwise &#8220;if&#8221; of its fixnum arguments. The bit at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the return value will be the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxbit_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxbit-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>Returns the number of 1 bits in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxlength</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>Returns the number of bits necessary to represent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxfirst_002dbit_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxfirst-bit-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>Returns the index of the least significant 1 bit in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxbit_002dset_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxbit-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR>th bit in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxcopy_002dbit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxcopy-bit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the result of setting the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxbit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the integer representation of the contiguous sequence of bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that starts at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) and ends at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxcopy_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxcopy-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 fx4</EM></DT>
<DD>
<P>Returns the result of replacing the bit field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with start and end positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the corresponding bit field from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx4</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxarithmetic_002dshift></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxarithmetic-shift</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxarithmetic_002dshift_002dleft></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxarithmetic-shift-left</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DT><A name=index-fxarithmetic_002dshift_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxarithmetic-shift-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2</EM></DT>
<DD>
<P>Returns the result of shifting the bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>right or left by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>positions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fxarithmetic-shift</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fxarithmetic-shift-left</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxrotate_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxrotate-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3 fx4</EM></DT>
<DD>
<P>Returns the result of cyclically permuting the bit field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with start and end positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx4</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits in the direction of more significant bits.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fxreverse_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fxreverse-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx1 fx2 fx3</EM></DT>
<DD>
<P>Returns the result of reversing the order of the bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) and position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-flonums></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-bitwise" rel=next>rnrs arithmetic bitwise</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-fixnums" rel=prev>rnrs arithmetic fixnums</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-flonums-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.20 rnrs arithmetic flonums</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs arithmetic flonums (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for performing arithmetic operations on inexact representations of real numbers, which R6RS refers to as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>flonums</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unless otherwise specified, all of the procedures below take flonums as arguments, and will raise an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition if passed a non-flonum argument.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flonum_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flonum?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a flonum,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_002d_003eflonum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real-&gt;flonum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DD>
<P>Returns the flonum that is numerically closest to the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fl_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 fl3 ...</EM></DT>
<DT><A name=index-fl_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 fl3 ...</EM></DT>
<DT><A name=index-fl_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 fl3 ...</EM></DT>
<DT><A name=index-fl_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 fl3 ...</EM></DT>
<DT><A name=index-fl_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 fl3 ...</EM></DT>
<DD>
<P>These procedures return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if their flonum arguments are (respectively): equal, monotonically increasing, monotonically decreasing, monotonically nondecreasing, or monotonically nonincreasing;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flinteger_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flinteger?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flzero_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flzero?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flpositive_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flpositive?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flnegative_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flnegative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flodd_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flodd?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fleven_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fleven?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>These numerical predicates return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is, respectively, an integer, zero, greater than zero, less than zero, odd, even,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. In the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flodd?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fleven?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be an integer-valued flonum.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flfinite_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flfinite?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flinfinite_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flinfinite?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flnan_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flnan?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>These numerical predicates return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is, respectively, not infinite, infinite, or a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NaN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flmax></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 ...</EM></DT>
<DT><A name=index-flmin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flmin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 ...</EM></DT>
<DD>
<P>These procedures return the maximum or minimum of their arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fl_002b></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 ...</EM></DT>
<DT><A name=index-fl_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl ...</EM></DT>
<DD>
<P>These procedures return the sum or product of their arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fl_002d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 ...</EM></DT>
<DT><A name=index-fl_002d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fl_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2 ...</EM></DT>
<DT><A name=index-fl_002f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fl/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>These procedures return, respectively, the difference or quotient of their arguments when called with two arguments; when called with a single argument, they return the additive or multiplicative inverse of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flabs></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flabs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>Returns the absolute value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fldiv_002dand_002dmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldiv-and-mod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-fldiv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldiv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-fldmod></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldmod</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-fldiv0_002dand_002dmod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldiv0-and-mod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-fldiv0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldiv0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-flmod0></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flmod0</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DD>
<P>These procedures implement number-theoretic division on flonums; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/rnrs%20base.html#Top">(rnrs base)</A>, for a description for their semantics.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flnumerator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flnumerator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fldenominator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fldenominator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>These procedures return the numerator or denominator of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a flonum.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flfloor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flfloor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1</EM></DT>
<DT><A name=index-flceiling></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flceiling</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fltruncate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fltruncate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flround></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flround</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>These procedures are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceiling</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic">Arithmetic</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flexp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flexp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fllog></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fllog</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fllog-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fllog</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DT><A name=index-flsin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flsin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flcos></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flcos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-fltan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fltan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flasin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flasin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flacos></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flacos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flatan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flatan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DT><A name=index-flatan-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flatan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DD>
<P>These procedures, which compute the usual transcendental functions, are the flonum variants of the procedures provided by the R6RS base library (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/rnrs%20base.html#Top">(rnrs base)</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flsqrt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flsqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl</EM></DT>
<DD>
<P>Returns the square root of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-0.0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>-0.0</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned; for other negative values, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NaN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flexpt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flexpt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fl1 fl2</EM></DT>
<DD>
<P>Returns the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>raised to the power of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fl2</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following condition types are provided to allow Scheme implementations that do not support infinities or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NaN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values to indicate that a computation resulted in such a value. Guile supports both of these, so these conditions will never be raised by Guile&#8217;s standard libraries implementation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026no_002dinfinities></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;no-infinities</STRONG></DT>
<DT><A name=index-make_002dno_002dinfinities_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-no-infinities-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-no_002dinfinities_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-infinities-violation?</STRONG></DT>
<DD>
<P>A condition type indicating that a computation resulted in an infinite value on a Scheme implementation incapable of representing infinities.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026no_002dnans></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;no-nans</STRONG></DT>
<DT><A name=index-make_002dno_002dnans_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-no-nans-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-no_002dnans_002dviolation_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>no-nans-violation?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>A condition type indicating that a computation resulted in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NaN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value on a Scheme implementation incapable of representing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NaN</CODE>s.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-fixnum_002d_003eflonum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>fixnum-&gt;flonum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fx</EM></DT>
<DD>
<P>Returns the flonum that is numerically closest to the fixnum<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fx</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-bitwise></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-syntax_002dcase" rel=next>rnrs syntax-case</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-flonums" rel=prev>rnrs arithmetic flonums</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-arithmetic-bitwise-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.21 rnrs arithmetic bitwise</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs arithmetic bitwise (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for performing bitwise arithmetic operations on the two&#8217;s complement representations of fixnums.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This library and the procedures it exports share functionality with SRFI-60, which provides support for bitwise manipulation of integers (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d60">SRFI-60</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dnot-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei</EM></DT>
<DT><A name=index-bitwise_002dand-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-and</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ...</EM></DT>
<DT><A name=index-bitwise_002dior-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-ior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ...</EM></DT>
<DT><A name=index-bitwise_002dxor-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-xor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ...</EM></DT>
<DD>
<P>These procedures are identical to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lognot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logior</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logxor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dif-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3</EM></DT>
<DD>
<P>Returns the bitwise &#8220;if&#8221; of its arguments. The bit at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the return value will be the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>th bit from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dbit_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-bit-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei</EM></DT>
<DD>
<P>Returns the number of 1 bits in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei</EM></DT>
<DD>
<P>Returns the number of bits necessary to represent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dfirst_002dbit_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-first-bit-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei</EM></DT>
<DD>
<P>Returns the index of the least significant 1 bit in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dbit_002dset_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-bit-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR>th bit in the two&#8217;s complement representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dcopy_002dbit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-copy-bit</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3</EM></DT>
<DD>
<P>Returns the result of setting the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR>th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3</EM></DT>
<DD>
<P>Returns the integer representation of the contiguous sequence of bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that starts at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) and ends at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dcopy_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-copy-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3 ei4</EM></DT>
<DD>
<P>Returns the result of replacing the bit field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with start and end positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the corresponding bit field from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei4</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002darithmetic_002dshift></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-arithmetic-shift</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2</EM></DT>
<DT><A name=index-bitwise_002darithmetic_002dshift_002dleft></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-arithmetic-shift-left</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2</EM></DT>
<DT><A name=index-bitwise_002darithmetic_002dshift_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-arithmetic-shift-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2</EM></DT>
<DD>
<P>Returns the result of shifting the bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>right or left by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>positions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bitwise-arithmetic-shift</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bitwise-arithmetic-shift-left</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002drotate_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-rotate-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3 ei4</EM></DT>
<DD>
<P>Returns the result of cyclically permuting the bit field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with start and end positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei4</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits in the direction of more significant bits.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitwise_002dreverse_002dbit_002dfield></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitwise-reverse-bit-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ei1 ei2 ei3</EM></DT>
<DD>
<P>Returns the result of reversing the order of the bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) and position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ei3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-syntax_002dcase></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-hashtables" rel=next>rnrs hashtables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-arithmetic-bitwise" rel=prev>rnrs arithmetic bitwise</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-syntax_002dcase-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.22 rnrs syntax-case</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs syntax-case (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides access to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>syntax-case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system for writing hygienic macros. With one exception, all of the forms and procedures exported by this library are &#8220;re-exports&#8221; of Guile&#8217;s native support for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>syntax-case</CODE>; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Syntax-Case">Syntax Case</A>, for documentation, examples, and rationale.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvariable_002dtransformer-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-variable-transformer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD>
<P>Creates a new variable transformer out of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, a procedure that takes a syntax object as input and returns a syntax object. If an identifier to which the result of this procedure is bound appears on the left-hand side of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be called with a syntax object representing the entire<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, and its return value will replace that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE>expression.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-syntax_002dcase-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-case</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression (literal ...) clause ...</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>syntax-case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pattern matching form.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-syntax-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>template</EM></DT>
<DT><A name=index-quasisyntax></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quasisyntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>template</EM></DT>
<DT><A name=index-unsyntax></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unsyntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>template</EM></DT>
<DT><A name=index-unsyntax_002dsplicing></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unsyntax-splicing</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>template</EM></DT>
<DD>
<P>These forms allow references to be made in the body of a syntax-case output expression subform to datum and non-datum values. They are identical to the forms provided by Guile&#8217;s core library; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Syntax-Case">Syntax Case</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-identifier_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>identifier?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-bound_002didentifier_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bound-identifier=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id1 id2</EM></DT>
<DT><A name=index-free_002didentifier_003d_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>free-identifier=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id1 id2</EM></DT>
<DD>
<P>These predicate procedures operate on syntax objects representing Scheme identifiers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>identifier?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents an identifier,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bound-identifier=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only if a binding for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>would capture a reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the transformer&#8217;s output, or vice-versa.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free-identifier=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>would refer to the same binding in the output of the transformer, independent of any bindings introduced by the transformer.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-generate_002dtemporaries-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>generate-temporaries</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>l</EM></DT>
<DD>
<P>Returns a list, of the same length as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>l</VAR>, which must be a list or a syntax object representing a list, of globally unique symbols.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-syntax_002d_003edatum-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-&gt;datum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>syntax-object</EM></DT>
<DT><A name=index-datum_002d_003esyntax-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>datum-&gt;syntax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>template-id datum</EM></DT>
<DD>
<P>These procedures convert wrapped syntax objects to and from Scheme datum values. The syntax object returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>datum-&gt;syntax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shares contextual information with the syntax object<VAR>template-id</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-syntax_002dviolation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>whom message form</EM></DT>
<DT><A name=index-syntax_002dviolation-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>syntax-violation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>whom message form subform</EM></DT>
<DD>
<P>Constructs a new compound condition that includes the following simple conditions:</P>
<UL>
<LI>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>whom</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;who</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>whom</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its field</LI>
<LI>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;message</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition with the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR></LI>
<LI>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;syntax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition with the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>form</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subform</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields</LI></UL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-hashtables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-enums" rel=next>rnrs enums</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-syntax_002dcase" rel=prev>rnrs syntax-case</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-hashtables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.23 rnrs hashtables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs hashtables (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides structures and procedures for creating and accessing hash tables. The hash tables API defined by R6RS is substantially similar to both Guile&#8217;s native hash tables implementation as well as the one provided by SRFI-69; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d69">SRFI-69</A>, respectively. Note that you can write portable R6RS library code that manipulates SRFI-69 hash tables (by importing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi :69)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library); however, hash tables created by one API cannot be used by another.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Like SRFI-69 hash tables&#8212;and unlike Guile&#8217;s native ones&#8212;R6RS hash tables associate hash and equality functions with a hash table at the time of its creation. Additionally, R6RS allows for the creation (via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashtable-copy</CODE>; see below) of immutable hash tables.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002deq_002dhashtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-eq-hashtable</STRONG></DT>
<DT><A name=index-make_002deq_002dhashtable-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-eq-hashtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k</EM></DT>
<DD>
<P>Returns a new hash table that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compare keys and Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure as a hash function. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies the initial capacity of the hash table.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002deqv_002dhashtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-eqv-hashtable</STRONG></DT>
<DT><A name=index-make_002deqv_002dhashtable-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-eqv-hashtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k</EM></DT>
<DD>
<P>Returns a new hash table that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compare keys and Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure as a hash function. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies the initial capacity of the hash table.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dhashtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-hashtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash-function equiv</EM></DT>
<DT><A name=index-make_002dhashtable-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-hashtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash-function equiv k</EM></DT>
<DD>
<P>Returns a new hash table that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equiv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compare keys and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a hash function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equiv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure that accepts two arguments and returns a true value if they are equivalent,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure that accepts one argument and returns a non-negative integer.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, it specifies the initial capacity of the hash table.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an R6RS hash table,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dsize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Returns the number of keys currently in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable key default</EM></DT>
<DD>
<P>Returns the value associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if none is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable key obj</EM></DT>
<DD>
<P>Associates the key<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>, and returns an unspecified value. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immutable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002ddelete_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable key</EM></DT>
<DD>
<P>Removes any association found for the key<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>, and returns an unspecified value. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immutable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dcontains_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-contains?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable key</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains an association for the key<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dupdate_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-update!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable key proc default</EM></DT>
<DD>
<P>Associates with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the result of calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, which must be a procedure that takes one argument, on the value currently associated<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>&#8212;or on<VAR>default</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no such association exists. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is immutable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DT><A name=index-hashtable_002dcopy-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable mutable</EM></DT>
<DD>
<P>Returns a copy of the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>. If the optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mutable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided and is a true value, the new hash table will be mutable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dclear_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-clear!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DT><A name=index-hashtable_002dclear_0021-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-clear!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable k</EM></DT>
<DD>
<P>Removes all of the associations from the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>. The optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>, which specifies a new capacity for the hash table, is accepted by Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs hashtables)</CODE>implementation, but is ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dkeys></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-keys</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Returns a vector of the keys with associations in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>, in an unspecified order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dentries></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-entries</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Return two values&#8212;a vector of the keys with associations in the hash table<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>, and a vector of the values to which these keys are mapped, in corresponding but unspecified order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dequivalence_002dfunction></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-equivalence-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Returns the equivalence predicated use by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>. This procedure returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>, respectively, for hash tables created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-eq-hashtable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-eqv-hashtable</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dhash_002dfunction></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-hash-function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Returns the hash function used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR>. For hash tables created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-eq-hashtable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-eqv-hashtable</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hashtable_002dmutable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashtable-mutable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hashtable</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hashtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mutable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A number of hash functions are provided for convenience:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-equal_002dhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>equal-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns an integer hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, based on its structure and current contents. This hash function is suitable for use with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an equivalence function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dhash-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-symbol_002dhash-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Reference">Hash Table Reference</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_002dhash-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DD>
<P>Returns an integer hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>based on its contents, ignoring case. This hash function is suitable for use with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ci=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an equivalence function.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-enums></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs" rel=next>rnrs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-hashtables" rel=prev>rnrs hashtables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-enums-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.24 rnrs enums</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs enums (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides structures and procedures for working with enumerable sets of symbols. Guile&#8217;s implementation defines an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>record type that encapsulates a finite set of distinct symbols, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>universe</EM>, and a subset of these symbols, which define the enumeration set.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-1 list library provides a number of procedures for performing set operations on lists; Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs enums)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implementation makes use of several of them. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Set-Operations">SRFI-1 Set Operations</A>, for more information.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002denumeration></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-enumeration</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol-list</EM></DT>
<DD>
<P>Returns a new enum-set whose universe and enumeration set are both equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol-list</VAR>, a list of symbols.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002duniverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-universe</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM></DT>
<DD>
<P>Returns an enum-set representing the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>, an enum-set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dindexer></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-indexer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM></DT>
<DD>
<P>Returns a procedure that takes a single argument and returns the zero-indexed position of that argument in the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if its argument is not a member of that universe.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dconstructor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-constructor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM></DT>
<DD>
<P>Returns a procedure that takes a single argument, a list of symbols from the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>, an enum-set, and returns a new enum-set with the same universe that represents a subset containing the specified symbols.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM></DT>
<DD>
<P>Returns a list containing the symbols of the set represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>, an enum-set, in the order that they appear in the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dmember_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-member?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol enum-set</EM></DT>
<DT><A name=index-enum_002dset_002dsubset_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-subset?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DT><A name=index-enum_002dset_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DD>
<P>These procedures test for membership of symbols and enum-sets in other enum-sets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum-set-member?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a member of the subset specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum-set-subset?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only if the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a subset of the universe of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and every symbol in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum-set=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if and only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a subset, as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum-set-subset?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and vice versa.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dunion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-union</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DT><A name=index-enum_002dset_002dintersection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DT><A name=index-enum_002dset_002ddifference></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DD>
<P>These procedures return, respectively, the union, intersection, and difference of their enum-set arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dcomplement></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-complement</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>&#8217;s complement (an enum-set), with regard to its universe.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enum_002dset_002dprojection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enum-set-projection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>enum-set1 enum-set2</EM></DT>
<DD>
<P>Returns the projection of the enum-set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>onto the universe of the enum-set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set2</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002denumeration></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-enumeration</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type-name (symbol ...) constructor-syntax</EM></DT>
<DD>
<P>Evaluates to two new definitions: A constructor bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>constructor-syntax</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that behaves similarly to constructors created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum-set-constructor</CODE>, above, and creates new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enum-set</VAR>s in the universe specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(symbol ...)</CODE>; and a &#8220;predicate macro&#8221; bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type-name</VAR>, which has the following form:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(<VAR>type-name</VAR> sym)
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a member of the universe specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>s above, this form evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>. Otherwise, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;syntax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition is raised.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-eval" rel=next>rnrs eval</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-enums" rel=prev>rnrs enums</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.25 rnrs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library is a composite of all of the other R6RS standard libraries&#8212;it imports and re-exports all of their exported procedures and syntactic forms&#8212;with the exception of the following libraries:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CODE>(rnrs eval (6))</CODE></LI>
<LI><CODE>(rnrs mutable-pairs (6))</CODE></LI>
<LI><CODE>(rnrs mutable-strings (6))</CODE></LI>
<LI><CODE>(rnrs r5rs (6))</CODE></LI></UL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-eval></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dpairs" rel=next>rnrs mutable-pairs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs" rel=prev>rnrs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-eval-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.26 rnrs eval</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs eval (6)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides procedures for performing &#8220;on-the-fly&#8221; evaluation of expressions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eval-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eval</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expression environment</EM></DT>
<DD>
<P>Evaluates<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>, which must be a datum representation of a valid Scheme expression, in the environment specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>environment</VAR>. This procedure is identical to the one provided by Guile&#8217;s code library; See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fly-Evaluation">Fly Evaluation</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-environment-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>import-spec ...</EM></DT>
<DD>
<P>Constructs and returns a new environment based on the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>import-spec</VAR>s, which must be datum representations of the import specifications used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>import</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Libraries">R6RS Libraries</A>, for documentation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-mutable_002dpairs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dstrings" rel=next>rnrs mutable-strings</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-eval" rel=prev>rnrs eval</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-mutable_002dpairs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.27 rnrs mutable-pairs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs mutable-pairs (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-car!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-cdr!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, which allow the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields of a pair to be modified.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are identical to the ones provide by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pairs">Pairs</A>, for documentation. All pairs in Guile are mutable; consequently, these procedures will never throw the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition described in the R6RS libraries specification.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-mutable_002dstrings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-r5rs" rel=next>rnrs r5rs</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dpairs" rel=prev>rnrs mutable-pairs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-mutable_002dstrings-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.28 rnrs mutable-strings</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs mutable-strings (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library provides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-fill!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, which allow the content of strings to be modified &#8220;in-place.&#8221;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Modification">String Modification</A>, for documentation. All strings in Guile are mutable; consequently, these procedures will never throw the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;assertion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>condition described in the R6RS libraries specification.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-r5rs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-mutable_002dstrings" rel=prev>rnrs mutable-strings</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Standard-Libraries" rel=up>R6RS Standard Libraries</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=rnrs-r5rs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>7.6.2.29 rnrs r5rs</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs r5rs (6))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library exports bindings for some procedures present in R5RS but omitted from the R6RS base library specification.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_002d_003einexact-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact-&gt;inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-inexact_002d_003eexact-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inexact-&gt;exact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exactness">Exactness</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-quotient-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2</EM></DT>
<DT><A name=index-remainder-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2</EM></DT>
<DT><A name=index-modulo-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modulo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Integer-Operations">Integer Operations</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delay-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delay</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DT><A name=index-force-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>force</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>promise</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delay</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure are identical to their counterparts in Guile&#8217;s core library. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Delayed-Evaluation">Delayed Evaluation</A>, for documentation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-null_002denvironment-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null-environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scheme_002dreport_002denvironment-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scheme-report-environment</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DD>
<P>These procedures are identical to the ones provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 r5rs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>Guile module. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Environments">Environments</A>, for documentation.</P></DD></DL>